// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC16LF15355_H_
#define _PIC16LF15355_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC16LF15355
 */
#ifndef _XC_H_
#warning Header file pic16lf15355.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Device Information Area (DIA) Table
 */

#define DIA_MUI                                             0x8100
#define DIA_MUI0                                            0x8100
#define DIA_MUI1                                            0x8101
#define DIA_MUI2                                            0x8102
#define DIA_MUI3                                            0x8103
#define DIA_MUI4                                            0x8104
#define DIA_MUI5                                            0x8105
#define DIA_MUI6                                            0x8106
#define DIA_MUI7                                            0x8107
#define DIA_MUI8                                            0x8108
#define DIA_MUI9                                            0x8109

#define DIA_EUI                                             0x810A
#define DIA_EUI0                                            0x810A
#define DIA_EUI1                                            0x810B
#define DIA_EUI2                                            0x810C
#define DIA_EUI3                                            0x810D
#define DIA_EUI4                                            0x810E
#define DIA_EUI5                                            0x810F
#define DIA_EUI6                                            0x8110
#define DIA_EUI7                                            0x8111

#define DIA_TSLR                                            0x8112
#define DIA_TSLR1                                           0x8112
#define DIA_TSLR2                                           0x8113
#define DIA_TSLR3                                           0x8114

#define DIA_TSHR                                            0x8115
#define DIA_TSHR1                                           0x8115
#define DIA_TSHR2                                           0x8116
#define DIA_TSHR3                                           0x8117

#define DIA_FVRA                                            0x8118
#define DIA_FVRA1X                                          0x8118
#define DIA_FVRA2X                                          0x8119
#define DIA_FVRA4X                                          0x811A

#define DIA_FVRC                                            0x811B
#define DIA_FVRC1X                                          0x811B
#define DIA_FVRC2X                                          0x811C
#define DIA_FVRC4X                                          0x811D

/*
 * Device Configuration Information (DCI) Table
 */

#define DCI_ERSIZ                                           0x8200
#define DCI_WLSIZ                                           0x8201
#define DCI_URSIZ                                           0x8202
#define DCI_EESIZ                                           0x8203
#define DCI_PCNT                                            0x8204

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :6;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
        unsigned BSR5                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x6
#define _BSR_BSR_LENGTH                                     0x6
#define _BSR_BSR_MASK                                       0x3F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10
#define _BSR_BSR5_POSN                                      0x5
#define _BSR_BSR5_POSITION                                  0x5
#define _BSR_BSR5_SIZE                                      0x1
#define _BSR_BSR5_LENGTH                                    0x1
#define _BSR_BSR5_MASK                                      0x20

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTEDG                 :1;
        unsigned                        :5;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_INTEDG_POSN                                 0x0
#define _INTCON_INTEDG_POSITION                             0x0
#define _INTCON_INTEDG_SIZE                                 0x1
#define _INTCON_INTEDG_LENGTH                               0x1
#define _INTCON_INTEDG_MASK                                 0x1
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0x00D);
#ifndef _LIB_BUILD
asm("PORTB equ 0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0x00D);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0x010);
#ifndef _LIB_BUILD
asm("PORTE equ 010h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned RE3                    :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0x010);
// bitfield macros
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x012);
#ifndef _LIB_BUILD
asm("TRISA equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x012);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0x013);
#ifndef _LIB_BUILD
asm("TRISB equ 013h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0x013);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x014);
#ifndef _LIB_BUILD
asm("TRISC equ 014h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x014);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: TRISE
#define TRISE TRISE
extern volatile unsigned char           TRISE               __at(0x016);
#ifndef _LIB_BUILD
asm("TRISE equ 016h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned TRISE3                 :1;
    };
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits __at(0x016);
// bitfield macros
#define _TRISE_TRISE3_POSN                                  0x3
#define _TRISE_TRISE3_POSITION                              0x3
#define _TRISE_TRISE3_SIZE                                  0x1
#define _TRISE_TRISE3_LENGTH                                0x1
#define _TRISE_TRISE3_MASK                                  0x8

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x018);
#ifndef _LIB_BUILD
asm("LATA equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x018);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0x019);
#ifndef _LIB_BUILD
asm("LATB equ 019h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0x019);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x01A);
#ifndef _LIB_BUILD
asm("LATC equ 01Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x01A);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x09B);
#ifndef _LIB_BUILD
asm("ADRES equ 09Bh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x09B);
#ifndef _LIB_BUILD
asm("ADRESL equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESL                 :8;
    };
    struct {
        unsigned ADRESL0                :1;
        unsigned ADRESL1                :1;
        unsigned ADRESL2                :1;
        unsigned ADRESL3                :1;
        unsigned ADRESL4                :1;
        unsigned ADRESL5                :1;
        unsigned ADRESL6                :1;
        unsigned ADRESL7                :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x09B);
// bitfield macros
#define _ADRESL_ADRESL_POSN                                 0x0
#define _ADRESL_ADRESL_POSITION                             0x0
#define _ADRESL_ADRESL_SIZE                                 0x8
#define _ADRESL_ADRESL_LENGTH                               0x8
#define _ADRESL_ADRESL_MASK                                 0xFF
#define _ADRESL_ADRESL0_POSN                                0x0
#define _ADRESL_ADRESL0_POSITION                            0x0
#define _ADRESL_ADRESL0_SIZE                                0x1
#define _ADRESL_ADRESL0_LENGTH                              0x1
#define _ADRESL_ADRESL0_MASK                                0x1
#define _ADRESL_ADRESL1_POSN                                0x1
#define _ADRESL_ADRESL1_POSITION                            0x1
#define _ADRESL_ADRESL1_SIZE                                0x1
#define _ADRESL_ADRESL1_LENGTH                              0x1
#define _ADRESL_ADRESL1_MASK                                0x2
#define _ADRESL_ADRESL2_POSN                                0x2
#define _ADRESL_ADRESL2_POSITION                            0x2
#define _ADRESL_ADRESL2_SIZE                                0x1
#define _ADRESL_ADRESL2_LENGTH                              0x1
#define _ADRESL_ADRESL2_MASK                                0x4
#define _ADRESL_ADRESL3_POSN                                0x3
#define _ADRESL_ADRESL3_POSITION                            0x3
#define _ADRESL_ADRESL3_SIZE                                0x1
#define _ADRESL_ADRESL3_LENGTH                              0x1
#define _ADRESL_ADRESL3_MASK                                0x8
#define _ADRESL_ADRESL4_POSN                                0x4
#define _ADRESL_ADRESL4_POSITION                            0x4
#define _ADRESL_ADRESL4_SIZE                                0x1
#define _ADRESL_ADRESL4_LENGTH                              0x1
#define _ADRESL_ADRESL4_MASK                                0x10
#define _ADRESL_ADRESL5_POSN                                0x5
#define _ADRESL_ADRESL5_POSITION                            0x5
#define _ADRESL_ADRESL5_SIZE                                0x1
#define _ADRESL_ADRESL5_LENGTH                              0x1
#define _ADRESL_ADRESL5_MASK                                0x20
#define _ADRESL_ADRESL6_POSN                                0x6
#define _ADRESL_ADRESL6_POSITION                            0x6
#define _ADRESL_ADRESL6_SIZE                                0x1
#define _ADRESL_ADRESL6_LENGTH                              0x1
#define _ADRESL_ADRESL6_MASK                                0x40
#define _ADRESL_ADRESL7_POSN                                0x7
#define _ADRESL_ADRESL7_POSITION                            0x7
#define _ADRESL_ADRESL7_SIZE                                0x1
#define _ADRESL_ADRESL7_LENGTH                              0x1
#define _ADRESL_ADRESL7_MASK                                0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x09C);
#ifndef _LIB_BUILD
asm("ADRESH equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESH                 :8;
    };
    struct {
        unsigned ADRESH0                :1;
        unsigned ADRESH1                :1;
        unsigned ADRESH2                :1;
        unsigned ADRESH3                :1;
        unsigned ADRESH4                :1;
        unsigned ADRESH5                :1;
        unsigned ADRESH6                :1;
        unsigned ADRESH7                :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x09C);
// bitfield macros
#define _ADRESH_ADRESH_POSN                                 0x0
#define _ADRESH_ADRESH_POSITION                             0x0
#define _ADRESH_ADRESH_SIZE                                 0x8
#define _ADRESH_ADRESH_LENGTH                               0x8
#define _ADRESH_ADRESH_MASK                                 0xFF
#define _ADRESH_ADRESH0_POSN                                0x0
#define _ADRESH_ADRESH0_POSITION                            0x0
#define _ADRESH_ADRESH0_SIZE                                0x1
#define _ADRESH_ADRESH0_LENGTH                              0x1
#define _ADRESH_ADRESH0_MASK                                0x1
#define _ADRESH_ADRESH1_POSN                                0x1
#define _ADRESH_ADRESH1_POSITION                            0x1
#define _ADRESH_ADRESH1_SIZE                                0x1
#define _ADRESH_ADRESH1_LENGTH                              0x1
#define _ADRESH_ADRESH1_MASK                                0x2
#define _ADRESH_ADRESH2_POSN                                0x2
#define _ADRESH_ADRESH2_POSITION                            0x2
#define _ADRESH_ADRESH2_SIZE                                0x1
#define _ADRESH_ADRESH2_LENGTH                              0x1
#define _ADRESH_ADRESH2_MASK                                0x4
#define _ADRESH_ADRESH3_POSN                                0x3
#define _ADRESH_ADRESH3_POSITION                            0x3
#define _ADRESH_ADRESH3_SIZE                                0x1
#define _ADRESH_ADRESH3_LENGTH                              0x1
#define _ADRESH_ADRESH3_MASK                                0x8
#define _ADRESH_ADRESH4_POSN                                0x4
#define _ADRESH_ADRESH4_POSITION                            0x4
#define _ADRESH_ADRESH4_SIZE                                0x1
#define _ADRESH_ADRESH4_LENGTH                              0x1
#define _ADRESH_ADRESH4_MASK                                0x10
#define _ADRESH_ADRESH5_POSN                                0x5
#define _ADRESH_ADRESH5_POSITION                            0x5
#define _ADRESH_ADRESH5_SIZE                                0x1
#define _ADRESH_ADRESH5_LENGTH                              0x1
#define _ADRESH_ADRESH5_MASK                                0x20
#define _ADRESH_ADRESH6_POSN                                0x6
#define _ADRESH_ADRESH6_POSITION                            0x6
#define _ADRESH_ADRESH6_SIZE                                0x1
#define _ADRESH_ADRESH6_LENGTH                              0x1
#define _ADRESH_ADRESH6_MASK                                0x40
#define _ADRESH_ADRESH7_POSN                                0x7
#define _ADRESH_ADRESH7_POSITION                            0x7
#define _ADRESH_ADRESH7_SIZE                                0x1
#define _ADRESH_ADRESH7_LENGTH                              0x1
#define _ADRESH_ADRESH7_MASK                                0x80

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x09D);
#ifndef _LIB_BUILD
asm("ADCON0 equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADON                   :1;
        unsigned GOnDONE                :1;
        unsigned CHS0                   :1;
        unsigned CHS1                   :1;
        unsigned CHS2                   :1;
        unsigned CHS3                   :1;
        unsigned CHS4                   :1;
        unsigned CHS5                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned GO                     :1;
        unsigned CHS                    :6;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x09D);
// bitfield macros
#define _ADCON0_ADON_POSN                                   0x0
#define _ADCON0_ADON_POSITION                               0x0
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x1
#define _ADCON0_GOnDONE_POSN                                0x1
#define _ADCON0_GOnDONE_POSITION                            0x1
#define _ADCON0_GOnDONE_SIZE                                0x1
#define _ADCON0_GOnDONE_LENGTH                              0x1
#define _ADCON0_GOnDONE_MASK                                0x2
#define _ADCON0_CHS0_POSN                                   0x2
#define _ADCON0_CHS0_POSITION                               0x2
#define _ADCON0_CHS0_SIZE                                   0x1
#define _ADCON0_CHS0_LENGTH                                 0x1
#define _ADCON0_CHS0_MASK                                   0x4
#define _ADCON0_CHS1_POSN                                   0x3
#define _ADCON0_CHS1_POSITION                               0x3
#define _ADCON0_CHS1_SIZE                                   0x1
#define _ADCON0_CHS1_LENGTH                                 0x1
#define _ADCON0_CHS1_MASK                                   0x8
#define _ADCON0_CHS2_POSN                                   0x4
#define _ADCON0_CHS2_POSITION                               0x4
#define _ADCON0_CHS2_SIZE                                   0x1
#define _ADCON0_CHS2_LENGTH                                 0x1
#define _ADCON0_CHS2_MASK                                   0x10
#define _ADCON0_CHS3_POSN                                   0x5
#define _ADCON0_CHS3_POSITION                               0x5
#define _ADCON0_CHS3_SIZE                                   0x1
#define _ADCON0_CHS3_LENGTH                                 0x1
#define _ADCON0_CHS3_MASK                                   0x20
#define _ADCON0_CHS4_POSN                                   0x6
#define _ADCON0_CHS4_POSITION                               0x6
#define _ADCON0_CHS4_SIZE                                   0x1
#define _ADCON0_CHS4_LENGTH                                 0x1
#define _ADCON0_CHS4_MASK                                   0x40
#define _ADCON0_CHS5_POSN                                   0x7
#define _ADCON0_CHS5_POSITION                               0x7
#define _ADCON0_CHS5_SIZE                                   0x1
#define _ADCON0_CHS5_LENGTH                                 0x1
#define _ADCON0_CHS5_MASK                                   0x80
#define _ADCON0_GO_POSN                                     0x1
#define _ADCON0_GO_POSITION                                 0x1
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x2
#define _ADCON0_CHS_POSN                                    0x2
#define _ADCON0_CHS_POSITION                                0x2
#define _ADCON0_CHS_SIZE                                    0x6
#define _ADCON0_CHS_LENGTH                                  0x6
#define _ADCON0_CHS_MASK                                    0xFC

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x09E);
#ifndef _LIB_BUILD
asm("ADCON1 equ 09Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
        unsigned                        :2;
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADFM                   :1;
    };
    struct {
        unsigned ADPREF                 :2;
        unsigned                        :2;
        unsigned ADCS                   :3;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x09E);
// bitfield macros
#define _ADCON1_ADPREF0_POSN                                0x0
#define _ADCON1_ADPREF0_POSITION                            0x0
#define _ADCON1_ADPREF0_SIZE                                0x1
#define _ADCON1_ADPREF0_LENGTH                              0x1
#define _ADCON1_ADPREF0_MASK                                0x1
#define _ADCON1_ADPREF1_POSN                                0x1
#define _ADCON1_ADPREF1_POSITION                            0x1
#define _ADCON1_ADPREF1_SIZE                                0x1
#define _ADCON1_ADPREF1_LENGTH                              0x1
#define _ADCON1_ADPREF1_MASK                                0x2
#define _ADCON1_ADCS0_POSN                                  0x4
#define _ADCON1_ADCS0_POSITION                              0x4
#define _ADCON1_ADCS0_SIZE                                  0x1
#define _ADCON1_ADCS0_LENGTH                                0x1
#define _ADCON1_ADCS0_MASK                                  0x10
#define _ADCON1_ADCS1_POSN                                  0x5
#define _ADCON1_ADCS1_POSITION                              0x5
#define _ADCON1_ADCS1_SIZE                                  0x1
#define _ADCON1_ADCS1_LENGTH                                0x1
#define _ADCON1_ADCS1_MASK                                  0x20
#define _ADCON1_ADCS2_POSN                                  0x6
#define _ADCON1_ADCS2_POSITION                              0x6
#define _ADCON1_ADCS2_SIZE                                  0x1
#define _ADCON1_ADCS2_LENGTH                                0x1
#define _ADCON1_ADCS2_MASK                                  0x40
#define _ADCON1_ADFM_POSN                                   0x7
#define _ADCON1_ADFM_POSITION                               0x7
#define _ADCON1_ADFM_SIZE                                   0x1
#define _ADCON1_ADFM_LENGTH                                 0x1
#define _ADCON1_ADFM_MASK                                   0x80
#define _ADCON1_ADPREF_POSN                                 0x0
#define _ADCON1_ADPREF_POSITION                             0x0
#define _ADCON1_ADPREF_SIZE                                 0x2
#define _ADCON1_ADPREF_LENGTH                               0x2
#define _ADCON1_ADPREF_MASK                                 0x3
#define _ADCON1_ADCS_POSN                                   0x4
#define _ADCON1_ADCS_POSITION                               0x4
#define _ADCON1_ADCS_SIZE                                   0x3
#define _ADCON1_ADCS_LENGTH                                 0x3
#define _ADCON1_ADCS_MASK                                   0x70

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x09F);
#ifndef _LIB_BUILD
asm("ADACT equ 09Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
    };
    struct {
        unsigned ADACT                  :5;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x09F);
// bitfield macros
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x5
#define _ADACT_ADACT_LENGTH                                 0x5
#define _ADACT_ADACT_MASK                                   0x1F

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x119);
#ifndef _LIB_BUILD
asm("RC1REG equ 0119h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG equ 0119h");
#endif
extern volatile unsigned char           RCREG1              __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0119h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x119);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0x119);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0x119);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x11A);
#ifndef _LIB_BUILD
asm("TX1REG equ 011Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 011Ah");
#endif
extern volatile unsigned char           TXREG               __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG equ 011Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x11A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0x11A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0x11A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 011Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 011Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG equ 011Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 011Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 011Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x11B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0x11B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0x11B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0x11B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x11C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 011Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 011Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 011Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x11C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0x11C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0x11C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x11D);
#ifndef _LIB_BUILD
asm("RC1STA equ 011Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 011Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA equ 011Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x11D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0x11D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0x11D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x11E);
#ifndef _LIB_BUILD
asm("TX1STA equ 011Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 011Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA equ 011Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x11E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0x11E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0x11E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 011Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 011Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x11F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0x11F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0x11F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0x11F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0x11F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x18C);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x18C);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x18D);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 018Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x18D);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x18E);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x18E);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x18F);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 018Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ1              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned                        :2;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned                        :2;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x18F);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x190);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0190h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x190);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x191);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x191);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x192);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x192);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: SSP2BUF
#define SSP2BUF SSP2BUF
extern volatile unsigned char           SSP2BUF             __at(0x196);
#ifndef _LIB_BUILD
asm("SSP2BUF equ 0196h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP2BUFbits_t;
extern volatile SSP2BUFbits_t SSP2BUFbits __at(0x196);
// bitfield macros
#define _SSP2BUF_SSPBUF_POSN                                0x0
#define _SSP2BUF_SSPBUF_POSITION                            0x0
#define _SSP2BUF_SSPBUF_SIZE                                0x8
#define _SSP2BUF_SSPBUF_LENGTH                              0x8
#define _SSP2BUF_SSPBUF_MASK                                0xFF

// Register: SSP2ADD
#define SSP2ADD SSP2ADD
extern volatile unsigned char           SSP2ADD             __at(0x197);
#ifndef _LIB_BUILD
asm("SSP2ADD equ 0197h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK02                  :1;
        unsigned MSK12                  :1;
        unsigned MSK22                  :1;
        unsigned MSK32                  :1;
        unsigned MSK42                  :1;
        unsigned MSK52                  :1;
        unsigned MSK62                  :1;
        unsigned MSK72                  :1;
    };
} SSP2ADDbits_t;
extern volatile SSP2ADDbits_t SSP2ADDbits __at(0x197);
// bitfield macros
#define _SSP2ADD_SSPADD_POSN                                0x0
#define _SSP2ADD_SSPADD_POSITION                            0x0
#define _SSP2ADD_SSPADD_SIZE                                0x8
#define _SSP2ADD_SSPADD_LENGTH                              0x8
#define _SSP2ADD_SSPADD_MASK                                0xFF
#define _SSP2ADD_MSK0_POSN                                  0x0
#define _SSP2ADD_MSK0_POSITION                              0x0
#define _SSP2ADD_MSK0_SIZE                                  0x1
#define _SSP2ADD_MSK0_LENGTH                                0x1
#define _SSP2ADD_MSK0_MASK                                  0x1
#define _SSP2ADD_MSK1_POSN                                  0x1
#define _SSP2ADD_MSK1_POSITION                              0x1
#define _SSP2ADD_MSK1_SIZE                                  0x1
#define _SSP2ADD_MSK1_LENGTH                                0x1
#define _SSP2ADD_MSK1_MASK                                  0x2
#define _SSP2ADD_MSK2_POSN                                  0x2
#define _SSP2ADD_MSK2_POSITION                              0x2
#define _SSP2ADD_MSK2_SIZE                                  0x1
#define _SSP2ADD_MSK2_LENGTH                                0x1
#define _SSP2ADD_MSK2_MASK                                  0x4
#define _SSP2ADD_MSK3_POSN                                  0x3
#define _SSP2ADD_MSK3_POSITION                              0x3
#define _SSP2ADD_MSK3_SIZE                                  0x1
#define _SSP2ADD_MSK3_LENGTH                                0x1
#define _SSP2ADD_MSK3_MASK                                  0x8
#define _SSP2ADD_MSK4_POSN                                  0x4
#define _SSP2ADD_MSK4_POSITION                              0x4
#define _SSP2ADD_MSK4_SIZE                                  0x1
#define _SSP2ADD_MSK4_LENGTH                                0x1
#define _SSP2ADD_MSK4_MASK                                  0x10
#define _SSP2ADD_MSK5_POSN                                  0x5
#define _SSP2ADD_MSK5_POSITION                              0x5
#define _SSP2ADD_MSK5_SIZE                                  0x1
#define _SSP2ADD_MSK5_LENGTH                                0x1
#define _SSP2ADD_MSK5_MASK                                  0x20
#define _SSP2ADD_MSK6_POSN                                  0x6
#define _SSP2ADD_MSK6_POSITION                              0x6
#define _SSP2ADD_MSK6_SIZE                                  0x1
#define _SSP2ADD_MSK6_LENGTH                                0x1
#define _SSP2ADD_MSK6_MASK                                  0x40
#define _SSP2ADD_MSK7_POSN                                  0x7
#define _SSP2ADD_MSK7_POSITION                              0x7
#define _SSP2ADD_MSK7_SIZE                                  0x1
#define _SSP2ADD_MSK7_LENGTH                                0x1
#define _SSP2ADD_MSK7_MASK                                  0x80
#define _SSP2ADD_MSK02_POSN                                 0x0
#define _SSP2ADD_MSK02_POSITION                             0x0
#define _SSP2ADD_MSK02_SIZE                                 0x1
#define _SSP2ADD_MSK02_LENGTH                               0x1
#define _SSP2ADD_MSK02_MASK                                 0x1
#define _SSP2ADD_MSK12_POSN                                 0x1
#define _SSP2ADD_MSK12_POSITION                             0x1
#define _SSP2ADD_MSK12_SIZE                                 0x1
#define _SSP2ADD_MSK12_LENGTH                               0x1
#define _SSP2ADD_MSK12_MASK                                 0x2
#define _SSP2ADD_MSK22_POSN                                 0x2
#define _SSP2ADD_MSK22_POSITION                             0x2
#define _SSP2ADD_MSK22_SIZE                                 0x1
#define _SSP2ADD_MSK22_LENGTH                               0x1
#define _SSP2ADD_MSK22_MASK                                 0x4
#define _SSP2ADD_MSK32_POSN                                 0x3
#define _SSP2ADD_MSK32_POSITION                             0x3
#define _SSP2ADD_MSK32_SIZE                                 0x1
#define _SSP2ADD_MSK32_LENGTH                               0x1
#define _SSP2ADD_MSK32_MASK                                 0x8
#define _SSP2ADD_MSK42_POSN                                 0x4
#define _SSP2ADD_MSK42_POSITION                             0x4
#define _SSP2ADD_MSK42_SIZE                                 0x1
#define _SSP2ADD_MSK42_LENGTH                               0x1
#define _SSP2ADD_MSK42_MASK                                 0x10
#define _SSP2ADD_MSK52_POSN                                 0x5
#define _SSP2ADD_MSK52_POSITION                             0x5
#define _SSP2ADD_MSK52_SIZE                                 0x1
#define _SSP2ADD_MSK52_LENGTH                               0x1
#define _SSP2ADD_MSK52_MASK                                 0x20
#define _SSP2ADD_MSK62_POSN                                 0x6
#define _SSP2ADD_MSK62_POSITION                             0x6
#define _SSP2ADD_MSK62_SIZE                                 0x1
#define _SSP2ADD_MSK62_LENGTH                               0x1
#define _SSP2ADD_MSK62_MASK                                 0x40
#define _SSP2ADD_MSK72_POSN                                 0x7
#define _SSP2ADD_MSK72_POSITION                             0x7
#define _SSP2ADD_MSK72_SIZE                                 0x1
#define _SSP2ADD_MSK72_LENGTH                               0x1
#define _SSP2ADD_MSK72_MASK                                 0x80

// Register: SSP2MSK
#define SSP2MSK SSP2MSK
extern volatile unsigned char           SSP2MSK             __at(0x198);
#ifndef _LIB_BUILD
asm("SSP2MSK equ 0198h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP2MSKbits_t;
extern volatile SSP2MSKbits_t SSP2MSKbits __at(0x198);
// bitfield macros
#define _SSP2MSK_SSPMSK_POSN                                0x0
#define _SSP2MSK_SSPMSK_POSITION                            0x0
#define _SSP2MSK_SSPMSK_SIZE                                0x8
#define _SSP2MSK_SSPMSK_LENGTH                              0x8
#define _SSP2MSK_SSPMSK_MASK                                0xFF
#define _SSP2MSK_MSK0_POSN                                  0x0
#define _SSP2MSK_MSK0_POSITION                              0x0
#define _SSP2MSK_MSK0_SIZE                                  0x1
#define _SSP2MSK_MSK0_LENGTH                                0x1
#define _SSP2MSK_MSK0_MASK                                  0x1
#define _SSP2MSK_MSK1_POSN                                  0x1
#define _SSP2MSK_MSK1_POSITION                              0x1
#define _SSP2MSK_MSK1_SIZE                                  0x1
#define _SSP2MSK_MSK1_LENGTH                                0x1
#define _SSP2MSK_MSK1_MASK                                  0x2
#define _SSP2MSK_MSK2_POSN                                  0x2
#define _SSP2MSK_MSK2_POSITION                              0x2
#define _SSP2MSK_MSK2_SIZE                                  0x1
#define _SSP2MSK_MSK2_LENGTH                                0x1
#define _SSP2MSK_MSK2_MASK                                  0x4
#define _SSP2MSK_MSK3_POSN                                  0x3
#define _SSP2MSK_MSK3_POSITION                              0x3
#define _SSP2MSK_MSK3_SIZE                                  0x1
#define _SSP2MSK_MSK3_LENGTH                                0x1
#define _SSP2MSK_MSK3_MASK                                  0x8
#define _SSP2MSK_MSK4_POSN                                  0x4
#define _SSP2MSK_MSK4_POSITION                              0x4
#define _SSP2MSK_MSK4_SIZE                                  0x1
#define _SSP2MSK_MSK4_LENGTH                                0x1
#define _SSP2MSK_MSK4_MASK                                  0x10
#define _SSP2MSK_MSK5_POSN                                  0x5
#define _SSP2MSK_MSK5_POSITION                              0x5
#define _SSP2MSK_MSK5_SIZE                                  0x1
#define _SSP2MSK_MSK5_LENGTH                                0x1
#define _SSP2MSK_MSK5_MASK                                  0x20
#define _SSP2MSK_MSK6_POSN                                  0x6
#define _SSP2MSK_MSK6_POSITION                              0x6
#define _SSP2MSK_MSK6_SIZE                                  0x1
#define _SSP2MSK_MSK6_LENGTH                                0x1
#define _SSP2MSK_MSK6_MASK                                  0x40
#define _SSP2MSK_MSK7_POSN                                  0x7
#define _SSP2MSK_MSK7_POSITION                              0x7
#define _SSP2MSK_MSK7_SIZE                                  0x1
#define _SSP2MSK_MSK7_LENGTH                                0x1
#define _SSP2MSK_MSK7_MASK                                  0x80

// Register: SSP2STAT
#define SSP2STAT SSP2STAT
extern volatile unsigned char           SSP2STAT            __at(0x199);
#ifndef _LIB_BUILD
asm("SSP2STAT equ 0199h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF2                    :1;
        unsigned UA2                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE2                   :1;
        unsigned SMP2                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START2                 :1;
        unsigned STOP2                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW2                    :1;
        unsigned I2C_START2             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ2              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS2          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE2            :1;
        unsigned                        :2;
        unsigned D_A2                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W2                   :1;
        unsigned                        :2;
        unsigned D_nA2                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW2                  :1;
        unsigned                        :2;
        unsigned I2C_DAT2               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE2                :1;
        unsigned                        :2;
        unsigned nADDRESS2              :1;
    };
} SSP2STATbits_t;
extern volatile SSP2STATbits_t SSP2STATbits __at(0x199);
// bitfield macros
#define _SSP2STAT_BF_POSN                                   0x0
#define _SSP2STAT_BF_POSITION                               0x0
#define _SSP2STAT_BF_SIZE                                   0x1
#define _SSP2STAT_BF_LENGTH                                 0x1
#define _SSP2STAT_BF_MASK                                   0x1
#define _SSP2STAT_UA_POSN                                   0x1
#define _SSP2STAT_UA_POSITION                               0x1
#define _SSP2STAT_UA_SIZE                                   0x1
#define _SSP2STAT_UA_LENGTH                                 0x1
#define _SSP2STAT_UA_MASK                                   0x2
#define _SSP2STAT_R_nW_POSN                                 0x2
#define _SSP2STAT_R_nW_POSITION                             0x2
#define _SSP2STAT_R_nW_SIZE                                 0x1
#define _SSP2STAT_R_nW_LENGTH                               0x1
#define _SSP2STAT_R_nW_MASK                                 0x4
#define _SSP2STAT_S_POSN                                    0x3
#define _SSP2STAT_S_POSITION                                0x3
#define _SSP2STAT_S_SIZE                                    0x1
#define _SSP2STAT_S_LENGTH                                  0x1
#define _SSP2STAT_S_MASK                                    0x8
#define _SSP2STAT_P_POSN                                    0x4
#define _SSP2STAT_P_POSITION                                0x4
#define _SSP2STAT_P_SIZE                                    0x1
#define _SSP2STAT_P_LENGTH                                  0x1
#define _SSP2STAT_P_MASK                                    0x10
#define _SSP2STAT_D_nA_POSN                                 0x5
#define _SSP2STAT_D_nA_POSITION                             0x5
#define _SSP2STAT_D_nA_SIZE                                 0x1
#define _SSP2STAT_D_nA_LENGTH                               0x1
#define _SSP2STAT_D_nA_MASK                                 0x20
#define _SSP2STAT_CKE_POSN                                  0x6
#define _SSP2STAT_CKE_POSITION                              0x6
#define _SSP2STAT_CKE_SIZE                                  0x1
#define _SSP2STAT_CKE_LENGTH                                0x1
#define _SSP2STAT_CKE_MASK                                  0x40
#define _SSP2STAT_SMP_POSN                                  0x7
#define _SSP2STAT_SMP_POSITION                              0x7
#define _SSP2STAT_SMP_SIZE                                  0x1
#define _SSP2STAT_SMP_LENGTH                                0x1
#define _SSP2STAT_SMP_MASK                                  0x80
#define _SSP2STAT_R_W_POSN                                  0x2
#define _SSP2STAT_R_W_POSITION                              0x2
#define _SSP2STAT_R_W_SIZE                                  0x1
#define _SSP2STAT_R_W_LENGTH                                0x1
#define _SSP2STAT_R_W_MASK                                  0x4
#define _SSP2STAT_D_A_POSN                                  0x5
#define _SSP2STAT_D_A_POSITION                              0x5
#define _SSP2STAT_D_A_SIZE                                  0x1
#define _SSP2STAT_D_A_LENGTH                                0x1
#define _SSP2STAT_D_A_MASK                                  0x20
#define _SSP2STAT_nW_POSN                                   0x2
#define _SSP2STAT_nW_POSITION                               0x2
#define _SSP2STAT_nW_SIZE                                   0x1
#define _SSP2STAT_nW_LENGTH                                 0x1
#define _SSP2STAT_nW_MASK                                   0x4
#define _SSP2STAT_nA_POSN                                   0x5
#define _SSP2STAT_nA_POSITION                               0x5
#define _SSP2STAT_nA_SIZE                                   0x1
#define _SSP2STAT_nA_LENGTH                                 0x1
#define _SSP2STAT_nA_MASK                                   0x20
#define _SSP2STAT_nWRITE_POSN                               0x2
#define _SSP2STAT_nWRITE_POSITION                           0x2
#define _SSP2STAT_nWRITE_SIZE                               0x1
#define _SSP2STAT_nWRITE_LENGTH                             0x1
#define _SSP2STAT_nWRITE_MASK                               0x4
#define _SSP2STAT_nADDRESS_POSN                             0x5
#define _SSP2STAT_nADDRESS_POSITION                         0x5
#define _SSP2STAT_nADDRESS_SIZE                             0x1
#define _SSP2STAT_nADDRESS_LENGTH                           0x1
#define _SSP2STAT_nADDRESS_MASK                             0x20
#define _SSP2STAT_READ_WRITE_POSN                           0x2
#define _SSP2STAT_READ_WRITE_POSITION                       0x2
#define _SSP2STAT_READ_WRITE_SIZE                           0x1
#define _SSP2STAT_READ_WRITE_LENGTH                         0x1
#define _SSP2STAT_READ_WRITE_MASK                           0x4
#define _SSP2STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP2STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP2STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP2STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP2STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP2STAT_I2C_READ_POSN                             0x2
#define _SSP2STAT_I2C_READ_POSITION                         0x2
#define _SSP2STAT_I2C_READ_SIZE                             0x1
#define _SSP2STAT_I2C_READ_LENGTH                           0x1
#define _SSP2STAT_I2C_READ_MASK                             0x4
#define _SSP2STAT_I2C_START_POSN                            0x3
#define _SSP2STAT_I2C_START_POSITION                        0x3
#define _SSP2STAT_I2C_START_SIZE                            0x1
#define _SSP2STAT_I2C_START_LENGTH                          0x1
#define _SSP2STAT_I2C_START_MASK                            0x8
#define _SSP2STAT_I2C_STOP_POSN                             0x4
#define _SSP2STAT_I2C_STOP_POSITION                         0x4
#define _SSP2STAT_I2C_STOP_SIZE                             0x1
#define _SSP2STAT_I2C_STOP_LENGTH                           0x1
#define _SSP2STAT_I2C_STOP_MASK                             0x10
#define _SSP2STAT_I2C_DAT_POSN                              0x5
#define _SSP2STAT_I2C_DAT_POSITION                          0x5
#define _SSP2STAT_I2C_DAT_SIZE                              0x1
#define _SSP2STAT_I2C_DAT_LENGTH                            0x1
#define _SSP2STAT_I2C_DAT_MASK                              0x20
#define _SSP2STAT_BF2_POSN                                  0x0
#define _SSP2STAT_BF2_POSITION                              0x0
#define _SSP2STAT_BF2_SIZE                                  0x1
#define _SSP2STAT_BF2_LENGTH                                0x1
#define _SSP2STAT_BF2_MASK                                  0x1
#define _SSP2STAT_UA2_POSN                                  0x1
#define _SSP2STAT_UA2_POSITION                              0x1
#define _SSP2STAT_UA2_SIZE                                  0x1
#define _SSP2STAT_UA2_LENGTH                                0x1
#define _SSP2STAT_UA2_MASK                                  0x2
#define _SSP2STAT_R_POSN                                    0x2
#define _SSP2STAT_R_POSITION                                0x2
#define _SSP2STAT_R_SIZE                                    0x1
#define _SSP2STAT_R_LENGTH                                  0x1
#define _SSP2STAT_R_MASK                                    0x4
#define _SSP2STAT_START_POSN                                0x3
#define _SSP2STAT_START_POSITION                            0x3
#define _SSP2STAT_START_SIZE                                0x1
#define _SSP2STAT_START_LENGTH                              0x1
#define _SSP2STAT_START_MASK                                0x8
#define _SSP2STAT_STOP_POSN                                 0x4
#define _SSP2STAT_STOP_POSITION                             0x4
#define _SSP2STAT_STOP_SIZE                                 0x1
#define _SSP2STAT_STOP_LENGTH                               0x1
#define _SSP2STAT_STOP_MASK                                 0x10
#define _SSP2STAT_D_POSN                                    0x5
#define _SSP2STAT_D_POSITION                                0x5
#define _SSP2STAT_D_SIZE                                    0x1
#define _SSP2STAT_D_LENGTH                                  0x1
#define _SSP2STAT_D_MASK                                    0x20
#define _SSP2STAT_CKE2_POSN                                 0x6
#define _SSP2STAT_CKE2_POSITION                             0x6
#define _SSP2STAT_CKE2_SIZE                                 0x1
#define _SSP2STAT_CKE2_LENGTH                               0x1
#define _SSP2STAT_CKE2_MASK                                 0x40
#define _SSP2STAT_SMP2_POSN                                 0x7
#define _SSP2STAT_SMP2_POSITION                             0x7
#define _SSP2STAT_SMP2_SIZE                                 0x1
#define _SSP2STAT_SMP2_LENGTH                               0x1
#define _SSP2STAT_SMP2_MASK                                 0x80
#define _SSP2STAT_RW_POSN                                   0x2
#define _SSP2STAT_RW_POSITION                               0x2
#define _SSP2STAT_RW_SIZE                                   0x1
#define _SSP2STAT_RW_LENGTH                                 0x1
#define _SSP2STAT_RW_MASK                                   0x4
#define _SSP2STAT_START2_POSN                               0x3
#define _SSP2STAT_START2_POSITION                           0x3
#define _SSP2STAT_START2_SIZE                               0x1
#define _SSP2STAT_START2_LENGTH                             0x1
#define _SSP2STAT_START2_MASK                               0x8
#define _SSP2STAT_STOP2_POSN                                0x4
#define _SSP2STAT_STOP2_POSITION                            0x4
#define _SSP2STAT_STOP2_SIZE                                0x1
#define _SSP2STAT_STOP2_LENGTH                              0x1
#define _SSP2STAT_STOP2_MASK                                0x10
#define _SSP2STAT_DA_POSN                                   0x5
#define _SSP2STAT_DA_POSITION                               0x5
#define _SSP2STAT_DA_SIZE                                   0x1
#define _SSP2STAT_DA_LENGTH                                 0x1
#define _SSP2STAT_DA_MASK                                   0x20
#define _SSP2STAT_RW2_POSN                                  0x2
#define _SSP2STAT_RW2_POSITION                              0x2
#define _SSP2STAT_RW2_SIZE                                  0x1
#define _SSP2STAT_RW2_LENGTH                                0x1
#define _SSP2STAT_RW2_MASK                                  0x4
#define _SSP2STAT_I2C_START2_POSN                           0x3
#define _SSP2STAT_I2C_START2_POSITION                       0x3
#define _SSP2STAT_I2C_START2_SIZE                           0x1
#define _SSP2STAT_I2C_START2_LENGTH                         0x1
#define _SSP2STAT_I2C_START2_MASK                           0x8
#define _SSP2STAT_I2C_STOP2_POSN                            0x4
#define _SSP2STAT_I2C_STOP2_POSITION                        0x4
#define _SSP2STAT_I2C_STOP2_SIZE                            0x1
#define _SSP2STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP2STAT_I2C_STOP2_MASK                            0x10
#define _SSP2STAT_DA2_POSN                                  0x5
#define _SSP2STAT_DA2_POSITION                              0x5
#define _SSP2STAT_DA2_SIZE                                  0x1
#define _SSP2STAT_DA2_LENGTH                                0x1
#define _SSP2STAT_DA2_MASK                                  0x20
#define _SSP2STAT_I2C_READ2_POSN                            0x2
#define _SSP2STAT_I2C_READ2_POSITION                        0x2
#define _SSP2STAT_I2C_READ2_SIZE                            0x1
#define _SSP2STAT_I2C_READ2_LENGTH                          0x1
#define _SSP2STAT_I2C_READ2_MASK                            0x4
#define _SSP2STAT_S2_POSN                                   0x3
#define _SSP2STAT_S2_POSITION                               0x3
#define _SSP2STAT_S2_SIZE                                   0x1
#define _SSP2STAT_S2_LENGTH                                 0x1
#define _SSP2STAT_S2_MASK                                   0x8
#define _SSP2STAT_P2_POSN                                   0x4
#define _SSP2STAT_P2_POSITION                               0x4
#define _SSP2STAT_P2_SIZE                                   0x1
#define _SSP2STAT_P2_LENGTH                                 0x1
#define _SSP2STAT_P2_MASK                                   0x10
#define _SSP2STAT_DATA_ADDRESS2_POSN                        0x5
#define _SSP2STAT_DATA_ADDRESS2_POSITION                    0x5
#define _SSP2STAT_DATA_ADDRESS2_SIZE                        0x1
#define _SSP2STAT_DATA_ADDRESS2_LENGTH                      0x1
#define _SSP2STAT_DATA_ADDRESS2_MASK                        0x20
#define _SSP2STAT_READ_WRITE2_POSN                          0x2
#define _SSP2STAT_READ_WRITE2_POSITION                      0x2
#define _SSP2STAT_READ_WRITE2_SIZE                          0x1
#define _SSP2STAT_READ_WRITE2_LENGTH                        0x1
#define _SSP2STAT_READ_WRITE2_MASK                          0x4
#define _SSP2STAT_D_A2_POSN                                 0x5
#define _SSP2STAT_D_A2_POSITION                             0x5
#define _SSP2STAT_D_A2_SIZE                                 0x1
#define _SSP2STAT_D_A2_LENGTH                               0x1
#define _SSP2STAT_D_A2_MASK                                 0x20
#define _SSP2STAT_R_W2_POSN                                 0x2
#define _SSP2STAT_R_W2_POSITION                             0x2
#define _SSP2STAT_R_W2_SIZE                                 0x1
#define _SSP2STAT_R_W2_LENGTH                               0x1
#define _SSP2STAT_R_W2_MASK                                 0x4
#define _SSP2STAT_D_nA2_POSN                                0x5
#define _SSP2STAT_D_nA2_POSITION                            0x5
#define _SSP2STAT_D_nA2_SIZE                                0x1
#define _SSP2STAT_D_nA2_LENGTH                              0x1
#define _SSP2STAT_D_nA2_MASK                                0x20
#define _SSP2STAT_R_nW2_POSN                                0x2
#define _SSP2STAT_R_nW2_POSITION                            0x2
#define _SSP2STAT_R_nW2_SIZE                                0x1
#define _SSP2STAT_R_nW2_LENGTH                              0x1
#define _SSP2STAT_R_nW2_MASK                                0x4
#define _SSP2STAT_I2C_DAT2_POSN                             0x5
#define _SSP2STAT_I2C_DAT2_POSITION                         0x5
#define _SSP2STAT_I2C_DAT2_SIZE                             0x1
#define _SSP2STAT_I2C_DAT2_LENGTH                           0x1
#define _SSP2STAT_I2C_DAT2_MASK                             0x20
#define _SSP2STAT_nW2_POSN                                  0x2
#define _SSP2STAT_nW2_POSITION                              0x2
#define _SSP2STAT_nW2_SIZE                                  0x1
#define _SSP2STAT_nW2_LENGTH                                0x1
#define _SSP2STAT_nW2_MASK                                  0x4
#define _SSP2STAT_nA2_POSN                                  0x5
#define _SSP2STAT_nA2_POSITION                              0x5
#define _SSP2STAT_nA2_SIZE                                  0x1
#define _SSP2STAT_nA2_LENGTH                                0x1
#define _SSP2STAT_nA2_MASK                                  0x20
#define _SSP2STAT_nWRITE2_POSN                              0x2
#define _SSP2STAT_nWRITE2_POSITION                          0x2
#define _SSP2STAT_nWRITE2_SIZE                              0x1
#define _SSP2STAT_nWRITE2_LENGTH                            0x1
#define _SSP2STAT_nWRITE2_MASK                              0x4
#define _SSP2STAT_nADDRESS2_POSN                            0x5
#define _SSP2STAT_nADDRESS2_POSITION                        0x5
#define _SSP2STAT_nADDRESS2_SIZE                            0x1
#define _SSP2STAT_nADDRESS2_LENGTH                          0x1
#define _SSP2STAT_nADDRESS2_MASK                            0x20

// Register: SSP2CON1
#define SSP2CON1 SSP2CON1
extern volatile unsigned char           SSP2CON1            __at(0x19A);
#ifndef _LIB_BUILD
asm("SSP2CON1 equ 019Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM02                 :1;
        unsigned SSPM12                 :1;
        unsigned SSPM22                 :1;
        unsigned SSPM32                 :1;
        unsigned CKP2                   :1;
        unsigned SSPEN2                 :1;
        unsigned SSPOV2                 :1;
        unsigned WCOL2                  :1;
    };
} SSP2CON1bits_t;
extern volatile SSP2CON1bits_t SSP2CON1bits __at(0x19A);
// bitfield macros
#define _SSP2CON1_SSPM_POSN                                 0x0
#define _SSP2CON1_SSPM_POSITION                             0x0
#define _SSP2CON1_SSPM_SIZE                                 0x4
#define _SSP2CON1_SSPM_LENGTH                               0x4
#define _SSP2CON1_SSPM_MASK                                 0xF
#define _SSP2CON1_CKP_POSN                                  0x4
#define _SSP2CON1_CKP_POSITION                              0x4
#define _SSP2CON1_CKP_SIZE                                  0x1
#define _SSP2CON1_CKP_LENGTH                                0x1
#define _SSP2CON1_CKP_MASK                                  0x10
#define _SSP2CON1_SSPEN_POSN                                0x5
#define _SSP2CON1_SSPEN_POSITION                            0x5
#define _SSP2CON1_SSPEN_SIZE                                0x1
#define _SSP2CON1_SSPEN_LENGTH                              0x1
#define _SSP2CON1_SSPEN_MASK                                0x20
#define _SSP2CON1_SSPOV_POSN                                0x6
#define _SSP2CON1_SSPOV_POSITION                            0x6
#define _SSP2CON1_SSPOV_SIZE                                0x1
#define _SSP2CON1_SSPOV_LENGTH                              0x1
#define _SSP2CON1_SSPOV_MASK                                0x40
#define _SSP2CON1_WCOL_POSN                                 0x7
#define _SSP2CON1_WCOL_POSITION                             0x7
#define _SSP2CON1_WCOL_SIZE                                 0x1
#define _SSP2CON1_WCOL_LENGTH                               0x1
#define _SSP2CON1_WCOL_MASK                                 0x80
#define _SSP2CON1_SSPM0_POSN                                0x0
#define _SSP2CON1_SSPM0_POSITION                            0x0
#define _SSP2CON1_SSPM0_SIZE                                0x1
#define _SSP2CON1_SSPM0_LENGTH                              0x1
#define _SSP2CON1_SSPM0_MASK                                0x1
#define _SSP2CON1_SSPM1_POSN                                0x1
#define _SSP2CON1_SSPM1_POSITION                            0x1
#define _SSP2CON1_SSPM1_SIZE                                0x1
#define _SSP2CON1_SSPM1_LENGTH                              0x1
#define _SSP2CON1_SSPM1_MASK                                0x2
#define _SSP2CON1_SSPM2_POSN                                0x2
#define _SSP2CON1_SSPM2_POSITION                            0x2
#define _SSP2CON1_SSPM2_SIZE                                0x1
#define _SSP2CON1_SSPM2_LENGTH                              0x1
#define _SSP2CON1_SSPM2_MASK                                0x4
#define _SSP2CON1_SSPM3_POSN                                0x3
#define _SSP2CON1_SSPM3_POSITION                            0x3
#define _SSP2CON1_SSPM3_SIZE                                0x1
#define _SSP2CON1_SSPM3_LENGTH                              0x1
#define _SSP2CON1_SSPM3_MASK                                0x8
#define _SSP2CON1_SSPM02_POSN                               0x0
#define _SSP2CON1_SSPM02_POSITION                           0x0
#define _SSP2CON1_SSPM02_SIZE                               0x1
#define _SSP2CON1_SSPM02_LENGTH                             0x1
#define _SSP2CON1_SSPM02_MASK                               0x1
#define _SSP2CON1_SSPM12_POSN                               0x1
#define _SSP2CON1_SSPM12_POSITION                           0x1
#define _SSP2CON1_SSPM12_SIZE                               0x1
#define _SSP2CON1_SSPM12_LENGTH                             0x1
#define _SSP2CON1_SSPM12_MASK                               0x2
#define _SSP2CON1_SSPM22_POSN                               0x2
#define _SSP2CON1_SSPM22_POSITION                           0x2
#define _SSP2CON1_SSPM22_SIZE                               0x1
#define _SSP2CON1_SSPM22_LENGTH                             0x1
#define _SSP2CON1_SSPM22_MASK                               0x4
#define _SSP2CON1_SSPM32_POSN                               0x3
#define _SSP2CON1_SSPM32_POSITION                           0x3
#define _SSP2CON1_SSPM32_SIZE                               0x1
#define _SSP2CON1_SSPM32_LENGTH                             0x1
#define _SSP2CON1_SSPM32_MASK                               0x8
#define _SSP2CON1_CKP2_POSN                                 0x4
#define _SSP2CON1_CKP2_POSITION                             0x4
#define _SSP2CON1_CKP2_SIZE                                 0x1
#define _SSP2CON1_CKP2_LENGTH                               0x1
#define _SSP2CON1_CKP2_MASK                                 0x10
#define _SSP2CON1_SSPEN2_POSN                               0x5
#define _SSP2CON1_SSPEN2_POSITION                           0x5
#define _SSP2CON1_SSPEN2_SIZE                               0x1
#define _SSP2CON1_SSPEN2_LENGTH                             0x1
#define _SSP2CON1_SSPEN2_MASK                               0x20
#define _SSP2CON1_SSPOV2_POSN                               0x6
#define _SSP2CON1_SSPOV2_POSITION                           0x6
#define _SSP2CON1_SSPOV2_SIZE                               0x1
#define _SSP2CON1_SSPOV2_LENGTH                             0x1
#define _SSP2CON1_SSPOV2_MASK                               0x40
#define _SSP2CON1_WCOL2_POSN                                0x7
#define _SSP2CON1_WCOL2_POSITION                            0x7
#define _SSP2CON1_WCOL2_SIZE                                0x1
#define _SSP2CON1_WCOL2_LENGTH                              0x1
#define _SSP2CON1_WCOL2_MASK                                0x80

// Register: SSP2CON2
#define SSP2CON2 SSP2CON2
extern volatile unsigned char           SSP2CON2            __at(0x19B);
#ifndef _LIB_BUILD
asm("SSP2CON2 equ 019Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN2                   :1;
        unsigned ADMSK12                :1;
        unsigned ADMSK22                :1;
        unsigned ADMSK32                :1;
        unsigned ACKEN2                 :1;
        unsigned ACKDT2                 :1;
        unsigned ACKSTAT2               :1;
        unsigned GCEN2                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN2                  :1;
        unsigned PEN2                   :1;
        unsigned RCEN2                  :1;
        unsigned ADMSK42                :1;
        unsigned ADMSK52                :1;
    };
} SSP2CON2bits_t;
extern volatile SSP2CON2bits_t SSP2CON2bits __at(0x19B);
// bitfield macros
#define _SSP2CON2_SEN_POSN                                  0x0
#define _SSP2CON2_SEN_POSITION                              0x0
#define _SSP2CON2_SEN_SIZE                                  0x1
#define _SSP2CON2_SEN_LENGTH                                0x1
#define _SSP2CON2_SEN_MASK                                  0x1
#define _SSP2CON2_RSEN_POSN                                 0x1
#define _SSP2CON2_RSEN_POSITION                             0x1
#define _SSP2CON2_RSEN_SIZE                                 0x1
#define _SSP2CON2_RSEN_LENGTH                               0x1
#define _SSP2CON2_RSEN_MASK                                 0x2
#define _SSP2CON2_PEN_POSN                                  0x2
#define _SSP2CON2_PEN_POSITION                              0x2
#define _SSP2CON2_PEN_SIZE                                  0x1
#define _SSP2CON2_PEN_LENGTH                                0x1
#define _SSP2CON2_PEN_MASK                                  0x4
#define _SSP2CON2_RCEN_POSN                                 0x3
#define _SSP2CON2_RCEN_POSITION                             0x3
#define _SSP2CON2_RCEN_SIZE                                 0x1
#define _SSP2CON2_RCEN_LENGTH                               0x1
#define _SSP2CON2_RCEN_MASK                                 0x8
#define _SSP2CON2_ACKEN_POSN                                0x4
#define _SSP2CON2_ACKEN_POSITION                            0x4
#define _SSP2CON2_ACKEN_SIZE                                0x1
#define _SSP2CON2_ACKEN_LENGTH                              0x1
#define _SSP2CON2_ACKEN_MASK                                0x10
#define _SSP2CON2_ACKDT_POSN                                0x5
#define _SSP2CON2_ACKDT_POSITION                            0x5
#define _SSP2CON2_ACKDT_SIZE                                0x1
#define _SSP2CON2_ACKDT_LENGTH                              0x1
#define _SSP2CON2_ACKDT_MASK                                0x20
#define _SSP2CON2_ACKSTAT_POSN                              0x6
#define _SSP2CON2_ACKSTAT_POSITION                          0x6
#define _SSP2CON2_ACKSTAT_SIZE                              0x1
#define _SSP2CON2_ACKSTAT_LENGTH                            0x1
#define _SSP2CON2_ACKSTAT_MASK                              0x40
#define _SSP2CON2_GCEN_POSN                                 0x7
#define _SSP2CON2_GCEN_POSITION                             0x7
#define _SSP2CON2_GCEN_SIZE                                 0x1
#define _SSP2CON2_GCEN_LENGTH                               0x1
#define _SSP2CON2_GCEN_MASK                                 0x80
#define _SSP2CON2_ADMSK_POSN                                0x1
#define _SSP2CON2_ADMSK_POSITION                            0x1
#define _SSP2CON2_ADMSK_SIZE                                0x5
#define _SSP2CON2_ADMSK_LENGTH                              0x5
#define _SSP2CON2_ADMSK_MASK                                0x3E
#define _SSP2CON2_ADMSK1_POSN                               0x1
#define _SSP2CON2_ADMSK1_POSITION                           0x1
#define _SSP2CON2_ADMSK1_SIZE                               0x1
#define _SSP2CON2_ADMSK1_LENGTH                             0x1
#define _SSP2CON2_ADMSK1_MASK                               0x2
#define _SSP2CON2_ADMSK2_POSN                               0x2
#define _SSP2CON2_ADMSK2_POSITION                           0x2
#define _SSP2CON2_ADMSK2_SIZE                               0x1
#define _SSP2CON2_ADMSK2_LENGTH                             0x1
#define _SSP2CON2_ADMSK2_MASK                               0x4
#define _SSP2CON2_ADMSK3_POSN                               0x3
#define _SSP2CON2_ADMSK3_POSITION                           0x3
#define _SSP2CON2_ADMSK3_SIZE                               0x1
#define _SSP2CON2_ADMSK3_LENGTH                             0x1
#define _SSP2CON2_ADMSK3_MASK                               0x8
#define _SSP2CON2_ADMSK4_POSN                               0x4
#define _SSP2CON2_ADMSK4_POSITION                           0x4
#define _SSP2CON2_ADMSK4_SIZE                               0x1
#define _SSP2CON2_ADMSK4_LENGTH                             0x1
#define _SSP2CON2_ADMSK4_MASK                               0x10
#define _SSP2CON2_ADMSK5_POSN                               0x5
#define _SSP2CON2_ADMSK5_POSITION                           0x5
#define _SSP2CON2_ADMSK5_SIZE                               0x1
#define _SSP2CON2_ADMSK5_LENGTH                             0x1
#define _SSP2CON2_ADMSK5_MASK                               0x20
#define _SSP2CON2_SEN2_POSN                                 0x0
#define _SSP2CON2_SEN2_POSITION                             0x0
#define _SSP2CON2_SEN2_SIZE                                 0x1
#define _SSP2CON2_SEN2_LENGTH                               0x1
#define _SSP2CON2_SEN2_MASK                                 0x1
#define _SSP2CON2_ADMSK12_POSN                              0x1
#define _SSP2CON2_ADMSK12_POSITION                          0x1
#define _SSP2CON2_ADMSK12_SIZE                              0x1
#define _SSP2CON2_ADMSK12_LENGTH                            0x1
#define _SSP2CON2_ADMSK12_MASK                              0x2
#define _SSP2CON2_ADMSK22_POSN                              0x2
#define _SSP2CON2_ADMSK22_POSITION                          0x2
#define _SSP2CON2_ADMSK22_SIZE                              0x1
#define _SSP2CON2_ADMSK22_LENGTH                            0x1
#define _SSP2CON2_ADMSK22_MASK                              0x4
#define _SSP2CON2_ADMSK32_POSN                              0x3
#define _SSP2CON2_ADMSK32_POSITION                          0x3
#define _SSP2CON2_ADMSK32_SIZE                              0x1
#define _SSP2CON2_ADMSK32_LENGTH                            0x1
#define _SSP2CON2_ADMSK32_MASK                              0x8
#define _SSP2CON2_ACKEN2_POSN                               0x4
#define _SSP2CON2_ACKEN2_POSITION                           0x4
#define _SSP2CON2_ACKEN2_SIZE                               0x1
#define _SSP2CON2_ACKEN2_LENGTH                             0x1
#define _SSP2CON2_ACKEN2_MASK                               0x10
#define _SSP2CON2_ACKDT2_POSN                               0x5
#define _SSP2CON2_ACKDT2_POSITION                           0x5
#define _SSP2CON2_ACKDT2_SIZE                               0x1
#define _SSP2CON2_ACKDT2_LENGTH                             0x1
#define _SSP2CON2_ACKDT2_MASK                               0x20
#define _SSP2CON2_ACKSTAT2_POSN                             0x6
#define _SSP2CON2_ACKSTAT2_POSITION                         0x6
#define _SSP2CON2_ACKSTAT2_SIZE                             0x1
#define _SSP2CON2_ACKSTAT2_LENGTH                           0x1
#define _SSP2CON2_ACKSTAT2_MASK                             0x40
#define _SSP2CON2_GCEN2_POSN                                0x7
#define _SSP2CON2_GCEN2_POSITION                            0x7
#define _SSP2CON2_GCEN2_SIZE                                0x1
#define _SSP2CON2_GCEN2_LENGTH                              0x1
#define _SSP2CON2_GCEN2_MASK                                0x80
#define _SSP2CON2_RSEN2_POSN                                0x1
#define _SSP2CON2_RSEN2_POSITION                            0x1
#define _SSP2CON2_RSEN2_SIZE                                0x1
#define _SSP2CON2_RSEN2_LENGTH                              0x1
#define _SSP2CON2_RSEN2_MASK                                0x2
#define _SSP2CON2_PEN2_POSN                                 0x2
#define _SSP2CON2_PEN2_POSITION                             0x2
#define _SSP2CON2_PEN2_SIZE                                 0x1
#define _SSP2CON2_PEN2_LENGTH                               0x1
#define _SSP2CON2_PEN2_MASK                                 0x4
#define _SSP2CON2_RCEN2_POSN                                0x3
#define _SSP2CON2_RCEN2_POSITION                            0x3
#define _SSP2CON2_RCEN2_SIZE                                0x1
#define _SSP2CON2_RCEN2_LENGTH                              0x1
#define _SSP2CON2_RCEN2_MASK                                0x8
#define _SSP2CON2_ADMSK42_POSN                              0x4
#define _SSP2CON2_ADMSK42_POSITION                          0x4
#define _SSP2CON2_ADMSK42_SIZE                              0x1
#define _SSP2CON2_ADMSK42_LENGTH                            0x1
#define _SSP2CON2_ADMSK42_MASK                              0x10
#define _SSP2CON2_ADMSK52_POSN                              0x5
#define _SSP2CON2_ADMSK52_POSITION                          0x5
#define _SSP2CON2_ADMSK52_SIZE                              0x1
#define _SSP2CON2_ADMSK52_LENGTH                            0x1
#define _SSP2CON2_ADMSK52_MASK                              0x20

// Register: SSP2CON3
#define SSP2CON3 SSP2CON3
extern volatile unsigned char           SSP2CON3            __at(0x19C);
#ifndef _LIB_BUILD
asm("SSP2CON3 equ 019Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP2CON3bits_t;
extern volatile SSP2CON3bits_t SSP2CON3bits __at(0x19C);
// bitfield macros
#define _SSP2CON3_DHEN_POSN                                 0x0
#define _SSP2CON3_DHEN_POSITION                             0x0
#define _SSP2CON3_DHEN_SIZE                                 0x1
#define _SSP2CON3_DHEN_LENGTH                               0x1
#define _SSP2CON3_DHEN_MASK                                 0x1
#define _SSP2CON3_AHEN_POSN                                 0x1
#define _SSP2CON3_AHEN_POSITION                             0x1
#define _SSP2CON3_AHEN_SIZE                                 0x1
#define _SSP2CON3_AHEN_LENGTH                               0x1
#define _SSP2CON3_AHEN_MASK                                 0x2
#define _SSP2CON3_SBCDE_POSN                                0x2
#define _SSP2CON3_SBCDE_POSITION                            0x2
#define _SSP2CON3_SBCDE_SIZE                                0x1
#define _SSP2CON3_SBCDE_LENGTH                              0x1
#define _SSP2CON3_SBCDE_MASK                                0x4
#define _SSP2CON3_SDAHT_POSN                                0x3
#define _SSP2CON3_SDAHT_POSITION                            0x3
#define _SSP2CON3_SDAHT_SIZE                                0x1
#define _SSP2CON3_SDAHT_LENGTH                              0x1
#define _SSP2CON3_SDAHT_MASK                                0x8
#define _SSP2CON3_BOEN_POSN                                 0x4
#define _SSP2CON3_BOEN_POSITION                             0x4
#define _SSP2CON3_BOEN_SIZE                                 0x1
#define _SSP2CON3_BOEN_LENGTH                               0x1
#define _SSP2CON3_BOEN_MASK                                 0x10
#define _SSP2CON3_SCIE_POSN                                 0x5
#define _SSP2CON3_SCIE_POSITION                             0x5
#define _SSP2CON3_SCIE_SIZE                                 0x1
#define _SSP2CON3_SCIE_LENGTH                               0x1
#define _SSP2CON3_SCIE_MASK                                 0x20
#define _SSP2CON3_PCIE_POSN                                 0x6
#define _SSP2CON3_PCIE_POSITION                             0x6
#define _SSP2CON3_PCIE_SIZE                                 0x1
#define _SSP2CON3_PCIE_LENGTH                               0x1
#define _SSP2CON3_PCIE_MASK                                 0x40
#define _SSP2CON3_ACKTIM_POSN                               0x7
#define _SSP2CON3_ACKTIM_POSITION                           0x7
#define _SSP2CON3_ACKTIM_SIZE                               0x1
#define _SSP2CON3_ACKTIM_LENGTH                             0x1
#define _SSP2CON3_ACKTIM_MASK                               0x80

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1 equ 020Ch");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1L equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
    };
    struct {
        unsigned CAL01                  :1;
        unsigned CAL11                  :1;
        unsigned CAL21                  :1;
        unsigned CAL31                  :1;
        unsigned CAL41                  :1;
        unsigned CAL51                  :1;
        unsigned CAL61                  :1;
        unsigned CAL71                  :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x20C);
// bitfield macros
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR10_POSN                                   0x0
#define _TMR1L_TMR10_POSITION                               0x0
#define _TMR1L_TMR10_SIZE                                   0x1
#define _TMR1L_TMR10_LENGTH                                 0x1
#define _TMR1L_TMR10_MASK                                   0x1
#define _TMR1L_TMR11_POSN                                   0x1
#define _TMR1L_TMR11_POSITION                               0x1
#define _TMR1L_TMR11_SIZE                                   0x1
#define _TMR1L_TMR11_LENGTH                                 0x1
#define _TMR1L_TMR11_MASK                                   0x2
#define _TMR1L_TMR12_POSN                                   0x2
#define _TMR1L_TMR12_POSITION                               0x2
#define _TMR1L_TMR12_SIZE                                   0x1
#define _TMR1L_TMR12_LENGTH                                 0x1
#define _TMR1L_TMR12_MASK                                   0x4
#define _TMR1L_TMR13_POSN                                   0x3
#define _TMR1L_TMR13_POSITION                               0x3
#define _TMR1L_TMR13_SIZE                                   0x1
#define _TMR1L_TMR13_LENGTH                                 0x1
#define _TMR1L_TMR13_MASK                                   0x8
#define _TMR1L_TMR14_POSN                                   0x4
#define _TMR1L_TMR14_POSITION                               0x4
#define _TMR1L_TMR14_SIZE                                   0x1
#define _TMR1L_TMR14_LENGTH                                 0x1
#define _TMR1L_TMR14_MASK                                   0x10
#define _TMR1L_TMR15_POSN                                   0x5
#define _TMR1L_TMR15_POSITION                               0x5
#define _TMR1L_TMR15_SIZE                                   0x1
#define _TMR1L_TMR15_LENGTH                                 0x1
#define _TMR1L_TMR15_MASK                                   0x20
#define _TMR1L_TMR16_POSN                                   0x6
#define _TMR1L_TMR16_POSITION                               0x6
#define _TMR1L_TMR16_SIZE                                   0x1
#define _TMR1L_TMR16_LENGTH                                 0x1
#define _TMR1L_TMR16_MASK                                   0x40
#define _TMR1L_TMR17_POSN                                   0x7
#define _TMR1L_TMR17_POSITION                               0x7
#define _TMR1L_TMR17_SIZE                                   0x1
#define _TMR1L_TMR17_LENGTH                                 0x1
#define _TMR1L_TMR17_MASK                                   0x80
#define _TMR1L_CAL01_POSN                                   0x0
#define _TMR1L_CAL01_POSITION                               0x0
#define _TMR1L_CAL01_SIZE                                   0x1
#define _TMR1L_CAL01_LENGTH                                 0x1
#define _TMR1L_CAL01_MASK                                   0x1
#define _TMR1L_CAL11_POSN                                   0x1
#define _TMR1L_CAL11_POSITION                               0x1
#define _TMR1L_CAL11_SIZE                                   0x1
#define _TMR1L_CAL11_LENGTH                                 0x1
#define _TMR1L_CAL11_MASK                                   0x2
#define _TMR1L_CAL21_POSN                                   0x2
#define _TMR1L_CAL21_POSITION                               0x2
#define _TMR1L_CAL21_SIZE                                   0x1
#define _TMR1L_CAL21_LENGTH                                 0x1
#define _TMR1L_CAL21_MASK                                   0x4
#define _TMR1L_CAL31_POSN                                   0x3
#define _TMR1L_CAL31_POSITION                               0x3
#define _TMR1L_CAL31_SIZE                                   0x1
#define _TMR1L_CAL31_LENGTH                                 0x1
#define _TMR1L_CAL31_MASK                                   0x8
#define _TMR1L_CAL41_POSN                                   0x4
#define _TMR1L_CAL41_POSITION                               0x4
#define _TMR1L_CAL41_SIZE                                   0x1
#define _TMR1L_CAL41_LENGTH                                 0x1
#define _TMR1L_CAL41_MASK                                   0x10
#define _TMR1L_CAL51_POSN                                   0x5
#define _TMR1L_CAL51_POSITION                               0x5
#define _TMR1L_CAL51_SIZE                                   0x1
#define _TMR1L_CAL51_LENGTH                                 0x1
#define _TMR1L_CAL51_MASK                                   0x20
#define _TMR1L_CAL61_POSN                                   0x6
#define _TMR1L_CAL61_POSITION                               0x6
#define _TMR1L_CAL61_SIZE                                   0x1
#define _TMR1L_CAL61_LENGTH                                 0x1
#define _TMR1L_CAL61_MASK                                   0x40
#define _TMR1L_CAL71_POSN                                   0x7
#define _TMR1L_CAL71_POSITION                               0x7
#define _TMR1L_CAL71_SIZE                                   0x1
#define _TMR1L_CAL71_LENGTH                                 0x1
#define _TMR1L_CAL71_MASK                                   0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x20D);
#ifndef _LIB_BUILD
asm("TMR1H equ 020Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR110                 :1;
        unsigned TMR111                 :1;
        unsigned TMR112                 :1;
        unsigned TMR113                 :1;
        unsigned TMR114                 :1;
        unsigned TMR115                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x20D);
// bitfield macros
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR18_POSN                                   0x0
#define _TMR1H_TMR18_POSITION                               0x0
#define _TMR1H_TMR18_SIZE                                   0x1
#define _TMR1H_TMR18_LENGTH                                 0x1
#define _TMR1H_TMR18_MASK                                   0x1
#define _TMR1H_TMR19_POSN                                   0x1
#define _TMR1H_TMR19_POSITION                               0x1
#define _TMR1H_TMR19_SIZE                                   0x1
#define _TMR1H_TMR19_LENGTH                                 0x1
#define _TMR1H_TMR19_MASK                                   0x2
#define _TMR1H_TMR110_POSN                                  0x2
#define _TMR1H_TMR110_POSITION                              0x2
#define _TMR1H_TMR110_SIZE                                  0x1
#define _TMR1H_TMR110_LENGTH                                0x1
#define _TMR1H_TMR110_MASK                                  0x4
#define _TMR1H_TMR111_POSN                                  0x3
#define _TMR1H_TMR111_POSITION                              0x3
#define _TMR1H_TMR111_SIZE                                  0x1
#define _TMR1H_TMR111_LENGTH                                0x1
#define _TMR1H_TMR111_MASK                                  0x8
#define _TMR1H_TMR112_POSN                                  0x4
#define _TMR1H_TMR112_POSITION                              0x4
#define _TMR1H_TMR112_SIZE                                  0x1
#define _TMR1H_TMR112_LENGTH                                0x1
#define _TMR1H_TMR112_MASK                                  0x10
#define _TMR1H_TMR113_POSN                                  0x5
#define _TMR1H_TMR113_POSITION                              0x5
#define _TMR1H_TMR113_SIZE                                  0x1
#define _TMR1H_TMR113_LENGTH                                0x1
#define _TMR1H_TMR113_MASK                                  0x20
#define _TMR1H_TMR114_POSN                                  0x6
#define _TMR1H_TMR114_POSITION                              0x6
#define _TMR1H_TMR114_SIZE                                  0x1
#define _TMR1H_TMR114_LENGTH                                0x1
#define _TMR1H_TMR114_MASK                                  0x40
#define _TMR1H_TMR115_POSN                                  0x7
#define _TMR1H_TMR115_POSITION                              0x7
#define _TMR1H_TMR115_SIZE                                  0x1
#define _TMR1H_TMR115_LENGTH                                0x1
#define _TMR1H_TMR115_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x20E);
#ifndef _LIB_BUILD
asm("T1CON equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned nT1SYNC                :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x20E);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x20F);
#ifndef _LIB_BUILD
asm("T1GCON equ 020Fh");
#endif
// aliases
extern volatile unsigned char           PR1                 __at(0x20F);
#ifndef _LIB_BUILD
asm("PR1 equ 020Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x20F);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} PR1bits_t;
extern volatile PR1bits_t PR1bits __at(0x20F);
// bitfield macros
#define _PR1_GVAL_POSN                                      0x2
#define _PR1_GVAL_POSITION                                  0x2
#define _PR1_GVAL_SIZE                                      0x1
#define _PR1_GVAL_LENGTH                                    0x1
#define _PR1_GVAL_MASK                                      0x4
#define _PR1_GGO_nDONE_POSN                                 0x3
#define _PR1_GGO_nDONE_POSITION                             0x3
#define _PR1_GGO_nDONE_SIZE                                 0x1
#define _PR1_GGO_nDONE_LENGTH                               0x1
#define _PR1_GGO_nDONE_MASK                                 0x8
#define _PR1_GSPM_POSN                                      0x4
#define _PR1_GSPM_POSITION                                  0x4
#define _PR1_GSPM_SIZE                                      0x1
#define _PR1_GSPM_LENGTH                                    0x1
#define _PR1_GSPM_MASK                                      0x10
#define _PR1_GTM_POSN                                       0x5
#define _PR1_GTM_POSITION                                   0x5
#define _PR1_GTM_SIZE                                       0x1
#define _PR1_GTM_LENGTH                                     0x1
#define _PR1_GTM_MASK                                       0x20
#define _PR1_GPOL_POSN                                      0x6
#define _PR1_GPOL_POSITION                                  0x6
#define _PR1_GPOL_SIZE                                      0x1
#define _PR1_GPOL_LENGTH                                    0x1
#define _PR1_GPOL_MASK                                      0x40
#define _PR1_GE_POSN                                        0x7
#define _PR1_GE_POSITION                                    0x7
#define _PR1_GE_SIZE                                        0x1
#define _PR1_GE_LENGTH                                      0x1
#define _PR1_GE_MASK                                        0x80
#define _PR1_T1GVAL_POSN                                    0x2
#define _PR1_T1GVAL_POSITION                                0x2
#define _PR1_T1GVAL_SIZE                                    0x1
#define _PR1_T1GVAL_LENGTH                                  0x1
#define _PR1_T1GVAL_MASK                                    0x4
#define _PR1_T1GGO_nDONE_POSN                               0x3
#define _PR1_T1GGO_nDONE_POSITION                           0x3
#define _PR1_T1GGO_nDONE_SIZE                               0x1
#define _PR1_T1GGO_nDONE_LENGTH                             0x1
#define _PR1_T1GGO_nDONE_MASK                               0x8
#define _PR1_T1GSPM_POSN                                    0x4
#define _PR1_T1GSPM_POSITION                                0x4
#define _PR1_T1GSPM_SIZE                                    0x1
#define _PR1_T1GSPM_LENGTH                                  0x1
#define _PR1_T1GSPM_MASK                                    0x10
#define _PR1_T1GTM_POSN                                     0x5
#define _PR1_T1GTM_POSITION                                 0x5
#define _PR1_T1GTM_SIZE                                     0x1
#define _PR1_T1GTM_LENGTH                                   0x1
#define _PR1_T1GTM_MASK                                     0x20
#define _PR1_T1GPOL_POSN                                    0x6
#define _PR1_T1GPOL_POSITION                                0x6
#define _PR1_T1GPOL_SIZE                                    0x1
#define _PR1_T1GPOL_LENGTH                                  0x1
#define _PR1_T1GPOL_MASK                                    0x40
#define _PR1_T1GE_POSN                                      0x7
#define _PR1_T1GE_POSITION                                  0x7
#define _PR1_T1GE_SIZE                                      0x1
#define _PR1_T1GE_LENGTH                                    0x1
#define _PR1_T1GE_MASK                                      0x80
#define _PR1_T1GGO_POSN                                     0x3
#define _PR1_T1GGO_POSITION                                 0x3
#define _PR1_T1GGO_SIZE                                     0x1
#define _PR1_T1GGO_LENGTH                                   0x1
#define _PR1_T1GGO_MASK                                     0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x210);
#ifndef _LIB_BUILD
asm("T1GATE equ 0210h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x210);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 0210h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x210);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x5
#define _T1GATE_GSS_LENGTH                                  0x5
#define _T1GATE_GSS_MASK                                    0x1F
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_GSS4_POSN                                   0x4
#define _T1GATE_GSS4_POSITION                               0x4
#define _T1GATE_GSS4_SIZE                                   0x1
#define _T1GATE_GSS4_LENGTH                                 0x1
#define _T1GATE_GSS4_MASK                                   0x10
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
#define _T1GATE_T1GSS4_POSN                                 0x4
#define _T1GATE_T1GSS4_POSITION                             0x4
#define _T1GATE_T1GSS4_SIZE                                 0x1
#define _T1GATE_T1GSS4_LENGTH                               0x1
#define _T1GATE_T1GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x210);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x5
#define _TMR1GATE_GSS_LENGTH                                0x5
#define _TMR1GATE_GSS_MASK                                  0x1F
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_GSS4_POSN                                 0x4
#define _TMR1GATE_GSS4_POSITION                             0x4
#define _TMR1GATE_GSS4_SIZE                                 0x1
#define _TMR1GATE_GSS4_LENGTH                               0x1
#define _TMR1GATE_GSS4_MASK                                 0x10
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8
#define _TMR1GATE_T1GSS4_POSN                               0x4
#define _TMR1GATE_T1GSS4_POSITION                           0x4
#define _TMR1GATE_T1GSS4_SIZE                               0x1
#define _TMR1GATE_T1GSS4_LENGTH                             0x1
#define _TMR1GATE_T1GSS4_MASK                               0x10

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x211);
#ifndef _LIB_BUILD
asm("T1CLK equ 0211h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x211);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x211);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x4
#define _T1CLK_CS_LENGTH                                    0x4
#define _T1CLK_CS_MASK                                      0xF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x211);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x4
#define _TMR1CLK_CS_LENGTH                                  0x4
#define _TMR1CLK_CS_MASK                                    0xF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x28C);
#ifndef _LIB_BUILD
asm("T2TMR equ 028Ch");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x28C);
#ifndef _LIB_BUILD
asm("TMR2 equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x28C);
// bitfield macros
#define _T2TMR_TMR_POSN                                     0x0
#define _T2TMR_TMR_POSITION                                 0x0
#define _T2TMR_TMR_SIZE                                     0x8
#define _T2TMR_TMR_LENGTH                                   0x8
#define _T2TMR_TMR_MASK                                     0xFF
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x28C);
// bitfield macros
#define _TMR2_TMR_POSN                                      0x0
#define _TMR2_TMR_POSITION                                  0x0
#define _TMR2_TMR_SIZE                                      0x8
#define _TMR2_TMR_LENGTH                                    0x8
#define _TMR2_TMR_MASK                                      0xFF
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x28D);
#ifndef _LIB_BUILD
asm("T2PR equ 028Dh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x28D);
#ifndef _LIB_BUILD
asm("PR2 equ 028Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T2PR                   :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x28D);
// bitfield macros
#define _T2PR_PR_POSN                                       0x0
#define _T2PR_PR_POSITION                                   0x0
#define _T2PR_PR_SIZE                                       0x8
#define _T2PR_PR_LENGTH                                     0x8
#define _T2PR_PR_MASK                                       0xFF
#define _T2PR_T2PR_POSN                                     0x0
#define _T2PR_T2PR_POSITION                                 0x0
#define _T2PR_T2PR_SIZE                                     0x8
#define _T2PR_T2PR_LENGTH                                   0x8
#define _T2PR_T2PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T2PR                   :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x28D);
// bitfield macros
#define _PR2_PR_POSN                                        0x0
#define _PR2_PR_POSITION                                    0x0
#define _PR2_PR_SIZE                                        0x8
#define _PR2_PR_LENGTH                                      0x8
#define _PR2_PR_MASK                                        0xFF
#define _PR2_T2PR_POSN                                      0x0
#define _PR2_T2PR_POSITION                                  0x0
#define _PR2_T2PR_SIZE                                      0x8
#define _PR2_T2PR_LENGTH                                    0x8
#define _PR2_T2PR_MASK                                      0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x28E);
#ifndef _LIB_BUILD
asm("T2CON equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x28E);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x28F);
#ifndef _LIB_BUILD
asm("T2HLT equ 028Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x28F);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x290);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0290h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x290);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x291);
#ifndef _LIB_BUILD
asm("T2RST equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T2RSEL                 :4;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x291);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x4
#define _T2RST_RSEL_LENGTH                                  0x4
#define _T2RST_RSEL_MASK                                    0xF
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x4
#define _T2RST_T2RSEL_LENGTH                                0x4
#define _T2RST_T2RSEL_MASK                                  0xF
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x30C);
#ifndef _LIB_BUILD
asm("CCPR1 equ 030Ch");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x30C);
#ifndef _LIB_BUILD
asm("CCPR1L equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x30C);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x30D);
#ifndef _LIB_BUILD
asm("CCPR1H equ 030Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x30D);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x30E);
#ifndef _LIB_BUILD
asm("CCP1CON equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x30E);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x30F);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 030Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x30F);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x310);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0310h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x310);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0310h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x310);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x311);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0311h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x311);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x312);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0312h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x312);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x313);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0313h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x313);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4

// Register: PWM3DC
#define PWM3DC PWM3DC
extern volatile unsigned short          PWM3DC              __at(0x314);
#ifndef _LIB_BUILD
asm("PWM3DC equ 0314h");
#endif

// Register: PWM3DCL
#define PWM3DCL PWM3DCL
extern volatile unsigned char           PWM3DCL             __at(0x314);
#ifndef _LIB_BUILD
asm("PWM3DCL equ 0314h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM3DC0                :1;
        unsigned PWM3DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM3DCLbits_t;
extern volatile PWM3DCLbits_t PWM3DCLbits __at(0x314);
// bitfield macros
#define _PWM3DCL_DC_POSN                                    0x6
#define _PWM3DCL_DC_POSITION                                0x6
#define _PWM3DCL_DC_SIZE                                    0x2
#define _PWM3DCL_DC_LENGTH                                  0x2
#define _PWM3DCL_DC_MASK                                    0xC0
#define _PWM3DCL_DC0_POSN                                   0x6
#define _PWM3DCL_DC0_POSITION                               0x6
#define _PWM3DCL_DC0_SIZE                                   0x1
#define _PWM3DCL_DC0_LENGTH                                 0x1
#define _PWM3DCL_DC0_MASK                                   0x40
#define _PWM3DCL_DC1_POSN                                   0x7
#define _PWM3DCL_DC1_POSITION                               0x7
#define _PWM3DCL_DC1_SIZE                                   0x1
#define _PWM3DCL_DC1_LENGTH                                 0x1
#define _PWM3DCL_DC1_MASK                                   0x80
#define _PWM3DCL_PWM3DC0_POSN                               0x6
#define _PWM3DCL_PWM3DC0_POSITION                           0x6
#define _PWM3DCL_PWM3DC0_SIZE                               0x1
#define _PWM3DCL_PWM3DC0_LENGTH                             0x1
#define _PWM3DCL_PWM3DC0_MASK                               0x40
#define _PWM3DCL_PWM3DC1_POSN                               0x7
#define _PWM3DCL_PWM3DC1_POSITION                           0x7
#define _PWM3DCL_PWM3DC1_SIZE                               0x1
#define _PWM3DCL_PWM3DC1_LENGTH                             0x1
#define _PWM3DCL_PWM3DC1_MASK                               0x80
#define _PWM3DCL_PWMPW0_POSN                                0x6
#define _PWM3DCL_PWMPW0_POSITION                            0x6
#define _PWM3DCL_PWMPW0_SIZE                                0x1
#define _PWM3DCL_PWMPW0_LENGTH                              0x1
#define _PWM3DCL_PWMPW0_MASK                                0x40
#define _PWM3DCL_PWMPW1_POSN                                0x7
#define _PWM3DCL_PWMPW1_POSITION                            0x7
#define _PWM3DCL_PWMPW1_SIZE                                0x1
#define _PWM3DCL_PWMPW1_LENGTH                              0x1
#define _PWM3DCL_PWMPW1_MASK                                0x80

// Register: PWM3DCH
#define PWM3DCH PWM3DCH
extern volatile unsigned char           PWM3DCH             __at(0x315);
#ifndef _LIB_BUILD
asm("PWM3DCH equ 0315h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM3DC2                :1;
        unsigned PWM3DC3                :1;
        unsigned PWM3DC4                :1;
        unsigned PWM3DC5                :1;
        unsigned PWM3DC6                :1;
        unsigned PWM3DC7                :1;
        unsigned PWM3DC8                :1;
        unsigned PWM3DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM3DCHbits_t;
extern volatile PWM3DCHbits_t PWM3DCHbits __at(0x315);
// bitfield macros
#define _PWM3DCH_DC_POSN                                    0x0
#define _PWM3DCH_DC_POSITION                                0x0
#define _PWM3DCH_DC_SIZE                                    0x8
#define _PWM3DCH_DC_LENGTH                                  0x8
#define _PWM3DCH_DC_MASK                                    0xFF
#define _PWM3DCH_DC2_POSN                                   0x0
#define _PWM3DCH_DC2_POSITION                               0x0
#define _PWM3DCH_DC2_SIZE                                   0x1
#define _PWM3DCH_DC2_LENGTH                                 0x1
#define _PWM3DCH_DC2_MASK                                   0x1
#define _PWM3DCH_DC3_POSN                                   0x1
#define _PWM3DCH_DC3_POSITION                               0x1
#define _PWM3DCH_DC3_SIZE                                   0x1
#define _PWM3DCH_DC3_LENGTH                                 0x1
#define _PWM3DCH_DC3_MASK                                   0x2
#define _PWM3DCH_DC4_POSN                                   0x2
#define _PWM3DCH_DC4_POSITION                               0x2
#define _PWM3DCH_DC4_SIZE                                   0x1
#define _PWM3DCH_DC4_LENGTH                                 0x1
#define _PWM3DCH_DC4_MASK                                   0x4
#define _PWM3DCH_DC5_POSN                                   0x3
#define _PWM3DCH_DC5_POSITION                               0x3
#define _PWM3DCH_DC5_SIZE                                   0x1
#define _PWM3DCH_DC5_LENGTH                                 0x1
#define _PWM3DCH_DC5_MASK                                   0x8
#define _PWM3DCH_DC6_POSN                                   0x4
#define _PWM3DCH_DC6_POSITION                               0x4
#define _PWM3DCH_DC6_SIZE                                   0x1
#define _PWM3DCH_DC6_LENGTH                                 0x1
#define _PWM3DCH_DC6_MASK                                   0x10
#define _PWM3DCH_DC7_POSN                                   0x5
#define _PWM3DCH_DC7_POSITION                               0x5
#define _PWM3DCH_DC7_SIZE                                   0x1
#define _PWM3DCH_DC7_LENGTH                                 0x1
#define _PWM3DCH_DC7_MASK                                   0x20
#define _PWM3DCH_DC8_POSN                                   0x6
#define _PWM3DCH_DC8_POSITION                               0x6
#define _PWM3DCH_DC8_SIZE                                   0x1
#define _PWM3DCH_DC8_LENGTH                                 0x1
#define _PWM3DCH_DC8_MASK                                   0x40
#define _PWM3DCH_DC9_POSN                                   0x7
#define _PWM3DCH_DC9_POSITION                               0x7
#define _PWM3DCH_DC9_SIZE                                   0x1
#define _PWM3DCH_DC9_LENGTH                                 0x1
#define _PWM3DCH_DC9_MASK                                   0x80
#define _PWM3DCH_PWM3DC2_POSN                               0x0
#define _PWM3DCH_PWM3DC2_POSITION                           0x0
#define _PWM3DCH_PWM3DC2_SIZE                               0x1
#define _PWM3DCH_PWM3DC2_LENGTH                             0x1
#define _PWM3DCH_PWM3DC2_MASK                               0x1
#define _PWM3DCH_PWM3DC3_POSN                               0x1
#define _PWM3DCH_PWM3DC3_POSITION                           0x1
#define _PWM3DCH_PWM3DC3_SIZE                               0x1
#define _PWM3DCH_PWM3DC3_LENGTH                             0x1
#define _PWM3DCH_PWM3DC3_MASK                               0x2
#define _PWM3DCH_PWM3DC4_POSN                               0x2
#define _PWM3DCH_PWM3DC4_POSITION                           0x2
#define _PWM3DCH_PWM3DC4_SIZE                               0x1
#define _PWM3DCH_PWM3DC4_LENGTH                             0x1
#define _PWM3DCH_PWM3DC4_MASK                               0x4
#define _PWM3DCH_PWM3DC5_POSN                               0x3
#define _PWM3DCH_PWM3DC5_POSITION                           0x3
#define _PWM3DCH_PWM3DC5_SIZE                               0x1
#define _PWM3DCH_PWM3DC5_LENGTH                             0x1
#define _PWM3DCH_PWM3DC5_MASK                               0x8
#define _PWM3DCH_PWM3DC6_POSN                               0x4
#define _PWM3DCH_PWM3DC6_POSITION                           0x4
#define _PWM3DCH_PWM3DC6_SIZE                               0x1
#define _PWM3DCH_PWM3DC6_LENGTH                             0x1
#define _PWM3DCH_PWM3DC6_MASK                               0x10
#define _PWM3DCH_PWM3DC7_POSN                               0x5
#define _PWM3DCH_PWM3DC7_POSITION                           0x5
#define _PWM3DCH_PWM3DC7_SIZE                               0x1
#define _PWM3DCH_PWM3DC7_LENGTH                             0x1
#define _PWM3DCH_PWM3DC7_MASK                               0x20
#define _PWM3DCH_PWM3DC8_POSN                               0x6
#define _PWM3DCH_PWM3DC8_POSITION                           0x6
#define _PWM3DCH_PWM3DC8_SIZE                               0x1
#define _PWM3DCH_PWM3DC8_LENGTH                             0x1
#define _PWM3DCH_PWM3DC8_MASK                               0x40
#define _PWM3DCH_PWM3DC9_POSN                               0x7
#define _PWM3DCH_PWM3DC9_POSITION                           0x7
#define _PWM3DCH_PWM3DC9_SIZE                               0x1
#define _PWM3DCH_PWM3DC9_LENGTH                             0x1
#define _PWM3DCH_PWM3DC9_MASK                               0x80
#define _PWM3DCH_PWMPW2_POSN                                0x0
#define _PWM3DCH_PWMPW2_POSITION                            0x0
#define _PWM3DCH_PWMPW2_SIZE                                0x1
#define _PWM3DCH_PWMPW2_LENGTH                              0x1
#define _PWM3DCH_PWMPW2_MASK                                0x1
#define _PWM3DCH_PWMPW3_POSN                                0x1
#define _PWM3DCH_PWMPW3_POSITION                            0x1
#define _PWM3DCH_PWMPW3_SIZE                                0x1
#define _PWM3DCH_PWMPW3_LENGTH                              0x1
#define _PWM3DCH_PWMPW3_MASK                                0x2
#define _PWM3DCH_PWMPW4_POSN                                0x2
#define _PWM3DCH_PWMPW4_POSITION                            0x2
#define _PWM3DCH_PWMPW4_SIZE                                0x1
#define _PWM3DCH_PWMPW4_LENGTH                              0x1
#define _PWM3DCH_PWMPW4_MASK                                0x4
#define _PWM3DCH_PWMPW5_POSN                                0x3
#define _PWM3DCH_PWMPW5_POSITION                            0x3
#define _PWM3DCH_PWMPW5_SIZE                                0x1
#define _PWM3DCH_PWMPW5_LENGTH                              0x1
#define _PWM3DCH_PWMPW5_MASK                                0x8
#define _PWM3DCH_PWMPW6_POSN                                0x4
#define _PWM3DCH_PWMPW6_POSITION                            0x4
#define _PWM3DCH_PWMPW6_SIZE                                0x1
#define _PWM3DCH_PWMPW6_LENGTH                              0x1
#define _PWM3DCH_PWMPW6_MASK                                0x10
#define _PWM3DCH_PWMPW7_POSN                                0x5
#define _PWM3DCH_PWMPW7_POSITION                            0x5
#define _PWM3DCH_PWMPW7_SIZE                                0x1
#define _PWM3DCH_PWMPW7_LENGTH                              0x1
#define _PWM3DCH_PWMPW7_MASK                                0x20
#define _PWM3DCH_PWMPW8_POSN                                0x6
#define _PWM3DCH_PWMPW8_POSITION                            0x6
#define _PWM3DCH_PWMPW8_SIZE                                0x1
#define _PWM3DCH_PWMPW8_LENGTH                              0x1
#define _PWM3DCH_PWMPW8_MASK                                0x40
#define _PWM3DCH_PWMPW9_POSN                                0x7
#define _PWM3DCH_PWMPW9_POSITION                            0x7
#define _PWM3DCH_PWMPW9_SIZE                                0x1
#define _PWM3DCH_PWMPW9_LENGTH                              0x1
#define _PWM3DCH_PWMPW9_MASK                                0x80

// Register: PWM3CON
#define PWM3CON PWM3CON
extern volatile unsigned char           PWM3CON             __at(0x316);
#ifndef _LIB_BUILD
asm("PWM3CON equ 0316h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM3POL                :1;
        unsigned PWM3OUT                :1;
        unsigned                        :1;
        unsigned PWM3EN                 :1;
    };
} PWM3CONbits_t;
extern volatile PWM3CONbits_t PWM3CONbits __at(0x316);
// bitfield macros
#define _PWM3CON_POL_POSN                                   0x4
#define _PWM3CON_POL_POSITION                               0x4
#define _PWM3CON_POL_SIZE                                   0x1
#define _PWM3CON_POL_LENGTH                                 0x1
#define _PWM3CON_POL_MASK                                   0x10
#define _PWM3CON_OUT_POSN                                   0x5
#define _PWM3CON_OUT_POSITION                               0x5
#define _PWM3CON_OUT_SIZE                                   0x1
#define _PWM3CON_OUT_LENGTH                                 0x1
#define _PWM3CON_OUT_MASK                                   0x20
#define _PWM3CON_EN_POSN                                    0x7
#define _PWM3CON_EN_POSITION                                0x7
#define _PWM3CON_EN_SIZE                                    0x1
#define _PWM3CON_EN_LENGTH                                  0x1
#define _PWM3CON_EN_MASK                                    0x80
#define _PWM3CON_PWM3POL_POSN                               0x4
#define _PWM3CON_PWM3POL_POSITION                           0x4
#define _PWM3CON_PWM3POL_SIZE                               0x1
#define _PWM3CON_PWM3POL_LENGTH                             0x1
#define _PWM3CON_PWM3POL_MASK                               0x10
#define _PWM3CON_PWM3OUT_POSN                               0x5
#define _PWM3CON_PWM3OUT_POSITION                           0x5
#define _PWM3CON_PWM3OUT_SIZE                               0x1
#define _PWM3CON_PWM3OUT_LENGTH                             0x1
#define _PWM3CON_PWM3OUT_MASK                               0x20
#define _PWM3CON_PWM3EN_POSN                                0x7
#define _PWM3CON_PWM3EN_POSITION                            0x7
#define _PWM3CON_PWM3EN_SIZE                                0x1
#define _PWM3CON_PWM3EN_LENGTH                              0x1
#define _PWM3CON_PWM3EN_MASK                                0x80

// Register: PWM4DC
#define PWM4DC PWM4DC
extern volatile unsigned short          PWM4DC              __at(0x318);
#ifndef _LIB_BUILD
asm("PWM4DC equ 0318h");
#endif

// Register: PWM4DCL
#define PWM4DCL PWM4DCL
extern volatile unsigned char           PWM4DCL             __at(0x318);
#ifndef _LIB_BUILD
asm("PWM4DCL equ 0318h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM4DC0                :1;
        unsigned PWM4DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM4DCLbits_t;
extern volatile PWM4DCLbits_t PWM4DCLbits __at(0x318);
// bitfield macros
#define _PWM4DCL_DC_POSN                                    0x6
#define _PWM4DCL_DC_POSITION                                0x6
#define _PWM4DCL_DC_SIZE                                    0x2
#define _PWM4DCL_DC_LENGTH                                  0x2
#define _PWM4DCL_DC_MASK                                    0xC0
#define _PWM4DCL_DC0_POSN                                   0x6
#define _PWM4DCL_DC0_POSITION                               0x6
#define _PWM4DCL_DC0_SIZE                                   0x1
#define _PWM4DCL_DC0_LENGTH                                 0x1
#define _PWM4DCL_DC0_MASK                                   0x40
#define _PWM4DCL_DC1_POSN                                   0x7
#define _PWM4DCL_DC1_POSITION                               0x7
#define _PWM4DCL_DC1_SIZE                                   0x1
#define _PWM4DCL_DC1_LENGTH                                 0x1
#define _PWM4DCL_DC1_MASK                                   0x80
#define _PWM4DCL_PWM4DC0_POSN                               0x6
#define _PWM4DCL_PWM4DC0_POSITION                           0x6
#define _PWM4DCL_PWM4DC0_SIZE                               0x1
#define _PWM4DCL_PWM4DC0_LENGTH                             0x1
#define _PWM4DCL_PWM4DC0_MASK                               0x40
#define _PWM4DCL_PWM4DC1_POSN                               0x7
#define _PWM4DCL_PWM4DC1_POSITION                           0x7
#define _PWM4DCL_PWM4DC1_SIZE                               0x1
#define _PWM4DCL_PWM4DC1_LENGTH                             0x1
#define _PWM4DCL_PWM4DC1_MASK                               0x80
#define _PWM4DCL_PWMPW0_POSN                                0x6
#define _PWM4DCL_PWMPW0_POSITION                            0x6
#define _PWM4DCL_PWMPW0_SIZE                                0x1
#define _PWM4DCL_PWMPW0_LENGTH                              0x1
#define _PWM4DCL_PWMPW0_MASK                                0x40
#define _PWM4DCL_PWMPW1_POSN                                0x7
#define _PWM4DCL_PWMPW1_POSITION                            0x7
#define _PWM4DCL_PWMPW1_SIZE                                0x1
#define _PWM4DCL_PWMPW1_LENGTH                              0x1
#define _PWM4DCL_PWMPW1_MASK                                0x80

// Register: PWM4DCH
#define PWM4DCH PWM4DCH
extern volatile unsigned char           PWM4DCH             __at(0x319);
#ifndef _LIB_BUILD
asm("PWM4DCH equ 0319h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM4DC2                :1;
        unsigned PWM4DC3                :1;
        unsigned PWM4DC4                :1;
        unsigned PWM4DC5                :1;
        unsigned PWM4DC6                :1;
        unsigned PWM4DC7                :1;
        unsigned PWM4DC8                :1;
        unsigned PWM4DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM4DCHbits_t;
extern volatile PWM4DCHbits_t PWM4DCHbits __at(0x319);
// bitfield macros
#define _PWM4DCH_DC_POSN                                    0x0
#define _PWM4DCH_DC_POSITION                                0x0
#define _PWM4DCH_DC_SIZE                                    0x8
#define _PWM4DCH_DC_LENGTH                                  0x8
#define _PWM4DCH_DC_MASK                                    0xFF
#define _PWM4DCH_DC2_POSN                                   0x0
#define _PWM4DCH_DC2_POSITION                               0x0
#define _PWM4DCH_DC2_SIZE                                   0x1
#define _PWM4DCH_DC2_LENGTH                                 0x1
#define _PWM4DCH_DC2_MASK                                   0x1
#define _PWM4DCH_DC3_POSN                                   0x1
#define _PWM4DCH_DC3_POSITION                               0x1
#define _PWM4DCH_DC3_SIZE                                   0x1
#define _PWM4DCH_DC3_LENGTH                                 0x1
#define _PWM4DCH_DC3_MASK                                   0x2
#define _PWM4DCH_DC4_POSN                                   0x2
#define _PWM4DCH_DC4_POSITION                               0x2
#define _PWM4DCH_DC4_SIZE                                   0x1
#define _PWM4DCH_DC4_LENGTH                                 0x1
#define _PWM4DCH_DC4_MASK                                   0x4
#define _PWM4DCH_DC5_POSN                                   0x3
#define _PWM4DCH_DC5_POSITION                               0x3
#define _PWM4DCH_DC5_SIZE                                   0x1
#define _PWM4DCH_DC5_LENGTH                                 0x1
#define _PWM4DCH_DC5_MASK                                   0x8
#define _PWM4DCH_DC6_POSN                                   0x4
#define _PWM4DCH_DC6_POSITION                               0x4
#define _PWM4DCH_DC6_SIZE                                   0x1
#define _PWM4DCH_DC6_LENGTH                                 0x1
#define _PWM4DCH_DC6_MASK                                   0x10
#define _PWM4DCH_DC7_POSN                                   0x5
#define _PWM4DCH_DC7_POSITION                               0x5
#define _PWM4DCH_DC7_SIZE                                   0x1
#define _PWM4DCH_DC7_LENGTH                                 0x1
#define _PWM4DCH_DC7_MASK                                   0x20
#define _PWM4DCH_DC8_POSN                                   0x6
#define _PWM4DCH_DC8_POSITION                               0x6
#define _PWM4DCH_DC8_SIZE                                   0x1
#define _PWM4DCH_DC8_LENGTH                                 0x1
#define _PWM4DCH_DC8_MASK                                   0x40
#define _PWM4DCH_DC9_POSN                                   0x7
#define _PWM4DCH_DC9_POSITION                               0x7
#define _PWM4DCH_DC9_SIZE                                   0x1
#define _PWM4DCH_DC9_LENGTH                                 0x1
#define _PWM4DCH_DC9_MASK                                   0x80
#define _PWM4DCH_PWM4DC2_POSN                               0x0
#define _PWM4DCH_PWM4DC2_POSITION                           0x0
#define _PWM4DCH_PWM4DC2_SIZE                               0x1
#define _PWM4DCH_PWM4DC2_LENGTH                             0x1
#define _PWM4DCH_PWM4DC2_MASK                               0x1
#define _PWM4DCH_PWM4DC3_POSN                               0x1
#define _PWM4DCH_PWM4DC3_POSITION                           0x1
#define _PWM4DCH_PWM4DC3_SIZE                               0x1
#define _PWM4DCH_PWM4DC3_LENGTH                             0x1
#define _PWM4DCH_PWM4DC3_MASK                               0x2
#define _PWM4DCH_PWM4DC4_POSN                               0x2
#define _PWM4DCH_PWM4DC4_POSITION                           0x2
#define _PWM4DCH_PWM4DC4_SIZE                               0x1
#define _PWM4DCH_PWM4DC4_LENGTH                             0x1
#define _PWM4DCH_PWM4DC4_MASK                               0x4
#define _PWM4DCH_PWM4DC5_POSN                               0x3
#define _PWM4DCH_PWM4DC5_POSITION                           0x3
#define _PWM4DCH_PWM4DC5_SIZE                               0x1
#define _PWM4DCH_PWM4DC5_LENGTH                             0x1
#define _PWM4DCH_PWM4DC5_MASK                               0x8
#define _PWM4DCH_PWM4DC6_POSN                               0x4
#define _PWM4DCH_PWM4DC6_POSITION                           0x4
#define _PWM4DCH_PWM4DC6_SIZE                               0x1
#define _PWM4DCH_PWM4DC6_LENGTH                             0x1
#define _PWM4DCH_PWM4DC6_MASK                               0x10
#define _PWM4DCH_PWM4DC7_POSN                               0x5
#define _PWM4DCH_PWM4DC7_POSITION                           0x5
#define _PWM4DCH_PWM4DC7_SIZE                               0x1
#define _PWM4DCH_PWM4DC7_LENGTH                             0x1
#define _PWM4DCH_PWM4DC7_MASK                               0x20
#define _PWM4DCH_PWM4DC8_POSN                               0x6
#define _PWM4DCH_PWM4DC8_POSITION                           0x6
#define _PWM4DCH_PWM4DC8_SIZE                               0x1
#define _PWM4DCH_PWM4DC8_LENGTH                             0x1
#define _PWM4DCH_PWM4DC8_MASK                               0x40
#define _PWM4DCH_PWM4DC9_POSN                               0x7
#define _PWM4DCH_PWM4DC9_POSITION                           0x7
#define _PWM4DCH_PWM4DC9_SIZE                               0x1
#define _PWM4DCH_PWM4DC9_LENGTH                             0x1
#define _PWM4DCH_PWM4DC9_MASK                               0x80
#define _PWM4DCH_PWMPW2_POSN                                0x0
#define _PWM4DCH_PWMPW2_POSITION                            0x0
#define _PWM4DCH_PWMPW2_SIZE                                0x1
#define _PWM4DCH_PWMPW2_LENGTH                              0x1
#define _PWM4DCH_PWMPW2_MASK                                0x1
#define _PWM4DCH_PWMPW3_POSN                                0x1
#define _PWM4DCH_PWMPW3_POSITION                            0x1
#define _PWM4DCH_PWMPW3_SIZE                                0x1
#define _PWM4DCH_PWMPW3_LENGTH                              0x1
#define _PWM4DCH_PWMPW3_MASK                                0x2
#define _PWM4DCH_PWMPW4_POSN                                0x2
#define _PWM4DCH_PWMPW4_POSITION                            0x2
#define _PWM4DCH_PWMPW4_SIZE                                0x1
#define _PWM4DCH_PWMPW4_LENGTH                              0x1
#define _PWM4DCH_PWMPW4_MASK                                0x4
#define _PWM4DCH_PWMPW5_POSN                                0x3
#define _PWM4DCH_PWMPW5_POSITION                            0x3
#define _PWM4DCH_PWMPW5_SIZE                                0x1
#define _PWM4DCH_PWMPW5_LENGTH                              0x1
#define _PWM4DCH_PWMPW5_MASK                                0x8
#define _PWM4DCH_PWMPW6_POSN                                0x4
#define _PWM4DCH_PWMPW6_POSITION                            0x4
#define _PWM4DCH_PWMPW6_SIZE                                0x1
#define _PWM4DCH_PWMPW6_LENGTH                              0x1
#define _PWM4DCH_PWMPW6_MASK                                0x10
#define _PWM4DCH_PWMPW7_POSN                                0x5
#define _PWM4DCH_PWMPW7_POSITION                            0x5
#define _PWM4DCH_PWMPW7_SIZE                                0x1
#define _PWM4DCH_PWMPW7_LENGTH                              0x1
#define _PWM4DCH_PWMPW7_MASK                                0x20
#define _PWM4DCH_PWMPW8_POSN                                0x6
#define _PWM4DCH_PWMPW8_POSITION                            0x6
#define _PWM4DCH_PWMPW8_SIZE                                0x1
#define _PWM4DCH_PWMPW8_LENGTH                              0x1
#define _PWM4DCH_PWMPW8_MASK                                0x40
#define _PWM4DCH_PWMPW9_POSN                                0x7
#define _PWM4DCH_PWMPW9_POSITION                            0x7
#define _PWM4DCH_PWMPW9_SIZE                                0x1
#define _PWM4DCH_PWMPW9_LENGTH                              0x1
#define _PWM4DCH_PWMPW9_MASK                                0x80

// Register: PWM4CON
#define PWM4CON PWM4CON
extern volatile unsigned char           PWM4CON             __at(0x31A);
#ifndef _LIB_BUILD
asm("PWM4CON equ 031Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM4POL                :1;
        unsigned PWM4OUT                :1;
        unsigned                        :1;
        unsigned PWM4EN                 :1;
    };
} PWM4CONbits_t;
extern volatile PWM4CONbits_t PWM4CONbits __at(0x31A);
// bitfield macros
#define _PWM4CON_POL_POSN                                   0x4
#define _PWM4CON_POL_POSITION                               0x4
#define _PWM4CON_POL_SIZE                                   0x1
#define _PWM4CON_POL_LENGTH                                 0x1
#define _PWM4CON_POL_MASK                                   0x10
#define _PWM4CON_OUT_POSN                                   0x5
#define _PWM4CON_OUT_POSITION                               0x5
#define _PWM4CON_OUT_SIZE                                   0x1
#define _PWM4CON_OUT_LENGTH                                 0x1
#define _PWM4CON_OUT_MASK                                   0x20
#define _PWM4CON_EN_POSN                                    0x7
#define _PWM4CON_EN_POSITION                                0x7
#define _PWM4CON_EN_SIZE                                    0x1
#define _PWM4CON_EN_LENGTH                                  0x1
#define _PWM4CON_EN_MASK                                    0x80
#define _PWM4CON_PWM4POL_POSN                               0x4
#define _PWM4CON_PWM4POL_POSITION                           0x4
#define _PWM4CON_PWM4POL_SIZE                               0x1
#define _PWM4CON_PWM4POL_LENGTH                             0x1
#define _PWM4CON_PWM4POL_MASK                               0x10
#define _PWM4CON_PWM4OUT_POSN                               0x5
#define _PWM4CON_PWM4OUT_POSITION                           0x5
#define _PWM4CON_PWM4OUT_SIZE                               0x1
#define _PWM4CON_PWM4OUT_LENGTH                             0x1
#define _PWM4CON_PWM4OUT_MASK                               0x20
#define _PWM4CON_PWM4EN_POSN                                0x7
#define _PWM4CON_PWM4EN_POSITION                            0x7
#define _PWM4CON_PWM4EN_SIZE                                0x1
#define _PWM4CON_PWM4EN_LENGTH                              0x1
#define _PWM4CON_PWM4EN_MASK                                0x80

// Register: PWM5DC
#define PWM5DC PWM5DC
extern volatile unsigned short          PWM5DC              __at(0x31C);
#ifndef _LIB_BUILD
asm("PWM5DC equ 031Ch");
#endif

// Register: PWM5DCL
#define PWM5DCL PWM5DCL
extern volatile unsigned char           PWM5DCL             __at(0x31C);
#ifndef _LIB_BUILD
asm("PWM5DCL equ 031Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM5DC0                :1;
        unsigned PWM5DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM5DCLbits_t;
extern volatile PWM5DCLbits_t PWM5DCLbits __at(0x31C);
// bitfield macros
#define _PWM5DCL_DC_POSN                                    0x6
#define _PWM5DCL_DC_POSITION                                0x6
#define _PWM5DCL_DC_SIZE                                    0x2
#define _PWM5DCL_DC_LENGTH                                  0x2
#define _PWM5DCL_DC_MASK                                    0xC0
#define _PWM5DCL_DC0_POSN                                   0x6
#define _PWM5DCL_DC0_POSITION                               0x6
#define _PWM5DCL_DC0_SIZE                                   0x1
#define _PWM5DCL_DC0_LENGTH                                 0x1
#define _PWM5DCL_DC0_MASK                                   0x40
#define _PWM5DCL_DC1_POSN                                   0x7
#define _PWM5DCL_DC1_POSITION                               0x7
#define _PWM5DCL_DC1_SIZE                                   0x1
#define _PWM5DCL_DC1_LENGTH                                 0x1
#define _PWM5DCL_DC1_MASK                                   0x80
#define _PWM5DCL_PWM5DC0_POSN                               0x6
#define _PWM5DCL_PWM5DC0_POSITION                           0x6
#define _PWM5DCL_PWM5DC0_SIZE                               0x1
#define _PWM5DCL_PWM5DC0_LENGTH                             0x1
#define _PWM5DCL_PWM5DC0_MASK                               0x40
#define _PWM5DCL_PWM5DC1_POSN                               0x7
#define _PWM5DCL_PWM5DC1_POSITION                           0x7
#define _PWM5DCL_PWM5DC1_SIZE                               0x1
#define _PWM5DCL_PWM5DC1_LENGTH                             0x1
#define _PWM5DCL_PWM5DC1_MASK                               0x80
#define _PWM5DCL_PWMPW0_POSN                                0x6
#define _PWM5DCL_PWMPW0_POSITION                            0x6
#define _PWM5DCL_PWMPW0_SIZE                                0x1
#define _PWM5DCL_PWMPW0_LENGTH                              0x1
#define _PWM5DCL_PWMPW0_MASK                                0x40
#define _PWM5DCL_PWMPW1_POSN                                0x7
#define _PWM5DCL_PWMPW1_POSITION                            0x7
#define _PWM5DCL_PWMPW1_SIZE                                0x1
#define _PWM5DCL_PWMPW1_LENGTH                              0x1
#define _PWM5DCL_PWMPW1_MASK                                0x80

// Register: PWM5DCH
#define PWM5DCH PWM5DCH
extern volatile unsigned char           PWM5DCH             __at(0x31D);
#ifndef _LIB_BUILD
asm("PWM5DCH equ 031Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM5DC2                :1;
        unsigned PWM5DC3                :1;
        unsigned PWM5DC4                :1;
        unsigned PWM5DC5                :1;
        unsigned PWM5DC6                :1;
        unsigned PWM5DC7                :1;
        unsigned PWM5DC8                :1;
        unsigned PWM5DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM5DCHbits_t;
extern volatile PWM5DCHbits_t PWM5DCHbits __at(0x31D);
// bitfield macros
#define _PWM5DCH_DC_POSN                                    0x0
#define _PWM5DCH_DC_POSITION                                0x0
#define _PWM5DCH_DC_SIZE                                    0x8
#define _PWM5DCH_DC_LENGTH                                  0x8
#define _PWM5DCH_DC_MASK                                    0xFF
#define _PWM5DCH_DC2_POSN                                   0x0
#define _PWM5DCH_DC2_POSITION                               0x0
#define _PWM5DCH_DC2_SIZE                                   0x1
#define _PWM5DCH_DC2_LENGTH                                 0x1
#define _PWM5DCH_DC2_MASK                                   0x1
#define _PWM5DCH_DC3_POSN                                   0x1
#define _PWM5DCH_DC3_POSITION                               0x1
#define _PWM5DCH_DC3_SIZE                                   0x1
#define _PWM5DCH_DC3_LENGTH                                 0x1
#define _PWM5DCH_DC3_MASK                                   0x2
#define _PWM5DCH_DC4_POSN                                   0x2
#define _PWM5DCH_DC4_POSITION                               0x2
#define _PWM5DCH_DC4_SIZE                                   0x1
#define _PWM5DCH_DC4_LENGTH                                 0x1
#define _PWM5DCH_DC4_MASK                                   0x4
#define _PWM5DCH_DC5_POSN                                   0x3
#define _PWM5DCH_DC5_POSITION                               0x3
#define _PWM5DCH_DC5_SIZE                                   0x1
#define _PWM5DCH_DC5_LENGTH                                 0x1
#define _PWM5DCH_DC5_MASK                                   0x8
#define _PWM5DCH_DC6_POSN                                   0x4
#define _PWM5DCH_DC6_POSITION                               0x4
#define _PWM5DCH_DC6_SIZE                                   0x1
#define _PWM5DCH_DC6_LENGTH                                 0x1
#define _PWM5DCH_DC6_MASK                                   0x10
#define _PWM5DCH_DC7_POSN                                   0x5
#define _PWM5DCH_DC7_POSITION                               0x5
#define _PWM5DCH_DC7_SIZE                                   0x1
#define _PWM5DCH_DC7_LENGTH                                 0x1
#define _PWM5DCH_DC7_MASK                                   0x20
#define _PWM5DCH_DC8_POSN                                   0x6
#define _PWM5DCH_DC8_POSITION                               0x6
#define _PWM5DCH_DC8_SIZE                                   0x1
#define _PWM5DCH_DC8_LENGTH                                 0x1
#define _PWM5DCH_DC8_MASK                                   0x40
#define _PWM5DCH_DC9_POSN                                   0x7
#define _PWM5DCH_DC9_POSITION                               0x7
#define _PWM5DCH_DC9_SIZE                                   0x1
#define _PWM5DCH_DC9_LENGTH                                 0x1
#define _PWM5DCH_DC9_MASK                                   0x80
#define _PWM5DCH_PWM5DC2_POSN                               0x0
#define _PWM5DCH_PWM5DC2_POSITION                           0x0
#define _PWM5DCH_PWM5DC2_SIZE                               0x1
#define _PWM5DCH_PWM5DC2_LENGTH                             0x1
#define _PWM5DCH_PWM5DC2_MASK                               0x1
#define _PWM5DCH_PWM5DC3_POSN                               0x1
#define _PWM5DCH_PWM5DC3_POSITION                           0x1
#define _PWM5DCH_PWM5DC3_SIZE                               0x1
#define _PWM5DCH_PWM5DC3_LENGTH                             0x1
#define _PWM5DCH_PWM5DC3_MASK                               0x2
#define _PWM5DCH_PWM5DC4_POSN                               0x2
#define _PWM5DCH_PWM5DC4_POSITION                           0x2
#define _PWM5DCH_PWM5DC4_SIZE                               0x1
#define _PWM5DCH_PWM5DC4_LENGTH                             0x1
#define _PWM5DCH_PWM5DC4_MASK                               0x4
#define _PWM5DCH_PWM5DC5_POSN                               0x3
#define _PWM5DCH_PWM5DC5_POSITION                           0x3
#define _PWM5DCH_PWM5DC5_SIZE                               0x1
#define _PWM5DCH_PWM5DC5_LENGTH                             0x1
#define _PWM5DCH_PWM5DC5_MASK                               0x8
#define _PWM5DCH_PWM5DC6_POSN                               0x4
#define _PWM5DCH_PWM5DC6_POSITION                           0x4
#define _PWM5DCH_PWM5DC6_SIZE                               0x1
#define _PWM5DCH_PWM5DC6_LENGTH                             0x1
#define _PWM5DCH_PWM5DC6_MASK                               0x10
#define _PWM5DCH_PWM5DC7_POSN                               0x5
#define _PWM5DCH_PWM5DC7_POSITION                           0x5
#define _PWM5DCH_PWM5DC7_SIZE                               0x1
#define _PWM5DCH_PWM5DC7_LENGTH                             0x1
#define _PWM5DCH_PWM5DC7_MASK                               0x20
#define _PWM5DCH_PWM5DC8_POSN                               0x6
#define _PWM5DCH_PWM5DC8_POSITION                           0x6
#define _PWM5DCH_PWM5DC8_SIZE                               0x1
#define _PWM5DCH_PWM5DC8_LENGTH                             0x1
#define _PWM5DCH_PWM5DC8_MASK                               0x40
#define _PWM5DCH_PWM5DC9_POSN                               0x7
#define _PWM5DCH_PWM5DC9_POSITION                           0x7
#define _PWM5DCH_PWM5DC9_SIZE                               0x1
#define _PWM5DCH_PWM5DC9_LENGTH                             0x1
#define _PWM5DCH_PWM5DC9_MASK                               0x80
#define _PWM5DCH_PWMPW2_POSN                                0x0
#define _PWM5DCH_PWMPW2_POSITION                            0x0
#define _PWM5DCH_PWMPW2_SIZE                                0x1
#define _PWM5DCH_PWMPW2_LENGTH                              0x1
#define _PWM5DCH_PWMPW2_MASK                                0x1
#define _PWM5DCH_PWMPW3_POSN                                0x1
#define _PWM5DCH_PWMPW3_POSITION                            0x1
#define _PWM5DCH_PWMPW3_SIZE                                0x1
#define _PWM5DCH_PWMPW3_LENGTH                              0x1
#define _PWM5DCH_PWMPW3_MASK                                0x2
#define _PWM5DCH_PWMPW4_POSN                                0x2
#define _PWM5DCH_PWMPW4_POSITION                            0x2
#define _PWM5DCH_PWMPW4_SIZE                                0x1
#define _PWM5DCH_PWMPW4_LENGTH                              0x1
#define _PWM5DCH_PWMPW4_MASK                                0x4
#define _PWM5DCH_PWMPW5_POSN                                0x3
#define _PWM5DCH_PWMPW5_POSITION                            0x3
#define _PWM5DCH_PWMPW5_SIZE                                0x1
#define _PWM5DCH_PWMPW5_LENGTH                              0x1
#define _PWM5DCH_PWMPW5_MASK                                0x8
#define _PWM5DCH_PWMPW6_POSN                                0x4
#define _PWM5DCH_PWMPW6_POSITION                            0x4
#define _PWM5DCH_PWMPW6_SIZE                                0x1
#define _PWM5DCH_PWMPW6_LENGTH                              0x1
#define _PWM5DCH_PWMPW6_MASK                                0x10
#define _PWM5DCH_PWMPW7_POSN                                0x5
#define _PWM5DCH_PWMPW7_POSITION                            0x5
#define _PWM5DCH_PWMPW7_SIZE                                0x1
#define _PWM5DCH_PWMPW7_LENGTH                              0x1
#define _PWM5DCH_PWMPW7_MASK                                0x20
#define _PWM5DCH_PWMPW8_POSN                                0x6
#define _PWM5DCH_PWMPW8_POSITION                            0x6
#define _PWM5DCH_PWMPW8_SIZE                                0x1
#define _PWM5DCH_PWMPW8_LENGTH                              0x1
#define _PWM5DCH_PWMPW8_MASK                                0x40
#define _PWM5DCH_PWMPW9_POSN                                0x7
#define _PWM5DCH_PWMPW9_POSITION                            0x7
#define _PWM5DCH_PWMPW9_SIZE                                0x1
#define _PWM5DCH_PWMPW9_LENGTH                              0x1
#define _PWM5DCH_PWMPW9_MASK                                0x80

// Register: PWM5CON
#define PWM5CON PWM5CON
extern volatile unsigned char           PWM5CON             __at(0x31E);
#ifndef _LIB_BUILD
asm("PWM5CON equ 031Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM5POL                :1;
        unsigned PWM5OUT                :1;
        unsigned                        :1;
        unsigned PWM5EN                 :1;
    };
} PWM5CONbits_t;
extern volatile PWM5CONbits_t PWM5CONbits __at(0x31E);
// bitfield macros
#define _PWM5CON_POL_POSN                                   0x4
#define _PWM5CON_POL_POSITION                               0x4
#define _PWM5CON_POL_SIZE                                   0x1
#define _PWM5CON_POL_LENGTH                                 0x1
#define _PWM5CON_POL_MASK                                   0x10
#define _PWM5CON_OUT_POSN                                   0x5
#define _PWM5CON_OUT_POSITION                               0x5
#define _PWM5CON_OUT_SIZE                                   0x1
#define _PWM5CON_OUT_LENGTH                                 0x1
#define _PWM5CON_OUT_MASK                                   0x20
#define _PWM5CON_EN_POSN                                    0x7
#define _PWM5CON_EN_POSITION                                0x7
#define _PWM5CON_EN_SIZE                                    0x1
#define _PWM5CON_EN_LENGTH                                  0x1
#define _PWM5CON_EN_MASK                                    0x80
#define _PWM5CON_PWM5POL_POSN                               0x4
#define _PWM5CON_PWM5POL_POSITION                           0x4
#define _PWM5CON_PWM5POL_SIZE                               0x1
#define _PWM5CON_PWM5POL_LENGTH                             0x1
#define _PWM5CON_PWM5POL_MASK                               0x10
#define _PWM5CON_PWM5OUT_POSN                               0x5
#define _PWM5CON_PWM5OUT_POSITION                           0x5
#define _PWM5CON_PWM5OUT_SIZE                               0x1
#define _PWM5CON_PWM5OUT_LENGTH                             0x1
#define _PWM5CON_PWM5OUT_MASK                               0x20
#define _PWM5CON_PWM5EN_POSN                                0x7
#define _PWM5CON_PWM5EN_POSITION                            0x7
#define _PWM5CON_PWM5EN_SIZE                                0x1
#define _PWM5CON_PWM5EN_LENGTH                              0x1
#define _PWM5CON_PWM5EN_MASK                                0x80

// Register: PWM6DC
#define PWM6DC PWM6DC
extern volatile unsigned short          PWM6DC              __at(0x38C);
#ifndef _LIB_BUILD
asm("PWM6DC equ 038Ch");
#endif

// Register: PWM6DCL
#define PWM6DCL PWM6DCL
extern volatile unsigned char           PWM6DCL             __at(0x38C);
#ifndef _LIB_BUILD
asm("PWM6DCL equ 038Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM6DC0                :1;
        unsigned PWM6DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM6DCLbits_t;
extern volatile PWM6DCLbits_t PWM6DCLbits __at(0x38C);
// bitfield macros
#define _PWM6DCL_DC_POSN                                    0x6
#define _PWM6DCL_DC_POSITION                                0x6
#define _PWM6DCL_DC_SIZE                                    0x2
#define _PWM6DCL_DC_LENGTH                                  0x2
#define _PWM6DCL_DC_MASK                                    0xC0
#define _PWM6DCL_DC0_POSN                                   0x6
#define _PWM6DCL_DC0_POSITION                               0x6
#define _PWM6DCL_DC0_SIZE                                   0x1
#define _PWM6DCL_DC0_LENGTH                                 0x1
#define _PWM6DCL_DC0_MASK                                   0x40
#define _PWM6DCL_DC1_POSN                                   0x7
#define _PWM6DCL_DC1_POSITION                               0x7
#define _PWM6DCL_DC1_SIZE                                   0x1
#define _PWM6DCL_DC1_LENGTH                                 0x1
#define _PWM6DCL_DC1_MASK                                   0x80
#define _PWM6DCL_PWM6DC0_POSN                               0x6
#define _PWM6DCL_PWM6DC0_POSITION                           0x6
#define _PWM6DCL_PWM6DC0_SIZE                               0x1
#define _PWM6DCL_PWM6DC0_LENGTH                             0x1
#define _PWM6DCL_PWM6DC0_MASK                               0x40
#define _PWM6DCL_PWM6DC1_POSN                               0x7
#define _PWM6DCL_PWM6DC1_POSITION                           0x7
#define _PWM6DCL_PWM6DC1_SIZE                               0x1
#define _PWM6DCL_PWM6DC1_LENGTH                             0x1
#define _PWM6DCL_PWM6DC1_MASK                               0x80
#define _PWM6DCL_PWMPW0_POSN                                0x6
#define _PWM6DCL_PWMPW0_POSITION                            0x6
#define _PWM6DCL_PWMPW0_SIZE                                0x1
#define _PWM6DCL_PWMPW0_LENGTH                              0x1
#define _PWM6DCL_PWMPW0_MASK                                0x40
#define _PWM6DCL_PWMPW1_POSN                                0x7
#define _PWM6DCL_PWMPW1_POSITION                            0x7
#define _PWM6DCL_PWMPW1_SIZE                                0x1
#define _PWM6DCL_PWMPW1_LENGTH                              0x1
#define _PWM6DCL_PWMPW1_MASK                                0x80

// Register: PWM6DCH
#define PWM6DCH PWM6DCH
extern volatile unsigned char           PWM6DCH             __at(0x38D);
#ifndef _LIB_BUILD
asm("PWM6DCH equ 038Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM6DC2                :1;
        unsigned PWM6DC3                :1;
        unsigned PWM6DC4                :1;
        unsigned PWM6DC5                :1;
        unsigned PWM6DC6                :1;
        unsigned PWM6DC7                :1;
        unsigned PWM6DC8                :1;
        unsigned PWM6DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM6DCHbits_t;
extern volatile PWM6DCHbits_t PWM6DCHbits __at(0x38D);
// bitfield macros
#define _PWM6DCH_DC_POSN                                    0x0
#define _PWM6DCH_DC_POSITION                                0x0
#define _PWM6DCH_DC_SIZE                                    0x8
#define _PWM6DCH_DC_LENGTH                                  0x8
#define _PWM6DCH_DC_MASK                                    0xFF
#define _PWM6DCH_DC2_POSN                                   0x0
#define _PWM6DCH_DC2_POSITION                               0x0
#define _PWM6DCH_DC2_SIZE                                   0x1
#define _PWM6DCH_DC2_LENGTH                                 0x1
#define _PWM6DCH_DC2_MASK                                   0x1
#define _PWM6DCH_DC3_POSN                                   0x1
#define _PWM6DCH_DC3_POSITION                               0x1
#define _PWM6DCH_DC3_SIZE                                   0x1
#define _PWM6DCH_DC3_LENGTH                                 0x1
#define _PWM6DCH_DC3_MASK                                   0x2
#define _PWM6DCH_DC4_POSN                                   0x2
#define _PWM6DCH_DC4_POSITION                               0x2
#define _PWM6DCH_DC4_SIZE                                   0x1
#define _PWM6DCH_DC4_LENGTH                                 0x1
#define _PWM6DCH_DC4_MASK                                   0x4
#define _PWM6DCH_DC5_POSN                                   0x3
#define _PWM6DCH_DC5_POSITION                               0x3
#define _PWM6DCH_DC5_SIZE                                   0x1
#define _PWM6DCH_DC5_LENGTH                                 0x1
#define _PWM6DCH_DC5_MASK                                   0x8
#define _PWM6DCH_DC6_POSN                                   0x4
#define _PWM6DCH_DC6_POSITION                               0x4
#define _PWM6DCH_DC6_SIZE                                   0x1
#define _PWM6DCH_DC6_LENGTH                                 0x1
#define _PWM6DCH_DC6_MASK                                   0x10
#define _PWM6DCH_DC7_POSN                                   0x5
#define _PWM6DCH_DC7_POSITION                               0x5
#define _PWM6DCH_DC7_SIZE                                   0x1
#define _PWM6DCH_DC7_LENGTH                                 0x1
#define _PWM6DCH_DC7_MASK                                   0x20
#define _PWM6DCH_DC8_POSN                                   0x6
#define _PWM6DCH_DC8_POSITION                               0x6
#define _PWM6DCH_DC8_SIZE                                   0x1
#define _PWM6DCH_DC8_LENGTH                                 0x1
#define _PWM6DCH_DC8_MASK                                   0x40
#define _PWM6DCH_DC9_POSN                                   0x7
#define _PWM6DCH_DC9_POSITION                               0x7
#define _PWM6DCH_DC9_SIZE                                   0x1
#define _PWM6DCH_DC9_LENGTH                                 0x1
#define _PWM6DCH_DC9_MASK                                   0x80
#define _PWM6DCH_PWM6DC2_POSN                               0x0
#define _PWM6DCH_PWM6DC2_POSITION                           0x0
#define _PWM6DCH_PWM6DC2_SIZE                               0x1
#define _PWM6DCH_PWM6DC2_LENGTH                             0x1
#define _PWM6DCH_PWM6DC2_MASK                               0x1
#define _PWM6DCH_PWM6DC3_POSN                               0x1
#define _PWM6DCH_PWM6DC3_POSITION                           0x1
#define _PWM6DCH_PWM6DC3_SIZE                               0x1
#define _PWM6DCH_PWM6DC3_LENGTH                             0x1
#define _PWM6DCH_PWM6DC3_MASK                               0x2
#define _PWM6DCH_PWM6DC4_POSN                               0x2
#define _PWM6DCH_PWM6DC4_POSITION                           0x2
#define _PWM6DCH_PWM6DC4_SIZE                               0x1
#define _PWM6DCH_PWM6DC4_LENGTH                             0x1
#define _PWM6DCH_PWM6DC4_MASK                               0x4
#define _PWM6DCH_PWM6DC5_POSN                               0x3
#define _PWM6DCH_PWM6DC5_POSITION                           0x3
#define _PWM6DCH_PWM6DC5_SIZE                               0x1
#define _PWM6DCH_PWM6DC5_LENGTH                             0x1
#define _PWM6DCH_PWM6DC5_MASK                               0x8
#define _PWM6DCH_PWM6DC6_POSN                               0x4
#define _PWM6DCH_PWM6DC6_POSITION                           0x4
#define _PWM6DCH_PWM6DC6_SIZE                               0x1
#define _PWM6DCH_PWM6DC6_LENGTH                             0x1
#define _PWM6DCH_PWM6DC6_MASK                               0x10
#define _PWM6DCH_PWM6DC7_POSN                               0x5
#define _PWM6DCH_PWM6DC7_POSITION                           0x5
#define _PWM6DCH_PWM6DC7_SIZE                               0x1
#define _PWM6DCH_PWM6DC7_LENGTH                             0x1
#define _PWM6DCH_PWM6DC7_MASK                               0x20
#define _PWM6DCH_PWM6DC8_POSN                               0x6
#define _PWM6DCH_PWM6DC8_POSITION                           0x6
#define _PWM6DCH_PWM6DC8_SIZE                               0x1
#define _PWM6DCH_PWM6DC8_LENGTH                             0x1
#define _PWM6DCH_PWM6DC8_MASK                               0x40
#define _PWM6DCH_PWM6DC9_POSN                               0x7
#define _PWM6DCH_PWM6DC9_POSITION                           0x7
#define _PWM6DCH_PWM6DC9_SIZE                               0x1
#define _PWM6DCH_PWM6DC9_LENGTH                             0x1
#define _PWM6DCH_PWM6DC9_MASK                               0x80
#define _PWM6DCH_PWMPW2_POSN                                0x0
#define _PWM6DCH_PWMPW2_POSITION                            0x0
#define _PWM6DCH_PWMPW2_SIZE                                0x1
#define _PWM6DCH_PWMPW2_LENGTH                              0x1
#define _PWM6DCH_PWMPW2_MASK                                0x1
#define _PWM6DCH_PWMPW3_POSN                                0x1
#define _PWM6DCH_PWMPW3_POSITION                            0x1
#define _PWM6DCH_PWMPW3_SIZE                                0x1
#define _PWM6DCH_PWMPW3_LENGTH                              0x1
#define _PWM6DCH_PWMPW3_MASK                                0x2
#define _PWM6DCH_PWMPW4_POSN                                0x2
#define _PWM6DCH_PWMPW4_POSITION                            0x2
#define _PWM6DCH_PWMPW4_SIZE                                0x1
#define _PWM6DCH_PWMPW4_LENGTH                              0x1
#define _PWM6DCH_PWMPW4_MASK                                0x4
#define _PWM6DCH_PWMPW5_POSN                                0x3
#define _PWM6DCH_PWMPW5_POSITION                            0x3
#define _PWM6DCH_PWMPW5_SIZE                                0x1
#define _PWM6DCH_PWMPW5_LENGTH                              0x1
#define _PWM6DCH_PWMPW5_MASK                                0x8
#define _PWM6DCH_PWMPW6_POSN                                0x4
#define _PWM6DCH_PWMPW6_POSITION                            0x4
#define _PWM6DCH_PWMPW6_SIZE                                0x1
#define _PWM6DCH_PWMPW6_LENGTH                              0x1
#define _PWM6DCH_PWMPW6_MASK                                0x10
#define _PWM6DCH_PWMPW7_POSN                                0x5
#define _PWM6DCH_PWMPW7_POSITION                            0x5
#define _PWM6DCH_PWMPW7_SIZE                                0x1
#define _PWM6DCH_PWMPW7_LENGTH                              0x1
#define _PWM6DCH_PWMPW7_MASK                                0x20
#define _PWM6DCH_PWMPW8_POSN                                0x6
#define _PWM6DCH_PWMPW8_POSITION                            0x6
#define _PWM6DCH_PWMPW8_SIZE                                0x1
#define _PWM6DCH_PWMPW8_LENGTH                              0x1
#define _PWM6DCH_PWMPW8_MASK                                0x40
#define _PWM6DCH_PWMPW9_POSN                                0x7
#define _PWM6DCH_PWMPW9_POSITION                            0x7
#define _PWM6DCH_PWMPW9_SIZE                                0x1
#define _PWM6DCH_PWMPW9_LENGTH                              0x1
#define _PWM6DCH_PWMPW9_MASK                                0x80

// Register: PWM6CON
#define PWM6CON PWM6CON
extern volatile unsigned char           PWM6CON             __at(0x38E);
#ifndef _LIB_BUILD
asm("PWM6CON equ 038Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM6POL                :1;
        unsigned PWM6OUT                :1;
        unsigned                        :1;
        unsigned PWM6EN                 :1;
    };
} PWM6CONbits_t;
extern volatile PWM6CONbits_t PWM6CONbits __at(0x38E);
// bitfield macros
#define _PWM6CON_POL_POSN                                   0x4
#define _PWM6CON_POL_POSITION                               0x4
#define _PWM6CON_POL_SIZE                                   0x1
#define _PWM6CON_POL_LENGTH                                 0x1
#define _PWM6CON_POL_MASK                                   0x10
#define _PWM6CON_OUT_POSN                                   0x5
#define _PWM6CON_OUT_POSITION                               0x5
#define _PWM6CON_OUT_SIZE                                   0x1
#define _PWM6CON_OUT_LENGTH                                 0x1
#define _PWM6CON_OUT_MASK                                   0x20
#define _PWM6CON_EN_POSN                                    0x7
#define _PWM6CON_EN_POSITION                                0x7
#define _PWM6CON_EN_SIZE                                    0x1
#define _PWM6CON_EN_LENGTH                                  0x1
#define _PWM6CON_EN_MASK                                    0x80
#define _PWM6CON_PWM6POL_POSN                               0x4
#define _PWM6CON_PWM6POL_POSITION                           0x4
#define _PWM6CON_PWM6POL_SIZE                               0x1
#define _PWM6CON_PWM6POL_LENGTH                             0x1
#define _PWM6CON_PWM6POL_MASK                               0x10
#define _PWM6CON_PWM6OUT_POSN                               0x5
#define _PWM6CON_PWM6OUT_POSITION                           0x5
#define _PWM6CON_PWM6OUT_SIZE                               0x1
#define _PWM6CON_PWM6OUT_LENGTH                             0x1
#define _PWM6CON_PWM6OUT_MASK                               0x20
#define _PWM6CON_PWM6EN_POSN                                0x7
#define _PWM6CON_PWM6EN_POSITION                            0x7
#define _PWM6CON_PWM6EN_SIZE                                0x1
#define _PWM6CON_PWM6EN_LENGTH                              0x1
#define _PWM6CON_PWM6EN_MASK                                0x80

// Register: NCO1ACC
#define NCO1ACC NCO1ACC
#ifndef __CCI__
extern volatile __uint24                NCO1ACC             __at(0x58C);
#endif
#ifndef _LIB_BUILD
asm("NCO1ACC equ 058Ch");
#endif

// Register: NCO1ACCL
#define NCO1ACCL NCO1ACCL
extern volatile unsigned char           NCO1ACCL            __at(0x58C);
#ifndef _LIB_BUILD
asm("NCO1ACCL equ 058Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1ACC0               :1;
        unsigned NCO1ACC1               :1;
        unsigned NCO1ACC2               :1;
        unsigned NCO1ACC3               :1;
        unsigned NCO1ACC4               :1;
        unsigned NCO1ACC5               :1;
        unsigned NCO1ACC6               :1;
        unsigned NCO1ACC7               :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCLbits_t;
extern volatile NCO1ACCLbits_t NCO1ACCLbits __at(0x58C);
// bitfield macros
#define _NCO1ACCL_NCO1ACC0_POSN                             0x0
#define _NCO1ACCL_NCO1ACC0_POSITION                         0x0
#define _NCO1ACCL_NCO1ACC0_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC0_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC0_MASK                             0x1
#define _NCO1ACCL_NCO1ACC1_POSN                             0x1
#define _NCO1ACCL_NCO1ACC1_POSITION                         0x1
#define _NCO1ACCL_NCO1ACC1_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC1_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC1_MASK                             0x2
#define _NCO1ACCL_NCO1ACC2_POSN                             0x2
#define _NCO1ACCL_NCO1ACC2_POSITION                         0x2
#define _NCO1ACCL_NCO1ACC2_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC2_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC2_MASK                             0x4
#define _NCO1ACCL_NCO1ACC3_POSN                             0x3
#define _NCO1ACCL_NCO1ACC3_POSITION                         0x3
#define _NCO1ACCL_NCO1ACC3_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC3_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC3_MASK                             0x8
#define _NCO1ACCL_NCO1ACC4_POSN                             0x4
#define _NCO1ACCL_NCO1ACC4_POSITION                         0x4
#define _NCO1ACCL_NCO1ACC4_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC4_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC4_MASK                             0x10
#define _NCO1ACCL_NCO1ACC5_POSN                             0x5
#define _NCO1ACCL_NCO1ACC5_POSITION                         0x5
#define _NCO1ACCL_NCO1ACC5_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC5_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC5_MASK                             0x20
#define _NCO1ACCL_NCO1ACC6_POSN                             0x6
#define _NCO1ACCL_NCO1ACC6_POSITION                         0x6
#define _NCO1ACCL_NCO1ACC6_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC6_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC6_MASK                             0x40
#define _NCO1ACCL_NCO1ACC7_POSN                             0x7
#define _NCO1ACCL_NCO1ACC7_POSITION                         0x7
#define _NCO1ACCL_NCO1ACC7_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC7_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC7_MASK                             0x80
#define _NCO1ACCL_NCO1ACC_POSN                              0x0
#define _NCO1ACCL_NCO1ACC_POSITION                          0x0
#define _NCO1ACCL_NCO1ACC_SIZE                              0x8
#define _NCO1ACCL_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCL_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCH
#define NCO1ACCH NCO1ACCH
extern volatile unsigned char           NCO1ACCH            __at(0x58D);
#ifndef _LIB_BUILD
asm("NCO1ACCH equ 058Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1ACC8               :1;
        unsigned NCO1ACC9               :1;
        unsigned NCO1ACC10              :1;
        unsigned NCO1ACC11              :1;
        unsigned NCO1ACC12              :1;
        unsigned NCO1ACC13              :1;
        unsigned NCO1ACC14              :1;
        unsigned NCO1ACC15              :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCHbits_t;
extern volatile NCO1ACCHbits_t NCO1ACCHbits __at(0x58D);
// bitfield macros
#define _NCO1ACCH_NCO1ACC8_POSN                             0x0
#define _NCO1ACCH_NCO1ACC8_POSITION                         0x0
#define _NCO1ACCH_NCO1ACC8_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC8_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC8_MASK                             0x1
#define _NCO1ACCH_NCO1ACC9_POSN                             0x1
#define _NCO1ACCH_NCO1ACC9_POSITION                         0x1
#define _NCO1ACCH_NCO1ACC9_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC9_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC9_MASK                             0x2
#define _NCO1ACCH_NCO1ACC10_POSN                            0x2
#define _NCO1ACCH_NCO1ACC10_POSITION                        0x2
#define _NCO1ACCH_NCO1ACC10_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC10_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC10_MASK                            0x4
#define _NCO1ACCH_NCO1ACC11_POSN                            0x3
#define _NCO1ACCH_NCO1ACC11_POSITION                        0x3
#define _NCO1ACCH_NCO1ACC11_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC11_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC11_MASK                            0x8
#define _NCO1ACCH_NCO1ACC12_POSN                            0x4
#define _NCO1ACCH_NCO1ACC12_POSITION                        0x4
#define _NCO1ACCH_NCO1ACC12_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC12_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC12_MASK                            0x10
#define _NCO1ACCH_NCO1ACC13_POSN                            0x5
#define _NCO1ACCH_NCO1ACC13_POSITION                        0x5
#define _NCO1ACCH_NCO1ACC13_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC13_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC13_MASK                            0x20
#define _NCO1ACCH_NCO1ACC14_POSN                            0x6
#define _NCO1ACCH_NCO1ACC14_POSITION                        0x6
#define _NCO1ACCH_NCO1ACC14_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC14_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC14_MASK                            0x40
#define _NCO1ACCH_NCO1ACC15_POSN                            0x7
#define _NCO1ACCH_NCO1ACC15_POSITION                        0x7
#define _NCO1ACCH_NCO1ACC15_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC15_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC15_MASK                            0x80
#define _NCO1ACCH_NCO1ACC_POSN                              0x0
#define _NCO1ACCH_NCO1ACC_POSITION                          0x0
#define _NCO1ACCH_NCO1ACC_SIZE                              0x8
#define _NCO1ACCH_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCH_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCU
#define NCO1ACCU NCO1ACCU
extern volatile unsigned char           NCO1ACCU            __at(0x58E);
#ifndef _LIB_BUILD
asm("NCO1ACCU equ 058Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1ACC16              :1;
        unsigned NCO1ACC17              :1;
        unsigned NCO1ACC18              :1;
        unsigned NCO1ACC19              :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCUbits_t;
extern volatile NCO1ACCUbits_t NCO1ACCUbits __at(0x58E);
// bitfield macros
#define _NCO1ACCU_NCO1ACC16_POSN                            0x0
#define _NCO1ACCU_NCO1ACC16_POSITION                        0x0
#define _NCO1ACCU_NCO1ACC16_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC16_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC16_MASK                            0x1
#define _NCO1ACCU_NCO1ACC17_POSN                            0x1
#define _NCO1ACCU_NCO1ACC17_POSITION                        0x1
#define _NCO1ACCU_NCO1ACC17_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC17_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC17_MASK                            0x2
#define _NCO1ACCU_NCO1ACC18_POSN                            0x2
#define _NCO1ACCU_NCO1ACC18_POSITION                        0x2
#define _NCO1ACCU_NCO1ACC18_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC18_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC18_MASK                            0x4
#define _NCO1ACCU_NCO1ACC19_POSN                            0x3
#define _NCO1ACCU_NCO1ACC19_POSITION                        0x3
#define _NCO1ACCU_NCO1ACC19_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC19_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC19_MASK                            0x8
#define _NCO1ACCU_NCO1ACC_POSN                              0x0
#define _NCO1ACCU_NCO1ACC_POSITION                          0x0
#define _NCO1ACCU_NCO1ACC_SIZE                              0x8
#define _NCO1ACCU_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCU_NCO1ACC_MASK                              0xFF

// Register: NCO1INC
#define NCO1INC NCO1INC
#ifndef __CCI__
extern volatile __uint24                NCO1INC             __at(0x58F);
#endif
#ifndef _LIB_BUILD
asm("NCO1INC equ 058Fh");
#endif

// Register: NCO1INCL
#define NCO1INCL NCO1INCL
extern volatile unsigned char           NCO1INCL            __at(0x58F);
#ifndef _LIB_BUILD
asm("NCO1INCL equ 058Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1INC0               :1;
        unsigned NCO1INC1               :1;
        unsigned NCO1INC2               :1;
        unsigned NCO1INC3               :1;
        unsigned NCO1INC4               :1;
        unsigned NCO1INC5               :1;
        unsigned NCO1INC6               :1;
        unsigned NCO1INC7               :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCLbits_t;
extern volatile NCO1INCLbits_t NCO1INCLbits __at(0x58F);
// bitfield macros
#define _NCO1INCL_NCO1INC0_POSN                             0x0
#define _NCO1INCL_NCO1INC0_POSITION                         0x0
#define _NCO1INCL_NCO1INC0_SIZE                             0x1
#define _NCO1INCL_NCO1INC0_LENGTH                           0x1
#define _NCO1INCL_NCO1INC0_MASK                             0x1
#define _NCO1INCL_NCO1INC1_POSN                             0x1
#define _NCO1INCL_NCO1INC1_POSITION                         0x1
#define _NCO1INCL_NCO1INC1_SIZE                             0x1
#define _NCO1INCL_NCO1INC1_LENGTH                           0x1
#define _NCO1INCL_NCO1INC1_MASK                             0x2
#define _NCO1INCL_NCO1INC2_POSN                             0x2
#define _NCO1INCL_NCO1INC2_POSITION                         0x2
#define _NCO1INCL_NCO1INC2_SIZE                             0x1
#define _NCO1INCL_NCO1INC2_LENGTH                           0x1
#define _NCO1INCL_NCO1INC2_MASK                             0x4
#define _NCO1INCL_NCO1INC3_POSN                             0x3
#define _NCO1INCL_NCO1INC3_POSITION                         0x3
#define _NCO1INCL_NCO1INC3_SIZE                             0x1
#define _NCO1INCL_NCO1INC3_LENGTH                           0x1
#define _NCO1INCL_NCO1INC3_MASK                             0x8
#define _NCO1INCL_NCO1INC4_POSN                             0x4
#define _NCO1INCL_NCO1INC4_POSITION                         0x4
#define _NCO1INCL_NCO1INC4_SIZE                             0x1
#define _NCO1INCL_NCO1INC4_LENGTH                           0x1
#define _NCO1INCL_NCO1INC4_MASK                             0x10
#define _NCO1INCL_NCO1INC5_POSN                             0x5
#define _NCO1INCL_NCO1INC5_POSITION                         0x5
#define _NCO1INCL_NCO1INC5_SIZE                             0x1
#define _NCO1INCL_NCO1INC5_LENGTH                           0x1
#define _NCO1INCL_NCO1INC5_MASK                             0x20
#define _NCO1INCL_NCO1INC6_POSN                             0x6
#define _NCO1INCL_NCO1INC6_POSITION                         0x6
#define _NCO1INCL_NCO1INC6_SIZE                             0x1
#define _NCO1INCL_NCO1INC6_LENGTH                           0x1
#define _NCO1INCL_NCO1INC6_MASK                             0x40
#define _NCO1INCL_NCO1INC7_POSN                             0x7
#define _NCO1INCL_NCO1INC7_POSITION                         0x7
#define _NCO1INCL_NCO1INC7_SIZE                             0x1
#define _NCO1INCL_NCO1INC7_LENGTH                           0x1
#define _NCO1INCL_NCO1INC7_MASK                             0x80
#define _NCO1INCL_NCO1INC_POSN                              0x0
#define _NCO1INCL_NCO1INC_POSITION                          0x0
#define _NCO1INCL_NCO1INC_SIZE                              0x8
#define _NCO1INCL_NCO1INC_LENGTH                            0x8
#define _NCO1INCL_NCO1INC_MASK                              0xFF

// Register: NCO1INCH
#define NCO1INCH NCO1INCH
extern volatile unsigned char           NCO1INCH            __at(0x590);
#ifndef _LIB_BUILD
asm("NCO1INCH equ 0590h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1INC8               :1;
        unsigned NCO1INC9               :1;
        unsigned NCO1INC10              :1;
        unsigned NCO1INC11              :1;
        unsigned NCO1INC12              :1;
        unsigned NCO1INC13              :1;
        unsigned NCO1INC14              :1;
        unsigned NCO1INC15              :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCHbits_t;
extern volatile NCO1INCHbits_t NCO1INCHbits __at(0x590);
// bitfield macros
#define _NCO1INCH_NCO1INC8_POSN                             0x0
#define _NCO1INCH_NCO1INC8_POSITION                         0x0
#define _NCO1INCH_NCO1INC8_SIZE                             0x1
#define _NCO1INCH_NCO1INC8_LENGTH                           0x1
#define _NCO1INCH_NCO1INC8_MASK                             0x1
#define _NCO1INCH_NCO1INC9_POSN                             0x1
#define _NCO1INCH_NCO1INC9_POSITION                         0x1
#define _NCO1INCH_NCO1INC9_SIZE                             0x1
#define _NCO1INCH_NCO1INC9_LENGTH                           0x1
#define _NCO1INCH_NCO1INC9_MASK                             0x2
#define _NCO1INCH_NCO1INC10_POSN                            0x2
#define _NCO1INCH_NCO1INC10_POSITION                        0x2
#define _NCO1INCH_NCO1INC10_SIZE                            0x1
#define _NCO1INCH_NCO1INC10_LENGTH                          0x1
#define _NCO1INCH_NCO1INC10_MASK                            0x4
#define _NCO1INCH_NCO1INC11_POSN                            0x3
#define _NCO1INCH_NCO1INC11_POSITION                        0x3
#define _NCO1INCH_NCO1INC11_SIZE                            0x1
#define _NCO1INCH_NCO1INC11_LENGTH                          0x1
#define _NCO1INCH_NCO1INC11_MASK                            0x8
#define _NCO1INCH_NCO1INC12_POSN                            0x4
#define _NCO1INCH_NCO1INC12_POSITION                        0x4
#define _NCO1INCH_NCO1INC12_SIZE                            0x1
#define _NCO1INCH_NCO1INC12_LENGTH                          0x1
#define _NCO1INCH_NCO1INC12_MASK                            0x10
#define _NCO1INCH_NCO1INC13_POSN                            0x5
#define _NCO1INCH_NCO1INC13_POSITION                        0x5
#define _NCO1INCH_NCO1INC13_SIZE                            0x1
#define _NCO1INCH_NCO1INC13_LENGTH                          0x1
#define _NCO1INCH_NCO1INC13_MASK                            0x20
#define _NCO1INCH_NCO1INC14_POSN                            0x6
#define _NCO1INCH_NCO1INC14_POSITION                        0x6
#define _NCO1INCH_NCO1INC14_SIZE                            0x1
#define _NCO1INCH_NCO1INC14_LENGTH                          0x1
#define _NCO1INCH_NCO1INC14_MASK                            0x40
#define _NCO1INCH_NCO1INC15_POSN                            0x7
#define _NCO1INCH_NCO1INC15_POSITION                        0x7
#define _NCO1INCH_NCO1INC15_SIZE                            0x1
#define _NCO1INCH_NCO1INC15_LENGTH                          0x1
#define _NCO1INCH_NCO1INC15_MASK                            0x80
#define _NCO1INCH_NCO1INC_POSN                              0x0
#define _NCO1INCH_NCO1INC_POSITION                          0x0
#define _NCO1INCH_NCO1INC_SIZE                              0x8
#define _NCO1INCH_NCO1INC_LENGTH                            0x8
#define _NCO1INCH_NCO1INC_MASK                              0xFF

// Register: NCO1INCU
#define NCO1INCU NCO1INCU
extern volatile unsigned char           NCO1INCU            __at(0x591);
#ifndef _LIB_BUILD
asm("NCO1INCU equ 0591h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1INC16              :1;
        unsigned NCO1INC17              :1;
        unsigned NCO1INC18              :1;
        unsigned NCO1INC19              :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCUbits_t;
extern volatile NCO1INCUbits_t NCO1INCUbits __at(0x591);
// bitfield macros
#define _NCO1INCU_NCO1INC16_POSN                            0x0
#define _NCO1INCU_NCO1INC16_POSITION                        0x0
#define _NCO1INCU_NCO1INC16_SIZE                            0x1
#define _NCO1INCU_NCO1INC16_LENGTH                          0x1
#define _NCO1INCU_NCO1INC16_MASK                            0x1
#define _NCO1INCU_NCO1INC17_POSN                            0x1
#define _NCO1INCU_NCO1INC17_POSITION                        0x1
#define _NCO1INCU_NCO1INC17_SIZE                            0x1
#define _NCO1INCU_NCO1INC17_LENGTH                          0x1
#define _NCO1INCU_NCO1INC17_MASK                            0x2
#define _NCO1INCU_NCO1INC18_POSN                            0x2
#define _NCO1INCU_NCO1INC18_POSITION                        0x2
#define _NCO1INCU_NCO1INC18_SIZE                            0x1
#define _NCO1INCU_NCO1INC18_LENGTH                          0x1
#define _NCO1INCU_NCO1INC18_MASK                            0x4
#define _NCO1INCU_NCO1INC19_POSN                            0x3
#define _NCO1INCU_NCO1INC19_POSITION                        0x3
#define _NCO1INCU_NCO1INC19_SIZE                            0x1
#define _NCO1INCU_NCO1INC19_LENGTH                          0x1
#define _NCO1INCU_NCO1INC19_MASK                            0x8
#define _NCO1INCU_NCO1INC_POSN                              0x0
#define _NCO1INCU_NCO1INC_POSITION                          0x0
#define _NCO1INCU_NCO1INC_SIZE                              0x8
#define _NCO1INCU_NCO1INC_LENGTH                            0x8
#define _NCO1INCU_NCO1INC_MASK                              0xFF

// Register: NCO1CON
#define NCO1CON NCO1CON
extern volatile unsigned char           NCO1CON             __at(0x592);
#ifndef _LIB_BUILD
asm("NCO1CON equ 0592h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned N1PFM                  :1;
        unsigned                        :3;
        unsigned N1POL                  :1;
        unsigned N1OUT                  :1;
        unsigned                        :1;
        unsigned N1EN                   :1;
    };
} NCO1CONbits_t;
extern volatile NCO1CONbits_t NCO1CONbits __at(0x592);
// bitfield macros
#define _NCO1CON_N1PFM_POSN                                 0x0
#define _NCO1CON_N1PFM_POSITION                             0x0
#define _NCO1CON_N1PFM_SIZE                                 0x1
#define _NCO1CON_N1PFM_LENGTH                               0x1
#define _NCO1CON_N1PFM_MASK                                 0x1
#define _NCO1CON_N1POL_POSN                                 0x4
#define _NCO1CON_N1POL_POSITION                             0x4
#define _NCO1CON_N1POL_SIZE                                 0x1
#define _NCO1CON_N1POL_LENGTH                               0x1
#define _NCO1CON_N1POL_MASK                                 0x10
#define _NCO1CON_N1OUT_POSN                                 0x5
#define _NCO1CON_N1OUT_POSITION                             0x5
#define _NCO1CON_N1OUT_SIZE                                 0x1
#define _NCO1CON_N1OUT_LENGTH                               0x1
#define _NCO1CON_N1OUT_MASK                                 0x20
#define _NCO1CON_N1EN_POSN                                  0x7
#define _NCO1CON_N1EN_POSITION                              0x7
#define _NCO1CON_N1EN_SIZE                                  0x1
#define _NCO1CON_N1EN_LENGTH                                0x1
#define _NCO1CON_N1EN_MASK                                  0x80

// Register: NCO1CLK
#define NCO1CLK NCO1CLK
extern volatile unsigned char           NCO1CLK             __at(0x593);
#ifndef _LIB_BUILD
asm("NCO1CLK equ 0593h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned N1CKS0                 :1;
        unsigned N1CKS1                 :1;
        unsigned N1CKS2                 :1;
        unsigned                        :2;
        unsigned N1PWS0                 :1;
        unsigned N1PWS1                 :1;
        unsigned N1PWS2                 :1;
    };
    struct {
        unsigned N1CKS                  :4;
        unsigned                        :1;
        unsigned N1PWS                  :3;
    };
} NCO1CLKbits_t;
extern volatile NCO1CLKbits_t NCO1CLKbits __at(0x593);
// bitfield macros
#define _NCO1CLK_N1CKS0_POSN                                0x0
#define _NCO1CLK_N1CKS0_POSITION                            0x0
#define _NCO1CLK_N1CKS0_SIZE                                0x1
#define _NCO1CLK_N1CKS0_LENGTH                              0x1
#define _NCO1CLK_N1CKS0_MASK                                0x1
#define _NCO1CLK_N1CKS1_POSN                                0x1
#define _NCO1CLK_N1CKS1_POSITION                            0x1
#define _NCO1CLK_N1CKS1_SIZE                                0x1
#define _NCO1CLK_N1CKS1_LENGTH                              0x1
#define _NCO1CLK_N1CKS1_MASK                                0x2
#define _NCO1CLK_N1CKS2_POSN                                0x2
#define _NCO1CLK_N1CKS2_POSITION                            0x2
#define _NCO1CLK_N1CKS2_SIZE                                0x1
#define _NCO1CLK_N1CKS2_LENGTH                              0x1
#define _NCO1CLK_N1CKS2_MASK                                0x4
#define _NCO1CLK_N1PWS0_POSN                                0x5
#define _NCO1CLK_N1PWS0_POSITION                            0x5
#define _NCO1CLK_N1PWS0_SIZE                                0x1
#define _NCO1CLK_N1PWS0_LENGTH                              0x1
#define _NCO1CLK_N1PWS0_MASK                                0x20
#define _NCO1CLK_N1PWS1_POSN                                0x6
#define _NCO1CLK_N1PWS1_POSITION                            0x6
#define _NCO1CLK_N1PWS1_SIZE                                0x1
#define _NCO1CLK_N1PWS1_LENGTH                              0x1
#define _NCO1CLK_N1PWS1_MASK                                0x40
#define _NCO1CLK_N1PWS2_POSN                                0x7
#define _NCO1CLK_N1PWS2_POSITION                            0x7
#define _NCO1CLK_N1PWS2_SIZE                                0x1
#define _NCO1CLK_N1PWS2_LENGTH                              0x1
#define _NCO1CLK_N1PWS2_MASK                                0x80
#define _NCO1CLK_N1CKS_POSN                                 0x0
#define _NCO1CLK_N1CKS_POSITION                             0x0
#define _NCO1CLK_N1CKS_SIZE                                 0x4
#define _NCO1CLK_N1CKS_LENGTH                               0x4
#define _NCO1CLK_N1CKS_MASK                                 0xF
#define _NCO1CLK_N1PWS_POSN                                 0x5
#define _NCO1CLK_N1PWS_POSITION                             0x5
#define _NCO1CLK_N1PWS_SIZE                                 0x3
#define _NCO1CLK_N1PWS_LENGTH                               0x3
#define _NCO1CLK_N1PWS_MASK                                 0xE0

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x59C);
#ifndef _LIB_BUILD
asm("TMR0L equ 059Ch");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x59C);
#ifndef _LIB_BUILD
asm("TMR0 equ 059Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x59C);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x59C);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x59D);
#ifndef _LIB_BUILD
asm("TMR0H equ 059Dh");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x59D);
#ifndef _LIB_BUILD
asm("PR0 equ 059Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x59D);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x59D);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x59E);
#ifndef _LIB_BUILD
asm("T0CON0 equ 059Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0OUTPS                :4;
        unsigned T016BIT                :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x59E);
// bitfield macros
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x59F);
#ifndef _LIB_BUILD
asm("T0CON1 equ 059Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKPS                 :4;
        unsigned T0ASYNC                :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
    struct {
        unsigned T0PS0                  :1;
        unsigned T0PS1                  :1;
        unsigned T0PS2                  :1;
        unsigned T0PS3                  :1;
    };
    struct {
        unsigned T0PS                   :4;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x59F);
// bitfield macros
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80
#define _T0CON1_T0PS0_POSN                                  0x0
#define _T0CON1_T0PS0_POSITION                              0x0
#define _T0CON1_T0PS0_SIZE                                  0x1
#define _T0CON1_T0PS0_LENGTH                                0x1
#define _T0CON1_T0PS0_MASK                                  0x1
#define _T0CON1_T0PS1_POSN                                  0x1
#define _T0CON1_T0PS1_POSITION                              0x1
#define _T0CON1_T0PS1_SIZE                                  0x1
#define _T0CON1_T0PS1_LENGTH                                0x1
#define _T0CON1_T0PS1_MASK                                  0x2
#define _T0CON1_T0PS2_POSN                                  0x2
#define _T0CON1_T0PS2_POSITION                              0x2
#define _T0CON1_T0PS2_SIZE                                  0x1
#define _T0CON1_T0PS2_LENGTH                                0x1
#define _T0CON1_T0PS2_MASK                                  0x4
#define _T0CON1_T0PS3_POSN                                  0x3
#define _T0CON1_T0PS3_POSITION                              0x3
#define _T0CON1_T0PS3_SIZE                                  0x1
#define _T0CON1_T0PS3_LENGTH                                0x1
#define _T0CON1_T0PS3_MASK                                  0x8
#define _T0CON1_T0PS_POSN                                   0x0
#define _T0CON1_T0PS_POSITION                               0x0
#define _T0CON1_T0PS_SIZE                                   0x4
#define _T0CON1_T0PS_LENGTH                                 0x4
#define _T0CON1_T0PS_MASK                                   0xF

// Register: CWG1CLKCON
#define CWG1CLKCON CWG1CLKCON
extern volatile unsigned char           CWG1CLKCON          __at(0x60C);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 060Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x60C);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1DAT
#define CWG1DAT CWG1DAT
extern volatile unsigned char           CWG1DAT             __at(0x60D);
#ifndef _LIB_BUILD
asm("CWG1DAT equ 060Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAT                    :4;
    };
    struct {
        unsigned CWG1DAT0               :1;
        unsigned CWG1DAT1               :1;
        unsigned CWG1DAT2               :1;
        unsigned CWG1DAT3               :1;
    };
} CWG1DATbits_t;
extern volatile CWG1DATbits_t CWG1DATbits __at(0x60D);
// bitfield macros
#define _CWG1DAT_DAT_POSN                                   0x0
#define _CWG1DAT_DAT_POSITION                               0x0
#define _CWG1DAT_DAT_SIZE                                   0x4
#define _CWG1DAT_DAT_LENGTH                                 0x4
#define _CWG1DAT_DAT_MASK                                   0xF
#define _CWG1DAT_CWG1DAT0_POSN                              0x0
#define _CWG1DAT_CWG1DAT0_POSITION                          0x0
#define _CWG1DAT_CWG1DAT0_SIZE                              0x1
#define _CWG1DAT_CWG1DAT0_LENGTH                            0x1
#define _CWG1DAT_CWG1DAT0_MASK                              0x1
#define _CWG1DAT_CWG1DAT1_POSN                              0x1
#define _CWG1DAT_CWG1DAT1_POSITION                          0x1
#define _CWG1DAT_CWG1DAT1_SIZE                              0x1
#define _CWG1DAT_CWG1DAT1_LENGTH                            0x1
#define _CWG1DAT_CWG1DAT1_MASK                              0x2
#define _CWG1DAT_CWG1DAT2_POSN                              0x2
#define _CWG1DAT_CWG1DAT2_POSITION                          0x2
#define _CWG1DAT_CWG1DAT2_SIZE                              0x1
#define _CWG1DAT_CWG1DAT2_LENGTH                            0x1
#define _CWG1DAT_CWG1DAT2_MASK                              0x4
#define _CWG1DAT_CWG1DAT3_POSN                              0x3
#define _CWG1DAT_CWG1DAT3_POSITION                          0x3
#define _CWG1DAT_CWG1DAT3_SIZE                              0x1
#define _CWG1DAT_CWG1DAT3_LENGTH                            0x1
#define _CWG1DAT_CWG1DAT3_MASK                              0x8

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x60E);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 060Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :6;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x60E);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x6
#define _CWG1DBR_DBR_LENGTH                                 0x6
#define _CWG1DBR_DBR_MASK                                   0x3F
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x6
#define _CWG1DBR_CWG1DBR_LENGTH                             0x6
#define _CWG1DBR_CWG1DBR_MASK                               0x3F
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x60F);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 060Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :6;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x60F);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x6
#define _CWG1DBF_DBF_LENGTH                                 0x6
#define _CWG1DBF_DBF_MASK                                   0x3F
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x6
#define _CWG1DBF_CWG1DBF_LENGTH                             0x6
#define _CWG1DBF_CWG1DBF_MASK                               0x3F
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x610);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 0610h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x610);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x611);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 0611h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x611);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x612);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 0612h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSBD               :2;
        unsigned CWG1REN                :1;
        unsigned CWG1SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x612);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30
#define _CWG1AS0_CWG1REN_POSN                               0x6
#define _CWG1AS0_CWG1REN_POSITION                           0x6
#define _CWG1AS0_CWG1REN_SIZE                               0x1
#define _CWG1AS0_CWG1REN_LENGTH                             0x1
#define _CWG1AS0_CWG1REN_MASK                               0x40
#define _CWG1AS0_CWG1SHUTDOWN_POSN                          0x7
#define _CWG1AS0_CWG1SHUTDOWN_POSITION                      0x7
#define _CWG1AS0_CWG1SHUTDOWN_SIZE                          0x1
#define _CWG1AS0_CWG1SHUTDOWN_LENGTH                        0x1
#define _CWG1AS0_CWG1SHUTDOWN_MASK                          0x80
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x613);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 0613h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x613);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS3E_POSN                                  0x3
#define _CWG1AS1_AS3E_POSITION                              0x3
#define _CWG1AS1_AS3E_SIZE                                  0x1
#define _CWG1AS1_AS3E_LENGTH                                0x1
#define _CWG1AS1_AS3E_MASK                                  0x8
#define _CWG1AS1_AS4E_POSN                                  0x4
#define _CWG1AS1_AS4E_POSITION                              0x4
#define _CWG1AS1_AS4E_SIZE                                  0x1
#define _CWG1AS1_AS4E_LENGTH                                0x1
#define _CWG1AS1_AS4E_MASK                                  0x10

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0x614);
#ifndef _LIB_BUILD
asm("CWG1STR equ 0614h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0x614);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x70C);
#ifndef _LIB_BUILD
asm("PIR0 equ 070Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTF                   :1;
        unsigned                        :3;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x70C);
// bitfield macros
#define _PIR0_INTF_POSN                                     0x0
#define _PIR0_INTF_POSITION                                 0x0
#define _PIR0_INTF_SIZE                                     0x1
#define _PIR0_INTF_LENGTH                                   0x1
#define _PIR0_INTF_MASK                                     0x1
#define _PIR0_IOCIF_POSN                                    0x4
#define _PIR0_IOCIF_POSITION                                0x4
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x10
#define _PIR0_TMR0IF_POSN                                   0x5
#define _PIR0_TMR0IF_POSITION                               0x5
#define _PIR0_TMR0IF_SIZE                                   0x1
#define _PIR0_TMR0IF_LENGTH                                 0x1
#define _PIR0_TMR0IF_MASK                                   0x20

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x70D);
#ifndef _LIB_BUILD
asm("PIR1 equ 070Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
        unsigned                        :4;
        unsigned CSWIF                  :1;
        unsigned OSFIF                  :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x70D);
// bitfield macros
#define _PIR1_ADIF_POSN                                     0x0
#define _PIR1_ADIF_POSITION                                 0x0
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x1
#define _PIR1_ADTIF_POSN                                    0x1
#define _PIR1_ADTIF_POSITION                                0x1
#define _PIR1_ADTIF_SIZE                                    0x1
#define _PIR1_ADTIF_LENGTH                                  0x1
#define _PIR1_ADTIF_MASK                                    0x2
#define _PIR1_CSWIF_POSN                                    0x6
#define _PIR1_CSWIF_POSITION                                0x6
#define _PIR1_CSWIF_SIZE                                    0x1
#define _PIR1_CSWIF_LENGTH                                  0x1
#define _PIR1_CSWIF_MASK                                    0x40
#define _PIR1_OSFIF_POSN                                    0x7
#define _PIR1_OSFIF_POSITION                                0x7
#define _PIR1_OSFIF_SIZE                                    0x1
#define _PIR1_OSFIF_LENGTH                                  0x1
#define _PIR1_OSFIF_MASK                                    0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x70E);
#ifndef _LIB_BUILD
asm("PIR2 equ 070Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IF                   :1;
        unsigned C2IF                   :1;
        unsigned                        :4;
        unsigned ZCDIF                  :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x70E);
// bitfield macros
#define _PIR2_C1IF_POSN                                     0x0
#define _PIR2_C1IF_POSITION                                 0x0
#define _PIR2_C1IF_SIZE                                     0x1
#define _PIR2_C1IF_LENGTH                                   0x1
#define _PIR2_C1IF_MASK                                     0x1
#define _PIR2_C2IF_POSN                                     0x1
#define _PIR2_C2IF_POSITION                                 0x1
#define _PIR2_C2IF_SIZE                                     0x1
#define _PIR2_C2IF_LENGTH                                   0x1
#define _PIR2_C2IF_MASK                                     0x2
#define _PIR2_ZCDIF_POSN                                    0x6
#define _PIR2_ZCDIF_POSITION                                0x6
#define _PIR2_ZCDIF_SIZE                                    0x1
#define _PIR2_ZCDIF_LENGTH                                  0x1
#define _PIR2_ZCDIF_MASK                                    0x40

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x70F);
#ifndef _LIB_BUILD
asm("PIR3 equ 070Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned SSP2IF                 :1;
        unsigned BCL2IF                 :1;
        unsigned TX1IF                  :1;
        unsigned RC1IF                  :1;
        unsigned TX2IF                  :1;
        unsigned RC2IF                  :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x70F);
// bitfield macros
#define _PIR3_SSP1IF_POSN                                   0x0
#define _PIR3_SSP1IF_POSITION                               0x0
#define _PIR3_SSP1IF_SIZE                                   0x1
#define _PIR3_SSP1IF_LENGTH                                 0x1
#define _PIR3_SSP1IF_MASK                                   0x1
#define _PIR3_BCL1IF_POSN                                   0x1
#define _PIR3_BCL1IF_POSITION                               0x1
#define _PIR3_BCL1IF_SIZE                                   0x1
#define _PIR3_BCL1IF_LENGTH                                 0x1
#define _PIR3_BCL1IF_MASK                                   0x2
#define _PIR3_SSP2IF_POSN                                   0x2
#define _PIR3_SSP2IF_POSITION                               0x2
#define _PIR3_SSP2IF_SIZE                                   0x1
#define _PIR3_SSP2IF_LENGTH                                 0x1
#define _PIR3_SSP2IF_MASK                                   0x4
#define _PIR3_BCL2IF_POSN                                   0x3
#define _PIR3_BCL2IF_POSITION                               0x3
#define _PIR3_BCL2IF_SIZE                                   0x1
#define _PIR3_BCL2IF_LENGTH                                 0x1
#define _PIR3_BCL2IF_MASK                                   0x8
#define _PIR3_TX1IF_POSN                                    0x4
#define _PIR3_TX1IF_POSITION                                0x4
#define _PIR3_TX1IF_SIZE                                    0x1
#define _PIR3_TX1IF_LENGTH                                  0x1
#define _PIR3_TX1IF_MASK                                    0x10
#define _PIR3_RC1IF_POSN                                    0x5
#define _PIR3_RC1IF_POSITION                                0x5
#define _PIR3_RC1IF_SIZE                                    0x1
#define _PIR3_RC1IF_LENGTH                                  0x1
#define _PIR3_RC1IF_MASK                                    0x20
#define _PIR3_TX2IF_POSN                                    0x6
#define _PIR3_TX2IF_POSITION                                0x6
#define _PIR3_TX2IF_SIZE                                    0x1
#define _PIR3_TX2IF_LENGTH                                  0x1
#define _PIR3_TX2IF_MASK                                    0x40
#define _PIR3_RC2IF_POSN                                    0x7
#define _PIR3_RC2IF_POSITION                                0x7
#define _PIR3_RC2IF_SIZE                                    0x1
#define _PIR3_RC2IF_LENGTH                                  0x1
#define _PIR3_RC2IF_MASK                                    0x80

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x710);
#ifndef _LIB_BUILD
asm("PIR4 equ 0710h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x710);
// bitfield macros
#define _PIR4_TMR1IF_POSN                                   0x0
#define _PIR4_TMR1IF_POSITION                               0x0
#define _PIR4_TMR1IF_SIZE                                   0x1
#define _PIR4_TMR1IF_LENGTH                                 0x1
#define _PIR4_TMR1IF_MASK                                   0x1
#define _PIR4_TMR2IF_POSN                                   0x1
#define _PIR4_TMR2IF_POSITION                               0x1
#define _PIR4_TMR2IF_SIZE                                   0x1
#define _PIR4_TMR2IF_LENGTH                                 0x1
#define _PIR4_TMR2IF_MASK                                   0x2

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x711);
#ifndef _LIB_BUILD
asm("PIR5 equ 0711h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIF                :1;
        unsigned                        :3;
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned CLC4IF                 :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x711);
// bitfield macros
#define _PIR5_TMR1GIF_POSN                                  0x0
#define _PIR5_TMR1GIF_POSITION                              0x0
#define _PIR5_TMR1GIF_SIZE                                  0x1
#define _PIR5_TMR1GIF_LENGTH                                0x1
#define _PIR5_TMR1GIF_MASK                                  0x1
#define _PIR5_CLC1IF_POSN                                   0x4
#define _PIR5_CLC1IF_POSITION                               0x4
#define _PIR5_CLC1IF_SIZE                                   0x1
#define _PIR5_CLC1IF_LENGTH                                 0x1
#define _PIR5_CLC1IF_MASK                                   0x10
#define _PIR5_CLC2IF_POSN                                   0x5
#define _PIR5_CLC2IF_POSITION                               0x5
#define _PIR5_CLC2IF_SIZE                                   0x1
#define _PIR5_CLC2IF_LENGTH                                 0x1
#define _PIR5_CLC2IF_MASK                                   0x20
#define _PIR5_CLC3IF_POSN                                   0x6
#define _PIR5_CLC3IF_POSITION                               0x6
#define _PIR5_CLC3IF_SIZE                                   0x1
#define _PIR5_CLC3IF_LENGTH                                 0x1
#define _PIR5_CLC3IF_MASK                                   0x40
#define _PIR5_CLC4IF_POSN                                   0x7
#define _PIR5_CLC4IF_POSITION                               0x7
#define _PIR5_CLC4IF_SIZE                                   0x1
#define _PIR5_CLC4IF_LENGTH                                 0x1
#define _PIR5_CLC4IF_MASK                                   0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x712);
#ifndef _LIB_BUILD
asm("PIR6 equ 0712h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x712);
// bitfield macros
#define _PIR6_CCP1IF_POSN                                   0x0
#define _PIR6_CCP1IF_POSITION                               0x0
#define _PIR6_CCP1IF_SIZE                                   0x1
#define _PIR6_CCP1IF_LENGTH                                 0x1
#define _PIR6_CCP1IF_MASK                                   0x1
#define _PIR6_CCP2IF_POSN                                   0x1
#define _PIR6_CCP2IF_POSITION                               0x1
#define _PIR6_CCP2IF_SIZE                                   0x1
#define _PIR6_CCP2IF_LENGTH                                 0x1
#define _PIR6_CCP2IF_MASK                                   0x2

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x713);
#ifndef _LIB_BUILD
asm("PIR7 equ 0713h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1IF                 :1;
        unsigned                        :3;
        unsigned NCO1IF                 :1;
        unsigned NVMIF                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned NCOIF                  :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x713);
// bitfield macros
#define _PIR7_CWG1IF_POSN                                   0x0
#define _PIR7_CWG1IF_POSITION                               0x0
#define _PIR7_CWG1IF_SIZE                                   0x1
#define _PIR7_CWG1IF_LENGTH                                 0x1
#define _PIR7_CWG1IF_MASK                                   0x1
#define _PIR7_NCO1IF_POSN                                   0x4
#define _PIR7_NCO1IF_POSITION                               0x4
#define _PIR7_NCO1IF_SIZE                                   0x1
#define _PIR7_NCO1IF_LENGTH                                 0x1
#define _PIR7_NCO1IF_MASK                                   0x10
#define _PIR7_NVMIF_POSN                                    0x5
#define _PIR7_NVMIF_POSITION                                0x5
#define _PIR7_NVMIF_SIZE                                    0x1
#define _PIR7_NVMIF_LENGTH                                  0x1
#define _PIR7_NVMIF_MASK                                    0x20
#define _PIR7_NCOIF_POSN                                    0x4
#define _PIR7_NCOIF_POSITION                                0x4
#define _PIR7_NCOIF_SIZE                                    0x1
#define _PIR7_NCOIF_LENGTH                                  0x1
#define _PIR7_NCOIF_MASK                                    0x10

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x716);
#ifndef _LIB_BUILD
asm("PIE0 equ 0716h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTE                   :1;
        unsigned                        :3;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x716);
// bitfield macros
#define _PIE0_INTE_POSN                                     0x0
#define _PIE0_INTE_POSITION                                 0x0
#define _PIE0_INTE_SIZE                                     0x1
#define _PIE0_INTE_LENGTH                                   0x1
#define _PIE0_INTE_MASK                                     0x1
#define _PIE0_IOCIE_POSN                                    0x4
#define _PIE0_IOCIE_POSITION                                0x4
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x10
#define _PIE0_TMR0IE_POSN                                   0x5
#define _PIE0_TMR0IE_POSITION                               0x5
#define _PIE0_TMR0IE_SIZE                                   0x1
#define _PIE0_TMR0IE_LENGTH                                 0x1
#define _PIE0_TMR0IE_MASK                                   0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x717);
#ifndef _LIB_BUILD
asm("PIE1 equ 0717h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
        unsigned                        :4;
        unsigned CSWIE                  :1;
        unsigned OSFIE                  :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x717);
// bitfield macros
#define _PIE1_ADIE_POSN                                     0x0
#define _PIE1_ADIE_POSITION                                 0x0
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x1
#define _PIE1_ADTIE_POSN                                    0x1
#define _PIE1_ADTIE_POSITION                                0x1
#define _PIE1_ADTIE_SIZE                                    0x1
#define _PIE1_ADTIE_LENGTH                                  0x1
#define _PIE1_ADTIE_MASK                                    0x2
#define _PIE1_CSWIE_POSN                                    0x6
#define _PIE1_CSWIE_POSITION                                0x6
#define _PIE1_CSWIE_SIZE                                    0x1
#define _PIE1_CSWIE_LENGTH                                  0x1
#define _PIE1_CSWIE_MASK                                    0x40
#define _PIE1_OSFIE_POSN                                    0x7
#define _PIE1_OSFIE_POSITION                                0x7
#define _PIE1_OSFIE_SIZE                                    0x1
#define _PIE1_OSFIE_LENGTH                                  0x1
#define _PIE1_OSFIE_MASK                                    0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x718);
#ifndef _LIB_BUILD
asm("PIE2 equ 0718h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IE                   :1;
        unsigned C2IE                   :1;
        unsigned                        :4;
        unsigned ZCDIE                  :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x718);
// bitfield macros
#define _PIE2_C1IE_POSN                                     0x0
#define _PIE2_C1IE_POSITION                                 0x0
#define _PIE2_C1IE_SIZE                                     0x1
#define _PIE2_C1IE_LENGTH                                   0x1
#define _PIE2_C1IE_MASK                                     0x1
#define _PIE2_C2IE_POSN                                     0x1
#define _PIE2_C2IE_POSITION                                 0x1
#define _PIE2_C2IE_SIZE                                     0x1
#define _PIE2_C2IE_LENGTH                                   0x1
#define _PIE2_C2IE_MASK                                     0x2
#define _PIE2_ZCDIE_POSN                                    0x6
#define _PIE2_ZCDIE_POSITION                                0x6
#define _PIE2_ZCDIE_SIZE                                    0x1
#define _PIE2_ZCDIE_LENGTH                                  0x1
#define _PIE2_ZCDIE_MASK                                    0x40

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x719);
#ifndef _LIB_BUILD
asm("PIE3 equ 0719h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned SSP2IE                 :1;
        unsigned BCL2IE                 :1;
        unsigned TX1IE                  :1;
        unsigned RC1IE                  :1;
        unsigned TX2IE                  :1;
        unsigned RC2IE                  :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x719);
// bitfield macros
#define _PIE3_SSP1IE_POSN                                   0x0
#define _PIE3_SSP1IE_POSITION                               0x0
#define _PIE3_SSP1IE_SIZE                                   0x1
#define _PIE3_SSP1IE_LENGTH                                 0x1
#define _PIE3_SSP1IE_MASK                                   0x1
#define _PIE3_BCL1IE_POSN                                   0x1
#define _PIE3_BCL1IE_POSITION                               0x1
#define _PIE3_BCL1IE_SIZE                                   0x1
#define _PIE3_BCL1IE_LENGTH                                 0x1
#define _PIE3_BCL1IE_MASK                                   0x2
#define _PIE3_SSP2IE_POSN                                   0x2
#define _PIE3_SSP2IE_POSITION                               0x2
#define _PIE3_SSP2IE_SIZE                                   0x1
#define _PIE3_SSP2IE_LENGTH                                 0x1
#define _PIE3_SSP2IE_MASK                                   0x4
#define _PIE3_BCL2IE_POSN                                   0x3
#define _PIE3_BCL2IE_POSITION                               0x3
#define _PIE3_BCL2IE_SIZE                                   0x1
#define _PIE3_BCL2IE_LENGTH                                 0x1
#define _PIE3_BCL2IE_MASK                                   0x8
#define _PIE3_TX1IE_POSN                                    0x4
#define _PIE3_TX1IE_POSITION                                0x4
#define _PIE3_TX1IE_SIZE                                    0x1
#define _PIE3_TX1IE_LENGTH                                  0x1
#define _PIE3_TX1IE_MASK                                    0x10
#define _PIE3_RC1IE_POSN                                    0x5
#define _PIE3_RC1IE_POSITION                                0x5
#define _PIE3_RC1IE_SIZE                                    0x1
#define _PIE3_RC1IE_LENGTH                                  0x1
#define _PIE3_RC1IE_MASK                                    0x20
#define _PIE3_TX2IE_POSN                                    0x6
#define _PIE3_TX2IE_POSITION                                0x6
#define _PIE3_TX2IE_SIZE                                    0x1
#define _PIE3_TX2IE_LENGTH                                  0x1
#define _PIE3_TX2IE_MASK                                    0x40
#define _PIE3_RC2IE_POSN                                    0x7
#define _PIE3_RC2IE_POSITION                                0x7
#define _PIE3_RC2IE_SIZE                                    0x1
#define _PIE3_RC2IE_LENGTH                                  0x1
#define _PIE3_RC2IE_MASK                                    0x80

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x71A);
#ifndef _LIB_BUILD
asm("PIE4 equ 071Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x71A);
// bitfield macros
#define _PIE4_TMR1IE_POSN                                   0x0
#define _PIE4_TMR1IE_POSITION                               0x0
#define _PIE4_TMR1IE_SIZE                                   0x1
#define _PIE4_TMR1IE_LENGTH                                 0x1
#define _PIE4_TMR1IE_MASK                                   0x1
#define _PIE4_TMR2IE_POSN                                   0x1
#define _PIE4_TMR2IE_POSITION                               0x1
#define _PIE4_TMR2IE_SIZE                                   0x1
#define _PIE4_TMR2IE_LENGTH                                 0x1
#define _PIE4_TMR2IE_MASK                                   0x2

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x71B);
#ifndef _LIB_BUILD
asm("PIE5 equ 071Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIE                :1;
        unsigned                        :3;
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned CLC4IE                 :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x71B);
// bitfield macros
#define _PIE5_TMR1GIE_POSN                                  0x0
#define _PIE5_TMR1GIE_POSITION                              0x0
#define _PIE5_TMR1GIE_SIZE                                  0x1
#define _PIE5_TMR1GIE_LENGTH                                0x1
#define _PIE5_TMR1GIE_MASK                                  0x1
#define _PIE5_CLC1IE_POSN                                   0x4
#define _PIE5_CLC1IE_POSITION                               0x4
#define _PIE5_CLC1IE_SIZE                                   0x1
#define _PIE5_CLC1IE_LENGTH                                 0x1
#define _PIE5_CLC1IE_MASK                                   0x10
#define _PIE5_CLC2IE_POSN                                   0x5
#define _PIE5_CLC2IE_POSITION                               0x5
#define _PIE5_CLC2IE_SIZE                                   0x1
#define _PIE5_CLC2IE_LENGTH                                 0x1
#define _PIE5_CLC2IE_MASK                                   0x20
#define _PIE5_CLC3IE_POSN                                   0x6
#define _PIE5_CLC3IE_POSITION                               0x6
#define _PIE5_CLC3IE_SIZE                                   0x1
#define _PIE5_CLC3IE_LENGTH                                 0x1
#define _PIE5_CLC3IE_MASK                                   0x40
#define _PIE5_CLC4IE_POSN                                   0x7
#define _PIE5_CLC4IE_POSITION                               0x7
#define _PIE5_CLC4IE_SIZE                                   0x1
#define _PIE5_CLC4IE_LENGTH                                 0x1
#define _PIE5_CLC4IE_MASK                                   0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x71C);
#ifndef _LIB_BUILD
asm("PIE6 equ 071Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x71C);
// bitfield macros
#define _PIE6_CCP1IE_POSN                                   0x0
#define _PIE6_CCP1IE_POSITION                               0x0
#define _PIE6_CCP1IE_SIZE                                   0x1
#define _PIE6_CCP1IE_LENGTH                                 0x1
#define _PIE6_CCP1IE_MASK                                   0x1
#define _PIE6_CCP2IE_POSN                                   0x1
#define _PIE6_CCP2IE_POSITION                               0x1
#define _PIE6_CCP2IE_SIZE                                   0x1
#define _PIE6_CCP2IE_LENGTH                                 0x1
#define _PIE6_CCP2IE_MASK                                   0x2

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x71D);
#ifndef _LIB_BUILD
asm("PIE7 equ 071Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1IE                 :1;
        unsigned                        :3;
        unsigned NCO1IE                 :1;
        unsigned NVMIE                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned NCOIE                  :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x71D);
// bitfield macros
#define _PIE7_CWG1IE_POSN                                   0x0
#define _PIE7_CWG1IE_POSITION                               0x0
#define _PIE7_CWG1IE_SIZE                                   0x1
#define _PIE7_CWG1IE_LENGTH                                 0x1
#define _PIE7_CWG1IE_MASK                                   0x1
#define _PIE7_NCO1IE_POSN                                   0x4
#define _PIE7_NCO1IE_POSITION                               0x4
#define _PIE7_NCO1IE_SIZE                                   0x1
#define _PIE7_NCO1IE_LENGTH                                 0x1
#define _PIE7_NCO1IE_MASK                                   0x10
#define _PIE7_NVMIE_POSN                                    0x5
#define _PIE7_NVMIE_POSITION                                0x5
#define _PIE7_NVMIE_SIZE                                    0x1
#define _PIE7_NVMIE_LENGTH                                  0x1
#define _PIE7_NVMIE_MASK                                    0x20
#define _PIE7_NCOIE_POSN                                    0x4
#define _PIE7_NCOIE_POSITION                                0x4
#define _PIE7_NCOIE_SIZE                                    0x1
#define _PIE7_NCOIE_LENGTH                                  0x1
#define _PIE7_NCOIE_MASK                                    0x10

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x796);
#ifndef _LIB_BUILD
asm("PMD0 equ 0796h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned CLKRMD                 :1;
        unsigned NVMMD                  :1;
        unsigned                        :3;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x796);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_CLKRMD_POSN                                   0x1
#define _PMD0_CLKRMD_POSITION                               0x1
#define _PMD0_CLKRMD_SIZE                                   0x1
#define _PMD0_CLKRMD_LENGTH                                 0x1
#define _PMD0_CLKRMD_MASK                                   0x2
#define _PMD0_NVMMD_POSN                                    0x2
#define _PMD0_NVMMD_POSITION                                0x2
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x4
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x797);
#ifndef _LIB_BUILD
asm("PMD1 equ 0797h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned                        :4;
        unsigned NCO1MD                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned NCOMD                  :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x797);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_NCO1MD_POSN                                   0x7
#define _PMD1_NCO1MD_POSITION                               0x7
#define _PMD1_NCO1MD_SIZE                                   0x1
#define _PMD1_NCO1MD_LENGTH                                 0x1
#define _PMD1_NCO1MD_MASK                                   0x80
#define _PMD1_NCOMD_POSN                                    0x7
#define _PMD1_NCOMD_POSITION                                0x7
#define _PMD1_NCOMD_SIZE                                    0x1
#define _PMD1_NCOMD_LENGTH                                  0x1
#define _PMD1_NCOMD_MASK                                    0x80

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x798);
#ifndef _LIB_BUILD
asm("PMD2 equ 0798h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDMD                  :1;
        unsigned CMP1MD                 :1;
        unsigned CMP2MD                 :1;
        unsigned                        :2;
        unsigned ADCMD                  :1;
        unsigned DAC1MD                 :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x798);
// bitfield macros
#define _PMD2_ZCDMD_POSN                                    0x0
#define _PMD2_ZCDMD_POSITION                                0x0
#define _PMD2_ZCDMD_SIZE                                    0x1
#define _PMD2_ZCDMD_LENGTH                                  0x1
#define _PMD2_ZCDMD_MASK                                    0x1
#define _PMD2_CMP1MD_POSN                                   0x1
#define _PMD2_CMP1MD_POSITION                               0x1
#define _PMD2_CMP1MD_SIZE                                   0x1
#define _PMD2_CMP1MD_LENGTH                                 0x1
#define _PMD2_CMP1MD_MASK                                   0x2
#define _PMD2_CMP2MD_POSN                                   0x2
#define _PMD2_CMP2MD_POSITION                               0x2
#define _PMD2_CMP2MD_SIZE                                   0x1
#define _PMD2_CMP2MD_LENGTH                                 0x1
#define _PMD2_CMP2MD_MASK                                   0x4
#define _PMD2_ADCMD_POSN                                    0x5
#define _PMD2_ADCMD_POSITION                                0x5
#define _PMD2_ADCMD_SIZE                                    0x1
#define _PMD2_ADCMD_LENGTH                                  0x1
#define _PMD2_ADCMD_MASK                                    0x20
#define _PMD2_DAC1MD_POSN                                   0x6
#define _PMD2_DAC1MD_POSITION                               0x6
#define _PMD2_DAC1MD_SIZE                                   0x1
#define _PMD2_DAC1MD_LENGTH                                 0x1
#define _PMD2_DAC1MD_MASK                                   0x40

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x799);
#ifndef _LIB_BUILD
asm("PMD3 equ 0799h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned PWM3MD                 :1;
        unsigned PWM4MD                 :1;
        unsigned PWM5MD                 :1;
        unsigned PWM6MD                 :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x799);
// bitfield macros
#define _PMD3_CCP1MD_POSN                                   0x0
#define _PMD3_CCP1MD_POSITION                               0x0
#define _PMD3_CCP1MD_SIZE                                   0x1
#define _PMD3_CCP1MD_LENGTH                                 0x1
#define _PMD3_CCP1MD_MASK                                   0x1
#define _PMD3_CCP2MD_POSN                                   0x1
#define _PMD3_CCP2MD_POSITION                               0x1
#define _PMD3_CCP2MD_SIZE                                   0x1
#define _PMD3_CCP2MD_LENGTH                                 0x1
#define _PMD3_CCP2MD_MASK                                   0x2
#define _PMD3_PWM3MD_POSN                                   0x2
#define _PMD3_PWM3MD_POSITION                               0x2
#define _PMD3_PWM3MD_SIZE                                   0x1
#define _PMD3_PWM3MD_LENGTH                                 0x1
#define _PMD3_PWM3MD_MASK                                   0x4
#define _PMD3_PWM4MD_POSN                                   0x3
#define _PMD3_PWM4MD_POSITION                               0x3
#define _PMD3_PWM4MD_SIZE                                   0x1
#define _PMD3_PWM4MD_LENGTH                                 0x1
#define _PMD3_PWM4MD_MASK                                   0x8
#define _PMD3_PWM5MD_POSN                                   0x4
#define _PMD3_PWM5MD_POSITION                               0x4
#define _PMD3_PWM5MD_SIZE                                   0x1
#define _PMD3_PWM5MD_LENGTH                                 0x1
#define _PMD3_PWM5MD_MASK                                   0x10
#define _PMD3_PWM6MD_POSN                                   0x5
#define _PMD3_PWM6MD_POSITION                               0x5
#define _PMD3_PWM6MD_SIZE                                   0x1
#define _PMD3_PWM6MD_LENGTH                                 0x1
#define _PMD3_PWM6MD_MASK                                   0x20

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x79A);
#ifndef _LIB_BUILD
asm("PMD4 equ 079Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1MD                 :1;
        unsigned                        :3;
        unsigned MSSP1MD                :1;
        unsigned MSSP2MD                :1;
        unsigned UART1MD                :1;
        unsigned UART2MD                :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x79A);
// bitfield macros
#define _PMD4_CWG1MD_POSN                                   0x0
#define _PMD4_CWG1MD_POSITION                               0x0
#define _PMD4_CWG1MD_SIZE                                   0x1
#define _PMD4_CWG1MD_LENGTH                                 0x1
#define _PMD4_CWG1MD_MASK                                   0x1
#define _PMD4_MSSP1MD_POSN                                  0x4
#define _PMD4_MSSP1MD_POSITION                              0x4
#define _PMD4_MSSP1MD_SIZE                                  0x1
#define _PMD4_MSSP1MD_LENGTH                                0x1
#define _PMD4_MSSP1MD_MASK                                  0x10
#define _PMD4_MSSP2MD_POSN                                  0x5
#define _PMD4_MSSP2MD_POSITION                              0x5
#define _PMD4_MSSP2MD_SIZE                                  0x1
#define _PMD4_MSSP2MD_LENGTH                                0x1
#define _PMD4_MSSP2MD_MASK                                  0x20
#define _PMD4_UART1MD_POSN                                  0x6
#define _PMD4_UART1MD_POSITION                              0x6
#define _PMD4_UART1MD_SIZE                                  0x1
#define _PMD4_UART1MD_LENGTH                                0x1
#define _PMD4_UART1MD_MASK                                  0x40
#define _PMD4_UART2MD_POSN                                  0x7
#define _PMD4_UART2MD_POSITION                              0x7
#define _PMD4_UART2MD_SIZE                                  0x1
#define _PMD4_UART2MD_LENGTH                                0x1
#define _PMD4_UART2MD_MASK                                  0x80

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0x79B);
#ifndef _LIB_BUILD
asm("PMD5 equ 079Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
        unsigned CLC4MD                 :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0x79B);
// bitfield macros
#define _PMD5_CLC1MD_POSN                                   0x1
#define _PMD5_CLC1MD_POSITION                               0x1
#define _PMD5_CLC1MD_SIZE                                   0x1
#define _PMD5_CLC1MD_LENGTH                                 0x1
#define _PMD5_CLC1MD_MASK                                   0x2
#define _PMD5_CLC2MD_POSN                                   0x2
#define _PMD5_CLC2MD_POSITION                               0x2
#define _PMD5_CLC2MD_SIZE                                   0x1
#define _PMD5_CLC2MD_LENGTH                                 0x1
#define _PMD5_CLC2MD_MASK                                   0x4
#define _PMD5_CLC3MD_POSN                                   0x3
#define _PMD5_CLC3MD_POSITION                               0x3
#define _PMD5_CLC3MD_SIZE                                   0x1
#define _PMD5_CLC3MD_LENGTH                                 0x1
#define _PMD5_CLC3MD_MASK                                   0x8
#define _PMD5_CLC4MD_POSN                                   0x4
#define _PMD5_CLC4MD_POSITION                               0x4
#define _PMD5_CLC4MD_SIZE                                   0x1
#define _PMD5_CLC4MD_LENGTH                                 0x1
#define _PMD5_CLC4MD_MASK                                   0x10

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x80C);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 080Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned SWDTEN                 :1;
    };
    struct {
        unsigned WDTSEN                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x80C);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x80D);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 080Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
    };
    struct {
        unsigned WDTWINDOW              :3;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x80D);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x80E);
#ifndef _LIB_BUILD
asm("WDTPSL equ 080Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT0              :1;
        unsigned WDTPSCNT1              :1;
        unsigned WDTPSCNT2              :1;
        unsigned WDTPSCNT3              :1;
        unsigned WDTPSCNT4              :1;
        unsigned WDTPSCNT5              :1;
        unsigned WDTPSCNT6              :1;
        unsigned WDTPSCNT7              :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x80E);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80
#define _WDTPSL_WDTPSCNT_POSN                               0x0
#define _WDTPSL_WDTPSCNT_POSITION                           0x0
#define _WDTPSL_WDTPSCNT_SIZE                               0x8
#define _WDTPSL_WDTPSCNT_LENGTH                             0x8
#define _WDTPSL_WDTPSCNT_MASK                               0xFF
#define _WDTPSL_WDTPSCNT0_POSN                              0x0
#define _WDTPSL_WDTPSCNT0_POSITION                          0x0
#define _WDTPSL_WDTPSCNT0_SIZE                              0x1
#define _WDTPSL_WDTPSCNT0_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT0_MASK                              0x1
#define _WDTPSL_WDTPSCNT1_POSN                              0x1
#define _WDTPSL_WDTPSCNT1_POSITION                          0x1
#define _WDTPSL_WDTPSCNT1_SIZE                              0x1
#define _WDTPSL_WDTPSCNT1_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT1_MASK                              0x2
#define _WDTPSL_WDTPSCNT2_POSN                              0x2
#define _WDTPSL_WDTPSCNT2_POSITION                          0x2
#define _WDTPSL_WDTPSCNT2_SIZE                              0x1
#define _WDTPSL_WDTPSCNT2_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT2_MASK                              0x4
#define _WDTPSL_WDTPSCNT3_POSN                              0x3
#define _WDTPSL_WDTPSCNT3_POSITION                          0x3
#define _WDTPSL_WDTPSCNT3_SIZE                              0x1
#define _WDTPSL_WDTPSCNT3_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT3_MASK                              0x8
#define _WDTPSL_WDTPSCNT4_POSN                              0x4
#define _WDTPSL_WDTPSCNT4_POSITION                          0x4
#define _WDTPSL_WDTPSCNT4_SIZE                              0x1
#define _WDTPSL_WDTPSCNT4_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT4_MASK                              0x10
#define _WDTPSL_WDTPSCNT5_POSN                              0x5
#define _WDTPSL_WDTPSCNT5_POSITION                          0x5
#define _WDTPSL_WDTPSCNT5_SIZE                              0x1
#define _WDTPSL_WDTPSCNT5_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT5_MASK                              0x20
#define _WDTPSL_WDTPSCNT6_POSN                              0x6
#define _WDTPSL_WDTPSCNT6_POSITION                          0x6
#define _WDTPSL_WDTPSCNT6_SIZE                              0x1
#define _WDTPSL_WDTPSCNT6_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT6_MASK                              0x40
#define _WDTPSL_WDTPSCNT7_POSN                              0x7
#define _WDTPSL_WDTPSCNT7_POSITION                          0x7
#define _WDTPSL_WDTPSCNT7_SIZE                              0x1
#define _WDTPSL_WDTPSCNT7_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT7_MASK                              0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x80F);
#ifndef _LIB_BUILD
asm("WDTPSH equ 080Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT8              :1;
        unsigned WDTPSCNT9              :1;
        unsigned WDTPSCNT10             :1;
        unsigned WDTPSCNT11             :1;
        unsigned WDTPSCNT12             :1;
        unsigned WDTPSCNT13             :1;
        unsigned WDTPSCNT14             :1;
        unsigned WDTPSCNT15             :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x80F);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80
#define _WDTPSH_WDTPSCNT_POSN                               0x0
#define _WDTPSH_WDTPSCNT_POSITION                           0x0
#define _WDTPSH_WDTPSCNT_SIZE                               0x8
#define _WDTPSH_WDTPSCNT_LENGTH                             0x8
#define _WDTPSH_WDTPSCNT_MASK                               0xFF
#define _WDTPSH_WDTPSCNT8_POSN                              0x0
#define _WDTPSH_WDTPSCNT8_POSITION                          0x0
#define _WDTPSH_WDTPSCNT8_SIZE                              0x1
#define _WDTPSH_WDTPSCNT8_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT8_MASK                              0x1
#define _WDTPSH_WDTPSCNT9_POSN                              0x1
#define _WDTPSH_WDTPSCNT9_POSITION                          0x1
#define _WDTPSH_WDTPSCNT9_SIZE                              0x1
#define _WDTPSH_WDTPSCNT9_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT9_MASK                              0x2
#define _WDTPSH_WDTPSCNT10_POSN                             0x2
#define _WDTPSH_WDTPSCNT10_POSITION                         0x2
#define _WDTPSH_WDTPSCNT10_SIZE                             0x1
#define _WDTPSH_WDTPSCNT10_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT10_MASK                             0x4
#define _WDTPSH_WDTPSCNT11_POSN                             0x3
#define _WDTPSH_WDTPSCNT11_POSITION                         0x3
#define _WDTPSH_WDTPSCNT11_SIZE                             0x1
#define _WDTPSH_WDTPSCNT11_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT11_MASK                             0x8
#define _WDTPSH_WDTPSCNT12_POSN                             0x4
#define _WDTPSH_WDTPSCNT12_POSITION                         0x4
#define _WDTPSH_WDTPSCNT12_SIZE                             0x1
#define _WDTPSH_WDTPSCNT12_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT12_MASK                             0x10
#define _WDTPSH_WDTPSCNT13_POSN                             0x5
#define _WDTPSH_WDTPSCNT13_POSITION                         0x5
#define _WDTPSH_WDTPSCNT13_SIZE                             0x1
#define _WDTPSH_WDTPSCNT13_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT13_MASK                             0x20
#define _WDTPSH_WDTPSCNT14_POSN                             0x6
#define _WDTPSH_WDTPSCNT14_POSITION                         0x6
#define _WDTPSH_WDTPSCNT14_SIZE                             0x1
#define _WDTPSH_WDTPSCNT14_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT14_MASK                             0x40
#define _WDTPSH_WDTPSCNT15_POSN                             0x7
#define _WDTPSH_WDTPSCNT15_POSITION                         0x7
#define _WDTPSH_WDTPSCNT15_SIZE                             0x1
#define _WDTPSH_WDTPSCNT15_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT15_MASK                             0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x810);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0810h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x810);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x811);
#ifndef _LIB_BUILD
asm("BORCON equ 0811h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x811);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x813);
#ifndef _LIB_BUILD
asm("PCON0 equ 0813h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x813);
// bitfield macros
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80

// Register: PCON1
#define PCON1 PCON1
extern volatile unsigned char           PCON1               __at(0x814);
#ifndef _LIB_BUILD
asm("PCON1 equ 0814h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned nMEMV                  :1;
    };
} PCON1bits_t;
extern volatile PCON1bits_t PCON1bits __at(0x814);
// bitfield macros
#define _PCON1_nMEMV_POSN                                   0x1
#define _PCON1_nMEMV_POSITION                               0x1
#define _PCON1_nMEMV_SIZE                                   0x1
#define _PCON1_nMEMV_LENGTH                                 0x1
#define _PCON1_nMEMV_MASK                                   0x2

// Register: NVMADR
#define NVMADR NVMADR
extern volatile unsigned short          NVMADR              __at(0x81A);
#ifndef _LIB_BUILD
asm("NVMADR equ 081Ah");
#endif

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x81A);
#ifndef _LIB_BUILD
asm("NVMADRL equ 081Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRL0               :1;
        unsigned NVMADRL1               :1;
        unsigned NVMADRL2               :1;
        unsigned NVMADRL3               :1;
        unsigned NVMADRL4               :1;
        unsigned NVMADRL5               :1;
        unsigned NVMADRL6               :1;
        unsigned NVMADRL7               :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x81A);
// bitfield macros
#define _NVMADRL_NVMADRL0_POSN                              0x0
#define _NVMADRL_NVMADRL0_POSITION                          0x0
#define _NVMADRL_NVMADRL0_SIZE                              0x1
#define _NVMADRL_NVMADRL0_LENGTH                            0x1
#define _NVMADRL_NVMADRL0_MASK                              0x1
#define _NVMADRL_NVMADRL1_POSN                              0x1
#define _NVMADRL_NVMADRL1_POSITION                          0x1
#define _NVMADRL_NVMADRL1_SIZE                              0x1
#define _NVMADRL_NVMADRL1_LENGTH                            0x1
#define _NVMADRL_NVMADRL1_MASK                              0x2
#define _NVMADRL_NVMADRL2_POSN                              0x2
#define _NVMADRL_NVMADRL2_POSITION                          0x2
#define _NVMADRL_NVMADRL2_SIZE                              0x1
#define _NVMADRL_NVMADRL2_LENGTH                            0x1
#define _NVMADRL_NVMADRL2_MASK                              0x4
#define _NVMADRL_NVMADRL3_POSN                              0x3
#define _NVMADRL_NVMADRL3_POSITION                          0x3
#define _NVMADRL_NVMADRL3_SIZE                              0x1
#define _NVMADRL_NVMADRL3_LENGTH                            0x1
#define _NVMADRL_NVMADRL3_MASK                              0x8
#define _NVMADRL_NVMADRL4_POSN                              0x4
#define _NVMADRL_NVMADRL4_POSITION                          0x4
#define _NVMADRL_NVMADRL4_SIZE                              0x1
#define _NVMADRL_NVMADRL4_LENGTH                            0x1
#define _NVMADRL_NVMADRL4_MASK                              0x10
#define _NVMADRL_NVMADRL5_POSN                              0x5
#define _NVMADRL_NVMADRL5_POSITION                          0x5
#define _NVMADRL_NVMADRL5_SIZE                              0x1
#define _NVMADRL_NVMADRL5_LENGTH                            0x1
#define _NVMADRL_NVMADRL5_MASK                              0x20
#define _NVMADRL_NVMADRL6_POSN                              0x6
#define _NVMADRL_NVMADRL6_POSITION                          0x6
#define _NVMADRL_NVMADRL6_SIZE                              0x1
#define _NVMADRL_NVMADRL6_LENGTH                            0x1
#define _NVMADRL_NVMADRL6_MASK                              0x40
#define _NVMADRL_NVMADRL7_POSN                              0x7
#define _NVMADRL_NVMADRL7_POSITION                          0x7
#define _NVMADRL_NVMADRL7_SIZE                              0x1
#define _NVMADRL_NVMADRL7_LENGTH                            0x1
#define _NVMADRL_NVMADRL7_MASK                              0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x81B);
#ifndef _LIB_BUILD
asm("NVMADRH equ 081Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRH0               :1;
        unsigned NVMADRH1               :1;
        unsigned NVMADRH2               :1;
        unsigned NVMADRH3               :1;
        unsigned NVMADRH4               :1;
        unsigned NVMADRH5               :1;
        unsigned NVMADRH6               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x81B);
// bitfield macros
#define _NVMADRH_NVMADRH0_POSN                              0x0
#define _NVMADRH_NVMADRH0_POSITION                          0x0
#define _NVMADRH_NVMADRH0_SIZE                              0x1
#define _NVMADRH_NVMADRH0_LENGTH                            0x1
#define _NVMADRH_NVMADRH0_MASK                              0x1
#define _NVMADRH_NVMADRH1_POSN                              0x1
#define _NVMADRH_NVMADRH1_POSITION                          0x1
#define _NVMADRH_NVMADRH1_SIZE                              0x1
#define _NVMADRH_NVMADRH1_LENGTH                            0x1
#define _NVMADRH_NVMADRH1_MASK                              0x2
#define _NVMADRH_NVMADRH2_POSN                              0x2
#define _NVMADRH_NVMADRH2_POSITION                          0x2
#define _NVMADRH_NVMADRH2_SIZE                              0x1
#define _NVMADRH_NVMADRH2_LENGTH                            0x1
#define _NVMADRH_NVMADRH2_MASK                              0x4
#define _NVMADRH_NVMADRH3_POSN                              0x3
#define _NVMADRH_NVMADRH3_POSITION                          0x3
#define _NVMADRH_NVMADRH3_SIZE                              0x1
#define _NVMADRH_NVMADRH3_LENGTH                            0x1
#define _NVMADRH_NVMADRH3_MASK                              0x8
#define _NVMADRH_NVMADRH4_POSN                              0x4
#define _NVMADRH_NVMADRH4_POSITION                          0x4
#define _NVMADRH_NVMADRH4_SIZE                              0x1
#define _NVMADRH_NVMADRH4_LENGTH                            0x1
#define _NVMADRH_NVMADRH4_MASK                              0x10
#define _NVMADRH_NVMADRH5_POSN                              0x5
#define _NVMADRH_NVMADRH5_POSITION                          0x5
#define _NVMADRH_NVMADRH5_SIZE                              0x1
#define _NVMADRH_NVMADRH5_LENGTH                            0x1
#define _NVMADRH_NVMADRH5_MASK                              0x20
#define _NVMADRH_NVMADRH6_POSN                              0x6
#define _NVMADRH_NVMADRH6_POSITION                          0x6
#define _NVMADRH_NVMADRH6_SIZE                              0x1
#define _NVMADRH_NVMADRH6_LENGTH                            0x1
#define _NVMADRH_NVMADRH6_MASK                              0x40

// Register: NVMDAT
#define NVMDAT NVMDAT
extern volatile unsigned short          NVMDAT              __at(0x81C);
#ifndef _LIB_BUILD
asm("NVMDAT equ 081Ch");
#endif

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x81C);
#ifndef _LIB_BUILD
asm("NVMDATL equ 081Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDATL0               :1;
        unsigned NVMDATL1               :1;
        unsigned NVMDATL2               :1;
        unsigned NVMDATL3               :1;
        unsigned NVMDATL4               :1;
        unsigned NVMDATL5               :1;
        unsigned NVMDATL6               :1;
        unsigned NVMDATL7               :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x81C);
// bitfield macros
#define _NVMDATL_NVMDATL0_POSN                              0x0
#define _NVMDATL_NVMDATL0_POSITION                          0x0
#define _NVMDATL_NVMDATL0_SIZE                              0x1
#define _NVMDATL_NVMDATL0_LENGTH                            0x1
#define _NVMDATL_NVMDATL0_MASK                              0x1
#define _NVMDATL_NVMDATL1_POSN                              0x1
#define _NVMDATL_NVMDATL1_POSITION                          0x1
#define _NVMDATL_NVMDATL1_SIZE                              0x1
#define _NVMDATL_NVMDATL1_LENGTH                            0x1
#define _NVMDATL_NVMDATL1_MASK                              0x2
#define _NVMDATL_NVMDATL2_POSN                              0x2
#define _NVMDATL_NVMDATL2_POSITION                          0x2
#define _NVMDATL_NVMDATL2_SIZE                              0x1
#define _NVMDATL_NVMDATL2_LENGTH                            0x1
#define _NVMDATL_NVMDATL2_MASK                              0x4
#define _NVMDATL_NVMDATL3_POSN                              0x3
#define _NVMDATL_NVMDATL3_POSITION                          0x3
#define _NVMDATL_NVMDATL3_SIZE                              0x1
#define _NVMDATL_NVMDATL3_LENGTH                            0x1
#define _NVMDATL_NVMDATL3_MASK                              0x8
#define _NVMDATL_NVMDATL4_POSN                              0x4
#define _NVMDATL_NVMDATL4_POSITION                          0x4
#define _NVMDATL_NVMDATL4_SIZE                              0x1
#define _NVMDATL_NVMDATL4_LENGTH                            0x1
#define _NVMDATL_NVMDATL4_MASK                              0x10
#define _NVMDATL_NVMDATL5_POSN                              0x5
#define _NVMDATL_NVMDATL5_POSITION                          0x5
#define _NVMDATL_NVMDATL5_SIZE                              0x1
#define _NVMDATL_NVMDATL5_LENGTH                            0x1
#define _NVMDATL_NVMDATL5_MASK                              0x20
#define _NVMDATL_NVMDATL6_POSN                              0x6
#define _NVMDATL_NVMDATL6_POSITION                          0x6
#define _NVMDATL_NVMDATL6_SIZE                              0x1
#define _NVMDATL_NVMDATL6_LENGTH                            0x1
#define _NVMDATL_NVMDATL6_MASK                              0x40
#define _NVMDATL_NVMDATL7_POSN                              0x7
#define _NVMDATL_NVMDATL7_POSITION                          0x7
#define _NVMDATL_NVMDATL7_SIZE                              0x1
#define _NVMDATL_NVMDATL7_LENGTH                            0x1
#define _NVMDATL_NVMDATL7_MASK                              0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x81D);
#ifndef _LIB_BUILD
asm("NVMDATH equ 081Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDATH0               :1;
        unsigned NVMDATH1               :1;
        unsigned NVMDATH2               :1;
        unsigned NVMDATH3               :1;
        unsigned NVMDATH4               :1;
        unsigned NVMDATH5               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x81D);
// bitfield macros
#define _NVMDATH_NVMDATH0_POSN                              0x0
#define _NVMDATH_NVMDATH0_POSITION                          0x0
#define _NVMDATH_NVMDATH0_SIZE                              0x1
#define _NVMDATH_NVMDATH0_LENGTH                            0x1
#define _NVMDATH_NVMDATH0_MASK                              0x1
#define _NVMDATH_NVMDATH1_POSN                              0x1
#define _NVMDATH_NVMDATH1_POSITION                          0x1
#define _NVMDATH_NVMDATH1_SIZE                              0x1
#define _NVMDATH_NVMDATH1_LENGTH                            0x1
#define _NVMDATH_NVMDATH1_MASK                              0x2
#define _NVMDATH_NVMDATH2_POSN                              0x2
#define _NVMDATH_NVMDATH2_POSITION                          0x2
#define _NVMDATH_NVMDATH2_SIZE                              0x1
#define _NVMDATH_NVMDATH2_LENGTH                            0x1
#define _NVMDATH_NVMDATH2_MASK                              0x4
#define _NVMDATH_NVMDATH3_POSN                              0x3
#define _NVMDATH_NVMDATH3_POSITION                          0x3
#define _NVMDATH_NVMDATH3_SIZE                              0x1
#define _NVMDATH_NVMDATH3_LENGTH                            0x1
#define _NVMDATH_NVMDATH3_MASK                              0x8
#define _NVMDATH_NVMDATH4_POSN                              0x4
#define _NVMDATH_NVMDATH4_POSITION                          0x4
#define _NVMDATH_NVMDATH4_SIZE                              0x1
#define _NVMDATH_NVMDATH4_LENGTH                            0x1
#define _NVMDATH_NVMDATH4_MASK                              0x10
#define _NVMDATH_NVMDATH5_POSN                              0x5
#define _NVMDATH_NVMDATH5_POSITION                          0x5
#define _NVMDATH_NVMDATH5_SIZE                              0x1
#define _NVMDATH_NVMDATH5_LENGTH                            0x1
#define _NVMDATH_NVMDATH5_MASK                              0x20

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x81E);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 081Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned NVMREGS                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x81E);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_LWLO_POSN                                  0x5
#define _NVMCON1_LWLO_POSITION                              0x5
#define _NVMCON1_LWLO_SIZE                                  0x1
#define _NVMCON1_LWLO_LENGTH                                0x1
#define _NVMCON1_LWLO_MASK                                  0x20
#define _NVMCON1_NVMREGS_POSN                               0x6
#define _NVMCON1_NVMREGS_POSITION                           0x6
#define _NVMCON1_NVMREGS_SIZE                               0x1
#define _NVMCON1_NVMREGS_LENGTH                             0x1
#define _NVMCON1_NVMREGS_MASK                               0x40

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0x81F);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 081Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMCON2                :8;
    };
} NVMCON2bits_t;
extern volatile NVMCON2bits_t NVMCON2bits __at(0x81F);
// bitfield macros
#define _NVMCON2_NVMCON2_POSN                               0x0
#define _NVMCON2_NVMCON2_POSITION                           0x0
#define _NVMCON2_NVMCON2_SIZE                               0x8
#define _NVMCON2_NVMCON2_LENGTH                             0x8
#define _NVMCON2_NVMCON2_MASK                               0xFF

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x88C);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 088Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE                   :3;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x88C);
// bitfield macros
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x88D);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 088Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x88D);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x88E);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 088Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x88E);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x88F);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 088Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x88F);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x890);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 0890h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x890);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x891);
#ifndef _LIB_BUILD
asm("OSCEN equ 0891h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x891);
// bitfield macros
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x892);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0892h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFTUN                  :6;
    };
    struct {
        unsigned HFTUN0                 :1;
        unsigned HFTUN1                 :1;
        unsigned HFTUN2                 :1;
        unsigned HFTUN3                 :1;
        unsigned HFTUN4                 :1;
        unsigned HFTUN5                 :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x892);
// bitfield macros
#define _OSCTUNE_HFTUN_POSN                                 0x0
#define _OSCTUNE_HFTUN_POSITION                             0x0
#define _OSCTUNE_HFTUN_SIZE                                 0x6
#define _OSCTUNE_HFTUN_LENGTH                               0x6
#define _OSCTUNE_HFTUN_MASK                                 0x3F
#define _OSCTUNE_HFTUN0_POSN                                0x0
#define _OSCTUNE_HFTUN0_POSITION                            0x0
#define _OSCTUNE_HFTUN0_SIZE                                0x1
#define _OSCTUNE_HFTUN0_LENGTH                              0x1
#define _OSCTUNE_HFTUN0_MASK                                0x1
#define _OSCTUNE_HFTUN1_POSN                                0x1
#define _OSCTUNE_HFTUN1_POSITION                            0x1
#define _OSCTUNE_HFTUN1_SIZE                                0x1
#define _OSCTUNE_HFTUN1_LENGTH                              0x1
#define _OSCTUNE_HFTUN1_MASK                                0x2
#define _OSCTUNE_HFTUN2_POSN                                0x2
#define _OSCTUNE_HFTUN2_POSITION                            0x2
#define _OSCTUNE_HFTUN2_SIZE                                0x1
#define _OSCTUNE_HFTUN2_LENGTH                              0x1
#define _OSCTUNE_HFTUN2_MASK                                0x4
#define _OSCTUNE_HFTUN3_POSN                                0x3
#define _OSCTUNE_HFTUN3_POSITION                            0x3
#define _OSCTUNE_HFTUN3_SIZE                                0x1
#define _OSCTUNE_HFTUN3_LENGTH                              0x1
#define _OSCTUNE_HFTUN3_MASK                                0x8
#define _OSCTUNE_HFTUN4_POSN                                0x4
#define _OSCTUNE_HFTUN4_POSITION                            0x4
#define _OSCTUNE_HFTUN4_SIZE                                0x1
#define _OSCTUNE_HFTUN4_LENGTH                              0x1
#define _OSCTUNE_HFTUN4_MASK                                0x10
#define _OSCTUNE_HFTUN5_POSN                                0x5
#define _OSCTUNE_HFTUN5_POSITION                            0x5
#define _OSCTUNE_HFTUN5_SIZE                                0x1
#define _OSCTUNE_HFTUN5_LENGTH                              0x1
#define _OSCTUNE_HFTUN5_MASK                                0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x893);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 0893h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :3;
    };
    struct {
        unsigned HFFRQ0                 :1;
        unsigned HFFRQ1                 :1;
        unsigned HFFRQ2                 :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x893);
// bitfield macros
#define _OSCFRQ_HFFRQ_POSN                                  0x0
#define _OSCFRQ_HFFRQ_POSITION                              0x0
#define _OSCFRQ_HFFRQ_SIZE                                  0x3
#define _OSCFRQ_HFFRQ_LENGTH                                0x3
#define _OSCFRQ_HFFRQ_MASK                                  0x7
#define _OSCFRQ_HFFRQ0_POSN                                 0x0
#define _OSCFRQ_HFFRQ0_POSITION                             0x0
#define _OSCFRQ_HFFRQ0_SIZE                                 0x1
#define _OSCFRQ_HFFRQ0_LENGTH                               0x1
#define _OSCFRQ_HFFRQ0_MASK                                 0x1
#define _OSCFRQ_HFFRQ1_POSN                                 0x1
#define _OSCFRQ_HFFRQ1_POSITION                             0x1
#define _OSCFRQ_HFFRQ1_SIZE                                 0x1
#define _OSCFRQ_HFFRQ1_LENGTH                               0x1
#define _OSCFRQ_HFFRQ1_MASK                                 0x2
#define _OSCFRQ_HFFRQ2_POSN                                 0x2
#define _OSCFRQ_HFFRQ2_POSITION                             0x2
#define _OSCFRQ_HFFRQ2_SIZE                                 0x1
#define _OSCFRQ_HFFRQ2_LENGTH                               0x1
#define _OSCFRQ_HFFRQ2_MASK                                 0x4

// Register: CLKRCON
#define CLKRCON CLKRCON
extern volatile unsigned char           CLKRCON             __at(0x895);
#ifndef _LIB_BUILD
asm("CLKRCON equ 0895h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKRDIV                :3;
        unsigned CLKRDC                 :2;
        unsigned                        :2;
        unsigned CLKREN                 :1;
    };
    struct {
        unsigned CLKRDIV0               :1;
        unsigned CLKRDIV1               :1;
        unsigned CLKRDIV2               :1;
        unsigned CLKRDC0                :1;
        unsigned CLKRDC1                :1;
    };
} CLKRCONbits_t;
extern volatile CLKRCONbits_t CLKRCONbits __at(0x895);
// bitfield macros
#define _CLKRCON_CLKRDIV_POSN                               0x0
#define _CLKRCON_CLKRDIV_POSITION                           0x0
#define _CLKRCON_CLKRDIV_SIZE                               0x3
#define _CLKRCON_CLKRDIV_LENGTH                             0x3
#define _CLKRCON_CLKRDIV_MASK                               0x7
#define _CLKRCON_CLKRDC_POSN                                0x3
#define _CLKRCON_CLKRDC_POSITION                            0x3
#define _CLKRCON_CLKRDC_SIZE                                0x2
#define _CLKRCON_CLKRDC_LENGTH                              0x2
#define _CLKRCON_CLKRDC_MASK                                0x18
#define _CLKRCON_CLKREN_POSN                                0x7
#define _CLKRCON_CLKREN_POSITION                            0x7
#define _CLKRCON_CLKREN_SIZE                                0x1
#define _CLKRCON_CLKREN_LENGTH                              0x1
#define _CLKRCON_CLKREN_MASK                                0x80
#define _CLKRCON_CLKRDIV0_POSN                              0x0
#define _CLKRCON_CLKRDIV0_POSITION                          0x0
#define _CLKRCON_CLKRDIV0_SIZE                              0x1
#define _CLKRCON_CLKRDIV0_LENGTH                            0x1
#define _CLKRCON_CLKRDIV0_MASK                              0x1
#define _CLKRCON_CLKRDIV1_POSN                              0x1
#define _CLKRCON_CLKRDIV1_POSITION                          0x1
#define _CLKRCON_CLKRDIV1_SIZE                              0x1
#define _CLKRCON_CLKRDIV1_LENGTH                            0x1
#define _CLKRCON_CLKRDIV1_MASK                              0x2
#define _CLKRCON_CLKRDIV2_POSN                              0x2
#define _CLKRCON_CLKRDIV2_POSITION                          0x2
#define _CLKRCON_CLKRDIV2_SIZE                              0x1
#define _CLKRCON_CLKRDIV2_LENGTH                            0x1
#define _CLKRCON_CLKRDIV2_MASK                              0x4
#define _CLKRCON_CLKRDC0_POSN                               0x3
#define _CLKRCON_CLKRDC0_POSITION                           0x3
#define _CLKRCON_CLKRDC0_SIZE                               0x1
#define _CLKRCON_CLKRDC0_LENGTH                             0x1
#define _CLKRCON_CLKRDC0_MASK                               0x8
#define _CLKRCON_CLKRDC1_POSN                               0x4
#define _CLKRCON_CLKRDC1_POSITION                           0x4
#define _CLKRCON_CLKRDC1_SIZE                               0x1
#define _CLKRCON_CLKRDC1_LENGTH                             0x1
#define _CLKRCON_CLKRDC1_MASK                               0x10

// Register: CLKRCLK
#define CLKRCLK CLKRCLK
extern volatile unsigned char           CLKRCLK             __at(0x896);
#ifndef _LIB_BUILD
asm("CLKRCLK equ 0896h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKRCLK                :4;
    };
    struct {
        unsigned CLKRCLK0               :1;
        unsigned CLKRCLK1               :1;
        unsigned CLKRCLK2               :1;
        unsigned CLKRCLK3               :1;
    };
} CLKRCLKbits_t;
extern volatile CLKRCLKbits_t CLKRCLKbits __at(0x896);
// bitfield macros
#define _CLKRCLK_CLKRCLK_POSN                               0x0
#define _CLKRCLK_CLKRCLK_POSITION                           0x0
#define _CLKRCLK_CLKRCLK_SIZE                               0x4
#define _CLKRCLK_CLKRCLK_LENGTH                             0x4
#define _CLKRCLK_CLKRCLK_MASK                               0xF
#define _CLKRCLK_CLKRCLK0_POSN                              0x0
#define _CLKRCLK_CLKRCLK0_POSITION                          0x0
#define _CLKRCLK_CLKRCLK0_SIZE                              0x1
#define _CLKRCLK_CLKRCLK0_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK0_MASK                              0x1
#define _CLKRCLK_CLKRCLK1_POSN                              0x1
#define _CLKRCLK_CLKRCLK1_POSITION                          0x1
#define _CLKRCLK_CLKRCLK1_SIZE                              0x1
#define _CLKRCLK_CLKRCLK1_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK1_MASK                              0x2
#define _CLKRCLK_CLKRCLK2_POSN                              0x2
#define _CLKRCLK_CLKRCLK2_POSITION                          0x2
#define _CLKRCLK_CLKRCLK2_SIZE                              0x1
#define _CLKRCLK_CLKRCLK2_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK2_MASK                              0x4
#define _CLKRCLK_CLKRCLK3_POSN                              0x3
#define _CLKRCLK_CLKRCLK3_POSITION                          0x3
#define _CLKRCLK_CLKRCLK3_SIZE                              0x1
#define _CLKRCLK_CLKRCLK3_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK3_MASK                              0x8

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x90C);
#ifndef _LIB_BUILD
asm("FVRCON equ 090Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x90C);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0x90E);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 090Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :1;
        unsigned                        :1;
        unsigned PSS                    :2;
        unsigned OE2                    :1;
        unsigned OE1                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned DAC1NSS                :1;
        unsigned                        :1;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
        unsigned DAC1OE2                :1;
        unsigned DAC1OE1                :1;
        unsigned                        :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0x90E);
// bitfield macros
#define _DAC1CON0_NSS_POSN                                  0x0
#define _DAC1CON0_NSS_POSITION                              0x0
#define _DAC1CON0_NSS_SIZE                                  0x1
#define _DAC1CON0_NSS_LENGTH                                0x1
#define _DAC1CON0_NSS_MASK                                  0x1
#define _DAC1CON0_PSS_POSN                                  0x2
#define _DAC1CON0_PSS_POSITION                              0x2
#define _DAC1CON0_PSS_SIZE                                  0x2
#define _DAC1CON0_PSS_LENGTH                                0x2
#define _DAC1CON0_PSS_MASK                                  0xC
#define _DAC1CON0_OE2_POSN                                  0x4
#define _DAC1CON0_OE2_POSITION                              0x4
#define _DAC1CON0_OE2_SIZE                                  0x1
#define _DAC1CON0_OE2_LENGTH                                0x1
#define _DAC1CON0_OE2_MASK                                  0x10
#define _DAC1CON0_OE1_POSN                                  0x5
#define _DAC1CON0_OE1_POSITION                              0x5
#define _DAC1CON0_OE1_SIZE                                  0x1
#define _DAC1CON0_OE1_LENGTH                                0x1
#define _DAC1CON0_OE1_MASK                                  0x20
#define _DAC1CON0_EN_POSN                                   0x7
#define _DAC1CON0_EN_POSITION                               0x7
#define _DAC1CON0_EN_SIZE                                   0x1
#define _DAC1CON0_EN_LENGTH                                 0x1
#define _DAC1CON0_EN_MASK                                   0x80
#define _DAC1CON0_DAC1NSS_POSN                              0x0
#define _DAC1CON0_DAC1NSS_POSITION                          0x0
#define _DAC1CON0_DAC1NSS_SIZE                              0x1
#define _DAC1CON0_DAC1NSS_LENGTH                            0x1
#define _DAC1CON0_DAC1NSS_MASK                              0x1
#define _DAC1CON0_DAC1PSS0_POSN                             0x2
#define _DAC1CON0_DAC1PSS0_POSITION                         0x2
#define _DAC1CON0_DAC1PSS0_SIZE                             0x1
#define _DAC1CON0_DAC1PSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS0_MASK                             0x4
#define _DAC1CON0_DAC1PSS1_POSN                             0x3
#define _DAC1CON0_DAC1PSS1_POSITION                         0x3
#define _DAC1CON0_DAC1PSS1_SIZE                             0x1
#define _DAC1CON0_DAC1PSS1_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS1_MASK                             0x8
#define _DAC1CON0_DAC1OE2_POSN                              0x4
#define _DAC1CON0_DAC1OE2_POSITION                          0x4
#define _DAC1CON0_DAC1OE2_SIZE                              0x1
#define _DAC1CON0_DAC1OE2_LENGTH                            0x1
#define _DAC1CON0_DAC1OE2_MASK                              0x10
#define _DAC1CON0_DAC1OE1_POSN                              0x5
#define _DAC1CON0_DAC1OE1_POSITION                          0x5
#define _DAC1CON0_DAC1OE1_SIZE                              0x1
#define _DAC1CON0_DAC1OE1_LENGTH                            0x1
#define _DAC1CON0_DAC1OE1_MASK                              0x20
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_PSS0_POSN                                 0x2
#define _DAC1CON0_PSS0_POSITION                             0x2
#define _DAC1CON0_PSS0_SIZE                                 0x1
#define _DAC1CON0_PSS0_LENGTH                               0x1
#define _DAC1CON0_PSS0_MASK                                 0x4
#define _DAC1CON0_PSS1_POSN                                 0x3
#define _DAC1CON0_PSS1_POSITION                             0x3
#define _DAC1CON0_PSS1_SIZE                                 0x1
#define _DAC1CON0_PSS1_LENGTH                               0x1
#define _DAC1CON0_PSS1_MASK                                 0x8

// Register: DAC1CON1
#define DAC1CON1 DAC1CON1
extern volatile unsigned char           DAC1CON1            __at(0x90F);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 090Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :5;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0x90F);
// bitfield macros
#define _DAC1CON1_DAC1R_POSN                                0x0
#define _DAC1CON1_DAC1R_POSITION                            0x0
#define _DAC1CON1_DAC1R_SIZE                                0x5
#define _DAC1CON1_DAC1R_LENGTH                              0x5
#define _DAC1CON1_DAC1R_MASK                                0x1F
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10

// Register: ZCDCON
#define ZCDCON ZCDCON
extern volatile unsigned char           ZCDCON              __at(0x91F);
#ifndef _LIB_BUILD
asm("ZCDCON equ 091Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDINTN                :1;
        unsigned ZCDINTP                :1;
        unsigned                        :2;
        unsigned ZCDPOL                 :1;
        unsigned ZCDOUT                 :1;
        unsigned                        :1;
        unsigned ZCDSEN                 :1;
    };
} ZCDCONbits_t;
extern volatile ZCDCONbits_t ZCDCONbits __at(0x91F);
// bitfield macros
#define _ZCDCON_ZCDINTN_POSN                                0x0
#define _ZCDCON_ZCDINTN_POSITION                            0x0
#define _ZCDCON_ZCDINTN_SIZE                                0x1
#define _ZCDCON_ZCDINTN_LENGTH                              0x1
#define _ZCDCON_ZCDINTN_MASK                                0x1
#define _ZCDCON_ZCDINTP_POSN                                0x1
#define _ZCDCON_ZCDINTP_POSITION                            0x1
#define _ZCDCON_ZCDINTP_SIZE                                0x1
#define _ZCDCON_ZCDINTP_LENGTH                              0x1
#define _ZCDCON_ZCDINTP_MASK                                0x2
#define _ZCDCON_ZCDPOL_POSN                                 0x4
#define _ZCDCON_ZCDPOL_POSITION                             0x4
#define _ZCDCON_ZCDPOL_SIZE                                 0x1
#define _ZCDCON_ZCDPOL_LENGTH                               0x1
#define _ZCDCON_ZCDPOL_MASK                                 0x10
#define _ZCDCON_ZCDOUT_POSN                                 0x5
#define _ZCDCON_ZCDOUT_POSITION                             0x5
#define _ZCDCON_ZCDOUT_SIZE                                 0x1
#define _ZCDCON_ZCDOUT_LENGTH                               0x1
#define _ZCDCON_ZCDOUT_MASK                                 0x20
#define _ZCDCON_ZCDSEN_POSN                                 0x7
#define _ZCDCON_ZCDSEN_POSITION                             0x7
#define _ZCDCON_ZCDSEN_SIZE                                 0x1
#define _ZCDCON_ZCDSEN_LENGTH                               0x1
#define _ZCDCON_ZCDSEN_MASK                                 0x80

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x98F);
#ifndef _LIB_BUILD
asm("CMOUT equ 098Fh");
#endif
// aliases
extern volatile unsigned char           CMSTAT              __at(0x98F);
#ifndef _LIB_BUILD
asm("CMSTAT equ 098Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x98F);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2
#define _CMOUT_C1OUT_POSN                                   0x0
#define _CMOUT_C1OUT_POSITION                               0x0
#define _CMOUT_C1OUT_SIZE                                   0x1
#define _CMOUT_C1OUT_LENGTH                                 0x1
#define _CMOUT_C1OUT_MASK                                   0x1
#define _CMOUT_C2OUT_POSN                                   0x1
#define _CMOUT_C2OUT_POSITION                               0x1
#define _CMOUT_C2OUT_SIZE                                   0x1
#define _CMOUT_C2OUT_LENGTH                                 0x1
#define _CMOUT_C2OUT_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMSTATbits_t;
extern volatile CMSTATbits_t CMSTATbits __at(0x98F);
// bitfield macros
#define _CMSTAT_MC1OUT_POSN                                 0x0
#define _CMSTAT_MC1OUT_POSITION                             0x0
#define _CMSTAT_MC1OUT_SIZE                                 0x1
#define _CMSTAT_MC1OUT_LENGTH                               0x1
#define _CMSTAT_MC1OUT_MASK                                 0x1
#define _CMSTAT_MC2OUT_POSN                                 0x1
#define _CMSTAT_MC2OUT_POSITION                             0x1
#define _CMSTAT_MC2OUT_SIZE                                 0x1
#define _CMSTAT_MC2OUT_LENGTH                               0x1
#define _CMSTAT_MC2OUT_MASK                                 0x2
#define _CMSTAT_C1OUT_POSN                                  0x0
#define _CMSTAT_C1OUT_POSITION                              0x0
#define _CMSTAT_C1OUT_SIZE                                  0x1
#define _CMSTAT_C1OUT_LENGTH                                0x1
#define _CMSTAT_C1OUT_MASK                                  0x1
#define _CMSTAT_C2OUT_POSN                                  0x1
#define _CMSTAT_C2OUT_POSITION                              0x1
#define _CMSTAT_C2OUT_SIZE                                  0x1
#define _CMSTAT_C2OUT_LENGTH                                0x1
#define _CMSTAT_C2OUT_MASK                                  0x2

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x990);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 0990h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned                        :2;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1EN                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x990);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_EN_POSN                                    0x7
#define _CM1CON0_EN_POSITION                                0x7
#define _CM1CON0_EN_SIZE                                    0x1
#define _CM1CON0_EN_LENGTH                                  0x1
#define _CM1CON0_EN_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1EN_POSN                                  0x7
#define _CM1CON0_C1EN_POSITION                              0x7
#define _CM1CON0_C1EN_SIZE                                  0x1
#define _CM1CON0_C1EN_LENGTH                                0x1
#define _CM1CON0_C1EN_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x991);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 0991h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x991);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NCH
#define CM1NCH CM1NCH
extern volatile unsigned char           CM1NCH              __at(0x992);
#ifndef _LIB_BUILD
asm("CM1NCH equ 0992h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NCHbits_t;
extern volatile CM1NCHbits_t CM1NCHbits __at(0x992);
// bitfield macros
#define _CM1NCH_NCH_POSN                                    0x0
#define _CM1NCH_NCH_POSITION                                0x0
#define _CM1NCH_NCH_SIZE                                    0x3
#define _CM1NCH_NCH_LENGTH                                  0x3
#define _CM1NCH_NCH_MASK                                    0x7
#define _CM1NCH_NCH0_POSN                                   0x0
#define _CM1NCH_NCH0_POSITION                               0x0
#define _CM1NCH_NCH0_SIZE                                   0x1
#define _CM1NCH_NCH0_LENGTH                                 0x1
#define _CM1NCH_NCH0_MASK                                   0x1
#define _CM1NCH_NCH1_POSN                                   0x1
#define _CM1NCH_NCH1_POSITION                               0x1
#define _CM1NCH_NCH1_SIZE                                   0x1
#define _CM1NCH_NCH1_LENGTH                                 0x1
#define _CM1NCH_NCH1_MASK                                   0x2
#define _CM1NCH_NCH2_POSN                                   0x2
#define _CM1NCH_NCH2_POSITION                               0x2
#define _CM1NCH_NCH2_SIZE                                   0x1
#define _CM1NCH_NCH2_LENGTH                                 0x1
#define _CM1NCH_NCH2_MASK                                   0x4
#define _CM1NCH_C1NCH0_POSN                                 0x0
#define _CM1NCH_C1NCH0_POSITION                             0x0
#define _CM1NCH_C1NCH0_SIZE                                 0x1
#define _CM1NCH_C1NCH0_LENGTH                               0x1
#define _CM1NCH_C1NCH0_MASK                                 0x1
#define _CM1NCH_C1NCH1_POSN                                 0x1
#define _CM1NCH_C1NCH1_POSITION                             0x1
#define _CM1NCH_C1NCH1_SIZE                                 0x1
#define _CM1NCH_C1NCH1_LENGTH                               0x1
#define _CM1NCH_C1NCH1_MASK                                 0x2
#define _CM1NCH_C1NCH2_POSN                                 0x2
#define _CM1NCH_C1NCH2_POSITION                             0x2
#define _CM1NCH_C1NCH2_SIZE                                 0x1
#define _CM1NCH_C1NCH2_LENGTH                               0x1
#define _CM1NCH_C1NCH2_MASK                                 0x4

// Register: CM1PCH
#define CM1PCH CM1PCH
extern volatile unsigned char           CM1PCH              __at(0x993);
#ifndef _LIB_BUILD
asm("CM1PCH equ 0993h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PCHbits_t;
extern volatile CM1PCHbits_t CM1PCHbits __at(0x993);
// bitfield macros
#define _CM1PCH_PCH_POSN                                    0x0
#define _CM1PCH_PCH_POSITION                                0x0
#define _CM1PCH_PCH_SIZE                                    0x3
#define _CM1PCH_PCH_LENGTH                                  0x3
#define _CM1PCH_PCH_MASK                                    0x7
#define _CM1PCH_PCH0_POSN                                   0x0
#define _CM1PCH_PCH0_POSITION                               0x0
#define _CM1PCH_PCH0_SIZE                                   0x1
#define _CM1PCH_PCH0_LENGTH                                 0x1
#define _CM1PCH_PCH0_MASK                                   0x1
#define _CM1PCH_PCH1_POSN                                   0x1
#define _CM1PCH_PCH1_POSITION                               0x1
#define _CM1PCH_PCH1_SIZE                                   0x1
#define _CM1PCH_PCH1_LENGTH                                 0x1
#define _CM1PCH_PCH1_MASK                                   0x2
#define _CM1PCH_PCH2_POSN                                   0x2
#define _CM1PCH_PCH2_POSITION                               0x2
#define _CM1PCH_PCH2_SIZE                                   0x1
#define _CM1PCH_PCH2_LENGTH                                 0x1
#define _CM1PCH_PCH2_MASK                                   0x4
#define _CM1PCH_C1PCH0_POSN                                 0x0
#define _CM1PCH_C1PCH0_POSITION                             0x0
#define _CM1PCH_C1PCH0_SIZE                                 0x1
#define _CM1PCH_C1PCH0_LENGTH                               0x1
#define _CM1PCH_C1PCH0_MASK                                 0x1
#define _CM1PCH_C1PCH1_POSN                                 0x1
#define _CM1PCH_C1PCH1_POSITION                             0x1
#define _CM1PCH_C1PCH1_SIZE                                 0x1
#define _CM1PCH_C1PCH1_LENGTH                               0x1
#define _CM1PCH_C1PCH1_MASK                                 0x2
#define _CM1PCH_C1PCH2_POSN                                 0x2
#define _CM1PCH_C1PCH2_POSITION                             0x2
#define _CM1PCH_C1PCH2_SIZE                                 0x1
#define _CM1PCH_C1PCH2_LENGTH                               0x1
#define _CM1PCH_C1PCH2_MASK                                 0x4

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x994);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0994h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned                        :2;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2EN                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x994);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_EN_POSN                                    0x7
#define _CM2CON0_EN_POSITION                                0x7
#define _CM2CON0_EN_SIZE                                    0x1
#define _CM2CON0_EN_LENGTH                                  0x1
#define _CM2CON0_EN_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2EN_POSN                                  0x7
#define _CM2CON0_C2EN_POSITION                              0x7
#define _CM2CON0_C2EN_SIZE                                  0x1
#define _CM2CON0_C2EN_LENGTH                                0x1
#define _CM2CON0_C2EN_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x995);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0995h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x995);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NCH
#define CM2NCH CM2NCH
extern volatile unsigned char           CM2NCH              __at(0x996);
#ifndef _LIB_BUILD
asm("CM2NCH equ 0996h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NCHbits_t;
extern volatile CM2NCHbits_t CM2NCHbits __at(0x996);
// bitfield macros
#define _CM2NCH_NCH_POSN                                    0x0
#define _CM2NCH_NCH_POSITION                                0x0
#define _CM2NCH_NCH_SIZE                                    0x3
#define _CM2NCH_NCH_LENGTH                                  0x3
#define _CM2NCH_NCH_MASK                                    0x7
#define _CM2NCH_NCH0_POSN                                   0x0
#define _CM2NCH_NCH0_POSITION                               0x0
#define _CM2NCH_NCH0_SIZE                                   0x1
#define _CM2NCH_NCH0_LENGTH                                 0x1
#define _CM2NCH_NCH0_MASK                                   0x1
#define _CM2NCH_NCH1_POSN                                   0x1
#define _CM2NCH_NCH1_POSITION                               0x1
#define _CM2NCH_NCH1_SIZE                                   0x1
#define _CM2NCH_NCH1_LENGTH                                 0x1
#define _CM2NCH_NCH1_MASK                                   0x2
#define _CM2NCH_NCH2_POSN                                   0x2
#define _CM2NCH_NCH2_POSITION                               0x2
#define _CM2NCH_NCH2_SIZE                                   0x1
#define _CM2NCH_NCH2_LENGTH                                 0x1
#define _CM2NCH_NCH2_MASK                                   0x4
#define _CM2NCH_C2NCH0_POSN                                 0x0
#define _CM2NCH_C2NCH0_POSITION                             0x0
#define _CM2NCH_C2NCH0_SIZE                                 0x1
#define _CM2NCH_C2NCH0_LENGTH                               0x1
#define _CM2NCH_C2NCH0_MASK                                 0x1
#define _CM2NCH_C2NCH1_POSN                                 0x1
#define _CM2NCH_C2NCH1_POSITION                             0x1
#define _CM2NCH_C2NCH1_SIZE                                 0x1
#define _CM2NCH_C2NCH1_LENGTH                               0x1
#define _CM2NCH_C2NCH1_MASK                                 0x2
#define _CM2NCH_C2NCH2_POSN                                 0x2
#define _CM2NCH_C2NCH2_POSITION                             0x2
#define _CM2NCH_C2NCH2_SIZE                                 0x1
#define _CM2NCH_C2NCH2_LENGTH                               0x1
#define _CM2NCH_C2NCH2_MASK                                 0x4

// Register: CM2PCH
#define CM2PCH CM2PCH
extern volatile unsigned char           CM2PCH              __at(0x997);
#ifndef _LIB_BUILD
asm("CM2PCH equ 0997h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PCHbits_t;
extern volatile CM2PCHbits_t CM2PCHbits __at(0x997);
// bitfield macros
#define _CM2PCH_PCH_POSN                                    0x0
#define _CM2PCH_PCH_POSITION                                0x0
#define _CM2PCH_PCH_SIZE                                    0x3
#define _CM2PCH_PCH_LENGTH                                  0x3
#define _CM2PCH_PCH_MASK                                    0x7
#define _CM2PCH_PCH0_POSN                                   0x0
#define _CM2PCH_PCH0_POSITION                               0x0
#define _CM2PCH_PCH0_SIZE                                   0x1
#define _CM2PCH_PCH0_LENGTH                                 0x1
#define _CM2PCH_PCH0_MASK                                   0x1
#define _CM2PCH_PCH1_POSN                                   0x1
#define _CM2PCH_PCH1_POSITION                               0x1
#define _CM2PCH_PCH1_SIZE                                   0x1
#define _CM2PCH_PCH1_LENGTH                                 0x1
#define _CM2PCH_PCH1_MASK                                   0x2
#define _CM2PCH_PCH2_POSN                                   0x2
#define _CM2PCH_PCH2_POSITION                               0x2
#define _CM2PCH_PCH2_SIZE                                   0x1
#define _CM2PCH_PCH2_LENGTH                                 0x1
#define _CM2PCH_PCH2_MASK                                   0x4
#define _CM2PCH_C2PCH0_POSN                                 0x0
#define _CM2PCH_C2PCH0_POSITION                             0x0
#define _CM2PCH_C2PCH0_SIZE                                 0x1
#define _CM2PCH_C2PCH0_LENGTH                               0x1
#define _CM2PCH_C2PCH0_MASK                                 0x1
#define _CM2PCH_C2PCH1_POSN                                 0x1
#define _CM2PCH_C2PCH1_POSITION                             0x1
#define _CM2PCH_C2PCH1_SIZE                                 0x1
#define _CM2PCH_C2PCH1_LENGTH                               0x1
#define _CM2PCH_C2PCH1_MASK                                 0x2
#define _CM2PCH_C2PCH2_POSN                                 0x2
#define _CM2PCH_C2PCH2_POSITION                             0x2
#define _CM2PCH_C2PCH2_SIZE                                 0x1
#define _CM2PCH_C2PCH2_LENGTH                               0x1
#define _CM2PCH_C2PCH2_MASK                                 0x4

// Register: RC2REG
#define RC2REG RC2REG
extern volatile unsigned char           RC2REG              __at(0xA19);
#ifndef _LIB_BUILD
asm("RC2REG equ 0A19h");
#endif
// aliases
extern volatile unsigned char           RCREG2              __at(0xA19);
#ifndef _LIB_BUILD
asm("RCREG2 equ 0A19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2REG                 :8;
    };
} RC2REGbits_t;
extern volatile RC2REGbits_t RC2REGbits __at(0xA19);
// bitfield macros
#define _RC2REG_RC2REG_POSN                                 0x0
#define _RC2REG_RC2REG_POSITION                             0x0
#define _RC2REG_RC2REG_SIZE                                 0x8
#define _RC2REG_RC2REG_LENGTH                               0x8
#define _RC2REG_RC2REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC2REG                 :8;
    };
} RCREG2bits_t;
extern volatile RCREG2bits_t RCREG2bits __at(0xA19);
// bitfield macros
#define _RCREG2_RC2REG_POSN                                 0x0
#define _RCREG2_RC2REG_POSITION                             0x0
#define _RCREG2_RC2REG_SIZE                                 0x8
#define _RCREG2_RC2REG_LENGTH                               0x8
#define _RCREG2_RC2REG_MASK                                 0xFF

// Register: TX2REG
#define TX2REG TX2REG
extern volatile unsigned char           TX2REG              __at(0xA1A);
#ifndef _LIB_BUILD
asm("TX2REG equ 0A1Ah");
#endif
// aliases
extern volatile unsigned char           TXREG2              __at(0xA1A);
#ifndef _LIB_BUILD
asm("TXREG2 equ 0A1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX2REG                 :8;
    };
} TX2REGbits_t;
extern volatile TX2REGbits_t TX2REGbits __at(0xA1A);
// bitfield macros
#define _TX2REG_TX2REG_POSN                                 0x0
#define _TX2REG_TX2REG_POSITION                             0x0
#define _TX2REG_TX2REG_SIZE                                 0x8
#define _TX2REG_TX2REG_LENGTH                               0x8
#define _TX2REG_TX2REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX2REG                 :8;
    };
} TXREG2bits_t;
extern volatile TXREG2bits_t TXREG2bits __at(0xA1A);
// bitfield macros
#define _TXREG2_TX2REG_POSN                                 0x0
#define _TXREG2_TX2REG_POSITION                             0x0
#define _TXREG2_TX2REG_SIZE                                 0x8
#define _TXREG2_TX2REG_LENGTH                               0x8
#define _TXREG2_TX2REG_MASK                                 0xFF

// Register: SP2BRG
#define SP2BRG SP2BRG
extern volatile unsigned short          SP2BRG              __at(0xA1B);
#ifndef _LIB_BUILD
asm("SP2BRG equ 0A1Bh");
#endif

// Register: SP2BRGL
#define SP2BRGL SP2BRGL
extern volatile unsigned char           SP2BRGL             __at(0xA1B);
#ifndef _LIB_BUILD
asm("SP2BRGL equ 0A1Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG2              __at(0xA1B);
#ifndef _LIB_BUILD
asm("SPBRG2 equ 0A1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGL                :8;
    };
} SP2BRGLbits_t;
extern volatile SP2BRGLbits_t SP2BRGLbits __at(0xA1B);
// bitfield macros
#define _SP2BRGL_SP2BRGL_POSN                               0x0
#define _SP2BRGL_SP2BRGL_POSITION                           0x0
#define _SP2BRGL_SP2BRGL_SIZE                               0x8
#define _SP2BRGL_SP2BRGL_LENGTH                             0x8
#define _SP2BRGL_SP2BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGL                :8;
    };
} SPBRG2bits_t;
extern volatile SPBRG2bits_t SPBRG2bits __at(0xA1B);
// bitfield macros
#define _SPBRG2_SP2BRGL_POSN                                0x0
#define _SPBRG2_SP2BRGL_POSITION                            0x0
#define _SPBRG2_SP2BRGL_SIZE                                0x8
#define _SPBRG2_SP2BRGL_LENGTH                              0x8
#define _SPBRG2_SP2BRGL_MASK                                0xFF

// Register: SP2BRGH
#define SP2BRGH SP2BRGH
extern volatile unsigned char           SP2BRGH             __at(0xA1C);
#ifndef _LIB_BUILD
asm("SP2BRGH equ 0A1Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH2             __at(0xA1C);
#ifndef _LIB_BUILD
asm("SPBRGH2 equ 0A1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGH                :8;
    };
} SP2BRGHbits_t;
extern volatile SP2BRGHbits_t SP2BRGHbits __at(0xA1C);
// bitfield macros
#define _SP2BRGH_SP2BRGH_POSN                               0x0
#define _SP2BRGH_SP2BRGH_POSITION                           0x0
#define _SP2BRGH_SP2BRGH_SIZE                               0x8
#define _SP2BRGH_SP2BRGH_LENGTH                             0x8
#define _SP2BRGH_SP2BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGH                :8;
    };
} SPBRGH2bits_t;
extern volatile SPBRGH2bits_t SPBRGH2bits __at(0xA1C);
// bitfield macros
#define _SPBRGH2_SP2BRGH_POSN                               0x0
#define _SPBRGH2_SP2BRGH_POSITION                           0x0
#define _SPBRGH2_SP2BRGH_SIZE                               0x8
#define _SPBRGH2_SP2BRGH_LENGTH                             0x8
#define _SPBRGH2_SP2BRGH_MASK                               0xFF

// Register: RC2STA
#define RC2STA RC2STA
extern volatile unsigned char           RC2STA              __at(0xA1D);
#ifndef _LIB_BUILD
asm("RC2STA equ 0A1Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA2              __at(0xA1D);
#ifndef _LIB_BUILD
asm("RCSTA2 equ 0A1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC2STAbits_t;
extern volatile RC2STAbits_t RC2STAbits __at(0xA1D);
// bitfield macros
#define _RC2STA_RX9D_POSN                                   0x0
#define _RC2STA_RX9D_POSITION                               0x0
#define _RC2STA_RX9D_SIZE                                   0x1
#define _RC2STA_RX9D_LENGTH                                 0x1
#define _RC2STA_RX9D_MASK                                   0x1
#define _RC2STA_OERR_POSN                                   0x1
#define _RC2STA_OERR_POSITION                               0x1
#define _RC2STA_OERR_SIZE                                   0x1
#define _RC2STA_OERR_LENGTH                                 0x1
#define _RC2STA_OERR_MASK                                   0x2
#define _RC2STA_FERR_POSN                                   0x2
#define _RC2STA_FERR_POSITION                               0x2
#define _RC2STA_FERR_SIZE                                   0x1
#define _RC2STA_FERR_LENGTH                                 0x1
#define _RC2STA_FERR_MASK                                   0x4
#define _RC2STA_ADDEN_POSN                                  0x3
#define _RC2STA_ADDEN_POSITION                              0x3
#define _RC2STA_ADDEN_SIZE                                  0x1
#define _RC2STA_ADDEN_LENGTH                                0x1
#define _RC2STA_ADDEN_MASK                                  0x8
#define _RC2STA_CREN_POSN                                   0x4
#define _RC2STA_CREN_POSITION                               0x4
#define _RC2STA_CREN_SIZE                                   0x1
#define _RC2STA_CREN_LENGTH                                 0x1
#define _RC2STA_CREN_MASK                                   0x10
#define _RC2STA_SREN_POSN                                   0x5
#define _RC2STA_SREN_POSITION                               0x5
#define _RC2STA_SREN_SIZE                                   0x1
#define _RC2STA_SREN_LENGTH                                 0x1
#define _RC2STA_SREN_MASK                                   0x20
#define _RC2STA_RX9_POSN                                    0x6
#define _RC2STA_RX9_POSITION                                0x6
#define _RC2STA_RX9_SIZE                                    0x1
#define _RC2STA_RX9_LENGTH                                  0x1
#define _RC2STA_RX9_MASK                                    0x40
#define _RC2STA_SPEN_POSN                                   0x7
#define _RC2STA_SPEN_POSITION                               0x7
#define _RC2STA_SPEN_SIZE                                   0x1
#define _RC2STA_SPEN_LENGTH                                 0x1
#define _RC2STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA2bits_t;
extern volatile RCSTA2bits_t RCSTA2bits __at(0xA1D);
// bitfield macros
#define _RCSTA2_RX9D_POSN                                   0x0
#define _RCSTA2_RX9D_POSITION                               0x0
#define _RCSTA2_RX9D_SIZE                                   0x1
#define _RCSTA2_RX9D_LENGTH                                 0x1
#define _RCSTA2_RX9D_MASK                                   0x1
#define _RCSTA2_OERR_POSN                                   0x1
#define _RCSTA2_OERR_POSITION                               0x1
#define _RCSTA2_OERR_SIZE                                   0x1
#define _RCSTA2_OERR_LENGTH                                 0x1
#define _RCSTA2_OERR_MASK                                   0x2
#define _RCSTA2_FERR_POSN                                   0x2
#define _RCSTA2_FERR_POSITION                               0x2
#define _RCSTA2_FERR_SIZE                                   0x1
#define _RCSTA2_FERR_LENGTH                                 0x1
#define _RCSTA2_FERR_MASK                                   0x4
#define _RCSTA2_ADDEN_POSN                                  0x3
#define _RCSTA2_ADDEN_POSITION                              0x3
#define _RCSTA2_ADDEN_SIZE                                  0x1
#define _RCSTA2_ADDEN_LENGTH                                0x1
#define _RCSTA2_ADDEN_MASK                                  0x8
#define _RCSTA2_CREN_POSN                                   0x4
#define _RCSTA2_CREN_POSITION                               0x4
#define _RCSTA2_CREN_SIZE                                   0x1
#define _RCSTA2_CREN_LENGTH                                 0x1
#define _RCSTA2_CREN_MASK                                   0x10
#define _RCSTA2_SREN_POSN                                   0x5
#define _RCSTA2_SREN_POSITION                               0x5
#define _RCSTA2_SREN_SIZE                                   0x1
#define _RCSTA2_SREN_LENGTH                                 0x1
#define _RCSTA2_SREN_MASK                                   0x20
#define _RCSTA2_RX9_POSN                                    0x6
#define _RCSTA2_RX9_POSITION                                0x6
#define _RCSTA2_RX9_SIZE                                    0x1
#define _RCSTA2_RX9_LENGTH                                  0x1
#define _RCSTA2_RX9_MASK                                    0x40
#define _RCSTA2_SPEN_POSN                                   0x7
#define _RCSTA2_SPEN_POSITION                               0x7
#define _RCSTA2_SPEN_SIZE                                   0x1
#define _RCSTA2_SPEN_LENGTH                                 0x1
#define _RCSTA2_SPEN_MASK                                   0x80

// Register: TX2STA
#define TX2STA TX2STA
extern volatile unsigned char           TX2STA              __at(0xA1E);
#ifndef _LIB_BUILD
asm("TX2STA equ 0A1Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA2              __at(0xA1E);
#ifndef _LIB_BUILD
asm("TXSTA2 equ 0A1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX2STAbits_t;
extern volatile TX2STAbits_t TX2STAbits __at(0xA1E);
// bitfield macros
#define _TX2STA_TX9D_POSN                                   0x0
#define _TX2STA_TX9D_POSITION                               0x0
#define _TX2STA_TX9D_SIZE                                   0x1
#define _TX2STA_TX9D_LENGTH                                 0x1
#define _TX2STA_TX9D_MASK                                   0x1
#define _TX2STA_TRMT_POSN                                   0x1
#define _TX2STA_TRMT_POSITION                               0x1
#define _TX2STA_TRMT_SIZE                                   0x1
#define _TX2STA_TRMT_LENGTH                                 0x1
#define _TX2STA_TRMT_MASK                                   0x2
#define _TX2STA_BRGH_POSN                                   0x2
#define _TX2STA_BRGH_POSITION                               0x2
#define _TX2STA_BRGH_SIZE                                   0x1
#define _TX2STA_BRGH_LENGTH                                 0x1
#define _TX2STA_BRGH_MASK                                   0x4
#define _TX2STA_SENDB_POSN                                  0x3
#define _TX2STA_SENDB_POSITION                              0x3
#define _TX2STA_SENDB_SIZE                                  0x1
#define _TX2STA_SENDB_LENGTH                                0x1
#define _TX2STA_SENDB_MASK                                  0x8
#define _TX2STA_SYNC_POSN                                   0x4
#define _TX2STA_SYNC_POSITION                               0x4
#define _TX2STA_SYNC_SIZE                                   0x1
#define _TX2STA_SYNC_LENGTH                                 0x1
#define _TX2STA_SYNC_MASK                                   0x10
#define _TX2STA_TXEN_POSN                                   0x5
#define _TX2STA_TXEN_POSITION                               0x5
#define _TX2STA_TXEN_SIZE                                   0x1
#define _TX2STA_TXEN_LENGTH                                 0x1
#define _TX2STA_TXEN_MASK                                   0x20
#define _TX2STA_TX9_POSN                                    0x6
#define _TX2STA_TX9_POSITION                                0x6
#define _TX2STA_TX9_SIZE                                    0x1
#define _TX2STA_TX9_LENGTH                                  0x1
#define _TX2STA_TX9_MASK                                    0x40
#define _TX2STA_CSRC_POSN                                   0x7
#define _TX2STA_CSRC_POSITION                               0x7
#define _TX2STA_CSRC_SIZE                                   0x1
#define _TX2STA_CSRC_LENGTH                                 0x1
#define _TX2STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA2bits_t;
extern volatile TXSTA2bits_t TXSTA2bits __at(0xA1E);
// bitfield macros
#define _TXSTA2_TX9D_POSN                                   0x0
#define _TXSTA2_TX9D_POSITION                               0x0
#define _TXSTA2_TX9D_SIZE                                   0x1
#define _TXSTA2_TX9D_LENGTH                                 0x1
#define _TXSTA2_TX9D_MASK                                   0x1
#define _TXSTA2_TRMT_POSN                                   0x1
#define _TXSTA2_TRMT_POSITION                               0x1
#define _TXSTA2_TRMT_SIZE                                   0x1
#define _TXSTA2_TRMT_LENGTH                                 0x1
#define _TXSTA2_TRMT_MASK                                   0x2
#define _TXSTA2_BRGH_POSN                                   0x2
#define _TXSTA2_BRGH_POSITION                               0x2
#define _TXSTA2_BRGH_SIZE                                   0x1
#define _TXSTA2_BRGH_LENGTH                                 0x1
#define _TXSTA2_BRGH_MASK                                   0x4
#define _TXSTA2_SENDB_POSN                                  0x3
#define _TXSTA2_SENDB_POSITION                              0x3
#define _TXSTA2_SENDB_SIZE                                  0x1
#define _TXSTA2_SENDB_LENGTH                                0x1
#define _TXSTA2_SENDB_MASK                                  0x8
#define _TXSTA2_SYNC_POSN                                   0x4
#define _TXSTA2_SYNC_POSITION                               0x4
#define _TXSTA2_SYNC_SIZE                                   0x1
#define _TXSTA2_SYNC_LENGTH                                 0x1
#define _TXSTA2_SYNC_MASK                                   0x10
#define _TXSTA2_TXEN_POSN                                   0x5
#define _TXSTA2_TXEN_POSITION                               0x5
#define _TXSTA2_TXEN_SIZE                                   0x1
#define _TXSTA2_TXEN_LENGTH                                 0x1
#define _TXSTA2_TXEN_MASK                                   0x20
#define _TXSTA2_TX9_POSN                                    0x6
#define _TXSTA2_TX9_POSITION                                0x6
#define _TXSTA2_TX9_SIZE                                    0x1
#define _TXSTA2_TX9_LENGTH                                  0x1
#define _TXSTA2_TX9_MASK                                    0x40
#define _TXSTA2_CSRC_POSN                                   0x7
#define _TXSTA2_CSRC_POSITION                               0x7
#define _TXSTA2_CSRC_SIZE                                   0x1
#define _TXSTA2_CSRC_LENGTH                                 0x1
#define _TXSTA2_CSRC_MASK                                   0x80

// Register: BAUD2CON
#define BAUD2CON BAUD2CON
extern volatile unsigned char           BAUD2CON            __at(0xA1F);
#ifndef _LIB_BUILD
asm("BAUD2CON equ 0A1Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON2            __at(0xA1F);
#ifndef _LIB_BUILD
asm("BAUDCON2 equ 0A1Fh");
#endif
extern volatile unsigned char           BAUDCTL2            __at(0xA1F);
#ifndef _LIB_BUILD
asm("BAUDCTL2 equ 0A1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD2CONbits_t;
extern volatile BAUD2CONbits_t BAUD2CONbits __at(0xA1F);
// bitfield macros
#define _BAUD2CON_ABDEN_POSN                                0x0
#define _BAUD2CON_ABDEN_POSITION                            0x0
#define _BAUD2CON_ABDEN_SIZE                                0x1
#define _BAUD2CON_ABDEN_LENGTH                              0x1
#define _BAUD2CON_ABDEN_MASK                                0x1
#define _BAUD2CON_WUE_POSN                                  0x1
#define _BAUD2CON_WUE_POSITION                              0x1
#define _BAUD2CON_WUE_SIZE                                  0x1
#define _BAUD2CON_WUE_LENGTH                                0x1
#define _BAUD2CON_WUE_MASK                                  0x2
#define _BAUD2CON_BRG16_POSN                                0x3
#define _BAUD2CON_BRG16_POSITION                            0x3
#define _BAUD2CON_BRG16_SIZE                                0x1
#define _BAUD2CON_BRG16_LENGTH                              0x1
#define _BAUD2CON_BRG16_MASK                                0x8
#define _BAUD2CON_SCKP_POSN                                 0x4
#define _BAUD2CON_SCKP_POSITION                             0x4
#define _BAUD2CON_SCKP_SIZE                                 0x1
#define _BAUD2CON_SCKP_LENGTH                               0x1
#define _BAUD2CON_SCKP_MASK                                 0x10
#define _BAUD2CON_RCIDL_POSN                                0x6
#define _BAUD2CON_RCIDL_POSITION                            0x6
#define _BAUD2CON_RCIDL_SIZE                                0x1
#define _BAUD2CON_RCIDL_LENGTH                              0x1
#define _BAUD2CON_RCIDL_MASK                                0x40
#define _BAUD2CON_ABDOVF_POSN                               0x7
#define _BAUD2CON_ABDOVF_POSITION                           0x7
#define _BAUD2CON_ABDOVF_SIZE                               0x1
#define _BAUD2CON_ABDOVF_LENGTH                             0x1
#define _BAUD2CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON2bits_t;
extern volatile BAUDCON2bits_t BAUDCON2bits __at(0xA1F);
// bitfield macros
#define _BAUDCON2_ABDEN_POSN                                0x0
#define _BAUDCON2_ABDEN_POSITION                            0x0
#define _BAUDCON2_ABDEN_SIZE                                0x1
#define _BAUDCON2_ABDEN_LENGTH                              0x1
#define _BAUDCON2_ABDEN_MASK                                0x1
#define _BAUDCON2_WUE_POSN                                  0x1
#define _BAUDCON2_WUE_POSITION                              0x1
#define _BAUDCON2_WUE_SIZE                                  0x1
#define _BAUDCON2_WUE_LENGTH                                0x1
#define _BAUDCON2_WUE_MASK                                  0x2
#define _BAUDCON2_BRG16_POSN                                0x3
#define _BAUDCON2_BRG16_POSITION                            0x3
#define _BAUDCON2_BRG16_SIZE                                0x1
#define _BAUDCON2_BRG16_LENGTH                              0x1
#define _BAUDCON2_BRG16_MASK                                0x8
#define _BAUDCON2_SCKP_POSN                                 0x4
#define _BAUDCON2_SCKP_POSITION                             0x4
#define _BAUDCON2_SCKP_SIZE                                 0x1
#define _BAUDCON2_SCKP_LENGTH                               0x1
#define _BAUDCON2_SCKP_MASK                                 0x10
#define _BAUDCON2_RCIDL_POSN                                0x6
#define _BAUDCON2_RCIDL_POSITION                            0x6
#define _BAUDCON2_RCIDL_SIZE                                0x1
#define _BAUDCON2_RCIDL_LENGTH                              0x1
#define _BAUDCON2_RCIDL_MASK                                0x40
#define _BAUDCON2_ABDOVF_POSN                               0x7
#define _BAUDCON2_ABDOVF_POSITION                           0x7
#define _BAUDCON2_ABDOVF_SIZE                               0x1
#define _BAUDCON2_ABDOVF_LENGTH                             0x1
#define _BAUDCON2_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL2bits_t;
extern volatile BAUDCTL2bits_t BAUDCTL2bits __at(0xA1F);
// bitfield macros
#define _BAUDCTL2_ABDEN_POSN                                0x0
#define _BAUDCTL2_ABDEN_POSITION                            0x0
#define _BAUDCTL2_ABDEN_SIZE                                0x1
#define _BAUDCTL2_ABDEN_LENGTH                              0x1
#define _BAUDCTL2_ABDEN_MASK                                0x1
#define _BAUDCTL2_WUE_POSN                                  0x1
#define _BAUDCTL2_WUE_POSITION                              0x1
#define _BAUDCTL2_WUE_SIZE                                  0x1
#define _BAUDCTL2_WUE_LENGTH                                0x1
#define _BAUDCTL2_WUE_MASK                                  0x2
#define _BAUDCTL2_BRG16_POSN                                0x3
#define _BAUDCTL2_BRG16_POSITION                            0x3
#define _BAUDCTL2_BRG16_SIZE                                0x1
#define _BAUDCTL2_BRG16_LENGTH                              0x1
#define _BAUDCTL2_BRG16_MASK                                0x8
#define _BAUDCTL2_SCKP_POSN                                 0x4
#define _BAUDCTL2_SCKP_POSITION                             0x4
#define _BAUDCTL2_SCKP_SIZE                                 0x1
#define _BAUDCTL2_SCKP_LENGTH                               0x1
#define _BAUDCTL2_SCKP_MASK                                 0x10
#define _BAUDCTL2_RCIDL_POSN                                0x6
#define _BAUDCTL2_RCIDL_POSITION                            0x6
#define _BAUDCTL2_RCIDL_SIZE                                0x1
#define _BAUDCTL2_RCIDL_LENGTH                              0x1
#define _BAUDCTL2_RCIDL_MASK                                0x40
#define _BAUDCTL2_ABDOVF_POSN                               0x7
#define _BAUDCTL2_ABDOVF_POSITION                           0x7
#define _BAUDCTL2_ABDOVF_SIZE                               0x1
#define _BAUDCTL2_ABDOVF_LENGTH                             0x1
#define _BAUDCTL2_ABDOVF_MASK                               0x80

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0x1E0F);
#ifndef _LIB_BUILD
asm("CLCDATA equ 01E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MLC1OUT                :1;
        unsigned MLC2OUT                :1;
        unsigned MLC3OUT                :1;
        unsigned MLC4OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0x1E0F);
// bitfield macros
#define _CLCDATA_MLC1OUT_POSN                               0x0
#define _CLCDATA_MLC1OUT_POSITION                           0x0
#define _CLCDATA_MLC1OUT_SIZE                               0x1
#define _CLCDATA_MLC1OUT_LENGTH                             0x1
#define _CLCDATA_MLC1OUT_MASK                               0x1
#define _CLCDATA_MLC2OUT_POSN                               0x1
#define _CLCDATA_MLC2OUT_POSITION                           0x1
#define _CLCDATA_MLC2OUT_SIZE                               0x1
#define _CLCDATA_MLC2OUT_LENGTH                             0x1
#define _CLCDATA_MLC2OUT_MASK                               0x2
#define _CLCDATA_MLC3OUT_POSN                               0x2
#define _CLCDATA_MLC3OUT_POSITION                           0x2
#define _CLCDATA_MLC3OUT_SIZE                               0x1
#define _CLCDATA_MLC3OUT_LENGTH                             0x1
#define _CLCDATA_MLC3OUT_MASK                               0x4
#define _CLCDATA_MLC4OUT_POSN                               0x3
#define _CLCDATA_MLC4OUT_POSITION                           0x3
#define _CLCDATA_MLC4OUT_SIZE                               0x1
#define _CLCDATA_MLC4OUT_LENGTH                             0x1
#define _CLCDATA_MLC4OUT_MASK                               0x8

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0x1E10);
#ifndef _LIB_BUILD
asm("CLC1CON equ 01E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned                        :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0x1E10);
// bitfield macros
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0x1E11);
#ifndef _LIB_BUILD
asm("CLC1POL equ 01E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0x1E11);
// bitfield macros
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0x1E12);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 01E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
        unsigned LC1D1S5                :1;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0x1E12);
// bitfield macros
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S5_POSN                              0x5
#define _CLC1SEL0_LC1D1S5_POSITION                          0x5
#define _CLC1SEL0_LC1D1S5_SIZE                              0x1
#define _CLC1SEL0_LC1D1S5_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S5_MASK                              0x20
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10
#define _CLC1SEL0_D1S5_POSN                                 0x5
#define _CLC1SEL0_D1S5_POSITION                             0x5
#define _CLC1SEL0_D1S5_SIZE                                 0x1
#define _CLC1SEL0_D1S5_LENGTH                               0x1
#define _CLC1SEL0_D1S5_MASK                                 0x20

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0x1E13);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 01E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
        unsigned LC1D2S5                :1;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0x1E13);
// bitfield macros
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S5_POSN                              0x5
#define _CLC1SEL1_LC1D2S5_POSITION                          0x5
#define _CLC1SEL1_LC1D2S5_SIZE                              0x1
#define _CLC1SEL1_LC1D2S5_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S5_MASK                              0x20
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10
#define _CLC1SEL1_D2S5_POSN                                 0x5
#define _CLC1SEL1_D2S5_POSITION                             0x5
#define _CLC1SEL1_D2S5_SIZE                                 0x1
#define _CLC1SEL1_D2S5_LENGTH                               0x1
#define _CLC1SEL1_D2S5_MASK                                 0x20

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0x1E14);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 01E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
        unsigned LC1D3S5                :1;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0x1E14);
// bitfield macros
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S5_POSN                              0x5
#define _CLC1SEL2_LC1D3S5_POSITION                          0x5
#define _CLC1SEL2_LC1D3S5_SIZE                              0x1
#define _CLC1SEL2_LC1D3S5_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S5_MASK                              0x20
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10
#define _CLC1SEL2_D3S5_POSN                                 0x5
#define _CLC1SEL2_D3S5_POSITION                             0x5
#define _CLC1SEL2_D3S5_SIZE                                 0x1
#define _CLC1SEL2_D3S5_LENGTH                               0x1
#define _CLC1SEL2_D3S5_MASK                                 0x20

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0x1E15);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 01E15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
        unsigned LC1D4S5                :1;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0x1E15);
// bitfield macros
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S5_POSN                              0x5
#define _CLC1SEL3_LC1D4S5_POSITION                          0x5
#define _CLC1SEL3_LC1D4S5_SIZE                              0x1
#define _CLC1SEL3_LC1D4S5_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S5_MASK                              0x20
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10
#define _CLC1SEL3_D4S5_POSN                                 0x5
#define _CLC1SEL3_D4S5_POSITION                             0x5
#define _CLC1SEL3_D4S5_SIZE                                 0x1
#define _CLC1SEL3_D4S5_LENGTH                               0x1
#define _CLC1SEL3_D4S5_MASK                                 0x20

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0x1E16);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 01E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0x1E16);
// bitfield macros
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80
#define _CLC1GLS0_D1N_POSN                                  0x0
#define _CLC1GLS0_D1N_POSITION                              0x0
#define _CLC1GLS0_D1N_SIZE                                  0x1
#define _CLC1GLS0_D1N_LENGTH                                0x1
#define _CLC1GLS0_D1N_MASK                                  0x1
#define _CLC1GLS0_D1T_POSN                                  0x1
#define _CLC1GLS0_D1T_POSITION                              0x1
#define _CLC1GLS0_D1T_SIZE                                  0x1
#define _CLC1GLS0_D1T_LENGTH                                0x1
#define _CLC1GLS0_D1T_MASK                                  0x2
#define _CLC1GLS0_D2N_POSN                                  0x2
#define _CLC1GLS0_D2N_POSITION                              0x2
#define _CLC1GLS0_D2N_SIZE                                  0x1
#define _CLC1GLS0_D2N_LENGTH                                0x1
#define _CLC1GLS0_D2N_MASK                                  0x4
#define _CLC1GLS0_D2T_POSN                                  0x3
#define _CLC1GLS0_D2T_POSITION                              0x3
#define _CLC1GLS0_D2T_SIZE                                  0x1
#define _CLC1GLS0_D2T_LENGTH                                0x1
#define _CLC1GLS0_D2T_MASK                                  0x8
#define _CLC1GLS0_D3N_POSN                                  0x4
#define _CLC1GLS0_D3N_POSITION                              0x4
#define _CLC1GLS0_D3N_SIZE                                  0x1
#define _CLC1GLS0_D3N_LENGTH                                0x1
#define _CLC1GLS0_D3N_MASK                                  0x10
#define _CLC1GLS0_D3T_POSN                                  0x5
#define _CLC1GLS0_D3T_POSITION                              0x5
#define _CLC1GLS0_D3T_SIZE                                  0x1
#define _CLC1GLS0_D3T_LENGTH                                0x1
#define _CLC1GLS0_D3T_MASK                                  0x20
#define _CLC1GLS0_D4N_POSN                                  0x6
#define _CLC1GLS0_D4N_POSITION                              0x6
#define _CLC1GLS0_D4N_SIZE                                  0x1
#define _CLC1GLS0_D4N_LENGTH                                0x1
#define _CLC1GLS0_D4N_MASK                                  0x40
#define _CLC1GLS0_D4T_POSN                                  0x7
#define _CLC1GLS0_D4T_POSITION                              0x7
#define _CLC1GLS0_D4T_SIZE                                  0x1
#define _CLC1GLS0_D4T_LENGTH                                0x1
#define _CLC1GLS0_D4T_MASK                                  0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0x1E17);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 01E17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0x1E17);
// bitfield macros
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80
#define _CLC1GLS1_D1N_POSN                                  0x0
#define _CLC1GLS1_D1N_POSITION                              0x0
#define _CLC1GLS1_D1N_SIZE                                  0x1
#define _CLC1GLS1_D1N_LENGTH                                0x1
#define _CLC1GLS1_D1N_MASK                                  0x1
#define _CLC1GLS1_D1T_POSN                                  0x1
#define _CLC1GLS1_D1T_POSITION                              0x1
#define _CLC1GLS1_D1T_SIZE                                  0x1
#define _CLC1GLS1_D1T_LENGTH                                0x1
#define _CLC1GLS1_D1T_MASK                                  0x2
#define _CLC1GLS1_D2N_POSN                                  0x2
#define _CLC1GLS1_D2N_POSITION                              0x2
#define _CLC1GLS1_D2N_SIZE                                  0x1
#define _CLC1GLS1_D2N_LENGTH                                0x1
#define _CLC1GLS1_D2N_MASK                                  0x4
#define _CLC1GLS1_D2T_POSN                                  0x3
#define _CLC1GLS1_D2T_POSITION                              0x3
#define _CLC1GLS1_D2T_SIZE                                  0x1
#define _CLC1GLS1_D2T_LENGTH                                0x1
#define _CLC1GLS1_D2T_MASK                                  0x8
#define _CLC1GLS1_D3N_POSN                                  0x4
#define _CLC1GLS1_D3N_POSITION                              0x4
#define _CLC1GLS1_D3N_SIZE                                  0x1
#define _CLC1GLS1_D3N_LENGTH                                0x1
#define _CLC1GLS1_D3N_MASK                                  0x10
#define _CLC1GLS1_D3T_POSN                                  0x5
#define _CLC1GLS1_D3T_POSITION                              0x5
#define _CLC1GLS1_D3T_SIZE                                  0x1
#define _CLC1GLS1_D3T_LENGTH                                0x1
#define _CLC1GLS1_D3T_MASK                                  0x20
#define _CLC1GLS1_D4N_POSN                                  0x6
#define _CLC1GLS1_D4N_POSITION                              0x6
#define _CLC1GLS1_D4N_SIZE                                  0x1
#define _CLC1GLS1_D4N_LENGTH                                0x1
#define _CLC1GLS1_D4N_MASK                                  0x40
#define _CLC1GLS1_D4T_POSN                                  0x7
#define _CLC1GLS1_D4T_POSITION                              0x7
#define _CLC1GLS1_D4T_SIZE                                  0x1
#define _CLC1GLS1_D4T_LENGTH                                0x1
#define _CLC1GLS1_D4T_MASK                                  0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0x1E18);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 01E18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0x1E18);
// bitfield macros
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80
#define _CLC1GLS2_D1N_POSN                                  0x0
#define _CLC1GLS2_D1N_POSITION                              0x0
#define _CLC1GLS2_D1N_SIZE                                  0x1
#define _CLC1GLS2_D1N_LENGTH                                0x1
#define _CLC1GLS2_D1N_MASK                                  0x1
#define _CLC1GLS2_D1T_POSN                                  0x1
#define _CLC1GLS2_D1T_POSITION                              0x1
#define _CLC1GLS2_D1T_SIZE                                  0x1
#define _CLC1GLS2_D1T_LENGTH                                0x1
#define _CLC1GLS2_D1T_MASK                                  0x2
#define _CLC1GLS2_D2N_POSN                                  0x2
#define _CLC1GLS2_D2N_POSITION                              0x2
#define _CLC1GLS2_D2N_SIZE                                  0x1
#define _CLC1GLS2_D2N_LENGTH                                0x1
#define _CLC1GLS2_D2N_MASK                                  0x4
#define _CLC1GLS2_D2T_POSN                                  0x3
#define _CLC1GLS2_D2T_POSITION                              0x3
#define _CLC1GLS2_D2T_SIZE                                  0x1
#define _CLC1GLS2_D2T_LENGTH                                0x1
#define _CLC1GLS2_D2T_MASK                                  0x8
#define _CLC1GLS2_D3N_POSN                                  0x4
#define _CLC1GLS2_D3N_POSITION                              0x4
#define _CLC1GLS2_D3N_SIZE                                  0x1
#define _CLC1GLS2_D3N_LENGTH                                0x1
#define _CLC1GLS2_D3N_MASK                                  0x10
#define _CLC1GLS2_D3T_POSN                                  0x5
#define _CLC1GLS2_D3T_POSITION                              0x5
#define _CLC1GLS2_D3T_SIZE                                  0x1
#define _CLC1GLS2_D3T_LENGTH                                0x1
#define _CLC1GLS2_D3T_MASK                                  0x20
#define _CLC1GLS2_D4N_POSN                                  0x6
#define _CLC1GLS2_D4N_POSITION                              0x6
#define _CLC1GLS2_D4N_SIZE                                  0x1
#define _CLC1GLS2_D4N_LENGTH                                0x1
#define _CLC1GLS2_D4N_MASK                                  0x40
#define _CLC1GLS2_D4T_POSN                                  0x7
#define _CLC1GLS2_D4T_POSITION                              0x7
#define _CLC1GLS2_D4T_SIZE                                  0x1
#define _CLC1GLS2_D4T_LENGTH                                0x1
#define _CLC1GLS2_D4T_MASK                                  0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0x1E19);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 01E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0x1E19);
// bitfield macros
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0x1E1A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 01E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned                        :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0x1E1A);
// bitfield macros
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0x1E1B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 01E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0x1E1B);
// bitfield macros
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0x1E1C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 01E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
        unsigned LC2D1S5                :1;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0x1E1C);
// bitfield macros
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S5_POSN                              0x5
#define _CLC2SEL0_LC2D1S5_POSITION                          0x5
#define _CLC2SEL0_LC2D1S5_SIZE                              0x1
#define _CLC2SEL0_LC2D1S5_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S5_MASK                              0x20
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10
#define _CLC2SEL0_D1S5_POSN                                 0x5
#define _CLC2SEL0_D1S5_POSITION                             0x5
#define _CLC2SEL0_D1S5_SIZE                                 0x1
#define _CLC2SEL0_D1S5_LENGTH                               0x1
#define _CLC2SEL0_D1S5_MASK                                 0x20

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0x1E1D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 01E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
        unsigned LC2D2S5                :1;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0x1E1D);
// bitfield macros
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S5_POSN                              0x5
#define _CLC2SEL1_LC2D2S5_POSITION                          0x5
#define _CLC2SEL1_LC2D2S5_SIZE                              0x1
#define _CLC2SEL1_LC2D2S5_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S5_MASK                              0x20
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10
#define _CLC2SEL1_D2S5_POSN                                 0x5
#define _CLC2SEL1_D2S5_POSITION                             0x5
#define _CLC2SEL1_D2S5_SIZE                                 0x1
#define _CLC2SEL1_D2S5_LENGTH                               0x1
#define _CLC2SEL1_D2S5_MASK                                 0x20

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0x1E1E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 01E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
        unsigned LC2D3S5                :1;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0x1E1E);
// bitfield macros
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S5_POSN                              0x5
#define _CLC2SEL2_LC2D3S5_POSITION                          0x5
#define _CLC2SEL2_LC2D3S5_SIZE                              0x1
#define _CLC2SEL2_LC2D3S5_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S5_MASK                              0x20
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10
#define _CLC2SEL2_D3S5_POSN                                 0x5
#define _CLC2SEL2_D3S5_POSITION                             0x5
#define _CLC2SEL2_D3S5_SIZE                                 0x1
#define _CLC2SEL2_D3S5_LENGTH                               0x1
#define _CLC2SEL2_D3S5_MASK                                 0x20

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0x1E1F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 01E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
        unsigned LC2D4S5                :1;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0x1E1F);
// bitfield macros
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S5_POSN                              0x5
#define _CLC2SEL3_LC2D4S5_POSITION                          0x5
#define _CLC2SEL3_LC2D4S5_SIZE                              0x1
#define _CLC2SEL3_LC2D4S5_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S5_MASK                              0x20
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10
#define _CLC2SEL3_D4S5_POSN                                 0x5
#define _CLC2SEL3_D4S5_POSITION                             0x5
#define _CLC2SEL3_D4S5_SIZE                                 0x1
#define _CLC2SEL3_D4S5_LENGTH                               0x1
#define _CLC2SEL3_D4S5_MASK                                 0x20

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0x1E20);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 01E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0x1E20);
// bitfield macros
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80
#define _CLC2GLS0_D1N_POSN                                  0x0
#define _CLC2GLS0_D1N_POSITION                              0x0
#define _CLC2GLS0_D1N_SIZE                                  0x1
#define _CLC2GLS0_D1N_LENGTH                                0x1
#define _CLC2GLS0_D1N_MASK                                  0x1
#define _CLC2GLS0_D1T_POSN                                  0x1
#define _CLC2GLS0_D1T_POSITION                              0x1
#define _CLC2GLS0_D1T_SIZE                                  0x1
#define _CLC2GLS0_D1T_LENGTH                                0x1
#define _CLC2GLS0_D1T_MASK                                  0x2
#define _CLC2GLS0_D2N_POSN                                  0x2
#define _CLC2GLS0_D2N_POSITION                              0x2
#define _CLC2GLS0_D2N_SIZE                                  0x1
#define _CLC2GLS0_D2N_LENGTH                                0x1
#define _CLC2GLS0_D2N_MASK                                  0x4
#define _CLC2GLS0_D2T_POSN                                  0x3
#define _CLC2GLS0_D2T_POSITION                              0x3
#define _CLC2GLS0_D2T_SIZE                                  0x1
#define _CLC2GLS0_D2T_LENGTH                                0x1
#define _CLC2GLS0_D2T_MASK                                  0x8
#define _CLC2GLS0_D3N_POSN                                  0x4
#define _CLC2GLS0_D3N_POSITION                              0x4
#define _CLC2GLS0_D3N_SIZE                                  0x1
#define _CLC2GLS0_D3N_LENGTH                                0x1
#define _CLC2GLS0_D3N_MASK                                  0x10
#define _CLC2GLS0_D3T_POSN                                  0x5
#define _CLC2GLS0_D3T_POSITION                              0x5
#define _CLC2GLS0_D3T_SIZE                                  0x1
#define _CLC2GLS0_D3T_LENGTH                                0x1
#define _CLC2GLS0_D3T_MASK                                  0x20
#define _CLC2GLS0_D4N_POSN                                  0x6
#define _CLC2GLS0_D4N_POSITION                              0x6
#define _CLC2GLS0_D4N_SIZE                                  0x1
#define _CLC2GLS0_D4N_LENGTH                                0x1
#define _CLC2GLS0_D4N_MASK                                  0x40
#define _CLC2GLS0_D4T_POSN                                  0x7
#define _CLC2GLS0_D4T_POSITION                              0x7
#define _CLC2GLS0_D4T_SIZE                                  0x1
#define _CLC2GLS0_D4T_LENGTH                                0x1
#define _CLC2GLS0_D4T_MASK                                  0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0x1E21);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 01E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0x1E21);
// bitfield macros
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80
#define _CLC2GLS1_D1N_POSN                                  0x0
#define _CLC2GLS1_D1N_POSITION                              0x0
#define _CLC2GLS1_D1N_SIZE                                  0x1
#define _CLC2GLS1_D1N_LENGTH                                0x1
#define _CLC2GLS1_D1N_MASK                                  0x1
#define _CLC2GLS1_D1T_POSN                                  0x1
#define _CLC2GLS1_D1T_POSITION                              0x1
#define _CLC2GLS1_D1T_SIZE                                  0x1
#define _CLC2GLS1_D1T_LENGTH                                0x1
#define _CLC2GLS1_D1T_MASK                                  0x2
#define _CLC2GLS1_D2N_POSN                                  0x2
#define _CLC2GLS1_D2N_POSITION                              0x2
#define _CLC2GLS1_D2N_SIZE                                  0x1
#define _CLC2GLS1_D2N_LENGTH                                0x1
#define _CLC2GLS1_D2N_MASK                                  0x4
#define _CLC2GLS1_D2T_POSN                                  0x3
#define _CLC2GLS1_D2T_POSITION                              0x3
#define _CLC2GLS1_D2T_SIZE                                  0x1
#define _CLC2GLS1_D2T_LENGTH                                0x1
#define _CLC2GLS1_D2T_MASK                                  0x8
#define _CLC2GLS1_D3N_POSN                                  0x4
#define _CLC2GLS1_D3N_POSITION                              0x4
#define _CLC2GLS1_D3N_SIZE                                  0x1
#define _CLC2GLS1_D3N_LENGTH                                0x1
#define _CLC2GLS1_D3N_MASK                                  0x10
#define _CLC2GLS1_D3T_POSN                                  0x5
#define _CLC2GLS1_D3T_POSITION                              0x5
#define _CLC2GLS1_D3T_SIZE                                  0x1
#define _CLC2GLS1_D3T_LENGTH                                0x1
#define _CLC2GLS1_D3T_MASK                                  0x20
#define _CLC2GLS1_D4N_POSN                                  0x6
#define _CLC2GLS1_D4N_POSITION                              0x6
#define _CLC2GLS1_D4N_SIZE                                  0x1
#define _CLC2GLS1_D4N_LENGTH                                0x1
#define _CLC2GLS1_D4N_MASK                                  0x40
#define _CLC2GLS1_D4T_POSN                                  0x7
#define _CLC2GLS1_D4T_POSITION                              0x7
#define _CLC2GLS1_D4T_SIZE                                  0x1
#define _CLC2GLS1_D4T_LENGTH                                0x1
#define _CLC2GLS1_D4T_MASK                                  0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0x1E22);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 01E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0x1E22);
// bitfield macros
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80
#define _CLC2GLS2_D1N_POSN                                  0x0
#define _CLC2GLS2_D1N_POSITION                              0x0
#define _CLC2GLS2_D1N_SIZE                                  0x1
#define _CLC2GLS2_D1N_LENGTH                                0x1
#define _CLC2GLS2_D1N_MASK                                  0x1
#define _CLC2GLS2_D1T_POSN                                  0x1
#define _CLC2GLS2_D1T_POSITION                              0x1
#define _CLC2GLS2_D1T_SIZE                                  0x1
#define _CLC2GLS2_D1T_LENGTH                                0x1
#define _CLC2GLS2_D1T_MASK                                  0x2
#define _CLC2GLS2_D2N_POSN                                  0x2
#define _CLC2GLS2_D2N_POSITION                              0x2
#define _CLC2GLS2_D2N_SIZE                                  0x1
#define _CLC2GLS2_D2N_LENGTH                                0x1
#define _CLC2GLS2_D2N_MASK                                  0x4
#define _CLC2GLS2_D2T_POSN                                  0x3
#define _CLC2GLS2_D2T_POSITION                              0x3
#define _CLC2GLS2_D2T_SIZE                                  0x1
#define _CLC2GLS2_D2T_LENGTH                                0x1
#define _CLC2GLS2_D2T_MASK                                  0x8
#define _CLC2GLS2_D3N_POSN                                  0x4
#define _CLC2GLS2_D3N_POSITION                              0x4
#define _CLC2GLS2_D3N_SIZE                                  0x1
#define _CLC2GLS2_D3N_LENGTH                                0x1
#define _CLC2GLS2_D3N_MASK                                  0x10
#define _CLC2GLS2_D3T_POSN                                  0x5
#define _CLC2GLS2_D3T_POSITION                              0x5
#define _CLC2GLS2_D3T_SIZE                                  0x1
#define _CLC2GLS2_D3T_LENGTH                                0x1
#define _CLC2GLS2_D3T_MASK                                  0x20
#define _CLC2GLS2_D4N_POSN                                  0x6
#define _CLC2GLS2_D4N_POSITION                              0x6
#define _CLC2GLS2_D4N_SIZE                                  0x1
#define _CLC2GLS2_D4N_LENGTH                                0x1
#define _CLC2GLS2_D4N_MASK                                  0x40
#define _CLC2GLS2_D4T_POSN                                  0x7
#define _CLC2GLS2_D4T_POSITION                              0x7
#define _CLC2GLS2_D4T_SIZE                                  0x1
#define _CLC2GLS2_D4T_LENGTH                                0x1
#define _CLC2GLS2_D4T_MASK                                  0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0x1E23);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 01E23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0x1E23);
// bitfield macros
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80

// Register: CLC3CON
#define CLC3CON CLC3CON
extern volatile unsigned char           CLC3CON             __at(0x1E24);
#ifndef _LIB_BUILD
asm("CLC3CON equ 01E24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3MODE                :3;
        unsigned LC3INTN                :1;
        unsigned LC3INTP                :1;
        unsigned LC3OUT                 :1;
        unsigned                        :1;
        unsigned LC3EN                  :1;
    };
    struct {
        unsigned LC3MODE0               :1;
        unsigned LC3MODE1               :1;
        unsigned LC3MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC3CONbits_t;
extern volatile CLC3CONbits_t CLC3CONbits __at(0x1E24);
// bitfield macros
#define _CLC3CON_LC3MODE_POSN                               0x0
#define _CLC3CON_LC3MODE_POSITION                           0x0
#define _CLC3CON_LC3MODE_SIZE                               0x3
#define _CLC3CON_LC3MODE_LENGTH                             0x3
#define _CLC3CON_LC3MODE_MASK                               0x7
#define _CLC3CON_LC3INTN_POSN                               0x3
#define _CLC3CON_LC3INTN_POSITION                           0x3
#define _CLC3CON_LC3INTN_SIZE                               0x1
#define _CLC3CON_LC3INTN_LENGTH                             0x1
#define _CLC3CON_LC3INTN_MASK                               0x8
#define _CLC3CON_LC3INTP_POSN                               0x4
#define _CLC3CON_LC3INTP_POSITION                           0x4
#define _CLC3CON_LC3INTP_SIZE                               0x1
#define _CLC3CON_LC3INTP_LENGTH                             0x1
#define _CLC3CON_LC3INTP_MASK                               0x10
#define _CLC3CON_LC3OUT_POSN                                0x5
#define _CLC3CON_LC3OUT_POSITION                            0x5
#define _CLC3CON_LC3OUT_SIZE                                0x1
#define _CLC3CON_LC3OUT_LENGTH                              0x1
#define _CLC3CON_LC3OUT_MASK                                0x20
#define _CLC3CON_LC3EN_POSN                                 0x7
#define _CLC3CON_LC3EN_POSITION                             0x7
#define _CLC3CON_LC3EN_SIZE                                 0x1
#define _CLC3CON_LC3EN_LENGTH                               0x1
#define _CLC3CON_LC3EN_MASK                                 0x80
#define _CLC3CON_LC3MODE0_POSN                              0x0
#define _CLC3CON_LC3MODE0_POSITION                          0x0
#define _CLC3CON_LC3MODE0_SIZE                              0x1
#define _CLC3CON_LC3MODE0_LENGTH                            0x1
#define _CLC3CON_LC3MODE0_MASK                              0x1
#define _CLC3CON_LC3MODE1_POSN                              0x1
#define _CLC3CON_LC3MODE1_POSITION                          0x1
#define _CLC3CON_LC3MODE1_SIZE                              0x1
#define _CLC3CON_LC3MODE1_LENGTH                            0x1
#define _CLC3CON_LC3MODE1_MASK                              0x2
#define _CLC3CON_LC3MODE2_POSN                              0x2
#define _CLC3CON_LC3MODE2_POSITION                          0x2
#define _CLC3CON_LC3MODE2_SIZE                              0x1
#define _CLC3CON_LC3MODE2_LENGTH                            0x1
#define _CLC3CON_LC3MODE2_MASK                              0x4
#define _CLC3CON_MODE_POSN                                  0x0
#define _CLC3CON_MODE_POSITION                              0x0
#define _CLC3CON_MODE_SIZE                                  0x3
#define _CLC3CON_MODE_LENGTH                                0x3
#define _CLC3CON_MODE_MASK                                  0x7
#define _CLC3CON_INTN_POSN                                  0x3
#define _CLC3CON_INTN_POSITION                              0x3
#define _CLC3CON_INTN_SIZE                                  0x1
#define _CLC3CON_INTN_LENGTH                                0x1
#define _CLC3CON_INTN_MASK                                  0x8
#define _CLC3CON_INTP_POSN                                  0x4
#define _CLC3CON_INTP_POSITION                              0x4
#define _CLC3CON_INTP_SIZE                                  0x1
#define _CLC3CON_INTP_LENGTH                                0x1
#define _CLC3CON_INTP_MASK                                  0x10
#define _CLC3CON_OUT_POSN                                   0x5
#define _CLC3CON_OUT_POSITION                               0x5
#define _CLC3CON_OUT_SIZE                                   0x1
#define _CLC3CON_OUT_LENGTH                                 0x1
#define _CLC3CON_OUT_MASK                                   0x20
#define _CLC3CON_EN_POSN                                    0x7
#define _CLC3CON_EN_POSITION                                0x7
#define _CLC3CON_EN_SIZE                                    0x1
#define _CLC3CON_EN_LENGTH                                  0x1
#define _CLC3CON_EN_MASK                                    0x80
#define _CLC3CON_MODE0_POSN                                 0x0
#define _CLC3CON_MODE0_POSITION                             0x0
#define _CLC3CON_MODE0_SIZE                                 0x1
#define _CLC3CON_MODE0_LENGTH                               0x1
#define _CLC3CON_MODE0_MASK                                 0x1
#define _CLC3CON_MODE1_POSN                                 0x1
#define _CLC3CON_MODE1_POSITION                             0x1
#define _CLC3CON_MODE1_SIZE                                 0x1
#define _CLC3CON_MODE1_LENGTH                               0x1
#define _CLC3CON_MODE1_MASK                                 0x2
#define _CLC3CON_MODE2_POSN                                 0x2
#define _CLC3CON_MODE2_POSITION                             0x2
#define _CLC3CON_MODE2_SIZE                                 0x1
#define _CLC3CON_MODE2_LENGTH                               0x1
#define _CLC3CON_MODE2_MASK                                 0x4

// Register: CLC3POL
#define CLC3POL CLC3POL
extern volatile unsigned char           CLC3POL             __at(0x1E25);
#ifndef _LIB_BUILD
asm("CLC3POL equ 01E25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1POL               :1;
        unsigned LC3G2POL               :1;
        unsigned LC3G3POL               :1;
        unsigned LC3G4POL               :1;
        unsigned                        :3;
        unsigned LC3POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC3POLbits_t;
extern volatile CLC3POLbits_t CLC3POLbits __at(0x1E25);
// bitfield macros
#define _CLC3POL_LC3G1POL_POSN                              0x0
#define _CLC3POL_LC3G1POL_POSITION                          0x0
#define _CLC3POL_LC3G1POL_SIZE                              0x1
#define _CLC3POL_LC3G1POL_LENGTH                            0x1
#define _CLC3POL_LC3G1POL_MASK                              0x1
#define _CLC3POL_LC3G2POL_POSN                              0x1
#define _CLC3POL_LC3G2POL_POSITION                          0x1
#define _CLC3POL_LC3G2POL_SIZE                              0x1
#define _CLC3POL_LC3G2POL_LENGTH                            0x1
#define _CLC3POL_LC3G2POL_MASK                              0x2
#define _CLC3POL_LC3G3POL_POSN                              0x2
#define _CLC3POL_LC3G3POL_POSITION                          0x2
#define _CLC3POL_LC3G3POL_SIZE                              0x1
#define _CLC3POL_LC3G3POL_LENGTH                            0x1
#define _CLC3POL_LC3G3POL_MASK                              0x4
#define _CLC3POL_LC3G4POL_POSN                              0x3
#define _CLC3POL_LC3G4POL_POSITION                          0x3
#define _CLC3POL_LC3G4POL_SIZE                              0x1
#define _CLC3POL_LC3G4POL_LENGTH                            0x1
#define _CLC3POL_LC3G4POL_MASK                              0x8
#define _CLC3POL_LC3POL_POSN                                0x7
#define _CLC3POL_LC3POL_POSITION                            0x7
#define _CLC3POL_LC3POL_SIZE                                0x1
#define _CLC3POL_LC3POL_LENGTH                              0x1
#define _CLC3POL_LC3POL_MASK                                0x80
#define _CLC3POL_G1POL_POSN                                 0x0
#define _CLC3POL_G1POL_POSITION                             0x0
#define _CLC3POL_G1POL_SIZE                                 0x1
#define _CLC3POL_G1POL_LENGTH                               0x1
#define _CLC3POL_G1POL_MASK                                 0x1
#define _CLC3POL_G2POL_POSN                                 0x1
#define _CLC3POL_G2POL_POSITION                             0x1
#define _CLC3POL_G2POL_SIZE                                 0x1
#define _CLC3POL_G2POL_LENGTH                               0x1
#define _CLC3POL_G2POL_MASK                                 0x2
#define _CLC3POL_G3POL_POSN                                 0x2
#define _CLC3POL_G3POL_POSITION                             0x2
#define _CLC3POL_G3POL_SIZE                                 0x1
#define _CLC3POL_G3POL_LENGTH                               0x1
#define _CLC3POL_G3POL_MASK                                 0x4
#define _CLC3POL_G4POL_POSN                                 0x3
#define _CLC3POL_G4POL_POSITION                             0x3
#define _CLC3POL_G4POL_SIZE                                 0x1
#define _CLC3POL_G4POL_LENGTH                               0x1
#define _CLC3POL_G4POL_MASK                                 0x8
#define _CLC3POL_POL_POSN                                   0x7
#define _CLC3POL_POL_POSITION                               0x7
#define _CLC3POL_POL_SIZE                                   0x1
#define _CLC3POL_POL_LENGTH                                 0x1
#define _CLC3POL_POL_MASK                                   0x80

// Register: CLC3SEL0
#define CLC3SEL0 CLC3SEL0
extern volatile unsigned char           CLC3SEL0            __at(0x1E26);
#ifndef _LIB_BUILD
asm("CLC3SEL0 equ 01E26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D1S0                :1;
        unsigned LC3D1S1                :1;
        unsigned LC3D1S2                :1;
        unsigned LC3D1S3                :1;
        unsigned LC3D1S4                :1;
        unsigned LC3D1S5                :1;
    };
    struct {
        unsigned LC3D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC3SEL0bits_t;
extern volatile CLC3SEL0bits_t CLC3SEL0bits __at(0x1E26);
// bitfield macros
#define _CLC3SEL0_LC3D1S0_POSN                              0x0
#define _CLC3SEL0_LC3D1S0_POSITION                          0x0
#define _CLC3SEL0_LC3D1S0_SIZE                              0x1
#define _CLC3SEL0_LC3D1S0_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S0_MASK                              0x1
#define _CLC3SEL0_LC3D1S1_POSN                              0x1
#define _CLC3SEL0_LC3D1S1_POSITION                          0x1
#define _CLC3SEL0_LC3D1S1_SIZE                              0x1
#define _CLC3SEL0_LC3D1S1_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S1_MASK                              0x2
#define _CLC3SEL0_LC3D1S2_POSN                              0x2
#define _CLC3SEL0_LC3D1S2_POSITION                          0x2
#define _CLC3SEL0_LC3D1S2_SIZE                              0x1
#define _CLC3SEL0_LC3D1S2_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S2_MASK                              0x4
#define _CLC3SEL0_LC3D1S3_POSN                              0x3
#define _CLC3SEL0_LC3D1S3_POSITION                          0x3
#define _CLC3SEL0_LC3D1S3_SIZE                              0x1
#define _CLC3SEL0_LC3D1S3_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S3_MASK                              0x8
#define _CLC3SEL0_LC3D1S4_POSN                              0x4
#define _CLC3SEL0_LC3D1S4_POSITION                          0x4
#define _CLC3SEL0_LC3D1S4_SIZE                              0x1
#define _CLC3SEL0_LC3D1S4_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S4_MASK                              0x10
#define _CLC3SEL0_LC3D1S5_POSN                              0x5
#define _CLC3SEL0_LC3D1S5_POSITION                          0x5
#define _CLC3SEL0_LC3D1S5_SIZE                              0x1
#define _CLC3SEL0_LC3D1S5_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S5_MASK                              0x20
#define _CLC3SEL0_LC3D1S_POSN                               0x0
#define _CLC3SEL0_LC3D1S_POSITION                           0x0
#define _CLC3SEL0_LC3D1S_SIZE                               0x8
#define _CLC3SEL0_LC3D1S_LENGTH                             0x8
#define _CLC3SEL0_LC3D1S_MASK                               0xFF
#define _CLC3SEL0_D1S_POSN                                  0x0
#define _CLC3SEL0_D1S_POSITION                              0x0
#define _CLC3SEL0_D1S_SIZE                                  0x8
#define _CLC3SEL0_D1S_LENGTH                                0x8
#define _CLC3SEL0_D1S_MASK                                  0xFF
#define _CLC3SEL0_D1S0_POSN                                 0x0
#define _CLC3SEL0_D1S0_POSITION                             0x0
#define _CLC3SEL0_D1S0_SIZE                                 0x1
#define _CLC3SEL0_D1S0_LENGTH                               0x1
#define _CLC3SEL0_D1S0_MASK                                 0x1
#define _CLC3SEL0_D1S1_POSN                                 0x1
#define _CLC3SEL0_D1S1_POSITION                             0x1
#define _CLC3SEL0_D1S1_SIZE                                 0x1
#define _CLC3SEL0_D1S1_LENGTH                               0x1
#define _CLC3SEL0_D1S1_MASK                                 0x2
#define _CLC3SEL0_D1S2_POSN                                 0x2
#define _CLC3SEL0_D1S2_POSITION                             0x2
#define _CLC3SEL0_D1S2_SIZE                                 0x1
#define _CLC3SEL0_D1S2_LENGTH                               0x1
#define _CLC3SEL0_D1S2_MASK                                 0x4
#define _CLC3SEL0_D1S3_POSN                                 0x3
#define _CLC3SEL0_D1S3_POSITION                             0x3
#define _CLC3SEL0_D1S3_SIZE                                 0x1
#define _CLC3SEL0_D1S3_LENGTH                               0x1
#define _CLC3SEL0_D1S3_MASK                                 0x8
#define _CLC3SEL0_D1S4_POSN                                 0x4
#define _CLC3SEL0_D1S4_POSITION                             0x4
#define _CLC3SEL0_D1S4_SIZE                                 0x1
#define _CLC3SEL0_D1S4_LENGTH                               0x1
#define _CLC3SEL0_D1S4_MASK                                 0x10
#define _CLC3SEL0_D1S5_POSN                                 0x5
#define _CLC3SEL0_D1S5_POSITION                             0x5
#define _CLC3SEL0_D1S5_SIZE                                 0x1
#define _CLC3SEL0_D1S5_LENGTH                               0x1
#define _CLC3SEL0_D1S5_MASK                                 0x20

// Register: CLC3SEL1
#define CLC3SEL1 CLC3SEL1
extern volatile unsigned char           CLC3SEL1            __at(0x1E27);
#ifndef _LIB_BUILD
asm("CLC3SEL1 equ 01E27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D2S0                :1;
        unsigned LC3D2S1                :1;
        unsigned LC3D2S2                :1;
        unsigned LC3D2S3                :1;
        unsigned LC3D2S4                :1;
        unsigned LC3D2S5                :1;
    };
    struct {
        unsigned LC3D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC3SEL1bits_t;
extern volatile CLC3SEL1bits_t CLC3SEL1bits __at(0x1E27);
// bitfield macros
#define _CLC3SEL1_LC3D2S0_POSN                              0x0
#define _CLC3SEL1_LC3D2S0_POSITION                          0x0
#define _CLC3SEL1_LC3D2S0_SIZE                              0x1
#define _CLC3SEL1_LC3D2S0_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S0_MASK                              0x1
#define _CLC3SEL1_LC3D2S1_POSN                              0x1
#define _CLC3SEL1_LC3D2S1_POSITION                          0x1
#define _CLC3SEL1_LC3D2S1_SIZE                              0x1
#define _CLC3SEL1_LC3D2S1_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S1_MASK                              0x2
#define _CLC3SEL1_LC3D2S2_POSN                              0x2
#define _CLC3SEL1_LC3D2S2_POSITION                          0x2
#define _CLC3SEL1_LC3D2S2_SIZE                              0x1
#define _CLC3SEL1_LC3D2S2_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S2_MASK                              0x4
#define _CLC3SEL1_LC3D2S3_POSN                              0x3
#define _CLC3SEL1_LC3D2S3_POSITION                          0x3
#define _CLC3SEL1_LC3D2S3_SIZE                              0x1
#define _CLC3SEL1_LC3D2S3_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S3_MASK                              0x8
#define _CLC3SEL1_LC3D2S4_POSN                              0x4
#define _CLC3SEL1_LC3D2S4_POSITION                          0x4
#define _CLC3SEL1_LC3D2S4_SIZE                              0x1
#define _CLC3SEL1_LC3D2S4_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S4_MASK                              0x10
#define _CLC3SEL1_LC3D2S5_POSN                              0x5
#define _CLC3SEL1_LC3D2S5_POSITION                          0x5
#define _CLC3SEL1_LC3D2S5_SIZE                              0x1
#define _CLC3SEL1_LC3D2S5_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S5_MASK                              0x20
#define _CLC3SEL1_LC3D2S_POSN                               0x0
#define _CLC3SEL1_LC3D2S_POSITION                           0x0
#define _CLC3SEL1_LC3D2S_SIZE                               0x8
#define _CLC3SEL1_LC3D2S_LENGTH                             0x8
#define _CLC3SEL1_LC3D2S_MASK                               0xFF
#define _CLC3SEL1_D2S_POSN                                  0x0
#define _CLC3SEL1_D2S_POSITION                              0x0
#define _CLC3SEL1_D2S_SIZE                                  0x8
#define _CLC3SEL1_D2S_LENGTH                                0x8
#define _CLC3SEL1_D2S_MASK                                  0xFF
#define _CLC3SEL1_D2S0_POSN                                 0x0
#define _CLC3SEL1_D2S0_POSITION                             0x0
#define _CLC3SEL1_D2S0_SIZE                                 0x1
#define _CLC3SEL1_D2S0_LENGTH                               0x1
#define _CLC3SEL1_D2S0_MASK                                 0x1
#define _CLC3SEL1_D2S1_POSN                                 0x1
#define _CLC3SEL1_D2S1_POSITION                             0x1
#define _CLC3SEL1_D2S1_SIZE                                 0x1
#define _CLC3SEL1_D2S1_LENGTH                               0x1
#define _CLC3SEL1_D2S1_MASK                                 0x2
#define _CLC3SEL1_D2S2_POSN                                 0x2
#define _CLC3SEL1_D2S2_POSITION                             0x2
#define _CLC3SEL1_D2S2_SIZE                                 0x1
#define _CLC3SEL1_D2S2_LENGTH                               0x1
#define _CLC3SEL1_D2S2_MASK                                 0x4
#define _CLC3SEL1_D2S3_POSN                                 0x3
#define _CLC3SEL1_D2S3_POSITION                             0x3
#define _CLC3SEL1_D2S3_SIZE                                 0x1
#define _CLC3SEL1_D2S3_LENGTH                               0x1
#define _CLC3SEL1_D2S3_MASK                                 0x8
#define _CLC3SEL1_D2S4_POSN                                 0x4
#define _CLC3SEL1_D2S4_POSITION                             0x4
#define _CLC3SEL1_D2S4_SIZE                                 0x1
#define _CLC3SEL1_D2S4_LENGTH                               0x1
#define _CLC3SEL1_D2S4_MASK                                 0x10
#define _CLC3SEL1_D2S5_POSN                                 0x5
#define _CLC3SEL1_D2S5_POSITION                             0x5
#define _CLC3SEL1_D2S5_SIZE                                 0x1
#define _CLC3SEL1_D2S5_LENGTH                               0x1
#define _CLC3SEL1_D2S5_MASK                                 0x20

// Register: CLC3SEL2
#define CLC3SEL2 CLC3SEL2
extern volatile unsigned char           CLC3SEL2            __at(0x1E28);
#ifndef _LIB_BUILD
asm("CLC3SEL2 equ 01E28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D3S0                :1;
        unsigned LC3D3S1                :1;
        unsigned LC3D3S2                :1;
        unsigned LC3D3S3                :1;
        unsigned LC3D3S4                :1;
        unsigned LC3D3S5                :1;
    };
    struct {
        unsigned LC3D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC3SEL2bits_t;
extern volatile CLC3SEL2bits_t CLC3SEL2bits __at(0x1E28);
// bitfield macros
#define _CLC3SEL2_LC3D3S0_POSN                              0x0
#define _CLC3SEL2_LC3D3S0_POSITION                          0x0
#define _CLC3SEL2_LC3D3S0_SIZE                              0x1
#define _CLC3SEL2_LC3D3S0_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S0_MASK                              0x1
#define _CLC3SEL2_LC3D3S1_POSN                              0x1
#define _CLC3SEL2_LC3D3S1_POSITION                          0x1
#define _CLC3SEL2_LC3D3S1_SIZE                              0x1
#define _CLC3SEL2_LC3D3S1_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S1_MASK                              0x2
#define _CLC3SEL2_LC3D3S2_POSN                              0x2
#define _CLC3SEL2_LC3D3S2_POSITION                          0x2
#define _CLC3SEL2_LC3D3S2_SIZE                              0x1
#define _CLC3SEL2_LC3D3S2_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S2_MASK                              0x4
#define _CLC3SEL2_LC3D3S3_POSN                              0x3
#define _CLC3SEL2_LC3D3S3_POSITION                          0x3
#define _CLC3SEL2_LC3D3S3_SIZE                              0x1
#define _CLC3SEL2_LC3D3S3_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S3_MASK                              0x8
#define _CLC3SEL2_LC3D3S4_POSN                              0x4
#define _CLC3SEL2_LC3D3S4_POSITION                          0x4
#define _CLC3SEL2_LC3D3S4_SIZE                              0x1
#define _CLC3SEL2_LC3D3S4_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S4_MASK                              0x10
#define _CLC3SEL2_LC3D3S5_POSN                              0x5
#define _CLC3SEL2_LC3D3S5_POSITION                          0x5
#define _CLC3SEL2_LC3D3S5_SIZE                              0x1
#define _CLC3SEL2_LC3D3S5_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S5_MASK                              0x20
#define _CLC3SEL2_LC3D3S_POSN                               0x0
#define _CLC3SEL2_LC3D3S_POSITION                           0x0
#define _CLC3SEL2_LC3D3S_SIZE                               0x8
#define _CLC3SEL2_LC3D3S_LENGTH                             0x8
#define _CLC3SEL2_LC3D3S_MASK                               0xFF
#define _CLC3SEL2_D3S_POSN                                  0x0
#define _CLC3SEL2_D3S_POSITION                              0x0
#define _CLC3SEL2_D3S_SIZE                                  0x8
#define _CLC3SEL2_D3S_LENGTH                                0x8
#define _CLC3SEL2_D3S_MASK                                  0xFF
#define _CLC3SEL2_D3S0_POSN                                 0x0
#define _CLC3SEL2_D3S0_POSITION                             0x0
#define _CLC3SEL2_D3S0_SIZE                                 0x1
#define _CLC3SEL2_D3S0_LENGTH                               0x1
#define _CLC3SEL2_D3S0_MASK                                 0x1
#define _CLC3SEL2_D3S1_POSN                                 0x1
#define _CLC3SEL2_D3S1_POSITION                             0x1
#define _CLC3SEL2_D3S1_SIZE                                 0x1
#define _CLC3SEL2_D3S1_LENGTH                               0x1
#define _CLC3SEL2_D3S1_MASK                                 0x2
#define _CLC3SEL2_D3S2_POSN                                 0x2
#define _CLC3SEL2_D3S2_POSITION                             0x2
#define _CLC3SEL2_D3S2_SIZE                                 0x1
#define _CLC3SEL2_D3S2_LENGTH                               0x1
#define _CLC3SEL2_D3S2_MASK                                 0x4
#define _CLC3SEL2_D3S3_POSN                                 0x3
#define _CLC3SEL2_D3S3_POSITION                             0x3
#define _CLC3SEL2_D3S3_SIZE                                 0x1
#define _CLC3SEL2_D3S3_LENGTH                               0x1
#define _CLC3SEL2_D3S3_MASK                                 0x8
#define _CLC3SEL2_D3S4_POSN                                 0x4
#define _CLC3SEL2_D3S4_POSITION                             0x4
#define _CLC3SEL2_D3S4_SIZE                                 0x1
#define _CLC3SEL2_D3S4_LENGTH                               0x1
#define _CLC3SEL2_D3S4_MASK                                 0x10
#define _CLC3SEL2_D3S5_POSN                                 0x5
#define _CLC3SEL2_D3S5_POSITION                             0x5
#define _CLC3SEL2_D3S5_SIZE                                 0x1
#define _CLC3SEL2_D3S5_LENGTH                               0x1
#define _CLC3SEL2_D3S5_MASK                                 0x20

// Register: CLC3SEL3
#define CLC3SEL3 CLC3SEL3
extern volatile unsigned char           CLC3SEL3            __at(0x1E29);
#ifndef _LIB_BUILD
asm("CLC3SEL3 equ 01E29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D4S0                :1;
        unsigned LC3D4S1                :1;
        unsigned LC3D4S2                :1;
        unsigned LC3D4S3                :1;
        unsigned LC3D4S4                :1;
        unsigned LC3D4S5                :1;
    };
    struct {
        unsigned LC3D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC3SEL3bits_t;
extern volatile CLC3SEL3bits_t CLC3SEL3bits __at(0x1E29);
// bitfield macros
#define _CLC3SEL3_LC3D4S0_POSN                              0x0
#define _CLC3SEL3_LC3D4S0_POSITION                          0x0
#define _CLC3SEL3_LC3D4S0_SIZE                              0x1
#define _CLC3SEL3_LC3D4S0_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S0_MASK                              0x1
#define _CLC3SEL3_LC3D4S1_POSN                              0x1
#define _CLC3SEL3_LC3D4S1_POSITION                          0x1
#define _CLC3SEL3_LC3D4S1_SIZE                              0x1
#define _CLC3SEL3_LC3D4S1_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S1_MASK                              0x2
#define _CLC3SEL3_LC3D4S2_POSN                              0x2
#define _CLC3SEL3_LC3D4S2_POSITION                          0x2
#define _CLC3SEL3_LC3D4S2_SIZE                              0x1
#define _CLC3SEL3_LC3D4S2_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S2_MASK                              0x4
#define _CLC3SEL3_LC3D4S3_POSN                              0x3
#define _CLC3SEL3_LC3D4S3_POSITION                          0x3
#define _CLC3SEL3_LC3D4S3_SIZE                              0x1
#define _CLC3SEL3_LC3D4S3_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S3_MASK                              0x8
#define _CLC3SEL3_LC3D4S4_POSN                              0x4
#define _CLC3SEL3_LC3D4S4_POSITION                          0x4
#define _CLC3SEL3_LC3D4S4_SIZE                              0x1
#define _CLC3SEL3_LC3D4S4_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S4_MASK                              0x10
#define _CLC3SEL3_LC3D4S5_POSN                              0x5
#define _CLC3SEL3_LC3D4S5_POSITION                          0x5
#define _CLC3SEL3_LC3D4S5_SIZE                              0x1
#define _CLC3SEL3_LC3D4S5_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S5_MASK                              0x20
#define _CLC3SEL3_LC3D4S_POSN                               0x0
#define _CLC3SEL3_LC3D4S_POSITION                           0x0
#define _CLC3SEL3_LC3D4S_SIZE                               0x8
#define _CLC3SEL3_LC3D4S_LENGTH                             0x8
#define _CLC3SEL3_LC3D4S_MASK                               0xFF
#define _CLC3SEL3_D4S_POSN                                  0x0
#define _CLC3SEL3_D4S_POSITION                              0x0
#define _CLC3SEL3_D4S_SIZE                                  0x8
#define _CLC3SEL3_D4S_LENGTH                                0x8
#define _CLC3SEL3_D4S_MASK                                  0xFF
#define _CLC3SEL3_D4S0_POSN                                 0x0
#define _CLC3SEL3_D4S0_POSITION                             0x0
#define _CLC3SEL3_D4S0_SIZE                                 0x1
#define _CLC3SEL3_D4S0_LENGTH                               0x1
#define _CLC3SEL3_D4S0_MASK                                 0x1
#define _CLC3SEL3_D4S1_POSN                                 0x1
#define _CLC3SEL3_D4S1_POSITION                             0x1
#define _CLC3SEL3_D4S1_SIZE                                 0x1
#define _CLC3SEL3_D4S1_LENGTH                               0x1
#define _CLC3SEL3_D4S1_MASK                                 0x2
#define _CLC3SEL3_D4S2_POSN                                 0x2
#define _CLC3SEL3_D4S2_POSITION                             0x2
#define _CLC3SEL3_D4S2_SIZE                                 0x1
#define _CLC3SEL3_D4S2_LENGTH                               0x1
#define _CLC3SEL3_D4S2_MASK                                 0x4
#define _CLC3SEL3_D4S3_POSN                                 0x3
#define _CLC3SEL3_D4S3_POSITION                             0x3
#define _CLC3SEL3_D4S3_SIZE                                 0x1
#define _CLC3SEL3_D4S3_LENGTH                               0x1
#define _CLC3SEL3_D4S3_MASK                                 0x8
#define _CLC3SEL3_D4S4_POSN                                 0x4
#define _CLC3SEL3_D4S4_POSITION                             0x4
#define _CLC3SEL3_D4S4_SIZE                                 0x1
#define _CLC3SEL3_D4S4_LENGTH                               0x1
#define _CLC3SEL3_D4S4_MASK                                 0x10
#define _CLC3SEL3_D4S5_POSN                                 0x5
#define _CLC3SEL3_D4S5_POSITION                             0x5
#define _CLC3SEL3_D4S5_SIZE                                 0x1
#define _CLC3SEL3_D4S5_LENGTH                               0x1
#define _CLC3SEL3_D4S5_MASK                                 0x20

// Register: CLC3GLS0
#define CLC3GLS0 CLC3GLS0
extern volatile unsigned char           CLC3GLS0            __at(0x1E2A);
#ifndef _LIB_BUILD
asm("CLC3GLS0 equ 01E2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1D1N               :1;
        unsigned LC3G1D1T               :1;
        unsigned LC3G1D2N               :1;
        unsigned LC3G1D2T               :1;
        unsigned LC3G1D3N               :1;
        unsigned LC3G1D3T               :1;
        unsigned LC3G1D4N               :1;
        unsigned LC3G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS0bits_t;
extern volatile CLC3GLS0bits_t CLC3GLS0bits __at(0x1E2A);
// bitfield macros
#define _CLC3GLS0_LC3G1D1N_POSN                             0x0
#define _CLC3GLS0_LC3G1D1N_POSITION                         0x0
#define _CLC3GLS0_LC3G1D1N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1N_MASK                             0x1
#define _CLC3GLS0_LC3G1D1T_POSN                             0x1
#define _CLC3GLS0_LC3G1D1T_POSITION                         0x1
#define _CLC3GLS0_LC3G1D1T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1T_MASK                             0x2
#define _CLC3GLS0_LC3G1D2N_POSN                             0x2
#define _CLC3GLS0_LC3G1D2N_POSITION                         0x2
#define _CLC3GLS0_LC3G1D2N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2N_MASK                             0x4
#define _CLC3GLS0_LC3G1D2T_POSN                             0x3
#define _CLC3GLS0_LC3G1D2T_POSITION                         0x3
#define _CLC3GLS0_LC3G1D2T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2T_MASK                             0x8
#define _CLC3GLS0_LC3G1D3N_POSN                             0x4
#define _CLC3GLS0_LC3G1D3N_POSITION                         0x4
#define _CLC3GLS0_LC3G1D3N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3N_MASK                             0x10
#define _CLC3GLS0_LC3G1D3T_POSN                             0x5
#define _CLC3GLS0_LC3G1D3T_POSITION                         0x5
#define _CLC3GLS0_LC3G1D3T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3T_MASK                             0x20
#define _CLC3GLS0_LC3G1D4N_POSN                             0x6
#define _CLC3GLS0_LC3G1D4N_POSITION                         0x6
#define _CLC3GLS0_LC3G1D4N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4N_MASK                             0x40
#define _CLC3GLS0_LC3G1D4T_POSN                             0x7
#define _CLC3GLS0_LC3G1D4T_POSITION                         0x7
#define _CLC3GLS0_LC3G1D4T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4T_MASK                             0x80
#define _CLC3GLS0_D1N_POSN                                  0x0
#define _CLC3GLS0_D1N_POSITION                              0x0
#define _CLC3GLS0_D1N_SIZE                                  0x1
#define _CLC3GLS0_D1N_LENGTH                                0x1
#define _CLC3GLS0_D1N_MASK                                  0x1
#define _CLC3GLS0_D1T_POSN                                  0x1
#define _CLC3GLS0_D1T_POSITION                              0x1
#define _CLC3GLS0_D1T_SIZE                                  0x1
#define _CLC3GLS0_D1T_LENGTH                                0x1
#define _CLC3GLS0_D1T_MASK                                  0x2
#define _CLC3GLS0_D2N_POSN                                  0x2
#define _CLC3GLS0_D2N_POSITION                              0x2
#define _CLC3GLS0_D2N_SIZE                                  0x1
#define _CLC3GLS0_D2N_LENGTH                                0x1
#define _CLC3GLS0_D2N_MASK                                  0x4
#define _CLC3GLS0_D2T_POSN                                  0x3
#define _CLC3GLS0_D2T_POSITION                              0x3
#define _CLC3GLS0_D2T_SIZE                                  0x1
#define _CLC3GLS0_D2T_LENGTH                                0x1
#define _CLC3GLS0_D2T_MASK                                  0x8
#define _CLC3GLS0_D3N_POSN                                  0x4
#define _CLC3GLS0_D3N_POSITION                              0x4
#define _CLC3GLS0_D3N_SIZE                                  0x1
#define _CLC3GLS0_D3N_LENGTH                                0x1
#define _CLC3GLS0_D3N_MASK                                  0x10
#define _CLC3GLS0_D3T_POSN                                  0x5
#define _CLC3GLS0_D3T_POSITION                              0x5
#define _CLC3GLS0_D3T_SIZE                                  0x1
#define _CLC3GLS0_D3T_LENGTH                                0x1
#define _CLC3GLS0_D3T_MASK                                  0x20
#define _CLC3GLS0_D4N_POSN                                  0x6
#define _CLC3GLS0_D4N_POSITION                              0x6
#define _CLC3GLS0_D4N_SIZE                                  0x1
#define _CLC3GLS0_D4N_LENGTH                                0x1
#define _CLC3GLS0_D4N_MASK                                  0x40
#define _CLC3GLS0_D4T_POSN                                  0x7
#define _CLC3GLS0_D4T_POSITION                              0x7
#define _CLC3GLS0_D4T_SIZE                                  0x1
#define _CLC3GLS0_D4T_LENGTH                                0x1
#define _CLC3GLS0_D4T_MASK                                  0x80

// Register: CLC3GLS1
#define CLC3GLS1 CLC3GLS1
extern volatile unsigned char           CLC3GLS1            __at(0x1E2B);
#ifndef _LIB_BUILD
asm("CLC3GLS1 equ 01E2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G2D1N               :1;
        unsigned LC3G2D1T               :1;
        unsigned LC3G2D2N               :1;
        unsigned LC3G2D2T               :1;
        unsigned LC3G2D3N               :1;
        unsigned LC3G2D3T               :1;
        unsigned LC3G2D4N               :1;
        unsigned LC3G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS1bits_t;
extern volatile CLC3GLS1bits_t CLC3GLS1bits __at(0x1E2B);
// bitfield macros
#define _CLC3GLS1_LC3G2D1N_POSN                             0x0
#define _CLC3GLS1_LC3G2D1N_POSITION                         0x0
#define _CLC3GLS1_LC3G2D1N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1N_MASK                             0x1
#define _CLC3GLS1_LC3G2D1T_POSN                             0x1
#define _CLC3GLS1_LC3G2D1T_POSITION                         0x1
#define _CLC3GLS1_LC3G2D1T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1T_MASK                             0x2
#define _CLC3GLS1_LC3G2D2N_POSN                             0x2
#define _CLC3GLS1_LC3G2D2N_POSITION                         0x2
#define _CLC3GLS1_LC3G2D2N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2N_MASK                             0x4
#define _CLC3GLS1_LC3G2D2T_POSN                             0x3
#define _CLC3GLS1_LC3G2D2T_POSITION                         0x3
#define _CLC3GLS1_LC3G2D2T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2T_MASK                             0x8
#define _CLC3GLS1_LC3G2D3N_POSN                             0x4
#define _CLC3GLS1_LC3G2D3N_POSITION                         0x4
#define _CLC3GLS1_LC3G2D3N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3N_MASK                             0x10
#define _CLC3GLS1_LC3G2D3T_POSN                             0x5
#define _CLC3GLS1_LC3G2D3T_POSITION                         0x5
#define _CLC3GLS1_LC3G2D3T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3T_MASK                             0x20
#define _CLC3GLS1_LC3G2D4N_POSN                             0x6
#define _CLC3GLS1_LC3G2D4N_POSITION                         0x6
#define _CLC3GLS1_LC3G2D4N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4N_MASK                             0x40
#define _CLC3GLS1_LC3G2D4T_POSN                             0x7
#define _CLC3GLS1_LC3G2D4T_POSITION                         0x7
#define _CLC3GLS1_LC3G2D4T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4T_MASK                             0x80
#define _CLC3GLS1_D1N_POSN                                  0x0
#define _CLC3GLS1_D1N_POSITION                              0x0
#define _CLC3GLS1_D1N_SIZE                                  0x1
#define _CLC3GLS1_D1N_LENGTH                                0x1
#define _CLC3GLS1_D1N_MASK                                  0x1
#define _CLC3GLS1_D1T_POSN                                  0x1
#define _CLC3GLS1_D1T_POSITION                              0x1
#define _CLC3GLS1_D1T_SIZE                                  0x1
#define _CLC3GLS1_D1T_LENGTH                                0x1
#define _CLC3GLS1_D1T_MASK                                  0x2
#define _CLC3GLS1_D2N_POSN                                  0x2
#define _CLC3GLS1_D2N_POSITION                              0x2
#define _CLC3GLS1_D2N_SIZE                                  0x1
#define _CLC3GLS1_D2N_LENGTH                                0x1
#define _CLC3GLS1_D2N_MASK                                  0x4
#define _CLC3GLS1_D2T_POSN                                  0x3
#define _CLC3GLS1_D2T_POSITION                              0x3
#define _CLC3GLS1_D2T_SIZE                                  0x1
#define _CLC3GLS1_D2T_LENGTH                                0x1
#define _CLC3GLS1_D2T_MASK                                  0x8
#define _CLC3GLS1_D3N_POSN                                  0x4
#define _CLC3GLS1_D3N_POSITION                              0x4
#define _CLC3GLS1_D3N_SIZE                                  0x1
#define _CLC3GLS1_D3N_LENGTH                                0x1
#define _CLC3GLS1_D3N_MASK                                  0x10
#define _CLC3GLS1_D3T_POSN                                  0x5
#define _CLC3GLS1_D3T_POSITION                              0x5
#define _CLC3GLS1_D3T_SIZE                                  0x1
#define _CLC3GLS1_D3T_LENGTH                                0x1
#define _CLC3GLS1_D3T_MASK                                  0x20
#define _CLC3GLS1_D4N_POSN                                  0x6
#define _CLC3GLS1_D4N_POSITION                              0x6
#define _CLC3GLS1_D4N_SIZE                                  0x1
#define _CLC3GLS1_D4N_LENGTH                                0x1
#define _CLC3GLS1_D4N_MASK                                  0x40
#define _CLC3GLS1_D4T_POSN                                  0x7
#define _CLC3GLS1_D4T_POSITION                              0x7
#define _CLC3GLS1_D4T_SIZE                                  0x1
#define _CLC3GLS1_D4T_LENGTH                                0x1
#define _CLC3GLS1_D4T_MASK                                  0x80

// Register: CLC3GLS2
#define CLC3GLS2 CLC3GLS2
extern volatile unsigned char           CLC3GLS2            __at(0x1E2C);
#ifndef _LIB_BUILD
asm("CLC3GLS2 equ 01E2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G3D1N               :1;
        unsigned LC3G3D1T               :1;
        unsigned LC3G3D2N               :1;
        unsigned LC3G3D2T               :1;
        unsigned LC3G3D3N               :1;
        unsigned LC3G3D3T               :1;
        unsigned LC3G3D4N               :1;
        unsigned LC3G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS2bits_t;
extern volatile CLC3GLS2bits_t CLC3GLS2bits __at(0x1E2C);
// bitfield macros
#define _CLC3GLS2_LC3G3D1N_POSN                             0x0
#define _CLC3GLS2_LC3G3D1N_POSITION                         0x0
#define _CLC3GLS2_LC3G3D1N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1N_MASK                             0x1
#define _CLC3GLS2_LC3G3D1T_POSN                             0x1
#define _CLC3GLS2_LC3G3D1T_POSITION                         0x1
#define _CLC3GLS2_LC3G3D1T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1T_MASK                             0x2
#define _CLC3GLS2_LC3G3D2N_POSN                             0x2
#define _CLC3GLS2_LC3G3D2N_POSITION                         0x2
#define _CLC3GLS2_LC3G3D2N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2N_MASK                             0x4
#define _CLC3GLS2_LC3G3D2T_POSN                             0x3
#define _CLC3GLS2_LC3G3D2T_POSITION                         0x3
#define _CLC3GLS2_LC3G3D2T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2T_MASK                             0x8
#define _CLC3GLS2_LC3G3D3N_POSN                             0x4
#define _CLC3GLS2_LC3G3D3N_POSITION                         0x4
#define _CLC3GLS2_LC3G3D3N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3N_MASK                             0x10
#define _CLC3GLS2_LC3G3D3T_POSN                             0x5
#define _CLC3GLS2_LC3G3D3T_POSITION                         0x5
#define _CLC3GLS2_LC3G3D3T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3T_MASK                             0x20
#define _CLC3GLS2_LC3G3D4N_POSN                             0x6
#define _CLC3GLS2_LC3G3D4N_POSITION                         0x6
#define _CLC3GLS2_LC3G3D4N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4N_MASK                             0x40
#define _CLC3GLS2_LC3G3D4T_POSN                             0x7
#define _CLC3GLS2_LC3G3D4T_POSITION                         0x7
#define _CLC3GLS2_LC3G3D4T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4T_MASK                             0x80
#define _CLC3GLS2_D1N_POSN                                  0x0
#define _CLC3GLS2_D1N_POSITION                              0x0
#define _CLC3GLS2_D1N_SIZE                                  0x1
#define _CLC3GLS2_D1N_LENGTH                                0x1
#define _CLC3GLS2_D1N_MASK                                  0x1
#define _CLC3GLS2_D1T_POSN                                  0x1
#define _CLC3GLS2_D1T_POSITION                              0x1
#define _CLC3GLS2_D1T_SIZE                                  0x1
#define _CLC3GLS2_D1T_LENGTH                                0x1
#define _CLC3GLS2_D1T_MASK                                  0x2
#define _CLC3GLS2_D2N_POSN                                  0x2
#define _CLC3GLS2_D2N_POSITION                              0x2
#define _CLC3GLS2_D2N_SIZE                                  0x1
#define _CLC3GLS2_D2N_LENGTH                                0x1
#define _CLC3GLS2_D2N_MASK                                  0x4
#define _CLC3GLS2_D2T_POSN                                  0x3
#define _CLC3GLS2_D2T_POSITION                              0x3
#define _CLC3GLS2_D2T_SIZE                                  0x1
#define _CLC3GLS2_D2T_LENGTH                                0x1
#define _CLC3GLS2_D2T_MASK                                  0x8
#define _CLC3GLS2_D3N_POSN                                  0x4
#define _CLC3GLS2_D3N_POSITION                              0x4
#define _CLC3GLS2_D3N_SIZE                                  0x1
#define _CLC3GLS2_D3N_LENGTH                                0x1
#define _CLC3GLS2_D3N_MASK                                  0x10
#define _CLC3GLS2_D3T_POSN                                  0x5
#define _CLC3GLS2_D3T_POSITION                              0x5
#define _CLC3GLS2_D3T_SIZE                                  0x1
#define _CLC3GLS2_D3T_LENGTH                                0x1
#define _CLC3GLS2_D3T_MASK                                  0x20
#define _CLC3GLS2_D4N_POSN                                  0x6
#define _CLC3GLS2_D4N_POSITION                              0x6
#define _CLC3GLS2_D4N_SIZE                                  0x1
#define _CLC3GLS2_D4N_LENGTH                                0x1
#define _CLC3GLS2_D4N_MASK                                  0x40
#define _CLC3GLS2_D4T_POSN                                  0x7
#define _CLC3GLS2_D4T_POSITION                              0x7
#define _CLC3GLS2_D4T_SIZE                                  0x1
#define _CLC3GLS2_D4T_LENGTH                                0x1
#define _CLC3GLS2_D4T_MASK                                  0x80

// Register: CLC3GLS3
#define CLC3GLS3 CLC3GLS3
extern volatile unsigned char           CLC3GLS3            __at(0x1E2D);
#ifndef _LIB_BUILD
asm("CLC3GLS3 equ 01E2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G4D1N               :1;
        unsigned LC3G4D1T               :1;
        unsigned LC3G4D2N               :1;
        unsigned LC3G4D2T               :1;
        unsigned LC3G4D3N               :1;
        unsigned LC3G4D3T               :1;
        unsigned LC3G4D4N               :1;
        unsigned LC3G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC3GLS3bits_t;
extern volatile CLC3GLS3bits_t CLC3GLS3bits __at(0x1E2D);
// bitfield macros
#define _CLC3GLS3_LC3G4D1N_POSN                             0x0
#define _CLC3GLS3_LC3G4D1N_POSITION                         0x0
#define _CLC3GLS3_LC3G4D1N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1N_MASK                             0x1
#define _CLC3GLS3_LC3G4D1T_POSN                             0x1
#define _CLC3GLS3_LC3G4D1T_POSITION                         0x1
#define _CLC3GLS3_LC3G4D1T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1T_MASK                             0x2
#define _CLC3GLS3_LC3G4D2N_POSN                             0x2
#define _CLC3GLS3_LC3G4D2N_POSITION                         0x2
#define _CLC3GLS3_LC3G4D2N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2N_MASK                             0x4
#define _CLC3GLS3_LC3G4D2T_POSN                             0x3
#define _CLC3GLS3_LC3G4D2T_POSITION                         0x3
#define _CLC3GLS3_LC3G4D2T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2T_MASK                             0x8
#define _CLC3GLS3_LC3G4D3N_POSN                             0x4
#define _CLC3GLS3_LC3G4D3N_POSITION                         0x4
#define _CLC3GLS3_LC3G4D3N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3N_MASK                             0x10
#define _CLC3GLS3_LC3G4D3T_POSN                             0x5
#define _CLC3GLS3_LC3G4D3T_POSITION                         0x5
#define _CLC3GLS3_LC3G4D3T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3T_MASK                             0x20
#define _CLC3GLS3_LC3G4D4N_POSN                             0x6
#define _CLC3GLS3_LC3G4D4N_POSITION                         0x6
#define _CLC3GLS3_LC3G4D4N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4N_MASK                             0x40
#define _CLC3GLS3_LC3G4D4T_POSN                             0x7
#define _CLC3GLS3_LC3G4D4T_POSITION                         0x7
#define _CLC3GLS3_LC3G4D4T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4T_MASK                             0x80
#define _CLC3GLS3_G4D1N_POSN                                0x0
#define _CLC3GLS3_G4D1N_POSITION                            0x0
#define _CLC3GLS3_G4D1N_SIZE                                0x1
#define _CLC3GLS3_G4D1N_LENGTH                              0x1
#define _CLC3GLS3_G4D1N_MASK                                0x1
#define _CLC3GLS3_G4D1T_POSN                                0x1
#define _CLC3GLS3_G4D1T_POSITION                            0x1
#define _CLC3GLS3_G4D1T_SIZE                                0x1
#define _CLC3GLS3_G4D1T_LENGTH                              0x1
#define _CLC3GLS3_G4D1T_MASK                                0x2
#define _CLC3GLS3_G4D2N_POSN                                0x2
#define _CLC3GLS3_G4D2N_POSITION                            0x2
#define _CLC3GLS3_G4D2N_SIZE                                0x1
#define _CLC3GLS3_G4D2N_LENGTH                              0x1
#define _CLC3GLS3_G4D2N_MASK                                0x4
#define _CLC3GLS3_G4D2T_POSN                                0x3
#define _CLC3GLS3_G4D2T_POSITION                            0x3
#define _CLC3GLS3_G4D2T_SIZE                                0x1
#define _CLC3GLS3_G4D2T_LENGTH                              0x1
#define _CLC3GLS3_G4D2T_MASK                                0x8
#define _CLC3GLS3_G4D3N_POSN                                0x4
#define _CLC3GLS3_G4D3N_POSITION                            0x4
#define _CLC3GLS3_G4D3N_SIZE                                0x1
#define _CLC3GLS3_G4D3N_LENGTH                              0x1
#define _CLC3GLS3_G4D3N_MASK                                0x10
#define _CLC3GLS3_G4D3T_POSN                                0x5
#define _CLC3GLS3_G4D3T_POSITION                            0x5
#define _CLC3GLS3_G4D3T_SIZE                                0x1
#define _CLC3GLS3_G4D3T_LENGTH                              0x1
#define _CLC3GLS3_G4D3T_MASK                                0x20
#define _CLC3GLS3_G4D4N_POSN                                0x6
#define _CLC3GLS3_G4D4N_POSITION                            0x6
#define _CLC3GLS3_G4D4N_SIZE                                0x1
#define _CLC3GLS3_G4D4N_LENGTH                              0x1
#define _CLC3GLS3_G4D4N_MASK                                0x40
#define _CLC3GLS3_G4D4T_POSN                                0x7
#define _CLC3GLS3_G4D4T_POSITION                            0x7
#define _CLC3GLS3_G4D4T_SIZE                                0x1
#define _CLC3GLS3_G4D4T_LENGTH                              0x1
#define _CLC3GLS3_G4D4T_MASK                                0x80

// Register: CLC4CON
#define CLC4CON CLC4CON
extern volatile unsigned char           CLC4CON             __at(0x1E2E);
#ifndef _LIB_BUILD
asm("CLC4CON equ 01E2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4MODE                :3;
        unsigned LC4INTN                :1;
        unsigned LC4INTP                :1;
        unsigned LC4OUT                 :1;
        unsigned                        :1;
        unsigned LC4EN                  :1;
    };
    struct {
        unsigned LC4MODE0               :1;
        unsigned LC4MODE1               :1;
        unsigned LC4MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC4CONbits_t;
extern volatile CLC4CONbits_t CLC4CONbits __at(0x1E2E);
// bitfield macros
#define _CLC4CON_LC4MODE_POSN                               0x0
#define _CLC4CON_LC4MODE_POSITION                           0x0
#define _CLC4CON_LC4MODE_SIZE                               0x3
#define _CLC4CON_LC4MODE_LENGTH                             0x3
#define _CLC4CON_LC4MODE_MASK                               0x7
#define _CLC4CON_LC4INTN_POSN                               0x3
#define _CLC4CON_LC4INTN_POSITION                           0x3
#define _CLC4CON_LC4INTN_SIZE                               0x1
#define _CLC4CON_LC4INTN_LENGTH                             0x1
#define _CLC4CON_LC4INTN_MASK                               0x8
#define _CLC4CON_LC4INTP_POSN                               0x4
#define _CLC4CON_LC4INTP_POSITION                           0x4
#define _CLC4CON_LC4INTP_SIZE                               0x1
#define _CLC4CON_LC4INTP_LENGTH                             0x1
#define _CLC4CON_LC4INTP_MASK                               0x10
#define _CLC4CON_LC4OUT_POSN                                0x5
#define _CLC4CON_LC4OUT_POSITION                            0x5
#define _CLC4CON_LC4OUT_SIZE                                0x1
#define _CLC4CON_LC4OUT_LENGTH                              0x1
#define _CLC4CON_LC4OUT_MASK                                0x20
#define _CLC4CON_LC4EN_POSN                                 0x7
#define _CLC4CON_LC4EN_POSITION                             0x7
#define _CLC4CON_LC4EN_SIZE                                 0x1
#define _CLC4CON_LC4EN_LENGTH                               0x1
#define _CLC4CON_LC4EN_MASK                                 0x80
#define _CLC4CON_LC4MODE0_POSN                              0x0
#define _CLC4CON_LC4MODE0_POSITION                          0x0
#define _CLC4CON_LC4MODE0_SIZE                              0x1
#define _CLC4CON_LC4MODE0_LENGTH                            0x1
#define _CLC4CON_LC4MODE0_MASK                              0x1
#define _CLC4CON_LC4MODE1_POSN                              0x1
#define _CLC4CON_LC4MODE1_POSITION                          0x1
#define _CLC4CON_LC4MODE1_SIZE                              0x1
#define _CLC4CON_LC4MODE1_LENGTH                            0x1
#define _CLC4CON_LC4MODE1_MASK                              0x2
#define _CLC4CON_LC4MODE2_POSN                              0x2
#define _CLC4CON_LC4MODE2_POSITION                          0x2
#define _CLC4CON_LC4MODE2_SIZE                              0x1
#define _CLC4CON_LC4MODE2_LENGTH                            0x1
#define _CLC4CON_LC4MODE2_MASK                              0x4
#define _CLC4CON_MODE_POSN                                  0x0
#define _CLC4CON_MODE_POSITION                              0x0
#define _CLC4CON_MODE_SIZE                                  0x3
#define _CLC4CON_MODE_LENGTH                                0x3
#define _CLC4CON_MODE_MASK                                  0x7
#define _CLC4CON_INTN_POSN                                  0x3
#define _CLC4CON_INTN_POSITION                              0x3
#define _CLC4CON_INTN_SIZE                                  0x1
#define _CLC4CON_INTN_LENGTH                                0x1
#define _CLC4CON_INTN_MASK                                  0x8
#define _CLC4CON_INTP_POSN                                  0x4
#define _CLC4CON_INTP_POSITION                              0x4
#define _CLC4CON_INTP_SIZE                                  0x1
#define _CLC4CON_INTP_LENGTH                                0x1
#define _CLC4CON_INTP_MASK                                  0x10
#define _CLC4CON_OUT_POSN                                   0x5
#define _CLC4CON_OUT_POSITION                               0x5
#define _CLC4CON_OUT_SIZE                                   0x1
#define _CLC4CON_OUT_LENGTH                                 0x1
#define _CLC4CON_OUT_MASK                                   0x20
#define _CLC4CON_EN_POSN                                    0x7
#define _CLC4CON_EN_POSITION                                0x7
#define _CLC4CON_EN_SIZE                                    0x1
#define _CLC4CON_EN_LENGTH                                  0x1
#define _CLC4CON_EN_MASK                                    0x80
#define _CLC4CON_MODE0_POSN                                 0x0
#define _CLC4CON_MODE0_POSITION                             0x0
#define _CLC4CON_MODE0_SIZE                                 0x1
#define _CLC4CON_MODE0_LENGTH                               0x1
#define _CLC4CON_MODE0_MASK                                 0x1
#define _CLC4CON_MODE1_POSN                                 0x1
#define _CLC4CON_MODE1_POSITION                             0x1
#define _CLC4CON_MODE1_SIZE                                 0x1
#define _CLC4CON_MODE1_LENGTH                               0x1
#define _CLC4CON_MODE1_MASK                                 0x2
#define _CLC4CON_MODE2_POSN                                 0x2
#define _CLC4CON_MODE2_POSITION                             0x2
#define _CLC4CON_MODE2_SIZE                                 0x1
#define _CLC4CON_MODE2_LENGTH                               0x1
#define _CLC4CON_MODE2_MASK                                 0x4

// Register: CLC4POL
#define CLC4POL CLC4POL
extern volatile unsigned char           CLC4POL             __at(0x1E2F);
#ifndef _LIB_BUILD
asm("CLC4POL equ 01E2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1POL               :1;
        unsigned LC4G2POL               :1;
        unsigned LC4G3POL               :1;
        unsigned LC4G4POL               :1;
        unsigned                        :3;
        unsigned LC4POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC4POLbits_t;
extern volatile CLC4POLbits_t CLC4POLbits __at(0x1E2F);
// bitfield macros
#define _CLC4POL_LC4G1POL_POSN                              0x0
#define _CLC4POL_LC4G1POL_POSITION                          0x0
#define _CLC4POL_LC4G1POL_SIZE                              0x1
#define _CLC4POL_LC4G1POL_LENGTH                            0x1
#define _CLC4POL_LC4G1POL_MASK                              0x1
#define _CLC4POL_LC4G2POL_POSN                              0x1
#define _CLC4POL_LC4G2POL_POSITION                          0x1
#define _CLC4POL_LC4G2POL_SIZE                              0x1
#define _CLC4POL_LC4G2POL_LENGTH                            0x1
#define _CLC4POL_LC4G2POL_MASK                              0x2
#define _CLC4POL_LC4G3POL_POSN                              0x2
#define _CLC4POL_LC4G3POL_POSITION                          0x2
#define _CLC4POL_LC4G3POL_SIZE                              0x1
#define _CLC4POL_LC4G3POL_LENGTH                            0x1
#define _CLC4POL_LC4G3POL_MASK                              0x4
#define _CLC4POL_LC4G4POL_POSN                              0x3
#define _CLC4POL_LC4G4POL_POSITION                          0x3
#define _CLC4POL_LC4G4POL_SIZE                              0x1
#define _CLC4POL_LC4G4POL_LENGTH                            0x1
#define _CLC4POL_LC4G4POL_MASK                              0x8
#define _CLC4POL_LC4POL_POSN                                0x7
#define _CLC4POL_LC4POL_POSITION                            0x7
#define _CLC4POL_LC4POL_SIZE                                0x1
#define _CLC4POL_LC4POL_LENGTH                              0x1
#define _CLC4POL_LC4POL_MASK                                0x80
#define _CLC4POL_G1POL_POSN                                 0x0
#define _CLC4POL_G1POL_POSITION                             0x0
#define _CLC4POL_G1POL_SIZE                                 0x1
#define _CLC4POL_G1POL_LENGTH                               0x1
#define _CLC4POL_G1POL_MASK                                 0x1
#define _CLC4POL_G2POL_POSN                                 0x1
#define _CLC4POL_G2POL_POSITION                             0x1
#define _CLC4POL_G2POL_SIZE                                 0x1
#define _CLC4POL_G2POL_LENGTH                               0x1
#define _CLC4POL_G2POL_MASK                                 0x2
#define _CLC4POL_G3POL_POSN                                 0x2
#define _CLC4POL_G3POL_POSITION                             0x2
#define _CLC4POL_G3POL_SIZE                                 0x1
#define _CLC4POL_G3POL_LENGTH                               0x1
#define _CLC4POL_G3POL_MASK                                 0x4
#define _CLC4POL_G4POL_POSN                                 0x3
#define _CLC4POL_G4POL_POSITION                             0x3
#define _CLC4POL_G4POL_SIZE                                 0x1
#define _CLC4POL_G4POL_LENGTH                               0x1
#define _CLC4POL_G4POL_MASK                                 0x8
#define _CLC4POL_POL_POSN                                   0x7
#define _CLC4POL_POL_POSITION                               0x7
#define _CLC4POL_POL_SIZE                                   0x1
#define _CLC4POL_POL_LENGTH                                 0x1
#define _CLC4POL_POL_MASK                                   0x80

// Register: CLC4SEL0
#define CLC4SEL0 CLC4SEL0
extern volatile unsigned char           CLC4SEL0            __at(0x1E30);
#ifndef _LIB_BUILD
asm("CLC4SEL0 equ 01E30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D1S0                :1;
        unsigned LC4D1S1                :1;
        unsigned LC4D1S2                :1;
        unsigned LC4D1S3                :1;
        unsigned LC4D1S4                :1;
        unsigned LC4D1S5                :1;
    };
    struct {
        unsigned LC4D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC4SEL0bits_t;
extern volatile CLC4SEL0bits_t CLC4SEL0bits __at(0x1E30);
// bitfield macros
#define _CLC4SEL0_LC4D1S0_POSN                              0x0
#define _CLC4SEL0_LC4D1S0_POSITION                          0x0
#define _CLC4SEL0_LC4D1S0_SIZE                              0x1
#define _CLC4SEL0_LC4D1S0_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S0_MASK                              0x1
#define _CLC4SEL0_LC4D1S1_POSN                              0x1
#define _CLC4SEL0_LC4D1S1_POSITION                          0x1
#define _CLC4SEL0_LC4D1S1_SIZE                              0x1
#define _CLC4SEL0_LC4D1S1_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S1_MASK                              0x2
#define _CLC4SEL0_LC4D1S2_POSN                              0x2
#define _CLC4SEL0_LC4D1S2_POSITION                          0x2
#define _CLC4SEL0_LC4D1S2_SIZE                              0x1
#define _CLC4SEL0_LC4D1S2_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S2_MASK                              0x4
#define _CLC4SEL0_LC4D1S3_POSN                              0x3
#define _CLC4SEL0_LC4D1S3_POSITION                          0x3
#define _CLC4SEL0_LC4D1S3_SIZE                              0x1
#define _CLC4SEL0_LC4D1S3_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S3_MASK                              0x8
#define _CLC4SEL0_LC4D1S4_POSN                              0x4
#define _CLC4SEL0_LC4D1S4_POSITION                          0x4
#define _CLC4SEL0_LC4D1S4_SIZE                              0x1
#define _CLC4SEL0_LC4D1S4_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S4_MASK                              0x10
#define _CLC4SEL0_LC4D1S5_POSN                              0x5
#define _CLC4SEL0_LC4D1S5_POSITION                          0x5
#define _CLC4SEL0_LC4D1S5_SIZE                              0x1
#define _CLC4SEL0_LC4D1S5_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S5_MASK                              0x20
#define _CLC4SEL0_LC4D1S_POSN                               0x0
#define _CLC4SEL0_LC4D1S_POSITION                           0x0
#define _CLC4SEL0_LC4D1S_SIZE                               0x8
#define _CLC4SEL0_LC4D1S_LENGTH                             0x8
#define _CLC4SEL0_LC4D1S_MASK                               0xFF
#define _CLC4SEL0_D1S_POSN                                  0x0
#define _CLC4SEL0_D1S_POSITION                              0x0
#define _CLC4SEL0_D1S_SIZE                                  0x8
#define _CLC4SEL0_D1S_LENGTH                                0x8
#define _CLC4SEL0_D1S_MASK                                  0xFF
#define _CLC4SEL0_D1S0_POSN                                 0x0
#define _CLC4SEL0_D1S0_POSITION                             0x0
#define _CLC4SEL0_D1S0_SIZE                                 0x1
#define _CLC4SEL0_D1S0_LENGTH                               0x1
#define _CLC4SEL0_D1S0_MASK                                 0x1
#define _CLC4SEL0_D1S1_POSN                                 0x1
#define _CLC4SEL0_D1S1_POSITION                             0x1
#define _CLC4SEL0_D1S1_SIZE                                 0x1
#define _CLC4SEL0_D1S1_LENGTH                               0x1
#define _CLC4SEL0_D1S1_MASK                                 0x2
#define _CLC4SEL0_D1S2_POSN                                 0x2
#define _CLC4SEL0_D1S2_POSITION                             0x2
#define _CLC4SEL0_D1S2_SIZE                                 0x1
#define _CLC4SEL0_D1S2_LENGTH                               0x1
#define _CLC4SEL0_D1S2_MASK                                 0x4
#define _CLC4SEL0_D1S3_POSN                                 0x3
#define _CLC4SEL0_D1S3_POSITION                             0x3
#define _CLC4SEL0_D1S3_SIZE                                 0x1
#define _CLC4SEL0_D1S3_LENGTH                               0x1
#define _CLC4SEL0_D1S3_MASK                                 0x8
#define _CLC4SEL0_D1S4_POSN                                 0x4
#define _CLC4SEL0_D1S4_POSITION                             0x4
#define _CLC4SEL0_D1S4_SIZE                                 0x1
#define _CLC4SEL0_D1S4_LENGTH                               0x1
#define _CLC4SEL0_D1S4_MASK                                 0x10
#define _CLC4SEL0_D1S5_POSN                                 0x5
#define _CLC4SEL0_D1S5_POSITION                             0x5
#define _CLC4SEL0_D1S5_SIZE                                 0x1
#define _CLC4SEL0_D1S5_LENGTH                               0x1
#define _CLC4SEL0_D1S5_MASK                                 0x20

// Register: CLC4SEL1
#define CLC4SEL1 CLC4SEL1
extern volatile unsigned char           CLC4SEL1            __at(0x1E31);
#ifndef _LIB_BUILD
asm("CLC4SEL1 equ 01E31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D2S0                :1;
        unsigned LC4D2S1                :1;
        unsigned LC4D2S2                :1;
        unsigned LC4D2S3                :1;
        unsigned LC4D2S4                :1;
        unsigned LC4D2S5                :1;
    };
    struct {
        unsigned LC4D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC4SEL1bits_t;
extern volatile CLC4SEL1bits_t CLC4SEL1bits __at(0x1E31);
// bitfield macros
#define _CLC4SEL1_LC4D2S0_POSN                              0x0
#define _CLC4SEL1_LC4D2S0_POSITION                          0x0
#define _CLC4SEL1_LC4D2S0_SIZE                              0x1
#define _CLC4SEL1_LC4D2S0_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S0_MASK                              0x1
#define _CLC4SEL1_LC4D2S1_POSN                              0x1
#define _CLC4SEL1_LC4D2S1_POSITION                          0x1
#define _CLC4SEL1_LC4D2S1_SIZE                              0x1
#define _CLC4SEL1_LC4D2S1_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S1_MASK                              0x2
#define _CLC4SEL1_LC4D2S2_POSN                              0x2
#define _CLC4SEL1_LC4D2S2_POSITION                          0x2
#define _CLC4SEL1_LC4D2S2_SIZE                              0x1
#define _CLC4SEL1_LC4D2S2_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S2_MASK                              0x4
#define _CLC4SEL1_LC4D2S3_POSN                              0x3
#define _CLC4SEL1_LC4D2S3_POSITION                          0x3
#define _CLC4SEL1_LC4D2S3_SIZE                              0x1
#define _CLC4SEL1_LC4D2S3_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S3_MASK                              0x8
#define _CLC4SEL1_LC4D2S4_POSN                              0x4
#define _CLC4SEL1_LC4D2S4_POSITION                          0x4
#define _CLC4SEL1_LC4D2S4_SIZE                              0x1
#define _CLC4SEL1_LC4D2S4_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S4_MASK                              0x10
#define _CLC4SEL1_LC4D2S5_POSN                              0x5
#define _CLC4SEL1_LC4D2S5_POSITION                          0x5
#define _CLC4SEL1_LC4D2S5_SIZE                              0x1
#define _CLC4SEL1_LC4D2S5_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S5_MASK                              0x20
#define _CLC4SEL1_LC4D2S_POSN                               0x0
#define _CLC4SEL1_LC4D2S_POSITION                           0x0
#define _CLC4SEL1_LC4D2S_SIZE                               0x8
#define _CLC4SEL1_LC4D2S_LENGTH                             0x8
#define _CLC4SEL1_LC4D2S_MASK                               0xFF
#define _CLC4SEL1_D2S_POSN                                  0x0
#define _CLC4SEL1_D2S_POSITION                              0x0
#define _CLC4SEL1_D2S_SIZE                                  0x8
#define _CLC4SEL1_D2S_LENGTH                                0x8
#define _CLC4SEL1_D2S_MASK                                  0xFF
#define _CLC4SEL1_D2S0_POSN                                 0x0
#define _CLC4SEL1_D2S0_POSITION                             0x0
#define _CLC4SEL1_D2S0_SIZE                                 0x1
#define _CLC4SEL1_D2S0_LENGTH                               0x1
#define _CLC4SEL1_D2S0_MASK                                 0x1
#define _CLC4SEL1_D2S1_POSN                                 0x1
#define _CLC4SEL1_D2S1_POSITION                             0x1
#define _CLC4SEL1_D2S1_SIZE                                 0x1
#define _CLC4SEL1_D2S1_LENGTH                               0x1
#define _CLC4SEL1_D2S1_MASK                                 0x2
#define _CLC4SEL1_D2S2_POSN                                 0x2
#define _CLC4SEL1_D2S2_POSITION                             0x2
#define _CLC4SEL1_D2S2_SIZE                                 0x1
#define _CLC4SEL1_D2S2_LENGTH                               0x1
#define _CLC4SEL1_D2S2_MASK                                 0x4
#define _CLC4SEL1_D2S3_POSN                                 0x3
#define _CLC4SEL1_D2S3_POSITION                             0x3
#define _CLC4SEL1_D2S3_SIZE                                 0x1
#define _CLC4SEL1_D2S3_LENGTH                               0x1
#define _CLC4SEL1_D2S3_MASK                                 0x8
#define _CLC4SEL1_D2S4_POSN                                 0x4
#define _CLC4SEL1_D2S4_POSITION                             0x4
#define _CLC4SEL1_D2S4_SIZE                                 0x1
#define _CLC4SEL1_D2S4_LENGTH                               0x1
#define _CLC4SEL1_D2S4_MASK                                 0x10
#define _CLC4SEL1_D2S5_POSN                                 0x5
#define _CLC4SEL1_D2S5_POSITION                             0x5
#define _CLC4SEL1_D2S5_SIZE                                 0x1
#define _CLC4SEL1_D2S5_LENGTH                               0x1
#define _CLC4SEL1_D2S5_MASK                                 0x20

// Register: CLC4SEL2
#define CLC4SEL2 CLC4SEL2
extern volatile unsigned char           CLC4SEL2            __at(0x1E32);
#ifndef _LIB_BUILD
asm("CLC4SEL2 equ 01E32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D3S0                :1;
        unsigned LC4D3S1                :1;
        unsigned LC4D3S2                :1;
        unsigned LC4D3S3                :1;
        unsigned LC4D3S4                :1;
        unsigned LC4D3S5                :1;
    };
    struct {
        unsigned LC4D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC4SEL2bits_t;
extern volatile CLC4SEL2bits_t CLC4SEL2bits __at(0x1E32);
// bitfield macros
#define _CLC4SEL2_LC4D3S0_POSN                              0x0
#define _CLC4SEL2_LC4D3S0_POSITION                          0x0
#define _CLC4SEL2_LC4D3S0_SIZE                              0x1
#define _CLC4SEL2_LC4D3S0_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S0_MASK                              0x1
#define _CLC4SEL2_LC4D3S1_POSN                              0x1
#define _CLC4SEL2_LC4D3S1_POSITION                          0x1
#define _CLC4SEL2_LC4D3S1_SIZE                              0x1
#define _CLC4SEL2_LC4D3S1_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S1_MASK                              0x2
#define _CLC4SEL2_LC4D3S2_POSN                              0x2
#define _CLC4SEL2_LC4D3S2_POSITION                          0x2
#define _CLC4SEL2_LC4D3S2_SIZE                              0x1
#define _CLC4SEL2_LC4D3S2_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S2_MASK                              0x4
#define _CLC4SEL2_LC4D3S3_POSN                              0x3
#define _CLC4SEL2_LC4D3S3_POSITION                          0x3
#define _CLC4SEL2_LC4D3S3_SIZE                              0x1
#define _CLC4SEL2_LC4D3S3_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S3_MASK                              0x8
#define _CLC4SEL2_LC4D3S4_POSN                              0x4
#define _CLC4SEL2_LC4D3S4_POSITION                          0x4
#define _CLC4SEL2_LC4D3S4_SIZE                              0x1
#define _CLC4SEL2_LC4D3S4_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S4_MASK                              0x10
#define _CLC4SEL2_LC4D3S5_POSN                              0x5
#define _CLC4SEL2_LC4D3S5_POSITION                          0x5
#define _CLC4SEL2_LC4D3S5_SIZE                              0x1
#define _CLC4SEL2_LC4D3S5_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S5_MASK                              0x20
#define _CLC4SEL2_LC4D3S_POSN                               0x0
#define _CLC4SEL2_LC4D3S_POSITION                           0x0
#define _CLC4SEL2_LC4D3S_SIZE                               0x8
#define _CLC4SEL2_LC4D3S_LENGTH                             0x8
#define _CLC4SEL2_LC4D3S_MASK                               0xFF
#define _CLC4SEL2_D3S_POSN                                  0x0
#define _CLC4SEL2_D3S_POSITION                              0x0
#define _CLC4SEL2_D3S_SIZE                                  0x8
#define _CLC4SEL2_D3S_LENGTH                                0x8
#define _CLC4SEL2_D3S_MASK                                  0xFF
#define _CLC4SEL2_D3S0_POSN                                 0x0
#define _CLC4SEL2_D3S0_POSITION                             0x0
#define _CLC4SEL2_D3S0_SIZE                                 0x1
#define _CLC4SEL2_D3S0_LENGTH                               0x1
#define _CLC4SEL2_D3S0_MASK                                 0x1
#define _CLC4SEL2_D3S1_POSN                                 0x1
#define _CLC4SEL2_D3S1_POSITION                             0x1
#define _CLC4SEL2_D3S1_SIZE                                 0x1
#define _CLC4SEL2_D3S1_LENGTH                               0x1
#define _CLC4SEL2_D3S1_MASK                                 0x2
#define _CLC4SEL2_D3S2_POSN                                 0x2
#define _CLC4SEL2_D3S2_POSITION                             0x2
#define _CLC4SEL2_D3S2_SIZE                                 0x1
#define _CLC4SEL2_D3S2_LENGTH                               0x1
#define _CLC4SEL2_D3S2_MASK                                 0x4
#define _CLC4SEL2_D3S3_POSN                                 0x3
#define _CLC4SEL2_D3S3_POSITION                             0x3
#define _CLC4SEL2_D3S3_SIZE                                 0x1
#define _CLC4SEL2_D3S3_LENGTH                               0x1
#define _CLC4SEL2_D3S3_MASK                                 0x8
#define _CLC4SEL2_D3S4_POSN                                 0x4
#define _CLC4SEL2_D3S4_POSITION                             0x4
#define _CLC4SEL2_D3S4_SIZE                                 0x1
#define _CLC4SEL2_D3S4_LENGTH                               0x1
#define _CLC4SEL2_D3S4_MASK                                 0x10
#define _CLC4SEL2_D3S5_POSN                                 0x5
#define _CLC4SEL2_D3S5_POSITION                             0x5
#define _CLC4SEL2_D3S5_SIZE                                 0x1
#define _CLC4SEL2_D3S5_LENGTH                               0x1
#define _CLC4SEL2_D3S5_MASK                                 0x20

// Register: CLC4SEL3
#define CLC4SEL3 CLC4SEL3
extern volatile unsigned char           CLC4SEL3            __at(0x1E33);
#ifndef _LIB_BUILD
asm("CLC4SEL3 equ 01E33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D4S0                :1;
        unsigned LC4D4S1                :1;
        unsigned LC4D4S2                :1;
        unsigned LC4D4S3                :1;
        unsigned LC4D4S4                :1;
        unsigned LC4D4S5                :1;
    };
    struct {
        unsigned LC4D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC4SEL3bits_t;
extern volatile CLC4SEL3bits_t CLC4SEL3bits __at(0x1E33);
// bitfield macros
#define _CLC4SEL3_LC4D4S0_POSN                              0x0
#define _CLC4SEL3_LC4D4S0_POSITION                          0x0
#define _CLC4SEL3_LC4D4S0_SIZE                              0x1
#define _CLC4SEL3_LC4D4S0_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S0_MASK                              0x1
#define _CLC4SEL3_LC4D4S1_POSN                              0x1
#define _CLC4SEL3_LC4D4S1_POSITION                          0x1
#define _CLC4SEL3_LC4D4S1_SIZE                              0x1
#define _CLC4SEL3_LC4D4S1_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S1_MASK                              0x2
#define _CLC4SEL3_LC4D4S2_POSN                              0x2
#define _CLC4SEL3_LC4D4S2_POSITION                          0x2
#define _CLC4SEL3_LC4D4S2_SIZE                              0x1
#define _CLC4SEL3_LC4D4S2_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S2_MASK                              0x4
#define _CLC4SEL3_LC4D4S3_POSN                              0x3
#define _CLC4SEL3_LC4D4S3_POSITION                          0x3
#define _CLC4SEL3_LC4D4S3_SIZE                              0x1
#define _CLC4SEL3_LC4D4S3_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S3_MASK                              0x8
#define _CLC4SEL3_LC4D4S4_POSN                              0x4
#define _CLC4SEL3_LC4D4S4_POSITION                          0x4
#define _CLC4SEL3_LC4D4S4_SIZE                              0x1
#define _CLC4SEL3_LC4D4S4_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S4_MASK                              0x10
#define _CLC4SEL3_LC4D4S5_POSN                              0x5
#define _CLC4SEL3_LC4D4S5_POSITION                          0x5
#define _CLC4SEL3_LC4D4S5_SIZE                              0x1
#define _CLC4SEL3_LC4D4S5_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S5_MASK                              0x20
#define _CLC4SEL3_LC4D4S_POSN                               0x0
#define _CLC4SEL3_LC4D4S_POSITION                           0x0
#define _CLC4SEL3_LC4D4S_SIZE                               0x8
#define _CLC4SEL3_LC4D4S_LENGTH                             0x8
#define _CLC4SEL3_LC4D4S_MASK                               0xFF
#define _CLC4SEL3_D4S_POSN                                  0x0
#define _CLC4SEL3_D4S_POSITION                              0x0
#define _CLC4SEL3_D4S_SIZE                                  0x8
#define _CLC4SEL3_D4S_LENGTH                                0x8
#define _CLC4SEL3_D4S_MASK                                  0xFF
#define _CLC4SEL3_D4S0_POSN                                 0x0
#define _CLC4SEL3_D4S0_POSITION                             0x0
#define _CLC4SEL3_D4S0_SIZE                                 0x1
#define _CLC4SEL3_D4S0_LENGTH                               0x1
#define _CLC4SEL3_D4S0_MASK                                 0x1
#define _CLC4SEL3_D4S1_POSN                                 0x1
#define _CLC4SEL3_D4S1_POSITION                             0x1
#define _CLC4SEL3_D4S1_SIZE                                 0x1
#define _CLC4SEL3_D4S1_LENGTH                               0x1
#define _CLC4SEL3_D4S1_MASK                                 0x2
#define _CLC4SEL3_D4S2_POSN                                 0x2
#define _CLC4SEL3_D4S2_POSITION                             0x2
#define _CLC4SEL3_D4S2_SIZE                                 0x1
#define _CLC4SEL3_D4S2_LENGTH                               0x1
#define _CLC4SEL3_D4S2_MASK                                 0x4
#define _CLC4SEL3_D4S3_POSN                                 0x3
#define _CLC4SEL3_D4S3_POSITION                             0x3
#define _CLC4SEL3_D4S3_SIZE                                 0x1
#define _CLC4SEL3_D4S3_LENGTH                               0x1
#define _CLC4SEL3_D4S3_MASK                                 0x8
#define _CLC4SEL3_D4S4_POSN                                 0x4
#define _CLC4SEL3_D4S4_POSITION                             0x4
#define _CLC4SEL3_D4S4_SIZE                                 0x1
#define _CLC4SEL3_D4S4_LENGTH                               0x1
#define _CLC4SEL3_D4S4_MASK                                 0x10
#define _CLC4SEL3_D4S5_POSN                                 0x5
#define _CLC4SEL3_D4S5_POSITION                             0x5
#define _CLC4SEL3_D4S5_SIZE                                 0x1
#define _CLC4SEL3_D4S5_LENGTH                               0x1
#define _CLC4SEL3_D4S5_MASK                                 0x20

// Register: CLC4GLS0
#define CLC4GLS0 CLC4GLS0
extern volatile unsigned char           CLC4GLS0            __at(0x1E34);
#ifndef _LIB_BUILD
asm("CLC4GLS0 equ 01E34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1D1N               :1;
        unsigned LC4G1D1T               :1;
        unsigned LC4G1D2N               :1;
        unsigned LC4G1D2T               :1;
        unsigned LC4G1D3N               :1;
        unsigned LC4G1D3T               :1;
        unsigned LC4G1D4N               :1;
        unsigned LC4G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS0bits_t;
extern volatile CLC4GLS0bits_t CLC4GLS0bits __at(0x1E34);
// bitfield macros
#define _CLC4GLS0_LC4G1D1N_POSN                             0x0
#define _CLC4GLS0_LC4G1D1N_POSITION                         0x0
#define _CLC4GLS0_LC4G1D1N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1N_MASK                             0x1
#define _CLC4GLS0_LC4G1D1T_POSN                             0x1
#define _CLC4GLS0_LC4G1D1T_POSITION                         0x1
#define _CLC4GLS0_LC4G1D1T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1T_MASK                             0x2
#define _CLC4GLS0_LC4G1D2N_POSN                             0x2
#define _CLC4GLS0_LC4G1D2N_POSITION                         0x2
#define _CLC4GLS0_LC4G1D2N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2N_MASK                             0x4
#define _CLC4GLS0_LC4G1D2T_POSN                             0x3
#define _CLC4GLS0_LC4G1D2T_POSITION                         0x3
#define _CLC4GLS0_LC4G1D2T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2T_MASK                             0x8
#define _CLC4GLS0_LC4G1D3N_POSN                             0x4
#define _CLC4GLS0_LC4G1D3N_POSITION                         0x4
#define _CLC4GLS0_LC4G1D3N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3N_MASK                             0x10
#define _CLC4GLS0_LC4G1D3T_POSN                             0x5
#define _CLC4GLS0_LC4G1D3T_POSITION                         0x5
#define _CLC4GLS0_LC4G1D3T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3T_MASK                             0x20
#define _CLC4GLS0_LC4G1D4N_POSN                             0x6
#define _CLC4GLS0_LC4G1D4N_POSITION                         0x6
#define _CLC4GLS0_LC4G1D4N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4N_MASK                             0x40
#define _CLC4GLS0_LC4G1D4T_POSN                             0x7
#define _CLC4GLS0_LC4G1D4T_POSITION                         0x7
#define _CLC4GLS0_LC4G1D4T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4T_MASK                             0x80
#define _CLC4GLS0_D1N_POSN                                  0x0
#define _CLC4GLS0_D1N_POSITION                              0x0
#define _CLC4GLS0_D1N_SIZE                                  0x1
#define _CLC4GLS0_D1N_LENGTH                                0x1
#define _CLC4GLS0_D1N_MASK                                  0x1
#define _CLC4GLS0_D1T_POSN                                  0x1
#define _CLC4GLS0_D1T_POSITION                              0x1
#define _CLC4GLS0_D1T_SIZE                                  0x1
#define _CLC4GLS0_D1T_LENGTH                                0x1
#define _CLC4GLS0_D1T_MASK                                  0x2
#define _CLC4GLS0_D2N_POSN                                  0x2
#define _CLC4GLS0_D2N_POSITION                              0x2
#define _CLC4GLS0_D2N_SIZE                                  0x1
#define _CLC4GLS0_D2N_LENGTH                                0x1
#define _CLC4GLS0_D2N_MASK                                  0x4
#define _CLC4GLS0_D2T_POSN                                  0x3
#define _CLC4GLS0_D2T_POSITION                              0x3
#define _CLC4GLS0_D2T_SIZE                                  0x1
#define _CLC4GLS0_D2T_LENGTH                                0x1
#define _CLC4GLS0_D2T_MASK                                  0x8
#define _CLC4GLS0_D3N_POSN                                  0x4
#define _CLC4GLS0_D3N_POSITION                              0x4
#define _CLC4GLS0_D3N_SIZE                                  0x1
#define _CLC4GLS0_D3N_LENGTH                                0x1
#define _CLC4GLS0_D3N_MASK                                  0x10
#define _CLC4GLS0_D3T_POSN                                  0x5
#define _CLC4GLS0_D3T_POSITION                              0x5
#define _CLC4GLS0_D3T_SIZE                                  0x1
#define _CLC4GLS0_D3T_LENGTH                                0x1
#define _CLC4GLS0_D3T_MASK                                  0x20
#define _CLC4GLS0_D4N_POSN                                  0x6
#define _CLC4GLS0_D4N_POSITION                              0x6
#define _CLC4GLS0_D4N_SIZE                                  0x1
#define _CLC4GLS0_D4N_LENGTH                                0x1
#define _CLC4GLS0_D4N_MASK                                  0x40
#define _CLC4GLS0_D4T_POSN                                  0x7
#define _CLC4GLS0_D4T_POSITION                              0x7
#define _CLC4GLS0_D4T_SIZE                                  0x1
#define _CLC4GLS0_D4T_LENGTH                                0x1
#define _CLC4GLS0_D4T_MASK                                  0x80

// Register: CLC4GLS1
#define CLC4GLS1 CLC4GLS1
extern volatile unsigned char           CLC4GLS1            __at(0x1E35);
#ifndef _LIB_BUILD
asm("CLC4GLS1 equ 01E35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G2D1N               :1;
        unsigned LC4G2D1T               :1;
        unsigned LC4G2D2N               :1;
        unsigned LC4G2D2T               :1;
        unsigned LC4G2D3N               :1;
        unsigned LC4G2D3T               :1;
        unsigned LC4G2D4N               :1;
        unsigned LC4G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS1bits_t;
extern volatile CLC4GLS1bits_t CLC4GLS1bits __at(0x1E35);
// bitfield macros
#define _CLC4GLS1_LC4G2D1N_POSN                             0x0
#define _CLC4GLS1_LC4G2D1N_POSITION                         0x0
#define _CLC4GLS1_LC4G2D1N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1N_MASK                             0x1
#define _CLC4GLS1_LC4G2D1T_POSN                             0x1
#define _CLC4GLS1_LC4G2D1T_POSITION                         0x1
#define _CLC4GLS1_LC4G2D1T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1T_MASK                             0x2
#define _CLC4GLS1_LC4G2D2N_POSN                             0x2
#define _CLC4GLS1_LC4G2D2N_POSITION                         0x2
#define _CLC4GLS1_LC4G2D2N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2N_MASK                             0x4
#define _CLC4GLS1_LC4G2D2T_POSN                             0x3
#define _CLC4GLS1_LC4G2D2T_POSITION                         0x3
#define _CLC4GLS1_LC4G2D2T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2T_MASK                             0x8
#define _CLC4GLS1_LC4G2D3N_POSN                             0x4
#define _CLC4GLS1_LC4G2D3N_POSITION                         0x4
#define _CLC4GLS1_LC4G2D3N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3N_MASK                             0x10
#define _CLC4GLS1_LC4G2D3T_POSN                             0x5
#define _CLC4GLS1_LC4G2D3T_POSITION                         0x5
#define _CLC4GLS1_LC4G2D3T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3T_MASK                             0x20
#define _CLC4GLS1_LC4G2D4N_POSN                             0x6
#define _CLC4GLS1_LC4G2D4N_POSITION                         0x6
#define _CLC4GLS1_LC4G2D4N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4N_MASK                             0x40
#define _CLC4GLS1_LC4G2D4T_POSN                             0x7
#define _CLC4GLS1_LC4G2D4T_POSITION                         0x7
#define _CLC4GLS1_LC4G2D4T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4T_MASK                             0x80
#define _CLC4GLS1_D1N_POSN                                  0x0
#define _CLC4GLS1_D1N_POSITION                              0x0
#define _CLC4GLS1_D1N_SIZE                                  0x1
#define _CLC4GLS1_D1N_LENGTH                                0x1
#define _CLC4GLS1_D1N_MASK                                  0x1
#define _CLC4GLS1_D1T_POSN                                  0x1
#define _CLC4GLS1_D1T_POSITION                              0x1
#define _CLC4GLS1_D1T_SIZE                                  0x1
#define _CLC4GLS1_D1T_LENGTH                                0x1
#define _CLC4GLS1_D1T_MASK                                  0x2
#define _CLC4GLS1_D2N_POSN                                  0x2
#define _CLC4GLS1_D2N_POSITION                              0x2
#define _CLC4GLS1_D2N_SIZE                                  0x1
#define _CLC4GLS1_D2N_LENGTH                                0x1
#define _CLC4GLS1_D2N_MASK                                  0x4
#define _CLC4GLS1_D2T_POSN                                  0x3
#define _CLC4GLS1_D2T_POSITION                              0x3
#define _CLC4GLS1_D2T_SIZE                                  0x1
#define _CLC4GLS1_D2T_LENGTH                                0x1
#define _CLC4GLS1_D2T_MASK                                  0x8
#define _CLC4GLS1_D3N_POSN                                  0x4
#define _CLC4GLS1_D3N_POSITION                              0x4
#define _CLC4GLS1_D3N_SIZE                                  0x1
#define _CLC4GLS1_D3N_LENGTH                                0x1
#define _CLC4GLS1_D3N_MASK                                  0x10
#define _CLC4GLS1_D3T_POSN                                  0x5
#define _CLC4GLS1_D3T_POSITION                              0x5
#define _CLC4GLS1_D3T_SIZE                                  0x1
#define _CLC4GLS1_D3T_LENGTH                                0x1
#define _CLC4GLS1_D3T_MASK                                  0x20
#define _CLC4GLS1_D4N_POSN                                  0x6
#define _CLC4GLS1_D4N_POSITION                              0x6
#define _CLC4GLS1_D4N_SIZE                                  0x1
#define _CLC4GLS1_D4N_LENGTH                                0x1
#define _CLC4GLS1_D4N_MASK                                  0x40
#define _CLC4GLS1_D4T_POSN                                  0x7
#define _CLC4GLS1_D4T_POSITION                              0x7
#define _CLC4GLS1_D4T_SIZE                                  0x1
#define _CLC4GLS1_D4T_LENGTH                                0x1
#define _CLC4GLS1_D4T_MASK                                  0x80

// Register: CLC4GLS2
#define CLC4GLS2 CLC4GLS2
extern volatile unsigned char           CLC4GLS2            __at(0x1E36);
#ifndef _LIB_BUILD
asm("CLC4GLS2 equ 01E36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G3D1N               :1;
        unsigned LC4G3D1T               :1;
        unsigned LC4G3D2N               :1;
        unsigned LC4G3D2T               :1;
        unsigned LC4G3D3N               :1;
        unsigned LC4G3D3T               :1;
        unsigned LC4G3D4N               :1;
        unsigned LC4G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS2bits_t;
extern volatile CLC4GLS2bits_t CLC4GLS2bits __at(0x1E36);
// bitfield macros
#define _CLC4GLS2_LC4G3D1N_POSN                             0x0
#define _CLC4GLS2_LC4G3D1N_POSITION                         0x0
#define _CLC4GLS2_LC4G3D1N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1N_MASK                             0x1
#define _CLC4GLS2_LC4G3D1T_POSN                             0x1
#define _CLC4GLS2_LC4G3D1T_POSITION                         0x1
#define _CLC4GLS2_LC4G3D1T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1T_MASK                             0x2
#define _CLC4GLS2_LC4G3D2N_POSN                             0x2
#define _CLC4GLS2_LC4G3D2N_POSITION                         0x2
#define _CLC4GLS2_LC4G3D2N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2N_MASK                             0x4
#define _CLC4GLS2_LC4G3D2T_POSN                             0x3
#define _CLC4GLS2_LC4G3D2T_POSITION                         0x3
#define _CLC4GLS2_LC4G3D2T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2T_MASK                             0x8
#define _CLC4GLS2_LC4G3D3N_POSN                             0x4
#define _CLC4GLS2_LC4G3D3N_POSITION                         0x4
#define _CLC4GLS2_LC4G3D3N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3N_MASK                             0x10
#define _CLC4GLS2_LC4G3D3T_POSN                             0x5
#define _CLC4GLS2_LC4G3D3T_POSITION                         0x5
#define _CLC4GLS2_LC4G3D3T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3T_MASK                             0x20
#define _CLC4GLS2_LC4G3D4N_POSN                             0x6
#define _CLC4GLS2_LC4G3D4N_POSITION                         0x6
#define _CLC4GLS2_LC4G3D4N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4N_MASK                             0x40
#define _CLC4GLS2_LC4G3D4T_POSN                             0x7
#define _CLC4GLS2_LC4G3D4T_POSITION                         0x7
#define _CLC4GLS2_LC4G3D4T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4T_MASK                             0x80
#define _CLC4GLS2_D1N_POSN                                  0x0
#define _CLC4GLS2_D1N_POSITION                              0x0
#define _CLC4GLS2_D1N_SIZE                                  0x1
#define _CLC4GLS2_D1N_LENGTH                                0x1
#define _CLC4GLS2_D1N_MASK                                  0x1
#define _CLC4GLS2_D1T_POSN                                  0x1
#define _CLC4GLS2_D1T_POSITION                              0x1
#define _CLC4GLS2_D1T_SIZE                                  0x1
#define _CLC4GLS2_D1T_LENGTH                                0x1
#define _CLC4GLS2_D1T_MASK                                  0x2
#define _CLC4GLS2_D2N_POSN                                  0x2
#define _CLC4GLS2_D2N_POSITION                              0x2
#define _CLC4GLS2_D2N_SIZE                                  0x1
#define _CLC4GLS2_D2N_LENGTH                                0x1
#define _CLC4GLS2_D2N_MASK                                  0x4
#define _CLC4GLS2_D2T_POSN                                  0x3
#define _CLC4GLS2_D2T_POSITION                              0x3
#define _CLC4GLS2_D2T_SIZE                                  0x1
#define _CLC4GLS2_D2T_LENGTH                                0x1
#define _CLC4GLS2_D2T_MASK                                  0x8
#define _CLC4GLS2_D3N_POSN                                  0x4
#define _CLC4GLS2_D3N_POSITION                              0x4
#define _CLC4GLS2_D3N_SIZE                                  0x1
#define _CLC4GLS2_D3N_LENGTH                                0x1
#define _CLC4GLS2_D3N_MASK                                  0x10
#define _CLC4GLS2_D3T_POSN                                  0x5
#define _CLC4GLS2_D3T_POSITION                              0x5
#define _CLC4GLS2_D3T_SIZE                                  0x1
#define _CLC4GLS2_D3T_LENGTH                                0x1
#define _CLC4GLS2_D3T_MASK                                  0x20
#define _CLC4GLS2_D4N_POSN                                  0x6
#define _CLC4GLS2_D4N_POSITION                              0x6
#define _CLC4GLS2_D4N_SIZE                                  0x1
#define _CLC4GLS2_D4N_LENGTH                                0x1
#define _CLC4GLS2_D4N_MASK                                  0x40
#define _CLC4GLS2_D4T_POSN                                  0x7
#define _CLC4GLS2_D4T_POSITION                              0x7
#define _CLC4GLS2_D4T_SIZE                                  0x1
#define _CLC4GLS2_D4T_LENGTH                                0x1
#define _CLC4GLS2_D4T_MASK                                  0x80

// Register: CLC4GLS3
#define CLC4GLS3 CLC4GLS3
extern volatile unsigned char           CLC4GLS3            __at(0x1E37);
#ifndef _LIB_BUILD
asm("CLC4GLS3 equ 01E37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G4D1N               :1;
        unsigned LC4G4D1T               :1;
        unsigned LC4G4D2N               :1;
        unsigned LC4G4D2T               :1;
        unsigned LC4G4D3N               :1;
        unsigned LC4G4D3T               :1;
        unsigned LC4G4D4N               :1;
        unsigned LC4G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC4GLS3bits_t;
extern volatile CLC4GLS3bits_t CLC4GLS3bits __at(0x1E37);
// bitfield macros
#define _CLC4GLS3_LC4G4D1N_POSN                             0x0
#define _CLC4GLS3_LC4G4D1N_POSITION                         0x0
#define _CLC4GLS3_LC4G4D1N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1N_MASK                             0x1
#define _CLC4GLS3_LC4G4D1T_POSN                             0x1
#define _CLC4GLS3_LC4G4D1T_POSITION                         0x1
#define _CLC4GLS3_LC4G4D1T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1T_MASK                             0x2
#define _CLC4GLS3_LC4G4D2N_POSN                             0x2
#define _CLC4GLS3_LC4G4D2N_POSITION                         0x2
#define _CLC4GLS3_LC4G4D2N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2N_MASK                             0x4
#define _CLC4GLS3_LC4G4D2T_POSN                             0x3
#define _CLC4GLS3_LC4G4D2T_POSITION                         0x3
#define _CLC4GLS3_LC4G4D2T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2T_MASK                             0x8
#define _CLC4GLS3_LC4G4D3N_POSN                             0x4
#define _CLC4GLS3_LC4G4D3N_POSITION                         0x4
#define _CLC4GLS3_LC4G4D3N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3N_MASK                             0x10
#define _CLC4GLS3_LC4G4D3T_POSN                             0x5
#define _CLC4GLS3_LC4G4D3T_POSITION                         0x5
#define _CLC4GLS3_LC4G4D3T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3T_MASK                             0x20
#define _CLC4GLS3_LC4G4D4N_POSN                             0x6
#define _CLC4GLS3_LC4G4D4N_POSITION                         0x6
#define _CLC4GLS3_LC4G4D4N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4N_MASK                             0x40
#define _CLC4GLS3_LC4G4D4T_POSN                             0x7
#define _CLC4GLS3_LC4G4D4T_POSITION                         0x7
#define _CLC4GLS3_LC4G4D4T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4T_MASK                             0x80
#define _CLC4GLS3_G4D1N_POSN                                0x0
#define _CLC4GLS3_G4D1N_POSITION                            0x0
#define _CLC4GLS3_G4D1N_SIZE                                0x1
#define _CLC4GLS3_G4D1N_LENGTH                              0x1
#define _CLC4GLS3_G4D1N_MASK                                0x1
#define _CLC4GLS3_G4D1T_POSN                                0x1
#define _CLC4GLS3_G4D1T_POSITION                            0x1
#define _CLC4GLS3_G4D1T_SIZE                                0x1
#define _CLC4GLS3_G4D1T_LENGTH                              0x1
#define _CLC4GLS3_G4D1T_MASK                                0x2
#define _CLC4GLS3_G4D2N_POSN                                0x2
#define _CLC4GLS3_G4D2N_POSITION                            0x2
#define _CLC4GLS3_G4D2N_SIZE                                0x1
#define _CLC4GLS3_G4D2N_LENGTH                              0x1
#define _CLC4GLS3_G4D2N_MASK                                0x4
#define _CLC4GLS3_G4D2T_POSN                                0x3
#define _CLC4GLS3_G4D2T_POSITION                            0x3
#define _CLC4GLS3_G4D2T_SIZE                                0x1
#define _CLC4GLS3_G4D2T_LENGTH                              0x1
#define _CLC4GLS3_G4D2T_MASK                                0x8
#define _CLC4GLS3_G4D3N_POSN                                0x4
#define _CLC4GLS3_G4D3N_POSITION                            0x4
#define _CLC4GLS3_G4D3N_SIZE                                0x1
#define _CLC4GLS3_G4D3N_LENGTH                              0x1
#define _CLC4GLS3_G4D3N_MASK                                0x10
#define _CLC4GLS3_G4D3T_POSN                                0x5
#define _CLC4GLS3_G4D3T_POSITION                            0x5
#define _CLC4GLS3_G4D3T_SIZE                                0x1
#define _CLC4GLS3_G4D3T_LENGTH                              0x1
#define _CLC4GLS3_G4D3T_MASK                                0x20
#define _CLC4GLS3_G4D4N_POSN                                0x6
#define _CLC4GLS3_G4D4N_POSITION                            0x6
#define _CLC4GLS3_G4D4N_SIZE                                0x1
#define _CLC4GLS3_G4D4N_LENGTH                              0x1
#define _CLC4GLS3_G4D4N_MASK                                0x40
#define _CLC4GLS3_G4D4T_POSN                                0x7
#define _CLC4GLS3_G4D4T_POSITION                            0x7
#define _CLC4GLS3_G4D4T_SIZE                                0x1
#define _CLC4GLS3_G4D4T_LENGTH                              0x1
#define _CLC4GLS3_G4D4T_MASK                                0x80

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x1E8F);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 01E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x1E8F);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0x1E90);
#ifndef _LIB_BUILD
asm("INTPPS equ 01E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS                 :6;
    };
    struct {
        unsigned INTPPS0                :1;
        unsigned INTPPS1                :1;
        unsigned INTPPS2                :1;
        unsigned INTPPS3                :1;
        unsigned INTPPS4                :1;
        unsigned INTPPS5                :1;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0x1E90);
// bitfield macros
#define _INTPPS_INTPPS_POSN                                 0x0
#define _INTPPS_INTPPS_POSITION                             0x0
#define _INTPPS_INTPPS_SIZE                                 0x6
#define _INTPPS_INTPPS_LENGTH                               0x6
#define _INTPPS_INTPPS_MASK                                 0x3F
#define _INTPPS_INTPPS0_POSN                                0x0
#define _INTPPS_INTPPS0_POSITION                            0x0
#define _INTPPS_INTPPS0_SIZE                                0x1
#define _INTPPS_INTPPS0_LENGTH                              0x1
#define _INTPPS_INTPPS0_MASK                                0x1
#define _INTPPS_INTPPS1_POSN                                0x1
#define _INTPPS_INTPPS1_POSITION                            0x1
#define _INTPPS_INTPPS1_SIZE                                0x1
#define _INTPPS_INTPPS1_LENGTH                              0x1
#define _INTPPS_INTPPS1_MASK                                0x2
#define _INTPPS_INTPPS2_POSN                                0x2
#define _INTPPS_INTPPS2_POSITION                            0x2
#define _INTPPS_INTPPS2_SIZE                                0x1
#define _INTPPS_INTPPS2_LENGTH                              0x1
#define _INTPPS_INTPPS2_MASK                                0x4
#define _INTPPS_INTPPS3_POSN                                0x3
#define _INTPPS_INTPPS3_POSITION                            0x3
#define _INTPPS_INTPPS3_SIZE                                0x1
#define _INTPPS_INTPPS3_LENGTH                              0x1
#define _INTPPS_INTPPS3_MASK                                0x8
#define _INTPPS_INTPPS4_POSN                                0x4
#define _INTPPS_INTPPS4_POSITION                            0x4
#define _INTPPS_INTPPS4_SIZE                                0x1
#define _INTPPS_INTPPS4_LENGTH                              0x1
#define _INTPPS_INTPPS4_MASK                                0x10
#define _INTPPS_INTPPS5_POSN                                0x5
#define _INTPPS_INTPPS5_POSITION                            0x5
#define _INTPPS_INTPPS5_SIZE                                0x1
#define _INTPPS_INTPPS5_LENGTH                              0x1
#define _INTPPS_INTPPS5_MASK                                0x20

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x1E91);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 01E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :6;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
        unsigned T0CKIPPS4              :1;
        unsigned T0CKIPPS5              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x1E91);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x6
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x6
#define _T0CKIPPS_T0CKIPPS_MASK                             0x3F
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8
#define _T0CKIPPS_T0CKIPPS4_POSN                            0x4
#define _T0CKIPPS_T0CKIPPS4_POSITION                        0x4
#define _T0CKIPPS_T0CKIPPS4_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS4_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS4_MASK                            0x10
#define _T0CKIPPS_T0CKIPPS5_POSN                            0x5
#define _T0CKIPPS_T0CKIPPS5_POSITION                        0x5
#define _T0CKIPPS_T0CKIPPS5_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS5_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS5_MASK                            0x20

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x1E92);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 01E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :6;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
        unsigned T1CKIPPS5              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x1E92);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x6
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x6
#define _T1CKIPPS_T1CKIPPS_MASK                             0x3F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10
#define _T1CKIPPS_T1CKIPPS5_POSN                            0x5
#define _T1CKIPPS_T1CKIPPS5_POSITION                        0x5
#define _T1CKIPPS_T1CKIPPS5_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS5_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS5_MASK                            0x20

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x1E93);
#ifndef _LIB_BUILD
asm("T1GPPS equ 01E93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :6;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
        unsigned T1GPPS5                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x1E93);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x6
#define _T1GPPS_T1GPPS_LENGTH                               0x6
#define _T1GPPS_T1GPPS_MASK                                 0x3F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10
#define _T1GPPS_T1GPPS5_POSN                                0x5
#define _T1GPPS_T1GPPS5_POSITION                            0x5
#define _T1GPPS_T1GPPS5_SIZE                                0x1
#define _T1GPPS_T1GPPS5_LENGTH                              0x1
#define _T1GPPS_T1GPPS5_MASK                                0x20

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0x1E9C);
#ifndef _LIB_BUILD
asm("T2INPPS equ 01E9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :6;
    };
    struct {
        unsigned T2INPPS0               :1;
        unsigned T2INPPS1               :1;
        unsigned T2INPPS2               :1;
        unsigned T2INPPS3               :1;
        unsigned T2INPPS4               :1;
        unsigned T2INPPS5               :1;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0x1E9C);
// bitfield macros
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x6
#define _T2INPPS_T2INPPS_LENGTH                             0x6
#define _T2INPPS_T2INPPS_MASK                               0x3F
#define _T2INPPS_T2INPPS0_POSN                              0x0
#define _T2INPPS_T2INPPS0_POSITION                          0x0
#define _T2INPPS_T2INPPS0_SIZE                              0x1
#define _T2INPPS_T2INPPS0_LENGTH                            0x1
#define _T2INPPS_T2INPPS0_MASK                              0x1
#define _T2INPPS_T2INPPS1_POSN                              0x1
#define _T2INPPS_T2INPPS1_POSITION                          0x1
#define _T2INPPS_T2INPPS1_SIZE                              0x1
#define _T2INPPS_T2INPPS1_LENGTH                            0x1
#define _T2INPPS_T2INPPS1_MASK                              0x2
#define _T2INPPS_T2INPPS2_POSN                              0x2
#define _T2INPPS_T2INPPS2_POSITION                          0x2
#define _T2INPPS_T2INPPS2_SIZE                              0x1
#define _T2INPPS_T2INPPS2_LENGTH                            0x1
#define _T2INPPS_T2INPPS2_MASK                              0x4
#define _T2INPPS_T2INPPS3_POSN                              0x3
#define _T2INPPS_T2INPPS3_POSITION                          0x3
#define _T2INPPS_T2INPPS3_SIZE                              0x1
#define _T2INPPS_T2INPPS3_LENGTH                            0x1
#define _T2INPPS_T2INPPS3_MASK                              0x8
#define _T2INPPS_T2INPPS4_POSN                              0x4
#define _T2INPPS_T2INPPS4_POSITION                          0x4
#define _T2INPPS_T2INPPS4_SIZE                              0x1
#define _T2INPPS_T2INPPS4_LENGTH                            0x1
#define _T2INPPS_T2INPPS4_MASK                              0x10
#define _T2INPPS_T2INPPS5_POSN                              0x5
#define _T2INPPS_T2INPPS5_POSITION                          0x5
#define _T2INPPS_T2INPPS5_SIZE                              0x1
#define _T2INPPS_T2INPPS5_LENGTH                            0x1
#define _T2INPPS_T2INPPS5_MASK                              0x20

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x1EA1);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 01EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :6;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
        unsigned CCP1PPS5               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x1EA1);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x6
#define _CCP1PPS_CCP1PPS_LENGTH                             0x6
#define _CCP1PPS_CCP1PPS_MASK                               0x3F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10
#define _CCP1PPS_CCP1PPS5_POSN                              0x5
#define _CCP1PPS_CCP1PPS5_POSITION                          0x5
#define _CCP1PPS_CCP1PPS5_SIZE                              0x1
#define _CCP1PPS_CCP1PPS5_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS5_MASK                              0x20

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x1EA2);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 01EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :6;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
        unsigned CCP2PPS5               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x1EA2);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x6
#define _CCP2PPS_CCP2PPS_LENGTH                             0x6
#define _CCP2PPS_CCP2PPS_MASK                               0x3F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10
#define _CCP2PPS_CCP2PPS5_POSN                              0x5
#define _CCP2PPS_CCP2PPS5_POSITION                          0x5
#define _CCP2PPS_CCP2PPS5_SIZE                              0x1
#define _CCP2PPS_CCP2PPS5_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS5_MASK                              0x20

// Register: CWG1PPS
#define CWG1PPS CWG1PPS
extern volatile unsigned char           CWG1PPS             __at(0x1EB1);
#ifndef _LIB_BUILD
asm("CWG1PPS equ 01EB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1PPS                :6;
    };
    struct {
        unsigned CWG1PPS0               :1;
        unsigned CWG1PPS1               :1;
        unsigned CWG1PPS2               :1;
        unsigned CWG1PPS3               :1;
        unsigned CWG1PPS4               :1;
        unsigned CWG1PPS5               :1;
    };
} CWG1PPSbits_t;
extern volatile CWG1PPSbits_t CWG1PPSbits __at(0x1EB1);
// bitfield macros
#define _CWG1PPS_CWG1PPS_POSN                               0x0
#define _CWG1PPS_CWG1PPS_POSITION                           0x0
#define _CWG1PPS_CWG1PPS_SIZE                               0x6
#define _CWG1PPS_CWG1PPS_LENGTH                             0x6
#define _CWG1PPS_CWG1PPS_MASK                               0x3F
#define _CWG1PPS_CWG1PPS0_POSN                              0x0
#define _CWG1PPS_CWG1PPS0_POSITION                          0x0
#define _CWG1PPS_CWG1PPS0_SIZE                              0x1
#define _CWG1PPS_CWG1PPS0_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS0_MASK                              0x1
#define _CWG1PPS_CWG1PPS1_POSN                              0x1
#define _CWG1PPS_CWG1PPS1_POSITION                          0x1
#define _CWG1PPS_CWG1PPS1_SIZE                              0x1
#define _CWG1PPS_CWG1PPS1_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS1_MASK                              0x2
#define _CWG1PPS_CWG1PPS2_POSN                              0x2
#define _CWG1PPS_CWG1PPS2_POSITION                          0x2
#define _CWG1PPS_CWG1PPS2_SIZE                              0x1
#define _CWG1PPS_CWG1PPS2_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS2_MASK                              0x4
#define _CWG1PPS_CWG1PPS3_POSN                              0x3
#define _CWG1PPS_CWG1PPS3_POSITION                          0x3
#define _CWG1PPS_CWG1PPS3_SIZE                              0x1
#define _CWG1PPS_CWG1PPS3_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS3_MASK                              0x8
#define _CWG1PPS_CWG1PPS4_POSN                              0x4
#define _CWG1PPS_CWG1PPS4_POSITION                          0x4
#define _CWG1PPS_CWG1PPS4_SIZE                              0x1
#define _CWG1PPS_CWG1PPS4_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS4_MASK                              0x10
#define _CWG1PPS_CWG1PPS5_POSN                              0x5
#define _CWG1PPS_CWG1PPS5_POSITION                          0x5
#define _CWG1PPS_CWG1PPS5_SIZE                              0x1
#define _CWG1PPS_CWG1PPS5_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS5_MASK                              0x20

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x1EBB);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 01EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :6;
    };
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
        unsigned CLCIN0PPS5             :1;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x1EBB);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x6
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x6
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x3F
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10
#define _CLCIN0PPS_CLCIN0PPS5_POSN                          0x5
#define _CLCIN0PPS_CLCIN0PPS5_POSITION                      0x5
#define _CLCIN0PPS_CLCIN0PPS5_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS5_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS5_MASK                          0x20

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x1EBC);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 01EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :6;
    };
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
        unsigned CLCIN1PPS5             :1;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x1EBC);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x6
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x6
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x3F
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10
#define _CLCIN1PPS_CLCIN1PPS5_POSN                          0x5
#define _CLCIN1PPS_CLCIN1PPS5_POSITION                      0x5
#define _CLCIN1PPS_CLCIN1PPS5_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS5_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS5_MASK                          0x20

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x1EBD);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 01EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :6;
    };
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
        unsigned CLCIN2PPS5             :1;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x1EBD);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x6
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x6
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x3F
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10
#define _CLCIN2PPS_CLCIN2PPS5_POSN                          0x5
#define _CLCIN2PPS_CLCIN2PPS5_POSITION                      0x5
#define _CLCIN2PPS_CLCIN2PPS5_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS5_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS5_MASK                          0x20

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x1EBE);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 01EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :6;
    };
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
        unsigned CLCIN3PPS5             :1;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x1EBE);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x6
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x6
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x3F
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10
#define _CLCIN3PPS_CLCIN3PPS5_POSN                          0x5
#define _CLCIN3PPS_CLCIN3PPS5_POSITION                      0x5
#define _CLCIN3PPS_CLCIN3PPS5_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS5_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS5_MASK                          0x20

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0x1EC3);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 01EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACTPPS               :6;
    };
    struct {
        unsigned ADACTPPS0              :1;
        unsigned ADACTPPS1              :1;
        unsigned ADACTPPS2              :1;
        unsigned ADACTPPS3              :1;
        unsigned ADACTPPS4              :1;
        unsigned ADACTPPS5              :1;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0x1EC3);
// bitfield macros
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x6
#define _ADACTPPS_ADACTPPS_LENGTH                           0x6
#define _ADACTPPS_ADACTPPS_MASK                             0x3F
#define _ADACTPPS_ADACTPPS0_POSN                            0x0
#define _ADACTPPS_ADACTPPS0_POSITION                        0x0
#define _ADACTPPS_ADACTPPS0_SIZE                            0x1
#define _ADACTPPS_ADACTPPS0_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS0_MASK                            0x1
#define _ADACTPPS_ADACTPPS1_POSN                            0x1
#define _ADACTPPS_ADACTPPS1_POSITION                        0x1
#define _ADACTPPS_ADACTPPS1_SIZE                            0x1
#define _ADACTPPS_ADACTPPS1_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS1_MASK                            0x2
#define _ADACTPPS_ADACTPPS2_POSN                            0x2
#define _ADACTPPS_ADACTPPS2_POSITION                        0x2
#define _ADACTPPS_ADACTPPS2_SIZE                            0x1
#define _ADACTPPS_ADACTPPS2_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS2_MASK                            0x4
#define _ADACTPPS_ADACTPPS3_POSN                            0x3
#define _ADACTPPS_ADACTPPS3_POSITION                        0x3
#define _ADACTPPS_ADACTPPS3_SIZE                            0x1
#define _ADACTPPS_ADACTPPS3_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS3_MASK                            0x8
#define _ADACTPPS_ADACTPPS4_POSN                            0x4
#define _ADACTPPS_ADACTPPS4_POSITION                        0x4
#define _ADACTPPS_ADACTPPS4_SIZE                            0x1
#define _ADACTPPS_ADACTPPS4_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS4_MASK                            0x10
#define _ADACTPPS_ADACTPPS5_POSN                            0x5
#define _ADACTPPS_ADACTPPS5_POSITION                        0x5
#define _ADACTPPS_ADACTPPS5_SIZE                            0x1
#define _ADACTPPS_ADACTPPS5_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS5_MASK                            0x20

// Register: SSP1CLKPPS
#define SSP1CLKPPS SSP1CLKPPS
extern volatile unsigned char           SSP1CLKPPS          __at(0x1EC5);
#ifndef _LIB_BUILD
asm("SSP1CLKPPS equ 01EC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1CLKPPS             :6;
    };
    struct {
        unsigned SSP1CLKPPS0            :1;
        unsigned SSP1CLKPPS1            :1;
        unsigned SSP1CLKPPS2            :1;
        unsigned SSP1CLKPPS3            :1;
        unsigned SSP1CLKPPS4            :1;
        unsigned SSP1CLKPPS5            :1;
    };
} SSP1CLKPPSbits_t;
extern volatile SSP1CLKPPSbits_t SSP1CLKPPSbits __at(0x1EC5);
// bitfield macros
#define _SSP1CLKPPS_SSP1CLKPPS_POSN                         0x0
#define _SSP1CLKPPS_SSP1CLKPPS_POSITION                     0x0
#define _SSP1CLKPPS_SSP1CLKPPS_SIZE                         0x6
#define _SSP1CLKPPS_SSP1CLKPPS_LENGTH                       0x6
#define _SSP1CLKPPS_SSP1CLKPPS_MASK                         0x3F
#define _SSP1CLKPPS_SSP1CLKPPS0_POSN                        0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_POSITION                    0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_MASK                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSN                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSITION                    0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_MASK                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSN                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSITION                    0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_MASK                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS3_POSN                        0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_POSITION                    0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_MASK                        0x8
#define _SSP1CLKPPS_SSP1CLKPPS4_POSN                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_POSITION                    0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_MASK                        0x10
#define _SSP1CLKPPS_SSP1CLKPPS5_POSN                        0x5
#define _SSP1CLKPPS_SSP1CLKPPS5_POSITION                    0x5
#define _SSP1CLKPPS_SSP1CLKPPS5_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS5_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS5_MASK                        0x20

// Register: SSP1DATPPS
#define SSP1DATPPS SSP1DATPPS
extern volatile unsigned char           SSP1DATPPS          __at(0x1EC6);
#ifndef _LIB_BUILD
asm("SSP1DATPPS equ 01EC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1DATPPS             :6;
    };
    struct {
        unsigned SSP1DATPPS0            :1;
        unsigned SSP1DATPPS1            :1;
        unsigned SSP1DATPPS2            :1;
        unsigned SSP1DATPPS3            :1;
        unsigned SSP1DATPPS4            :1;
        unsigned SSP1DATPPS5            :1;
    };
} SSP1DATPPSbits_t;
extern volatile SSP1DATPPSbits_t SSP1DATPPSbits __at(0x1EC6);
// bitfield macros
#define _SSP1DATPPS_SSP1DATPPS_POSN                         0x0
#define _SSP1DATPPS_SSP1DATPPS_POSITION                     0x0
#define _SSP1DATPPS_SSP1DATPPS_SIZE                         0x6
#define _SSP1DATPPS_SSP1DATPPS_LENGTH                       0x6
#define _SSP1DATPPS_SSP1DATPPS_MASK                         0x3F
#define _SSP1DATPPS_SSP1DATPPS0_POSN                        0x0
#define _SSP1DATPPS_SSP1DATPPS0_POSITION                    0x0
#define _SSP1DATPPS_SSP1DATPPS0_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS0_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS0_MASK                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSN                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSITION                    0x1
#define _SSP1DATPPS_SSP1DATPPS1_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS1_MASK                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSN                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSITION                    0x2
#define _SSP1DATPPS_SSP1DATPPS2_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS2_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS2_MASK                        0x4
#define _SSP1DATPPS_SSP1DATPPS3_POSN                        0x3
#define _SSP1DATPPS_SSP1DATPPS3_POSITION                    0x3
#define _SSP1DATPPS_SSP1DATPPS3_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS3_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS3_MASK                        0x8
#define _SSP1DATPPS_SSP1DATPPS4_POSN                        0x4
#define _SSP1DATPPS_SSP1DATPPS4_POSITION                    0x4
#define _SSP1DATPPS_SSP1DATPPS4_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS4_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS4_MASK                        0x10
#define _SSP1DATPPS_SSP1DATPPS5_POSN                        0x5
#define _SSP1DATPPS_SSP1DATPPS5_POSITION                    0x5
#define _SSP1DATPPS_SSP1DATPPS5_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS5_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS5_MASK                        0x20

// Register: SSP1SSPPS
#define SSP1SSPPS SSP1SSPPS
extern volatile unsigned char           SSP1SSPPS           __at(0x1EC7);
#ifndef _LIB_BUILD
asm("SSP1SSPPS equ 01EC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1SSPPS              :6;
    };
    struct {
        unsigned SSP1SSPPS0             :1;
        unsigned SSP1SSPPS1             :1;
        unsigned SSP1SSPPS2             :1;
        unsigned SSP1SSPPS3             :1;
        unsigned SSP1SSPPS4             :1;
        unsigned SSP1SSPPS5             :1;
    };
} SSP1SSPPSbits_t;
extern volatile SSP1SSPPSbits_t SSP1SSPPSbits __at(0x1EC7);
// bitfield macros
#define _SSP1SSPPS_SSP1SSPPS_POSN                           0x0
#define _SSP1SSPPS_SSP1SSPPS_POSITION                       0x0
#define _SSP1SSPPS_SSP1SSPPS_SIZE                           0x6
#define _SSP1SSPPS_SSP1SSPPS_LENGTH                         0x6
#define _SSP1SSPPS_SSP1SSPPS_MASK                           0x3F
#define _SSP1SSPPS_SSP1SSPPS0_POSN                          0x0
#define _SSP1SSPPS_SSP1SSPPS0_POSITION                      0x0
#define _SSP1SSPPS_SSP1SSPPS0_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS0_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS0_MASK                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSN                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSITION                      0x1
#define _SSP1SSPPS_SSP1SSPPS1_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS1_MASK                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSN                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSITION                      0x2
#define _SSP1SSPPS_SSP1SSPPS2_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS2_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS2_MASK                          0x4
#define _SSP1SSPPS_SSP1SSPPS3_POSN                          0x3
#define _SSP1SSPPS_SSP1SSPPS3_POSITION                      0x3
#define _SSP1SSPPS_SSP1SSPPS3_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS3_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS3_MASK                          0x8
#define _SSP1SSPPS_SSP1SSPPS4_POSN                          0x4
#define _SSP1SSPPS_SSP1SSPPS4_POSITION                      0x4
#define _SSP1SSPPS_SSP1SSPPS4_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS4_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS4_MASK                          0x10
#define _SSP1SSPPS_SSP1SSPPS5_POSN                          0x5
#define _SSP1SSPPS_SSP1SSPPS5_POSITION                      0x5
#define _SSP1SSPPS_SSP1SSPPS5_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS5_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS5_MASK                          0x20

// Register: SSP2CLKPPS
#define SSP2CLKPPS SSP2CLKPPS
extern volatile unsigned char           SSP2CLKPPS          __at(0x1EC8);
#ifndef _LIB_BUILD
asm("SSP2CLKPPS equ 01EC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP2CLKPPS             :6;
    };
    struct {
        unsigned SSP2CLKPPS0            :1;
        unsigned SSP2CLKPPS1            :1;
        unsigned SSP2CLKPPS2            :1;
        unsigned SSP2CLKPPS3            :1;
        unsigned SSP2CLKPPS4            :1;
        unsigned SSP2CLKPPS5            :1;
    };
} SSP2CLKPPSbits_t;
extern volatile SSP2CLKPPSbits_t SSP2CLKPPSbits __at(0x1EC8);
// bitfield macros
#define _SSP2CLKPPS_SSP2CLKPPS_POSN                         0x0
#define _SSP2CLKPPS_SSP2CLKPPS_POSITION                     0x0
#define _SSP2CLKPPS_SSP2CLKPPS_SIZE                         0x6
#define _SSP2CLKPPS_SSP2CLKPPS_LENGTH                       0x6
#define _SSP2CLKPPS_SSP2CLKPPS_MASK                         0x3F
#define _SSP2CLKPPS_SSP2CLKPPS0_POSN                        0x0
#define _SSP2CLKPPS_SSP2CLKPPS0_POSITION                    0x0
#define _SSP2CLKPPS_SSP2CLKPPS0_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS0_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS0_MASK                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_POSN                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_POSITION                    0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_MASK                        0x2
#define _SSP2CLKPPS_SSP2CLKPPS2_POSN                        0x2
#define _SSP2CLKPPS_SSP2CLKPPS2_POSITION                    0x2
#define _SSP2CLKPPS_SSP2CLKPPS2_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS2_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS2_MASK                        0x4
#define _SSP2CLKPPS_SSP2CLKPPS3_POSN                        0x3
#define _SSP2CLKPPS_SSP2CLKPPS3_POSITION                    0x3
#define _SSP2CLKPPS_SSP2CLKPPS3_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS3_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS3_MASK                        0x8
#define _SSP2CLKPPS_SSP2CLKPPS4_POSN                        0x4
#define _SSP2CLKPPS_SSP2CLKPPS4_POSITION                    0x4
#define _SSP2CLKPPS_SSP2CLKPPS4_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS4_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS4_MASK                        0x10
#define _SSP2CLKPPS_SSP2CLKPPS5_POSN                        0x5
#define _SSP2CLKPPS_SSP2CLKPPS5_POSITION                    0x5
#define _SSP2CLKPPS_SSP2CLKPPS5_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS5_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS5_MASK                        0x20

// Register: SSP2DATPPS
#define SSP2DATPPS SSP2DATPPS
extern volatile unsigned char           SSP2DATPPS          __at(0x1EC9);
#ifndef _LIB_BUILD
asm("SSP2DATPPS equ 01EC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP2DATPPS             :6;
    };
    struct {
        unsigned SSP2DATPPS0            :1;
        unsigned SSP2DATPPS1            :1;
        unsigned SSP2DATPPS2            :1;
        unsigned SSP2DATPPS3            :1;
        unsigned SSP2DATPPS4            :1;
        unsigned SSP2DATPPS5            :1;
    };
} SSP2DATPPSbits_t;
extern volatile SSP2DATPPSbits_t SSP2DATPPSbits __at(0x1EC9);
// bitfield macros
#define _SSP2DATPPS_SSP2DATPPS_POSN                         0x0
#define _SSP2DATPPS_SSP2DATPPS_POSITION                     0x0
#define _SSP2DATPPS_SSP2DATPPS_SIZE                         0x6
#define _SSP2DATPPS_SSP2DATPPS_LENGTH                       0x6
#define _SSP2DATPPS_SSP2DATPPS_MASK                         0x3F
#define _SSP2DATPPS_SSP2DATPPS0_POSN                        0x0
#define _SSP2DATPPS_SSP2DATPPS0_POSITION                    0x0
#define _SSP2DATPPS_SSP2DATPPS0_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS0_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS0_MASK                        0x1
#define _SSP2DATPPS_SSP2DATPPS1_POSN                        0x1
#define _SSP2DATPPS_SSP2DATPPS1_POSITION                    0x1
#define _SSP2DATPPS_SSP2DATPPS1_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS1_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS1_MASK                        0x2
#define _SSP2DATPPS_SSP2DATPPS2_POSN                        0x2
#define _SSP2DATPPS_SSP2DATPPS2_POSITION                    0x2
#define _SSP2DATPPS_SSP2DATPPS2_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS2_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS2_MASK                        0x4
#define _SSP2DATPPS_SSP2DATPPS3_POSN                        0x3
#define _SSP2DATPPS_SSP2DATPPS3_POSITION                    0x3
#define _SSP2DATPPS_SSP2DATPPS3_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS3_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS3_MASK                        0x8
#define _SSP2DATPPS_SSP2DATPPS4_POSN                        0x4
#define _SSP2DATPPS_SSP2DATPPS4_POSITION                    0x4
#define _SSP2DATPPS_SSP2DATPPS4_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS4_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS4_MASK                        0x10
#define _SSP2DATPPS_SSP2DATPPS5_POSN                        0x5
#define _SSP2DATPPS_SSP2DATPPS5_POSITION                    0x5
#define _SSP2DATPPS_SSP2DATPPS5_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS5_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS5_MASK                        0x20

// Register: SSP2SSPPS
#define SSP2SSPPS SSP2SSPPS
extern volatile unsigned char           SSP2SSPPS           __at(0x1ECA);
#ifndef _LIB_BUILD
asm("SSP2SSPPS equ 01ECAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP2SSPPS              :6;
    };
    struct {
        unsigned SSP2SSPPS0             :1;
        unsigned SSP2SSPPS1             :1;
        unsigned SSP2SSPPS2             :1;
        unsigned SSP2SSPPS3             :1;
        unsigned SSP2SSPPS4             :1;
        unsigned SSP2SSPPS5             :1;
    };
} SSP2SSPPSbits_t;
extern volatile SSP2SSPPSbits_t SSP2SSPPSbits __at(0x1ECA);
// bitfield macros
#define _SSP2SSPPS_SSP2SSPPS_POSN                           0x0
#define _SSP2SSPPS_SSP2SSPPS_POSITION                       0x0
#define _SSP2SSPPS_SSP2SSPPS_SIZE                           0x6
#define _SSP2SSPPS_SSP2SSPPS_LENGTH                         0x6
#define _SSP2SSPPS_SSP2SSPPS_MASK                           0x3F
#define _SSP2SSPPS_SSP2SSPPS0_POSN                          0x0
#define _SSP2SSPPS_SSP2SSPPS0_POSITION                      0x0
#define _SSP2SSPPS_SSP2SSPPS0_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS0_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS0_MASK                          0x1
#define _SSP2SSPPS_SSP2SSPPS1_POSN                          0x1
#define _SSP2SSPPS_SSP2SSPPS1_POSITION                      0x1
#define _SSP2SSPPS_SSP2SSPPS1_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS1_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS1_MASK                          0x2
#define _SSP2SSPPS_SSP2SSPPS2_POSN                          0x2
#define _SSP2SSPPS_SSP2SSPPS2_POSITION                      0x2
#define _SSP2SSPPS_SSP2SSPPS2_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS2_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS2_MASK                          0x4
#define _SSP2SSPPS_SSP2SSPPS3_POSN                          0x3
#define _SSP2SSPPS_SSP2SSPPS3_POSITION                      0x3
#define _SSP2SSPPS_SSP2SSPPS3_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS3_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS3_MASK                          0x8
#define _SSP2SSPPS_SSP2SSPPS4_POSN                          0x4
#define _SSP2SSPPS_SSP2SSPPS4_POSITION                      0x4
#define _SSP2SSPPS_SSP2SSPPS4_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS4_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS4_MASK                          0x10
#define _SSP2SSPPS_SSP2SSPPS5_POSN                          0x5
#define _SSP2SSPPS_SSP2SSPPS5_POSITION                      0x5
#define _SSP2SSPPS_SSP2SSPPS5_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS5_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS5_MASK                          0x20

// Register: RX1DTPPS
#define RX1DTPPS RX1DTPPS
extern volatile unsigned char           RX1DTPPS            __at(0x1ECB);
#ifndef _LIB_BUILD
asm("RX1DTPPS equ 01ECBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX1DTPPS               :6;
    };
    struct {
        unsigned RX1DTPPS0              :1;
        unsigned RX1DTPPS1              :1;
        unsigned RX1DTPPS2              :1;
        unsigned RX1DTPPS3              :1;
        unsigned RX1DTPPS4              :1;
        unsigned RX1DTPPS5              :1;
    };
} RX1DTPPSbits_t;
extern volatile RX1DTPPSbits_t RX1DTPPSbits __at(0x1ECB);
// bitfield macros
#define _RX1DTPPS_RX1DTPPS_POSN                             0x0
#define _RX1DTPPS_RX1DTPPS_POSITION                         0x0
#define _RX1DTPPS_RX1DTPPS_SIZE                             0x6
#define _RX1DTPPS_RX1DTPPS_LENGTH                           0x6
#define _RX1DTPPS_RX1DTPPS_MASK                             0x3F
#define _RX1DTPPS_RX1DTPPS0_POSN                            0x0
#define _RX1DTPPS_RX1DTPPS0_POSITION                        0x0
#define _RX1DTPPS_RX1DTPPS0_SIZE                            0x1
#define _RX1DTPPS_RX1DTPPS0_LENGTH                          0x1
#define _RX1DTPPS_RX1DTPPS0_MASK                            0x1
#define _RX1DTPPS_RX1DTPPS1_POSN                            0x1
#define _RX1DTPPS_RX1DTPPS1_POSITION                        0x1
#define _RX1DTPPS_RX1DTPPS1_SIZE                            0x1
#define _RX1DTPPS_RX1DTPPS1_LENGTH                          0x1
#define _RX1DTPPS_RX1DTPPS1_MASK                            0x2
#define _RX1DTPPS_RX1DTPPS2_POSN                            0x2
#define _RX1DTPPS_RX1DTPPS2_POSITION                        0x2
#define _RX1DTPPS_RX1DTPPS2_SIZE                            0x1
#define _RX1DTPPS_RX1DTPPS2_LENGTH                          0x1
#define _RX1DTPPS_RX1DTPPS2_MASK                            0x4
#define _RX1DTPPS_RX1DTPPS3_POSN                            0x3
#define _RX1DTPPS_RX1DTPPS3_POSITION                        0x3
#define _RX1DTPPS_RX1DTPPS3_SIZE                            0x1
#define _RX1DTPPS_RX1DTPPS3_LENGTH                          0x1
#define _RX1DTPPS_RX1DTPPS3_MASK                            0x8
#define _RX1DTPPS_RX1DTPPS4_POSN                            0x4
#define _RX1DTPPS_RX1DTPPS4_POSITION                        0x4
#define _RX1DTPPS_RX1DTPPS4_SIZE                            0x1
#define _RX1DTPPS_RX1DTPPS4_LENGTH                          0x1
#define _RX1DTPPS_RX1DTPPS4_MASK                            0x10
#define _RX1DTPPS_RX1DTPPS5_POSN                            0x5
#define _RX1DTPPS_RX1DTPPS5_POSITION                        0x5
#define _RX1DTPPS_RX1DTPPS5_SIZE                            0x1
#define _RX1DTPPS_RX1DTPPS5_LENGTH                          0x1
#define _RX1DTPPS_RX1DTPPS5_MASK                            0x20

// Register: TX1CKPPS
#define TX1CKPPS TX1CKPPS
extern volatile unsigned char           TX1CKPPS            __at(0x1ECC);
#ifndef _LIB_BUILD
asm("TX1CKPPS equ 01ECCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1CKPPS               :6;
    };
    struct {
        unsigned TX1CKPPS0              :1;
        unsigned TX1CKPPS1              :1;
        unsigned TX1CKPPS2              :1;
        unsigned TX1CKPPS3              :1;
        unsigned TX1CKPPS4              :1;
        unsigned TX1CKPPS5              :1;
    };
} TX1CKPPSbits_t;
extern volatile TX1CKPPSbits_t TX1CKPPSbits __at(0x1ECC);
// bitfield macros
#define _TX1CKPPS_TX1CKPPS_POSN                             0x0
#define _TX1CKPPS_TX1CKPPS_POSITION                         0x0
#define _TX1CKPPS_TX1CKPPS_SIZE                             0x6
#define _TX1CKPPS_TX1CKPPS_LENGTH                           0x6
#define _TX1CKPPS_TX1CKPPS_MASK                             0x3F
#define _TX1CKPPS_TX1CKPPS0_POSN                            0x0
#define _TX1CKPPS_TX1CKPPS0_POSITION                        0x0
#define _TX1CKPPS_TX1CKPPS0_SIZE                            0x1
#define _TX1CKPPS_TX1CKPPS0_LENGTH                          0x1
#define _TX1CKPPS_TX1CKPPS0_MASK                            0x1
#define _TX1CKPPS_TX1CKPPS1_POSN                            0x1
#define _TX1CKPPS_TX1CKPPS1_POSITION                        0x1
#define _TX1CKPPS_TX1CKPPS1_SIZE                            0x1
#define _TX1CKPPS_TX1CKPPS1_LENGTH                          0x1
#define _TX1CKPPS_TX1CKPPS1_MASK                            0x2
#define _TX1CKPPS_TX1CKPPS2_POSN                            0x2
#define _TX1CKPPS_TX1CKPPS2_POSITION                        0x2
#define _TX1CKPPS_TX1CKPPS2_SIZE                            0x1
#define _TX1CKPPS_TX1CKPPS2_LENGTH                          0x1
#define _TX1CKPPS_TX1CKPPS2_MASK                            0x4
#define _TX1CKPPS_TX1CKPPS3_POSN                            0x3
#define _TX1CKPPS_TX1CKPPS3_POSITION                        0x3
#define _TX1CKPPS_TX1CKPPS3_SIZE                            0x1
#define _TX1CKPPS_TX1CKPPS3_LENGTH                          0x1
#define _TX1CKPPS_TX1CKPPS3_MASK                            0x8
#define _TX1CKPPS_TX1CKPPS4_POSN                            0x4
#define _TX1CKPPS_TX1CKPPS4_POSITION                        0x4
#define _TX1CKPPS_TX1CKPPS4_SIZE                            0x1
#define _TX1CKPPS_TX1CKPPS4_LENGTH                          0x1
#define _TX1CKPPS_TX1CKPPS4_MASK                            0x10
#define _TX1CKPPS_TX1CKPPS5_POSN                            0x5
#define _TX1CKPPS_TX1CKPPS5_POSITION                        0x5
#define _TX1CKPPS_TX1CKPPS5_SIZE                            0x1
#define _TX1CKPPS_TX1CKPPS5_LENGTH                          0x1
#define _TX1CKPPS_TX1CKPPS5_MASK                            0x20

// Register: RX2DTPPS
#define RX2DTPPS RX2DTPPS
extern volatile unsigned char           RX2DTPPS            __at(0x1ECD);
#ifndef _LIB_BUILD
asm("RX2DTPPS equ 01ECDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX2DTPPS               :6;
    };
    struct {
        unsigned RX2DTPPS0              :1;
        unsigned RX2DTPPS1              :1;
        unsigned RX2DTPPS2              :1;
        unsigned RX2DTPPS3              :1;
        unsigned RX2DTPPS4              :1;
        unsigned RX2DTPPS5              :1;
    };
} RX2DTPPSbits_t;
extern volatile RX2DTPPSbits_t RX2DTPPSbits __at(0x1ECD);
// bitfield macros
#define _RX2DTPPS_RX2DTPPS_POSN                             0x0
#define _RX2DTPPS_RX2DTPPS_POSITION                         0x0
#define _RX2DTPPS_RX2DTPPS_SIZE                             0x6
#define _RX2DTPPS_RX2DTPPS_LENGTH                           0x6
#define _RX2DTPPS_RX2DTPPS_MASK                             0x3F
#define _RX2DTPPS_RX2DTPPS0_POSN                            0x0
#define _RX2DTPPS_RX2DTPPS0_POSITION                        0x0
#define _RX2DTPPS_RX2DTPPS0_SIZE                            0x1
#define _RX2DTPPS_RX2DTPPS0_LENGTH                          0x1
#define _RX2DTPPS_RX2DTPPS0_MASK                            0x1
#define _RX2DTPPS_RX2DTPPS1_POSN                            0x1
#define _RX2DTPPS_RX2DTPPS1_POSITION                        0x1
#define _RX2DTPPS_RX2DTPPS1_SIZE                            0x1
#define _RX2DTPPS_RX2DTPPS1_LENGTH                          0x1
#define _RX2DTPPS_RX2DTPPS1_MASK                            0x2
#define _RX2DTPPS_RX2DTPPS2_POSN                            0x2
#define _RX2DTPPS_RX2DTPPS2_POSITION                        0x2
#define _RX2DTPPS_RX2DTPPS2_SIZE                            0x1
#define _RX2DTPPS_RX2DTPPS2_LENGTH                          0x1
#define _RX2DTPPS_RX2DTPPS2_MASK                            0x4
#define _RX2DTPPS_RX2DTPPS3_POSN                            0x3
#define _RX2DTPPS_RX2DTPPS3_POSITION                        0x3
#define _RX2DTPPS_RX2DTPPS3_SIZE                            0x1
#define _RX2DTPPS_RX2DTPPS3_LENGTH                          0x1
#define _RX2DTPPS_RX2DTPPS3_MASK                            0x8
#define _RX2DTPPS_RX2DTPPS4_POSN                            0x4
#define _RX2DTPPS_RX2DTPPS4_POSITION                        0x4
#define _RX2DTPPS_RX2DTPPS4_SIZE                            0x1
#define _RX2DTPPS_RX2DTPPS4_LENGTH                          0x1
#define _RX2DTPPS_RX2DTPPS4_MASK                            0x10
#define _RX2DTPPS_RX2DTPPS5_POSN                            0x5
#define _RX2DTPPS_RX2DTPPS5_POSITION                        0x5
#define _RX2DTPPS_RX2DTPPS5_SIZE                            0x1
#define _RX2DTPPS_RX2DTPPS5_LENGTH                          0x1
#define _RX2DTPPS_RX2DTPPS5_MASK                            0x20

// Register: TX2CKPPS
#define TX2CKPPS TX2CKPPS
extern volatile unsigned char           TX2CKPPS            __at(0x1ECE);
#ifndef _LIB_BUILD
asm("TX2CKPPS equ 01ECEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX2CKPPS               :6;
    };
    struct {
        unsigned TX2CKPPS0              :1;
        unsigned TX2CKPPS1              :1;
        unsigned TX2CKPPS2              :1;
        unsigned TX2CKPPS3              :1;
        unsigned TX2CKPPS4              :1;
        unsigned TX2CKPPS5              :1;
    };
} TX2CKPPSbits_t;
extern volatile TX2CKPPSbits_t TX2CKPPSbits __at(0x1ECE);
// bitfield macros
#define _TX2CKPPS_TX2CKPPS_POSN                             0x0
#define _TX2CKPPS_TX2CKPPS_POSITION                         0x0
#define _TX2CKPPS_TX2CKPPS_SIZE                             0x6
#define _TX2CKPPS_TX2CKPPS_LENGTH                           0x6
#define _TX2CKPPS_TX2CKPPS_MASK                             0x3F
#define _TX2CKPPS_TX2CKPPS0_POSN                            0x0
#define _TX2CKPPS_TX2CKPPS0_POSITION                        0x0
#define _TX2CKPPS_TX2CKPPS0_SIZE                            0x1
#define _TX2CKPPS_TX2CKPPS0_LENGTH                          0x1
#define _TX2CKPPS_TX2CKPPS0_MASK                            0x1
#define _TX2CKPPS_TX2CKPPS1_POSN                            0x1
#define _TX2CKPPS_TX2CKPPS1_POSITION                        0x1
#define _TX2CKPPS_TX2CKPPS1_SIZE                            0x1
#define _TX2CKPPS_TX2CKPPS1_LENGTH                          0x1
#define _TX2CKPPS_TX2CKPPS1_MASK                            0x2
#define _TX2CKPPS_TX2CKPPS2_POSN                            0x2
#define _TX2CKPPS_TX2CKPPS2_POSITION                        0x2
#define _TX2CKPPS_TX2CKPPS2_SIZE                            0x1
#define _TX2CKPPS_TX2CKPPS2_LENGTH                          0x1
#define _TX2CKPPS_TX2CKPPS2_MASK                            0x4
#define _TX2CKPPS_TX2CKPPS3_POSN                            0x3
#define _TX2CKPPS_TX2CKPPS3_POSITION                        0x3
#define _TX2CKPPS_TX2CKPPS3_SIZE                            0x1
#define _TX2CKPPS_TX2CKPPS3_LENGTH                          0x1
#define _TX2CKPPS_TX2CKPPS3_MASK                            0x8
#define _TX2CKPPS_TX2CKPPS4_POSN                            0x4
#define _TX2CKPPS_TX2CKPPS4_POSITION                        0x4
#define _TX2CKPPS_TX2CKPPS4_SIZE                            0x1
#define _TX2CKPPS_TX2CKPPS4_LENGTH                          0x1
#define _TX2CKPPS_TX2CKPPS4_MASK                            0x10
#define _TX2CKPPS_TX2CKPPS5_POSN                            0x5
#define _TX2CKPPS_TX2CKPPS5_POSITION                        0x5
#define _TX2CKPPS_TX2CKPPS5_SIZE                            0x1
#define _TX2CKPPS_TX2CKPPS5_LENGTH                          0x1
#define _TX2CKPPS_TX2CKPPS5_MASK                            0x20

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x1F10);
#ifndef _LIB_BUILD
asm("RA0PPS equ 01F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x1F10);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x1F11);
#ifndef _LIB_BUILD
asm("RA1PPS equ 01F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x1F11);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x1F12);
#ifndef _LIB_BUILD
asm("RA2PPS equ 01F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x1F12);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0x1F13);
#ifndef _LIB_BUILD
asm("RA3PPS equ 01F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0x1F13);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x1F14);
#ifndef _LIB_BUILD
asm("RA4PPS equ 01F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x1F14);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x1F15);
#ifndef _LIB_BUILD
asm("RA5PPS equ 01F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x1F15);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10

// Register: RA6PPS
#define RA6PPS RA6PPS
extern volatile unsigned char           RA6PPS              __at(0x1F16);
#ifndef _LIB_BUILD
asm("RA6PPS equ 01F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA6PPS0                :1;
        unsigned RA6PPS1                :1;
        unsigned RA6PPS2                :1;
        unsigned RA6PPS3                :1;
        unsigned RA6PPS4                :1;
    };
} RA6PPSbits_t;
extern volatile RA6PPSbits_t RA6PPSbits __at(0x1F16);
// bitfield macros
#define _RA6PPS_RA6PPS0_POSN                                0x0
#define _RA6PPS_RA6PPS0_POSITION                            0x0
#define _RA6PPS_RA6PPS0_SIZE                                0x1
#define _RA6PPS_RA6PPS0_LENGTH                              0x1
#define _RA6PPS_RA6PPS0_MASK                                0x1
#define _RA6PPS_RA6PPS1_POSN                                0x1
#define _RA6PPS_RA6PPS1_POSITION                            0x1
#define _RA6PPS_RA6PPS1_SIZE                                0x1
#define _RA6PPS_RA6PPS1_LENGTH                              0x1
#define _RA6PPS_RA6PPS1_MASK                                0x2
#define _RA6PPS_RA6PPS2_POSN                                0x2
#define _RA6PPS_RA6PPS2_POSITION                            0x2
#define _RA6PPS_RA6PPS2_SIZE                                0x1
#define _RA6PPS_RA6PPS2_LENGTH                              0x1
#define _RA6PPS_RA6PPS2_MASK                                0x4
#define _RA6PPS_RA6PPS3_POSN                                0x3
#define _RA6PPS_RA6PPS3_POSITION                            0x3
#define _RA6PPS_RA6PPS3_SIZE                                0x1
#define _RA6PPS_RA6PPS3_LENGTH                              0x1
#define _RA6PPS_RA6PPS3_MASK                                0x8
#define _RA6PPS_RA6PPS4_POSN                                0x4
#define _RA6PPS_RA6PPS4_POSITION                            0x4
#define _RA6PPS_RA6PPS4_SIZE                                0x1
#define _RA6PPS_RA6PPS4_LENGTH                              0x1
#define _RA6PPS_RA6PPS4_MASK                                0x10

// Register: RA7PPS
#define RA7PPS RA7PPS
extern volatile unsigned char           RA7PPS              __at(0x1F17);
#ifndef _LIB_BUILD
asm("RA7PPS equ 01F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA7PPS0                :1;
        unsigned RA7PPS1                :1;
        unsigned RA7PPS2                :1;
        unsigned RA7PPS3                :1;
        unsigned RA7PPS4                :1;
    };
} RA7PPSbits_t;
extern volatile RA7PPSbits_t RA7PPSbits __at(0x1F17);
// bitfield macros
#define _RA7PPS_RA7PPS0_POSN                                0x0
#define _RA7PPS_RA7PPS0_POSITION                            0x0
#define _RA7PPS_RA7PPS0_SIZE                                0x1
#define _RA7PPS_RA7PPS0_LENGTH                              0x1
#define _RA7PPS_RA7PPS0_MASK                                0x1
#define _RA7PPS_RA7PPS1_POSN                                0x1
#define _RA7PPS_RA7PPS1_POSITION                            0x1
#define _RA7PPS_RA7PPS1_SIZE                                0x1
#define _RA7PPS_RA7PPS1_LENGTH                              0x1
#define _RA7PPS_RA7PPS1_MASK                                0x2
#define _RA7PPS_RA7PPS2_POSN                                0x2
#define _RA7PPS_RA7PPS2_POSITION                            0x2
#define _RA7PPS_RA7PPS2_SIZE                                0x1
#define _RA7PPS_RA7PPS2_LENGTH                              0x1
#define _RA7PPS_RA7PPS2_MASK                                0x4
#define _RA7PPS_RA7PPS3_POSN                                0x3
#define _RA7PPS_RA7PPS3_POSITION                            0x3
#define _RA7PPS_RA7PPS3_SIZE                                0x1
#define _RA7PPS_RA7PPS3_LENGTH                              0x1
#define _RA7PPS_RA7PPS3_MASK                                0x8
#define _RA7PPS_RA7PPS4_POSN                                0x4
#define _RA7PPS_RA7PPS4_POSITION                            0x4
#define _RA7PPS_RA7PPS4_SIZE                                0x1
#define _RA7PPS_RA7PPS4_LENGTH                              0x1
#define _RA7PPS_RA7PPS4_MASK                                0x10

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0x1F18);
#ifndef _LIB_BUILD
asm("RB0PPS equ 01F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0x1F18);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0x1F19);
#ifndef _LIB_BUILD
asm("RB1PPS equ 01F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0x1F19);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0x1F1A);
#ifndef _LIB_BUILD
asm("RB2PPS equ 01F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0x1F1A);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0x1F1B);
#ifndef _LIB_BUILD
asm("RB3PPS equ 01F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0x1F1B);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0x1F1C);
#ifndef _LIB_BUILD
asm("RB4PPS equ 01F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0x1F1C);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0x1F1D);
#ifndef _LIB_BUILD
asm("RB5PPS equ 01F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0x1F1D);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0x1F1E);
#ifndef _LIB_BUILD
asm("RB6PPS equ 01F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0x1F1E);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0x1F1F);
#ifndef _LIB_BUILD
asm("RB7PPS equ 01F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0x1F1F);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x1F20);
#ifndef _LIB_BUILD
asm("RC0PPS equ 01F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x1F20);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x1F21);
#ifndef _LIB_BUILD
asm("RC1PPS equ 01F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x1F21);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0x1F22);
#ifndef _LIB_BUILD
asm("RC2PPS equ 01F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0x1F22);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x1F23);
#ifndef _LIB_BUILD
asm("RC3PPS equ 01F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x1F23);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x1F24);
#ifndef _LIB_BUILD
asm("RC4PPS equ 01F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x1F24);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x1F25);
#ifndef _LIB_BUILD
asm("RC5PPS equ 01F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x1F25);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0x1F26);
#ifndef _LIB_BUILD
asm("RC6PPS equ 01F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0x1F26);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10

// Register: RC7PPS
#define RC7PPS RC7PPS
extern volatile unsigned char           RC7PPS              __at(0x1F27);
#ifndef _LIB_BUILD
asm("RC7PPS equ 01F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC7PPS0                :1;
        unsigned RC7PPS1                :1;
        unsigned RC7PPS2                :1;
        unsigned RC7PPS3                :1;
        unsigned RC7PPS4                :1;
    };
} RC7PPSbits_t;
extern volatile RC7PPSbits_t RC7PPSbits __at(0x1F27);
// bitfield macros
#define _RC7PPS_RC7PPS0_POSN                                0x0
#define _RC7PPS_RC7PPS0_POSITION                            0x0
#define _RC7PPS_RC7PPS0_SIZE                                0x1
#define _RC7PPS_RC7PPS0_LENGTH                              0x1
#define _RC7PPS_RC7PPS0_MASK                                0x1
#define _RC7PPS_RC7PPS1_POSN                                0x1
#define _RC7PPS_RC7PPS1_POSITION                            0x1
#define _RC7PPS_RC7PPS1_SIZE                                0x1
#define _RC7PPS_RC7PPS1_LENGTH                              0x1
#define _RC7PPS_RC7PPS1_MASK                                0x2
#define _RC7PPS_RC7PPS2_POSN                                0x2
#define _RC7PPS_RC7PPS2_POSITION                            0x2
#define _RC7PPS_RC7PPS2_SIZE                                0x1
#define _RC7PPS_RC7PPS2_LENGTH                              0x1
#define _RC7PPS_RC7PPS2_MASK                                0x4
#define _RC7PPS_RC7PPS3_POSN                                0x3
#define _RC7PPS_RC7PPS3_POSITION                            0x3
#define _RC7PPS_RC7PPS3_SIZE                                0x1
#define _RC7PPS_RC7PPS3_LENGTH                              0x1
#define _RC7PPS_RC7PPS3_MASK                                0x8
#define _RC7PPS_RC7PPS4_POSN                                0x4
#define _RC7PPS_RC7PPS4_POSITION                            0x4
#define _RC7PPS_RC7PPS4_SIZE                                0x1
#define _RC7PPS_RC7PPS4_LENGTH                              0x1
#define _RC7PPS_RC7PPS4_MASK                                0x10

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x1F38);
#ifndef _LIB_BUILD
asm("ANSELA equ 01F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned ANSA3                  :1;
        unsigned ANSA4                  :1;
        unsigned ANSA5                  :1;
        unsigned ANSA6                  :1;
        unsigned ANSA7                  :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x1F38);
// bitfield macros
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA3_POSN                                  0x3
#define _ANSELA_ANSA3_POSITION                              0x3
#define _ANSELA_ANSA3_SIZE                                  0x1
#define _ANSELA_ANSA3_LENGTH                                0x1
#define _ANSELA_ANSA3_MASK                                  0x8
#define _ANSELA_ANSA4_POSN                                  0x4
#define _ANSELA_ANSA4_POSITION                              0x4
#define _ANSELA_ANSA4_SIZE                                  0x1
#define _ANSELA_ANSA4_LENGTH                                0x1
#define _ANSELA_ANSA4_MASK                                  0x10
#define _ANSELA_ANSA5_POSN                                  0x5
#define _ANSELA_ANSA5_POSITION                              0x5
#define _ANSELA_ANSA5_SIZE                                  0x1
#define _ANSELA_ANSA5_LENGTH                                0x1
#define _ANSELA_ANSA5_MASK                                  0x20
#define _ANSELA_ANSA6_POSN                                  0x6
#define _ANSELA_ANSA6_POSITION                              0x6
#define _ANSELA_ANSA6_SIZE                                  0x1
#define _ANSELA_ANSA6_LENGTH                                0x1
#define _ANSELA_ANSA6_MASK                                  0x40
#define _ANSELA_ANSA7_POSN                                  0x7
#define _ANSELA_ANSA7_POSITION                              0x7
#define _ANSELA_ANSA7_SIZE                                  0x1
#define _ANSELA_ANSA7_LENGTH                                0x1
#define _ANSELA_ANSA7_MASK                                  0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x1F39);
#ifndef _LIB_BUILD
asm("WPUA equ 01F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
        unsigned WPUA6                  :1;
        unsigned WPUA7                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x1F39);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA6_POSN                                    0x6
#define _WPUA_WPUA6_POSITION                                0x6
#define _WPUA_WPUA6_SIZE                                    0x1
#define _WPUA_WPUA6_LENGTH                                  0x1
#define _WPUA_WPUA6_MASK                                    0x40
#define _WPUA_WPUA7_POSN                                    0x7
#define _WPUA_WPUA7_POSITION                                0x7
#define _WPUA_WPUA7_SIZE                                    0x1
#define _WPUA_WPUA7_LENGTH                                  0x1
#define _WPUA_WPUA7_MASK                                    0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x1F3A);
#ifndef _LIB_BUILD
asm("ODCONA equ 01F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
        unsigned ODCA6                  :1;
        unsigned ODCA7                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x1F3A);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20
#define _ODCONA_ODCA6_POSN                                  0x6
#define _ODCONA_ODCA6_POSITION                              0x6
#define _ODCONA_ODCA6_SIZE                                  0x1
#define _ODCONA_ODCA6_LENGTH                                0x1
#define _ODCONA_ODCA6_MASK                                  0x40
#define _ODCONA_ODCA7_POSN                                  0x7
#define _ODCONA_ODCA7_POSITION                              0x7
#define _ODCONA_ODCA7_SIZE                                  0x1
#define _ODCONA_ODCA7_LENGTH                                0x1
#define _ODCONA_ODCA7_MASK                                  0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x1F3B);
#ifndef _LIB_BUILD
asm("SLRCONA equ 01F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
        unsigned SLRA6                  :1;
        unsigned SLRA7                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x1F3B);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20
#define _SLRCONA_SLRA6_POSN                                 0x6
#define _SLRCONA_SLRA6_POSITION                             0x6
#define _SLRCONA_SLRA6_SIZE                                 0x1
#define _SLRCONA_SLRA6_LENGTH                               0x1
#define _SLRCONA_SLRA6_MASK                                 0x40
#define _SLRCONA_SLRA7_POSN                                 0x7
#define _SLRCONA_SLRA7_POSITION                             0x7
#define _SLRCONA_SLRA7_SIZE                                 0x1
#define _SLRCONA_SLRA7_LENGTH                               0x1
#define _SLRCONA_SLRA7_MASK                                 0x80

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x1F3C);
#ifndef _LIB_BUILD
asm("INLVLA equ 01F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
        unsigned INLVLA6                :1;
        unsigned INLVLA7                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x1F3C);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20
#define _INLVLA_INLVLA6_POSN                                0x6
#define _INLVLA_INLVLA6_POSITION                            0x6
#define _INLVLA_INLVLA6_SIZE                                0x1
#define _INLVLA_INLVLA6_LENGTH                              0x1
#define _INLVLA_INLVLA6_MASK                                0x40
#define _INLVLA_INLVLA7_POSN                                0x7
#define _INLVLA_INLVLA7_POSITION                            0x7
#define _INLVLA_INLVLA7_SIZE                                0x1
#define _INLVLA_INLVLA7_LENGTH                              0x1
#define _INLVLA_INLVLA7_MASK                                0x80

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x1F3D);
#ifndef _LIB_BUILD
asm("IOCAP equ 01F3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
        unsigned IOCAP6                 :1;
        unsigned IOCAP7                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x1F3D);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20
#define _IOCAP_IOCAP6_POSN                                  0x6
#define _IOCAP_IOCAP6_POSITION                              0x6
#define _IOCAP_IOCAP6_SIZE                                  0x1
#define _IOCAP_IOCAP6_LENGTH                                0x1
#define _IOCAP_IOCAP6_MASK                                  0x40
#define _IOCAP_IOCAP7_POSN                                  0x7
#define _IOCAP_IOCAP7_POSITION                              0x7
#define _IOCAP_IOCAP7_SIZE                                  0x1
#define _IOCAP_IOCAP7_LENGTH                                0x1
#define _IOCAP_IOCAP7_MASK                                  0x80

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x1F3E);
#ifndef _LIB_BUILD
asm("IOCAN equ 01F3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
        unsigned IOCAN6                 :1;
        unsigned IOCAN7                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x1F3E);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20
#define _IOCAN_IOCAN6_POSN                                  0x6
#define _IOCAN_IOCAN6_POSITION                              0x6
#define _IOCAN_IOCAN6_SIZE                                  0x1
#define _IOCAN_IOCAN6_LENGTH                                0x1
#define _IOCAN_IOCAN6_MASK                                  0x40
#define _IOCAN_IOCAN7_POSN                                  0x7
#define _IOCAN_IOCAN7_POSITION                              0x7
#define _IOCAN_IOCAN7_SIZE                                  0x1
#define _IOCAN_IOCAN7_LENGTH                                0x1
#define _IOCAN_IOCAN7_MASK                                  0x80

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x1F3F);
#ifndef _LIB_BUILD
asm("IOCAF equ 01F3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
        unsigned IOCAF6                 :1;
        unsigned IOCAF7                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x1F3F);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20
#define _IOCAF_IOCAF6_POSN                                  0x6
#define _IOCAF_IOCAF6_POSITION                              0x6
#define _IOCAF_IOCAF6_SIZE                                  0x1
#define _IOCAF_IOCAF6_LENGTH                                0x1
#define _IOCAF_IOCAF6_MASK                                  0x40
#define _IOCAF_IOCAF7_POSN                                  0x7
#define _IOCAF_IOCAF7_POSITION                              0x7
#define _IOCAF_IOCAF7_SIZE                                  0x1
#define _IOCAF_IOCAF7_LENGTH                                0x1
#define _IOCAF_IOCAF7_MASK                                  0x80

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0x1F43);
#ifndef _LIB_BUILD
asm("ANSELB equ 01F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSB0                  :1;
        unsigned ANSB1                  :1;
        unsigned ANSB2                  :1;
        unsigned ANSB3                  :1;
        unsigned ANSB4                  :1;
        unsigned ANSB5                  :1;
        unsigned ANSB6                  :1;
        unsigned ANSB7                  :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0x1F43);
// bitfield macros
#define _ANSELB_ANSB0_POSN                                  0x0
#define _ANSELB_ANSB0_POSITION                              0x0
#define _ANSELB_ANSB0_SIZE                                  0x1
#define _ANSELB_ANSB0_LENGTH                                0x1
#define _ANSELB_ANSB0_MASK                                  0x1
#define _ANSELB_ANSB1_POSN                                  0x1
#define _ANSELB_ANSB1_POSITION                              0x1
#define _ANSELB_ANSB1_SIZE                                  0x1
#define _ANSELB_ANSB1_LENGTH                                0x1
#define _ANSELB_ANSB1_MASK                                  0x2
#define _ANSELB_ANSB2_POSN                                  0x2
#define _ANSELB_ANSB2_POSITION                              0x2
#define _ANSELB_ANSB2_SIZE                                  0x1
#define _ANSELB_ANSB2_LENGTH                                0x1
#define _ANSELB_ANSB2_MASK                                  0x4
#define _ANSELB_ANSB3_POSN                                  0x3
#define _ANSELB_ANSB3_POSITION                              0x3
#define _ANSELB_ANSB3_SIZE                                  0x1
#define _ANSELB_ANSB3_LENGTH                                0x1
#define _ANSELB_ANSB3_MASK                                  0x8
#define _ANSELB_ANSB4_POSN                                  0x4
#define _ANSELB_ANSB4_POSITION                              0x4
#define _ANSELB_ANSB4_SIZE                                  0x1
#define _ANSELB_ANSB4_LENGTH                                0x1
#define _ANSELB_ANSB4_MASK                                  0x10
#define _ANSELB_ANSB5_POSN                                  0x5
#define _ANSELB_ANSB5_POSITION                              0x5
#define _ANSELB_ANSB5_SIZE                                  0x1
#define _ANSELB_ANSB5_LENGTH                                0x1
#define _ANSELB_ANSB5_MASK                                  0x20
#define _ANSELB_ANSB6_POSN                                  0x6
#define _ANSELB_ANSB6_POSITION                              0x6
#define _ANSELB_ANSB6_SIZE                                  0x1
#define _ANSELB_ANSB6_LENGTH                                0x1
#define _ANSELB_ANSB6_MASK                                  0x40
#define _ANSELB_ANSB7_POSN                                  0x7
#define _ANSELB_ANSB7_POSITION                              0x7
#define _ANSELB_ANSB7_SIZE                                  0x1
#define _ANSELB_ANSB7_LENGTH                                0x1
#define _ANSELB_ANSB7_MASK                                  0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0x1F44);
#ifndef _LIB_BUILD
asm("WPUB equ 01F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0x1F44);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0x1F45);
#ifndef _LIB_BUILD
asm("ODCONB equ 01F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0x1F45);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0x1F46);
#ifndef _LIB_BUILD
asm("SLRCONB equ 01F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0x1F46);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0x1F47);
#ifndef _LIB_BUILD
asm("INLVLB equ 01F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0x1F47);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0x1F48);
#ifndef _LIB_BUILD
asm("IOCBP equ 01F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0x1F48);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0x1F49);
#ifndef _LIB_BUILD
asm("IOCBN equ 01F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0x1F49);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0x1F4A);
#ifndef _LIB_BUILD
asm("IOCBF equ 01F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0x1F4A);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x1F4E);
#ifndef _LIB_BUILD
asm("ANSELC equ 01F4Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSC0                  :1;
        unsigned ANSC1                  :1;
        unsigned ANSC2                  :1;
        unsigned ANSC3                  :1;
        unsigned ANSC4                  :1;
        unsigned ANSC5                  :1;
        unsigned ANSC6                  :1;
        unsigned ANSC7                  :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x1F4E);
// bitfield macros
#define _ANSELC_ANSC0_POSN                                  0x0
#define _ANSELC_ANSC0_POSITION                              0x0
#define _ANSELC_ANSC0_SIZE                                  0x1
#define _ANSELC_ANSC0_LENGTH                                0x1
#define _ANSELC_ANSC0_MASK                                  0x1
#define _ANSELC_ANSC1_POSN                                  0x1
#define _ANSELC_ANSC1_POSITION                              0x1
#define _ANSELC_ANSC1_SIZE                                  0x1
#define _ANSELC_ANSC1_LENGTH                                0x1
#define _ANSELC_ANSC1_MASK                                  0x2
#define _ANSELC_ANSC2_POSN                                  0x2
#define _ANSELC_ANSC2_POSITION                              0x2
#define _ANSELC_ANSC2_SIZE                                  0x1
#define _ANSELC_ANSC2_LENGTH                                0x1
#define _ANSELC_ANSC2_MASK                                  0x4
#define _ANSELC_ANSC3_POSN                                  0x3
#define _ANSELC_ANSC3_POSITION                              0x3
#define _ANSELC_ANSC3_SIZE                                  0x1
#define _ANSELC_ANSC3_LENGTH                                0x1
#define _ANSELC_ANSC3_MASK                                  0x8
#define _ANSELC_ANSC4_POSN                                  0x4
#define _ANSELC_ANSC4_POSITION                              0x4
#define _ANSELC_ANSC4_SIZE                                  0x1
#define _ANSELC_ANSC4_LENGTH                                0x1
#define _ANSELC_ANSC4_MASK                                  0x10
#define _ANSELC_ANSC5_POSN                                  0x5
#define _ANSELC_ANSC5_POSITION                              0x5
#define _ANSELC_ANSC5_SIZE                                  0x1
#define _ANSELC_ANSC5_LENGTH                                0x1
#define _ANSELC_ANSC5_MASK                                  0x20
#define _ANSELC_ANSC6_POSN                                  0x6
#define _ANSELC_ANSC6_POSITION                              0x6
#define _ANSELC_ANSC6_SIZE                                  0x1
#define _ANSELC_ANSC6_LENGTH                                0x1
#define _ANSELC_ANSC6_MASK                                  0x40
#define _ANSELC_ANSC7_POSN                                  0x7
#define _ANSELC_ANSC7_POSITION                              0x7
#define _ANSELC_ANSC7_SIZE                                  0x1
#define _ANSELC_ANSC7_LENGTH                                0x1
#define _ANSELC_ANSC7_MASK                                  0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x1F4F);
#ifndef _LIB_BUILD
asm("WPUC equ 01F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x1F4F);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x1F50);
#ifndef _LIB_BUILD
asm("ODCONC equ 01F50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x1F50);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x1F51);
#ifndef _LIB_BUILD
asm("SLRCONC equ 01F51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x1F51);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x1F52);
#ifndef _LIB_BUILD
asm("INLVLC equ 01F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x1F52);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x1F53);
#ifndef _LIB_BUILD
asm("IOCCP equ 01F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x1F53);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x1F54);
#ifndef _LIB_BUILD
asm("IOCCN equ 01F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x1F54);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x1F55);
#ifndef _LIB_BUILD
asm("IOCCF equ 01F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x1F55);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: WPUE
#define WPUE WPUE
extern volatile unsigned char           WPUE                __at(0x1F65);
#ifndef _LIB_BUILD
asm("WPUE equ 01F65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned WPUE3                  :1;
    };
} WPUEbits_t;
extern volatile WPUEbits_t WPUEbits __at(0x1F65);
// bitfield macros
#define _WPUE_WPUE3_POSN                                    0x3
#define _WPUE_WPUE3_POSITION                                0x3
#define _WPUE_WPUE3_SIZE                                    0x1
#define _WPUE_WPUE3_LENGTH                                  0x1
#define _WPUE_WPUE3_MASK                                    0x8

// Register: INLVLE
#define INLVLE INLVLE
extern volatile unsigned char           INLVLE              __at(0x1F68);
#ifndef _LIB_BUILD
asm("INLVLE equ 01F68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned INLVLE3                :1;
    };
} INLVLEbits_t;
extern volatile INLVLEbits_t INLVLEbits __at(0x1F68);
// bitfield macros
#define _INLVLE_INLVLE3_POSN                                0x3
#define _INLVLE_INLVLE3_POSITION                            0x3
#define _INLVLE_INLVLE3_SIZE                                0x1
#define _INLVLE_INLVLE3_LENGTH                              0x1
#define _INLVLE_INLVLE3_MASK                                0x8

// Register: IOCEP
#define IOCEP IOCEP
extern volatile unsigned char           IOCEP               __at(0x1F69);
#ifndef _LIB_BUILD
asm("IOCEP equ 01F69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEP3                 :1;
    };
} IOCEPbits_t;
extern volatile IOCEPbits_t IOCEPbits __at(0x1F69);
// bitfield macros
#define _IOCEP_IOCEP3_POSN                                  0x3
#define _IOCEP_IOCEP3_POSITION                              0x3
#define _IOCEP_IOCEP3_SIZE                                  0x1
#define _IOCEP_IOCEP3_LENGTH                                0x1
#define _IOCEP_IOCEP3_MASK                                  0x8

// Register: IOCEN
#define IOCEN IOCEN
extern volatile unsigned char           IOCEN               __at(0x1F6A);
#ifndef _LIB_BUILD
asm("IOCEN equ 01F6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEN3                 :1;
    };
} IOCENbits_t;
extern volatile IOCENbits_t IOCENbits __at(0x1F6A);
// bitfield macros
#define _IOCEN_IOCEN3_POSN                                  0x3
#define _IOCEN_IOCEN3_POSITION                              0x3
#define _IOCEN_IOCEN3_SIZE                                  0x1
#define _IOCEN_IOCEN3_LENGTH                                0x1
#define _IOCEN_IOCEN3_MASK                                  0x8

// Register: IOCEF
#define IOCEF IOCEF
extern volatile unsigned char           IOCEF               __at(0x1F6B);
#ifndef _LIB_BUILD
asm("IOCEF equ 01F6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEF3                 :1;
    };
} IOCEFbits_t;
extern volatile IOCEFbits_t IOCEFbits __at(0x1F6B);
// bitfield macros
#define _IOCEF_IOCEF3_POSN                                  0x3
#define _IOCEF_IOCEF3_POSITION                              0x3
#define _IOCEF_IOCEF3_SIZE                                  0x1
#define _IOCEF_IOCEF3_LENGTH                                0x1
#define _IOCEF_IOCEF3_MASK                                  0x8

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x1FE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 01FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STATUS_SHAD            :8;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x1FE4);
// bitfield macros
#define _STATUS_SHAD_STATUS_SHAD_POSN                       0x0
#define _STATUS_SHAD_STATUS_SHAD_POSITION                   0x0
#define _STATUS_SHAD_STATUS_SHAD_SIZE                       0x8
#define _STATUS_SHAD_STATUS_SHAD_LENGTH                     0x8
#define _STATUS_SHAD_STATUS_SHAD_MASK                       0xFF

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x1FE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 01FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x1FE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x1FE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 01FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :8;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0x1FE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x8
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x8
#define _BSR_SHAD_BSR_SHAD_MASK                             0xFF

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x1FE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 01FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :8;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x1FE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x8
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x8
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0xFF

// Register: FSR0_SHAD
#define FSR0_SHAD FSR0_SHAD
extern volatile unsigned short          FSR0_SHAD           __at(0x1FE8);
#ifndef _LIB_BUILD
asm("FSR0_SHAD equ 01FE8h");
#endif

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x1FE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 01FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x1FE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x1FE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 01FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x1FE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1_SHAD
#define FSR1_SHAD FSR1_SHAD
extern volatile unsigned short          FSR1_SHAD           __at(0x1FEA);
#ifndef _LIB_BUILD
asm("FSR1_SHAD equ 01FEAh");
#endif

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x1FEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 01FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x1FEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x1FEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 01FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x1FEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x1FED);
#ifndef _LIB_BUILD
asm("STKPTR equ 01FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR0                :1;
        unsigned STKPTR1                :1;
        unsigned STKPTR2                :1;
        unsigned STKPTR3                :1;
        unsigned STKPTR4                :1;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x1FED);
// bitfield macros
#define _STKPTR_STKPTR0_POSN                                0x0
#define _STKPTR_STKPTR0_POSITION                            0x0
#define _STKPTR_STKPTR0_SIZE                                0x1
#define _STKPTR_STKPTR0_LENGTH                              0x1
#define _STKPTR_STKPTR0_MASK                                0x1
#define _STKPTR_STKPTR1_POSN                                0x1
#define _STKPTR_STKPTR1_POSITION                            0x1
#define _STKPTR_STKPTR1_SIZE                                0x1
#define _STKPTR_STKPTR1_LENGTH                              0x1
#define _STKPTR_STKPTR1_MASK                                0x2
#define _STKPTR_STKPTR2_POSN                                0x2
#define _STKPTR_STKPTR2_POSITION                            0x2
#define _STKPTR_STKPTR2_SIZE                                0x1
#define _STKPTR_STKPTR2_LENGTH                              0x1
#define _STKPTR_STKPTR2_MASK                                0x4
#define _STKPTR_STKPTR3_POSN                                0x3
#define _STKPTR_STKPTR3_POSITION                            0x3
#define _STKPTR_STKPTR3_SIZE                                0x1
#define _STKPTR_STKPTR3_LENGTH                              0x1
#define _STKPTR_STKPTR3_MASK                                0x8
#define _STKPTR_STKPTR4_POSN                                0x4
#define _STKPTR_STKPTR4_POSITION                            0x4
#define _STKPTR_STKPTR4_SIZE                                0x1
#define _STKPTR_STKPTR4_LENGTH                              0x1
#define _STKPTR_STKPTR4_MASK                                0x10

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x1FEE);
#ifndef _LIB_BUILD
asm("TOSL equ 01FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
    struct {
        unsigned TOSL0                  :1;
        unsigned TOSL1                  :1;
        unsigned TOSL2                  :1;
        unsigned TOSL3                  :1;
        unsigned TOSL4                  :1;
        unsigned TOSL5                  :1;
        unsigned TOSL6                  :1;
        unsigned TOSL7                  :1;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x1FEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF
#define _TOSL_TOSL0_POSN                                    0x0
#define _TOSL_TOSL0_POSITION                                0x0
#define _TOSL_TOSL0_SIZE                                    0x1
#define _TOSL_TOSL0_LENGTH                                  0x1
#define _TOSL_TOSL0_MASK                                    0x1
#define _TOSL_TOSL1_POSN                                    0x1
#define _TOSL_TOSL1_POSITION                                0x1
#define _TOSL_TOSL1_SIZE                                    0x1
#define _TOSL_TOSL1_LENGTH                                  0x1
#define _TOSL_TOSL1_MASK                                    0x2
#define _TOSL_TOSL2_POSN                                    0x2
#define _TOSL_TOSL2_POSITION                                0x2
#define _TOSL_TOSL2_SIZE                                    0x1
#define _TOSL_TOSL2_LENGTH                                  0x1
#define _TOSL_TOSL2_MASK                                    0x4
#define _TOSL_TOSL3_POSN                                    0x3
#define _TOSL_TOSL3_POSITION                                0x3
#define _TOSL_TOSL3_SIZE                                    0x1
#define _TOSL_TOSL3_LENGTH                                  0x1
#define _TOSL_TOSL3_MASK                                    0x8
#define _TOSL_TOSL4_POSN                                    0x4
#define _TOSL_TOSL4_POSITION                                0x4
#define _TOSL_TOSL4_SIZE                                    0x1
#define _TOSL_TOSL4_LENGTH                                  0x1
#define _TOSL_TOSL4_MASK                                    0x10
#define _TOSL_TOSL5_POSN                                    0x5
#define _TOSL_TOSL5_POSITION                                0x5
#define _TOSL_TOSL5_SIZE                                    0x1
#define _TOSL_TOSL5_LENGTH                                  0x1
#define _TOSL_TOSL5_MASK                                    0x20
#define _TOSL_TOSL6_POSN                                    0x6
#define _TOSL_TOSL6_POSITION                                0x6
#define _TOSL_TOSL6_SIZE                                    0x1
#define _TOSL_TOSL6_LENGTH                                  0x1
#define _TOSL_TOSL6_MASK                                    0x40
#define _TOSL_TOSL7_POSN                                    0x7
#define _TOSL_TOSL7_POSITION                                0x7
#define _TOSL_TOSL7_SIZE                                    0x1
#define _TOSL_TOSL7_LENGTH                                  0x1
#define _TOSL_TOSL7_MASK                                    0x80

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x1FEF);
#ifndef _LIB_BUILD
asm("TOSH equ 01FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
    struct {
        unsigned TOSH0                  :1;
        unsigned TOSH1                  :1;
        unsigned TOSH2                  :1;
        unsigned TOSH3                  :1;
        unsigned TOSH4                  :1;
        unsigned TOSH5                  :1;
        unsigned TOSH6                  :1;
        unsigned TOSH7                  :1;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x1FEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF
#define _TOSH_TOSH0_POSN                                    0x0
#define _TOSH_TOSH0_POSITION                                0x0
#define _TOSH_TOSH0_SIZE                                    0x1
#define _TOSH_TOSH0_LENGTH                                  0x1
#define _TOSH_TOSH0_MASK                                    0x1
#define _TOSH_TOSH1_POSN                                    0x1
#define _TOSH_TOSH1_POSITION                                0x1
#define _TOSH_TOSH1_SIZE                                    0x1
#define _TOSH_TOSH1_LENGTH                                  0x1
#define _TOSH_TOSH1_MASK                                    0x2
#define _TOSH_TOSH2_POSN                                    0x2
#define _TOSH_TOSH2_POSITION                                0x2
#define _TOSH_TOSH2_SIZE                                    0x1
#define _TOSH_TOSH2_LENGTH                                  0x1
#define _TOSH_TOSH2_MASK                                    0x4
#define _TOSH_TOSH3_POSN                                    0x3
#define _TOSH_TOSH3_POSITION                                0x3
#define _TOSH_TOSH3_SIZE                                    0x1
#define _TOSH_TOSH3_LENGTH                                  0x1
#define _TOSH_TOSH3_MASK                                    0x8
#define _TOSH_TOSH4_POSN                                    0x4
#define _TOSH_TOSH4_POSITION                                0x4
#define _TOSH_TOSH4_SIZE                                    0x1
#define _TOSH_TOSH4_LENGTH                                  0x1
#define _TOSH_TOSH4_MASK                                    0x10
#define _TOSH_TOSH5_POSN                                    0x5
#define _TOSH_TOSH5_POSITION                                0x5
#define _TOSH_TOSH5_SIZE                                    0x1
#define _TOSH_TOSH5_LENGTH                                  0x1
#define _TOSH_TOSH5_MASK                                    0x20
#define _TOSH_TOSH6_POSN                                    0x6
#define _TOSH_TOSH6_POSITION                                0x6
#define _TOSH_TOSH6_SIZE                                    0x1
#define _TOSH_TOSH6_LENGTH                                  0x1
#define _TOSH_TOSH6_MASK                                    0x40
#define _TOSH_TOSH7_POSN                                    0x7
#define _TOSH_TOSH7_POSITION                                0x7
#define _TOSH_TOSH7_SIZE                                    0x1
#define _TOSH_TOSH7_LENGTH                                  0x1
#define _TOSH_TOSH7_MASK                                    0x80

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP2CON2<ACKDT2>
extern volatile __bit                   ACKDT2              __at(0xCDD);	// @ (0x19B * 8 + 5)
#define                                 ACKDT2_bit          _BIT_ACCESS(SSP2CON2,5)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP2CON2<ACKEN2>
extern volatile __bit                   ACKEN2              __at(0xCDC);	// @ (0x19B * 8 + 4)
#define                                 ACKEN2_bit          _BIT_ACCESS(SSP2CON2,4)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0xC8E);	// @ (0x191 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP2CON2<ACKSTAT2>
extern volatile __bit                   ACKSTAT2            __at(0xCDE);	// @ (0x19B * 8 + 6)
#define                                 ACKSTAT2_bit        _BIT_ACCESS(SSP2CON2,6)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x4F8);	// @ (0x9F * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x4F9);	// @ (0x9F * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x4FA);	// @ (0x9F * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x4FB);	// @ (0x9F * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x4FC);	// @ (0x9F * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADACTPPS<ADACTPPS0>
extern volatile __bit                   ADACTPPS0           __at(0xF618);	// @ (0x1EC3 * 8 + 0)
#define                                 ADACTPPS0_bit       _BIT_ACCESS(ADACTPPS,0)
// ADACTPPS<ADACTPPS1>
extern volatile __bit                   ADACTPPS1           __at(0xF619);	// @ (0x1EC3 * 8 + 1)
#define                                 ADACTPPS1_bit       _BIT_ACCESS(ADACTPPS,1)
// ADACTPPS<ADACTPPS2>
extern volatile __bit                   ADACTPPS2           __at(0xF61A);	// @ (0x1EC3 * 8 + 2)
#define                                 ADACTPPS2_bit       _BIT_ACCESS(ADACTPPS,2)
// ADACTPPS<ADACTPPS3>
extern volatile __bit                   ADACTPPS3           __at(0xF61B);	// @ (0x1EC3 * 8 + 3)
#define                                 ADACTPPS3_bit       _BIT_ACCESS(ADACTPPS,3)
// ADACTPPS<ADACTPPS4>
extern volatile __bit                   ADACTPPS4           __at(0xF61C);	// @ (0x1EC3 * 8 + 4)
#define                                 ADACTPPS4_bit       _BIT_ACCESS(ADACTPPS,4)
// ADACTPPS<ADACTPPS5>
extern volatile __bit                   ADACTPPS5           __at(0xF61D);	// @ (0x1EC3 * 8 + 5)
#define                                 ADACTPPS5_bit       _BIT_ACCESS(ADACTPPS,5)
// PMD2<ADCMD>
extern volatile __bit                   ADCMD               __at(0x3CC5);	// @ (0x798 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD2,5)
// ADCON1<ADCS0>
extern volatile __bit                   ADCS0               __at(0x4F4);	// @ (0x9E * 8 + 4)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCON1,4)
// ADCON1<ADCS1>
extern volatile __bit                   ADCS1               __at(0x4F5);	// @ (0x9E * 8 + 5)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCON1,5)
// ADCON1<ADCS2>
extern volatile __bit                   ADCS2               __at(0x4F6);	// @ (0x9E * 8 + 6)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCON1,6)
// ADCON1<ADFM>
extern volatile __bit                   ADFM                __at(0x4F7);	// @ (0x9E * 8 + 7)
#define                                 ADFM_bit            _BIT_ACCESS(ADCON1,7)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x4860);	// @ (0x90C * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x4861);	// @ (0x90C * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x38B8);	// @ (0x717 * 8 + 0)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,0)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x3868);	// @ (0x70D * 8 + 0)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,0)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP2CON2<ADMSK12>
extern volatile __bit                   ADMSK12             __at(0xCD9);	// @ (0x19B * 8 + 1)
#define                                 ADMSK12_bit         _BIT_ACCESS(SSP2CON2,1)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP2CON2<ADMSK22>
extern volatile __bit                   ADMSK22             __at(0xCDA);	// @ (0x19B * 8 + 2)
#define                                 ADMSK22_bit         _BIT_ACCESS(SSP2CON2,2)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP2CON2<ADMSK32>
extern volatile __bit                   ADMSK32             __at(0xCDB);	// @ (0x19B * 8 + 3)
#define                                 ADMSK32_bit         _BIT_ACCESS(SSP2CON2,3)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP2CON2<ADMSK42>
extern volatile __bit                   ADMSK42             __at(0xCDC);	// @ (0x19B * 8 + 4)
#define                                 ADMSK42_bit         _BIT_ACCESS(SSP2CON2,4)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// SSP2CON2<ADMSK52>
extern volatile __bit                   ADMSK52             __at(0xCDD);	// @ (0x19B * 8 + 5)
#define                                 ADMSK52_bit         _BIT_ACCESS(SSP2CON2,5)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x448A);	// @ (0x891 * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,0)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x4482);	// @ (0x890 * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADCON1<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x4F0);	// @ (0x9E * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADCON1,0)
// ADCON1<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x4F1);	// @ (0x9E * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADCON1,1)
// ADRESH<ADRESH0>
extern volatile __bit                   ADRESH0             __at(0x4E0);	// @ (0x9C * 8 + 0)
#define                                 ADRESH0_bit         _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRESH1>
extern volatile __bit                   ADRESH1             __at(0x4E1);	// @ (0x9C * 8 + 1)
#define                                 ADRESH1_bit         _BIT_ACCESS(ADRESH,1)
// ADRESH<ADRESH2>
extern volatile __bit                   ADRESH2             __at(0x4E2);	// @ (0x9C * 8 + 2)
#define                                 ADRESH2_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRESH3>
extern volatile __bit                   ADRESH3             __at(0x4E3);	// @ (0x9C * 8 + 3)
#define                                 ADRESH3_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRESH4>
extern volatile __bit                   ADRESH4             __at(0x4E4);	// @ (0x9C * 8 + 4)
#define                                 ADRESH4_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRESH5>
extern volatile __bit                   ADRESH5             __at(0x4E5);	// @ (0x9C * 8 + 5)
#define                                 ADRESH5_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRESH6>
extern volatile __bit                   ADRESH6             __at(0x4E6);	// @ (0x9C * 8 + 6)
#define                                 ADRESH6_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRESH7>
extern volatile __bit                   ADRESH7             __at(0x4E7);	// @ (0x9C * 8 + 7)
#define                                 ADRESH7_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRESL0>
extern volatile __bit                   ADRESL0             __at(0x4D8);	// @ (0x9B * 8 + 0)
#define                                 ADRESL0_bit         _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRESL1>
extern volatile __bit                   ADRESL1             __at(0x4D9);	// @ (0x9B * 8 + 1)
#define                                 ADRESL1_bit         _BIT_ACCESS(ADRESL,1)
// ADRESL<ADRESL2>
extern volatile __bit                   ADRESL2             __at(0x4DA);	// @ (0x9B * 8 + 2)
#define                                 ADRESL2_bit         _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRESL3>
extern volatile __bit                   ADRESL3             __at(0x4DB);	// @ (0x9B * 8 + 3)
#define                                 ADRESL3_bit         _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRESL4>
extern volatile __bit                   ADRESL4             __at(0x4DC);	// @ (0x9B * 8 + 4)
#define                                 ADRESL4_bit         _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRESL5>
extern volatile __bit                   ADRESL5             __at(0x4DD);	// @ (0x9B * 8 + 5)
#define                                 ADRESL5_bit         _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRESL6>
extern volatile __bit                   ADRESL6             __at(0x4DE);	// @ (0x9B * 8 + 6)
#define                                 ADRESL6_bit         _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRESL7>
extern volatile __bit                   ADRESL7             __at(0x4DF);	// @ (0x9B * 8 + 7)
#define                                 ADRESL7_bit         _BIT_ACCESS(ADRESL,7)
// PIE1<ADTIE>
extern volatile __bit                   ADTIE               __at(0x38B9);	// @ (0x717 * 8 + 1)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<ADTIF>
extern volatile __bit                   ADTIF               __at(0x3869);	// @ (0x70D * 8 + 1)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR1,1)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0xF9C0);	// @ (0x1F38 * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0xF9C1);	// @ (0x1F38 * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0xF9C2);	// @ (0x1F38 * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA3>
extern volatile __bit                   ANSA3               __at(0xF9C3);	// @ (0x1F38 * 8 + 3)
#define                                 ANSA3_bit           _BIT_ACCESS(ANSELA,3)
// ANSELA<ANSA4>
extern volatile __bit                   ANSA4               __at(0xF9C4);	// @ (0x1F38 * 8 + 4)
#define                                 ANSA4_bit           _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSA5>
extern volatile __bit                   ANSA5               __at(0xF9C5);	// @ (0x1F38 * 8 + 5)
#define                                 ANSA5_bit           _BIT_ACCESS(ANSELA,5)
// ANSELA<ANSA6>
extern volatile __bit                   ANSA6               __at(0xF9C6);	// @ (0x1F38 * 8 + 6)
#define                                 ANSA6_bit           _BIT_ACCESS(ANSELA,6)
// ANSELA<ANSA7>
extern volatile __bit                   ANSA7               __at(0xF9C7);	// @ (0x1F38 * 8 + 7)
#define                                 ANSA7_bit           _BIT_ACCESS(ANSELA,7)
// ANSELB<ANSB0>
extern volatile __bit                   ANSB0               __at(0xFA18);	// @ (0x1F43 * 8 + 0)
#define                                 ANSB0_bit           _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSB1>
extern volatile __bit                   ANSB1               __at(0xFA19);	// @ (0x1F43 * 8 + 1)
#define                                 ANSB1_bit           _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSB2>
extern volatile __bit                   ANSB2               __at(0xFA1A);	// @ (0x1F43 * 8 + 2)
#define                                 ANSB2_bit           _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSB3>
extern volatile __bit                   ANSB3               __at(0xFA1B);	// @ (0x1F43 * 8 + 3)
#define                                 ANSB3_bit           _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSB4>
extern volatile __bit                   ANSB4               __at(0xFA1C);	// @ (0x1F43 * 8 + 4)
#define                                 ANSB4_bit           _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSB5>
extern volatile __bit                   ANSB5               __at(0xFA1D);	// @ (0x1F43 * 8 + 5)
#define                                 ANSB5_bit           _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSB6>
extern volatile __bit                   ANSB6               __at(0xFA1E);	// @ (0x1F43 * 8 + 6)
#define                                 ANSB6_bit           _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSB7>
extern volatile __bit                   ANSB7               __at(0xFA1F);	// @ (0x1F43 * 8 + 7)
#define                                 ANSB7_bit           _BIT_ACCESS(ANSELB,7)
// ANSELC<ANSC0>
extern volatile __bit                   ANSC0               __at(0xFA70);	// @ (0x1F4E * 8 + 0)
#define                                 ANSC0_bit           _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSC1>
extern volatile __bit                   ANSC1               __at(0xFA71);	// @ (0x1F4E * 8 + 1)
#define                                 ANSC1_bit           _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSC2>
extern volatile __bit                   ANSC2               __at(0xFA72);	// @ (0x1F4E * 8 + 2)
#define                                 ANSC2_bit           _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSC3>
extern volatile __bit                   ANSC3               __at(0xFA73);	// @ (0x1F4E * 8 + 3)
#define                                 ANSC3_bit           _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSC4>
extern volatile __bit                   ANSC4               __at(0xFA74);	// @ (0x1F4E * 8 + 4)
#define                                 ANSC4_bit           _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSC5>
extern volatile __bit                   ANSC5               __at(0xFA75);	// @ (0x1F4E * 8 + 5)
#define                                 ANSC5_bit           _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSC6>
extern volatile __bit                   ANSC6               __at(0xFA76);	// @ (0x1F4E * 8 + 6)
#define                                 ANSC6_bit           _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSC7>
extern volatile __bit                   ANSC7               __at(0xFA77);	// @ (0x1F4E * 8 + 7)
#define                                 ANSC7_bit           _BIT_ACCESS(ANSELC,7)
// CWG1AS1<AS0E>
extern volatile __bit                   AS0E                __at(0x3098);	// @ (0x613 * 8 + 0)
#define                                 AS0E_bit            _BIT_ACCESS(CWG1AS1,0)
// CWG1AS1<AS1E>
extern volatile __bit                   AS1E                __at(0x3099);	// @ (0x613 * 8 + 1)
#define                                 AS1E_bit            _BIT_ACCESS(CWG1AS1,1)
// CWG1AS1<AS2E>
extern volatile __bit                   AS2E                __at(0x309A);	// @ (0x613 * 8 + 2)
#define                                 AS2E_bit            _BIT_ACCESS(CWG1AS1,2)
// CWG1AS1<AS3E>
extern volatile __bit                   AS3E                __at(0x309B);	// @ (0x613 * 8 + 3)
#define                                 AS3E_bit            _BIT_ACCESS(CWG1AS1,3)
// CWG1AS1<AS4E>
extern volatile __bit                   AS4E                __at(0x309C);	// @ (0x613 * 8 + 4)
#define                                 AS4E_bit            _BIT_ACCESS(CWG1AS1,4)
// PIE3<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x38C9);	// @ (0x719 * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x3879);	// @ (0x70F * 8 + 1)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR3,1)
// PIE3<BCL2IE>
extern volatile __bit                   BCL2IE              __at(0x38CB);	// @ (0x719 * 8 + 3)
#define                                 BCL2IE_bit          _BIT_ACCESS(PIE3,3)
// PIR3<BCL2IF>
extern volatile __bit                   BCL2IF              __at(0x387B);	// @ (0x70F * 8 + 3)
#define                                 BCL2IF_bit          _BIT_ACCESS(PIR3,3)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// SSP2STAT<BF2>
extern volatile __bit                   BF2                 __at(0xCC8);	// @ (0x199 * 8 + 0)
#define                                 BF2_bit             _BIT_ACCESS(SSP2STAT,0)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// BSR<BSR5>
extern volatile __bit                   BSR5                __at(0x45);	// @ (0x8 * 8 + 5)
#define                                 BSR5_bit            _BIT_ACCESS(BSR,5)
// CM1CON0<C1EN>
extern volatile __bit                   C1EN                __at(0x4C87);	// @ (0x990 * 8 + 7)
#define                                 C1EN_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x4C81);	// @ (0x990 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE2<C1IE>
extern volatile __bit                   C1IE                __at(0x38C0);	// @ (0x718 * 8 + 0)
#define                                 C1IE_bit            _BIT_ACCESS(PIE2,0)
// PIR2<C1IF>
extern volatile __bit                   C1IF                __at(0x3870);	// @ (0x70E * 8 + 0)
#define                                 C1IF_bit            _BIT_ACCESS(PIR2,0)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x4C88);	// @ (0x991 * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x4C89);	// @ (0x991 * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// CM1NCH<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x4C90);	// @ (0x992 * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NCH,0)
// CM1NCH<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x4C91);	// @ (0x992 * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NCH,1)
// CM1NCH<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x4C92);	// @ (0x992 * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NCH,2)
// CM1PCH<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x4C98);	// @ (0x993 * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PCH,0)
// CM1PCH<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x4C99);	// @ (0x993 * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PCH,1)
// CM1PCH<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x4C9A);	// @ (0x993 * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PCH,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x4C84);	// @ (0x990 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x4C80);	// @ (0x990 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CM2CON0<C2EN>
extern volatile __bit                   C2EN                __at(0x4CA7);	// @ (0x994 * 8 + 7)
#define                                 C2EN_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x4CA1);	// @ (0x994 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE2<C2IE>
extern volatile __bit                   C2IE                __at(0x38C1);	// @ (0x718 * 8 + 1)
#define                                 C2IE_bit            _BIT_ACCESS(PIE2,1)
// PIR2<C2IF>
extern volatile __bit                   C2IF                __at(0x3871);	// @ (0x70E * 8 + 1)
#define                                 C2IF_bit            _BIT_ACCESS(PIR2,1)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x4CA8);	// @ (0x995 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x4CA9);	// @ (0x995 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// CM2NCH<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x4CB0);	// @ (0x996 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NCH,0)
// CM2NCH<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x4CB1);	// @ (0x996 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NCH,1)
// CM2NCH<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x4CB2);	// @ (0x996 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NCH,2)
// CM2PCH<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x4CB8);	// @ (0x997 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PCH,0)
// CM2PCH<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x4CB9);	// @ (0x997 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PCH,1)
// CM2PCH<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x4CBA);	// @ (0x997 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PCH,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x4CA4);	// @ (0x994 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x4CA0);	// @ (0x994 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// TMR1L<CAL01>
extern volatile __bit                   CAL01               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 CAL01_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<CAL11>
extern volatile __bit                   CAL11               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 CAL11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1L<CAL21>
extern volatile __bit                   CAL21               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 CAL21_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<CAL31>
extern volatile __bit                   CAL31               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 CAL31_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<CAL41>
extern volatile __bit                   CAL41               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 CAL41_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<CAL51>
extern volatile __bit                   CAL51               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 CAL51_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<CAL61>
extern volatile __bit                   CAL61               __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 CAL61_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<CAL71>
extern volatile __bit                   CAL71               __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 CAL71_bit           _BIT_ACCESS(TMR1L,7)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x1878);	// @ (0x30F * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x1879);	// @ (0x30F * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x1877);	// @ (0x30E * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x1874);	// @ (0x30E * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE6<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x38E0);	// @ (0x71C * 8 + 0)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x3890);	// @ (0x712 * 8 + 0)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR6,0)
// PMD3<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD3,0)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x1873);	// @ (0x30E * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0xF508);	// @ (0x1EA1 * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0xF509);	// @ (0x1EA1 * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0xF50A);	// @ (0x1EA1 * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0xF50B);	// @ (0x1EA1 * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0xF50C);	// @ (0x1EA1 * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP1PPS<CCP1PPS5>
extern volatile __bit                   CCP1PPS5            __at(0xF50D);	// @ (0x1EA1 * 8 + 5)
#define                                 CCP1PPS5_bit        _BIT_ACCESS(CCP1PPS,5)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x1898);	// @ (0x313 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x1899);	// @ (0x313 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x189A);	// @ (0x313 * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x1897);	// @ (0x312 * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x1894);	// @ (0x312 * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE6<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x38E1);	// @ (0x71C * 8 + 1)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR6,1)
// PMD3<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD3,1)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x1890);	// @ (0x312 * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x1891);	// @ (0x312 * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x1892);	// @ (0x312 * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x1893);	// @ (0x312 * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x1895);	// @ (0x312 * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0xF510);	// @ (0x1EA2 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0xF511);	// @ (0x1EA2 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0xF512);	// @ (0x1EA2 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0xF513);	// @ (0x1EA2 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0xF514);	// @ (0x1EA2 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// CCP2PPS<CCP2PPS5>
extern volatile __bit                   CCP2PPS5            __at(0xF515);	// @ (0x1EA2 * 8 + 5)
#define                                 CCP2PPS5_bit        _BIT_ACCESS(CCP2PPS,5)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x4862);	// @ (0x90C * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x4863);	// @ (0x90C * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x4470);	// @ (0x88E * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x4471);	// @ (0x88E * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x4472);	// @ (0x88E * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x4473);	// @ (0x88E * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// ADCON0<CHS0>
extern volatile __bit                   CHS0                __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 CHS0_bit            _BIT_ACCESS(ADCON0,2)
// ADCON0<CHS1>
extern volatile __bit                   CHS1                __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 CHS1_bit            _BIT_ACCESS(ADCON0,3)
// ADCON0<CHS2>
extern volatile __bit                   CHS2                __at(0x4EC);	// @ (0x9D * 8 + 4)
#define                                 CHS2_bit            _BIT_ACCESS(ADCON0,4)
// ADCON0<CHS3>
extern volatile __bit                   CHS3                __at(0x4ED);	// @ (0x9D * 8 + 5)
#define                                 CHS3_bit            _BIT_ACCESS(ADCON0,5)
// ADCON0<CHS4>
extern volatile __bit                   CHS4                __at(0x4EE);	// @ (0x9D * 8 + 6)
#define                                 CHS4_bit            _BIT_ACCESS(ADCON0,6)
// ADCON0<CHS5>
extern volatile __bit                   CHS5                __at(0x4EF);	// @ (0x9D * 8 + 7)
#define                                 CHS5_bit            _BIT_ACCESS(ADCON0,7)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP2STAT<CKE2>
extern volatile __bit                   CKE2                __at(0xCCE);	// @ (0x199 * 8 + 6)
#define                                 CKE2_bit            _BIT_ACCESS(SSP2STAT,6)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// SSP2CON1<CKP2>
extern volatile __bit                   CKP2                __at(0xCD4);	// @ (0x19A * 8 + 4)
#define                                 CKP2_bit            _BIT_ACCESS(SSP2CON1,4)
// T2HLT<CKPOL>
extern volatile __bit                   CKPOL               __at(0x147E);	// @ (0x28F * 8 + 6)
#define                                 CKPOL_bit           _BIT_ACCESS(T2HLT,6)
// T2CON<CKPS2>
extern volatile __bit                   CKPS2               __at(0x1476);	// @ (0x28E * 8 + 6)
#define                                 CKPS2_bit           _BIT_ACCESS(T2CON,6)
// T2HLT<CKSYNC>
extern volatile __bit                   CKSYNC              __at(0x147D);	// @ (0x28F * 8 + 5)
#define                                 CKSYNC_bit          _BIT_ACCESS(T2HLT,5)
// PIE5<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x38DC);	// @ (0x71B * 8 + 4)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x388C);	// @ (0x711 * 8 + 4)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR5,4)
// PMD5<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x3CD9);	// @ (0x79B * 8 + 1)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD5,1)
// PIE5<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x38DD);	// @ (0x71B * 8 + 5)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE5,5)
// PIR5<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x388D);	// @ (0x711 * 8 + 5)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR5,5)
// PMD5<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x3CDA);	// @ (0x79B * 8 + 2)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD5,2)
// PIE5<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x38DE);	// @ (0x71B * 8 + 6)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE5,6)
// PIR5<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x388E);	// @ (0x711 * 8 + 6)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR5,6)
// PMD5<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x3CDB);	// @ (0x79B * 8 + 3)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD5,3)
// PIE5<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x38DF);	// @ (0x71B * 8 + 7)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE5,7)
// PIR5<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x388F);	// @ (0x711 * 8 + 7)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR5,7)
// PMD5<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x3CDC);	// @ (0x79B * 8 + 4)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD5,4)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0xF5D8);	// @ (0x1EBB * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0xF5D9);	// @ (0x1EBB * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0xF5DA);	// @ (0x1EBB * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0xF5DB);	// @ (0x1EBB * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0xF5DC);	// @ (0x1EBB * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN0PPS<CLCIN0PPS5>
extern volatile __bit                   CLCIN0PPS5          __at(0xF5DD);	// @ (0x1EBB * 8 + 5)
#define                                 CLCIN0PPS5_bit      _BIT_ACCESS(CLCIN0PPS,5)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0xF5E0);	// @ (0x1EBC * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0xF5E1);	// @ (0x1EBC * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0xF5E2);	// @ (0x1EBC * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0xF5E3);	// @ (0x1EBC * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0xF5E4);	// @ (0x1EBC * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN1PPS<CLCIN1PPS5>
extern volatile __bit                   CLCIN1PPS5          __at(0xF5E5);	// @ (0x1EBC * 8 + 5)
#define                                 CLCIN1PPS5_bit      _BIT_ACCESS(CLCIN1PPS,5)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0xF5E8);	// @ (0x1EBD * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0xF5E9);	// @ (0x1EBD * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0xF5EA);	// @ (0x1EBD * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0xF5EB);	// @ (0x1EBD * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0xF5EC);	// @ (0x1EBD * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN2PPS<CLCIN2PPS5>
extern volatile __bit                   CLCIN2PPS5          __at(0xF5ED);	// @ (0x1EBD * 8 + 5)
#define                                 CLCIN2PPS5_bit      _BIT_ACCESS(CLCIN2PPS,5)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0xF5F0);	// @ (0x1EBE * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0xF5F1);	// @ (0x1EBE * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0xF5F2);	// @ (0x1EBE * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0xF5F3);	// @ (0x1EBE * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0xF5F4);	// @ (0x1EBE * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// CLCIN3PPS<CLCIN3PPS5>
extern volatile __bit                   CLCIN3PPS5          __at(0xF5F5);	// @ (0x1EBE * 8 + 5)
#define                                 CLCIN3PPS5_bit      _BIT_ACCESS(CLCIN3PPS,5)
// CLKRCLK<CLKRCLK0>
extern volatile __bit                   CLKRCLK0            __at(0x44B0);	// @ (0x896 * 8 + 0)
#define                                 CLKRCLK0_bit        _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLKRCLK1>
extern volatile __bit                   CLKRCLK1            __at(0x44B1);	// @ (0x896 * 8 + 1)
#define                                 CLKRCLK1_bit        _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLKRCLK2>
extern volatile __bit                   CLKRCLK2            __at(0x44B2);	// @ (0x896 * 8 + 2)
#define                                 CLKRCLK2_bit        _BIT_ACCESS(CLKRCLK,2)
// CLKRCLK<CLKRCLK3>
extern volatile __bit                   CLKRCLK3            __at(0x44B3);	// @ (0x896 * 8 + 3)
#define                                 CLKRCLK3_bit        _BIT_ACCESS(CLKRCLK,3)
// CLKRCON<CLKRDC0>
extern volatile __bit                   CLKRDC0             __at(0x44AB);	// @ (0x895 * 8 + 3)
#define                                 CLKRDC0_bit         _BIT_ACCESS(CLKRCON,3)
// CLKRCON<CLKRDC1>
extern volatile __bit                   CLKRDC1             __at(0x44AC);	// @ (0x895 * 8 + 4)
#define                                 CLKRDC1_bit         _BIT_ACCESS(CLKRCON,4)
// CLKRCON<CLKRDIV0>
extern volatile __bit                   CLKRDIV0            __at(0x44A8);	// @ (0x895 * 8 + 0)
#define                                 CLKRDIV0_bit        _BIT_ACCESS(CLKRCON,0)
// CLKRCON<CLKRDIV1>
extern volatile __bit                   CLKRDIV1            __at(0x44A9);	// @ (0x895 * 8 + 1)
#define                                 CLKRDIV1_bit        _BIT_ACCESS(CLKRCON,1)
// CLKRCON<CLKRDIV2>
extern volatile __bit                   CLKRDIV2            __at(0x44AA);	// @ (0x895 * 8 + 2)
#define                                 CLKRDIV2_bit        _BIT_ACCESS(CLKRCON,2)
// CLKRCON<CLKREN>
extern volatile __bit                   CLKREN              __at(0x44AF);	// @ (0x895 * 8 + 7)
#define                                 CLKREN_bit          _BIT_ACCESS(CLKRCON,7)
// PMD0<CLKRMD>
extern volatile __bit                   CLKRMD              __at(0x3CB1);	// @ (0x796 * 8 + 1)
#define                                 CLKRMD_bit          _BIT_ACCESS(PMD0,1)
// PMD2<CMP1MD>
extern volatile __bit                   CMP1MD              __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 CMP1MD_bit          _BIT_ACCESS(PMD2,1)
// PMD2<CMP2MD>
extern volatile __bit                   CMP2MD              __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 CMP2MD_bit          _BIT_ACCESS(PMD2,2)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x4474);	// @ (0x88E * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x4475);	// @ (0x88E * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x4476);	// @ (0x88E * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// CWG1CLKCON<CS>
extern volatile __bit                   CS                  __at(0x3060);	// @ (0x60C * 8 + 0)
#define                                 CS_bit              _BIT_ACCESS(CWG1CLKCON,0)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x447F);	// @ (0x88F * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE1<CSWIE>
extern volatile __bit                   CSWIE               __at(0x38BE);	// @ (0x717 * 8 + 6)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE1,6)
// PIR1<CSWIF>
extern volatile __bit                   CSWIF               __at(0x386E);	// @ (0x70D * 8 + 6)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR1,6)
// CWG1CLKCON<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x3060);	// @ (0x60C * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLKCON,0)
// CWG1DAT<CWG1DAT0>
extern volatile __bit                   CWG1DAT0            __at(0x3068);	// @ (0x60D * 8 + 0)
#define                                 CWG1DAT0_bit        _BIT_ACCESS(CWG1DAT,0)
// CWG1DAT<CWG1DAT1>
extern volatile __bit                   CWG1DAT1            __at(0x3069);	// @ (0x60D * 8 + 1)
#define                                 CWG1DAT1_bit        _BIT_ACCESS(CWG1DAT,1)
// CWG1DAT<CWG1DAT2>
extern volatile __bit                   CWG1DAT2            __at(0x306A);	// @ (0x60D * 8 + 2)
#define                                 CWG1DAT2_bit        _BIT_ACCESS(CWG1DAT,2)
// CWG1DAT<CWG1DAT3>
extern volatile __bit                   CWG1DAT3            __at(0x306B);	// @ (0x60D * 8 + 3)
#define                                 CWG1DAT3_bit        _BIT_ACCESS(CWG1DAT,3)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x3078);	// @ (0x60F * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x3079);	// @ (0x60F * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x307A);	// @ (0x60F * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x307C);	// @ (0x60F * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x3071);	// @ (0x60E * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x3072);	// @ (0x60E * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x3073);	// @ (0x60E * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x3074);	// @ (0x60E * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x3075);	// @ (0x60E * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE7<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x38E8);	// @ (0x71D * 8 + 0)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE7,0)
// PIR7<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x3898);	// @ (0x713 * 8 + 0)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR7,0)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD4<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x3CD0);	// @ (0x79A * 8 + 0)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD4,0)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x3080);	// @ (0x610 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x3081);	// @ (0x610 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x3082);	// @ (0x610 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x30A4);	// @ (0x614 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x30A5);	// @ (0x614 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x30A6);	// @ (0x614 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x30A7);	// @ (0x614 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1PPS<CWG1PPS0>
extern volatile __bit                   CWG1PPS0            __at(0xF588);	// @ (0x1EB1 * 8 + 0)
#define                                 CWG1PPS0_bit        _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWG1PPS1>
extern volatile __bit                   CWG1PPS1            __at(0xF589);	// @ (0x1EB1 * 8 + 1)
#define                                 CWG1PPS1_bit        _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWG1PPS2>
extern volatile __bit                   CWG1PPS2            __at(0xF58A);	// @ (0x1EB1 * 8 + 2)
#define                                 CWG1PPS2_bit        _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWG1PPS3>
extern volatile __bit                   CWG1PPS3            __at(0xF58B);	// @ (0x1EB1 * 8 + 3)
#define                                 CWG1PPS3_bit        _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWG1PPS4>
extern volatile __bit                   CWG1PPS4            __at(0xF58C);	// @ (0x1EB1 * 8 + 4)
#define                                 CWG1PPS4_bit        _BIT_ACCESS(CWG1PPS,4)
// CWG1PPS<CWG1PPS5>
extern volatile __bit                   CWG1PPS5            __at(0xF58D);	// @ (0x1EB1 * 8 + 5)
#define                                 CWG1PPS5_bit        _BIT_ACCESS(CWG1PPS,5)
// CWG1AS0<CWG1REN>
extern volatile __bit                   CWG1REN             __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 CWG1REN_bit         _BIT_ACCESS(CWG1AS0,6)
// CWG1AS0<CWG1SHUTDOWN>
extern volatile __bit                   CWG1SHUTDOWN        __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 CWG1SHUTDOWN_bit    _BIT_ACCESS(CWG1AS0,7)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x30A0);	// @ (0x614 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x30A1);	// @ (0x614 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x30A2);	// @ (0x614 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x30A3);	// @ (0x614 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<DA2>
extern volatile __bit                   DA2                 __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 DA2_bit             _BIT_ACCESS(SSP2STAT,5)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x4877);	// @ (0x90E * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// PMD2<DAC1MD>
extern volatile __bit                   DAC1MD              __at(0x3CC6);	// @ (0x798 * 8 + 6)
#define                                 DAC1MD_bit          _BIT_ACCESS(PMD2,6)
// DAC1CON0<DAC1NSS>
extern volatile __bit                   DAC1NSS             __at(0x4870);	// @ (0x90E * 8 + 0)
#define                                 DAC1NSS_bit         _BIT_ACCESS(DAC1CON0,0)
// DAC1CON0<DAC1OE1>
extern volatile __bit                   DAC1OE1             __at(0x4875);	// @ (0x90E * 8 + 5)
#define                                 DAC1OE1_bit         _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<DAC1OE2>
extern volatile __bit                   DAC1OE2             __at(0x4874);	// @ (0x90E * 8 + 4)
#define                                 DAC1OE2_bit         _BIT_ACCESS(DAC1CON0,4)
// DAC1CON0<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x4872);	// @ (0x90E * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x4873);	// @ (0x90E * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON0,3)
// DAC1CON1<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x4878);	// @ (0x90F * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1CON1,0)
// DAC1CON1<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x4879);	// @ (0x90F * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1CON1,1)
// DAC1CON1<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x487A);	// @ (0x90F * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1CON1,2)
// DAC1CON1<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x487B);	// @ (0x90F * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1CON1,3)
// DAC1CON1<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x487C);	// @ (0x90F * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1CON1,4)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<DATA_ADDRESS2>
extern volatile __bit                   DATA_ADDRESS2       __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 DATA_ADDRESS2_bit   _BIT_ACCESS(SSP2STAT,5)
// CWG1DBF<DBF0>
extern volatile __bit                   DBF0                __at(0x3078);	// @ (0x60F * 8 + 0)
#define                                 DBF0_bit            _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<DBF1>
extern volatile __bit                   DBF1                __at(0x3079);	// @ (0x60F * 8 + 1)
#define                                 DBF1_bit            _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<DBF2>
extern volatile __bit                   DBF2                __at(0x307A);	// @ (0x60F * 8 + 2)
#define                                 DBF2_bit            _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<DBF3>
extern volatile __bit                   DBF3                __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 DBF3_bit            _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<DBF4>
extern volatile __bit                   DBF4                __at(0x307C);	// @ (0x60F * 8 + 4)
#define                                 DBF4_bit            _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<DBF5>
extern volatile __bit                   DBF5                __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 DBF5_bit            _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<DBR0>
extern volatile __bit                   DBR0                __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 DBR0_bit            _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<DBR1>
extern volatile __bit                   DBR1                __at(0x3071);	// @ (0x60E * 8 + 1)
#define                                 DBR1_bit            _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<DBR2>
extern volatile __bit                   DBR2                __at(0x3072);	// @ (0x60E * 8 + 2)
#define                                 DBR2_bit            _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<DBR3>
extern volatile __bit                   DBR3                __at(0x3073);	// @ (0x60E * 8 + 3)
#define                                 DBR3_bit            _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<DBR4>
extern volatile __bit                   DBR4                __at(0x3074);	// @ (0x60E * 8 + 4)
#define                                 DBR4_bit            _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<DBR5>
extern volatile __bit                   DBR5                __at(0x3075);	// @ (0x60E * 8 + 5)
#define                                 DBR5_bit            _BIT_ACCESS(CWG1DBR,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x4464);	// @ (0x88C * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x4460);	// @ (0x88C * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x4461);	// @ (0x88C * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x4462);	// @ (0x88C * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x4466);	// @ (0x88C * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_A2>
extern volatile __bit                   D_A2                __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 D_A2_bit            _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_nA2>
extern volatile __bit                   D_nA2               __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 D_nA2_bit           _BIT_ACCESS(SSP2STAT,5)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x448F);	// @ (0x891 * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x4487);	// @ (0x890 * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0x40F4);	// @ (0x81E * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x4867);	// @ (0x90C * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x3CB6);	// @ (0x796 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x4866);	// @ (0x90C * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// SSP2CON2<GCEN2>
extern volatile __bit                   GCEN2               __at(0xCDF);	// @ (0x19B * 8 + 7)
#define                                 GCEN2_bit           _BIT_ACCESS(SSP2CON2,7)
// T1GCON<GE>
extern volatile __bit                   GE                  __at(0x107F);	// @ (0x20F * 8 + 7)
#define                                 GE_bit              _BIT_ACCESS(T1GCON,7)
// T1GCON<GGO_nDONE>
extern volatile __bit                   GGO_nDONE           __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 GGO_nDONE_bit       _BIT_ACCESS(T1GCON,3)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// ADCON0<GO>
extern volatile __bit                   GO                  __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 GO_bit              _BIT_ACCESS(ADCON0,1)
// ADCON0<GOnDONE>
extern volatile __bit                   GOnDONE             __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 GOnDONE_bit         _BIT_ACCESS(ADCON0,1)
// T1GCON<GPOL>
extern volatile __bit                   GPOL                __at(0x107E);	// @ (0x20F * 8 + 6)
#define                                 GPOL_bit            _BIT_ACCESS(T1GCON,6)
// T1GCON<GSPM>
extern volatile __bit                   GSPM                __at(0x107C);	// @ (0x20F * 8 + 4)
#define                                 GSPM_bit            _BIT_ACCESS(T1GCON,4)
// T1GATE<GSS0>
extern volatile __bit                   GSS0                __at(0x1080);	// @ (0x210 * 8 + 0)
#define                                 GSS0_bit            _BIT_ACCESS(T1GATE,0)
// T1GATE<GSS1>
extern volatile __bit                   GSS1                __at(0x1081);	// @ (0x210 * 8 + 1)
#define                                 GSS1_bit            _BIT_ACCESS(T1GATE,1)
// T1GATE<GSS2>
extern volatile __bit                   GSS2                __at(0x1082);	// @ (0x210 * 8 + 2)
#define                                 GSS2_bit            _BIT_ACCESS(T1GATE,2)
// T1GATE<GSS3>
extern volatile __bit                   GSS3                __at(0x1083);	// @ (0x210 * 8 + 3)
#define                                 GSS3_bit            _BIT_ACCESS(T1GATE,3)
// T1GATE<GSS4>
extern volatile __bit                   GSS4                __at(0x1084);	// @ (0x210 * 8 + 4)
#define                                 GSS4_bit            _BIT_ACCESS(T1GATE,4)
// T1GCON<GTM>
extern volatile __bit                   GTM                 __at(0x107D);	// @ (0x20F * 8 + 5)
#define                                 GTM_bit             _BIT_ACCESS(T1GCON,5)
// T1GCON<GVAL>
extern volatile __bit                   GVAL                __at(0x107A);	// @ (0x20F * 8 + 2)
#define                                 GVAL_bit            _BIT_ACCESS(T1GCON,2)
// OSCFRQ<HFFRQ0>
extern volatile __bit                   HFFRQ0              __at(0x4498);	// @ (0x893 * 8 + 0)
#define                                 HFFRQ0_bit          _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<HFFRQ1>
extern volatile __bit                   HFFRQ1              __at(0x4499);	// @ (0x893 * 8 + 1)
#define                                 HFFRQ1_bit          _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<HFFRQ2>
extern volatile __bit                   HFFRQ2              __at(0x449A);	// @ (0x893 * 8 + 2)
#define                                 HFFRQ2_bit          _BIT_ACCESS(OSCFRQ,2)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x448E);	// @ (0x891 * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x4486);	// @ (0x890 * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// OSCTUNE<HFTUN0>
extern volatile __bit                   HFTUN0              __at(0x4490);	// @ (0x892 * 8 + 0)
#define                                 HFTUN0_bit          _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<HFTUN1>
extern volatile __bit                   HFTUN1              __at(0x4491);	// @ (0x892 * 8 + 1)
#define                                 HFTUN1_bit          _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<HFTUN2>
extern volatile __bit                   HFTUN2              __at(0x4492);	// @ (0x892 * 8 + 2)
#define                                 HFTUN2_bit          _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<HFTUN3>
extern volatile __bit                   HFTUN3              __at(0x4493);	// @ (0x892 * 8 + 3)
#define                                 HFTUN3_bit          _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<HFTUN4>
extern volatile __bit                   HFTUN4              __at(0x4494);	// @ (0x892 * 8 + 4)
#define                                 HFTUN4_bit          _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<HFTUN5>
extern volatile __bit                   HFTUN5              __at(0x4495);	// @ (0x892 * 8 + 5)
#define                                 HFTUN5_bit          _BIT_ACCESS(OSCTUNE,5)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<I2C_DAT2>
extern volatile __bit                   I2C_DAT2            __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 I2C_DAT2_bit        _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<I2C_READ2>
extern volatile __bit                   I2C_READ2           __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 I2C_READ2_bit       _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP2STAT<I2C_START2>
extern volatile __bit                   I2C_START2          __at(0xCCB);	// @ (0x199 * 8 + 3)
#define                                 I2C_START2_bit      _BIT_ACCESS(SSP2STAT,3)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x4467);	// @ (0x88C * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// CWG1CON1<IN>
extern volatile __bit                   IN                  __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 IN_bit              _BIT_ACCESS(CWG1CON1,5)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0xF9E0);	// @ (0x1F3C * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0xF9E1);	// @ (0x1F3C * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0xF9E2);	// @ (0x1F3C * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0xF9E3);	// @ (0x1F3C * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0xF9E4);	// @ (0x1F3C * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0xF9E5);	// @ (0x1F3C * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLA<INLVLA6>
extern volatile __bit                   INLVLA6             __at(0xF9E6);	// @ (0x1F3C * 8 + 6)
#define                                 INLVLA6_bit         _BIT_ACCESS(INLVLA,6)
// INLVLA<INLVLA7>
extern volatile __bit                   INLVLA7             __at(0xF9E7);	// @ (0x1F3C * 8 + 7)
#define                                 INLVLA7_bit         _BIT_ACCESS(INLVLA,7)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0xFA38);	// @ (0x1F47 * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0xFA39);	// @ (0x1F47 * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0xFA3A);	// @ (0x1F47 * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0xFA3B);	// @ (0x1F47 * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0xFA3C);	// @ (0x1F47 * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0xFA3D);	// @ (0x1F47 * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0xFA3E);	// @ (0x1F47 * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0xFA3F);	// @ (0x1F47 * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0xFA90);	// @ (0x1F52 * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0xFA91);	// @ (0x1F52 * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0xFA92);	// @ (0x1F52 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0xFA93);	// @ (0x1F52 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0xFA94);	// @ (0x1F52 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0xFA95);	// @ (0x1F52 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0xFA96);	// @ (0x1F52 * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0xFA97);	// @ (0x1F52 * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// INLVLE<INLVLE3>
extern volatile __bit                   INLVLE3             __at(0xFB43);	// @ (0x1F68 * 8 + 3)
#define                                 INLVLE3_bit         _BIT_ACCESS(INLVLE,3)
// PIE0<INTE>
extern volatile __bit                   INTE                __at(0x38B0);	// @ (0x716 * 8 + 0)
#define                                 INTE_bit            _BIT_ACCESS(PIE0,0)
// INTCON<INTEDG>
extern volatile __bit                   INTEDG              __at(0x58);	// @ (0xB * 8 + 0)
#define                                 INTEDG_bit          _BIT_ACCESS(INTCON,0)
// PIR0<INTF>
extern volatile __bit                   INTF                __at(0x3860);	// @ (0x70C * 8 + 0)
#define                                 INTF_bit            _BIT_ACCESS(PIR0,0)
// INTPPS<INTPPS0>
extern volatile __bit                   INTPPS0             __at(0xF480);	// @ (0x1E90 * 8 + 0)
#define                                 INTPPS0_bit         _BIT_ACCESS(INTPPS,0)
// INTPPS<INTPPS1>
extern volatile __bit                   INTPPS1             __at(0xF481);	// @ (0x1E90 * 8 + 1)
#define                                 INTPPS1_bit         _BIT_ACCESS(INTPPS,1)
// INTPPS<INTPPS2>
extern volatile __bit                   INTPPS2             __at(0xF482);	// @ (0x1E90 * 8 + 2)
#define                                 INTPPS2_bit         _BIT_ACCESS(INTPPS,2)
// INTPPS<INTPPS3>
extern volatile __bit                   INTPPS3             __at(0xF483);	// @ (0x1E90 * 8 + 3)
#define                                 INTPPS3_bit         _BIT_ACCESS(INTPPS,3)
// INTPPS<INTPPS4>
extern volatile __bit                   INTPPS4             __at(0xF484);	// @ (0x1E90 * 8 + 4)
#define                                 INTPPS4_bit         _BIT_ACCESS(INTPPS,4)
// INTPPS<INTPPS5>
extern volatile __bit                   INTPPS5             __at(0xF485);	// @ (0x1E90 * 8 + 5)
#define                                 INTPPS5_bit         _BIT_ACCESS(INTPPS,5)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0xF9F8);	// @ (0x1F3F * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0xF9F9);	// @ (0x1F3F * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0xF9FA);	// @ (0x1F3F * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0xF9FB);	// @ (0x1F3F * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0xF9FC);	// @ (0x1F3F * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0xF9FD);	// @ (0x1F3F * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAF<IOCAF6>
extern volatile __bit                   IOCAF6              __at(0xF9FE);	// @ (0x1F3F * 8 + 6)
#define                                 IOCAF6_bit          _BIT_ACCESS(IOCAF,6)
// IOCAF<IOCAF7>
extern volatile __bit                   IOCAF7              __at(0xF9FF);	// @ (0x1F3F * 8 + 7)
#define                                 IOCAF7_bit          _BIT_ACCESS(IOCAF,7)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0xF9F0);	// @ (0x1F3E * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0xF9F1);	// @ (0x1F3E * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0xF9F2);	// @ (0x1F3E * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0xF9F3);	// @ (0x1F3E * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0xF9F4);	// @ (0x1F3E * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0xF9F5);	// @ (0x1F3E * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAN<IOCAN6>
extern volatile __bit                   IOCAN6              __at(0xF9F6);	// @ (0x1F3E * 8 + 6)
#define                                 IOCAN6_bit          _BIT_ACCESS(IOCAN,6)
// IOCAN<IOCAN7>
extern volatile __bit                   IOCAN7              __at(0xF9F7);	// @ (0x1F3E * 8 + 7)
#define                                 IOCAN7_bit          _BIT_ACCESS(IOCAN,7)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0xF9E8);	// @ (0x1F3D * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0xF9E9);	// @ (0x1F3D * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0xF9EA);	// @ (0x1F3D * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0xF9EB);	// @ (0x1F3D * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0xF9EC);	// @ (0x1F3D * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0xF9ED);	// @ (0x1F3D * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCAP<IOCAP6>
extern volatile __bit                   IOCAP6              __at(0xF9EE);	// @ (0x1F3D * 8 + 6)
#define                                 IOCAP6_bit          _BIT_ACCESS(IOCAP,6)
// IOCAP<IOCAP7>
extern volatile __bit                   IOCAP7              __at(0xF9EF);	// @ (0x1F3D * 8 + 7)
#define                                 IOCAP7_bit          _BIT_ACCESS(IOCAP,7)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0xFA50);	// @ (0x1F4A * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0xFA51);	// @ (0x1F4A * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0xFA52);	// @ (0x1F4A * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0xFA53);	// @ (0x1F4A * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0xFA54);	// @ (0x1F4A * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0xFA55);	// @ (0x1F4A * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0xFA56);	// @ (0x1F4A * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0xFA57);	// @ (0x1F4A * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0xFA48);	// @ (0x1F49 * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0xFA49);	// @ (0x1F49 * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0xFA4A);	// @ (0x1F49 * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0xFA4B);	// @ (0x1F49 * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0xFA4C);	// @ (0x1F49 * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0xFA4D);	// @ (0x1F49 * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0xFA4E);	// @ (0x1F49 * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0xFA4F);	// @ (0x1F49 * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0xFA40);	// @ (0x1F48 * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0xFA41);	// @ (0x1F48 * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0xFA42);	// @ (0x1F48 * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0xFA43);	// @ (0x1F48 * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0xFA44);	// @ (0x1F48 * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0xFA45);	// @ (0x1F48 * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0xFA46);	// @ (0x1F48 * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0xFA47);	// @ (0x1F48 * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0xFAA8);	// @ (0x1F55 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0xFAA9);	// @ (0x1F55 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0xFAAA);	// @ (0x1F55 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0xFAAB);	// @ (0x1F55 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0xFAAC);	// @ (0x1F55 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0xFAAD);	// @ (0x1F55 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0xFAAE);	// @ (0x1F55 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0xFAAF);	// @ (0x1F55 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0xFAA0);	// @ (0x1F54 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0xFAA1);	// @ (0x1F54 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0xFAA2);	// @ (0x1F54 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0xFAA3);	// @ (0x1F54 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0xFAA4);	// @ (0x1F54 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0xFAA5);	// @ (0x1F54 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0xFAA6);	// @ (0x1F54 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0xFAA7);	// @ (0x1F54 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0xFA98);	// @ (0x1F53 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0xFA99);	// @ (0x1F53 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0xFA9A);	// @ (0x1F53 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0xFA9B);	// @ (0x1F53 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0xFA9C);	// @ (0x1F53 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0xFA9D);	// @ (0x1F53 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0xFA9E);	// @ (0x1F53 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0xFA9F);	// @ (0x1F53 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// IOCEF<IOCEF3>
extern volatile __bit                   IOCEF3              __at(0xFB5B);	// @ (0x1F6B * 8 + 3)
#define                                 IOCEF3_bit          _BIT_ACCESS(IOCEF,3)
// IOCEN<IOCEN3>
extern volatile __bit                   IOCEN3              __at(0xFB53);	// @ (0x1F6A * 8 + 3)
#define                                 IOCEN3_bit          _BIT_ACCESS(IOCEN,3)
// IOCEP<IOCEP3>
extern volatile __bit                   IOCEP3              __at(0xFB4B);	// @ (0x1F69 * 8 + 3)
#define                                 IOCEP3_bit          _BIT_ACCESS(IOCEP,3)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x38B4);	// @ (0x716 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x3864);	// @ (0x70C * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,4)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0xC1);	// @ (0x18 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0xC2);	// @ (0x18 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0xC3);	// @ (0x18 * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0xC5);	// @ (0x18 * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0xC7);	// @ (0x18 * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0xC8);	// @ (0x19 * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0xC9);	// @ (0x19 * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0xCA);	// @ (0x19 * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0xCB);	// @ (0x19 * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0xCC);	// @ (0x19 * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0xCD);	// @ (0x19 * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0xCE);	// @ (0x19 * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0xCF);	// @ (0x19 * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0xD0);	// @ (0x1A * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0xD1);	// @ (0x1A * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0xD2);	// @ (0x1A * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0xD3);	// @ (0x1A * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0xD4);	// @ (0x1A * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0xD5);	// @ (0x1A * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0xD6);	// @ (0x1A * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0xD7);	// @ (0x1A * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0xF090);	// @ (0x1E12 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0xF091);	// @ (0x1E12 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0xF092);	// @ (0x1E12 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0xF093);	// @ (0x1E12 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0xF094);	// @ (0x1E12 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL0<LC1D1S5>
extern volatile __bit                   LC1D1S5             __at(0xF095);	// @ (0x1E12 * 8 + 5)
#define                                 LC1D1S5_bit         _BIT_ACCESS(CLC1SEL0,5)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0xF098);	// @ (0x1E13 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0xF099);	// @ (0x1E13 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0xF09A);	// @ (0x1E13 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0xF09B);	// @ (0x1E13 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0xF09C);	// @ (0x1E13 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL1<LC1D2S5>
extern volatile __bit                   LC1D2S5             __at(0xF09D);	// @ (0x1E13 * 8 + 5)
#define                                 LC1D2S5_bit         _BIT_ACCESS(CLC1SEL1,5)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0xF0A0);	// @ (0x1E14 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0xF0A1);	// @ (0x1E14 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0xF0A2);	// @ (0x1E14 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0xF0A3);	// @ (0x1E14 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0xF0A4);	// @ (0x1E14 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL2<LC1D3S5>
extern volatile __bit                   LC1D3S5             __at(0xF0A5);	// @ (0x1E14 * 8 + 5)
#define                                 LC1D3S5_bit         _BIT_ACCESS(CLC1SEL2,5)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0xF0A8);	// @ (0x1E15 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0xF0A9);	// @ (0x1E15 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0xF0AA);	// @ (0x1E15 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0xF0AB);	// @ (0x1E15 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0xF0AC);	// @ (0x1E15 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1SEL3<LC1D4S5>
extern volatile __bit                   LC1D4S5             __at(0xF0AD);	// @ (0x1E15 * 8 + 5)
#define                                 LC1D4S5_bit         _BIT_ACCESS(CLC1SEL3,5)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0xF087);	// @ (0x1E10 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0xF0B0);	// @ (0x1E16 * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0xF0B1);	// @ (0x1E16 * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0xF0B2);	// @ (0x1E16 * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0xF0B3);	// @ (0x1E16 * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0xF0B4);	// @ (0x1E16 * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0xF0B5);	// @ (0x1E16 * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0xF0B6);	// @ (0x1E16 * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0xF0B7);	// @ (0x1E16 * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0xF088);	// @ (0x1E11 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0xF0B8);	// @ (0x1E17 * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0xF0B9);	// @ (0x1E17 * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0xF0BA);	// @ (0x1E17 * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0xF0BB);	// @ (0x1E17 * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0xF0BC);	// @ (0x1E17 * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0xF0BD);	// @ (0x1E17 * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0xF0BE);	// @ (0x1E17 * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0xF0BF);	// @ (0x1E17 * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0xF089);	// @ (0x1E11 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0xF0C0);	// @ (0x1E18 * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0xF0C1);	// @ (0x1E18 * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0xF0C2);	// @ (0x1E18 * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0xF0C3);	// @ (0x1E18 * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0xF0C4);	// @ (0x1E18 * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0xF0C5);	// @ (0x1E18 * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0xF0C6);	// @ (0x1E18 * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0xF0C7);	// @ (0x1E18 * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0xF08A);	// @ (0x1E11 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0xF0C8);	// @ (0x1E19 * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0xF0C9);	// @ (0x1E19 * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0xF0CA);	// @ (0x1E19 * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0xF0CB);	// @ (0x1E19 * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0xF0CC);	// @ (0x1E19 * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0xF0CD);	// @ (0x1E19 * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0xF0CE);	// @ (0x1E19 * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0xF0CF);	// @ (0x1E19 * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0xF08B);	// @ (0x1E11 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0xF083);	// @ (0x1E10 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0xF084);	// @ (0x1E10 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0xF080);	// @ (0x1E10 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0xF081);	// @ (0x1E10 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0xF082);	// @ (0x1E10 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1CON<LC1OUT>
extern volatile __bit                   LC1OUT              __at(0xF085);	// @ (0x1E10 * 8 + 5)
#define                                 LC1OUT_bit          _BIT_ACCESS(CLC1CON,5)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0xF08F);	// @ (0x1E11 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0xF0E0);	// @ (0x1E1C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0xF0E1);	// @ (0x1E1C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0xF0E2);	// @ (0x1E1C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0xF0E3);	// @ (0x1E1C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0xF0E4);	// @ (0x1E1C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL0<LC2D1S5>
extern volatile __bit                   LC2D1S5             __at(0xF0E5);	// @ (0x1E1C * 8 + 5)
#define                                 LC2D1S5_bit         _BIT_ACCESS(CLC2SEL0,5)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0xF0E8);	// @ (0x1E1D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0xF0E9);	// @ (0x1E1D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0xF0EA);	// @ (0x1E1D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0xF0EB);	// @ (0x1E1D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0xF0EC);	// @ (0x1E1D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL1<LC2D2S5>
extern volatile __bit                   LC2D2S5             __at(0xF0ED);	// @ (0x1E1D * 8 + 5)
#define                                 LC2D2S5_bit         _BIT_ACCESS(CLC2SEL1,5)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0xF0F0);	// @ (0x1E1E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0xF0F1);	// @ (0x1E1E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0xF0F2);	// @ (0x1E1E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0xF0F3);	// @ (0x1E1E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0xF0F4);	// @ (0x1E1E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL2<LC2D3S5>
extern volatile __bit                   LC2D3S5             __at(0xF0F5);	// @ (0x1E1E * 8 + 5)
#define                                 LC2D3S5_bit         _BIT_ACCESS(CLC2SEL2,5)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0xF0F8);	// @ (0x1E1F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0xF0F9);	// @ (0x1E1F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0xF0FA);	// @ (0x1E1F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0xF0FB);	// @ (0x1E1F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0xF0FC);	// @ (0x1E1F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2SEL3<LC2D4S5>
extern volatile __bit                   LC2D4S5             __at(0xF0FD);	// @ (0x1E1F * 8 + 5)
#define                                 LC2D4S5_bit         _BIT_ACCESS(CLC2SEL3,5)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0xF0D7);	// @ (0x1E1A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0xF100);	// @ (0x1E20 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0xF101);	// @ (0x1E20 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0xF102);	// @ (0x1E20 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0xF103);	// @ (0x1E20 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0xF104);	// @ (0x1E20 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0xF105);	// @ (0x1E20 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0xF106);	// @ (0x1E20 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0xF107);	// @ (0x1E20 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0xF0D8);	// @ (0x1E1B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0xF108);	// @ (0x1E21 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0xF109);	// @ (0x1E21 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0xF10A);	// @ (0x1E21 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0xF10B);	// @ (0x1E21 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0xF10C);	// @ (0x1E21 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0xF10D);	// @ (0x1E21 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0xF10E);	// @ (0x1E21 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0xF10F);	// @ (0x1E21 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0xF0D9);	// @ (0x1E1B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0xF110);	// @ (0x1E22 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0xF111);	// @ (0x1E22 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0xF112);	// @ (0x1E22 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0xF113);	// @ (0x1E22 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0xF114);	// @ (0x1E22 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0xF115);	// @ (0x1E22 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0xF116);	// @ (0x1E22 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0xF117);	// @ (0x1E22 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0xF0DA);	// @ (0x1E1B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0xF118);	// @ (0x1E23 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0xF119);	// @ (0x1E23 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0xF11A);	// @ (0x1E23 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0xF11B);	// @ (0x1E23 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0xF11C);	// @ (0x1E23 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0xF11D);	// @ (0x1E23 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0xF11E);	// @ (0x1E23 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0xF11F);	// @ (0x1E23 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0xF0DB);	// @ (0x1E1B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0xF0D3);	// @ (0x1E1A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0xF0D4);	// @ (0x1E1A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0xF0D0);	// @ (0x1E1A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0xF0D1);	// @ (0x1E1A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0xF0D2);	// @ (0x1E1A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2CON<LC2OUT>
extern volatile __bit                   LC2OUT              __at(0xF0D5);	// @ (0x1E1A * 8 + 5)
#define                                 LC2OUT_bit          _BIT_ACCESS(CLC2CON,5)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0xF0DF);	// @ (0x1E1B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// CLC3SEL0<LC3D1S0>
extern volatile __bit                   LC3D1S0             __at(0xF130);	// @ (0x1E26 * 8 + 0)
#define                                 LC3D1S0_bit         _BIT_ACCESS(CLC3SEL0,0)
// CLC3SEL0<LC3D1S1>
extern volatile __bit                   LC3D1S1             __at(0xF131);	// @ (0x1E26 * 8 + 1)
#define                                 LC3D1S1_bit         _BIT_ACCESS(CLC3SEL0,1)
// CLC3SEL0<LC3D1S2>
extern volatile __bit                   LC3D1S2             __at(0xF132);	// @ (0x1E26 * 8 + 2)
#define                                 LC3D1S2_bit         _BIT_ACCESS(CLC3SEL0,2)
// CLC3SEL0<LC3D1S3>
extern volatile __bit                   LC3D1S3             __at(0xF133);	// @ (0x1E26 * 8 + 3)
#define                                 LC3D1S3_bit         _BIT_ACCESS(CLC3SEL0,3)
// CLC3SEL0<LC3D1S4>
extern volatile __bit                   LC3D1S4             __at(0xF134);	// @ (0x1E26 * 8 + 4)
#define                                 LC3D1S4_bit         _BIT_ACCESS(CLC3SEL0,4)
// CLC3SEL0<LC3D1S5>
extern volatile __bit                   LC3D1S5             __at(0xF135);	// @ (0x1E26 * 8 + 5)
#define                                 LC3D1S5_bit         _BIT_ACCESS(CLC3SEL0,5)
// CLC3SEL1<LC3D2S0>
extern volatile __bit                   LC3D2S0             __at(0xF138);	// @ (0x1E27 * 8 + 0)
#define                                 LC3D2S0_bit         _BIT_ACCESS(CLC3SEL1,0)
// CLC3SEL1<LC3D2S1>
extern volatile __bit                   LC3D2S1             __at(0xF139);	// @ (0x1E27 * 8 + 1)
#define                                 LC3D2S1_bit         _BIT_ACCESS(CLC3SEL1,1)
// CLC3SEL1<LC3D2S2>
extern volatile __bit                   LC3D2S2             __at(0xF13A);	// @ (0x1E27 * 8 + 2)
#define                                 LC3D2S2_bit         _BIT_ACCESS(CLC3SEL1,2)
// CLC3SEL1<LC3D2S3>
extern volatile __bit                   LC3D2S3             __at(0xF13B);	// @ (0x1E27 * 8 + 3)
#define                                 LC3D2S3_bit         _BIT_ACCESS(CLC3SEL1,3)
// CLC3SEL1<LC3D2S4>
extern volatile __bit                   LC3D2S4             __at(0xF13C);	// @ (0x1E27 * 8 + 4)
#define                                 LC3D2S4_bit         _BIT_ACCESS(CLC3SEL1,4)
// CLC3SEL1<LC3D2S5>
extern volatile __bit                   LC3D2S5             __at(0xF13D);	// @ (0x1E27 * 8 + 5)
#define                                 LC3D2S5_bit         _BIT_ACCESS(CLC3SEL1,5)
// CLC3SEL2<LC3D3S0>
extern volatile __bit                   LC3D3S0             __at(0xF140);	// @ (0x1E28 * 8 + 0)
#define                                 LC3D3S0_bit         _BIT_ACCESS(CLC3SEL2,0)
// CLC3SEL2<LC3D3S1>
extern volatile __bit                   LC3D3S1             __at(0xF141);	// @ (0x1E28 * 8 + 1)
#define                                 LC3D3S1_bit         _BIT_ACCESS(CLC3SEL2,1)
// CLC3SEL2<LC3D3S2>
extern volatile __bit                   LC3D3S2             __at(0xF142);	// @ (0x1E28 * 8 + 2)
#define                                 LC3D3S2_bit         _BIT_ACCESS(CLC3SEL2,2)
// CLC3SEL2<LC3D3S3>
extern volatile __bit                   LC3D3S3             __at(0xF143);	// @ (0x1E28 * 8 + 3)
#define                                 LC3D3S3_bit         _BIT_ACCESS(CLC3SEL2,3)
// CLC3SEL2<LC3D3S4>
extern volatile __bit                   LC3D3S4             __at(0xF144);	// @ (0x1E28 * 8 + 4)
#define                                 LC3D3S4_bit         _BIT_ACCESS(CLC3SEL2,4)
// CLC3SEL2<LC3D3S5>
extern volatile __bit                   LC3D3S5             __at(0xF145);	// @ (0x1E28 * 8 + 5)
#define                                 LC3D3S5_bit         _BIT_ACCESS(CLC3SEL2,5)
// CLC3SEL3<LC3D4S0>
extern volatile __bit                   LC3D4S0             __at(0xF148);	// @ (0x1E29 * 8 + 0)
#define                                 LC3D4S0_bit         _BIT_ACCESS(CLC3SEL3,0)
// CLC3SEL3<LC3D4S1>
extern volatile __bit                   LC3D4S1             __at(0xF149);	// @ (0x1E29 * 8 + 1)
#define                                 LC3D4S1_bit         _BIT_ACCESS(CLC3SEL3,1)
// CLC3SEL3<LC3D4S2>
extern volatile __bit                   LC3D4S2             __at(0xF14A);	// @ (0x1E29 * 8 + 2)
#define                                 LC3D4S2_bit         _BIT_ACCESS(CLC3SEL3,2)
// CLC3SEL3<LC3D4S3>
extern volatile __bit                   LC3D4S3             __at(0xF14B);	// @ (0x1E29 * 8 + 3)
#define                                 LC3D4S3_bit         _BIT_ACCESS(CLC3SEL3,3)
// CLC3SEL3<LC3D4S4>
extern volatile __bit                   LC3D4S4             __at(0xF14C);	// @ (0x1E29 * 8 + 4)
#define                                 LC3D4S4_bit         _BIT_ACCESS(CLC3SEL3,4)
// CLC3SEL3<LC3D4S5>
extern volatile __bit                   LC3D4S5             __at(0xF14D);	// @ (0x1E29 * 8 + 5)
#define                                 LC3D4S5_bit         _BIT_ACCESS(CLC3SEL3,5)
// CLC3CON<LC3EN>
extern volatile __bit                   LC3EN               __at(0xF127);	// @ (0x1E24 * 8 + 7)
#define                                 LC3EN_bit           _BIT_ACCESS(CLC3CON,7)
// CLC3GLS0<LC3G1D1N>
extern volatile __bit                   LC3G1D1N            __at(0xF150);	// @ (0x1E2A * 8 + 0)
#define                                 LC3G1D1N_bit        _BIT_ACCESS(CLC3GLS0,0)
// CLC3GLS0<LC3G1D1T>
extern volatile __bit                   LC3G1D1T            __at(0xF151);	// @ (0x1E2A * 8 + 1)
#define                                 LC3G1D1T_bit        _BIT_ACCESS(CLC3GLS0,1)
// CLC3GLS0<LC3G1D2N>
extern volatile __bit                   LC3G1D2N            __at(0xF152);	// @ (0x1E2A * 8 + 2)
#define                                 LC3G1D2N_bit        _BIT_ACCESS(CLC3GLS0,2)
// CLC3GLS0<LC3G1D2T>
extern volatile __bit                   LC3G1D2T            __at(0xF153);	// @ (0x1E2A * 8 + 3)
#define                                 LC3G1D2T_bit        _BIT_ACCESS(CLC3GLS0,3)
// CLC3GLS0<LC3G1D3N>
extern volatile __bit                   LC3G1D3N            __at(0xF154);	// @ (0x1E2A * 8 + 4)
#define                                 LC3G1D3N_bit        _BIT_ACCESS(CLC3GLS0,4)
// CLC3GLS0<LC3G1D3T>
extern volatile __bit                   LC3G1D3T            __at(0xF155);	// @ (0x1E2A * 8 + 5)
#define                                 LC3G1D3T_bit        _BIT_ACCESS(CLC3GLS0,5)
// CLC3GLS0<LC3G1D4N>
extern volatile __bit                   LC3G1D4N            __at(0xF156);	// @ (0x1E2A * 8 + 6)
#define                                 LC3G1D4N_bit        _BIT_ACCESS(CLC3GLS0,6)
// CLC3GLS0<LC3G1D4T>
extern volatile __bit                   LC3G1D4T            __at(0xF157);	// @ (0x1E2A * 8 + 7)
#define                                 LC3G1D4T_bit        _BIT_ACCESS(CLC3GLS0,7)
// CLC3POL<LC3G1POL>
extern volatile __bit                   LC3G1POL            __at(0xF128);	// @ (0x1E25 * 8 + 0)
#define                                 LC3G1POL_bit        _BIT_ACCESS(CLC3POL,0)
// CLC3GLS1<LC3G2D1N>
extern volatile __bit                   LC3G2D1N            __at(0xF158);	// @ (0x1E2B * 8 + 0)
#define                                 LC3G2D1N_bit        _BIT_ACCESS(CLC3GLS1,0)
// CLC3GLS1<LC3G2D1T>
extern volatile __bit                   LC3G2D1T            __at(0xF159);	// @ (0x1E2B * 8 + 1)
#define                                 LC3G2D1T_bit        _BIT_ACCESS(CLC3GLS1,1)
// CLC3GLS1<LC3G2D2N>
extern volatile __bit                   LC3G2D2N            __at(0xF15A);	// @ (0x1E2B * 8 + 2)
#define                                 LC3G2D2N_bit        _BIT_ACCESS(CLC3GLS1,2)
// CLC3GLS1<LC3G2D2T>
extern volatile __bit                   LC3G2D2T            __at(0xF15B);	// @ (0x1E2B * 8 + 3)
#define                                 LC3G2D2T_bit        _BIT_ACCESS(CLC3GLS1,3)
// CLC3GLS1<LC3G2D3N>
extern volatile __bit                   LC3G2D3N            __at(0xF15C);	// @ (0x1E2B * 8 + 4)
#define                                 LC3G2D3N_bit        _BIT_ACCESS(CLC3GLS1,4)
// CLC3GLS1<LC3G2D3T>
extern volatile __bit                   LC3G2D3T            __at(0xF15D);	// @ (0x1E2B * 8 + 5)
#define                                 LC3G2D3T_bit        _BIT_ACCESS(CLC3GLS1,5)
// CLC3GLS1<LC3G2D4N>
extern volatile __bit                   LC3G2D4N            __at(0xF15E);	// @ (0x1E2B * 8 + 6)
#define                                 LC3G2D4N_bit        _BIT_ACCESS(CLC3GLS1,6)
// CLC3GLS1<LC3G2D4T>
extern volatile __bit                   LC3G2D4T            __at(0xF15F);	// @ (0x1E2B * 8 + 7)
#define                                 LC3G2D4T_bit        _BIT_ACCESS(CLC3GLS1,7)
// CLC3POL<LC3G2POL>
extern volatile __bit                   LC3G2POL            __at(0xF129);	// @ (0x1E25 * 8 + 1)
#define                                 LC3G2POL_bit        _BIT_ACCESS(CLC3POL,1)
// CLC3GLS2<LC3G3D1N>
extern volatile __bit                   LC3G3D1N            __at(0xF160);	// @ (0x1E2C * 8 + 0)
#define                                 LC3G3D1N_bit        _BIT_ACCESS(CLC3GLS2,0)
// CLC3GLS2<LC3G3D1T>
extern volatile __bit                   LC3G3D1T            __at(0xF161);	// @ (0x1E2C * 8 + 1)
#define                                 LC3G3D1T_bit        _BIT_ACCESS(CLC3GLS2,1)
// CLC3GLS2<LC3G3D2N>
extern volatile __bit                   LC3G3D2N            __at(0xF162);	// @ (0x1E2C * 8 + 2)
#define                                 LC3G3D2N_bit        _BIT_ACCESS(CLC3GLS2,2)
// CLC3GLS2<LC3G3D2T>
extern volatile __bit                   LC3G3D2T            __at(0xF163);	// @ (0x1E2C * 8 + 3)
#define                                 LC3G3D2T_bit        _BIT_ACCESS(CLC3GLS2,3)
// CLC3GLS2<LC3G3D3N>
extern volatile __bit                   LC3G3D3N            __at(0xF164);	// @ (0x1E2C * 8 + 4)
#define                                 LC3G3D3N_bit        _BIT_ACCESS(CLC3GLS2,4)
// CLC3GLS2<LC3G3D3T>
extern volatile __bit                   LC3G3D3T            __at(0xF165);	// @ (0x1E2C * 8 + 5)
#define                                 LC3G3D3T_bit        _BIT_ACCESS(CLC3GLS2,5)
// CLC3GLS2<LC3G3D4N>
extern volatile __bit                   LC3G3D4N            __at(0xF166);	// @ (0x1E2C * 8 + 6)
#define                                 LC3G3D4N_bit        _BIT_ACCESS(CLC3GLS2,6)
// CLC3GLS2<LC3G3D4T>
extern volatile __bit                   LC3G3D4T            __at(0xF167);	// @ (0x1E2C * 8 + 7)
#define                                 LC3G3D4T_bit        _BIT_ACCESS(CLC3GLS2,7)
// CLC3POL<LC3G3POL>
extern volatile __bit                   LC3G3POL            __at(0xF12A);	// @ (0x1E25 * 8 + 2)
#define                                 LC3G3POL_bit        _BIT_ACCESS(CLC3POL,2)
// CLC3GLS3<LC3G4D1N>
extern volatile __bit                   LC3G4D1N            __at(0xF168);	// @ (0x1E2D * 8 + 0)
#define                                 LC3G4D1N_bit        _BIT_ACCESS(CLC3GLS3,0)
// CLC3GLS3<LC3G4D1T>
extern volatile __bit                   LC3G4D1T            __at(0xF169);	// @ (0x1E2D * 8 + 1)
#define                                 LC3G4D1T_bit        _BIT_ACCESS(CLC3GLS3,1)
// CLC3GLS3<LC3G4D2N>
extern volatile __bit                   LC3G4D2N            __at(0xF16A);	// @ (0x1E2D * 8 + 2)
#define                                 LC3G4D2N_bit        _BIT_ACCESS(CLC3GLS3,2)
// CLC3GLS3<LC3G4D2T>
extern volatile __bit                   LC3G4D2T            __at(0xF16B);	// @ (0x1E2D * 8 + 3)
#define                                 LC3G4D2T_bit        _BIT_ACCESS(CLC3GLS3,3)
// CLC3GLS3<LC3G4D3N>
extern volatile __bit                   LC3G4D3N            __at(0xF16C);	// @ (0x1E2D * 8 + 4)
#define                                 LC3G4D3N_bit        _BIT_ACCESS(CLC3GLS3,4)
// CLC3GLS3<LC3G4D3T>
extern volatile __bit                   LC3G4D3T            __at(0xF16D);	// @ (0x1E2D * 8 + 5)
#define                                 LC3G4D3T_bit        _BIT_ACCESS(CLC3GLS3,5)
// CLC3GLS3<LC3G4D4N>
extern volatile __bit                   LC3G4D4N            __at(0xF16E);	// @ (0x1E2D * 8 + 6)
#define                                 LC3G4D4N_bit        _BIT_ACCESS(CLC3GLS3,6)
// CLC3GLS3<LC3G4D4T>
extern volatile __bit                   LC3G4D4T            __at(0xF16F);	// @ (0x1E2D * 8 + 7)
#define                                 LC3G4D4T_bit        _BIT_ACCESS(CLC3GLS3,7)
// CLC3POL<LC3G4POL>
extern volatile __bit                   LC3G4POL            __at(0xF12B);	// @ (0x1E25 * 8 + 3)
#define                                 LC3G4POL_bit        _BIT_ACCESS(CLC3POL,3)
// CLC3CON<LC3INTN>
extern volatile __bit                   LC3INTN             __at(0xF123);	// @ (0x1E24 * 8 + 3)
#define                                 LC3INTN_bit         _BIT_ACCESS(CLC3CON,3)
// CLC3CON<LC3INTP>
extern volatile __bit                   LC3INTP             __at(0xF124);	// @ (0x1E24 * 8 + 4)
#define                                 LC3INTP_bit         _BIT_ACCESS(CLC3CON,4)
// CLC3CON<LC3MODE0>
extern volatile __bit                   LC3MODE0            __at(0xF120);	// @ (0x1E24 * 8 + 0)
#define                                 LC3MODE0_bit        _BIT_ACCESS(CLC3CON,0)
// CLC3CON<LC3MODE1>
extern volatile __bit                   LC3MODE1            __at(0xF121);	// @ (0x1E24 * 8 + 1)
#define                                 LC3MODE1_bit        _BIT_ACCESS(CLC3CON,1)
// CLC3CON<LC3MODE2>
extern volatile __bit                   LC3MODE2            __at(0xF122);	// @ (0x1E24 * 8 + 2)
#define                                 LC3MODE2_bit        _BIT_ACCESS(CLC3CON,2)
// CLC3CON<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0xF125);	// @ (0x1E24 * 8 + 5)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLC3CON,5)
// CLC3POL<LC3POL>
extern volatile __bit                   LC3POL              __at(0xF12F);	// @ (0x1E25 * 8 + 7)
#define                                 LC3POL_bit          _BIT_ACCESS(CLC3POL,7)
// CLC4SEL0<LC4D1S0>
extern volatile __bit                   LC4D1S0             __at(0xF180);	// @ (0x1E30 * 8 + 0)
#define                                 LC4D1S0_bit         _BIT_ACCESS(CLC4SEL0,0)
// CLC4SEL0<LC4D1S1>
extern volatile __bit                   LC4D1S1             __at(0xF181);	// @ (0x1E30 * 8 + 1)
#define                                 LC4D1S1_bit         _BIT_ACCESS(CLC4SEL0,1)
// CLC4SEL0<LC4D1S2>
extern volatile __bit                   LC4D1S2             __at(0xF182);	// @ (0x1E30 * 8 + 2)
#define                                 LC4D1S2_bit         _BIT_ACCESS(CLC4SEL0,2)
// CLC4SEL0<LC4D1S3>
extern volatile __bit                   LC4D1S3             __at(0xF183);	// @ (0x1E30 * 8 + 3)
#define                                 LC4D1S3_bit         _BIT_ACCESS(CLC4SEL0,3)
// CLC4SEL0<LC4D1S4>
extern volatile __bit                   LC4D1S4             __at(0xF184);	// @ (0x1E30 * 8 + 4)
#define                                 LC4D1S4_bit         _BIT_ACCESS(CLC4SEL0,4)
// CLC4SEL0<LC4D1S5>
extern volatile __bit                   LC4D1S5             __at(0xF185);	// @ (0x1E30 * 8 + 5)
#define                                 LC4D1S5_bit         _BIT_ACCESS(CLC4SEL0,5)
// CLC4SEL1<LC4D2S0>
extern volatile __bit                   LC4D2S0             __at(0xF188);	// @ (0x1E31 * 8 + 0)
#define                                 LC4D2S0_bit         _BIT_ACCESS(CLC4SEL1,0)
// CLC4SEL1<LC4D2S1>
extern volatile __bit                   LC4D2S1             __at(0xF189);	// @ (0x1E31 * 8 + 1)
#define                                 LC4D2S1_bit         _BIT_ACCESS(CLC4SEL1,1)
// CLC4SEL1<LC4D2S2>
extern volatile __bit                   LC4D2S2             __at(0xF18A);	// @ (0x1E31 * 8 + 2)
#define                                 LC4D2S2_bit         _BIT_ACCESS(CLC4SEL1,2)
// CLC4SEL1<LC4D2S3>
extern volatile __bit                   LC4D2S3             __at(0xF18B);	// @ (0x1E31 * 8 + 3)
#define                                 LC4D2S3_bit         _BIT_ACCESS(CLC4SEL1,3)
// CLC4SEL1<LC4D2S4>
extern volatile __bit                   LC4D2S4             __at(0xF18C);	// @ (0x1E31 * 8 + 4)
#define                                 LC4D2S4_bit         _BIT_ACCESS(CLC4SEL1,4)
// CLC4SEL1<LC4D2S5>
extern volatile __bit                   LC4D2S5             __at(0xF18D);	// @ (0x1E31 * 8 + 5)
#define                                 LC4D2S5_bit         _BIT_ACCESS(CLC4SEL1,5)
// CLC4SEL2<LC4D3S0>
extern volatile __bit                   LC4D3S0             __at(0xF190);	// @ (0x1E32 * 8 + 0)
#define                                 LC4D3S0_bit         _BIT_ACCESS(CLC4SEL2,0)
// CLC4SEL2<LC4D3S1>
extern volatile __bit                   LC4D3S1             __at(0xF191);	// @ (0x1E32 * 8 + 1)
#define                                 LC4D3S1_bit         _BIT_ACCESS(CLC4SEL2,1)
// CLC4SEL2<LC4D3S2>
extern volatile __bit                   LC4D3S2             __at(0xF192);	// @ (0x1E32 * 8 + 2)
#define                                 LC4D3S2_bit         _BIT_ACCESS(CLC4SEL2,2)
// CLC4SEL2<LC4D3S3>
extern volatile __bit                   LC4D3S3             __at(0xF193);	// @ (0x1E32 * 8 + 3)
#define                                 LC4D3S3_bit         _BIT_ACCESS(CLC4SEL2,3)
// CLC4SEL2<LC4D3S4>
extern volatile __bit                   LC4D3S4             __at(0xF194);	// @ (0x1E32 * 8 + 4)
#define                                 LC4D3S4_bit         _BIT_ACCESS(CLC4SEL2,4)
// CLC4SEL2<LC4D3S5>
extern volatile __bit                   LC4D3S5             __at(0xF195);	// @ (0x1E32 * 8 + 5)
#define                                 LC4D3S5_bit         _BIT_ACCESS(CLC4SEL2,5)
// CLC4SEL3<LC4D4S0>
extern volatile __bit                   LC4D4S0             __at(0xF198);	// @ (0x1E33 * 8 + 0)
#define                                 LC4D4S0_bit         _BIT_ACCESS(CLC4SEL3,0)
// CLC4SEL3<LC4D4S1>
extern volatile __bit                   LC4D4S1             __at(0xF199);	// @ (0x1E33 * 8 + 1)
#define                                 LC4D4S1_bit         _BIT_ACCESS(CLC4SEL3,1)
// CLC4SEL3<LC4D4S2>
extern volatile __bit                   LC4D4S2             __at(0xF19A);	// @ (0x1E33 * 8 + 2)
#define                                 LC4D4S2_bit         _BIT_ACCESS(CLC4SEL3,2)
// CLC4SEL3<LC4D4S3>
extern volatile __bit                   LC4D4S3             __at(0xF19B);	// @ (0x1E33 * 8 + 3)
#define                                 LC4D4S3_bit         _BIT_ACCESS(CLC4SEL3,3)
// CLC4SEL3<LC4D4S4>
extern volatile __bit                   LC4D4S4             __at(0xF19C);	// @ (0x1E33 * 8 + 4)
#define                                 LC4D4S4_bit         _BIT_ACCESS(CLC4SEL3,4)
// CLC4SEL3<LC4D4S5>
extern volatile __bit                   LC4D4S5             __at(0xF19D);	// @ (0x1E33 * 8 + 5)
#define                                 LC4D4S5_bit         _BIT_ACCESS(CLC4SEL3,5)
// CLC4CON<LC4EN>
extern volatile __bit                   LC4EN               __at(0xF177);	// @ (0x1E2E * 8 + 7)
#define                                 LC4EN_bit           _BIT_ACCESS(CLC4CON,7)
// CLC4GLS0<LC4G1D1N>
extern volatile __bit                   LC4G1D1N            __at(0xF1A0);	// @ (0x1E34 * 8 + 0)
#define                                 LC4G1D1N_bit        _BIT_ACCESS(CLC4GLS0,0)
// CLC4GLS0<LC4G1D1T>
extern volatile __bit                   LC4G1D1T            __at(0xF1A1);	// @ (0x1E34 * 8 + 1)
#define                                 LC4G1D1T_bit        _BIT_ACCESS(CLC4GLS0,1)
// CLC4GLS0<LC4G1D2N>
extern volatile __bit                   LC4G1D2N            __at(0xF1A2);	// @ (0x1E34 * 8 + 2)
#define                                 LC4G1D2N_bit        _BIT_ACCESS(CLC4GLS0,2)
// CLC4GLS0<LC4G1D2T>
extern volatile __bit                   LC4G1D2T            __at(0xF1A3);	// @ (0x1E34 * 8 + 3)
#define                                 LC4G1D2T_bit        _BIT_ACCESS(CLC4GLS0,3)
// CLC4GLS0<LC4G1D3N>
extern volatile __bit                   LC4G1D3N            __at(0xF1A4);	// @ (0x1E34 * 8 + 4)
#define                                 LC4G1D3N_bit        _BIT_ACCESS(CLC4GLS0,4)
// CLC4GLS0<LC4G1D3T>
extern volatile __bit                   LC4G1D3T            __at(0xF1A5);	// @ (0x1E34 * 8 + 5)
#define                                 LC4G1D3T_bit        _BIT_ACCESS(CLC4GLS0,5)
// CLC4GLS0<LC4G1D4N>
extern volatile __bit                   LC4G1D4N            __at(0xF1A6);	// @ (0x1E34 * 8 + 6)
#define                                 LC4G1D4N_bit        _BIT_ACCESS(CLC4GLS0,6)
// CLC4GLS0<LC4G1D4T>
extern volatile __bit                   LC4G1D4T            __at(0xF1A7);	// @ (0x1E34 * 8 + 7)
#define                                 LC4G1D4T_bit        _BIT_ACCESS(CLC4GLS0,7)
// CLC4POL<LC4G1POL>
extern volatile __bit                   LC4G1POL            __at(0xF178);	// @ (0x1E2F * 8 + 0)
#define                                 LC4G1POL_bit        _BIT_ACCESS(CLC4POL,0)
// CLC4GLS1<LC4G2D1N>
extern volatile __bit                   LC4G2D1N            __at(0xF1A8);	// @ (0x1E35 * 8 + 0)
#define                                 LC4G2D1N_bit        _BIT_ACCESS(CLC4GLS1,0)
// CLC4GLS1<LC4G2D1T>
extern volatile __bit                   LC4G2D1T            __at(0xF1A9);	// @ (0x1E35 * 8 + 1)
#define                                 LC4G2D1T_bit        _BIT_ACCESS(CLC4GLS1,1)
// CLC4GLS1<LC4G2D2N>
extern volatile __bit                   LC4G2D2N            __at(0xF1AA);	// @ (0x1E35 * 8 + 2)
#define                                 LC4G2D2N_bit        _BIT_ACCESS(CLC4GLS1,2)
// CLC4GLS1<LC4G2D2T>
extern volatile __bit                   LC4G2D2T            __at(0xF1AB);	// @ (0x1E35 * 8 + 3)
#define                                 LC4G2D2T_bit        _BIT_ACCESS(CLC4GLS1,3)
// CLC4GLS1<LC4G2D3N>
extern volatile __bit                   LC4G2D3N            __at(0xF1AC);	// @ (0x1E35 * 8 + 4)
#define                                 LC4G2D3N_bit        _BIT_ACCESS(CLC4GLS1,4)
// CLC4GLS1<LC4G2D3T>
extern volatile __bit                   LC4G2D3T            __at(0xF1AD);	// @ (0x1E35 * 8 + 5)
#define                                 LC4G2D3T_bit        _BIT_ACCESS(CLC4GLS1,5)
// CLC4GLS1<LC4G2D4N>
extern volatile __bit                   LC4G2D4N            __at(0xF1AE);	// @ (0x1E35 * 8 + 6)
#define                                 LC4G2D4N_bit        _BIT_ACCESS(CLC4GLS1,6)
// CLC4GLS1<LC4G2D4T>
extern volatile __bit                   LC4G2D4T            __at(0xF1AF);	// @ (0x1E35 * 8 + 7)
#define                                 LC4G2D4T_bit        _BIT_ACCESS(CLC4GLS1,7)
// CLC4POL<LC4G2POL>
extern volatile __bit                   LC4G2POL            __at(0xF179);	// @ (0x1E2F * 8 + 1)
#define                                 LC4G2POL_bit        _BIT_ACCESS(CLC4POL,1)
// CLC4GLS2<LC4G3D1N>
extern volatile __bit                   LC4G3D1N            __at(0xF1B0);	// @ (0x1E36 * 8 + 0)
#define                                 LC4G3D1N_bit        _BIT_ACCESS(CLC4GLS2,0)
// CLC4GLS2<LC4G3D1T>
extern volatile __bit                   LC4G3D1T            __at(0xF1B1);	// @ (0x1E36 * 8 + 1)
#define                                 LC4G3D1T_bit        _BIT_ACCESS(CLC4GLS2,1)
// CLC4GLS2<LC4G3D2N>
extern volatile __bit                   LC4G3D2N            __at(0xF1B2);	// @ (0x1E36 * 8 + 2)
#define                                 LC4G3D2N_bit        _BIT_ACCESS(CLC4GLS2,2)
// CLC4GLS2<LC4G3D2T>
extern volatile __bit                   LC4G3D2T            __at(0xF1B3);	// @ (0x1E36 * 8 + 3)
#define                                 LC4G3D2T_bit        _BIT_ACCESS(CLC4GLS2,3)
// CLC4GLS2<LC4G3D3N>
extern volatile __bit                   LC4G3D3N            __at(0xF1B4);	// @ (0x1E36 * 8 + 4)
#define                                 LC4G3D3N_bit        _BIT_ACCESS(CLC4GLS2,4)
// CLC4GLS2<LC4G3D3T>
extern volatile __bit                   LC4G3D3T            __at(0xF1B5);	// @ (0x1E36 * 8 + 5)
#define                                 LC4G3D3T_bit        _BIT_ACCESS(CLC4GLS2,5)
// CLC4GLS2<LC4G3D4N>
extern volatile __bit                   LC4G3D4N            __at(0xF1B6);	// @ (0x1E36 * 8 + 6)
#define                                 LC4G3D4N_bit        _BIT_ACCESS(CLC4GLS2,6)
// CLC4GLS2<LC4G3D4T>
extern volatile __bit                   LC4G3D4T            __at(0xF1B7);	// @ (0x1E36 * 8 + 7)
#define                                 LC4G3D4T_bit        _BIT_ACCESS(CLC4GLS2,7)
// CLC4POL<LC4G3POL>
extern volatile __bit                   LC4G3POL            __at(0xF17A);	// @ (0x1E2F * 8 + 2)
#define                                 LC4G3POL_bit        _BIT_ACCESS(CLC4POL,2)
// CLC4GLS3<LC4G4D1N>
extern volatile __bit                   LC4G4D1N            __at(0xF1B8);	// @ (0x1E37 * 8 + 0)
#define                                 LC4G4D1N_bit        _BIT_ACCESS(CLC4GLS3,0)
// CLC4GLS3<LC4G4D1T>
extern volatile __bit                   LC4G4D1T            __at(0xF1B9);	// @ (0x1E37 * 8 + 1)
#define                                 LC4G4D1T_bit        _BIT_ACCESS(CLC4GLS3,1)
// CLC4GLS3<LC4G4D2N>
extern volatile __bit                   LC4G4D2N            __at(0xF1BA);	// @ (0x1E37 * 8 + 2)
#define                                 LC4G4D2N_bit        _BIT_ACCESS(CLC4GLS3,2)
// CLC4GLS3<LC4G4D2T>
extern volatile __bit                   LC4G4D2T            __at(0xF1BB);	// @ (0x1E37 * 8 + 3)
#define                                 LC4G4D2T_bit        _BIT_ACCESS(CLC4GLS3,3)
// CLC4GLS3<LC4G4D3N>
extern volatile __bit                   LC4G4D3N            __at(0xF1BC);	// @ (0x1E37 * 8 + 4)
#define                                 LC4G4D3N_bit        _BIT_ACCESS(CLC4GLS3,4)
// CLC4GLS3<LC4G4D3T>
extern volatile __bit                   LC4G4D3T            __at(0xF1BD);	// @ (0x1E37 * 8 + 5)
#define                                 LC4G4D3T_bit        _BIT_ACCESS(CLC4GLS3,5)
// CLC4GLS3<LC4G4D4N>
extern volatile __bit                   LC4G4D4N            __at(0xF1BE);	// @ (0x1E37 * 8 + 6)
#define                                 LC4G4D4N_bit        _BIT_ACCESS(CLC4GLS3,6)
// CLC4GLS3<LC4G4D4T>
extern volatile __bit                   LC4G4D4T            __at(0xF1BF);	// @ (0x1E37 * 8 + 7)
#define                                 LC4G4D4T_bit        _BIT_ACCESS(CLC4GLS3,7)
// CLC4POL<LC4G4POL>
extern volatile __bit                   LC4G4POL            __at(0xF17B);	// @ (0x1E2F * 8 + 3)
#define                                 LC4G4POL_bit        _BIT_ACCESS(CLC4POL,3)
// CLC4CON<LC4INTN>
extern volatile __bit                   LC4INTN             __at(0xF173);	// @ (0x1E2E * 8 + 3)
#define                                 LC4INTN_bit         _BIT_ACCESS(CLC4CON,3)
// CLC4CON<LC4INTP>
extern volatile __bit                   LC4INTP             __at(0xF174);	// @ (0x1E2E * 8 + 4)
#define                                 LC4INTP_bit         _BIT_ACCESS(CLC4CON,4)
// CLC4CON<LC4MODE0>
extern volatile __bit                   LC4MODE0            __at(0xF170);	// @ (0x1E2E * 8 + 0)
#define                                 LC4MODE0_bit        _BIT_ACCESS(CLC4CON,0)
// CLC4CON<LC4MODE1>
extern volatile __bit                   LC4MODE1            __at(0xF171);	// @ (0x1E2E * 8 + 1)
#define                                 LC4MODE1_bit        _BIT_ACCESS(CLC4CON,1)
// CLC4CON<LC4MODE2>
extern volatile __bit                   LC4MODE2            __at(0xF172);	// @ (0x1E2E * 8 + 2)
#define                                 LC4MODE2_bit        _BIT_ACCESS(CLC4CON,2)
// CLC4CON<LC4OUT>
extern volatile __bit                   LC4OUT              __at(0xF175);	// @ (0x1E2E * 8 + 5)
#define                                 LC4OUT_bit          _BIT_ACCESS(CLC4CON,5)
// CLC4POL<LC4POL>
extern volatile __bit                   LC4POL              __at(0xF17F);	// @ (0x1E2F * 8 + 7)
#define                                 LC4POL_bit          _BIT_ACCESS(CLC4POL,7)
// CWG1CON0<LD>
extern volatile __bit                   LD                  __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 LD_bit              _BIT_ACCESS(CWG1CON0,6)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x448C);	// @ (0x891 * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x4484);	// @ (0x890 * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// CWG1AS0<LSAC0>
extern volatile __bit                   LSAC0               __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 LSAC0_bit           _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<LSAC1>
extern volatile __bit                   LSAC1               __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 LSAC1_bit           _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<LSBD0>
extern volatile __bit                   LSBD0               __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 LSBD0_bit           _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<LSBD1>
extern volatile __bit                   LSBD1               __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 LSBD1_bit           _BIT_ACCESS(CWG1AS0,5)
// NVMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0x40F5);	// @ (0x81E * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(NVMCON1,5)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x4C78);	// @ (0x98F * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x4C79);	// @ (0x98F * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x448D);	// @ (0x891 * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x4485);	// @ (0x890 * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// CLCDATA<MLC1OUT>
extern volatile __bit                   MLC1OUT             __at(0xF078);	// @ (0x1E0F * 8 + 0)
#define                                 MLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// CLCDATA<MLC2OUT>
extern volatile __bit                   MLC2OUT             __at(0xF079);	// @ (0x1E0F * 8 + 1)
#define                                 MLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// CLCDATA<MLC3OUT>
extern volatile __bit                   MLC3OUT             __at(0xF07A);	// @ (0x1E0F * 8 + 2)
#define                                 MLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// CLCDATA<MLC4OUT>
extern volatile __bit                   MLC4OUT             __at(0xF07B);	// @ (0x1E0F * 8 + 3)
#define                                 MLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// T2HLT<MODE4>
extern volatile __bit                   MODE4               __at(0x147C);	// @ (0x28F * 8 + 4)
#define                                 MODE4_bit           _BIT_ACCESS(T2HLT,4)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0xC68);	// @ (0x18D * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP2ADD<MSK02>
extern volatile __bit                   MSK02               __at(0xCB8);	// @ (0x197 * 8 + 0)
#define                                 MSK02_bit           _BIT_ACCESS(SSP2ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0xC69);	// @ (0x18D * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP2ADD<MSK12>
extern volatile __bit                   MSK12               __at(0xCB9);	// @ (0x197 * 8 + 1)
#define                                 MSK12_bit           _BIT_ACCESS(SSP2ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0xC6A);	// @ (0x18D * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP2ADD<MSK22>
extern volatile __bit                   MSK22               __at(0xCBA);	// @ (0x197 * 8 + 2)
#define                                 MSK22_bit           _BIT_ACCESS(SSP2ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0xC6B);	// @ (0x18D * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP2ADD<MSK32>
extern volatile __bit                   MSK32               __at(0xCBB);	// @ (0x197 * 8 + 3)
#define                                 MSK32_bit           _BIT_ACCESS(SSP2ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0xC6C);	// @ (0x18D * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP2ADD<MSK42>
extern volatile __bit                   MSK42               __at(0xCBC);	// @ (0x197 * 8 + 4)
#define                                 MSK42_bit           _BIT_ACCESS(SSP2ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0xC6D);	// @ (0x18D * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP2ADD<MSK52>
extern volatile __bit                   MSK52               __at(0xCBD);	// @ (0x197 * 8 + 5)
#define                                 MSK52_bit           _BIT_ACCESS(SSP2ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0xC6E);	// @ (0x18D * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP2ADD<MSK62>
extern volatile __bit                   MSK62               __at(0xCBE);	// @ (0x197 * 8 + 6)
#define                                 MSK62_bit           _BIT_ACCESS(SSP2ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0xC6F);	// @ (0x18D * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// SSP2ADD<MSK72>
extern volatile __bit                   MSK72               __at(0xCBF);	// @ (0x197 * 8 + 7)
#define                                 MSK72_bit           _BIT_ACCESS(SSP2ADD,7)
// PMD4<MSSP1MD>
extern volatile __bit                   MSSP1MD             __at(0x3CD4);	// @ (0x79A * 8 + 4)
#define                                 MSSP1MD_bit         _BIT_ACCESS(PMD4,4)
// PMD4<MSSP2MD>
extern volatile __bit                   MSSP2MD             __at(0x3CD5);	// @ (0x79A * 8 + 5)
#define                                 MSSP2MD_bit         _BIT_ACCESS(PMD4,5)
// NCO1CLK<N1CKS0>
extern volatile __bit                   N1CKS0              __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 N1CKS0_bit          _BIT_ACCESS(NCO1CLK,0)
// NCO1CLK<N1CKS1>
extern volatile __bit                   N1CKS1              __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 N1CKS1_bit          _BIT_ACCESS(NCO1CLK,1)
// NCO1CLK<N1CKS2>
extern volatile __bit                   N1CKS2              __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 N1CKS2_bit          _BIT_ACCESS(NCO1CLK,2)
// NCO1CON<N1EN>
extern volatile __bit                   N1EN                __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 N1EN_bit            _BIT_ACCESS(NCO1CON,7)
// NCO1CON<N1OUT>
extern volatile __bit                   N1OUT               __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 N1OUT_bit           _BIT_ACCESS(NCO1CON,5)
// NCO1CON<N1PFM>
extern volatile __bit                   N1PFM               __at(0x2C90);	// @ (0x592 * 8 + 0)
#define                                 N1PFM_bit           _BIT_ACCESS(NCO1CON,0)
// NCO1CON<N1POL>
extern volatile __bit                   N1POL               __at(0x2C94);	// @ (0x592 * 8 + 4)
#define                                 N1POL_bit           _BIT_ACCESS(NCO1CON,4)
// NCO1CLK<N1PWS0>
extern volatile __bit                   N1PWS0              __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 N1PWS0_bit          _BIT_ACCESS(NCO1CLK,5)
// NCO1CLK<N1PWS1>
extern volatile __bit                   N1PWS1              __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 N1PWS1_bit          _BIT_ACCESS(NCO1CLK,6)
// NCO1CLK<N1PWS2>
extern volatile __bit                   N1PWS2              __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 N1PWS2_bit          _BIT_ACCESS(NCO1CLK,7)
// NCO1ACCL<NCO1ACC0>
extern volatile __bit                   NCO1ACC0            __at(0x2C60);	// @ (0x58C * 8 + 0)
#define                                 NCO1ACC0_bit        _BIT_ACCESS(NCO1ACCL,0)
// NCO1ACCL<NCO1ACC1>
extern volatile __bit                   NCO1ACC1            __at(0x2C61);	// @ (0x58C * 8 + 1)
#define                                 NCO1ACC1_bit        _BIT_ACCESS(NCO1ACCL,1)
// NCO1ACCH<NCO1ACC10>
extern volatile __bit                   NCO1ACC10           __at(0x2C6A);	// @ (0x58D * 8 + 2)
#define                                 NCO1ACC10_bit       _BIT_ACCESS(NCO1ACCH,2)
// NCO1ACCH<NCO1ACC11>
extern volatile __bit                   NCO1ACC11           __at(0x2C6B);	// @ (0x58D * 8 + 3)
#define                                 NCO1ACC11_bit       _BIT_ACCESS(NCO1ACCH,3)
// NCO1ACCH<NCO1ACC12>
extern volatile __bit                   NCO1ACC12           __at(0x2C6C);	// @ (0x58D * 8 + 4)
#define                                 NCO1ACC12_bit       _BIT_ACCESS(NCO1ACCH,4)
// NCO1ACCH<NCO1ACC13>
extern volatile __bit                   NCO1ACC13           __at(0x2C6D);	// @ (0x58D * 8 + 5)
#define                                 NCO1ACC13_bit       _BIT_ACCESS(NCO1ACCH,5)
// NCO1ACCH<NCO1ACC14>
extern volatile __bit                   NCO1ACC14           __at(0x2C6E);	// @ (0x58D * 8 + 6)
#define                                 NCO1ACC14_bit       _BIT_ACCESS(NCO1ACCH,6)
// NCO1ACCH<NCO1ACC15>
extern volatile __bit                   NCO1ACC15           __at(0x2C6F);	// @ (0x58D * 8 + 7)
#define                                 NCO1ACC15_bit       _BIT_ACCESS(NCO1ACCH,7)
// NCO1ACCU<NCO1ACC16>
extern volatile __bit                   NCO1ACC16           __at(0x2C70);	// @ (0x58E * 8 + 0)
#define                                 NCO1ACC16_bit       _BIT_ACCESS(NCO1ACCU,0)
// NCO1ACCU<NCO1ACC17>
extern volatile __bit                   NCO1ACC17           __at(0x2C71);	// @ (0x58E * 8 + 1)
#define                                 NCO1ACC17_bit       _BIT_ACCESS(NCO1ACCU,1)
// NCO1ACCU<NCO1ACC18>
extern volatile __bit                   NCO1ACC18           __at(0x2C72);	// @ (0x58E * 8 + 2)
#define                                 NCO1ACC18_bit       _BIT_ACCESS(NCO1ACCU,2)
// NCO1ACCU<NCO1ACC19>
extern volatile __bit                   NCO1ACC19           __at(0x2C73);	// @ (0x58E * 8 + 3)
#define                                 NCO1ACC19_bit       _BIT_ACCESS(NCO1ACCU,3)
// NCO1ACCL<NCO1ACC2>
extern volatile __bit                   NCO1ACC2            __at(0x2C62);	// @ (0x58C * 8 + 2)
#define                                 NCO1ACC2_bit        _BIT_ACCESS(NCO1ACCL,2)
// NCO1ACCL<NCO1ACC3>
extern volatile __bit                   NCO1ACC3            __at(0x2C63);	// @ (0x58C * 8 + 3)
#define                                 NCO1ACC3_bit        _BIT_ACCESS(NCO1ACCL,3)
// NCO1ACCL<NCO1ACC4>
extern volatile __bit                   NCO1ACC4            __at(0x2C64);	// @ (0x58C * 8 + 4)
#define                                 NCO1ACC4_bit        _BIT_ACCESS(NCO1ACCL,4)
// NCO1ACCL<NCO1ACC5>
extern volatile __bit                   NCO1ACC5            __at(0x2C65);	// @ (0x58C * 8 + 5)
#define                                 NCO1ACC5_bit        _BIT_ACCESS(NCO1ACCL,5)
// NCO1ACCL<NCO1ACC6>
extern volatile __bit                   NCO1ACC6            __at(0x2C66);	// @ (0x58C * 8 + 6)
#define                                 NCO1ACC6_bit        _BIT_ACCESS(NCO1ACCL,6)
// NCO1ACCL<NCO1ACC7>
extern volatile __bit                   NCO1ACC7            __at(0x2C67);	// @ (0x58C * 8 + 7)
#define                                 NCO1ACC7_bit        _BIT_ACCESS(NCO1ACCL,7)
// NCO1ACCH<NCO1ACC8>
extern volatile __bit                   NCO1ACC8            __at(0x2C68);	// @ (0x58D * 8 + 0)
#define                                 NCO1ACC8_bit        _BIT_ACCESS(NCO1ACCH,0)
// NCO1ACCH<NCO1ACC9>
extern volatile __bit                   NCO1ACC9            __at(0x2C69);	// @ (0x58D * 8 + 1)
#define                                 NCO1ACC9_bit        _BIT_ACCESS(NCO1ACCH,1)
// PIE7<NCO1IE>
extern volatile __bit                   NCO1IE              __at(0x38EC);	// @ (0x71D * 8 + 4)
#define                                 NCO1IE_bit          _BIT_ACCESS(PIE7,4)
// PIR7<NCO1IF>
extern volatile __bit                   NCO1IF              __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 NCO1IF_bit          _BIT_ACCESS(PIR7,4)
// NCO1INCL<NCO1INC0>
extern volatile __bit                   NCO1INC0            __at(0x2C78);	// @ (0x58F * 8 + 0)
#define                                 NCO1INC0_bit        _BIT_ACCESS(NCO1INCL,0)
// NCO1INCL<NCO1INC1>
extern volatile __bit                   NCO1INC1            __at(0x2C79);	// @ (0x58F * 8 + 1)
#define                                 NCO1INC1_bit        _BIT_ACCESS(NCO1INCL,1)
// NCO1INCH<NCO1INC10>
extern volatile __bit                   NCO1INC10           __at(0x2C82);	// @ (0x590 * 8 + 2)
#define                                 NCO1INC10_bit       _BIT_ACCESS(NCO1INCH,2)
// NCO1INCH<NCO1INC11>
extern volatile __bit                   NCO1INC11           __at(0x2C83);	// @ (0x590 * 8 + 3)
#define                                 NCO1INC11_bit       _BIT_ACCESS(NCO1INCH,3)
// NCO1INCH<NCO1INC12>
extern volatile __bit                   NCO1INC12           __at(0x2C84);	// @ (0x590 * 8 + 4)
#define                                 NCO1INC12_bit       _BIT_ACCESS(NCO1INCH,4)
// NCO1INCH<NCO1INC13>
extern volatile __bit                   NCO1INC13           __at(0x2C85);	// @ (0x590 * 8 + 5)
#define                                 NCO1INC13_bit       _BIT_ACCESS(NCO1INCH,5)
// NCO1INCH<NCO1INC14>
extern volatile __bit                   NCO1INC14           __at(0x2C86);	// @ (0x590 * 8 + 6)
#define                                 NCO1INC14_bit       _BIT_ACCESS(NCO1INCH,6)
// NCO1INCH<NCO1INC15>
extern volatile __bit                   NCO1INC15           __at(0x2C87);	// @ (0x590 * 8 + 7)
#define                                 NCO1INC15_bit       _BIT_ACCESS(NCO1INCH,7)
// NCO1INCU<NCO1INC16>
extern volatile __bit                   NCO1INC16           __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 NCO1INC16_bit       _BIT_ACCESS(NCO1INCU,0)
// NCO1INCU<NCO1INC17>
extern volatile __bit                   NCO1INC17           __at(0x2C89);	// @ (0x591 * 8 + 1)
#define                                 NCO1INC17_bit       _BIT_ACCESS(NCO1INCU,1)
// NCO1INCU<NCO1INC18>
extern volatile __bit                   NCO1INC18           __at(0x2C8A);	// @ (0x591 * 8 + 2)
#define                                 NCO1INC18_bit       _BIT_ACCESS(NCO1INCU,2)
// NCO1INCU<NCO1INC19>
extern volatile __bit                   NCO1INC19           __at(0x2C8B);	// @ (0x591 * 8 + 3)
#define                                 NCO1INC19_bit       _BIT_ACCESS(NCO1INCU,3)
// NCO1INCL<NCO1INC2>
extern volatile __bit                   NCO1INC2            __at(0x2C7A);	// @ (0x58F * 8 + 2)
#define                                 NCO1INC2_bit        _BIT_ACCESS(NCO1INCL,2)
// NCO1INCL<NCO1INC3>
extern volatile __bit                   NCO1INC3            __at(0x2C7B);	// @ (0x58F * 8 + 3)
#define                                 NCO1INC3_bit        _BIT_ACCESS(NCO1INCL,3)
// NCO1INCL<NCO1INC4>
extern volatile __bit                   NCO1INC4            __at(0x2C7C);	// @ (0x58F * 8 + 4)
#define                                 NCO1INC4_bit        _BIT_ACCESS(NCO1INCL,4)
// NCO1INCL<NCO1INC5>
extern volatile __bit                   NCO1INC5            __at(0x2C7D);	// @ (0x58F * 8 + 5)
#define                                 NCO1INC5_bit        _BIT_ACCESS(NCO1INCL,5)
// NCO1INCL<NCO1INC6>
extern volatile __bit                   NCO1INC6            __at(0x2C7E);	// @ (0x58F * 8 + 6)
#define                                 NCO1INC6_bit        _BIT_ACCESS(NCO1INCL,6)
// NCO1INCL<NCO1INC7>
extern volatile __bit                   NCO1INC7            __at(0x2C7F);	// @ (0x58F * 8 + 7)
#define                                 NCO1INC7_bit        _BIT_ACCESS(NCO1INCL,7)
// NCO1INCH<NCO1INC8>
extern volatile __bit                   NCO1INC8            __at(0x2C80);	// @ (0x590 * 8 + 0)
#define                                 NCO1INC8_bit        _BIT_ACCESS(NCO1INCH,0)
// NCO1INCH<NCO1INC9>
extern volatile __bit                   NCO1INC9            __at(0x2C81);	// @ (0x590 * 8 + 1)
#define                                 NCO1INC9_bit        _BIT_ACCESS(NCO1INCH,1)
// PMD1<NCO1MD>
extern volatile __bit                   NCO1MD              __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 NCO1MD_bit          _BIT_ACCESS(PMD1,7)
// PIE7<NCOIE>
extern volatile __bit                   NCOIE               __at(0x38EC);	// @ (0x71D * 8 + 4)
#define                                 NCOIE_bit           _BIT_ACCESS(PIE7,4)
// PIR7<NCOIF>
extern volatile __bit                   NCOIF               __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 NCOIF_bit           _BIT_ACCESS(PIR7,4)
// PMD1<NCOMD>
extern volatile __bit                   NCOMD               __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 NCOMD_bit           _BIT_ACCESS(PMD1,7)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x4468);	// @ (0x88D * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x4469);	// @ (0x88D * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x446A);	// @ (0x88D * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x446B);	// @ (0x88D * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x446C);	// @ (0x88D * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x446D);	// @ (0x88D * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x446E);	// @ (0x88D * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x447B);	// @ (0x88F * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// DAC1CON0<NSS>
extern volatile __bit                   NSS                 __at(0x4870);	// @ (0x90E * 8 + 0)
#define                                 NSS_bit             _BIT_ACCESS(DAC1CON0,0)
// NVMADRH<NVMADRH0>
extern volatile __bit                   NVMADRH0            __at(0x40D8);	// @ (0x81B * 8 + 0)
#define                                 NVMADRH0_bit        _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADRH1>
extern volatile __bit                   NVMADRH1            __at(0x40D9);	// @ (0x81B * 8 + 1)
#define                                 NVMADRH1_bit        _BIT_ACCESS(NVMADRH,1)
// NVMADRH<NVMADRH2>
extern volatile __bit                   NVMADRH2            __at(0x40DA);	// @ (0x81B * 8 + 2)
#define                                 NVMADRH2_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADRH3>
extern volatile __bit                   NVMADRH3            __at(0x40DB);	// @ (0x81B * 8 + 3)
#define                                 NVMADRH3_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADRH4>
extern volatile __bit                   NVMADRH4            __at(0x40DC);	// @ (0x81B * 8 + 4)
#define                                 NVMADRH4_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADRH5>
extern volatile __bit                   NVMADRH5            __at(0x40DD);	// @ (0x81B * 8 + 5)
#define                                 NVMADRH5_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADRH6>
extern volatile __bit                   NVMADRH6            __at(0x40DE);	// @ (0x81B * 8 + 6)
#define                                 NVMADRH6_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRL<NVMADRL0>
extern volatile __bit                   NVMADRL0            __at(0x40D0);	// @ (0x81A * 8 + 0)
#define                                 NVMADRL0_bit        _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADRL1>
extern volatile __bit                   NVMADRL1            __at(0x40D1);	// @ (0x81A * 8 + 1)
#define                                 NVMADRL1_bit        _BIT_ACCESS(NVMADRL,1)
// NVMADRL<NVMADRL2>
extern volatile __bit                   NVMADRL2            __at(0x40D2);	// @ (0x81A * 8 + 2)
#define                                 NVMADRL2_bit        _BIT_ACCESS(NVMADRL,2)
// NVMADRL<NVMADRL3>
extern volatile __bit                   NVMADRL3            __at(0x40D3);	// @ (0x81A * 8 + 3)
#define                                 NVMADRL3_bit        _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADRL4>
extern volatile __bit                   NVMADRL4            __at(0x40D4);	// @ (0x81A * 8 + 4)
#define                                 NVMADRL4_bit        _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADRL5>
extern volatile __bit                   NVMADRL5            __at(0x40D5);	// @ (0x81A * 8 + 5)
#define                                 NVMADRL5_bit        _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADRL6>
extern volatile __bit                   NVMADRL6            __at(0x40D6);	// @ (0x81A * 8 + 6)
#define                                 NVMADRL6_bit        _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADRL7>
extern volatile __bit                   NVMADRL7            __at(0x40D7);	// @ (0x81A * 8 + 7)
#define                                 NVMADRL7_bit        _BIT_ACCESS(NVMADRL,7)
// NVMDATH<NVMDATH0>
extern volatile __bit                   NVMDATH0            __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 NVMDATH0_bit        _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDATH1>
extern volatile __bit                   NVMDATH1            __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 NVMDATH1_bit        _BIT_ACCESS(NVMDATH,1)
// NVMDATH<NVMDATH2>
extern volatile __bit                   NVMDATH2            __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 NVMDATH2_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDATH3>
extern volatile __bit                   NVMDATH3            __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 NVMDATH3_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDATH4>
extern volatile __bit                   NVMDATH4            __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 NVMDATH4_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDATH5>
extern volatile __bit                   NVMDATH5            __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 NVMDATH5_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATL<NVMDATL0>
extern volatile __bit                   NVMDATL0            __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 NVMDATL0_bit        _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDATL1>
extern volatile __bit                   NVMDATL1            __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 NVMDATL1_bit        _BIT_ACCESS(NVMDATL,1)
// NVMDATL<NVMDATL2>
extern volatile __bit                   NVMDATL2            __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 NVMDATL2_bit        _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDATL3>
extern volatile __bit                   NVMDATL3            __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 NVMDATL3_bit        _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDATL4>
extern volatile __bit                   NVMDATL4            __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 NVMDATL4_bit        _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDATL5>
extern volatile __bit                   NVMDATL5            __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 NVMDATL5_bit        _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDATL6>
extern volatile __bit                   NVMDATL6            __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 NVMDATL6_bit        _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDATL7>
extern volatile __bit                   NVMDATL7            __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 NVMDATL7_bit        _BIT_ACCESS(NVMDATL,7)
// PIE7<NVMIE>
extern volatile __bit                   NVMIE               __at(0x38ED);	// @ (0x71D * 8 + 5)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE7,5)
// PIR7<NVMIF>
extern volatile __bit                   NVMIF               __at(0x389D);	// @ (0x713 * 8 + 5)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR7,5)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,2)
// NVMCON1<NVMREGS>
extern volatile __bit                   NVMREGS             __at(0x40F6);	// @ (0x81E * 8 + 6)
#define                                 NVMREGS_bit         _BIT_ACCESS(NVMCON1,6)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0xF9D0);	// @ (0x1F3A * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0xF9D1);	// @ (0x1F3A * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0xF9D2);	// @ (0x1F3A * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0xF9D3);	// @ (0x1F3A * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0xF9D4);	// @ (0x1F3A * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0xF9D5);	// @ (0x1F3A * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONA<ODCA6>
extern volatile __bit                   ODCA6               __at(0xF9D6);	// @ (0x1F3A * 8 + 6)
#define                                 ODCA6_bit           _BIT_ACCESS(ODCONA,6)
// ODCONA<ODCA7>
extern volatile __bit                   ODCA7               __at(0xF9D7);	// @ (0x1F3A * 8 + 7)
#define                                 ODCA7_bit           _BIT_ACCESS(ODCONA,7)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0xFA28);	// @ (0x1F45 * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0xFA29);	// @ (0x1F45 * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0xFA2A);	// @ (0x1F45 * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0xFA2B);	// @ (0x1F45 * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0xFA2C);	// @ (0x1F45 * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0xFA2D);	// @ (0x1F45 * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0xFA2E);	// @ (0x1F45 * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0xFA2F);	// @ (0x1F45 * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0xFA80);	// @ (0x1F50 * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0xFA81);	// @ (0x1F50 * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0xFA82);	// @ (0x1F50 * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0xFA83);	// @ (0x1F50 * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0xFA84);	// @ (0x1F50 * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0xFA85);	// @ (0x1F50 * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0xFA86);	// @ (0x1F50 * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0xFA87);	// @ (0x1F50 * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// DAC1CON0<OE1>
extern volatile __bit                   OE1                 __at(0x4875);	// @ (0x90E * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<OE2>
extern volatile __bit                   OE2                 __at(0x4874);	// @ (0x90E * 8 + 4)
#define                                 OE2_bit             _BIT_ACCESS(DAC1CON0,4)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x447C);	// @ (0x88F * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// PIE1<OSFIE>
extern volatile __bit                   OSFIE               __at(0x38BF);	// @ (0x717 * 8 + 7)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE1,7)
// PIR1<OSFIF>
extern volatile __bit                   OSFIF               __at(0x386F);	// @ (0x70D * 8 + 7)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR1,7)
// T2CON<OUTPS0>
extern volatile __bit                   OUTPS0              __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 OUTPS0_bit          _BIT_ACCESS(T2CON,0)
// T2CON<OUTPS1>
extern volatile __bit                   OUTPS1              __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 OUTPS1_bit          _BIT_ACCESS(T2CON,1)
// T2CON<OUTPS2>
extern volatile __bit                   OUTPS2              __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 OUTPS2_bit          _BIT_ACCESS(T2CON,2)
// T2CON<OUTPS3>
extern volatile __bit                   OUTPS3              __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 OUTPS3_bit          _BIT_ACCESS(T2CON,3)
// CWG1STR<OVRA>
extern volatile __bit                   OVRA                __at(0x30A4);	// @ (0x614 * 8 + 4)
#define                                 OVRA_bit            _BIT_ACCESS(CWG1STR,4)
// CWG1STR<OVRB>
extern volatile __bit                   OVRB                __at(0x30A5);	// @ (0x614 * 8 + 5)
#define                                 OVRB_bit            _BIT_ACCESS(CWG1STR,5)
// CWG1STR<OVRC>
extern volatile __bit                   OVRC                __at(0x30A6);	// @ (0x614 * 8 + 6)
#define                                 OVRC_bit            _BIT_ACCESS(CWG1STR,6)
// CWG1STR<OVRD>
extern volatile __bit                   OVRD                __at(0x30A7);	// @ (0x614 * 8 + 7)
#define                                 OVRD_bit            _BIT_ACCESS(CWG1STR,7)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// SSP2CON2<PEN2>
extern volatile __bit                   PEN2                __at(0xCDA);	// @ (0x19B * 8 + 2)
#define                                 PEN2_bit            _BIT_ACCESS(SSP2CON2,2)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x4480);	// @ (0x890 * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// CWG1CON1<POLA>
extern volatile __bit                   POLA                __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 POLA_bit            _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<POLB>
extern volatile __bit                   POLB                __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 POLB_bit            _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<POLC>
extern volatile __bit                   POLC                __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 POLC_bit            _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<POLD>
extern volatile __bit                   POLD                __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 POLD_bit            _BIT_ACCESS(CWG1CON1,3)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0xF478);	// @ (0x1E8F * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// DAC1CON0<PSS0>
extern volatile __bit                   PSS0                __at(0x4872);	// @ (0x90E * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<PSS1>
extern volatile __bit                   PSS1                __at(0x4873);	// @ (0x90E * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON0,3)
// T2HLT<PSYNC>
extern volatile __bit                   PSYNC               __at(0x147F);	// @ (0x28F * 8 + 7)
#define                                 PSYNC_bit           _BIT_ACCESS(T2HLT,7)
// PWM3DCL<PWM3DC0>
extern volatile __bit                   PWM3DC0             __at(0x18A6);	// @ (0x314 * 8 + 6)
#define                                 PWM3DC0_bit         _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<PWM3DC1>
extern volatile __bit                   PWM3DC1             __at(0x18A7);	// @ (0x314 * 8 + 7)
#define                                 PWM3DC1_bit         _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<PWM3DC2>
extern volatile __bit                   PWM3DC2             __at(0x18A8);	// @ (0x315 * 8 + 0)
#define                                 PWM3DC2_bit         _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<PWM3DC3>
extern volatile __bit                   PWM3DC3             __at(0x18A9);	// @ (0x315 * 8 + 1)
#define                                 PWM3DC3_bit         _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<PWM3DC4>
extern volatile __bit                   PWM3DC4             __at(0x18AA);	// @ (0x315 * 8 + 2)
#define                                 PWM3DC4_bit         _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<PWM3DC5>
extern volatile __bit                   PWM3DC5             __at(0x18AB);	// @ (0x315 * 8 + 3)
#define                                 PWM3DC5_bit         _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<PWM3DC6>
extern volatile __bit                   PWM3DC6             __at(0x18AC);	// @ (0x315 * 8 + 4)
#define                                 PWM3DC6_bit         _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<PWM3DC7>
extern volatile __bit                   PWM3DC7             __at(0x18AD);	// @ (0x315 * 8 + 5)
#define                                 PWM3DC7_bit         _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<PWM3DC8>
extern volatile __bit                   PWM3DC8             __at(0x18AE);	// @ (0x315 * 8 + 6)
#define                                 PWM3DC8_bit         _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<PWM3DC9>
extern volatile __bit                   PWM3DC9             __at(0x18AF);	// @ (0x315 * 8 + 7)
#define                                 PWM3DC9_bit         _BIT_ACCESS(PWM3DCH,7)
// PWM3CON<PWM3EN>
extern volatile __bit                   PWM3EN              __at(0x18B7);	// @ (0x316 * 8 + 7)
#define                                 PWM3EN_bit          _BIT_ACCESS(PWM3CON,7)
// PMD3<PWM3MD>
extern volatile __bit                   PWM3MD              __at(0x3CCA);	// @ (0x799 * 8 + 2)
#define                                 PWM3MD_bit          _BIT_ACCESS(PMD3,2)
// PWM3CON<PWM3OUT>
extern volatile __bit                   PWM3OUT             __at(0x18B5);	// @ (0x316 * 8 + 5)
#define                                 PWM3OUT_bit         _BIT_ACCESS(PWM3CON,5)
// PWM3CON<PWM3POL>
extern volatile __bit                   PWM3POL             __at(0x18B4);	// @ (0x316 * 8 + 4)
#define                                 PWM3POL_bit         _BIT_ACCESS(PWM3CON,4)
// PWM4DCL<PWM4DC0>
extern volatile __bit                   PWM4DC0             __at(0x18C6);	// @ (0x318 * 8 + 6)
#define                                 PWM4DC0_bit         _BIT_ACCESS(PWM4DCL,6)
// PWM4DCL<PWM4DC1>
extern volatile __bit                   PWM4DC1             __at(0x18C7);	// @ (0x318 * 8 + 7)
#define                                 PWM4DC1_bit         _BIT_ACCESS(PWM4DCL,7)
// PWM4DCH<PWM4DC2>
extern volatile __bit                   PWM4DC2             __at(0x18C8);	// @ (0x319 * 8 + 0)
#define                                 PWM4DC2_bit         _BIT_ACCESS(PWM4DCH,0)
// PWM4DCH<PWM4DC3>
extern volatile __bit                   PWM4DC3             __at(0x18C9);	// @ (0x319 * 8 + 1)
#define                                 PWM4DC3_bit         _BIT_ACCESS(PWM4DCH,1)
// PWM4DCH<PWM4DC4>
extern volatile __bit                   PWM4DC4             __at(0x18CA);	// @ (0x319 * 8 + 2)
#define                                 PWM4DC4_bit         _BIT_ACCESS(PWM4DCH,2)
// PWM4DCH<PWM4DC5>
extern volatile __bit                   PWM4DC5             __at(0x18CB);	// @ (0x319 * 8 + 3)
#define                                 PWM4DC5_bit         _BIT_ACCESS(PWM4DCH,3)
// PWM4DCH<PWM4DC6>
extern volatile __bit                   PWM4DC6             __at(0x18CC);	// @ (0x319 * 8 + 4)
#define                                 PWM4DC6_bit         _BIT_ACCESS(PWM4DCH,4)
// PWM4DCH<PWM4DC7>
extern volatile __bit                   PWM4DC7             __at(0x18CD);	// @ (0x319 * 8 + 5)
#define                                 PWM4DC7_bit         _BIT_ACCESS(PWM4DCH,5)
// PWM4DCH<PWM4DC8>
extern volatile __bit                   PWM4DC8             __at(0x18CE);	// @ (0x319 * 8 + 6)
#define                                 PWM4DC8_bit         _BIT_ACCESS(PWM4DCH,6)
// PWM4DCH<PWM4DC9>
extern volatile __bit                   PWM4DC9             __at(0x18CF);	// @ (0x319 * 8 + 7)
#define                                 PWM4DC9_bit         _BIT_ACCESS(PWM4DCH,7)
// PWM4CON<PWM4EN>
extern volatile __bit                   PWM4EN              __at(0x18D7);	// @ (0x31A * 8 + 7)
#define                                 PWM4EN_bit          _BIT_ACCESS(PWM4CON,7)
// PMD3<PWM4MD>
extern volatile __bit                   PWM4MD              __at(0x3CCB);	// @ (0x799 * 8 + 3)
#define                                 PWM4MD_bit          _BIT_ACCESS(PMD3,3)
// PWM4CON<PWM4OUT>
extern volatile __bit                   PWM4OUT             __at(0x18D5);	// @ (0x31A * 8 + 5)
#define                                 PWM4OUT_bit         _BIT_ACCESS(PWM4CON,5)
// PWM4CON<PWM4POL>
extern volatile __bit                   PWM4POL             __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 PWM4POL_bit         _BIT_ACCESS(PWM4CON,4)
// PWM5DCL<PWM5DC0>
extern volatile __bit                   PWM5DC0             __at(0x18E6);	// @ (0x31C * 8 + 6)
#define                                 PWM5DC0_bit         _BIT_ACCESS(PWM5DCL,6)
// PWM5DCL<PWM5DC1>
extern volatile __bit                   PWM5DC1             __at(0x18E7);	// @ (0x31C * 8 + 7)
#define                                 PWM5DC1_bit         _BIT_ACCESS(PWM5DCL,7)
// PWM5DCH<PWM5DC2>
extern volatile __bit                   PWM5DC2             __at(0x18E8);	// @ (0x31D * 8 + 0)
#define                                 PWM5DC2_bit         _BIT_ACCESS(PWM5DCH,0)
// PWM5DCH<PWM5DC3>
extern volatile __bit                   PWM5DC3             __at(0x18E9);	// @ (0x31D * 8 + 1)
#define                                 PWM5DC3_bit         _BIT_ACCESS(PWM5DCH,1)
// PWM5DCH<PWM5DC4>
extern volatile __bit                   PWM5DC4             __at(0x18EA);	// @ (0x31D * 8 + 2)
#define                                 PWM5DC4_bit         _BIT_ACCESS(PWM5DCH,2)
// PWM5DCH<PWM5DC5>
extern volatile __bit                   PWM5DC5             __at(0x18EB);	// @ (0x31D * 8 + 3)
#define                                 PWM5DC5_bit         _BIT_ACCESS(PWM5DCH,3)
// PWM5DCH<PWM5DC6>
extern volatile __bit                   PWM5DC6             __at(0x18EC);	// @ (0x31D * 8 + 4)
#define                                 PWM5DC6_bit         _BIT_ACCESS(PWM5DCH,4)
// PWM5DCH<PWM5DC7>
extern volatile __bit                   PWM5DC7             __at(0x18ED);	// @ (0x31D * 8 + 5)
#define                                 PWM5DC7_bit         _BIT_ACCESS(PWM5DCH,5)
// PWM5DCH<PWM5DC8>
extern volatile __bit                   PWM5DC8             __at(0x18EE);	// @ (0x31D * 8 + 6)
#define                                 PWM5DC8_bit         _BIT_ACCESS(PWM5DCH,6)
// PWM5DCH<PWM5DC9>
extern volatile __bit                   PWM5DC9             __at(0x18EF);	// @ (0x31D * 8 + 7)
#define                                 PWM5DC9_bit         _BIT_ACCESS(PWM5DCH,7)
// PWM5CON<PWM5EN>
extern volatile __bit                   PWM5EN              __at(0x18F7);	// @ (0x31E * 8 + 7)
#define                                 PWM5EN_bit          _BIT_ACCESS(PWM5CON,7)
// PMD3<PWM5MD>
extern volatile __bit                   PWM5MD              __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 PWM5MD_bit          _BIT_ACCESS(PMD3,4)
// PWM5CON<PWM5OUT>
extern volatile __bit                   PWM5OUT             __at(0x18F5);	// @ (0x31E * 8 + 5)
#define                                 PWM5OUT_bit         _BIT_ACCESS(PWM5CON,5)
// PWM5CON<PWM5POL>
extern volatile __bit                   PWM5POL             __at(0x18F4);	// @ (0x31E * 8 + 4)
#define                                 PWM5POL_bit         _BIT_ACCESS(PWM5CON,4)
// PWM6DCL<PWM6DC0>
extern volatile __bit                   PWM6DC0             __at(0x1C66);	// @ (0x38C * 8 + 6)
#define                                 PWM6DC0_bit         _BIT_ACCESS(PWM6DCL,6)
// PWM6DCL<PWM6DC1>
extern volatile __bit                   PWM6DC1             __at(0x1C67);	// @ (0x38C * 8 + 7)
#define                                 PWM6DC1_bit         _BIT_ACCESS(PWM6DCL,7)
// PWM6DCH<PWM6DC2>
extern volatile __bit                   PWM6DC2             __at(0x1C68);	// @ (0x38D * 8 + 0)
#define                                 PWM6DC2_bit         _BIT_ACCESS(PWM6DCH,0)
// PWM6DCH<PWM6DC3>
extern volatile __bit                   PWM6DC3             __at(0x1C69);	// @ (0x38D * 8 + 1)
#define                                 PWM6DC3_bit         _BIT_ACCESS(PWM6DCH,1)
// PWM6DCH<PWM6DC4>
extern volatile __bit                   PWM6DC4             __at(0x1C6A);	// @ (0x38D * 8 + 2)
#define                                 PWM6DC4_bit         _BIT_ACCESS(PWM6DCH,2)
// PWM6DCH<PWM6DC5>
extern volatile __bit                   PWM6DC5             __at(0x1C6B);	// @ (0x38D * 8 + 3)
#define                                 PWM6DC5_bit         _BIT_ACCESS(PWM6DCH,3)
// PWM6DCH<PWM6DC6>
extern volatile __bit                   PWM6DC6             __at(0x1C6C);	// @ (0x38D * 8 + 4)
#define                                 PWM6DC6_bit         _BIT_ACCESS(PWM6DCH,4)
// PWM6DCH<PWM6DC7>
extern volatile __bit                   PWM6DC7             __at(0x1C6D);	// @ (0x38D * 8 + 5)
#define                                 PWM6DC7_bit         _BIT_ACCESS(PWM6DCH,5)
// PWM6DCH<PWM6DC8>
extern volatile __bit                   PWM6DC8             __at(0x1C6E);	// @ (0x38D * 8 + 6)
#define                                 PWM6DC8_bit         _BIT_ACCESS(PWM6DCH,6)
// PWM6DCH<PWM6DC9>
extern volatile __bit                   PWM6DC9             __at(0x1C6F);	// @ (0x38D * 8 + 7)
#define                                 PWM6DC9_bit         _BIT_ACCESS(PWM6DCH,7)
// PWM6CON<PWM6EN>
extern volatile __bit                   PWM6EN              __at(0x1C77);	// @ (0x38E * 8 + 7)
#define                                 PWM6EN_bit          _BIT_ACCESS(PWM6CON,7)
// PMD3<PWM6MD>
extern volatile __bit                   PWM6MD              __at(0x3CCD);	// @ (0x799 * 8 + 5)
#define                                 PWM6MD_bit          _BIT_ACCESS(PMD3,5)
// PWM6CON<PWM6OUT>
extern volatile __bit                   PWM6OUT             __at(0x1C75);	// @ (0x38E * 8 + 5)
#define                                 PWM6OUT_bit         _BIT_ACCESS(PWM6CON,5)
// PWM6CON<PWM6POL>
extern volatile __bit                   PWM6POL             __at(0x1C74);	// @ (0x38E * 8 + 4)
#define                                 PWM6POL_bit         _BIT_ACCESS(PWM6CON,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0xF880);	// @ (0x1F10 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0xF881);	// @ (0x1F10 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0xF882);	// @ (0x1F10 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0xF883);	// @ (0x1F10 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0xF884);	// @ (0x1F10 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0xF888);	// @ (0x1F11 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0xF889);	// @ (0x1F11 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0xF88A);	// @ (0x1F11 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0xF88B);	// @ (0x1F11 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0xF88C);	// @ (0x1F11 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0xF890);	// @ (0x1F12 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0xF891);	// @ (0x1F12 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0xF892);	// @ (0x1F12 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0xF893);	// @ (0x1F12 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0xF894);	// @ (0x1F12 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0xF898);	// @ (0x1F13 * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0xF899);	// @ (0x1F13 * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0xF89A);	// @ (0x1F13 * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0xF89B);	// @ (0x1F13 * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0xF89C);	// @ (0x1F13 * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x64);	// @ (0xC * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0xF8A0);	// @ (0x1F14 * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0xF8A1);	// @ (0x1F14 * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0xF8A2);	// @ (0x1F14 * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0xF8A3);	// @ (0x1F14 * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0xF8A4);	// @ (0x1F14 * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x65);	// @ (0xC * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0xF8A8);	// @ (0x1F15 * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0xF8A9);	// @ (0x1F15 * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0xF8AA);	// @ (0x1F15 * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0xF8AB);	// @ (0x1F15 * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0xF8AC);	// @ (0x1F15 * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x66);	// @ (0xC * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// RA6PPS<RA6PPS0>
extern volatile __bit                   RA6PPS0             __at(0xF8B0);	// @ (0x1F16 * 8 + 0)
#define                                 RA6PPS0_bit         _BIT_ACCESS(RA6PPS,0)
// RA6PPS<RA6PPS1>
extern volatile __bit                   RA6PPS1             __at(0xF8B1);	// @ (0x1F16 * 8 + 1)
#define                                 RA6PPS1_bit         _BIT_ACCESS(RA6PPS,1)
// RA6PPS<RA6PPS2>
extern volatile __bit                   RA6PPS2             __at(0xF8B2);	// @ (0x1F16 * 8 + 2)
#define                                 RA6PPS2_bit         _BIT_ACCESS(RA6PPS,2)
// RA6PPS<RA6PPS3>
extern volatile __bit                   RA6PPS3             __at(0xF8B3);	// @ (0x1F16 * 8 + 3)
#define                                 RA6PPS3_bit         _BIT_ACCESS(RA6PPS,3)
// RA6PPS<RA6PPS4>
extern volatile __bit                   RA6PPS4             __at(0xF8B4);	// @ (0x1F16 * 8 + 4)
#define                                 RA6PPS4_bit         _BIT_ACCESS(RA6PPS,4)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x67);	// @ (0xC * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// RA7PPS<RA7PPS0>
extern volatile __bit                   RA7PPS0             __at(0xF8B8);	// @ (0x1F17 * 8 + 0)
#define                                 RA7PPS0_bit         _BIT_ACCESS(RA7PPS,0)
// RA7PPS<RA7PPS1>
extern volatile __bit                   RA7PPS1             __at(0xF8B9);	// @ (0x1F17 * 8 + 1)
#define                                 RA7PPS1_bit         _BIT_ACCESS(RA7PPS,1)
// RA7PPS<RA7PPS2>
extern volatile __bit                   RA7PPS2             __at(0xF8BA);	// @ (0x1F17 * 8 + 2)
#define                                 RA7PPS2_bit         _BIT_ACCESS(RA7PPS,2)
// RA7PPS<RA7PPS3>
extern volatile __bit                   RA7PPS3             __at(0xF8BB);	// @ (0x1F17 * 8 + 3)
#define                                 RA7PPS3_bit         _BIT_ACCESS(RA7PPS,3)
// RA7PPS<RA7PPS4>
extern volatile __bit                   RA7PPS4             __at(0xF8BC);	// @ (0x1F17 * 8 + 4)
#define                                 RA7PPS4_bit         _BIT_ACCESS(RA7PPS,4)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x68);	// @ (0xD * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0xF8C0);	// @ (0x1F18 * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0xF8C1);	// @ (0x1F18 * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0xF8C2);	// @ (0x1F18 * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0xF8C3);	// @ (0x1F18 * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0xF8C4);	// @ (0x1F18 * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x69);	// @ (0xD * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0xF8C8);	// @ (0x1F19 * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0xF8C9);	// @ (0x1F19 * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0xF8CA);	// @ (0x1F19 * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0xF8CB);	// @ (0x1F19 * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0xF8CC);	// @ (0x1F19 * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x6A);	// @ (0xD * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0xF8D0);	// @ (0x1F1A * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0xF8D1);	// @ (0x1F1A * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0xF8D2);	// @ (0x1F1A * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0xF8D3);	// @ (0x1F1A * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0xF8D4);	// @ (0x1F1A * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x6B);	// @ (0xD * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0xF8D8);	// @ (0x1F1B * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0xF8D9);	// @ (0x1F1B * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0xF8DA);	// @ (0x1F1B * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0xF8DB);	// @ (0x1F1B * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0xF8DC);	// @ (0x1F1B * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x6C);	// @ (0xD * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0xF8E0);	// @ (0x1F1C * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0xF8E1);	// @ (0x1F1C * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0xF8E2);	// @ (0x1F1C * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0xF8E3);	// @ (0x1F1C * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0xF8E4);	// @ (0x1F1C * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x6D);	// @ (0xD * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0xF8E8);	// @ (0x1F1D * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0xF8E9);	// @ (0x1F1D * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0xF8EA);	// @ (0x1F1D * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0xF8EB);	// @ (0x1F1D * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0xF8EC);	// @ (0x1F1D * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x6E);	// @ (0xD * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0xF8F0);	// @ (0x1F1E * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0xF8F1);	// @ (0x1F1E * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0xF8F2);	// @ (0x1F1E * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0xF8F3);	// @ (0x1F1E * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0xF8F4);	// @ (0x1F1E * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x6F);	// @ (0xD * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0xF8F8);	// @ (0x1F1F * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0xF8F9);	// @ (0x1F1F * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0xF8FA);	// @ (0x1F1F * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0xF8FB);	// @ (0x1F1F * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0xF8FC);	// @ (0x1F1F * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x70);	// @ (0xE * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0xF900);	// @ (0x1F20 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0xF901);	// @ (0x1F20 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0xF902);	// @ (0x1F20 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0xF903);	// @ (0x1F20 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0xF904);	// @ (0x1F20 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x71);	// @ (0xE * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// PIE3<RC1IE>
extern volatile __bit                   RC1IE               __at(0x38CD);	// @ (0x719 * 8 + 5)
#define                                 RC1IE_bit           _BIT_ACCESS(PIE3,5)
// PIR3<RC1IF>
extern volatile __bit                   RC1IF               __at(0x387D);	// @ (0x70F * 8 + 5)
#define                                 RC1IF_bit           _BIT_ACCESS(PIR3,5)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0xF908);	// @ (0x1F21 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0xF909);	// @ (0x1F21 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0xF90A);	// @ (0x1F21 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0xF90B);	// @ (0x1F21 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0xF90C);	// @ (0x1F21 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x72);	// @ (0xE * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// PIE3<RC2IE>
extern volatile __bit                   RC2IE               __at(0x38CF);	// @ (0x719 * 8 + 7)
#define                                 RC2IE_bit           _BIT_ACCESS(PIE3,7)
// PIR3<RC2IF>
extern volatile __bit                   RC2IF               __at(0x387F);	// @ (0x70F * 8 + 7)
#define                                 RC2IF_bit           _BIT_ACCESS(PIR3,7)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0xF910);	// @ (0x1F22 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0xF911);	// @ (0x1F22 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0xF912);	// @ (0x1F22 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0xF913);	// @ (0x1F22 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0xF914);	// @ (0x1F22 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x73);	// @ (0xE * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0xF918);	// @ (0x1F23 * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0xF919);	// @ (0x1F23 * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0xF91A);	// @ (0x1F23 * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0xF91B);	// @ (0x1F23 * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0xF91C);	// @ (0x1F23 * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0xF920);	// @ (0x1F24 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0xF921);	// @ (0x1F24 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0xF922);	// @ (0x1F24 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0xF923);	// @ (0x1F24 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0xF924);	// @ (0x1F24 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0xF928);	// @ (0x1F25 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0xF929);	// @ (0x1F25 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0xF92A);	// @ (0x1F25 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0xF92B);	// @ (0x1F25 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0xF92C);	// @ (0x1F25 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x76);	// @ (0xE * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0xF930);	// @ (0x1F26 * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0xF931);	// @ (0x1F26 * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0xF932);	// @ (0x1F26 * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0xF933);	// @ (0x1F26 * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0xF934);	// @ (0x1F26 * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x77);	// @ (0xE * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RC7PPS<RC7PPS0>
extern volatile __bit                   RC7PPS0             __at(0xF938);	// @ (0x1F27 * 8 + 0)
#define                                 RC7PPS0_bit         _BIT_ACCESS(RC7PPS,0)
// RC7PPS<RC7PPS1>
extern volatile __bit                   RC7PPS1             __at(0xF939);	// @ (0x1F27 * 8 + 1)
#define                                 RC7PPS1_bit         _BIT_ACCESS(RC7PPS,1)
// RC7PPS<RC7PPS2>
extern volatile __bit                   RC7PPS2             __at(0xF93A);	// @ (0x1F27 * 8 + 2)
#define                                 RC7PPS2_bit         _BIT_ACCESS(RC7PPS,2)
// RC7PPS<RC7PPS3>
extern volatile __bit                   RC7PPS3             __at(0xF93B);	// @ (0x1F27 * 8 + 3)
#define                                 RC7PPS3_bit         _BIT_ACCESS(RC7PPS,3)
// RC7PPS<RC7PPS4>
extern volatile __bit                   RC7PPS4             __at(0xF93C);	// @ (0x1F27 * 8 + 4)
#define                                 RC7PPS4_bit         _BIT_ACCESS(RC7PPS,4)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// SSP2CON2<RCEN2>
extern volatile __bit                   RCEN2               __at(0xCDB);	// @ (0x19B * 8 + 3)
#define                                 RCEN2_bit           _BIT_ACCESS(SSP2CON2,3)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0x40F0);	// @ (0x81E * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// T1CON<RD16>
extern volatile __bit                   RD16                __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 RD16_bit            _BIT_ACCESS(T1CON,1)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x83);	// @ (0x10 * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<READ_WRITE2>
extern volatile __bit                   READ_WRITE2         __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 READ_WRITE2_bit     _BIT_ACCESS(SSP2STAT,2)
// CWG1AS0<REN>
extern volatile __bit                   REN                 __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 REN_bit             _BIT_ACCESS(CWG1AS0,6)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x4465);	// @ (0x88C * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// T2RST<RSEL0>
extern volatile __bit                   RSEL0               __at(0x1488);	// @ (0x291 * 8 + 0)
#define                                 RSEL0_bit           _BIT_ACCESS(T2RST,0)
// T2RST<RSEL1>
extern volatile __bit                   RSEL1               __at(0x1489);	// @ (0x291 * 8 + 1)
#define                                 RSEL1_bit           _BIT_ACCESS(T2RST,1)
// T2RST<RSEL2>
extern volatile __bit                   RSEL2               __at(0x148A);	// @ (0x291 * 8 + 2)
#define                                 RSEL2_bit           _BIT_ACCESS(T2RST,2)
// T2RST<RSEL3>
extern volatile __bit                   RSEL3               __at(0x148B);	// @ (0x291 * 8 + 3)
#define                                 RSEL3_bit           _BIT_ACCESS(T2RST,3)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// SSP2CON2<RSEN2>
extern volatile __bit                   RSEN2               __at(0xCD9);	// @ (0x19B * 8 + 1)
#define                                 RSEN2_bit           _BIT_ACCESS(SSP2CON2,1)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<RW2>
extern volatile __bit                   RW2                 __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 RW2_bit             _BIT_ACCESS(SSP2STAT,2)
// RX1DTPPS<RX1DTPPS0>
extern volatile __bit                   RX1DTPPS0           __at(0xF658);	// @ (0x1ECB * 8 + 0)
#define                                 RX1DTPPS0_bit       _BIT_ACCESS(RX1DTPPS,0)
// RX1DTPPS<RX1DTPPS1>
extern volatile __bit                   RX1DTPPS1           __at(0xF659);	// @ (0x1ECB * 8 + 1)
#define                                 RX1DTPPS1_bit       _BIT_ACCESS(RX1DTPPS,1)
// RX1DTPPS<RX1DTPPS2>
extern volatile __bit                   RX1DTPPS2           __at(0xF65A);	// @ (0x1ECB * 8 + 2)
#define                                 RX1DTPPS2_bit       _BIT_ACCESS(RX1DTPPS,2)
// RX1DTPPS<RX1DTPPS3>
extern volatile __bit                   RX1DTPPS3           __at(0xF65B);	// @ (0x1ECB * 8 + 3)
#define                                 RX1DTPPS3_bit       _BIT_ACCESS(RX1DTPPS,3)
// RX1DTPPS<RX1DTPPS4>
extern volatile __bit                   RX1DTPPS4           __at(0xF65C);	// @ (0x1ECB * 8 + 4)
#define                                 RX1DTPPS4_bit       _BIT_ACCESS(RX1DTPPS,4)
// RX1DTPPS<RX1DTPPS5>
extern volatile __bit                   RX1DTPPS5           __at(0xF65D);	// @ (0x1ECB * 8 + 5)
#define                                 RX1DTPPS5_bit       _BIT_ACCESS(RX1DTPPS,5)
// RX2DTPPS<RX2DTPPS0>
extern volatile __bit                   RX2DTPPS0           __at(0xF668);	// @ (0x1ECD * 8 + 0)
#define                                 RX2DTPPS0_bit       _BIT_ACCESS(RX2DTPPS,0)
// RX2DTPPS<RX2DTPPS1>
extern volatile __bit                   RX2DTPPS1           __at(0xF669);	// @ (0x1ECD * 8 + 1)
#define                                 RX2DTPPS1_bit       _BIT_ACCESS(RX2DTPPS,1)
// RX2DTPPS<RX2DTPPS2>
extern volatile __bit                   RX2DTPPS2           __at(0xF66A);	// @ (0x1ECD * 8 + 2)
#define                                 RX2DTPPS2_bit       _BIT_ACCESS(RX2DTPPS,2)
// RX2DTPPS<RX2DTPPS3>
extern volatile __bit                   RX2DTPPS3           __at(0xF66B);	// @ (0x1ECD * 8 + 3)
#define                                 RX2DTPPS3_bit       _BIT_ACCESS(RX2DTPPS,3)
// RX2DTPPS<RX2DTPPS4>
extern volatile __bit                   RX2DTPPS4           __at(0xF66C);	// @ (0x1ECD * 8 + 4)
#define                                 RX2DTPPS4_bit       _BIT_ACCESS(RX2DTPPS,4)
// RX2DTPPS<RX2DTPPS5>
extern volatile __bit                   RX2DTPPS5           __at(0xF66D);	// @ (0x1ECD * 8 + 5)
#define                                 RX2DTPPS5_bit       _BIT_ACCESS(RX2DTPPS,5)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_W2>
extern volatile __bit                   R_W2                __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 R_W2_bit            _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_nW2>
extern volatile __bit                   R_nW2               __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 R_nW2_bit           _BIT_ACCESS(SSP2STAT,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0xC88);	// @ (0x191 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// SSP2CON2<SEN2>
extern volatile __bit                   SEN2                __at(0xCD8);	// @ (0x19B * 8 + 0)
#define                                 SEN2_bit            _BIT_ACCESS(SSP2CON2,0)
// CWG1AS0<SHUTDOWN>
extern volatile __bit                   SHUTDOWN            __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 SHUTDOWN_bit        _BIT_ACCESS(CWG1AS0,7)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0xF9D8);	// @ (0x1F3B * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0xF9D9);	// @ (0x1F3B * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0xF9DA);	// @ (0x1F3B * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0xF9DB);	// @ (0x1F3B * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0xF9DC);	// @ (0x1F3B * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0xF9DD);	// @ (0x1F3B * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONA<SLRA6>
extern volatile __bit                   SLRA6               __at(0xF9DE);	// @ (0x1F3B * 8 + 6)
#define                                 SLRA6_bit           _BIT_ACCESS(SLRCONA,6)
// SLRCONA<SLRA7>
extern volatile __bit                   SLRA7               __at(0xF9DF);	// @ (0x1F3B * 8 + 7)
#define                                 SLRA7_bit           _BIT_ACCESS(SLRCONA,7)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0xFA30);	// @ (0x1F46 * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0xFA31);	// @ (0x1F46 * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0xFA32);	// @ (0x1F46 * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0xFA33);	// @ (0x1F46 * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0xFA34);	// @ (0x1F46 * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0xFA35);	// @ (0x1F46 * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0xFA36);	// @ (0x1F46 * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0xFA37);	// @ (0x1F46 * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0xFA88);	// @ (0x1F51 * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0xFA89);	// @ (0x1F51 * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0xFA8A);	// @ (0x1F51 * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0xFA8B);	// @ (0x1F51 * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0xFA8C);	// @ (0x1F51 * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0xFA8D);	// @ (0x1F51 * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0xFA8E);	// @ (0x1F51 * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0xFA8F);	// @ (0x1F51 * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// SSP2STAT<SMP2>
extern volatile __bit                   SMP2                __at(0xCCF);	// @ (0x199 * 8 + 7)
#define                                 SMP2_bit            _BIT_ACCESS(SSP2STAT,7)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x4483);	// @ (0x890 * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x448B);	// @ (0x891 * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x447E);	// @ (0x88F * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// SSP1CLKPPS<SSP1CLKPPS0>
extern volatile __bit                   SSP1CLKPPS0         __at(0xF628);	// @ (0x1EC5 * 8 + 0)
#define                                 SSP1CLKPPS0_bit     _BIT_ACCESS(SSP1CLKPPS,0)
// SSP1CLKPPS<SSP1CLKPPS1>
extern volatile __bit                   SSP1CLKPPS1         __at(0xF629);	// @ (0x1EC5 * 8 + 1)
#define                                 SSP1CLKPPS1_bit     _BIT_ACCESS(SSP1CLKPPS,1)
// SSP1CLKPPS<SSP1CLKPPS2>
extern volatile __bit                   SSP1CLKPPS2         __at(0xF62A);	// @ (0x1EC5 * 8 + 2)
#define                                 SSP1CLKPPS2_bit     _BIT_ACCESS(SSP1CLKPPS,2)
// SSP1CLKPPS<SSP1CLKPPS3>
extern volatile __bit                   SSP1CLKPPS3         __at(0xF62B);	// @ (0x1EC5 * 8 + 3)
#define                                 SSP1CLKPPS3_bit     _BIT_ACCESS(SSP1CLKPPS,3)
// SSP1CLKPPS<SSP1CLKPPS4>
extern volatile __bit                   SSP1CLKPPS4         __at(0xF62C);	// @ (0x1EC5 * 8 + 4)
#define                                 SSP1CLKPPS4_bit     _BIT_ACCESS(SSP1CLKPPS,4)
// SSP1CLKPPS<SSP1CLKPPS5>
extern volatile __bit                   SSP1CLKPPS5         __at(0xF62D);	// @ (0x1EC5 * 8 + 5)
#define                                 SSP1CLKPPS5_bit     _BIT_ACCESS(SSP1CLKPPS,5)
// SSP1DATPPS<SSP1DATPPS0>
extern volatile __bit                   SSP1DATPPS0         __at(0xF630);	// @ (0x1EC6 * 8 + 0)
#define                                 SSP1DATPPS0_bit     _BIT_ACCESS(SSP1DATPPS,0)
// SSP1DATPPS<SSP1DATPPS1>
extern volatile __bit                   SSP1DATPPS1         __at(0xF631);	// @ (0x1EC6 * 8 + 1)
#define                                 SSP1DATPPS1_bit     _BIT_ACCESS(SSP1DATPPS,1)
// SSP1DATPPS<SSP1DATPPS2>
extern volatile __bit                   SSP1DATPPS2         __at(0xF632);	// @ (0x1EC6 * 8 + 2)
#define                                 SSP1DATPPS2_bit     _BIT_ACCESS(SSP1DATPPS,2)
// SSP1DATPPS<SSP1DATPPS3>
extern volatile __bit                   SSP1DATPPS3         __at(0xF633);	// @ (0x1EC6 * 8 + 3)
#define                                 SSP1DATPPS3_bit     _BIT_ACCESS(SSP1DATPPS,3)
// SSP1DATPPS<SSP1DATPPS4>
extern volatile __bit                   SSP1DATPPS4         __at(0xF634);	// @ (0x1EC6 * 8 + 4)
#define                                 SSP1DATPPS4_bit     _BIT_ACCESS(SSP1DATPPS,4)
// SSP1DATPPS<SSP1DATPPS5>
extern volatile __bit                   SSP1DATPPS5         __at(0xF635);	// @ (0x1EC6 * 8 + 5)
#define                                 SSP1DATPPS5_bit     _BIT_ACCESS(SSP1DATPPS,5)
// PIE3<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x38C8);	// @ (0x719 * 8 + 0)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x3878);	// @ (0x70F * 8 + 0)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR3,0)
// SSP1SSPPS<SSP1SSPPS0>
extern volatile __bit                   SSP1SSPPS0          __at(0xF638);	// @ (0x1EC7 * 8 + 0)
#define                                 SSP1SSPPS0_bit      _BIT_ACCESS(SSP1SSPPS,0)
// SSP1SSPPS<SSP1SSPPS1>
extern volatile __bit                   SSP1SSPPS1          __at(0xF639);	// @ (0x1EC7 * 8 + 1)
#define                                 SSP1SSPPS1_bit      _BIT_ACCESS(SSP1SSPPS,1)
// SSP1SSPPS<SSP1SSPPS2>
extern volatile __bit                   SSP1SSPPS2          __at(0xF63A);	// @ (0x1EC7 * 8 + 2)
#define                                 SSP1SSPPS2_bit      _BIT_ACCESS(SSP1SSPPS,2)
// SSP1SSPPS<SSP1SSPPS3>
extern volatile __bit                   SSP1SSPPS3          __at(0xF63B);	// @ (0x1EC7 * 8 + 3)
#define                                 SSP1SSPPS3_bit      _BIT_ACCESS(SSP1SSPPS,3)
// SSP1SSPPS<SSP1SSPPS4>
extern volatile __bit                   SSP1SSPPS4          __at(0xF63C);	// @ (0x1EC7 * 8 + 4)
#define                                 SSP1SSPPS4_bit      _BIT_ACCESS(SSP1SSPPS,4)
// SSP1SSPPS<SSP1SSPPS5>
extern volatile __bit                   SSP1SSPPS5          __at(0xF63D);	// @ (0x1EC7 * 8 + 5)
#define                                 SSP1SSPPS5_bit      _BIT_ACCESS(SSP1SSPPS,5)
// SSP2CLKPPS<SSP2CLKPPS0>
extern volatile __bit                   SSP2CLKPPS0         __at(0xF640);	// @ (0x1EC8 * 8 + 0)
#define                                 SSP2CLKPPS0_bit     _BIT_ACCESS(SSP2CLKPPS,0)
// SSP2CLKPPS<SSP2CLKPPS1>
extern volatile __bit                   SSP2CLKPPS1         __at(0xF641);	// @ (0x1EC8 * 8 + 1)
#define                                 SSP2CLKPPS1_bit     _BIT_ACCESS(SSP2CLKPPS,1)
// SSP2CLKPPS<SSP2CLKPPS2>
extern volatile __bit                   SSP2CLKPPS2         __at(0xF642);	// @ (0x1EC8 * 8 + 2)
#define                                 SSP2CLKPPS2_bit     _BIT_ACCESS(SSP2CLKPPS,2)
// SSP2CLKPPS<SSP2CLKPPS3>
extern volatile __bit                   SSP2CLKPPS3         __at(0xF643);	// @ (0x1EC8 * 8 + 3)
#define                                 SSP2CLKPPS3_bit     _BIT_ACCESS(SSP2CLKPPS,3)
// SSP2CLKPPS<SSP2CLKPPS4>
extern volatile __bit                   SSP2CLKPPS4         __at(0xF644);	// @ (0x1EC8 * 8 + 4)
#define                                 SSP2CLKPPS4_bit     _BIT_ACCESS(SSP2CLKPPS,4)
// SSP2CLKPPS<SSP2CLKPPS5>
extern volatile __bit                   SSP2CLKPPS5         __at(0xF645);	// @ (0x1EC8 * 8 + 5)
#define                                 SSP2CLKPPS5_bit     _BIT_ACCESS(SSP2CLKPPS,5)
// SSP2DATPPS<SSP2DATPPS0>
extern volatile __bit                   SSP2DATPPS0         __at(0xF648);	// @ (0x1EC9 * 8 + 0)
#define                                 SSP2DATPPS0_bit     _BIT_ACCESS(SSP2DATPPS,0)
// SSP2DATPPS<SSP2DATPPS1>
extern volatile __bit                   SSP2DATPPS1         __at(0xF649);	// @ (0x1EC9 * 8 + 1)
#define                                 SSP2DATPPS1_bit     _BIT_ACCESS(SSP2DATPPS,1)
// SSP2DATPPS<SSP2DATPPS2>
extern volatile __bit                   SSP2DATPPS2         __at(0xF64A);	// @ (0x1EC9 * 8 + 2)
#define                                 SSP2DATPPS2_bit     _BIT_ACCESS(SSP2DATPPS,2)
// SSP2DATPPS<SSP2DATPPS3>
extern volatile __bit                   SSP2DATPPS3         __at(0xF64B);	// @ (0x1EC9 * 8 + 3)
#define                                 SSP2DATPPS3_bit     _BIT_ACCESS(SSP2DATPPS,3)
// SSP2DATPPS<SSP2DATPPS4>
extern volatile __bit                   SSP2DATPPS4         __at(0xF64C);	// @ (0x1EC9 * 8 + 4)
#define                                 SSP2DATPPS4_bit     _BIT_ACCESS(SSP2DATPPS,4)
// SSP2DATPPS<SSP2DATPPS5>
extern volatile __bit                   SSP2DATPPS5         __at(0xF64D);	// @ (0x1EC9 * 8 + 5)
#define                                 SSP2DATPPS5_bit     _BIT_ACCESS(SSP2DATPPS,5)
// PIE3<SSP2IE>
extern volatile __bit                   SSP2IE              __at(0x38CA);	// @ (0x719 * 8 + 2)
#define                                 SSP2IE_bit          _BIT_ACCESS(PIE3,2)
// PIR3<SSP2IF>
extern volatile __bit                   SSP2IF              __at(0x387A);	// @ (0x70F * 8 + 2)
#define                                 SSP2IF_bit          _BIT_ACCESS(PIR3,2)
// SSP2SSPPS<SSP2SSPPS0>
extern volatile __bit                   SSP2SSPPS0          __at(0xF650);	// @ (0x1ECA * 8 + 0)
#define                                 SSP2SSPPS0_bit      _BIT_ACCESS(SSP2SSPPS,0)
// SSP2SSPPS<SSP2SSPPS1>
extern volatile __bit                   SSP2SSPPS1          __at(0xF651);	// @ (0x1ECA * 8 + 1)
#define                                 SSP2SSPPS1_bit      _BIT_ACCESS(SSP2SSPPS,1)
// SSP2SSPPS<SSP2SSPPS2>
extern volatile __bit                   SSP2SSPPS2          __at(0xF652);	// @ (0x1ECA * 8 + 2)
#define                                 SSP2SSPPS2_bit      _BIT_ACCESS(SSP2SSPPS,2)
// SSP2SSPPS<SSP2SSPPS3>
extern volatile __bit                   SSP2SSPPS3          __at(0xF653);	// @ (0x1ECA * 8 + 3)
#define                                 SSP2SSPPS3_bit      _BIT_ACCESS(SSP2SSPPS,3)
// SSP2SSPPS<SSP2SSPPS4>
extern volatile __bit                   SSP2SSPPS4          __at(0xF654);	// @ (0x1ECA * 8 + 4)
#define                                 SSP2SSPPS4_bit      _BIT_ACCESS(SSP2SSPPS,4)
// SSP2SSPPS<SSP2SSPPS5>
extern volatile __bit                   SSP2SSPPS5          __at(0xF655);	// @ (0x1ECA * 8 + 5)
#define                                 SSP2SSPPS5_bit      _BIT_ACCESS(SSP2SSPPS,5)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// SSP2CON1<SSPEN2>
extern volatile __bit                   SSPEN2              __at(0xCD5);	// @ (0x19A * 8 + 5)
#define                                 SSPEN2_bit          _BIT_ACCESS(SSP2CON1,5)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// SSP2CON1<SSPM02>
extern volatile __bit                   SSPM02              __at(0xCD0);	// @ (0x19A * 8 + 0)
#define                                 SSPM02_bit          _BIT_ACCESS(SSP2CON1,0)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// SSP2CON1<SSPM12>
extern volatile __bit                   SSPM12              __at(0xCD1);	// @ (0x19A * 8 + 1)
#define                                 SSPM12_bit          _BIT_ACCESS(SSP2CON1,1)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// SSP2CON1<SSPM22>
extern volatile __bit                   SSPM22              __at(0xCD2);	// @ (0x19A * 8 + 2)
#define                                 SSPM22_bit          _BIT_ACCESS(SSP2CON1,2)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// SSP2CON1<SSPM32>
extern volatile __bit                   SSPM32              __at(0xCD3);	// @ (0x19A * 8 + 3)
#define                                 SSPM32_bit          _BIT_ACCESS(SSP2CON1,3)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// SSP2CON1<SSPOV2>
extern volatile __bit                   SSPOV2              __at(0xCD6);	// @ (0x19A * 8 + 6)
#define                                 SSPOV2_bit          _BIT_ACCESS(SSP2CON1,6)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// SSP2STAT<START2>
extern volatile __bit                   START2              __at(0xCCB);	// @ (0x199 * 8 + 3)
#define                                 START2_bit          _BIT_ACCESS(SSP2STAT,3)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x409F);	// @ (0x813 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// STKPTR<STKPTR0>
extern volatile __bit                   STKPTR0             __at(0xFF68);	// @ (0x1FED * 8 + 0)
#define                                 STKPTR0_bit         _BIT_ACCESS(STKPTR,0)
// STKPTR<STKPTR1>
extern volatile __bit                   STKPTR1             __at(0xFF69);	// @ (0x1FED * 8 + 1)
#define                                 STKPTR1_bit         _BIT_ACCESS(STKPTR,1)
// STKPTR<STKPTR2>
extern volatile __bit                   STKPTR2             __at(0xFF6A);	// @ (0x1FED * 8 + 2)
#define                                 STKPTR2_bit         _BIT_ACCESS(STKPTR,2)
// STKPTR<STKPTR3>
extern volatile __bit                   STKPTR3             __at(0xFF6B);	// @ (0x1FED * 8 + 3)
#define                                 STKPTR3_bit         _BIT_ACCESS(STKPTR,3)
// STKPTR<STKPTR4>
extern volatile __bit                   STKPTR4             __at(0xFF6C);	// @ (0x1FED * 8 + 4)
#define                                 STKPTR4_bit         _BIT_ACCESS(STKPTR,4)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x409E);	// @ (0x813 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// SSP2STAT<STOP2>
extern volatile __bit                   STOP2               __at(0xCCC);	// @ (0x199 * 8 + 4)
#define                                 STOP2_bit           _BIT_ACCESS(SSP2STAT,4)
// CWG1STR<STRA>
extern volatile __bit                   STRA                __at(0x30A0);	// @ (0x614 * 8 + 0)
#define                                 STRA_bit            _BIT_ACCESS(CWG1STR,0)
// CWG1STR<STRB>
extern volatile __bit                   STRB                __at(0x30A1);	// @ (0x614 * 8 + 1)
#define                                 STRB_bit            _BIT_ACCESS(CWG1STR,1)
// CWG1STR<STRC>
extern volatile __bit                   STRC                __at(0x30A2);	// @ (0x614 * 8 + 2)
#define                                 STRC_bit            _BIT_ACCESS(CWG1STR,2)
// CWG1STR<STRD>
extern volatile __bit                   STRD                __at(0x30A3);	// @ (0x614 * 8 + 3)
#define                                 STRD_bit            _BIT_ACCESS(CWG1STR,3)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x3CB7);	// @ (0x796 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0x2CF4);	// @ (0x59E * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0x2CFC);	// @ (0x59F * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0xF488);	// @ (0x1E91 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0xF489);	// @ (0x1E91 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0xF48A);	// @ (0x1E91 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0xF48B);	// @ (0x1E91 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CKIPPS<T0CKIPPS4>
extern volatile __bit                   T0CKIPPS4           __at(0xF48C);	// @ (0x1E91 * 8 + 4)
#define                                 T0CKIPPS4_bit       _BIT_ACCESS(T0CKIPPS,4)
// T0CKIPPS<T0CKIPPS5>
extern volatile __bit                   T0CKIPPS5           __at(0xF48D);	// @ (0x1E91 * 8 + 5)
#define                                 T0CKIPPS5_bit       _BIT_ACCESS(T0CKIPPS,5)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0x2CF8);	// @ (0x59F * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0x2CF9);	// @ (0x59F * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0x2CFA);	// @ (0x59F * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0x2CFB);	// @ (0x59F * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0x2CFD);	// @ (0x59F * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0x2CFE);	// @ (0x59F * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0x2CFF);	// @ (0x59F * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0x2CF7);	// @ (0x59E * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0x2CF5);	// @ (0x59E * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0x2CF0);	// @ (0x59E * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0x2CF1);	// @ (0x59E * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0x2CF2);	// @ (0x59E * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0x2CF3);	// @ (0x59E * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0x2CE8);	// @ (0x59D * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0x2CE9);	// @ (0x59D * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0x2CEA);	// @ (0x59D * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0x2CEB);	// @ (0x59D * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0x2CEC);	// @ (0x59D * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0x2CED);	// @ (0x59D * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0x2CEE);	// @ (0x59D * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0x2CEF);	// @ (0x59D * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T0CON1<T0PS0>
extern volatile __bit                   T0PS0               __at(0x2CF8);	// @ (0x59F * 8 + 0)
#define                                 T0PS0_bit           _BIT_ACCESS(T0CON1,0)
// T0CON1<T0PS1>
extern volatile __bit                   T0PS1               __at(0x2CF9);	// @ (0x59F * 8 + 1)
#define                                 T0PS1_bit           _BIT_ACCESS(T0CON1,1)
// T0CON1<T0PS2>
extern volatile __bit                   T0PS2               __at(0x2CFA);	// @ (0x59F * 8 + 2)
#define                                 T0PS2_bit           _BIT_ACCESS(T0CON1,2)
// T0CON1<T0PS3>
extern volatile __bit                   T0PS3               __at(0x2CFB);	// @ (0x59F * 8 + 3)
#define                                 T0PS3_bit           _BIT_ACCESS(T0CON1,3)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0xF490);	// @ (0x1E92 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0xF491);	// @ (0x1E92 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0xF492);	// @ (0x1E92 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0xF493);	// @ (0x1E92 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0xF494);	// @ (0x1E92 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CKIPPS<T1CKIPPS5>
extern volatile __bit                   T1CKIPPS5           __at(0xF495);	// @ (0x1E92 * 8 + 5)
#define                                 T1CKIPPS5_bit       _BIT_ACCESS(T1CKIPPS,5)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x107F);	// @ (0x20F * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x107E);	// @ (0x20F * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0xF498);	// @ (0x1E93 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0xF499);	// @ (0x1E93 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0xF49A);	// @ (0x1E93 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0xF49B);	// @ (0x1E93 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0xF49C);	// @ (0x1E93 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GPPS<T1GPPS5>
extern volatile __bit                   T1GPPS5             __at(0xF49D);	// @ (0x1E93 * 8 + 5)
#define                                 T1GPPS5_bit         _BIT_ACCESS(T1GPPS,5)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x107C);	// @ (0x20F * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x1080);	// @ (0x210 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x1081);	// @ (0x210 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x1082);	// @ (0x210 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x1083);	// @ (0x210 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GATE<T1GSS4>
extern volatile __bit                   T1GSS4              __at(0x1084);	// @ (0x210 * 8 + 4)
#define                                 T1GSS4_bit          _BIT_ACCESS(T1GATE,4)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x107D);	// @ (0x20F * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x107A);	// @ (0x20F * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x147E);	// @ (0x28F * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x1474);	// @ (0x28E * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x1475);	// @ (0x28E * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x1476);	// @ (0x28E * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x147D);	// @ (0x28F * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x1480);	// @ (0x290 * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x1481);	// @ (0x290 * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x1482);	// @ (0x290 * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x1483);	// @ (0x290 * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2INPPS<T2INPPS0>
extern volatile __bit                   T2INPPS0            __at(0xF4E0);	// @ (0x1E9C * 8 + 0)
#define                                 T2INPPS0_bit        _BIT_ACCESS(T2INPPS,0)
// T2INPPS<T2INPPS1>
extern volatile __bit                   T2INPPS1            __at(0xF4E1);	// @ (0x1E9C * 8 + 1)
#define                                 T2INPPS1_bit        _BIT_ACCESS(T2INPPS,1)
// T2INPPS<T2INPPS2>
extern volatile __bit                   T2INPPS2            __at(0xF4E2);	// @ (0x1E9C * 8 + 2)
#define                                 T2INPPS2_bit        _BIT_ACCESS(T2INPPS,2)
// T2INPPS<T2INPPS3>
extern volatile __bit                   T2INPPS3            __at(0xF4E3);	// @ (0x1E9C * 8 + 3)
#define                                 T2INPPS3_bit        _BIT_ACCESS(T2INPPS,3)
// T2INPPS<T2INPPS4>
extern volatile __bit                   T2INPPS4            __at(0xF4E4);	// @ (0x1E9C * 8 + 4)
#define                                 T2INPPS4_bit        _BIT_ACCESS(T2INPPS,4)
// T2INPPS<T2INPPS5>
extern volatile __bit                   T2INPPS5            __at(0xF4E5);	// @ (0x1E9C * 8 + 5)
#define                                 T2INPPS5_bit        _BIT_ACCESS(T2INPPS,5)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x1478);	// @ (0x28F * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x1479);	// @ (0x28F * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x147A);	// @ (0x28F * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x147B);	// @ (0x28F * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x147C);	// @ (0x28F * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x1477);	// @ (0x28E * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x147F);	// @ (0x28F * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x1488);	// @ (0x291 * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x1489);	// @ (0x291 * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x148A);	// @ (0x291 * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x148B);	// @ (0x291 * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0x2CE8);	// @ (0x59D * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0x2CE9);	// @ (0x59D * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0x2CEA);	// @ (0x59D * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0x2CEB);	// @ (0x59D * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0x2CEC);	// @ (0x59D * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0x2CED);	// @ (0x59D * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0x2CEE);	// @ (0x59D * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0x2CEF);	// @ (0x59D * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE0<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x38B5);	// @ (0x716 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x3865);	// @ (0x70C * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR0,5)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0x2CE0);	// @ (0x59C * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0x2CE1);	// @ (0x59C * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0x2CE2);	// @ (0x59C * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0x2CE3);	// @ (0x59C * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0x2CE4);	// @ (0x59C * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0x2CE5);	// @ (0x59C * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0x2CE6);	// @ (0x59C * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0x2CE7);	// @ (0x59C * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x3CB8);	// @ (0x797 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// TMR1L<TMR10>
extern volatile __bit                   TMR10               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 TMR10_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR11>
extern volatile __bit                   TMR11               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 TMR11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1H<TMR110>
extern volatile __bit                   TMR110              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR110_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR111>
extern volatile __bit                   TMR111              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR111_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR112>
extern volatile __bit                   TMR112              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR112_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR113>
extern volatile __bit                   TMR113              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR113_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR114>
extern volatile __bit                   TMR114              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR114_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR115>
extern volatile __bit                   TMR115              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR115_bit          _BIT_ACCESS(TMR1H,7)
// TMR1L<TMR12>
extern volatile __bit                   TMR12               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 TMR12_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR13>
extern volatile __bit                   TMR13               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 TMR13_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR14>
extern volatile __bit                   TMR14               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TMR14_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR15>
extern volatile __bit                   TMR15               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TMR15_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR16>
extern volatile __bit                   TMR16               __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 TMR16_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR17>
extern volatile __bit                   TMR17               __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 TMR17_bit           _BIT_ACCESS(TMR1L,7)
// TMR1H<TMR18>
extern volatile __bit                   TMR18               __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 TMR18_bit           _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR19>
extern volatile __bit                   TMR19               __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 TMR19_bit           _BIT_ACCESS(TMR1H,1)
// PIE5<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x38D8);	// @ (0x71B * 8 + 0)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR5,0)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE4<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x38D0);	// @ (0x71A * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x3880);	// @ (0x710 * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR4,0)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x1070);	// @ (0x20E * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE4<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x38D1);	// @ (0x71A * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x3881);	// @ (0x710 * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR4,1)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x1477);	// @ (0x28E * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// TOSH<TOSH0>
extern volatile __bit                   TOSH0               __at(0xFF78);	// @ (0x1FEF * 8 + 0)
#define                                 TOSH0_bit           _BIT_ACCESS(TOSH,0)
// TOSH<TOSH1>
extern volatile __bit                   TOSH1               __at(0xFF79);	// @ (0x1FEF * 8 + 1)
#define                                 TOSH1_bit           _BIT_ACCESS(TOSH,1)
// TOSH<TOSH2>
extern volatile __bit                   TOSH2               __at(0xFF7A);	// @ (0x1FEF * 8 + 2)
#define                                 TOSH2_bit           _BIT_ACCESS(TOSH,2)
// TOSH<TOSH3>
extern volatile __bit                   TOSH3               __at(0xFF7B);	// @ (0x1FEF * 8 + 3)
#define                                 TOSH3_bit           _BIT_ACCESS(TOSH,3)
// TOSH<TOSH4>
extern volatile __bit                   TOSH4               __at(0xFF7C);	// @ (0x1FEF * 8 + 4)
#define                                 TOSH4_bit           _BIT_ACCESS(TOSH,4)
// TOSH<TOSH5>
extern volatile __bit                   TOSH5               __at(0xFF7D);	// @ (0x1FEF * 8 + 5)
#define                                 TOSH5_bit           _BIT_ACCESS(TOSH,5)
// TOSH<TOSH6>
extern volatile __bit                   TOSH6               __at(0xFF7E);	// @ (0x1FEF * 8 + 6)
#define                                 TOSH6_bit           _BIT_ACCESS(TOSH,6)
// TOSH<TOSH7>
extern volatile __bit                   TOSH7               __at(0xFF7F);	// @ (0x1FEF * 8 + 7)
#define                                 TOSH7_bit           _BIT_ACCESS(TOSH,7)
// TOSL<TOSL0>
extern volatile __bit                   TOSL0               __at(0xFF70);	// @ (0x1FEE * 8 + 0)
#define                                 TOSL0_bit           _BIT_ACCESS(TOSL,0)
// TOSL<TOSL1>
extern volatile __bit                   TOSL1               __at(0xFF71);	// @ (0x1FEE * 8 + 1)
#define                                 TOSL1_bit           _BIT_ACCESS(TOSL,1)
// TOSL<TOSL2>
extern volatile __bit                   TOSL2               __at(0xFF72);	// @ (0x1FEE * 8 + 2)
#define                                 TOSL2_bit           _BIT_ACCESS(TOSL,2)
// TOSL<TOSL3>
extern volatile __bit                   TOSL3               __at(0xFF73);	// @ (0x1FEE * 8 + 3)
#define                                 TOSL3_bit           _BIT_ACCESS(TOSL,3)
// TOSL<TOSL4>
extern volatile __bit                   TOSL4               __at(0xFF74);	// @ (0x1FEE * 8 + 4)
#define                                 TOSL4_bit           _BIT_ACCESS(TOSL,4)
// TOSL<TOSL5>
extern volatile __bit                   TOSL5               __at(0xFF75);	// @ (0x1FEE * 8 + 5)
#define                                 TOSL5_bit           _BIT_ACCESS(TOSL,5)
// TOSL<TOSL6>
extern volatile __bit                   TOSL6               __at(0xFF76);	// @ (0x1FEE * 8 + 6)
#define                                 TOSL6_bit           _BIT_ACCESS(TOSL,6)
// TOSL<TOSL7>
extern volatile __bit                   TOSL7               __at(0xFF77);	// @ (0x1FEE * 8 + 7)
#define                                 TOSL7_bit           _BIT_ACCESS(TOSL,7)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x90);	// @ (0x12 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x91);	// @ (0x12 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x92);	// @ (0x12 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x93);	// @ (0x12 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x94);	// @ (0x12 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x96);	// @ (0x12 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x97);	// @ (0x12 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x98);	// @ (0x13 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x99);	// @ (0x13 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x9A);	// @ (0x13 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x9B);	// @ (0x13 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x9C);	// @ (0x13 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x9D);	// @ (0x13 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x9E);	// @ (0x13 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x9F);	// @ (0x13 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0xA0);	// @ (0x14 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0xA1);	// @ (0x14 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0xA2);	// @ (0x14 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0xA3);	// @ (0x14 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0xA4);	// @ (0x14 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0xA5);	// @ (0x14 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0xA6);	// @ (0x14 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0xA7);	// @ (0x14 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// TRISE<TRISE3>
extern volatile __bit                   TRISE3              __at(0xB3);	// @ (0x16 * 8 + 3)
#define                                 TRISE3_bit          _BIT_ACCESS(TRISE,3)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x4865);	// @ (0x90C * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x4864);	// @ (0x90C * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// TX1CKPPS<TX1CKPPS0>
extern volatile __bit                   TX1CKPPS0           __at(0xF660);	// @ (0x1ECC * 8 + 0)
#define                                 TX1CKPPS0_bit       _BIT_ACCESS(TX1CKPPS,0)
// TX1CKPPS<TX1CKPPS1>
extern volatile __bit                   TX1CKPPS1           __at(0xF661);	// @ (0x1ECC * 8 + 1)
#define                                 TX1CKPPS1_bit       _BIT_ACCESS(TX1CKPPS,1)
// TX1CKPPS<TX1CKPPS2>
extern volatile __bit                   TX1CKPPS2           __at(0xF662);	// @ (0x1ECC * 8 + 2)
#define                                 TX1CKPPS2_bit       _BIT_ACCESS(TX1CKPPS,2)
// TX1CKPPS<TX1CKPPS3>
extern volatile __bit                   TX1CKPPS3           __at(0xF663);	// @ (0x1ECC * 8 + 3)
#define                                 TX1CKPPS3_bit       _BIT_ACCESS(TX1CKPPS,3)
// TX1CKPPS<TX1CKPPS4>
extern volatile __bit                   TX1CKPPS4           __at(0xF664);	// @ (0x1ECC * 8 + 4)
#define                                 TX1CKPPS4_bit       _BIT_ACCESS(TX1CKPPS,4)
// TX1CKPPS<TX1CKPPS5>
extern volatile __bit                   TX1CKPPS5           __at(0xF665);	// @ (0x1ECC * 8 + 5)
#define                                 TX1CKPPS5_bit       _BIT_ACCESS(TX1CKPPS,5)
// PIE3<TX1IE>
extern volatile __bit                   TX1IE               __at(0x38CC);	// @ (0x719 * 8 + 4)
#define                                 TX1IE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<TX1IF>
extern volatile __bit                   TX1IF               __at(0x387C);	// @ (0x70F * 8 + 4)
#define                                 TX1IF_bit           _BIT_ACCESS(PIR3,4)
// TX2CKPPS<TX2CKPPS0>
extern volatile __bit                   TX2CKPPS0           __at(0xF670);	// @ (0x1ECE * 8 + 0)
#define                                 TX2CKPPS0_bit       _BIT_ACCESS(TX2CKPPS,0)
// TX2CKPPS<TX2CKPPS1>
extern volatile __bit                   TX2CKPPS1           __at(0xF671);	// @ (0x1ECE * 8 + 1)
#define                                 TX2CKPPS1_bit       _BIT_ACCESS(TX2CKPPS,1)
// TX2CKPPS<TX2CKPPS2>
extern volatile __bit                   TX2CKPPS2           __at(0xF672);	// @ (0x1ECE * 8 + 2)
#define                                 TX2CKPPS2_bit       _BIT_ACCESS(TX2CKPPS,2)
// TX2CKPPS<TX2CKPPS3>
extern volatile __bit                   TX2CKPPS3           __at(0xF673);	// @ (0x1ECE * 8 + 3)
#define                                 TX2CKPPS3_bit       _BIT_ACCESS(TX2CKPPS,3)
// TX2CKPPS<TX2CKPPS4>
extern volatile __bit                   TX2CKPPS4           __at(0xF674);	// @ (0x1ECE * 8 + 4)
#define                                 TX2CKPPS4_bit       _BIT_ACCESS(TX2CKPPS,4)
// TX2CKPPS<TX2CKPPS5>
extern volatile __bit                   TX2CKPPS5           __at(0xF675);	// @ (0x1ECE * 8 + 5)
#define                                 TX2CKPPS5_bit       _BIT_ACCESS(TX2CKPPS,5)
// PIE3<TX2IE>
extern volatile __bit                   TX2IE               __at(0x38CE);	// @ (0x719 * 8 + 6)
#define                                 TX2IE_bit           _BIT_ACCESS(PIE3,6)
// PIR3<TX2IF>
extern volatile __bit                   TX2IF               __at(0x387E);	// @ (0x70F * 8 + 6)
#define                                 TX2IF_bit           _BIT_ACCESS(PIR3,6)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// SSP2STAT<UA2>
extern volatile __bit                   UA2                 __at(0xCC9);	// @ (0x199 * 8 + 1)
#define                                 UA2_bit             _BIT_ACCESS(SSP2STAT,1)
// PMD4<UART1MD>
extern volatile __bit                   UART1MD             __at(0x3CD6);	// @ (0x79A * 8 + 6)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD4,6)
// PMD4<UART2MD>
extern volatile __bit                   UART2MD             __at(0x3CD7);	// @ (0x79A * 8 + 7)
#define                                 UART2MD_bit         _BIT_ACCESS(PMD4,7)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// SSP2CON1<WCOL2>
extern volatile __bit                   WCOL2               __at(0xCD7);	// @ (0x19A * 8 + 7)
#define                                 WCOL2_bit           _BIT_ACCESS(SSP2CON1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x406C);	// @ (0x80D * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x406D);	// @ (0x80D * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x406E);	// @ (0x80D * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x4063);	// @ (0x80C * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x4065);	// @ (0x80C * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTPSL<WDTPSCNT0>
extern volatile __bit                   WDTPSCNT0           __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 WDTPSCNT0_bit       _BIT_ACCESS(WDTPSL,0)
// WDTPSL<WDTPSCNT1>
extern volatile __bit                   WDTPSCNT1           __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 WDTPSCNT1_bit       _BIT_ACCESS(WDTPSL,1)
// WDTPSH<WDTPSCNT10>
extern volatile __bit                   WDTPSCNT10          __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 WDTPSCNT10_bit      _BIT_ACCESS(WDTPSH,2)
// WDTPSH<WDTPSCNT11>
extern volatile __bit                   WDTPSCNT11          __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 WDTPSCNT11_bit      _BIT_ACCESS(WDTPSH,3)
// WDTPSH<WDTPSCNT12>
extern volatile __bit                   WDTPSCNT12          __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 WDTPSCNT12_bit      _BIT_ACCESS(WDTPSH,4)
// WDTPSH<WDTPSCNT13>
extern volatile __bit                   WDTPSCNT13          __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 WDTPSCNT13_bit      _BIT_ACCESS(WDTPSH,5)
// WDTPSH<WDTPSCNT14>
extern volatile __bit                   WDTPSCNT14          __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 WDTPSCNT14_bit      _BIT_ACCESS(WDTPSH,6)
// WDTPSH<WDTPSCNT15>
extern volatile __bit                   WDTPSCNT15          __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 WDTPSCNT15_bit      _BIT_ACCESS(WDTPSH,7)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTPSL<WDTPSCNT2>
extern volatile __bit                   WDTPSCNT2           __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 WDTPSCNT2_bit       _BIT_ACCESS(WDTPSL,2)
// WDTPSL<WDTPSCNT3>
extern volatile __bit                   WDTPSCNT3           __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 WDTPSCNT3_bit       _BIT_ACCESS(WDTPSL,3)
// WDTPSL<WDTPSCNT4>
extern volatile __bit                   WDTPSCNT4           __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 WDTPSCNT4_bit       _BIT_ACCESS(WDTPSL,4)
// WDTPSL<WDTPSCNT5>
extern volatile __bit                   WDTPSCNT5           __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 WDTPSCNT5_bit       _BIT_ACCESS(WDTPSL,5)
// WDTPSL<WDTPSCNT6>
extern volatile __bit                   WDTPSCNT6           __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 WDTPSCNT6_bit       _BIT_ACCESS(WDTPSL,6)
// WDTPSL<WDTPSCNT7>
extern volatile __bit                   WDTPSCNT7           __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 WDTPSCNT7_bit       _BIT_ACCESS(WDTPSL,7)
// WDTPSH<WDTPSCNT8>
extern volatile __bit                   WDTPSCNT8           __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 WDTPSCNT8_bit       _BIT_ACCESS(WDTPSH,0)
// WDTPSH<WDTPSCNT9>
extern volatile __bit                   WDTPSCNT9           __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 WDTPSCNT9_bit       _BIT_ACCESS(WDTPSH,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0xF9C8);	// @ (0x1F39 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0xF9C9);	// @ (0x1F39 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0xF9CA);	// @ (0x1F39 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0xF9CB);	// @ (0x1F39 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0xF9CC);	// @ (0x1F39 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0xF9CD);	// @ (0x1F39 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUA<WPUA6>
extern volatile __bit                   WPUA6               __at(0xF9CE);	// @ (0x1F39 * 8 + 6)
#define                                 WPUA6_bit           _BIT_ACCESS(WPUA,6)
// WPUA<WPUA7>
extern volatile __bit                   WPUA7               __at(0xF9CF);	// @ (0x1F39 * 8 + 7)
#define                                 WPUA7_bit           _BIT_ACCESS(WPUA,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0xFA20);	// @ (0x1F44 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0xFA21);	// @ (0x1F44 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0xFA22);	// @ (0x1F44 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0xFA23);	// @ (0x1F44 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0xFA24);	// @ (0x1F44 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0xFA25);	// @ (0x1F44 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0xFA26);	// @ (0x1F44 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0xFA27);	// @ (0x1F44 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0xFA78);	// @ (0x1F4F * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0xFA79);	// @ (0x1F4F * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0xFA7A);	// @ (0x1F4F * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0xFA7B);	// @ (0x1F4F * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0xFA7C);	// @ (0x1F4F * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0xFA7D);	// @ (0x1F4F * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0xFA7E);	// @ (0x1F4F * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0xFA7F);	// @ (0x1F4F * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// WPUE<WPUE3>
extern volatile __bit                   WPUE3               __at(0xFB2B);	// @ (0x1F65 * 8 + 3)
#define                                 WPUE3_bit           _BIT_ACCESS(WPUE,3)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0x40F1);	// @ (0x81E * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0x40F2);	// @ (0x81E * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x40F3);	// @ (0x81E * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// PIE2<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x38C6);	// @ (0x718 * 8 + 6)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE2,6)
// PIR2<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x3876);	// @ (0x70E * 8 + 6)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR2,6)
// ZCDCON<ZCDINTN>
extern volatile __bit                   ZCDINTN             __at(0x48F8);	// @ (0x91F * 8 + 0)
#define                                 ZCDINTN_bit         _BIT_ACCESS(ZCDCON,0)
// ZCDCON<ZCDINTP>
extern volatile __bit                   ZCDINTP             __at(0x48F9);	// @ (0x91F * 8 + 1)
#define                                 ZCDINTP_bit         _BIT_ACCESS(ZCDCON,1)
// PMD2<ZCDMD>
extern volatile __bit                   ZCDMD               __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 ZCDMD_bit           _BIT_ACCESS(PMD2,0)
// ZCDCON<ZCDOUT>
extern volatile __bit                   ZCDOUT              __at(0x48FD);	// @ (0x91F * 8 + 5)
#define                                 ZCDOUT_bit          _BIT_ACCESS(ZCDCON,5)
// ZCDCON<ZCDPOL>
extern volatile __bit                   ZCDPOL              __at(0x48FC);	// @ (0x91F * 8 + 4)
#define                                 ZCDPOL_bit          _BIT_ACCESS(ZCDCON,4)
// ZCDCON<ZCDSEN>
extern volatile __bit                   ZCDSEN              __at(0x48FF);	// @ (0x91F * 8 + 7)
#define                                 ZCDSEN_bit          _BIT_ACCESS(ZCDCON,7)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<nADDRESS2>
extern volatile __bit                   nADDRESS2           __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 nADDRESS2_bit       _BIT_ACCESS(SSP2STAT,5)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// PCON1<nMEMV>
extern volatile __bit                   nMEMV               __at(0x40A1);	// @ (0x814 * 8 + 1)
#define                                 nMEMV_bit           _BIT_ACCESS(PCON1,1)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x409A);	// @ (0x813 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x409B);	// @ (0x813 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x409C);	// @ (0x813 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// T1CON<nSYNC>
extern volatile __bit                   nSYNC               __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 nSYNC_bit           _BIT_ACCESS(T1CON,2)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x409D);	// @ (0x813 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<nWRITE2>
extern volatile __bit                   nWRITE2             __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 nWRITE2_bit         _BIT_ACCESS(SSP2STAT,2)

#endif // _PIC16LF15355_H_
