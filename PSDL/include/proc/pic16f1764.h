// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC16F1764_H_
#define _PIC16F1764_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC16F1764
 */
#ifndef _XC_H_
#warning Header file pic16f1764.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :5;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x5
#define _BSR_BSR_LENGTH                                     0x5
#define _BSR_BSR_MASK                                       0x1F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCIF                  :1;
        unsigned INTF                   :1;
        unsigned TMR0IF                 :1;
        unsigned IOCIE                  :1;
        unsigned INTE                   :1;
        unsigned TMR0IE                 :1;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned T0IF                   :1;
        unsigned                        :2;
        unsigned T0IE                   :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_IOCIF_POSN                                  0x0
#define _INTCON_IOCIF_POSITION                              0x0
#define _INTCON_IOCIF_SIZE                                  0x1
#define _INTCON_IOCIF_LENGTH                                0x1
#define _INTCON_IOCIF_MASK                                  0x1
#define _INTCON_INTF_POSN                                   0x1
#define _INTCON_INTF_POSITION                               0x1
#define _INTCON_INTF_SIZE                                   0x1
#define _INTCON_INTF_LENGTH                                 0x1
#define _INTCON_INTF_MASK                                   0x2
#define _INTCON_TMR0IF_POSN                                 0x2
#define _INTCON_TMR0IF_POSITION                             0x2
#define _INTCON_TMR0IF_SIZE                                 0x1
#define _INTCON_TMR0IF_LENGTH                               0x1
#define _INTCON_TMR0IF_MASK                                 0x4
#define _INTCON_IOCIE_POSN                                  0x3
#define _INTCON_IOCIE_POSITION                              0x3
#define _INTCON_IOCIE_SIZE                                  0x1
#define _INTCON_IOCIE_LENGTH                                0x1
#define _INTCON_IOCIE_MASK                                  0x8
#define _INTCON_INTE_POSN                                   0x4
#define _INTCON_INTE_POSITION                               0x4
#define _INTCON_INTE_SIZE                                   0x1
#define _INTCON_INTE_LENGTH                                 0x1
#define _INTCON_INTE_MASK                                   0x10
#define _INTCON_TMR0IE_POSN                                 0x5
#define _INTCON_TMR0IE_POSITION                             0x5
#define _INTCON_TMR0IE_SIZE                                 0x1
#define _INTCON_TMR0IE_LENGTH                               0x1
#define _INTCON_TMR0IE_MASK                                 0x20
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80
#define _INTCON_T0IF_POSN                                   0x2
#define _INTCON_T0IF_POSITION                               0x2
#define _INTCON_T0IF_SIZE                                   0x1
#define _INTCON_T0IF_LENGTH                                 0x1
#define _INTCON_T0IF_MASK                                   0x4
#define _INTCON_T0IE_POSN                                   0x5
#define _INTCON_T0IE_POSITION                               0x5
#define _INTCON_T0IE_SIZE                                   0x1
#define _INTCON_T0IE_LENGTH                                 0x1
#define _INTCON_T0IE_MASK                                   0x20

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
    };
    struct {
        unsigned RC                     :6;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC_POSN                                      0x0
#define _PORTC_RC_POSITION                                  0x0
#define _PORTC_RC_SIZE                                      0x6
#define _PORTC_RC_LENGTH                                    0x6
#define _PORTC_RC_MASK                                      0x3F

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x011);
#ifndef _LIB_BUILD
asm("PIR1 equ 011h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned CCP1IF                 :1;
        unsigned SSP1IF                 :1;
        unsigned TXIF                   :1;
        unsigned RCIF                   :1;
        unsigned ADIF                   :1;
        unsigned TMR1GIF                :1;
    };
    struct {
        unsigned                        :2;
        unsigned CCPIF                  :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x011);
// bitfield macros
#define _PIR1_TMR1IF_POSN                                   0x0
#define _PIR1_TMR1IF_POSITION                               0x0
#define _PIR1_TMR1IF_SIZE                                   0x1
#define _PIR1_TMR1IF_LENGTH                                 0x1
#define _PIR1_TMR1IF_MASK                                   0x1
#define _PIR1_TMR2IF_POSN                                   0x1
#define _PIR1_TMR2IF_POSITION                               0x1
#define _PIR1_TMR2IF_SIZE                                   0x1
#define _PIR1_TMR2IF_LENGTH                                 0x1
#define _PIR1_TMR2IF_MASK                                   0x2
#define _PIR1_CCP1IF_POSN                                   0x2
#define _PIR1_CCP1IF_POSITION                               0x2
#define _PIR1_CCP1IF_SIZE                                   0x1
#define _PIR1_CCP1IF_LENGTH                                 0x1
#define _PIR1_CCP1IF_MASK                                   0x4
#define _PIR1_SSP1IF_POSN                                   0x3
#define _PIR1_SSP1IF_POSITION                               0x3
#define _PIR1_SSP1IF_SIZE                                   0x1
#define _PIR1_SSP1IF_LENGTH                                 0x1
#define _PIR1_SSP1IF_MASK                                   0x8
#define _PIR1_TXIF_POSN                                     0x4
#define _PIR1_TXIF_POSITION                                 0x4
#define _PIR1_TXIF_SIZE                                     0x1
#define _PIR1_TXIF_LENGTH                                   0x1
#define _PIR1_TXIF_MASK                                     0x10
#define _PIR1_RCIF_POSN                                     0x5
#define _PIR1_RCIF_POSITION                                 0x5
#define _PIR1_RCIF_SIZE                                     0x1
#define _PIR1_RCIF_LENGTH                                   0x1
#define _PIR1_RCIF_MASK                                     0x20
#define _PIR1_ADIF_POSN                                     0x6
#define _PIR1_ADIF_POSITION                                 0x6
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x40
#define _PIR1_TMR1GIF_POSN                                  0x7
#define _PIR1_TMR1GIF_POSITION                              0x7
#define _PIR1_TMR1GIF_SIZE                                  0x1
#define _PIR1_TMR1GIF_LENGTH                                0x1
#define _PIR1_TMR1GIF_MASK                                  0x80
#define _PIR1_CCPIF_POSN                                    0x2
#define _PIR1_CCPIF_POSITION                                0x2
#define _PIR1_CCPIF_SIZE                                    0x1
#define _PIR1_CCPIF_LENGTH                                  0x1
#define _PIR1_CCPIF_MASK                                    0x4

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x012);
#ifndef _LIB_BUILD
asm("PIR2 equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned BCL1IF                 :1;
        unsigned                        :1;
        unsigned C1IF                   :1;
        unsigned C2IF                   :1;
        unsigned OSFIF                  :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x012);
// bitfield macros
#define _PIR2_BCL1IF_POSN                                   0x3
#define _PIR2_BCL1IF_POSITION                               0x3
#define _PIR2_BCL1IF_SIZE                                   0x1
#define _PIR2_BCL1IF_LENGTH                                 0x1
#define _PIR2_BCL1IF_MASK                                   0x8
#define _PIR2_C1IF_POSN                                     0x5
#define _PIR2_C1IF_POSITION                                 0x5
#define _PIR2_C1IF_SIZE                                     0x1
#define _PIR2_C1IF_LENGTH                                   0x1
#define _PIR2_C1IF_MASK                                     0x20
#define _PIR2_C2IF_POSN                                     0x6
#define _PIR2_C2IF_POSITION                                 0x6
#define _PIR2_C2IF_SIZE                                     0x1
#define _PIR2_C2IF_LENGTH                                   0x1
#define _PIR2_C2IF_MASK                                     0x40
#define _PIR2_OSFIF_POSN                                    0x7
#define _PIR2_OSFIF_POSITION                                0x7
#define _PIR2_OSFIF_SIZE                                    0x1
#define _PIR2_OSFIF_LENGTH                                  0x1
#define _PIR2_OSFIF_MASK                                    0x80

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x013);
#ifndef _LIB_BUILD
asm("PIR3 equ 013h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned                        :1;
        unsigned ZCDIF                  :1;
        unsigned COG1IF                 :1;
        unsigned PWM5IF                 :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x013);
// bitfield macros
#define _PIR3_CLC1IF_POSN                                   0x0
#define _PIR3_CLC1IF_POSITION                               0x0
#define _PIR3_CLC1IF_SIZE                                   0x1
#define _PIR3_CLC1IF_LENGTH                                 0x1
#define _PIR3_CLC1IF_MASK                                   0x1
#define _PIR3_CLC2IF_POSN                                   0x1
#define _PIR3_CLC2IF_POSITION                               0x1
#define _PIR3_CLC2IF_SIZE                                   0x1
#define _PIR3_CLC2IF_LENGTH                                 0x1
#define _PIR3_CLC2IF_MASK                                   0x2
#define _PIR3_CLC3IF_POSN                                   0x2
#define _PIR3_CLC3IF_POSITION                               0x2
#define _PIR3_CLC3IF_SIZE                                   0x1
#define _PIR3_CLC3IF_LENGTH                                 0x1
#define _PIR3_CLC3IF_MASK                                   0x4
#define _PIR3_ZCDIF_POSN                                    0x4
#define _PIR3_ZCDIF_POSITION                                0x4
#define _PIR3_ZCDIF_SIZE                                    0x1
#define _PIR3_ZCDIF_LENGTH                                  0x1
#define _PIR3_ZCDIF_MASK                                    0x10
#define _PIR3_COG1IF_POSN                                   0x5
#define _PIR3_COG1IF_POSITION                               0x5
#define _PIR3_COG1IF_SIZE                                   0x1
#define _PIR3_COG1IF_LENGTH                                 0x1
#define _PIR3_COG1IF_MASK                                   0x20
#define _PIR3_PWM5IF_POSN                                   0x6
#define _PIR3_PWM5IF_POSITION                               0x6
#define _PIR3_PWM5IF_SIZE                                   0x1
#define _PIR3_PWM5IF_LENGTH                                 0x1
#define _PIR3_PWM5IF_MASK                                   0x40

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x014);
#ifndef _LIB_BUILD
asm("PIR4 equ 014h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IF                 :1;
        unsigned TMR6IF                 :1;
        unsigned TMR3IF                 :1;
        unsigned TMR3GIF                :1;
        unsigned TMR5IF                 :1;
        unsigned TMR5GIF                :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x014);
// bitfield macros
#define _PIR4_TMR4IF_POSN                                   0x0
#define _PIR4_TMR4IF_POSITION                               0x0
#define _PIR4_TMR4IF_SIZE                                   0x1
#define _PIR4_TMR4IF_LENGTH                                 0x1
#define _PIR4_TMR4IF_MASK                                   0x1
#define _PIR4_TMR6IF_POSN                                   0x1
#define _PIR4_TMR6IF_POSITION                               0x1
#define _PIR4_TMR6IF_SIZE                                   0x1
#define _PIR4_TMR6IF_LENGTH                                 0x1
#define _PIR4_TMR6IF_MASK                                   0x2
#define _PIR4_TMR3IF_POSN                                   0x2
#define _PIR4_TMR3IF_POSITION                               0x2
#define _PIR4_TMR3IF_SIZE                                   0x1
#define _PIR4_TMR3IF_LENGTH                                 0x1
#define _PIR4_TMR3IF_MASK                                   0x4
#define _PIR4_TMR3GIF_POSN                                  0x3
#define _PIR4_TMR3GIF_POSITION                              0x3
#define _PIR4_TMR3GIF_SIZE                                  0x1
#define _PIR4_TMR3GIF_LENGTH                                0x1
#define _PIR4_TMR3GIF_MASK                                  0x8
#define _PIR4_TMR5IF_POSN                                   0x4
#define _PIR4_TMR5IF_POSITION                               0x4
#define _PIR4_TMR5IF_SIZE                                   0x1
#define _PIR4_TMR5IF_LENGTH                                 0x1
#define _PIR4_TMR5IF_MASK                                   0x10
#define _PIR4_TMR5GIF_POSN                                  0x5
#define _PIR4_TMR5GIF_POSITION                              0x5
#define _PIR4_TMR5GIF_SIZE                                  0x1
#define _PIR4_TMR5GIF_LENGTH                                0x1
#define _PIR4_TMR5GIF_MASK                                  0x20

// Register: TMR0
#define TMR0 TMR0
extern volatile unsigned char           TMR0                __at(0x015);
#ifndef _LIB_BUILD
asm("TMR0 equ 015h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0                   :8;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x015);
// bitfield macros
#define _TMR0_TMR0_POSN                                     0x0
#define _TMR0_TMR0_POSITION                                 0x0
#define _TMR0_TMR0_SIZE                                     0x8
#define _TMR0_TMR0_LENGTH                                   0x8
#define _TMR0_TMR0_MASK                                     0xFF

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x016);
#ifndef _LIB_BUILD
asm("TMR1 equ 016h");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x016);
#ifndef _LIB_BUILD
asm("TMR1L equ 016h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x016);
// bitfield macros
#define _TMR1L_TMR_POSN                                     0x0
#define _TMR1L_TMR_POSITION                                 0x0
#define _TMR1L_TMR_SIZE                                     0x8
#define _TMR1L_TMR_LENGTH                                   0x8
#define _TMR1L_TMR_MASK                                     0xFF

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x017);
#ifndef _LIB_BUILD
asm("TMR1H equ 017h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x017);
// bitfield macros
#define _TMR1H_TMR_POSN                                     0x0
#define _TMR1H_TMR_POSITION                                 0x0
#define _TMR1H_TMR_SIZE                                     0x8
#define _TMR1H_TMR_LENGTH                                   0x8
#define _TMR1H_TMR_MASK                                     0xFF

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x018);
#ifndef _LIB_BUILD
asm("T1CON equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned                        :1;
        unsigned nSYNC                  :1;
        unsigned OSCEN                  :1;
        unsigned CKPS                   :2;
        unsigned CS                     :2;
    };
    struct {
        unsigned TMRON                  :1;
        unsigned                        :1;
        unsigned SYNC                   :1;
        unsigned SOSCEN                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned                        :1;
        unsigned nT1SYNC                :1;
        unsigned T1OSCEN                :1;
        unsigned                        :2;
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
    };
    struct {
        unsigned T1ON                   :1;
        unsigned                        :3;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
        unsigned TMR1CS0                :1;
        unsigned TMR1CS1                :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x018);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_OSCEN_POSN                                   0x3
#define _T1CON_OSCEN_POSITION                               0x3
#define _T1CON_OSCEN_SIZE                                   0x1
#define _T1CON_OSCEN_LENGTH                                 0x1
#define _T1CON_OSCEN_MASK                                   0x8
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_CS_POSN                                      0x6
#define _T1CON_CS_POSITION                                  0x6
#define _T1CON_CS_SIZE                                      0x2
#define _T1CON_CS_LENGTH                                    0x2
#define _T1CON_CS_MASK                                      0xC0
#define _T1CON_TMRON_POSN                                   0x0
#define _T1CON_TMRON_POSITION                               0x0
#define _T1CON_TMRON_SIZE                                   0x1
#define _T1CON_TMRON_LENGTH                                 0x1
#define _T1CON_TMRON_MASK                                   0x1
#define _T1CON_SYNC_POSN                                    0x2
#define _T1CON_SYNC_POSITION                                0x2
#define _T1CON_SYNC_SIZE                                    0x1
#define _T1CON_SYNC_LENGTH                                  0x1
#define _T1CON_SYNC_MASK                                    0x4
#define _T1CON_SOSCEN_POSN                                  0x3
#define _T1CON_SOSCEN_POSITION                              0x3
#define _T1CON_SOSCEN_SIZE                                  0x1
#define _T1CON_SOSCEN_LENGTH                                0x1
#define _T1CON_SOSCEN_MASK                                  0x8
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_CS0_POSN                                     0x6
#define _T1CON_CS0_POSITION                                 0x6
#define _T1CON_CS0_SIZE                                     0x1
#define _T1CON_CS0_LENGTH                                   0x1
#define _T1CON_CS0_MASK                                     0x40
#define _T1CON_CS1_POSN                                     0x7
#define _T1CON_CS1_POSITION                                 0x7
#define _T1CON_CS1_SIZE                                     0x1
#define _T1CON_CS1_LENGTH                                   0x1
#define _T1CON_CS1_MASK                                     0x80
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1OSCEN_POSN                                 0x3
#define _T1CON_T1OSCEN_POSITION                             0x3
#define _T1CON_T1OSCEN_SIZE                                 0x1
#define _T1CON_T1OSCEN_LENGTH                               0x1
#define _T1CON_T1OSCEN_MASK                                 0x8
#define _T1CON_T1CS0_POSN                                   0x6
#define _T1CON_T1CS0_POSITION                               0x6
#define _T1CON_T1CS0_SIZE                                   0x1
#define _T1CON_T1CS0_LENGTH                                 0x1
#define _T1CON_T1CS0_MASK                                   0x40
#define _T1CON_T1CS1_POSN                                   0x7
#define _T1CON_T1CS1_POSITION                               0x7
#define _T1CON_T1CS1_SIZE                                   0x1
#define _T1CON_T1CS1_LENGTH                                 0x1
#define _T1CON_T1CS1_MASK                                   0x80
#define _T1CON_T1ON_POSN                                    0x0
#define _T1CON_T1ON_POSITION                                0x0
#define _T1CON_T1ON_SIZE                                    0x1
#define _T1CON_T1ON_LENGTH                                  0x1
#define _T1CON_T1ON_MASK                                    0x1
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_TMR1CS0_POSN                                 0x6
#define _T1CON_TMR1CS0_POSITION                             0x6
#define _T1CON_TMR1CS0_SIZE                                 0x1
#define _T1CON_TMR1CS0_LENGTH                               0x1
#define _T1CON_TMR1CS0_MASK                                 0x40
#define _T1CON_TMR1CS1_POSN                                 0x7
#define _T1CON_TMR1CS1_POSITION                             0x7
#define _T1CON_TMR1CS1_SIZE                                 0x1
#define _T1CON_TMR1CS1_LENGTH                               0x1
#define _T1CON_TMR1CS1_MASK                                 0x80

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x019);
#ifndef _LIB_BUILD
asm("T1GCON equ 019h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned                        :5;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned TMR1GE                 :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x019);
// bitfield macros
#define _T1GCON_GSS_POSN                                    0x0
#define _T1GCON_GSS_POSITION                                0x0
#define _T1GCON_GSS_SIZE                                    0x2
#define _T1GCON_GSS_LENGTH                                  0x2
#define _T1GCON_GSS_MASK                                    0x3
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_GSS0_POSN                                   0x0
#define _T1GCON_GSS0_POSITION                               0x0
#define _T1GCON_GSS0_SIZE                                   0x1
#define _T1GCON_GSS0_LENGTH                                 0x1
#define _T1GCON_GSS0_MASK                                   0x1
#define _T1GCON_GSS1_POSN                                   0x1
#define _T1GCON_GSS1_POSITION                               0x1
#define _T1GCON_GSS1_SIZE                                   0x1
#define _T1GCON_GSS1_LENGTH                                 0x1
#define _T1GCON_GSS1_MASK                                   0x2
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_TMR1GE_POSN                                 0x7
#define _T1GCON_TMR1GE_POSITION                             0x7
#define _T1GCON_TMR1GE_SIZE                                 0x1
#define _T1GCON_TMR1GE_LENGTH                               0x1
#define _T1GCON_TMR1GE_MASK                                 0x80
#define _T1GCON_T1GSS0_POSN                                 0x0
#define _T1GCON_T1GSS0_POSITION                             0x0
#define _T1GCON_T1GSS0_SIZE                                 0x1
#define _T1GCON_T1GSS0_LENGTH                               0x1
#define _T1GCON_T1GSS0_MASK                                 0x1
#define _T1GCON_T1GSS1_POSN                                 0x1
#define _T1GCON_T1GSS1_POSITION                             0x1
#define _T1GCON_T1GSS1_SIZE                                 0x1
#define _T1GCON_T1GSS1_LENGTH                               0x1
#define _T1GCON_T1GSS1_MASK                                 0x2

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x01A);
#ifndef _LIB_BUILD
asm("T2TMR equ 01Ah");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x01A);
#ifndef _LIB_BUILD
asm("TMR2 equ 01Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x01A);
// bitfield macros
#define _T2TMR_TMR_POSN                                     0x0
#define _T2TMR_TMR_POSITION                                 0x0
#define _T2TMR_TMR_SIZE                                     0x8
#define _T2TMR_TMR_LENGTH                                   0x8
#define _T2TMR_TMR_MASK                                     0xFF
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x01A);
// bitfield macros
#define _TMR2_TMR_POSN                                      0x0
#define _TMR2_TMR_POSITION                                  0x0
#define _TMR2_TMR_SIZE                                      0x8
#define _TMR2_TMR_LENGTH                                    0x8
#define _TMR2_TMR_MASK                                      0xFF
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x01B);
#ifndef _LIB_BUILD
asm("T2PR equ 01Bh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x01B);
#ifndef _LIB_BUILD
asm("PR2 equ 01Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T2PR                   :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x01B);
// bitfield macros
#define _T2PR_PR_POSN                                       0x0
#define _T2PR_PR_POSITION                                   0x0
#define _T2PR_PR_SIZE                                       0x8
#define _T2PR_PR_LENGTH                                     0x8
#define _T2PR_PR_MASK                                       0xFF
#define _T2PR_T2PR_POSN                                     0x0
#define _T2PR_T2PR_POSITION                                 0x0
#define _T2PR_T2PR_SIZE                                     0x8
#define _T2PR_T2PR_LENGTH                                   0x8
#define _T2PR_T2PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T2PR                   :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x01B);
// bitfield macros
#define _PR2_PR_POSN                                        0x0
#define _PR2_PR_POSITION                                    0x0
#define _PR2_PR_SIZE                                        0x8
#define _PR2_PR_LENGTH                                      0x8
#define _PR2_PR_MASK                                        0xFF
#define _PR2_T2PR_POSN                                      0x0
#define _PR2_T2PR_POSITION                                  0x0
#define _PR2_T2PR_SIZE                                      0x8
#define _PR2_T2PR_LENGTH                                    0x8
#define _PR2_T2PR_MASK                                      0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x01C);
#ifndef _LIB_BUILD
asm("T2CON equ 01Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x01C);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x01D);
#ifndef _LIB_BUILD
asm("T2HLT equ 01Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x01D);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x01E);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 01Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x01E);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x01F);
#ifndef _LIB_BUILD
asm("T2RST equ 01Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T2RSEL                 :4;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x01F);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x4
#define _T2RST_RSEL_LENGTH                                  0x4
#define _T2RST_RSEL_MASK                                    0xF
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x4
#define _T2RST_T2RSEL_LENGTH                                0x4
#define _T2RST_T2RSEL_MASK                                  0xF
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x08C);
#ifndef _LIB_BUILD
asm("TRISA equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned                        :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x08C);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x08E);
#ifndef _LIB_BUILD
asm("TRISC equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x08E);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x091);
#ifndef _LIB_BUILD
asm("PIE1 equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned CCP1IE                 :1;
        unsigned SSP1IE                 :1;
        unsigned TXIE                   :1;
        unsigned RCIE                   :1;
        unsigned ADIE                   :1;
        unsigned TMR1GIE                :1;
    };
    struct {
        unsigned                        :2;
        unsigned CCPIE                  :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x091);
// bitfield macros
#define _PIE1_TMR1IE_POSN                                   0x0
#define _PIE1_TMR1IE_POSITION                               0x0
#define _PIE1_TMR1IE_SIZE                                   0x1
#define _PIE1_TMR1IE_LENGTH                                 0x1
#define _PIE1_TMR1IE_MASK                                   0x1
#define _PIE1_TMR2IE_POSN                                   0x1
#define _PIE1_TMR2IE_POSITION                               0x1
#define _PIE1_TMR2IE_SIZE                                   0x1
#define _PIE1_TMR2IE_LENGTH                                 0x1
#define _PIE1_TMR2IE_MASK                                   0x2
#define _PIE1_CCP1IE_POSN                                   0x2
#define _PIE1_CCP1IE_POSITION                               0x2
#define _PIE1_CCP1IE_SIZE                                   0x1
#define _PIE1_CCP1IE_LENGTH                                 0x1
#define _PIE1_CCP1IE_MASK                                   0x4
#define _PIE1_SSP1IE_POSN                                   0x3
#define _PIE1_SSP1IE_POSITION                               0x3
#define _PIE1_SSP1IE_SIZE                                   0x1
#define _PIE1_SSP1IE_LENGTH                                 0x1
#define _PIE1_SSP1IE_MASK                                   0x8
#define _PIE1_TXIE_POSN                                     0x4
#define _PIE1_TXIE_POSITION                                 0x4
#define _PIE1_TXIE_SIZE                                     0x1
#define _PIE1_TXIE_LENGTH                                   0x1
#define _PIE1_TXIE_MASK                                     0x10
#define _PIE1_RCIE_POSN                                     0x5
#define _PIE1_RCIE_POSITION                                 0x5
#define _PIE1_RCIE_SIZE                                     0x1
#define _PIE1_RCIE_LENGTH                                   0x1
#define _PIE1_RCIE_MASK                                     0x20
#define _PIE1_ADIE_POSN                                     0x6
#define _PIE1_ADIE_POSITION                                 0x6
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x40
#define _PIE1_TMR1GIE_POSN                                  0x7
#define _PIE1_TMR1GIE_POSITION                              0x7
#define _PIE1_TMR1GIE_SIZE                                  0x1
#define _PIE1_TMR1GIE_LENGTH                                0x1
#define _PIE1_TMR1GIE_MASK                                  0x80
#define _PIE1_CCPIE_POSN                                    0x2
#define _PIE1_CCPIE_POSITION                                0x2
#define _PIE1_CCPIE_SIZE                                    0x1
#define _PIE1_CCPIE_LENGTH                                  0x1
#define _PIE1_CCPIE_MASK                                    0x4

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x092);
#ifndef _LIB_BUILD
asm("PIE2 equ 092h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned BCL1IE                 :1;
        unsigned                        :1;
        unsigned C1IE                   :1;
        unsigned C2IE                   :1;
        unsigned OSFIE                  :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x092);
// bitfield macros
#define _PIE2_BCL1IE_POSN                                   0x3
#define _PIE2_BCL1IE_POSITION                               0x3
#define _PIE2_BCL1IE_SIZE                                   0x1
#define _PIE2_BCL1IE_LENGTH                                 0x1
#define _PIE2_BCL1IE_MASK                                   0x8
#define _PIE2_C1IE_POSN                                     0x5
#define _PIE2_C1IE_POSITION                                 0x5
#define _PIE2_C1IE_SIZE                                     0x1
#define _PIE2_C1IE_LENGTH                                   0x1
#define _PIE2_C1IE_MASK                                     0x20
#define _PIE2_C2IE_POSN                                     0x6
#define _PIE2_C2IE_POSITION                                 0x6
#define _PIE2_C2IE_SIZE                                     0x1
#define _PIE2_C2IE_LENGTH                                   0x1
#define _PIE2_C2IE_MASK                                     0x40
#define _PIE2_OSFIE_POSN                                    0x7
#define _PIE2_OSFIE_POSITION                                0x7
#define _PIE2_OSFIE_SIZE                                    0x1
#define _PIE2_OSFIE_LENGTH                                  0x1
#define _PIE2_OSFIE_MASK                                    0x80

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x093);
#ifndef _LIB_BUILD
asm("PIE3 equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned                        :1;
        unsigned ZCDIE                  :1;
        unsigned COGIE                  :1;
        unsigned PWM5IE                 :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x093);
// bitfield macros
#define _PIE3_CLC1IE_POSN                                   0x0
#define _PIE3_CLC1IE_POSITION                               0x0
#define _PIE3_CLC1IE_SIZE                                   0x1
#define _PIE3_CLC1IE_LENGTH                                 0x1
#define _PIE3_CLC1IE_MASK                                   0x1
#define _PIE3_CLC2IE_POSN                                   0x1
#define _PIE3_CLC2IE_POSITION                               0x1
#define _PIE3_CLC2IE_SIZE                                   0x1
#define _PIE3_CLC2IE_LENGTH                                 0x1
#define _PIE3_CLC2IE_MASK                                   0x2
#define _PIE3_CLC3IE_POSN                                   0x2
#define _PIE3_CLC3IE_POSITION                               0x2
#define _PIE3_CLC3IE_SIZE                                   0x1
#define _PIE3_CLC3IE_LENGTH                                 0x1
#define _PIE3_CLC3IE_MASK                                   0x4
#define _PIE3_ZCDIE_POSN                                    0x4
#define _PIE3_ZCDIE_POSITION                                0x4
#define _PIE3_ZCDIE_SIZE                                    0x1
#define _PIE3_ZCDIE_LENGTH                                  0x1
#define _PIE3_ZCDIE_MASK                                    0x10
#define _PIE3_COGIE_POSN                                    0x5
#define _PIE3_COGIE_POSITION                                0x5
#define _PIE3_COGIE_SIZE                                    0x1
#define _PIE3_COGIE_LENGTH                                  0x1
#define _PIE3_COGIE_MASK                                    0x20
#define _PIE3_PWM5IE_POSN                                   0x6
#define _PIE3_PWM5IE_POSITION                               0x6
#define _PIE3_PWM5IE_SIZE                                   0x1
#define _PIE3_PWM5IE_LENGTH                                 0x1
#define _PIE3_PWM5IE_MASK                                   0x40

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x094);
#ifndef _LIB_BUILD
asm("PIE4 equ 094h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IE                 :1;
        unsigned TMR6IE                 :1;
        unsigned TMR3IE                 :1;
        unsigned TMR3GIE                :1;
        unsigned TMR5IE                 :1;
        unsigned TMR5GIE                :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x094);
// bitfield macros
#define _PIE4_TMR4IE_POSN                                   0x0
#define _PIE4_TMR4IE_POSITION                               0x0
#define _PIE4_TMR4IE_SIZE                                   0x1
#define _PIE4_TMR4IE_LENGTH                                 0x1
#define _PIE4_TMR4IE_MASK                                   0x1
#define _PIE4_TMR6IE_POSN                                   0x1
#define _PIE4_TMR6IE_POSITION                               0x1
#define _PIE4_TMR6IE_SIZE                                   0x1
#define _PIE4_TMR6IE_LENGTH                                 0x1
#define _PIE4_TMR6IE_MASK                                   0x2
#define _PIE4_TMR3IE_POSN                                   0x2
#define _PIE4_TMR3IE_POSITION                               0x2
#define _PIE4_TMR3IE_SIZE                                   0x1
#define _PIE4_TMR3IE_LENGTH                                 0x1
#define _PIE4_TMR3IE_MASK                                   0x4
#define _PIE4_TMR3GIE_POSN                                  0x3
#define _PIE4_TMR3GIE_POSITION                              0x3
#define _PIE4_TMR3GIE_SIZE                                  0x1
#define _PIE4_TMR3GIE_LENGTH                                0x1
#define _PIE4_TMR3GIE_MASK                                  0x8
#define _PIE4_TMR5IE_POSN                                   0x4
#define _PIE4_TMR5IE_POSITION                               0x4
#define _PIE4_TMR5IE_SIZE                                   0x1
#define _PIE4_TMR5IE_LENGTH                                 0x1
#define _PIE4_TMR5IE_MASK                                   0x10
#define _PIE4_TMR5GIE_POSN                                  0x5
#define _PIE4_TMR5GIE_POSITION                              0x5
#define _PIE4_TMR5GIE_SIZE                                  0x1
#define _PIE4_TMR5GIE_LENGTH                                0x1
#define _PIE4_TMR5GIE_MASK                                  0x20

// Register: OPTION_REG
#define OPTION_REG OPTION_REG
extern volatile unsigned char           OPTION_REG          __at(0x095);
#ifndef _LIB_BUILD
asm("OPTION_REG equ 095h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :3;
        unsigned PSA                    :1;
        unsigned TMR0SE                 :1;
        unsigned TMR0CS                 :1;
        unsigned INTEDG                 :1;
        unsigned nWPUEN                 :1;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned                        :1;
        unsigned T0SE                   :1;
        unsigned T0CS                   :1;
    };
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits __at(0x095);
// bitfield macros
#define _OPTION_REG_PS_POSN                                 0x0
#define _OPTION_REG_PS_POSITION                             0x0
#define _OPTION_REG_PS_SIZE                                 0x3
#define _OPTION_REG_PS_LENGTH                               0x3
#define _OPTION_REG_PS_MASK                                 0x7
#define _OPTION_REG_PSA_POSN                                0x3
#define _OPTION_REG_PSA_POSITION                            0x3
#define _OPTION_REG_PSA_SIZE                                0x1
#define _OPTION_REG_PSA_LENGTH                              0x1
#define _OPTION_REG_PSA_MASK                                0x8
#define _OPTION_REG_TMR0SE_POSN                             0x4
#define _OPTION_REG_TMR0SE_POSITION                         0x4
#define _OPTION_REG_TMR0SE_SIZE                             0x1
#define _OPTION_REG_TMR0SE_LENGTH                           0x1
#define _OPTION_REG_TMR0SE_MASK                             0x10
#define _OPTION_REG_TMR0CS_POSN                             0x5
#define _OPTION_REG_TMR0CS_POSITION                         0x5
#define _OPTION_REG_TMR0CS_SIZE                             0x1
#define _OPTION_REG_TMR0CS_LENGTH                           0x1
#define _OPTION_REG_TMR0CS_MASK                             0x20
#define _OPTION_REG_INTEDG_POSN                             0x6
#define _OPTION_REG_INTEDG_POSITION                         0x6
#define _OPTION_REG_INTEDG_SIZE                             0x1
#define _OPTION_REG_INTEDG_LENGTH                           0x1
#define _OPTION_REG_INTEDG_MASK                             0x40
#define _OPTION_REG_nWPUEN_POSN                             0x7
#define _OPTION_REG_nWPUEN_POSITION                         0x7
#define _OPTION_REG_nWPUEN_SIZE                             0x1
#define _OPTION_REG_nWPUEN_LENGTH                           0x1
#define _OPTION_REG_nWPUEN_MASK                             0x80
#define _OPTION_REG_PS0_POSN                                0x0
#define _OPTION_REG_PS0_POSITION                            0x0
#define _OPTION_REG_PS0_SIZE                                0x1
#define _OPTION_REG_PS0_LENGTH                              0x1
#define _OPTION_REG_PS0_MASK                                0x1
#define _OPTION_REG_PS1_POSN                                0x1
#define _OPTION_REG_PS1_POSITION                            0x1
#define _OPTION_REG_PS1_SIZE                                0x1
#define _OPTION_REG_PS1_LENGTH                              0x1
#define _OPTION_REG_PS1_MASK                                0x2
#define _OPTION_REG_PS2_POSN                                0x2
#define _OPTION_REG_PS2_POSITION                            0x2
#define _OPTION_REG_PS2_SIZE                                0x1
#define _OPTION_REG_PS2_LENGTH                              0x1
#define _OPTION_REG_PS2_MASK                                0x4
#define _OPTION_REG_T0SE_POSN                               0x4
#define _OPTION_REG_T0SE_POSITION                           0x4
#define _OPTION_REG_T0SE_SIZE                               0x1
#define _OPTION_REG_T0SE_LENGTH                             0x1
#define _OPTION_REG_T0SE_MASK                               0x10
#define _OPTION_REG_T0CS_POSN                               0x5
#define _OPTION_REG_T0CS_POSITION                           0x5
#define _OPTION_REG_T0CS_SIZE                               0x1
#define _OPTION_REG_T0CS_LENGTH                             0x1
#define _OPTION_REG_T0CS_MASK                               0x20

// Register: PCON
#define PCON PCON
extern volatile unsigned char           PCON                __at(0x096);
#ifndef _LIB_BUILD
asm("PCON equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned                        :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCONbits_t;
extern volatile PCONbits_t PCONbits __at(0x096);
// bitfield macros
#define _PCON_nBOR_POSN                                     0x0
#define _PCON_nBOR_POSITION                                 0x0
#define _PCON_nBOR_SIZE                                     0x1
#define _PCON_nBOR_LENGTH                                   0x1
#define _PCON_nBOR_MASK                                     0x1
#define _PCON_nPOR_POSN                                     0x1
#define _PCON_nPOR_POSITION                                 0x1
#define _PCON_nPOR_SIZE                                     0x1
#define _PCON_nPOR_LENGTH                                   0x1
#define _PCON_nPOR_MASK                                     0x2
#define _PCON_nRI_POSN                                      0x2
#define _PCON_nRI_POSITION                                  0x2
#define _PCON_nRI_SIZE                                      0x1
#define _PCON_nRI_LENGTH                                    0x1
#define _PCON_nRI_MASK                                      0x4
#define _PCON_nRMCLR_POSN                                   0x3
#define _PCON_nRMCLR_POSITION                               0x3
#define _PCON_nRMCLR_SIZE                                   0x1
#define _PCON_nRMCLR_LENGTH                                 0x1
#define _PCON_nRMCLR_MASK                                   0x8
#define _PCON_nRWDT_POSN                                    0x4
#define _PCON_nRWDT_POSITION                                0x4
#define _PCON_nRWDT_SIZE                                    0x1
#define _PCON_nRWDT_LENGTH                                  0x1
#define _PCON_nRWDT_MASK                                    0x10
#define _PCON_STKUNF_POSN                                   0x6
#define _PCON_STKUNF_POSITION                               0x6
#define _PCON_STKUNF_SIZE                                   0x1
#define _PCON_STKUNF_LENGTH                                 0x1
#define _PCON_STKUNF_MASK                                   0x40
#define _PCON_STKOVF_POSN                                   0x7
#define _PCON_STKOVF_POSITION                               0x7
#define _PCON_STKOVF_SIZE                                   0x1
#define _PCON_STKOVF_LENGTH                                 0x1
#define _PCON_STKOVF_MASK                                   0x80

// Register: WDTCON
#define WDTCON WDTCON
extern volatile unsigned char           WDTCON              __at(0x097);
#ifndef _LIB_BUILD
asm("WDTCON equ 097h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWDTEN                 :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCONbits_t;
extern volatile WDTCONbits_t WDTCONbits __at(0x097);
// bitfield macros
#define _WDTCON_SWDTEN_POSN                                 0x0
#define _WDTCON_SWDTEN_POSITION                             0x0
#define _WDTCON_SWDTEN_SIZE                                 0x1
#define _WDTCON_SWDTEN_LENGTH                               0x1
#define _WDTCON_SWDTEN_MASK                                 0x1
#define _WDTCON_WDTPS_POSN                                  0x1
#define _WDTCON_WDTPS_POSITION                              0x1
#define _WDTCON_WDTPS_SIZE                                  0x5
#define _WDTCON_WDTPS_LENGTH                                0x5
#define _WDTCON_WDTPS_MASK                                  0x3E
#define _WDTCON_WDTPS0_POSN                                 0x1
#define _WDTCON_WDTPS0_POSITION                             0x1
#define _WDTCON_WDTPS0_SIZE                                 0x1
#define _WDTCON_WDTPS0_LENGTH                               0x1
#define _WDTCON_WDTPS0_MASK                                 0x2
#define _WDTCON_WDTPS1_POSN                                 0x2
#define _WDTCON_WDTPS1_POSITION                             0x2
#define _WDTCON_WDTPS1_SIZE                                 0x1
#define _WDTCON_WDTPS1_LENGTH                               0x1
#define _WDTCON_WDTPS1_MASK                                 0x4
#define _WDTCON_WDTPS2_POSN                                 0x3
#define _WDTCON_WDTPS2_POSITION                             0x3
#define _WDTCON_WDTPS2_SIZE                                 0x1
#define _WDTCON_WDTPS2_LENGTH                               0x1
#define _WDTCON_WDTPS2_MASK                                 0x8
#define _WDTCON_WDTPS3_POSN                                 0x4
#define _WDTCON_WDTPS3_POSITION                             0x4
#define _WDTCON_WDTPS3_SIZE                                 0x1
#define _WDTCON_WDTPS3_LENGTH                               0x1
#define _WDTCON_WDTPS3_MASK                                 0x10
#define _WDTCON_WDTPS4_POSN                                 0x5
#define _WDTCON_WDTPS4_POSITION                             0x5
#define _WDTCON_WDTPS4_SIZE                                 0x1
#define _WDTCON_WDTPS4_LENGTH                               0x1
#define _WDTCON_WDTPS4_MASK                                 0x20

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x098);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x098);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: OSCCON
#define OSCCON OSCCON
extern volatile unsigned char           OSCCON              __at(0x099);
#ifndef _LIB_BUILD
asm("OSCCON equ 099h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCS                    :2;
        unsigned                        :1;
        unsigned IRCF                   :4;
        unsigned SPLLEN                 :1;
    };
    struct {
        unsigned SCS0                   :1;
        unsigned SCS1                   :1;
        unsigned                        :1;
        unsigned IRCF0                  :1;
        unsigned IRCF1                  :1;
        unsigned IRCF2                  :1;
        unsigned IRCF3                  :1;
    };
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits __at(0x099);
// bitfield macros
#define _OSCCON_SCS_POSN                                    0x0
#define _OSCCON_SCS_POSITION                                0x0
#define _OSCCON_SCS_SIZE                                    0x2
#define _OSCCON_SCS_LENGTH                                  0x2
#define _OSCCON_SCS_MASK                                    0x3
#define _OSCCON_IRCF_POSN                                   0x3
#define _OSCCON_IRCF_POSITION                               0x3
#define _OSCCON_IRCF_SIZE                                   0x4
#define _OSCCON_IRCF_LENGTH                                 0x4
#define _OSCCON_IRCF_MASK                                   0x78
#define _OSCCON_SPLLEN_POSN                                 0x7
#define _OSCCON_SPLLEN_POSITION                             0x7
#define _OSCCON_SPLLEN_SIZE                                 0x1
#define _OSCCON_SPLLEN_LENGTH                               0x1
#define _OSCCON_SPLLEN_MASK                                 0x80
#define _OSCCON_SCS0_POSN                                   0x0
#define _OSCCON_SCS0_POSITION                               0x0
#define _OSCCON_SCS0_SIZE                                   0x1
#define _OSCCON_SCS0_LENGTH                                 0x1
#define _OSCCON_SCS0_MASK                                   0x1
#define _OSCCON_SCS1_POSN                                   0x1
#define _OSCCON_SCS1_POSITION                               0x1
#define _OSCCON_SCS1_SIZE                                   0x1
#define _OSCCON_SCS1_LENGTH                                 0x1
#define _OSCCON_SCS1_MASK                                   0x2
#define _OSCCON_IRCF0_POSN                                  0x3
#define _OSCCON_IRCF0_POSITION                              0x3
#define _OSCCON_IRCF0_SIZE                                  0x1
#define _OSCCON_IRCF0_LENGTH                                0x1
#define _OSCCON_IRCF0_MASK                                  0x8
#define _OSCCON_IRCF1_POSN                                  0x4
#define _OSCCON_IRCF1_POSITION                              0x4
#define _OSCCON_IRCF1_SIZE                                  0x1
#define _OSCCON_IRCF1_LENGTH                                0x1
#define _OSCCON_IRCF1_MASK                                  0x10
#define _OSCCON_IRCF2_POSN                                  0x5
#define _OSCCON_IRCF2_POSITION                              0x5
#define _OSCCON_IRCF2_SIZE                                  0x1
#define _OSCCON_IRCF2_LENGTH                                0x1
#define _OSCCON_IRCF2_MASK                                  0x20
#define _OSCCON_IRCF3_POSN                                  0x6
#define _OSCCON_IRCF3_POSITION                              0x6
#define _OSCCON_IRCF3_SIZE                                  0x1
#define _OSCCON_IRCF3_LENGTH                                0x1
#define _OSCCON_IRCF3_MASK                                  0x40

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x09A);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 09Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFIOFS                 :1;
        unsigned LFIOFR                 :1;
        unsigned MFIOFR                 :1;
        unsigned HFIOFL                 :1;
        unsigned HFIOFR                 :1;
        unsigned OSTS                   :1;
        unsigned PLLR                   :1;
        unsigned SOSCR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x09A);
// bitfield macros
#define _OSCSTAT_HFIOFS_POSN                                0x0
#define _OSCSTAT_HFIOFS_POSITION                            0x0
#define _OSCSTAT_HFIOFS_SIZE                                0x1
#define _OSCSTAT_HFIOFS_LENGTH                              0x1
#define _OSCSTAT_HFIOFS_MASK                                0x1
#define _OSCSTAT_LFIOFR_POSN                                0x1
#define _OSCSTAT_LFIOFR_POSITION                            0x1
#define _OSCSTAT_LFIOFR_SIZE                                0x1
#define _OSCSTAT_LFIOFR_LENGTH                              0x1
#define _OSCSTAT_LFIOFR_MASK                                0x2
#define _OSCSTAT_MFIOFR_POSN                                0x2
#define _OSCSTAT_MFIOFR_POSITION                            0x2
#define _OSCSTAT_MFIOFR_SIZE                                0x1
#define _OSCSTAT_MFIOFR_LENGTH                              0x1
#define _OSCSTAT_MFIOFR_MASK                                0x4
#define _OSCSTAT_HFIOFL_POSN                                0x3
#define _OSCSTAT_HFIOFL_POSITION                            0x3
#define _OSCSTAT_HFIOFL_SIZE                                0x1
#define _OSCSTAT_HFIOFL_LENGTH                              0x1
#define _OSCSTAT_HFIOFL_MASK                                0x8
#define _OSCSTAT_HFIOFR_POSN                                0x4
#define _OSCSTAT_HFIOFR_POSITION                            0x4
#define _OSCSTAT_HFIOFR_SIZE                                0x1
#define _OSCSTAT_HFIOFR_LENGTH                              0x1
#define _OSCSTAT_HFIOFR_MASK                                0x10
#define _OSCSTAT_OSTS_POSN                                  0x5
#define _OSCSTAT_OSTS_POSITION                              0x5
#define _OSCSTAT_OSTS_SIZE                                  0x1
#define _OSCSTAT_OSTS_LENGTH                                0x1
#define _OSCSTAT_OSTS_MASK                                  0x20
#define _OSCSTAT_PLLR_POSN                                  0x6
#define _OSCSTAT_PLLR_POSITION                              0x6
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x40
#define _OSCSTAT_SOSCR_POSN                                 0x7
#define _OSCSTAT_SOSCR_POSITION                             0x7
#define _OSCSTAT_SOSCR_SIZE                                 0x1
#define _OSCSTAT_SOSCR_LENGTH                               0x1
#define _OSCSTAT_SOSCR_MASK                                 0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x09B);
#ifndef _LIB_BUILD
asm("ADRES equ 09Bh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x09B);
#ifndef _LIB_BUILD
asm("ADRESL equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESL                 :8;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x09B);
// bitfield macros
#define _ADRESL_ADRESL_POSN                                 0x0
#define _ADRESL_ADRESL_POSITION                             0x0
#define _ADRESL_ADRESL_SIZE                                 0x8
#define _ADRESL_ADRESL_LENGTH                               0x8
#define _ADRESL_ADRESL_MASK                                 0xFF

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x09C);
#ifndef _LIB_BUILD
asm("ADRESH equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESH                 :8;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x09C);
// bitfield macros
#define _ADRESH_ADRESH_POSN                                 0x0
#define _ADRESH_ADRESH_POSITION                             0x0
#define _ADRESH_ADRESH_SIZE                                 0x8
#define _ADRESH_ADRESH_LENGTH                               0x8
#define _ADRESH_ADRESH_MASK                                 0xFF

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x09D);
#ifndef _LIB_BUILD
asm("ADCON0 equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADON                   :1;
        unsigned GO_nDONE               :1;
        unsigned CHS                    :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADGO                   :1;
        unsigned CHS0                   :1;
        unsigned CHS1                   :1;
        unsigned CHS2                   :1;
        unsigned CHS3                   :1;
        unsigned CHS4                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned GO                     :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x09D);
// bitfield macros
#define _ADCON0_ADON_POSN                                   0x0
#define _ADCON0_ADON_POSITION                               0x0
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x1
#define _ADCON0_GO_nDONE_POSN                               0x1
#define _ADCON0_GO_nDONE_POSITION                           0x1
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x2
#define _ADCON0_CHS_POSN                                    0x2
#define _ADCON0_CHS_POSITION                                0x2
#define _ADCON0_CHS_SIZE                                    0x5
#define _ADCON0_CHS_LENGTH                                  0x5
#define _ADCON0_CHS_MASK                                    0x7C
#define _ADCON0_ADGO_POSN                                   0x1
#define _ADCON0_ADGO_POSITION                               0x1
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x2
#define _ADCON0_CHS0_POSN                                   0x2
#define _ADCON0_CHS0_POSITION                               0x2
#define _ADCON0_CHS0_SIZE                                   0x1
#define _ADCON0_CHS0_LENGTH                                 0x1
#define _ADCON0_CHS0_MASK                                   0x4
#define _ADCON0_CHS1_POSN                                   0x3
#define _ADCON0_CHS1_POSITION                               0x3
#define _ADCON0_CHS1_SIZE                                   0x1
#define _ADCON0_CHS1_LENGTH                                 0x1
#define _ADCON0_CHS1_MASK                                   0x8
#define _ADCON0_CHS2_POSN                                   0x4
#define _ADCON0_CHS2_POSITION                               0x4
#define _ADCON0_CHS2_SIZE                                   0x1
#define _ADCON0_CHS2_LENGTH                                 0x1
#define _ADCON0_CHS2_MASK                                   0x10
#define _ADCON0_CHS3_POSN                                   0x5
#define _ADCON0_CHS3_POSITION                               0x5
#define _ADCON0_CHS3_SIZE                                   0x1
#define _ADCON0_CHS3_LENGTH                                 0x1
#define _ADCON0_CHS3_MASK                                   0x20
#define _ADCON0_CHS4_POSN                                   0x6
#define _ADCON0_CHS4_POSITION                               0x6
#define _ADCON0_CHS4_SIZE                                   0x1
#define _ADCON0_CHS4_LENGTH                                 0x1
#define _ADCON0_CHS4_MASK                                   0x40
#define _ADCON0_GO_POSN                                     0x1
#define _ADCON0_GO_POSITION                                 0x1
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x2

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x09E);
#ifndef _LIB_BUILD
asm("ADCON1 equ 09Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREF                 :2;
        unsigned ADNREF                 :1;
        unsigned                        :1;
        unsigned ADCS                   :3;
        unsigned ADFM                   :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x09E);
// bitfield macros
#define _ADCON1_ADPREF_POSN                                 0x0
#define _ADCON1_ADPREF_POSITION                             0x0
#define _ADCON1_ADPREF_SIZE                                 0x2
#define _ADCON1_ADPREF_LENGTH                               0x2
#define _ADCON1_ADPREF_MASK                                 0x3
#define _ADCON1_ADNREF_POSN                                 0x2
#define _ADCON1_ADNREF_POSITION                             0x2
#define _ADCON1_ADNREF_SIZE                                 0x1
#define _ADCON1_ADNREF_LENGTH                               0x1
#define _ADCON1_ADNREF_MASK                                 0x4
#define _ADCON1_ADCS_POSN                                   0x4
#define _ADCON1_ADCS_POSITION                               0x4
#define _ADCON1_ADCS_SIZE                                   0x3
#define _ADCON1_ADCS_LENGTH                                 0x3
#define _ADCON1_ADCS_MASK                                   0x70
#define _ADCON1_ADFM_POSN                                   0x7
#define _ADCON1_ADFM_POSITION                               0x7
#define _ADCON1_ADFM_SIZE                                   0x1
#define _ADCON1_ADFM_LENGTH                                 0x1
#define _ADCON1_ADFM_MASK                                   0x80
#define _ADCON1_ADPREF0_POSN                                0x0
#define _ADCON1_ADPREF0_POSITION                            0x0
#define _ADCON1_ADPREF0_SIZE                                0x1
#define _ADCON1_ADPREF0_LENGTH                              0x1
#define _ADCON1_ADPREF0_MASK                                0x1
#define _ADCON1_ADPREF1_POSN                                0x1
#define _ADCON1_ADPREF1_POSITION                            0x1
#define _ADCON1_ADPREF1_SIZE                                0x1
#define _ADCON1_ADPREF1_LENGTH                              0x1
#define _ADCON1_ADPREF1_MASK                                0x2

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x09F);
#ifndef _LIB_BUILD
asm("ADCON2 equ 09Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned TRIGSEL                :5;
    };
    struct {
        unsigned                        :3;
        unsigned TRIGSEL0               :1;
        unsigned TRIGSEL1               :1;
        unsigned TRIGSEL2               :1;
        unsigned TRIGSEL3               :1;
        unsigned TRIGSEL4               :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x09F);
// bitfield macros
#define _ADCON2_TRIGSEL_POSN                                0x3
#define _ADCON2_TRIGSEL_POSITION                            0x3
#define _ADCON2_TRIGSEL_SIZE                                0x5
#define _ADCON2_TRIGSEL_LENGTH                              0x5
#define _ADCON2_TRIGSEL_MASK                                0xF8
#define _ADCON2_TRIGSEL0_POSN                               0x3
#define _ADCON2_TRIGSEL0_POSITION                           0x3
#define _ADCON2_TRIGSEL0_SIZE                               0x1
#define _ADCON2_TRIGSEL0_LENGTH                             0x1
#define _ADCON2_TRIGSEL0_MASK                               0x8
#define _ADCON2_TRIGSEL1_POSN                               0x4
#define _ADCON2_TRIGSEL1_POSITION                           0x4
#define _ADCON2_TRIGSEL1_SIZE                               0x1
#define _ADCON2_TRIGSEL1_LENGTH                             0x1
#define _ADCON2_TRIGSEL1_MASK                               0x10
#define _ADCON2_TRIGSEL2_POSN                               0x5
#define _ADCON2_TRIGSEL2_POSITION                           0x5
#define _ADCON2_TRIGSEL2_SIZE                               0x1
#define _ADCON2_TRIGSEL2_LENGTH                             0x1
#define _ADCON2_TRIGSEL2_MASK                               0x20
#define _ADCON2_TRIGSEL3_POSN                               0x6
#define _ADCON2_TRIGSEL3_POSITION                           0x6
#define _ADCON2_TRIGSEL3_SIZE                               0x1
#define _ADCON2_TRIGSEL3_LENGTH                             0x1
#define _ADCON2_TRIGSEL3_MASK                               0x40
#define _ADCON2_TRIGSEL4_POSN                               0x7
#define _ADCON2_TRIGSEL4_POSITION                           0x7
#define _ADCON2_TRIGSEL4_SIZE                               0x1
#define _ADCON2_TRIGSEL4_LENGTH                             0x1
#define _ADCON2_TRIGSEL4_MASK                               0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x10C);
#ifndef _LIB_BUILD
asm("LATA equ 010Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned                        :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x10C);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x10E);
#ifndef _LIB_BUILD
asm("LATC equ 010Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x10E);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x10F);
#ifndef _LIB_BUILD
asm("CMOUT equ 010Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x10F);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x110);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 0110h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :1;
        unsigned ZLF                    :1;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned C1SP                   :1;
        unsigned C1ZLF                  :1;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1ON                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x110);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_ZLF_POSN                                   0x3
#define _CM1CON0_ZLF_POSITION                               0x3
#define _CM1CON0_ZLF_SIZE                                   0x1
#define _CM1CON0_ZLF_LENGTH                                 0x1
#define _CM1CON0_ZLF_MASK                                   0x8
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_ON_POSN                                    0x7
#define _CM1CON0_ON_POSITION                                0x7
#define _CM1CON0_ON_SIZE                                    0x1
#define _CM1CON0_ON_LENGTH                                  0x1
#define _CM1CON0_ON_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1SP_POSN                                  0x2
#define _CM1CON0_C1SP_POSITION                              0x2
#define _CM1CON0_C1SP_SIZE                                  0x1
#define _CM1CON0_C1SP_LENGTH                                0x1
#define _CM1CON0_C1SP_MASK                                  0x4
#define _CM1CON0_C1ZLF_POSN                                 0x3
#define _CM1CON0_C1ZLF_POSITION                             0x3
#define _CM1CON0_C1ZLF_SIZE                                 0x1
#define _CM1CON0_C1ZLF_LENGTH                               0x1
#define _CM1CON0_C1ZLF_MASK                                 0x8
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1ON_POSN                                  0x7
#define _CM1CON0_C1ON_POSITION                              0x7
#define _CM1CON0_C1ON_SIZE                                  0x1
#define _CM1CON0_C1ON_LENGTH                                0x1
#define _CM1CON0_C1ON_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x111);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 0111h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x111);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NSEL
#define CM1NSEL CM1NSEL
extern volatile unsigned char           CM1NSEL             __at(0x112);
#ifndef _LIB_BUILD
asm("CM1NSEL equ 0112h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH                  :3;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NSELbits_t;
extern volatile CM1NSELbits_t CM1NSELbits __at(0x112);
// bitfield macros
#define _CM1NSEL_NCH_POSN                                   0x0
#define _CM1NSEL_NCH_POSITION                               0x0
#define _CM1NSEL_NCH_SIZE                                   0x3
#define _CM1NSEL_NCH_LENGTH                                 0x3
#define _CM1NSEL_NCH_MASK                                   0x7
#define _CM1NSEL_NCH0_POSN                                  0x0
#define _CM1NSEL_NCH0_POSITION                              0x0
#define _CM1NSEL_NCH0_SIZE                                  0x1
#define _CM1NSEL_NCH0_LENGTH                                0x1
#define _CM1NSEL_NCH0_MASK                                  0x1
#define _CM1NSEL_NCH1_POSN                                  0x1
#define _CM1NSEL_NCH1_POSITION                              0x1
#define _CM1NSEL_NCH1_SIZE                                  0x1
#define _CM1NSEL_NCH1_LENGTH                                0x1
#define _CM1NSEL_NCH1_MASK                                  0x2
#define _CM1NSEL_NCH2_POSN                                  0x2
#define _CM1NSEL_NCH2_POSITION                              0x2
#define _CM1NSEL_NCH2_SIZE                                  0x1
#define _CM1NSEL_NCH2_LENGTH                                0x1
#define _CM1NSEL_NCH2_MASK                                  0x4
#define _CM1NSEL_C1NCH_POSN                                 0x0
#define _CM1NSEL_C1NCH_POSITION                             0x0
#define _CM1NSEL_C1NCH_SIZE                                 0x3
#define _CM1NSEL_C1NCH_LENGTH                               0x3
#define _CM1NSEL_C1NCH_MASK                                 0x7
#define _CM1NSEL_C1NCH0_POSN                                0x0
#define _CM1NSEL_C1NCH0_POSITION                            0x0
#define _CM1NSEL_C1NCH0_SIZE                                0x1
#define _CM1NSEL_C1NCH0_LENGTH                              0x1
#define _CM1NSEL_C1NCH0_MASK                                0x1
#define _CM1NSEL_C1NCH1_POSN                                0x1
#define _CM1NSEL_C1NCH1_POSITION                            0x1
#define _CM1NSEL_C1NCH1_SIZE                                0x1
#define _CM1NSEL_C1NCH1_LENGTH                              0x1
#define _CM1NSEL_C1NCH1_MASK                                0x2
#define _CM1NSEL_C1NCH2_POSN                                0x2
#define _CM1NSEL_C1NCH2_POSITION                            0x2
#define _CM1NSEL_C1NCH2_SIZE                                0x1
#define _CM1NSEL_C1NCH2_LENGTH                              0x1
#define _CM1NSEL_C1NCH2_MASK                                0x4

// Register: CM1PSEL
#define CM1PSEL CM1PSEL
extern volatile unsigned char           CM1PSEL             __at(0x113);
#ifndef _LIB_BUILD
asm("CM1PSEL equ 0113h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :4;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
        unsigned PCH3                   :1;
    };
    struct {
        unsigned C1PCH                  :4;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
        unsigned C1PCH3                 :1;
    };
} CM1PSELbits_t;
extern volatile CM1PSELbits_t CM1PSELbits __at(0x113);
// bitfield macros
#define _CM1PSEL_PCH_POSN                                   0x0
#define _CM1PSEL_PCH_POSITION                               0x0
#define _CM1PSEL_PCH_SIZE                                   0x4
#define _CM1PSEL_PCH_LENGTH                                 0x4
#define _CM1PSEL_PCH_MASK                                   0xF
#define _CM1PSEL_PCH0_POSN                                  0x0
#define _CM1PSEL_PCH0_POSITION                              0x0
#define _CM1PSEL_PCH0_SIZE                                  0x1
#define _CM1PSEL_PCH0_LENGTH                                0x1
#define _CM1PSEL_PCH0_MASK                                  0x1
#define _CM1PSEL_PCH1_POSN                                  0x1
#define _CM1PSEL_PCH1_POSITION                              0x1
#define _CM1PSEL_PCH1_SIZE                                  0x1
#define _CM1PSEL_PCH1_LENGTH                                0x1
#define _CM1PSEL_PCH1_MASK                                  0x2
#define _CM1PSEL_PCH2_POSN                                  0x2
#define _CM1PSEL_PCH2_POSITION                              0x2
#define _CM1PSEL_PCH2_SIZE                                  0x1
#define _CM1PSEL_PCH2_LENGTH                                0x1
#define _CM1PSEL_PCH2_MASK                                  0x4
#define _CM1PSEL_PCH3_POSN                                  0x3
#define _CM1PSEL_PCH3_POSITION                              0x3
#define _CM1PSEL_PCH3_SIZE                                  0x1
#define _CM1PSEL_PCH3_LENGTH                                0x1
#define _CM1PSEL_PCH3_MASK                                  0x8
#define _CM1PSEL_C1PCH_POSN                                 0x0
#define _CM1PSEL_C1PCH_POSITION                             0x0
#define _CM1PSEL_C1PCH_SIZE                                 0x4
#define _CM1PSEL_C1PCH_LENGTH                               0x4
#define _CM1PSEL_C1PCH_MASK                                 0xF
#define _CM1PSEL_C1PCH0_POSN                                0x0
#define _CM1PSEL_C1PCH0_POSITION                            0x0
#define _CM1PSEL_C1PCH0_SIZE                                0x1
#define _CM1PSEL_C1PCH0_LENGTH                              0x1
#define _CM1PSEL_C1PCH0_MASK                                0x1
#define _CM1PSEL_C1PCH1_POSN                                0x1
#define _CM1PSEL_C1PCH1_POSITION                            0x1
#define _CM1PSEL_C1PCH1_SIZE                                0x1
#define _CM1PSEL_C1PCH1_LENGTH                              0x1
#define _CM1PSEL_C1PCH1_MASK                                0x2
#define _CM1PSEL_C1PCH2_POSN                                0x2
#define _CM1PSEL_C1PCH2_POSITION                            0x2
#define _CM1PSEL_C1PCH2_SIZE                                0x1
#define _CM1PSEL_C1PCH2_LENGTH                              0x1
#define _CM1PSEL_C1PCH2_MASK                                0x4
#define _CM1PSEL_C1PCH3_POSN                                0x3
#define _CM1PSEL_C1PCH3_POSITION                            0x3
#define _CM1PSEL_C1PCH3_SIZE                                0x1
#define _CM1PSEL_C1PCH3_LENGTH                              0x1
#define _CM1PSEL_C1PCH3_MASK                                0x8

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x114);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0114h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :1;
        unsigned ZLF                    :1;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned C2SP                   :1;
        unsigned C2ZLF                  :1;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2ON                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x114);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_ZLF_POSN                                   0x3
#define _CM2CON0_ZLF_POSITION                               0x3
#define _CM2CON0_ZLF_SIZE                                   0x1
#define _CM2CON0_ZLF_LENGTH                                 0x1
#define _CM2CON0_ZLF_MASK                                   0x8
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_ON_POSN                                    0x7
#define _CM2CON0_ON_POSITION                                0x7
#define _CM2CON0_ON_SIZE                                    0x1
#define _CM2CON0_ON_LENGTH                                  0x1
#define _CM2CON0_ON_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2SP_POSN                                  0x2
#define _CM2CON0_C2SP_POSITION                              0x2
#define _CM2CON0_C2SP_SIZE                                  0x1
#define _CM2CON0_C2SP_LENGTH                                0x1
#define _CM2CON0_C2SP_MASK                                  0x4
#define _CM2CON0_C2ZLF_POSN                                 0x3
#define _CM2CON0_C2ZLF_POSITION                             0x3
#define _CM2CON0_C2ZLF_SIZE                                 0x1
#define _CM2CON0_C2ZLF_LENGTH                               0x1
#define _CM2CON0_C2ZLF_MASK                                 0x8
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2ON_POSN                                  0x7
#define _CM2CON0_C2ON_POSITION                              0x7
#define _CM2CON0_C2ON_SIZE                                  0x1
#define _CM2CON0_C2ON_LENGTH                                0x1
#define _CM2CON0_C2ON_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x115);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0115h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x115);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NSEL
#define CM2NSEL CM2NSEL
extern volatile unsigned char           CM2NSEL             __at(0x116);
#ifndef _LIB_BUILD
asm("CM2NSEL equ 0116h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH                  :3;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NSELbits_t;
extern volatile CM2NSELbits_t CM2NSELbits __at(0x116);
// bitfield macros
#define _CM2NSEL_NCH_POSN                                   0x0
#define _CM2NSEL_NCH_POSITION                               0x0
#define _CM2NSEL_NCH_SIZE                                   0x3
#define _CM2NSEL_NCH_LENGTH                                 0x3
#define _CM2NSEL_NCH_MASK                                   0x7
#define _CM2NSEL_NCH0_POSN                                  0x0
#define _CM2NSEL_NCH0_POSITION                              0x0
#define _CM2NSEL_NCH0_SIZE                                  0x1
#define _CM2NSEL_NCH0_LENGTH                                0x1
#define _CM2NSEL_NCH0_MASK                                  0x1
#define _CM2NSEL_NCH1_POSN                                  0x1
#define _CM2NSEL_NCH1_POSITION                              0x1
#define _CM2NSEL_NCH1_SIZE                                  0x1
#define _CM2NSEL_NCH1_LENGTH                                0x1
#define _CM2NSEL_NCH1_MASK                                  0x2
#define _CM2NSEL_NCH2_POSN                                  0x2
#define _CM2NSEL_NCH2_POSITION                              0x2
#define _CM2NSEL_NCH2_SIZE                                  0x1
#define _CM2NSEL_NCH2_LENGTH                                0x1
#define _CM2NSEL_NCH2_MASK                                  0x4
#define _CM2NSEL_C2NCH_POSN                                 0x0
#define _CM2NSEL_C2NCH_POSITION                             0x0
#define _CM2NSEL_C2NCH_SIZE                                 0x3
#define _CM2NSEL_C2NCH_LENGTH                               0x3
#define _CM2NSEL_C2NCH_MASK                                 0x7
#define _CM2NSEL_C2NCH0_POSN                                0x0
#define _CM2NSEL_C2NCH0_POSITION                            0x0
#define _CM2NSEL_C2NCH0_SIZE                                0x1
#define _CM2NSEL_C2NCH0_LENGTH                              0x1
#define _CM2NSEL_C2NCH0_MASK                                0x1
#define _CM2NSEL_C2NCH1_POSN                                0x1
#define _CM2NSEL_C2NCH1_POSITION                            0x1
#define _CM2NSEL_C2NCH1_SIZE                                0x1
#define _CM2NSEL_C2NCH1_LENGTH                              0x1
#define _CM2NSEL_C2NCH1_MASK                                0x2
#define _CM2NSEL_C2NCH2_POSN                                0x2
#define _CM2NSEL_C2NCH2_POSITION                            0x2
#define _CM2NSEL_C2NCH2_SIZE                                0x1
#define _CM2NSEL_C2NCH2_LENGTH                              0x1
#define _CM2NSEL_C2NCH2_MASK                                0x4

// Register: CM2PSEL
#define CM2PSEL CM2PSEL
extern volatile unsigned char           CM2PSEL             __at(0x117);
#ifndef _LIB_BUILD
asm("CM2PSEL equ 0117h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :4;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
        unsigned PCH3                   :1;
    };
    struct {
        unsigned C2PCH                  :4;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
        unsigned C2PCH3                 :1;
    };
} CM2PSELbits_t;
extern volatile CM2PSELbits_t CM2PSELbits __at(0x117);
// bitfield macros
#define _CM2PSEL_PCH_POSN                                   0x0
#define _CM2PSEL_PCH_POSITION                               0x0
#define _CM2PSEL_PCH_SIZE                                   0x4
#define _CM2PSEL_PCH_LENGTH                                 0x4
#define _CM2PSEL_PCH_MASK                                   0xF
#define _CM2PSEL_PCH0_POSN                                  0x0
#define _CM2PSEL_PCH0_POSITION                              0x0
#define _CM2PSEL_PCH0_SIZE                                  0x1
#define _CM2PSEL_PCH0_LENGTH                                0x1
#define _CM2PSEL_PCH0_MASK                                  0x1
#define _CM2PSEL_PCH1_POSN                                  0x1
#define _CM2PSEL_PCH1_POSITION                              0x1
#define _CM2PSEL_PCH1_SIZE                                  0x1
#define _CM2PSEL_PCH1_LENGTH                                0x1
#define _CM2PSEL_PCH1_MASK                                  0x2
#define _CM2PSEL_PCH2_POSN                                  0x2
#define _CM2PSEL_PCH2_POSITION                              0x2
#define _CM2PSEL_PCH2_SIZE                                  0x1
#define _CM2PSEL_PCH2_LENGTH                                0x1
#define _CM2PSEL_PCH2_MASK                                  0x4
#define _CM2PSEL_PCH3_POSN                                  0x3
#define _CM2PSEL_PCH3_POSITION                              0x3
#define _CM2PSEL_PCH3_SIZE                                  0x1
#define _CM2PSEL_PCH3_LENGTH                                0x1
#define _CM2PSEL_PCH3_MASK                                  0x8
#define _CM2PSEL_C2PCH_POSN                                 0x0
#define _CM2PSEL_C2PCH_POSITION                             0x0
#define _CM2PSEL_C2PCH_SIZE                                 0x4
#define _CM2PSEL_C2PCH_LENGTH                               0x4
#define _CM2PSEL_C2PCH_MASK                                 0xF
#define _CM2PSEL_C2PCH0_POSN                                0x0
#define _CM2PSEL_C2PCH0_POSITION                            0x0
#define _CM2PSEL_C2PCH0_SIZE                                0x1
#define _CM2PSEL_C2PCH0_LENGTH                              0x1
#define _CM2PSEL_C2PCH0_MASK                                0x1
#define _CM2PSEL_C2PCH1_POSN                                0x1
#define _CM2PSEL_C2PCH1_POSITION                            0x1
#define _CM2PSEL_C2PCH1_SIZE                                0x1
#define _CM2PSEL_C2PCH1_LENGTH                              0x1
#define _CM2PSEL_C2PCH1_MASK                                0x2
#define _CM2PSEL_C2PCH2_POSN                                0x2
#define _CM2PSEL_C2PCH2_POSITION                            0x2
#define _CM2PSEL_C2PCH2_SIZE                                0x1
#define _CM2PSEL_C2PCH2_LENGTH                              0x1
#define _CM2PSEL_C2PCH2_MASK                                0x4
#define _CM2PSEL_C2PCH3_POSN                                0x3
#define _CM2PSEL_C2PCH3_POSITION                            0x3
#define _CM2PSEL_C2PCH3_SIZE                                0x1
#define _CM2PSEL_C2PCH3_LENGTH                              0x1
#define _CM2PSEL_C2PCH3_MASK                                0x8

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x18C);
#ifndef _LIB_BUILD
asm("ANSELA equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned                        :1;
        unsigned ANSA4                  :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x18C);
// bitfield macros
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA4_POSN                                  0x4
#define _ANSELA_ANSA4_POSITION                              0x4
#define _ANSELA_ANSA4_SIZE                                  0x1
#define _ANSELA_ANSA4_LENGTH                                0x1
#define _ANSELA_ANSA4_MASK                                  0x10

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x18E);
#ifndef _LIB_BUILD
asm("ANSELC equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSC0                  :1;
        unsigned ANSC1                  :1;
        unsigned ANSC2                  :1;
        unsigned ANSC3                  :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x18E);
// bitfield macros
#define _ANSELC_ANSC0_POSN                                  0x0
#define _ANSELC_ANSC0_POSITION                              0x0
#define _ANSELC_ANSC0_SIZE                                  0x1
#define _ANSELC_ANSC0_LENGTH                                0x1
#define _ANSELC_ANSC0_MASK                                  0x1
#define _ANSELC_ANSC1_POSN                                  0x1
#define _ANSELC_ANSC1_POSITION                              0x1
#define _ANSELC_ANSC1_SIZE                                  0x1
#define _ANSELC_ANSC1_LENGTH                                0x1
#define _ANSELC_ANSC1_MASK                                  0x2
#define _ANSELC_ANSC2_POSN                                  0x2
#define _ANSELC_ANSC2_POSITION                              0x2
#define _ANSELC_ANSC2_SIZE                                  0x1
#define _ANSELC_ANSC2_LENGTH                                0x1
#define _ANSELC_ANSC2_MASK                                  0x4
#define _ANSELC_ANSC3_POSN                                  0x3
#define _ANSELC_ANSC3_POSITION                              0x3
#define _ANSELC_ANSC3_SIZE                                  0x1
#define _ANSELC_ANSC3_LENGTH                                0x1
#define _ANSELC_ANSC3_MASK                                  0x8

// Register: PMADR
#define PMADR PMADR
extern volatile unsigned short          PMADR               __at(0x191);
#ifndef _LIB_BUILD
asm("PMADR equ 0191h");
#endif

// Register: PMADRL
#define PMADRL PMADRL
extern volatile unsigned char           PMADRL              __at(0x191);
#ifndef _LIB_BUILD
asm("PMADRL equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMADRL                 :8;
    };
} PMADRLbits_t;
extern volatile PMADRLbits_t PMADRLbits __at(0x191);
// bitfield macros
#define _PMADRL_PMADRL_POSN                                 0x0
#define _PMADRL_PMADRL_POSITION                             0x0
#define _PMADRL_PMADRL_SIZE                                 0x8
#define _PMADRL_PMADRL_LENGTH                               0x8
#define _PMADRL_PMADRL_MASK                                 0xFF

// Register: PMADRH
#define PMADRH PMADRH
extern volatile unsigned char           PMADRH              __at(0x192);
#ifndef _LIB_BUILD
asm("PMADRH equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMADRH                 :7;
    };
} PMADRHbits_t;
extern volatile PMADRHbits_t PMADRHbits __at(0x192);
// bitfield macros
#define _PMADRH_PMADRH_POSN                                 0x0
#define _PMADRH_PMADRH_POSITION                             0x0
#define _PMADRH_PMADRH_SIZE                                 0x7
#define _PMADRH_PMADRH_LENGTH                               0x7
#define _PMADRH_PMADRH_MASK                                 0x7F

// Register: PMDAT
#define PMDAT PMDAT
extern volatile unsigned short          PMDAT               __at(0x193);
#ifndef _LIB_BUILD
asm("PMDAT equ 0193h");
#endif

// Register: PMDATL
#define PMDATL PMDATL
extern volatile unsigned char           PMDATL              __at(0x193);
#ifndef _LIB_BUILD
asm("PMDATL equ 0193h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMDATL                 :8;
    };
} PMDATLbits_t;
extern volatile PMDATLbits_t PMDATLbits __at(0x193);
// bitfield macros
#define _PMDATL_PMDATL_POSN                                 0x0
#define _PMDATL_PMDATL_POSITION                             0x0
#define _PMDATL_PMDATL_SIZE                                 0x8
#define _PMDATL_PMDATL_LENGTH                               0x8
#define _PMDATL_PMDATL_MASK                                 0xFF

// Register: PMDATH
#define PMDATH PMDATH
extern volatile unsigned char           PMDATH              __at(0x194);
#ifndef _LIB_BUILD
asm("PMDATH equ 0194h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMDATH                 :6;
    };
} PMDATHbits_t;
extern volatile PMDATHbits_t PMDATHbits __at(0x194);
// bitfield macros
#define _PMDATH_PMDATH_POSN                                 0x0
#define _PMDATH_PMDATH_POSITION                             0x0
#define _PMDATH_PMDATH_SIZE                                 0x6
#define _PMDATH_PMDATH_LENGTH                               0x6
#define _PMDATH_PMDATH_MASK                                 0x3F

// Register: PMCON1
#define PMCON1 PMCON1
extern volatile unsigned char           PMCON1              __at(0x195);
#ifndef _LIB_BUILD
asm("PMCON1 equ 0195h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned CFGS                   :1;
    };
} PMCON1bits_t;
extern volatile PMCON1bits_t PMCON1bits __at(0x195);
// bitfield macros
#define _PMCON1_RD_POSN                                     0x0
#define _PMCON1_RD_POSITION                                 0x0
#define _PMCON1_RD_SIZE                                     0x1
#define _PMCON1_RD_LENGTH                                   0x1
#define _PMCON1_RD_MASK                                     0x1
#define _PMCON1_WR_POSN                                     0x1
#define _PMCON1_WR_POSITION                                 0x1
#define _PMCON1_WR_SIZE                                     0x1
#define _PMCON1_WR_LENGTH                                   0x1
#define _PMCON1_WR_MASK                                     0x2
#define _PMCON1_WREN_POSN                                   0x2
#define _PMCON1_WREN_POSITION                               0x2
#define _PMCON1_WREN_SIZE                                   0x1
#define _PMCON1_WREN_LENGTH                                 0x1
#define _PMCON1_WREN_MASK                                   0x4
#define _PMCON1_WRERR_POSN                                  0x3
#define _PMCON1_WRERR_POSITION                              0x3
#define _PMCON1_WRERR_SIZE                                  0x1
#define _PMCON1_WRERR_LENGTH                                0x1
#define _PMCON1_WRERR_MASK                                  0x8
#define _PMCON1_FREE_POSN                                   0x4
#define _PMCON1_FREE_POSITION                               0x4
#define _PMCON1_FREE_SIZE                                   0x1
#define _PMCON1_FREE_LENGTH                                 0x1
#define _PMCON1_FREE_MASK                                   0x10
#define _PMCON1_LWLO_POSN                                   0x5
#define _PMCON1_LWLO_POSITION                               0x5
#define _PMCON1_LWLO_SIZE                                   0x1
#define _PMCON1_LWLO_LENGTH                                 0x1
#define _PMCON1_LWLO_MASK                                   0x20
#define _PMCON1_CFGS_POSN                                   0x6
#define _PMCON1_CFGS_POSITION                               0x6
#define _PMCON1_CFGS_SIZE                                   0x1
#define _PMCON1_CFGS_LENGTH                                 0x1
#define _PMCON1_CFGS_MASK                                   0x40

// Register: PMCON2
#define PMCON2 PMCON2
extern volatile unsigned char           PMCON2              __at(0x196);
#ifndef _LIB_BUILD
asm("PMCON2 equ 0196h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMCON2                 :8;
    };
} PMCON2bits_t;
extern volatile PMCON2bits_t PMCON2bits __at(0x196);
// bitfield macros
#define _PMCON2_PMCON2_POSN                                 0x0
#define _PMCON2_PMCON2_POSITION                             0x0
#define _PMCON2_PMCON2_SIZE                                 0x8
#define _PMCON2_PMCON2_LENGTH                               0x8
#define _PMCON2_PMCON2_MASK                                 0xFF

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0x197);
#ifndef _LIB_BUILD
asm("VREGCON equ 0197h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned VREGPM                 :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0x197);
// bitfield macros
#define _VREGCON_VREGPM_POSN                                0x1
#define _VREGCON_VREGPM_POSITION                            0x1
#define _VREGCON_VREGPM_SIZE                                0x1
#define _VREGCON_VREGPM_LENGTH                              0x1
#define _VREGCON_VREGPM_MASK                                0x2

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x199);
#ifndef _LIB_BUILD
asm("RC1REG equ 0199h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0x199);
#ifndef _LIB_BUILD
asm("RCREG equ 0199h");
#endif
extern volatile unsigned char           RCREG1              __at(0x199);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0199h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x199);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0x199);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0x199);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x19A);
#ifndef _LIB_BUILD
asm("TX1REG equ 019Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0x19A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 019Ah");
#endif
extern volatile unsigned char           TXREG               __at(0x19A);
#ifndef _LIB_BUILD
asm("TXREG equ 019Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x19A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0x19A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0x19A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x19B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 019Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x19B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 019Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0x19B);
#ifndef _LIB_BUILD
asm("SPBRG equ 019Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0x19B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 019Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0x19B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 019Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x19B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0x19B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0x19B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0x19B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x19C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 019Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0x19C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 019Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0x19C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 019Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x19C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0x19C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0x19C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x19D);
#ifndef _LIB_BUILD
asm("RC1STA equ 019Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0x19D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 019Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0x19D);
#ifndef _LIB_BUILD
asm("RCSTA equ 019Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x19D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0x19D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0x19D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x19E);
#ifndef _LIB_BUILD
asm("TX1STA equ 019Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0x19E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 019Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0x19E);
#ifndef _LIB_BUILD
asm("TXSTA equ 019Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x19E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0x19E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0x19E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 019Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 019Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 019Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 019Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 019Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x19F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0x19F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0x19F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0x19F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0x19F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x20C);
#ifndef _LIB_BUILD
asm("WPUA equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x20C);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x20E);
#ifndef _LIB_BUILD
asm("WPUC equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x20E);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x211);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 0211h");
#endif
// aliases
extern volatile unsigned char           SSPBUF              __at(0x211);
#ifndef _LIB_BUILD
asm("SSPBUF equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1BUF0               :1;
        unsigned SSP1BUF1               :1;
        unsigned SSP1BUF2               :1;
        unsigned SSP1BUF3               :1;
        unsigned SSP1BUF4               :1;
        unsigned SSP1BUF5               :1;
        unsigned SSP1BUF6               :1;
        unsigned SSP1BUF7               :1;
    };
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
    struct {
        unsigned SSP1BUF                :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x211);
// bitfield macros
#define _SSP1BUF_SSP1BUF0_POSN                              0x0
#define _SSP1BUF_SSP1BUF0_POSITION                          0x0
#define _SSP1BUF_SSP1BUF0_SIZE                              0x1
#define _SSP1BUF_SSP1BUF0_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF0_MASK                              0x1
#define _SSP1BUF_SSP1BUF1_POSN                              0x1
#define _SSP1BUF_SSP1BUF1_POSITION                          0x1
#define _SSP1BUF_SSP1BUF1_SIZE                              0x1
#define _SSP1BUF_SSP1BUF1_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF1_MASK                              0x2
#define _SSP1BUF_SSP1BUF2_POSN                              0x2
#define _SSP1BUF_SSP1BUF2_POSITION                          0x2
#define _SSP1BUF_SSP1BUF2_SIZE                              0x1
#define _SSP1BUF_SSP1BUF2_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF2_MASK                              0x4
#define _SSP1BUF_SSP1BUF3_POSN                              0x3
#define _SSP1BUF_SSP1BUF3_POSITION                          0x3
#define _SSP1BUF_SSP1BUF3_SIZE                              0x1
#define _SSP1BUF_SSP1BUF3_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF3_MASK                              0x8
#define _SSP1BUF_SSP1BUF4_POSN                              0x4
#define _SSP1BUF_SSP1BUF4_POSITION                          0x4
#define _SSP1BUF_SSP1BUF4_SIZE                              0x1
#define _SSP1BUF_SSP1BUF4_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF4_MASK                              0x10
#define _SSP1BUF_SSP1BUF5_POSN                              0x5
#define _SSP1BUF_SSP1BUF5_POSITION                          0x5
#define _SSP1BUF_SSP1BUF5_SIZE                              0x1
#define _SSP1BUF_SSP1BUF5_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF5_MASK                              0x20
#define _SSP1BUF_SSP1BUF6_POSN                              0x6
#define _SSP1BUF_SSP1BUF6_POSITION                          0x6
#define _SSP1BUF_SSP1BUF6_SIZE                              0x1
#define _SSP1BUF_SSP1BUF6_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF6_MASK                              0x40
#define _SSP1BUF_SSP1BUF7_POSN                              0x7
#define _SSP1BUF_SSP1BUF7_POSITION                          0x7
#define _SSP1BUF_SSP1BUF7_SIZE                              0x1
#define _SSP1BUF_SSP1BUF7_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF7_MASK                              0x80
#define _SSP1BUF_BUF_POSN                                   0x0
#define _SSP1BUF_BUF_POSITION                               0x0
#define _SSP1BUF_BUF_SIZE                                   0x8
#define _SSP1BUF_BUF_LENGTH                                 0x8
#define _SSP1BUF_BUF_MASK                                   0xFF
#define _SSP1BUF_BUF0_POSN                                  0x0
#define _SSP1BUF_BUF0_POSITION                              0x0
#define _SSP1BUF_BUF0_SIZE                                  0x1
#define _SSP1BUF_BUF0_LENGTH                                0x1
#define _SSP1BUF_BUF0_MASK                                  0x1
#define _SSP1BUF_BUF1_POSN                                  0x1
#define _SSP1BUF_BUF1_POSITION                              0x1
#define _SSP1BUF_BUF1_SIZE                                  0x1
#define _SSP1BUF_BUF1_LENGTH                                0x1
#define _SSP1BUF_BUF1_MASK                                  0x2
#define _SSP1BUF_BUF2_POSN                                  0x2
#define _SSP1BUF_BUF2_POSITION                              0x2
#define _SSP1BUF_BUF2_SIZE                                  0x1
#define _SSP1BUF_BUF2_LENGTH                                0x1
#define _SSP1BUF_BUF2_MASK                                  0x4
#define _SSP1BUF_BUF3_POSN                                  0x3
#define _SSP1BUF_BUF3_POSITION                              0x3
#define _SSP1BUF_BUF3_SIZE                                  0x1
#define _SSP1BUF_BUF3_LENGTH                                0x1
#define _SSP1BUF_BUF3_MASK                                  0x8
#define _SSP1BUF_BUF4_POSN                                  0x4
#define _SSP1BUF_BUF4_POSITION                              0x4
#define _SSP1BUF_BUF4_SIZE                                  0x1
#define _SSP1BUF_BUF4_LENGTH                                0x1
#define _SSP1BUF_BUF4_MASK                                  0x10
#define _SSP1BUF_BUF5_POSN                                  0x5
#define _SSP1BUF_BUF5_POSITION                              0x5
#define _SSP1BUF_BUF5_SIZE                                  0x1
#define _SSP1BUF_BUF5_LENGTH                                0x1
#define _SSP1BUF_BUF5_MASK                                  0x20
#define _SSP1BUF_BUF6_POSN                                  0x6
#define _SSP1BUF_BUF6_POSITION                              0x6
#define _SSP1BUF_BUF6_SIZE                                  0x1
#define _SSP1BUF_BUF6_LENGTH                                0x1
#define _SSP1BUF_BUF6_MASK                                  0x40
#define _SSP1BUF_BUF7_POSN                                  0x7
#define _SSP1BUF_BUF7_POSITION                              0x7
#define _SSP1BUF_BUF7_SIZE                                  0x1
#define _SSP1BUF_BUF7_LENGTH                                0x1
#define _SSP1BUF_BUF7_MASK                                  0x80
#define _SSP1BUF_SSP1BUF_POSN                               0x0
#define _SSP1BUF_SSP1BUF_POSITION                           0x0
#define _SSP1BUF_SSP1BUF_SIZE                               0x8
#define _SSP1BUF_SSP1BUF_LENGTH                             0x8
#define _SSP1BUF_SSP1BUF_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSP1BUF0               :1;
        unsigned SSP1BUF1               :1;
        unsigned SSP1BUF2               :1;
        unsigned SSP1BUF3               :1;
        unsigned SSP1BUF4               :1;
        unsigned SSP1BUF5               :1;
        unsigned SSP1BUF6               :1;
        unsigned SSP1BUF7               :1;
    };
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
    struct {
        unsigned SSP1BUF                :8;
    };
} SSPBUFbits_t;
extern volatile SSPBUFbits_t SSPBUFbits __at(0x211);
// bitfield macros
#define _SSPBUF_SSP1BUF0_POSN                               0x0
#define _SSPBUF_SSP1BUF0_POSITION                           0x0
#define _SSPBUF_SSP1BUF0_SIZE                               0x1
#define _SSPBUF_SSP1BUF0_LENGTH                             0x1
#define _SSPBUF_SSP1BUF0_MASK                               0x1
#define _SSPBUF_SSP1BUF1_POSN                               0x1
#define _SSPBUF_SSP1BUF1_POSITION                           0x1
#define _SSPBUF_SSP1BUF1_SIZE                               0x1
#define _SSPBUF_SSP1BUF1_LENGTH                             0x1
#define _SSPBUF_SSP1BUF1_MASK                               0x2
#define _SSPBUF_SSP1BUF2_POSN                               0x2
#define _SSPBUF_SSP1BUF2_POSITION                           0x2
#define _SSPBUF_SSP1BUF2_SIZE                               0x1
#define _SSPBUF_SSP1BUF2_LENGTH                             0x1
#define _SSPBUF_SSP1BUF2_MASK                               0x4
#define _SSPBUF_SSP1BUF3_POSN                               0x3
#define _SSPBUF_SSP1BUF3_POSITION                           0x3
#define _SSPBUF_SSP1BUF3_SIZE                               0x1
#define _SSPBUF_SSP1BUF3_LENGTH                             0x1
#define _SSPBUF_SSP1BUF3_MASK                               0x8
#define _SSPBUF_SSP1BUF4_POSN                               0x4
#define _SSPBUF_SSP1BUF4_POSITION                           0x4
#define _SSPBUF_SSP1BUF4_SIZE                               0x1
#define _SSPBUF_SSP1BUF4_LENGTH                             0x1
#define _SSPBUF_SSP1BUF4_MASK                               0x10
#define _SSPBUF_SSP1BUF5_POSN                               0x5
#define _SSPBUF_SSP1BUF5_POSITION                           0x5
#define _SSPBUF_SSP1BUF5_SIZE                               0x1
#define _SSPBUF_SSP1BUF5_LENGTH                             0x1
#define _SSPBUF_SSP1BUF5_MASK                               0x20
#define _SSPBUF_SSP1BUF6_POSN                               0x6
#define _SSPBUF_SSP1BUF6_POSITION                           0x6
#define _SSPBUF_SSP1BUF6_SIZE                               0x1
#define _SSPBUF_SSP1BUF6_LENGTH                             0x1
#define _SSPBUF_SSP1BUF6_MASK                               0x40
#define _SSPBUF_SSP1BUF7_POSN                               0x7
#define _SSPBUF_SSP1BUF7_POSITION                           0x7
#define _SSPBUF_SSP1BUF7_SIZE                               0x1
#define _SSPBUF_SSP1BUF7_LENGTH                             0x1
#define _SSPBUF_SSP1BUF7_MASK                               0x80
#define _SSPBUF_BUF_POSN                                    0x0
#define _SSPBUF_BUF_POSITION                                0x0
#define _SSPBUF_BUF_SIZE                                    0x8
#define _SSPBUF_BUF_LENGTH                                  0x8
#define _SSPBUF_BUF_MASK                                    0xFF
#define _SSPBUF_BUF0_POSN                                   0x0
#define _SSPBUF_BUF0_POSITION                               0x0
#define _SSPBUF_BUF0_SIZE                                   0x1
#define _SSPBUF_BUF0_LENGTH                                 0x1
#define _SSPBUF_BUF0_MASK                                   0x1
#define _SSPBUF_BUF1_POSN                                   0x1
#define _SSPBUF_BUF1_POSITION                               0x1
#define _SSPBUF_BUF1_SIZE                                   0x1
#define _SSPBUF_BUF1_LENGTH                                 0x1
#define _SSPBUF_BUF1_MASK                                   0x2
#define _SSPBUF_BUF2_POSN                                   0x2
#define _SSPBUF_BUF2_POSITION                               0x2
#define _SSPBUF_BUF2_SIZE                                   0x1
#define _SSPBUF_BUF2_LENGTH                                 0x1
#define _SSPBUF_BUF2_MASK                                   0x4
#define _SSPBUF_BUF3_POSN                                   0x3
#define _SSPBUF_BUF3_POSITION                               0x3
#define _SSPBUF_BUF3_SIZE                                   0x1
#define _SSPBUF_BUF3_LENGTH                                 0x1
#define _SSPBUF_BUF3_MASK                                   0x8
#define _SSPBUF_BUF4_POSN                                   0x4
#define _SSPBUF_BUF4_POSITION                               0x4
#define _SSPBUF_BUF4_SIZE                                   0x1
#define _SSPBUF_BUF4_LENGTH                                 0x1
#define _SSPBUF_BUF4_MASK                                   0x10
#define _SSPBUF_BUF5_POSN                                   0x5
#define _SSPBUF_BUF5_POSITION                               0x5
#define _SSPBUF_BUF5_SIZE                                   0x1
#define _SSPBUF_BUF5_LENGTH                                 0x1
#define _SSPBUF_BUF5_MASK                                   0x20
#define _SSPBUF_BUF6_POSN                                   0x6
#define _SSPBUF_BUF6_POSITION                               0x6
#define _SSPBUF_BUF6_SIZE                                   0x1
#define _SSPBUF_BUF6_LENGTH                                 0x1
#define _SSPBUF_BUF6_MASK                                   0x40
#define _SSPBUF_BUF7_POSN                                   0x7
#define _SSPBUF_BUF7_POSITION                               0x7
#define _SSPBUF_BUF7_SIZE                                   0x1
#define _SSPBUF_BUF7_LENGTH                                 0x1
#define _SSPBUF_BUF7_MASK                                   0x80
#define _SSPBUF_SSP1BUF_POSN                                0x0
#define _SSPBUF_SSP1BUF_POSITION                            0x0
#define _SSPBUF_SSP1BUF_SIZE                                0x8
#define _SSPBUF_SSP1BUF_LENGTH                              0x8
#define _SSPBUF_SSP1BUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x212);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 0212h");
#endif
// aliases
extern volatile unsigned char           SSPADD              __at(0x212);
#ifndef _LIB_BUILD
asm("SSPADD equ 0212h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1ADD0               :1;
        unsigned SSP1ADD1               :1;
        unsigned SSP1ADD2               :1;
        unsigned SSP1ADD3               :1;
        unsigned SSP1ADD4               :1;
        unsigned SSP1ADD5               :1;
        unsigned SSP1ADD6               :1;
        unsigned SSP1ADD7               :1;
    };
    struct {
        unsigned ADD                    :8;
    };
    struct {
        unsigned ADD0                   :1;
        unsigned ADD1                   :1;
        unsigned ADD2                   :1;
        unsigned ADD3                   :1;
        unsigned ADD4                   :1;
        unsigned ADD5                   :1;
        unsigned ADD6                   :1;
        unsigned ADD7                   :1;
    };
    struct {
        unsigned SSP1ADD                :8;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x212);
// bitfield macros
#define _SSP1ADD_SSP1ADD0_POSN                              0x0
#define _SSP1ADD_SSP1ADD0_POSITION                          0x0
#define _SSP1ADD_SSP1ADD0_SIZE                              0x1
#define _SSP1ADD_SSP1ADD0_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD0_MASK                              0x1
#define _SSP1ADD_SSP1ADD1_POSN                              0x1
#define _SSP1ADD_SSP1ADD1_POSITION                          0x1
#define _SSP1ADD_SSP1ADD1_SIZE                              0x1
#define _SSP1ADD_SSP1ADD1_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD1_MASK                              0x2
#define _SSP1ADD_SSP1ADD2_POSN                              0x2
#define _SSP1ADD_SSP1ADD2_POSITION                          0x2
#define _SSP1ADD_SSP1ADD2_SIZE                              0x1
#define _SSP1ADD_SSP1ADD2_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD2_MASK                              0x4
#define _SSP1ADD_SSP1ADD3_POSN                              0x3
#define _SSP1ADD_SSP1ADD3_POSITION                          0x3
#define _SSP1ADD_SSP1ADD3_SIZE                              0x1
#define _SSP1ADD_SSP1ADD3_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD3_MASK                              0x8
#define _SSP1ADD_SSP1ADD4_POSN                              0x4
#define _SSP1ADD_SSP1ADD4_POSITION                          0x4
#define _SSP1ADD_SSP1ADD4_SIZE                              0x1
#define _SSP1ADD_SSP1ADD4_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD4_MASK                              0x10
#define _SSP1ADD_SSP1ADD5_POSN                              0x5
#define _SSP1ADD_SSP1ADD5_POSITION                          0x5
#define _SSP1ADD_SSP1ADD5_SIZE                              0x1
#define _SSP1ADD_SSP1ADD5_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD5_MASK                              0x20
#define _SSP1ADD_SSP1ADD6_POSN                              0x6
#define _SSP1ADD_SSP1ADD6_POSITION                          0x6
#define _SSP1ADD_SSP1ADD6_SIZE                              0x1
#define _SSP1ADD_SSP1ADD6_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD6_MASK                              0x40
#define _SSP1ADD_SSP1ADD7_POSN                              0x7
#define _SSP1ADD_SSP1ADD7_POSITION                          0x7
#define _SSP1ADD_SSP1ADD7_SIZE                              0x1
#define _SSP1ADD_SSP1ADD7_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD7_MASK                              0x80
#define _SSP1ADD_ADD_POSN                                   0x0
#define _SSP1ADD_ADD_POSITION                               0x0
#define _SSP1ADD_ADD_SIZE                                   0x8
#define _SSP1ADD_ADD_LENGTH                                 0x8
#define _SSP1ADD_ADD_MASK                                   0xFF
#define _SSP1ADD_ADD0_POSN                                  0x0
#define _SSP1ADD_ADD0_POSITION                              0x0
#define _SSP1ADD_ADD0_SIZE                                  0x1
#define _SSP1ADD_ADD0_LENGTH                                0x1
#define _SSP1ADD_ADD0_MASK                                  0x1
#define _SSP1ADD_ADD1_POSN                                  0x1
#define _SSP1ADD_ADD1_POSITION                              0x1
#define _SSP1ADD_ADD1_SIZE                                  0x1
#define _SSP1ADD_ADD1_LENGTH                                0x1
#define _SSP1ADD_ADD1_MASK                                  0x2
#define _SSP1ADD_ADD2_POSN                                  0x2
#define _SSP1ADD_ADD2_POSITION                              0x2
#define _SSP1ADD_ADD2_SIZE                                  0x1
#define _SSP1ADD_ADD2_LENGTH                                0x1
#define _SSP1ADD_ADD2_MASK                                  0x4
#define _SSP1ADD_ADD3_POSN                                  0x3
#define _SSP1ADD_ADD3_POSITION                              0x3
#define _SSP1ADD_ADD3_SIZE                                  0x1
#define _SSP1ADD_ADD3_LENGTH                                0x1
#define _SSP1ADD_ADD3_MASK                                  0x8
#define _SSP1ADD_ADD4_POSN                                  0x4
#define _SSP1ADD_ADD4_POSITION                              0x4
#define _SSP1ADD_ADD4_SIZE                                  0x1
#define _SSP1ADD_ADD4_LENGTH                                0x1
#define _SSP1ADD_ADD4_MASK                                  0x10
#define _SSP1ADD_ADD5_POSN                                  0x5
#define _SSP1ADD_ADD5_POSITION                              0x5
#define _SSP1ADD_ADD5_SIZE                                  0x1
#define _SSP1ADD_ADD5_LENGTH                                0x1
#define _SSP1ADD_ADD5_MASK                                  0x20
#define _SSP1ADD_ADD6_POSN                                  0x6
#define _SSP1ADD_ADD6_POSITION                              0x6
#define _SSP1ADD_ADD6_SIZE                                  0x1
#define _SSP1ADD_ADD6_LENGTH                                0x1
#define _SSP1ADD_ADD6_MASK                                  0x40
#define _SSP1ADD_ADD7_POSN                                  0x7
#define _SSP1ADD_ADD7_POSITION                              0x7
#define _SSP1ADD_ADD7_SIZE                                  0x1
#define _SSP1ADD_ADD7_LENGTH                                0x1
#define _SSP1ADD_ADD7_MASK                                  0x80
#define _SSP1ADD_SSP1ADD_POSN                               0x0
#define _SSP1ADD_SSP1ADD_POSITION                           0x0
#define _SSP1ADD_SSP1ADD_SIZE                               0x8
#define _SSP1ADD_SSP1ADD_LENGTH                             0x8
#define _SSP1ADD_SSP1ADD_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSP1ADD0               :1;
        unsigned SSP1ADD1               :1;
        unsigned SSP1ADD2               :1;
        unsigned SSP1ADD3               :1;
        unsigned SSP1ADD4               :1;
        unsigned SSP1ADD5               :1;
        unsigned SSP1ADD6               :1;
        unsigned SSP1ADD7               :1;
    };
    struct {
        unsigned ADD                    :8;
    };
    struct {
        unsigned ADD0                   :1;
        unsigned ADD1                   :1;
        unsigned ADD2                   :1;
        unsigned ADD3                   :1;
        unsigned ADD4                   :1;
        unsigned ADD5                   :1;
        unsigned ADD6                   :1;
        unsigned ADD7                   :1;
    };
    struct {
        unsigned SSP1ADD                :8;
    };
} SSPADDbits_t;
extern volatile SSPADDbits_t SSPADDbits __at(0x212);
// bitfield macros
#define _SSPADD_SSP1ADD0_POSN                               0x0
#define _SSPADD_SSP1ADD0_POSITION                           0x0
#define _SSPADD_SSP1ADD0_SIZE                               0x1
#define _SSPADD_SSP1ADD0_LENGTH                             0x1
#define _SSPADD_SSP1ADD0_MASK                               0x1
#define _SSPADD_SSP1ADD1_POSN                               0x1
#define _SSPADD_SSP1ADD1_POSITION                           0x1
#define _SSPADD_SSP1ADD1_SIZE                               0x1
#define _SSPADD_SSP1ADD1_LENGTH                             0x1
#define _SSPADD_SSP1ADD1_MASK                               0x2
#define _SSPADD_SSP1ADD2_POSN                               0x2
#define _SSPADD_SSP1ADD2_POSITION                           0x2
#define _SSPADD_SSP1ADD2_SIZE                               0x1
#define _SSPADD_SSP1ADD2_LENGTH                             0x1
#define _SSPADD_SSP1ADD2_MASK                               0x4
#define _SSPADD_SSP1ADD3_POSN                               0x3
#define _SSPADD_SSP1ADD3_POSITION                           0x3
#define _SSPADD_SSP1ADD3_SIZE                               0x1
#define _SSPADD_SSP1ADD3_LENGTH                             0x1
#define _SSPADD_SSP1ADD3_MASK                               0x8
#define _SSPADD_SSP1ADD4_POSN                               0x4
#define _SSPADD_SSP1ADD4_POSITION                           0x4
#define _SSPADD_SSP1ADD4_SIZE                               0x1
#define _SSPADD_SSP1ADD4_LENGTH                             0x1
#define _SSPADD_SSP1ADD4_MASK                               0x10
#define _SSPADD_SSP1ADD5_POSN                               0x5
#define _SSPADD_SSP1ADD5_POSITION                           0x5
#define _SSPADD_SSP1ADD5_SIZE                               0x1
#define _SSPADD_SSP1ADD5_LENGTH                             0x1
#define _SSPADD_SSP1ADD5_MASK                               0x20
#define _SSPADD_SSP1ADD6_POSN                               0x6
#define _SSPADD_SSP1ADD6_POSITION                           0x6
#define _SSPADD_SSP1ADD6_SIZE                               0x1
#define _SSPADD_SSP1ADD6_LENGTH                             0x1
#define _SSPADD_SSP1ADD6_MASK                               0x40
#define _SSPADD_SSP1ADD7_POSN                               0x7
#define _SSPADD_SSP1ADD7_POSITION                           0x7
#define _SSPADD_SSP1ADD7_SIZE                               0x1
#define _SSPADD_SSP1ADD7_LENGTH                             0x1
#define _SSPADD_SSP1ADD7_MASK                               0x80
#define _SSPADD_ADD_POSN                                    0x0
#define _SSPADD_ADD_POSITION                                0x0
#define _SSPADD_ADD_SIZE                                    0x8
#define _SSPADD_ADD_LENGTH                                  0x8
#define _SSPADD_ADD_MASK                                    0xFF
#define _SSPADD_ADD0_POSN                                   0x0
#define _SSPADD_ADD0_POSITION                               0x0
#define _SSPADD_ADD0_SIZE                                   0x1
#define _SSPADD_ADD0_LENGTH                                 0x1
#define _SSPADD_ADD0_MASK                                   0x1
#define _SSPADD_ADD1_POSN                                   0x1
#define _SSPADD_ADD1_POSITION                               0x1
#define _SSPADD_ADD1_SIZE                                   0x1
#define _SSPADD_ADD1_LENGTH                                 0x1
#define _SSPADD_ADD1_MASK                                   0x2
#define _SSPADD_ADD2_POSN                                   0x2
#define _SSPADD_ADD2_POSITION                               0x2
#define _SSPADD_ADD2_SIZE                                   0x1
#define _SSPADD_ADD2_LENGTH                                 0x1
#define _SSPADD_ADD2_MASK                                   0x4
#define _SSPADD_ADD3_POSN                                   0x3
#define _SSPADD_ADD3_POSITION                               0x3
#define _SSPADD_ADD3_SIZE                                   0x1
#define _SSPADD_ADD3_LENGTH                                 0x1
#define _SSPADD_ADD3_MASK                                   0x8
#define _SSPADD_ADD4_POSN                                   0x4
#define _SSPADD_ADD4_POSITION                               0x4
#define _SSPADD_ADD4_SIZE                                   0x1
#define _SSPADD_ADD4_LENGTH                                 0x1
#define _SSPADD_ADD4_MASK                                   0x10
#define _SSPADD_ADD5_POSN                                   0x5
#define _SSPADD_ADD5_POSITION                               0x5
#define _SSPADD_ADD5_SIZE                                   0x1
#define _SSPADD_ADD5_LENGTH                                 0x1
#define _SSPADD_ADD5_MASK                                   0x20
#define _SSPADD_ADD6_POSN                                   0x6
#define _SSPADD_ADD6_POSITION                               0x6
#define _SSPADD_ADD6_SIZE                                   0x1
#define _SSPADD_ADD6_LENGTH                                 0x1
#define _SSPADD_ADD6_MASK                                   0x40
#define _SSPADD_ADD7_POSN                                   0x7
#define _SSPADD_ADD7_POSITION                               0x7
#define _SSPADD_ADD7_SIZE                                   0x1
#define _SSPADD_ADD7_LENGTH                                 0x1
#define _SSPADD_ADD7_MASK                                   0x80
#define _SSPADD_SSP1ADD_POSN                                0x0
#define _SSPADD_SSP1ADD_POSITION                            0x0
#define _SSPADD_SSP1ADD_SIZE                                0x8
#define _SSPADD_SSP1ADD_LENGTH                              0x8
#define _SSPADD_SSP1ADD_MASK                                0xFF

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x213);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 0213h");
#endif
// aliases
extern volatile unsigned char           SSPMSK              __at(0x213);
#ifndef _LIB_BUILD
asm("SSPMSK equ 0213h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1MSK0               :1;
        unsigned SSP1MSK1               :1;
        unsigned SSP1MSK2               :1;
        unsigned SSP1MSK3               :1;
        unsigned SSP1MSK4               :1;
        unsigned SSP1MSK5               :1;
        unsigned SSP1MSK6               :1;
        unsigned SSP1MSK7               :1;
    };
    struct {
        unsigned MSK                    :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned SSP1MSK                :8;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x213);
// bitfield macros
#define _SSP1MSK_SSP1MSK0_POSN                              0x0
#define _SSP1MSK_SSP1MSK0_POSITION                          0x0
#define _SSP1MSK_SSP1MSK0_SIZE                              0x1
#define _SSP1MSK_SSP1MSK0_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK0_MASK                              0x1
#define _SSP1MSK_SSP1MSK1_POSN                              0x1
#define _SSP1MSK_SSP1MSK1_POSITION                          0x1
#define _SSP1MSK_SSP1MSK1_SIZE                              0x1
#define _SSP1MSK_SSP1MSK1_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK1_MASK                              0x2
#define _SSP1MSK_SSP1MSK2_POSN                              0x2
#define _SSP1MSK_SSP1MSK2_POSITION                          0x2
#define _SSP1MSK_SSP1MSK2_SIZE                              0x1
#define _SSP1MSK_SSP1MSK2_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK2_MASK                              0x4
#define _SSP1MSK_SSP1MSK3_POSN                              0x3
#define _SSP1MSK_SSP1MSK3_POSITION                          0x3
#define _SSP1MSK_SSP1MSK3_SIZE                              0x1
#define _SSP1MSK_SSP1MSK3_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK3_MASK                              0x8
#define _SSP1MSK_SSP1MSK4_POSN                              0x4
#define _SSP1MSK_SSP1MSK4_POSITION                          0x4
#define _SSP1MSK_SSP1MSK4_SIZE                              0x1
#define _SSP1MSK_SSP1MSK4_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK4_MASK                              0x10
#define _SSP1MSK_SSP1MSK5_POSN                              0x5
#define _SSP1MSK_SSP1MSK5_POSITION                          0x5
#define _SSP1MSK_SSP1MSK5_SIZE                              0x1
#define _SSP1MSK_SSP1MSK5_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK5_MASK                              0x20
#define _SSP1MSK_SSP1MSK6_POSN                              0x6
#define _SSP1MSK_SSP1MSK6_POSITION                          0x6
#define _SSP1MSK_SSP1MSK6_SIZE                              0x1
#define _SSP1MSK_SSP1MSK6_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK6_MASK                              0x40
#define _SSP1MSK_SSP1MSK7_POSN                              0x7
#define _SSP1MSK_SSP1MSK7_POSITION                          0x7
#define _SSP1MSK_SSP1MSK7_SIZE                              0x1
#define _SSP1MSK_SSP1MSK7_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK7_MASK                              0x80
#define _SSP1MSK_MSK_POSN                                   0x0
#define _SSP1MSK_MSK_POSITION                               0x0
#define _SSP1MSK_MSK_SIZE                                   0x8
#define _SSP1MSK_MSK_LENGTH                                 0x8
#define _SSP1MSK_MSK_MASK                                   0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80
#define _SSP1MSK_SSP1MSK_POSN                               0x0
#define _SSP1MSK_SSP1MSK_POSITION                           0x0
#define _SSP1MSK_SSP1MSK_SIZE                               0x8
#define _SSP1MSK_SSP1MSK_LENGTH                             0x8
#define _SSP1MSK_SSP1MSK_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSP1MSK0               :1;
        unsigned SSP1MSK1               :1;
        unsigned SSP1MSK2               :1;
        unsigned SSP1MSK3               :1;
        unsigned SSP1MSK4               :1;
        unsigned SSP1MSK5               :1;
        unsigned SSP1MSK6               :1;
        unsigned SSP1MSK7               :1;
    };
    struct {
        unsigned MSK                    :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned SSP1MSK                :8;
    };
} SSPMSKbits_t;
extern volatile SSPMSKbits_t SSPMSKbits __at(0x213);
// bitfield macros
#define _SSPMSK_SSP1MSK0_POSN                               0x0
#define _SSPMSK_SSP1MSK0_POSITION                           0x0
#define _SSPMSK_SSP1MSK0_SIZE                               0x1
#define _SSPMSK_SSP1MSK0_LENGTH                             0x1
#define _SSPMSK_SSP1MSK0_MASK                               0x1
#define _SSPMSK_SSP1MSK1_POSN                               0x1
#define _SSPMSK_SSP1MSK1_POSITION                           0x1
#define _SSPMSK_SSP1MSK1_SIZE                               0x1
#define _SSPMSK_SSP1MSK1_LENGTH                             0x1
#define _SSPMSK_SSP1MSK1_MASK                               0x2
#define _SSPMSK_SSP1MSK2_POSN                               0x2
#define _SSPMSK_SSP1MSK2_POSITION                           0x2
#define _SSPMSK_SSP1MSK2_SIZE                               0x1
#define _SSPMSK_SSP1MSK2_LENGTH                             0x1
#define _SSPMSK_SSP1MSK2_MASK                               0x4
#define _SSPMSK_SSP1MSK3_POSN                               0x3
#define _SSPMSK_SSP1MSK3_POSITION                           0x3
#define _SSPMSK_SSP1MSK3_SIZE                               0x1
#define _SSPMSK_SSP1MSK3_LENGTH                             0x1
#define _SSPMSK_SSP1MSK3_MASK                               0x8
#define _SSPMSK_SSP1MSK4_POSN                               0x4
#define _SSPMSK_SSP1MSK4_POSITION                           0x4
#define _SSPMSK_SSP1MSK4_SIZE                               0x1
#define _SSPMSK_SSP1MSK4_LENGTH                             0x1
#define _SSPMSK_SSP1MSK4_MASK                               0x10
#define _SSPMSK_SSP1MSK5_POSN                               0x5
#define _SSPMSK_SSP1MSK5_POSITION                           0x5
#define _SSPMSK_SSP1MSK5_SIZE                               0x1
#define _SSPMSK_SSP1MSK5_LENGTH                             0x1
#define _SSPMSK_SSP1MSK5_MASK                               0x20
#define _SSPMSK_SSP1MSK6_POSN                               0x6
#define _SSPMSK_SSP1MSK6_POSITION                           0x6
#define _SSPMSK_SSP1MSK6_SIZE                               0x1
#define _SSPMSK_SSP1MSK6_LENGTH                             0x1
#define _SSPMSK_SSP1MSK6_MASK                               0x40
#define _SSPMSK_SSP1MSK7_POSN                               0x7
#define _SSPMSK_SSP1MSK7_POSITION                           0x7
#define _SSPMSK_SSP1MSK7_SIZE                               0x1
#define _SSPMSK_SSP1MSK7_LENGTH                             0x1
#define _SSPMSK_SSP1MSK7_MASK                               0x80
#define _SSPMSK_MSK_POSN                                    0x0
#define _SSPMSK_MSK_POSITION                                0x0
#define _SSPMSK_MSK_SIZE                                    0x8
#define _SSPMSK_MSK_LENGTH                                  0x8
#define _SSPMSK_MSK_MASK                                    0xFF
#define _SSPMSK_MSK0_POSN                                   0x0
#define _SSPMSK_MSK0_POSITION                               0x0
#define _SSPMSK_MSK0_SIZE                                   0x1
#define _SSPMSK_MSK0_LENGTH                                 0x1
#define _SSPMSK_MSK0_MASK                                   0x1
#define _SSPMSK_MSK1_POSN                                   0x1
#define _SSPMSK_MSK1_POSITION                               0x1
#define _SSPMSK_MSK1_SIZE                                   0x1
#define _SSPMSK_MSK1_LENGTH                                 0x1
#define _SSPMSK_MSK1_MASK                                   0x2
#define _SSPMSK_MSK2_POSN                                   0x2
#define _SSPMSK_MSK2_POSITION                               0x2
#define _SSPMSK_MSK2_SIZE                                   0x1
#define _SSPMSK_MSK2_LENGTH                                 0x1
#define _SSPMSK_MSK2_MASK                                   0x4
#define _SSPMSK_MSK3_POSN                                   0x3
#define _SSPMSK_MSK3_POSITION                               0x3
#define _SSPMSK_MSK3_SIZE                                   0x1
#define _SSPMSK_MSK3_LENGTH                                 0x1
#define _SSPMSK_MSK3_MASK                                   0x8
#define _SSPMSK_MSK4_POSN                                   0x4
#define _SSPMSK_MSK4_POSITION                               0x4
#define _SSPMSK_MSK4_SIZE                                   0x1
#define _SSPMSK_MSK4_LENGTH                                 0x1
#define _SSPMSK_MSK4_MASK                                   0x10
#define _SSPMSK_MSK5_POSN                                   0x5
#define _SSPMSK_MSK5_POSITION                               0x5
#define _SSPMSK_MSK5_SIZE                                   0x1
#define _SSPMSK_MSK5_LENGTH                                 0x1
#define _SSPMSK_MSK5_MASK                                   0x20
#define _SSPMSK_MSK6_POSN                                   0x6
#define _SSPMSK_MSK6_POSITION                               0x6
#define _SSPMSK_MSK6_SIZE                                   0x1
#define _SSPMSK_MSK6_LENGTH                                 0x1
#define _SSPMSK_MSK6_MASK                                   0x40
#define _SSPMSK_MSK7_POSN                                   0x7
#define _SSPMSK_MSK7_POSITION                               0x7
#define _SSPMSK_MSK7_SIZE                                   0x1
#define _SSPMSK_MSK7_LENGTH                                 0x1
#define _SSPMSK_MSK7_MASK                                   0x80
#define _SSPMSK_SSP1MSK_POSN                                0x0
#define _SSPMSK_SSP1MSK_POSITION                            0x0
#define _SSPMSK_SSP1MSK_SIZE                                0x8
#define _SSPMSK_SSP1MSK_LENGTH                              0x8
#define _SSPMSK_SSP1MSK_MASK                                0xFF

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x214);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 0214h");
#endif
// aliases
extern volatile unsigned char           SSPSTAT             __at(0x214);
#ifndef _LIB_BUILD
asm("SSPSTAT equ 0214h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x214);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits __at(0x214);
// bitfield macros
#define _SSPSTAT_BF_POSN                                    0x0
#define _SSPSTAT_BF_POSITION                                0x0
#define _SSPSTAT_BF_SIZE                                    0x1
#define _SSPSTAT_BF_LENGTH                                  0x1
#define _SSPSTAT_BF_MASK                                    0x1
#define _SSPSTAT_UA_POSN                                    0x1
#define _SSPSTAT_UA_POSITION                                0x1
#define _SSPSTAT_UA_SIZE                                    0x1
#define _SSPSTAT_UA_LENGTH                                  0x1
#define _SSPSTAT_UA_MASK                                    0x2
#define _SSPSTAT_R_nW_POSN                                  0x2
#define _SSPSTAT_R_nW_POSITION                              0x2
#define _SSPSTAT_R_nW_SIZE                                  0x1
#define _SSPSTAT_R_nW_LENGTH                                0x1
#define _SSPSTAT_R_nW_MASK                                  0x4
#define _SSPSTAT_S_POSN                                     0x3
#define _SSPSTAT_S_POSITION                                 0x3
#define _SSPSTAT_S_SIZE                                     0x1
#define _SSPSTAT_S_LENGTH                                   0x1
#define _SSPSTAT_S_MASK                                     0x8
#define _SSPSTAT_P_POSN                                     0x4
#define _SSPSTAT_P_POSITION                                 0x4
#define _SSPSTAT_P_SIZE                                     0x1
#define _SSPSTAT_P_LENGTH                                   0x1
#define _SSPSTAT_P_MASK                                     0x10
#define _SSPSTAT_D_nA_POSN                                  0x5
#define _SSPSTAT_D_nA_POSITION                              0x5
#define _SSPSTAT_D_nA_SIZE                                  0x1
#define _SSPSTAT_D_nA_LENGTH                                0x1
#define _SSPSTAT_D_nA_MASK                                  0x20
#define _SSPSTAT_CKE_POSN                                   0x6
#define _SSPSTAT_CKE_POSITION                               0x6
#define _SSPSTAT_CKE_SIZE                                   0x1
#define _SSPSTAT_CKE_LENGTH                                 0x1
#define _SSPSTAT_CKE_MASK                                   0x40
#define _SSPSTAT_SMP_POSN                                   0x7
#define _SSPSTAT_SMP_POSITION                               0x7
#define _SSPSTAT_SMP_SIZE                                   0x1
#define _SSPSTAT_SMP_LENGTH                                 0x1
#define _SSPSTAT_SMP_MASK                                   0x80

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x215);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0215h");
#endif
// aliases
extern volatile unsigned char           SSPCON              __at(0x215);
#ifndef _LIB_BUILD
asm("SSPCON equ 0215h");
#endif
extern volatile unsigned char           SSPCON1             __at(0x215);
#ifndef _LIB_BUILD
asm("SSPCON1 equ 0215h");
#endif
extern volatile unsigned char           SSP1CON             __at(0x215);
#ifndef _LIB_BUILD
asm("SSP1CON equ 0215h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x215);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits __at(0x215);
// bitfield macros
#define _SSPCON_SSPM_POSN                                   0x0
#define _SSPCON_SSPM_POSITION                               0x0
#define _SSPCON_SSPM_SIZE                                   0x4
#define _SSPCON_SSPM_LENGTH                                 0x4
#define _SSPCON_SSPM_MASK                                   0xF
#define _SSPCON_CKP_POSN                                    0x4
#define _SSPCON_CKP_POSITION                                0x4
#define _SSPCON_CKP_SIZE                                    0x1
#define _SSPCON_CKP_LENGTH                                  0x1
#define _SSPCON_CKP_MASK                                    0x10
#define _SSPCON_SSPEN_POSN                                  0x5
#define _SSPCON_SSPEN_POSITION                              0x5
#define _SSPCON_SSPEN_SIZE                                  0x1
#define _SSPCON_SSPEN_LENGTH                                0x1
#define _SSPCON_SSPEN_MASK                                  0x20
#define _SSPCON_SSPOV_POSN                                  0x6
#define _SSPCON_SSPOV_POSITION                              0x6
#define _SSPCON_SSPOV_SIZE                                  0x1
#define _SSPCON_SSPOV_LENGTH                                0x1
#define _SSPCON_SSPOV_MASK                                  0x40
#define _SSPCON_WCOL_POSN                                   0x7
#define _SSPCON_WCOL_POSITION                               0x7
#define _SSPCON_WCOL_SIZE                                   0x1
#define _SSPCON_WCOL_LENGTH                                 0x1
#define _SSPCON_WCOL_MASK                                   0x80
#define _SSPCON_SSPM0_POSN                                  0x0
#define _SSPCON_SSPM0_POSITION                              0x0
#define _SSPCON_SSPM0_SIZE                                  0x1
#define _SSPCON_SSPM0_LENGTH                                0x1
#define _SSPCON_SSPM0_MASK                                  0x1
#define _SSPCON_SSPM1_POSN                                  0x1
#define _SSPCON_SSPM1_POSITION                              0x1
#define _SSPCON_SSPM1_SIZE                                  0x1
#define _SSPCON_SSPM1_LENGTH                                0x1
#define _SSPCON_SSPM1_MASK                                  0x2
#define _SSPCON_SSPM2_POSN                                  0x2
#define _SSPCON_SSPM2_POSITION                              0x2
#define _SSPCON_SSPM2_SIZE                                  0x1
#define _SSPCON_SSPM2_LENGTH                                0x1
#define _SSPCON_SSPM2_MASK                                  0x4
#define _SSPCON_SSPM3_POSN                                  0x3
#define _SSPCON_SSPM3_POSITION                              0x3
#define _SSPCON_SSPM3_SIZE                                  0x1
#define _SSPCON_SSPM3_LENGTH                                0x1
#define _SSPCON_SSPM3_MASK                                  0x8
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSPCON1bits_t;
extern volatile SSPCON1bits_t SSPCON1bits __at(0x215);
// bitfield macros
#define _SSPCON1_SSPM_POSN                                  0x0
#define _SSPCON1_SSPM_POSITION                              0x0
#define _SSPCON1_SSPM_SIZE                                  0x4
#define _SSPCON1_SSPM_LENGTH                                0x4
#define _SSPCON1_SSPM_MASK                                  0xF
#define _SSPCON1_CKP_POSN                                   0x4
#define _SSPCON1_CKP_POSITION                               0x4
#define _SSPCON1_CKP_SIZE                                   0x1
#define _SSPCON1_CKP_LENGTH                                 0x1
#define _SSPCON1_CKP_MASK                                   0x10
#define _SSPCON1_SSPEN_POSN                                 0x5
#define _SSPCON1_SSPEN_POSITION                             0x5
#define _SSPCON1_SSPEN_SIZE                                 0x1
#define _SSPCON1_SSPEN_LENGTH                               0x1
#define _SSPCON1_SSPEN_MASK                                 0x20
#define _SSPCON1_SSPOV_POSN                                 0x6
#define _SSPCON1_SSPOV_POSITION                             0x6
#define _SSPCON1_SSPOV_SIZE                                 0x1
#define _SSPCON1_SSPOV_LENGTH                               0x1
#define _SSPCON1_SSPOV_MASK                                 0x40
#define _SSPCON1_WCOL_POSN                                  0x7
#define _SSPCON1_WCOL_POSITION                              0x7
#define _SSPCON1_WCOL_SIZE                                  0x1
#define _SSPCON1_WCOL_LENGTH                                0x1
#define _SSPCON1_WCOL_MASK                                  0x80
#define _SSPCON1_SSPM0_POSN                                 0x0
#define _SSPCON1_SSPM0_POSITION                             0x0
#define _SSPCON1_SSPM0_SIZE                                 0x1
#define _SSPCON1_SSPM0_LENGTH                               0x1
#define _SSPCON1_SSPM0_MASK                                 0x1
#define _SSPCON1_SSPM1_POSN                                 0x1
#define _SSPCON1_SSPM1_POSITION                             0x1
#define _SSPCON1_SSPM1_SIZE                                 0x1
#define _SSPCON1_SSPM1_LENGTH                               0x1
#define _SSPCON1_SSPM1_MASK                                 0x2
#define _SSPCON1_SSPM2_POSN                                 0x2
#define _SSPCON1_SSPM2_POSITION                             0x2
#define _SSPCON1_SSPM2_SIZE                                 0x1
#define _SSPCON1_SSPM2_LENGTH                               0x1
#define _SSPCON1_SSPM2_MASK                                 0x4
#define _SSPCON1_SSPM3_POSN                                 0x3
#define _SSPCON1_SSPM3_POSITION                             0x3
#define _SSPCON1_SSPM3_SIZE                                 0x1
#define _SSPCON1_SSPM3_LENGTH                               0x1
#define _SSPCON1_SSPM3_MASK                                 0x8
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSP1CONbits_t;
extern volatile SSP1CONbits_t SSP1CONbits __at(0x215);
// bitfield macros
#define _SSP1CON_SSPM_POSN                                  0x0
#define _SSP1CON_SSPM_POSITION                              0x0
#define _SSP1CON_SSPM_SIZE                                  0x4
#define _SSP1CON_SSPM_LENGTH                                0x4
#define _SSP1CON_SSPM_MASK                                  0xF
#define _SSP1CON_CKP_POSN                                   0x4
#define _SSP1CON_CKP_POSITION                               0x4
#define _SSP1CON_CKP_SIZE                                   0x1
#define _SSP1CON_CKP_LENGTH                                 0x1
#define _SSP1CON_CKP_MASK                                   0x10
#define _SSP1CON_SSPEN_POSN                                 0x5
#define _SSP1CON_SSPEN_POSITION                             0x5
#define _SSP1CON_SSPEN_SIZE                                 0x1
#define _SSP1CON_SSPEN_LENGTH                               0x1
#define _SSP1CON_SSPEN_MASK                                 0x20
#define _SSP1CON_SSPOV_POSN                                 0x6
#define _SSP1CON_SSPOV_POSITION                             0x6
#define _SSP1CON_SSPOV_SIZE                                 0x1
#define _SSP1CON_SSPOV_LENGTH                               0x1
#define _SSP1CON_SSPOV_MASK                                 0x40
#define _SSP1CON_WCOL_POSN                                  0x7
#define _SSP1CON_WCOL_POSITION                              0x7
#define _SSP1CON_WCOL_SIZE                                  0x1
#define _SSP1CON_WCOL_LENGTH                                0x1
#define _SSP1CON_WCOL_MASK                                  0x80
#define _SSP1CON_SSPM0_POSN                                 0x0
#define _SSP1CON_SSPM0_POSITION                             0x0
#define _SSP1CON_SSPM0_SIZE                                 0x1
#define _SSP1CON_SSPM0_LENGTH                               0x1
#define _SSP1CON_SSPM0_MASK                                 0x1
#define _SSP1CON_SSPM1_POSN                                 0x1
#define _SSP1CON_SSPM1_POSITION                             0x1
#define _SSP1CON_SSPM1_SIZE                                 0x1
#define _SSP1CON_SSPM1_LENGTH                               0x1
#define _SSP1CON_SSPM1_MASK                                 0x2
#define _SSP1CON_SSPM2_POSN                                 0x2
#define _SSP1CON_SSPM2_POSITION                             0x2
#define _SSP1CON_SSPM2_SIZE                                 0x1
#define _SSP1CON_SSPM2_LENGTH                               0x1
#define _SSP1CON_SSPM2_MASK                                 0x4
#define _SSP1CON_SSPM3_POSN                                 0x3
#define _SSP1CON_SSPM3_POSITION                             0x3
#define _SSP1CON_SSPM3_SIZE                                 0x1
#define _SSP1CON_SSPM3_LENGTH                               0x1
#define _SSP1CON_SSPM3_MASK                                 0x8

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x216);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0216h");
#endif
// aliases
extern volatile unsigned char           SSPCON2             __at(0x216);
#ifndef _LIB_BUILD
asm("SSPCON2 equ 0216h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x216);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits __at(0x216);
// bitfield macros
#define _SSPCON2_SEN_POSN                                   0x0
#define _SSPCON2_SEN_POSITION                               0x0
#define _SSPCON2_SEN_SIZE                                   0x1
#define _SSPCON2_SEN_LENGTH                                 0x1
#define _SSPCON2_SEN_MASK                                   0x1
#define _SSPCON2_RSEN_POSN                                  0x1
#define _SSPCON2_RSEN_POSITION                              0x1
#define _SSPCON2_RSEN_SIZE                                  0x1
#define _SSPCON2_RSEN_LENGTH                                0x1
#define _SSPCON2_RSEN_MASK                                  0x2
#define _SSPCON2_PEN_POSN                                   0x2
#define _SSPCON2_PEN_POSITION                               0x2
#define _SSPCON2_PEN_SIZE                                   0x1
#define _SSPCON2_PEN_LENGTH                                 0x1
#define _SSPCON2_PEN_MASK                                   0x4
#define _SSPCON2_RCEN_POSN                                  0x3
#define _SSPCON2_RCEN_POSITION                              0x3
#define _SSPCON2_RCEN_SIZE                                  0x1
#define _SSPCON2_RCEN_LENGTH                                0x1
#define _SSPCON2_RCEN_MASK                                  0x8
#define _SSPCON2_ACKEN_POSN                                 0x4
#define _SSPCON2_ACKEN_POSITION                             0x4
#define _SSPCON2_ACKEN_SIZE                                 0x1
#define _SSPCON2_ACKEN_LENGTH                               0x1
#define _SSPCON2_ACKEN_MASK                                 0x10
#define _SSPCON2_ACKDT_POSN                                 0x5
#define _SSPCON2_ACKDT_POSITION                             0x5
#define _SSPCON2_ACKDT_SIZE                                 0x1
#define _SSPCON2_ACKDT_LENGTH                               0x1
#define _SSPCON2_ACKDT_MASK                                 0x20
#define _SSPCON2_ACKSTAT_POSN                               0x6
#define _SSPCON2_ACKSTAT_POSITION                           0x6
#define _SSPCON2_ACKSTAT_SIZE                               0x1
#define _SSPCON2_ACKSTAT_LENGTH                             0x1
#define _SSPCON2_ACKSTAT_MASK                               0x40
#define _SSPCON2_GCEN_POSN                                  0x7
#define _SSPCON2_GCEN_POSITION                              0x7
#define _SSPCON2_GCEN_SIZE                                  0x1
#define _SSPCON2_GCEN_LENGTH                                0x1
#define _SSPCON2_GCEN_MASK                                  0x80

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x217);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0217h");
#endif
// aliases
extern volatile unsigned char           SSPCON3             __at(0x217);
#ifndef _LIB_BUILD
asm("SSPCON3 equ 0217h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x217);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSPCON3bits_t;
extern volatile SSPCON3bits_t SSPCON3bits __at(0x217);
// bitfield macros
#define _SSPCON3_DHEN_POSN                                  0x0
#define _SSPCON3_DHEN_POSITION                              0x0
#define _SSPCON3_DHEN_SIZE                                  0x1
#define _SSPCON3_DHEN_LENGTH                                0x1
#define _SSPCON3_DHEN_MASK                                  0x1
#define _SSPCON3_AHEN_POSN                                  0x1
#define _SSPCON3_AHEN_POSITION                              0x1
#define _SSPCON3_AHEN_SIZE                                  0x1
#define _SSPCON3_AHEN_LENGTH                                0x1
#define _SSPCON3_AHEN_MASK                                  0x2
#define _SSPCON3_SBCDE_POSN                                 0x2
#define _SSPCON3_SBCDE_POSITION                             0x2
#define _SSPCON3_SBCDE_SIZE                                 0x1
#define _SSPCON3_SBCDE_LENGTH                               0x1
#define _SSPCON3_SBCDE_MASK                                 0x4
#define _SSPCON3_SDAHT_POSN                                 0x3
#define _SSPCON3_SDAHT_POSITION                             0x3
#define _SSPCON3_SDAHT_SIZE                                 0x1
#define _SSPCON3_SDAHT_LENGTH                               0x1
#define _SSPCON3_SDAHT_MASK                                 0x8
#define _SSPCON3_BOEN_POSN                                  0x4
#define _SSPCON3_BOEN_POSITION                              0x4
#define _SSPCON3_BOEN_SIZE                                  0x1
#define _SSPCON3_BOEN_LENGTH                                0x1
#define _SSPCON3_BOEN_MASK                                  0x10
#define _SSPCON3_SCIE_POSN                                  0x5
#define _SSPCON3_SCIE_POSITION                              0x5
#define _SSPCON3_SCIE_SIZE                                  0x1
#define _SSPCON3_SCIE_LENGTH                                0x1
#define _SSPCON3_SCIE_MASK                                  0x20
#define _SSPCON3_PCIE_POSN                                  0x6
#define _SSPCON3_PCIE_POSITION                              0x6
#define _SSPCON3_PCIE_SIZE                                  0x1
#define _SSPCON3_PCIE_LENGTH                                0x1
#define _SSPCON3_PCIE_MASK                                  0x40
#define _SSPCON3_ACKTIM_POSN                                0x7
#define _SSPCON3_ACKTIM_POSITION                            0x7
#define _SSPCON3_ACKTIM_SIZE                                0x1
#define _SSPCON3_ACKTIM_LENGTH                              0x1
#define _SSPCON3_ACKTIM_MASK                                0x80

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x21D);
#ifndef _LIB_BUILD
asm("BORCON equ 021Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :5;
        unsigned BORFS                  :1;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x21D);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_BORFS_POSN                                  0x6
#define _BORCON_BORFS_POSITION                              0x6
#define _BORCON_BORFS_SIZE                                  0x1
#define _BORCON_BORFS_LENGTH                                0x1
#define _BORCON_BORFS_MASK                                  0x40
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x21E);
#ifndef _LIB_BUILD
asm("FVRCON equ 021Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x21E);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: ZCD1CON
#define ZCD1CON ZCD1CON
extern volatile unsigned char           ZCD1CON             __at(0x21F);
#ifndef _LIB_BUILD
asm("ZCD1CON equ 021Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCD1INTN               :1;
        unsigned ZCD1INTP               :1;
        unsigned                        :2;
        unsigned ZCD1POL                :1;
        unsigned ZCD1OUT                :1;
        unsigned                        :1;
        unsigned ZCD1EN                 :1;
    };
} ZCD1CONbits_t;
extern volatile ZCD1CONbits_t ZCD1CONbits __at(0x21F);
// bitfield macros
#define _ZCD1CON_ZCD1INTN_POSN                              0x0
#define _ZCD1CON_ZCD1INTN_POSITION                          0x0
#define _ZCD1CON_ZCD1INTN_SIZE                              0x1
#define _ZCD1CON_ZCD1INTN_LENGTH                            0x1
#define _ZCD1CON_ZCD1INTN_MASK                              0x1
#define _ZCD1CON_ZCD1INTP_POSN                              0x1
#define _ZCD1CON_ZCD1INTP_POSITION                          0x1
#define _ZCD1CON_ZCD1INTP_SIZE                              0x1
#define _ZCD1CON_ZCD1INTP_LENGTH                            0x1
#define _ZCD1CON_ZCD1INTP_MASK                              0x2
#define _ZCD1CON_ZCD1POL_POSN                               0x4
#define _ZCD1CON_ZCD1POL_POSITION                           0x4
#define _ZCD1CON_ZCD1POL_SIZE                               0x1
#define _ZCD1CON_ZCD1POL_LENGTH                             0x1
#define _ZCD1CON_ZCD1POL_MASK                               0x10
#define _ZCD1CON_ZCD1OUT_POSN                               0x5
#define _ZCD1CON_ZCD1OUT_POSITION                           0x5
#define _ZCD1CON_ZCD1OUT_SIZE                               0x1
#define _ZCD1CON_ZCD1OUT_LENGTH                             0x1
#define _ZCD1CON_ZCD1OUT_MASK                               0x20
#define _ZCD1CON_ZCD1EN_POSN                                0x7
#define _ZCD1CON_ZCD1EN_POSITION                            0x7
#define _ZCD1CON_ZCD1EN_SIZE                                0x1
#define _ZCD1CON_ZCD1EN_LENGTH                              0x1
#define _ZCD1CON_ZCD1EN_MASK                                0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x28C);
#ifndef _LIB_BUILD
asm("ODCONA equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODA0                   :1;
        unsigned ODA1                   :1;
        unsigned ODA2                   :1;
        unsigned                        :1;
        unsigned ODA4                   :1;
        unsigned ODA5                   :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x28C);
// bitfield macros
#define _ODCONA_ODA0_POSN                                   0x0
#define _ODCONA_ODA0_POSITION                               0x0
#define _ODCONA_ODA0_SIZE                                   0x1
#define _ODCONA_ODA0_LENGTH                                 0x1
#define _ODCONA_ODA0_MASK                                   0x1
#define _ODCONA_ODA1_POSN                                   0x1
#define _ODCONA_ODA1_POSITION                               0x1
#define _ODCONA_ODA1_SIZE                                   0x1
#define _ODCONA_ODA1_LENGTH                                 0x1
#define _ODCONA_ODA1_MASK                                   0x2
#define _ODCONA_ODA2_POSN                                   0x2
#define _ODCONA_ODA2_POSITION                               0x2
#define _ODCONA_ODA2_SIZE                                   0x1
#define _ODCONA_ODA2_LENGTH                                 0x1
#define _ODCONA_ODA2_MASK                                   0x4
#define _ODCONA_ODA4_POSN                                   0x4
#define _ODCONA_ODA4_POSITION                               0x4
#define _ODCONA_ODA4_SIZE                                   0x1
#define _ODCONA_ODA4_LENGTH                                 0x1
#define _ODCONA_ODA4_MASK                                   0x10
#define _ODCONA_ODA5_POSN                                   0x5
#define _ODCONA_ODA5_POSITION                               0x5
#define _ODCONA_ODA5_SIZE                                   0x1
#define _ODCONA_ODA5_LENGTH                                 0x1
#define _ODCONA_ODA5_MASK                                   0x20

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x28E);
#ifndef _LIB_BUILD
asm("ODCONC equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODC0                   :1;
        unsigned ODC1                   :1;
        unsigned ODC2                   :1;
        unsigned ODC3                   :1;
        unsigned ODC4                   :1;
        unsigned ODC5                   :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x28E);
// bitfield macros
#define _ODCONC_ODC0_POSN                                   0x0
#define _ODCONC_ODC0_POSITION                               0x0
#define _ODCONC_ODC0_SIZE                                   0x1
#define _ODCONC_ODC0_LENGTH                                 0x1
#define _ODCONC_ODC0_MASK                                   0x1
#define _ODCONC_ODC1_POSN                                   0x1
#define _ODCONC_ODC1_POSITION                               0x1
#define _ODCONC_ODC1_SIZE                                   0x1
#define _ODCONC_ODC1_LENGTH                                 0x1
#define _ODCONC_ODC1_MASK                                   0x2
#define _ODCONC_ODC2_POSN                                   0x2
#define _ODCONC_ODC2_POSITION                               0x2
#define _ODCONC_ODC2_SIZE                                   0x1
#define _ODCONC_ODC2_LENGTH                                 0x1
#define _ODCONC_ODC2_MASK                                   0x4
#define _ODCONC_ODC3_POSN                                   0x3
#define _ODCONC_ODC3_POSITION                               0x3
#define _ODCONC_ODC3_SIZE                                   0x1
#define _ODCONC_ODC3_LENGTH                                 0x1
#define _ODCONC_ODC3_MASK                                   0x8
#define _ODCONC_ODC4_POSN                                   0x4
#define _ODCONC_ODC4_POSITION                               0x4
#define _ODCONC_ODC4_SIZE                                   0x1
#define _ODCONC_ODC4_LENGTH                                 0x1
#define _ODCONC_ODC4_MASK                                   0x10
#define _ODCONC_ODC5_POSN                                   0x5
#define _ODCONC_ODC5_POSITION                               0x5
#define _ODCONC_ODC5_SIZE                                   0x1
#define _ODCONC_ODC5_LENGTH                                 0x1
#define _ODCONC_ODC5_MASK                                   0x20

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x291);
#ifndef _LIB_BUILD
asm("CCPR1 equ 0291h");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x291);
#ifndef _LIB_BUILD
asm("CCPR1L equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x291);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x292);
#ifndef _LIB_BUILD
asm("CCPR1H equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x292);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x293);
#ifndef _LIB_BUILD
asm("CCP1CON equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x293);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x294);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 0294h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x294);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4

// Register: CCPTMRS
#define CCPTMRS CCPTMRS
extern volatile unsigned char           CCPTMRS             __at(0x29E);
#ifndef _LIB_BUILD
asm("CCPTMRS equ 029Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned                        :2;
        unsigned P3TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned                        :2;
        unsigned P3TSEL0                :1;
        unsigned P3TSEL1                :1;
    };
} CCPTMRSbits_t;
extern volatile CCPTMRSbits_t CCPTMRSbits __at(0x29E);
// bitfield macros
#define _CCPTMRS_C1TSEL_POSN                                0x0
#define _CCPTMRS_C1TSEL_POSITION                            0x0
#define _CCPTMRS_C1TSEL_SIZE                                0x2
#define _CCPTMRS_C1TSEL_LENGTH                              0x2
#define _CCPTMRS_C1TSEL_MASK                                0x3
#define _CCPTMRS_P3TSEL_POSN                                0x4
#define _CCPTMRS_P3TSEL_POSITION                            0x4
#define _CCPTMRS_P3TSEL_SIZE                                0x2
#define _CCPTMRS_P3TSEL_LENGTH                              0x2
#define _CCPTMRS_P3TSEL_MASK                                0x30
#define _CCPTMRS_C1TSEL0_POSN                               0x0
#define _CCPTMRS_C1TSEL0_POSITION                           0x0
#define _CCPTMRS_C1TSEL0_SIZE                               0x1
#define _CCPTMRS_C1TSEL0_LENGTH                             0x1
#define _CCPTMRS_C1TSEL0_MASK                               0x1
#define _CCPTMRS_C1TSEL1_POSN                               0x1
#define _CCPTMRS_C1TSEL1_POSITION                           0x1
#define _CCPTMRS_C1TSEL1_SIZE                               0x1
#define _CCPTMRS_C1TSEL1_LENGTH                             0x1
#define _CCPTMRS_C1TSEL1_MASK                               0x2
#define _CCPTMRS_P3TSEL0_POSN                               0x4
#define _CCPTMRS_P3TSEL0_POSITION                           0x4
#define _CCPTMRS_P3TSEL0_SIZE                               0x1
#define _CCPTMRS_P3TSEL0_LENGTH                             0x1
#define _CCPTMRS_P3TSEL0_MASK                               0x10
#define _CCPTMRS_P3TSEL1_POSN                               0x5
#define _CCPTMRS_P3TSEL1_POSITION                           0x5
#define _CCPTMRS_P3TSEL1_SIZE                               0x1
#define _CCPTMRS_P3TSEL1_LENGTH                             0x1
#define _CCPTMRS_P3TSEL1_MASK                               0x20

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x30C);
#ifndef _LIB_BUILD
asm("SLRCONA equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned                        :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x30C);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x30E);
#ifndef _LIB_BUILD
asm("SLRCONC equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x30E);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x38C);
#ifndef _LIB_BUILD
asm("INLVLA equ 038Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x38C);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x38E);
#ifndef _LIB_BUILD
asm("INLVLC equ 038Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x38E);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x391);
#ifndef _LIB_BUILD
asm("IOCAP equ 0391h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x391);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x392);
#ifndef _LIB_BUILD
asm("IOCAN equ 0392h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x392);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x393);
#ifndef _LIB_BUILD
asm("IOCAF equ 0393h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x393);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x397);
#ifndef _LIB_BUILD
asm("IOCCP equ 0397h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x397);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x398);
#ifndef _LIB_BUILD
asm("IOCCN equ 0398h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x398);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x399);
#ifndef _LIB_BUILD
asm("IOCCF equ 0399h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x399);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20

// Register: MD1CON0
#define MD1CON0 MD1CON0
extern volatile unsigned char           MD1CON0             __at(0x39B);
#ifndef _LIB_BUILD
asm("MD1CON0 equ 039Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIT                    :1;
        unsigned                        :3;
        unsigned OPOL                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MD1BIT                 :1;
        unsigned                        :3;
        unsigned MD1OPOL                :1;
        unsigned MD1OUT                 :1;
        unsigned                        :1;
        unsigned MD1EN                  :1;
    };
} MD1CON0bits_t;
extern volatile MD1CON0bits_t MD1CON0bits __at(0x39B);
// bitfield macros
#define _MD1CON0_BIT_POSN                                   0x0
#define _MD1CON0_BIT_POSITION                               0x0
#define _MD1CON0_BIT_SIZE                                   0x1
#define _MD1CON0_BIT_LENGTH                                 0x1
#define _MD1CON0_BIT_MASK                                   0x1
#define _MD1CON0_OPOL_POSN                                  0x4
#define _MD1CON0_OPOL_POSITION                              0x4
#define _MD1CON0_OPOL_SIZE                                  0x1
#define _MD1CON0_OPOL_LENGTH                                0x1
#define _MD1CON0_OPOL_MASK                                  0x10
#define _MD1CON0_OUT_POSN                                   0x5
#define _MD1CON0_OUT_POSITION                               0x5
#define _MD1CON0_OUT_SIZE                                   0x1
#define _MD1CON0_OUT_LENGTH                                 0x1
#define _MD1CON0_OUT_MASK                                   0x20
#define _MD1CON0_EN_POSN                                    0x7
#define _MD1CON0_EN_POSITION                                0x7
#define _MD1CON0_EN_SIZE                                    0x1
#define _MD1CON0_EN_LENGTH                                  0x1
#define _MD1CON0_EN_MASK                                    0x80
#define _MD1CON0_MD1BIT_POSN                                0x0
#define _MD1CON0_MD1BIT_POSITION                            0x0
#define _MD1CON0_MD1BIT_SIZE                                0x1
#define _MD1CON0_MD1BIT_LENGTH                              0x1
#define _MD1CON0_MD1BIT_MASK                                0x1
#define _MD1CON0_MD1OPOL_POSN                               0x4
#define _MD1CON0_MD1OPOL_POSITION                           0x4
#define _MD1CON0_MD1OPOL_SIZE                               0x1
#define _MD1CON0_MD1OPOL_LENGTH                             0x1
#define _MD1CON0_MD1OPOL_MASK                               0x10
#define _MD1CON0_MD1OUT_POSN                                0x5
#define _MD1CON0_MD1OUT_POSITION                            0x5
#define _MD1CON0_MD1OUT_SIZE                                0x1
#define _MD1CON0_MD1OUT_LENGTH                              0x1
#define _MD1CON0_MD1OUT_MASK                                0x20
#define _MD1CON0_MD1EN_POSN                                 0x7
#define _MD1CON0_MD1EN_POSITION                             0x7
#define _MD1CON0_MD1EN_SIZE                                 0x1
#define _MD1CON0_MD1EN_LENGTH                               0x1
#define _MD1CON0_MD1EN_MASK                                 0x80

// Register: MD1CON1
#define MD1CON1 MD1CON1
extern volatile unsigned char           MD1CON1             __at(0x39C);
#ifndef _LIB_BUILD
asm("MD1CON1 equ 039Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLSYNC                 :1;
        unsigned CLPOL                  :1;
        unsigned                        :2;
        unsigned CHSYNC                 :1;
        unsigned CHPOL                  :1;
    };
    struct {
        unsigned MD1CLSYNC              :1;
        unsigned MD1CLPOL               :1;
        unsigned                        :2;
        unsigned MD1CHSYNC              :1;
        unsigned MD1CHPOL               :1;
    };
} MD1CON1bits_t;
extern volatile MD1CON1bits_t MD1CON1bits __at(0x39C);
// bitfield macros
#define _MD1CON1_CLSYNC_POSN                                0x0
#define _MD1CON1_CLSYNC_POSITION                            0x0
#define _MD1CON1_CLSYNC_SIZE                                0x1
#define _MD1CON1_CLSYNC_LENGTH                              0x1
#define _MD1CON1_CLSYNC_MASK                                0x1
#define _MD1CON1_CLPOL_POSN                                 0x1
#define _MD1CON1_CLPOL_POSITION                             0x1
#define _MD1CON1_CLPOL_SIZE                                 0x1
#define _MD1CON1_CLPOL_LENGTH                               0x1
#define _MD1CON1_CLPOL_MASK                                 0x2
#define _MD1CON1_CHSYNC_POSN                                0x4
#define _MD1CON1_CHSYNC_POSITION                            0x4
#define _MD1CON1_CHSYNC_SIZE                                0x1
#define _MD1CON1_CHSYNC_LENGTH                              0x1
#define _MD1CON1_CHSYNC_MASK                                0x10
#define _MD1CON1_CHPOL_POSN                                 0x5
#define _MD1CON1_CHPOL_POSITION                             0x5
#define _MD1CON1_CHPOL_SIZE                                 0x1
#define _MD1CON1_CHPOL_LENGTH                               0x1
#define _MD1CON1_CHPOL_MASK                                 0x20
#define _MD1CON1_MD1CLSYNC_POSN                             0x0
#define _MD1CON1_MD1CLSYNC_POSITION                         0x0
#define _MD1CON1_MD1CLSYNC_SIZE                             0x1
#define _MD1CON1_MD1CLSYNC_LENGTH                           0x1
#define _MD1CON1_MD1CLSYNC_MASK                             0x1
#define _MD1CON1_MD1CLPOL_POSN                              0x1
#define _MD1CON1_MD1CLPOL_POSITION                          0x1
#define _MD1CON1_MD1CLPOL_SIZE                              0x1
#define _MD1CON1_MD1CLPOL_LENGTH                            0x1
#define _MD1CON1_MD1CLPOL_MASK                              0x2
#define _MD1CON1_MD1CHSYNC_POSN                             0x4
#define _MD1CON1_MD1CHSYNC_POSITION                         0x4
#define _MD1CON1_MD1CHSYNC_SIZE                             0x1
#define _MD1CON1_MD1CHSYNC_LENGTH                           0x1
#define _MD1CON1_MD1CHSYNC_MASK                             0x10
#define _MD1CON1_MD1CHPOL_POSN                              0x5
#define _MD1CON1_MD1CHPOL_POSITION                          0x5
#define _MD1CON1_MD1CHPOL_SIZE                              0x1
#define _MD1CON1_MD1CHPOL_LENGTH                            0x1
#define _MD1CON1_MD1CHPOL_MASK                              0x20

// Register: MD1SRC
#define MD1SRC MD1SRC
extern volatile unsigned char           MD1SRC              __at(0x39D);
#ifndef _LIB_BUILD
asm("MD1SRC equ 039Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MS                     :5;
    };
    struct {
        unsigned MS0                    :1;
        unsigned MS1                    :1;
        unsigned MS2                    :1;
        unsigned MS3                    :1;
        unsigned MS4                    :1;
    };
    struct {
        unsigned MD1MS                  :5;
    };
    struct {
        unsigned MD1MS0                 :1;
        unsigned MD1MS1                 :1;
        unsigned MD1MS2                 :1;
        unsigned MD1MS3                 :1;
        unsigned MD1MS4                 :1;
    };
} MD1SRCbits_t;
extern volatile MD1SRCbits_t MD1SRCbits __at(0x39D);
// bitfield macros
#define _MD1SRC_MS_POSN                                     0x0
#define _MD1SRC_MS_POSITION                                 0x0
#define _MD1SRC_MS_SIZE                                     0x5
#define _MD1SRC_MS_LENGTH                                   0x5
#define _MD1SRC_MS_MASK                                     0x1F
#define _MD1SRC_MS0_POSN                                    0x0
#define _MD1SRC_MS0_POSITION                                0x0
#define _MD1SRC_MS0_SIZE                                    0x1
#define _MD1SRC_MS0_LENGTH                                  0x1
#define _MD1SRC_MS0_MASK                                    0x1
#define _MD1SRC_MS1_POSN                                    0x1
#define _MD1SRC_MS1_POSITION                                0x1
#define _MD1SRC_MS1_SIZE                                    0x1
#define _MD1SRC_MS1_LENGTH                                  0x1
#define _MD1SRC_MS1_MASK                                    0x2
#define _MD1SRC_MS2_POSN                                    0x2
#define _MD1SRC_MS2_POSITION                                0x2
#define _MD1SRC_MS2_SIZE                                    0x1
#define _MD1SRC_MS2_LENGTH                                  0x1
#define _MD1SRC_MS2_MASK                                    0x4
#define _MD1SRC_MS3_POSN                                    0x3
#define _MD1SRC_MS3_POSITION                                0x3
#define _MD1SRC_MS3_SIZE                                    0x1
#define _MD1SRC_MS3_LENGTH                                  0x1
#define _MD1SRC_MS3_MASK                                    0x8
#define _MD1SRC_MS4_POSN                                    0x4
#define _MD1SRC_MS4_POSITION                                0x4
#define _MD1SRC_MS4_SIZE                                    0x1
#define _MD1SRC_MS4_LENGTH                                  0x1
#define _MD1SRC_MS4_MASK                                    0x10
#define _MD1SRC_MD1MS_POSN                                  0x0
#define _MD1SRC_MD1MS_POSITION                              0x0
#define _MD1SRC_MD1MS_SIZE                                  0x5
#define _MD1SRC_MD1MS_LENGTH                                0x5
#define _MD1SRC_MD1MS_MASK                                  0x1F
#define _MD1SRC_MD1MS0_POSN                                 0x0
#define _MD1SRC_MD1MS0_POSITION                             0x0
#define _MD1SRC_MD1MS0_SIZE                                 0x1
#define _MD1SRC_MD1MS0_LENGTH                               0x1
#define _MD1SRC_MD1MS0_MASK                                 0x1
#define _MD1SRC_MD1MS1_POSN                                 0x1
#define _MD1SRC_MD1MS1_POSITION                             0x1
#define _MD1SRC_MD1MS1_SIZE                                 0x1
#define _MD1SRC_MD1MS1_LENGTH                               0x1
#define _MD1SRC_MD1MS1_MASK                                 0x2
#define _MD1SRC_MD1MS2_POSN                                 0x2
#define _MD1SRC_MD1MS2_POSITION                             0x2
#define _MD1SRC_MD1MS2_SIZE                                 0x1
#define _MD1SRC_MD1MS2_LENGTH                               0x1
#define _MD1SRC_MD1MS2_MASK                                 0x4
#define _MD1SRC_MD1MS3_POSN                                 0x3
#define _MD1SRC_MD1MS3_POSITION                             0x3
#define _MD1SRC_MD1MS3_SIZE                                 0x1
#define _MD1SRC_MD1MS3_LENGTH                               0x1
#define _MD1SRC_MD1MS3_MASK                                 0x8
#define _MD1SRC_MD1MS4_POSN                                 0x4
#define _MD1SRC_MD1MS4_POSITION                             0x4
#define _MD1SRC_MD1MS4_SIZE                                 0x1
#define _MD1SRC_MD1MS4_LENGTH                               0x1
#define _MD1SRC_MD1MS4_MASK                                 0x10

// Register: MD1CARL
#define MD1CARL MD1CARL
extern volatile unsigned char           MD1CARL             __at(0x39E);
#ifndef _LIB_BUILD
asm("MD1CARL equ 039Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CL                     :4;
    };
    struct {
        unsigned CL0                    :1;
        unsigned CL1                    :1;
        unsigned CL2                    :1;
        unsigned CL3                    :1;
    };
    struct {
        unsigned MD1CL                  :4;
    };
    struct {
        unsigned MD1CL0                 :1;
        unsigned MD1CL1                 :1;
        unsigned MD1CL2                 :1;
        unsigned MD1CL3                 :1;
    };
} MD1CARLbits_t;
extern volatile MD1CARLbits_t MD1CARLbits __at(0x39E);
// bitfield macros
#define _MD1CARL_CL_POSN                                    0x0
#define _MD1CARL_CL_POSITION                                0x0
#define _MD1CARL_CL_SIZE                                    0x4
#define _MD1CARL_CL_LENGTH                                  0x4
#define _MD1CARL_CL_MASK                                    0xF
#define _MD1CARL_CL0_POSN                                   0x0
#define _MD1CARL_CL0_POSITION                               0x0
#define _MD1CARL_CL0_SIZE                                   0x1
#define _MD1CARL_CL0_LENGTH                                 0x1
#define _MD1CARL_CL0_MASK                                   0x1
#define _MD1CARL_CL1_POSN                                   0x1
#define _MD1CARL_CL1_POSITION                               0x1
#define _MD1CARL_CL1_SIZE                                   0x1
#define _MD1CARL_CL1_LENGTH                                 0x1
#define _MD1CARL_CL1_MASK                                   0x2
#define _MD1CARL_CL2_POSN                                   0x2
#define _MD1CARL_CL2_POSITION                               0x2
#define _MD1CARL_CL2_SIZE                                   0x1
#define _MD1CARL_CL2_LENGTH                                 0x1
#define _MD1CARL_CL2_MASK                                   0x4
#define _MD1CARL_CL3_POSN                                   0x3
#define _MD1CARL_CL3_POSITION                               0x3
#define _MD1CARL_CL3_SIZE                                   0x1
#define _MD1CARL_CL3_LENGTH                                 0x1
#define _MD1CARL_CL3_MASK                                   0x8
#define _MD1CARL_MD1CL_POSN                                 0x0
#define _MD1CARL_MD1CL_POSITION                             0x0
#define _MD1CARL_MD1CL_SIZE                                 0x4
#define _MD1CARL_MD1CL_LENGTH                               0x4
#define _MD1CARL_MD1CL_MASK                                 0xF
#define _MD1CARL_MD1CL0_POSN                                0x0
#define _MD1CARL_MD1CL0_POSITION                            0x0
#define _MD1CARL_MD1CL0_SIZE                                0x1
#define _MD1CARL_MD1CL0_LENGTH                              0x1
#define _MD1CARL_MD1CL0_MASK                                0x1
#define _MD1CARL_MD1CL1_POSN                                0x1
#define _MD1CARL_MD1CL1_POSITION                            0x1
#define _MD1CARL_MD1CL1_SIZE                                0x1
#define _MD1CARL_MD1CL1_LENGTH                              0x1
#define _MD1CARL_MD1CL1_MASK                                0x2
#define _MD1CARL_MD1CL2_POSN                                0x2
#define _MD1CARL_MD1CL2_POSITION                            0x2
#define _MD1CARL_MD1CL2_SIZE                                0x1
#define _MD1CARL_MD1CL2_LENGTH                              0x1
#define _MD1CARL_MD1CL2_MASK                                0x4
#define _MD1CARL_MD1CL3_POSN                                0x3
#define _MD1CARL_MD1CL3_POSITION                            0x3
#define _MD1CARL_MD1CL3_SIZE                                0x1
#define _MD1CARL_MD1CL3_LENGTH                              0x1
#define _MD1CARL_MD1CL3_MASK                                0x8

// Register: MD1CARH
#define MD1CARH MD1CARH
extern volatile unsigned char           MD1CARH             __at(0x39F);
#ifndef _LIB_BUILD
asm("MD1CARH equ 039Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CH                     :4;
    };
    struct {
        unsigned CH0                    :1;
        unsigned CH1                    :1;
        unsigned CH2                    :1;
        unsigned CH3                    :1;
    };
    struct {
        unsigned MD1CH                  :4;
    };
    struct {
        unsigned MD1CH0                 :1;
        unsigned MD1CH1                 :1;
        unsigned MD1CH2                 :1;
        unsigned MD1CH3                 :1;
    };
} MD1CARHbits_t;
extern volatile MD1CARHbits_t MD1CARHbits __at(0x39F);
// bitfield macros
#define _MD1CARH_CH_POSN                                    0x0
#define _MD1CARH_CH_POSITION                                0x0
#define _MD1CARH_CH_SIZE                                    0x4
#define _MD1CARH_CH_LENGTH                                  0x4
#define _MD1CARH_CH_MASK                                    0xF
#define _MD1CARH_CH0_POSN                                   0x0
#define _MD1CARH_CH0_POSITION                               0x0
#define _MD1CARH_CH0_SIZE                                   0x1
#define _MD1CARH_CH0_LENGTH                                 0x1
#define _MD1CARH_CH0_MASK                                   0x1
#define _MD1CARH_CH1_POSN                                   0x1
#define _MD1CARH_CH1_POSITION                               0x1
#define _MD1CARH_CH1_SIZE                                   0x1
#define _MD1CARH_CH1_LENGTH                                 0x1
#define _MD1CARH_CH1_MASK                                   0x2
#define _MD1CARH_CH2_POSN                                   0x2
#define _MD1CARH_CH2_POSITION                               0x2
#define _MD1CARH_CH2_SIZE                                   0x1
#define _MD1CARH_CH2_LENGTH                                 0x1
#define _MD1CARH_CH2_MASK                                   0x4
#define _MD1CARH_CH3_POSN                                   0x3
#define _MD1CARH_CH3_POSITION                               0x3
#define _MD1CARH_CH3_SIZE                                   0x1
#define _MD1CARH_CH3_LENGTH                                 0x1
#define _MD1CARH_CH3_MASK                                   0x8
#define _MD1CARH_MD1CH_POSN                                 0x0
#define _MD1CARH_MD1CH_POSITION                             0x0
#define _MD1CARH_MD1CH_SIZE                                 0x4
#define _MD1CARH_MD1CH_LENGTH                               0x4
#define _MD1CARH_MD1CH_MASK                                 0xF
#define _MD1CARH_MD1CH0_POSN                                0x0
#define _MD1CARH_MD1CH0_POSITION                            0x0
#define _MD1CARH_MD1CH0_SIZE                                0x1
#define _MD1CARH_MD1CH0_LENGTH                              0x1
#define _MD1CARH_MD1CH0_MASK                                0x1
#define _MD1CARH_MD1CH1_POSN                                0x1
#define _MD1CARH_MD1CH1_POSITION                            0x1
#define _MD1CARH_MD1CH1_SIZE                                0x1
#define _MD1CARH_MD1CH1_LENGTH                              0x1
#define _MD1CARH_MD1CH1_MASK                                0x2
#define _MD1CARH_MD1CH2_POSN                                0x2
#define _MD1CARH_MD1CH2_POSITION                            0x2
#define _MD1CARH_MD1CH2_SIZE                                0x1
#define _MD1CARH_MD1CH2_LENGTH                              0x1
#define _MD1CARH_MD1CH2_MASK                                0x4
#define _MD1CARH_MD1CH3_POSN                                0x3
#define _MD1CARH_MD1CH3_POSITION                            0x3
#define _MD1CARH_MD1CH3_SIZE                                0x1
#define _MD1CARH_MD1CH3_LENGTH                              0x1
#define _MD1CARH_MD1CH3_MASK                                0x8

// Register: HIDRVC
#define HIDRVC HIDRVC
extern volatile unsigned char           HIDRVC              __at(0x40E);
#ifndef _LIB_BUILD
asm("HIDRVC equ 040Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned HIDC4                  :1;
        unsigned HIDC5                  :1;
    };
} HIDRVCbits_t;
extern volatile HIDRVCbits_t HIDRVCbits __at(0x40E);
// bitfield macros
#define _HIDRVC_HIDC4_POSN                                  0x4
#define _HIDRVC_HIDC4_POSITION                              0x4
#define _HIDRVC_HIDC4_SIZE                                  0x1
#define _HIDRVC_HIDC4_LENGTH                                0x1
#define _HIDRVC_HIDC4_MASK                                  0x10
#define _HIDRVC_HIDC5_POSN                                  0x5
#define _HIDRVC_HIDC5_POSITION                              0x5
#define _HIDRVC_HIDC5_SIZE                                  0x1
#define _HIDRVC_HIDC5_LENGTH                                0x1
#define _HIDRVC_HIDC5_MASK                                  0x20

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x413);
#ifndef _LIB_BUILD
asm("T4TMR equ 0413h");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x413);
#ifndef _LIB_BUILD
asm("TMR4 equ 0413h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x413);
// bitfield macros
#define _T4TMR_TMR_POSN                                     0x0
#define _T4TMR_TMR_POSITION                                 0x0
#define _T4TMR_TMR_SIZE                                     0x8
#define _T4TMR_TMR_LENGTH                                   0x8
#define _T4TMR_TMR_MASK                                     0xFF
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x413);
// bitfield macros
#define _TMR4_TMR_POSN                                      0x0
#define _TMR4_TMR_POSITION                                  0x0
#define _TMR4_TMR_SIZE                                      0x8
#define _TMR4_TMR_LENGTH                                    0x8
#define _TMR4_TMR_MASK                                      0xFF
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x414);
#ifndef _LIB_BUILD
asm("T4PR equ 0414h");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x414);
#ifndef _LIB_BUILD
asm("PR4 equ 0414h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T4PR                   :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x414);
// bitfield macros
#define _T4PR_PR_POSN                                       0x0
#define _T4PR_PR_POSITION                                   0x0
#define _T4PR_PR_SIZE                                       0x8
#define _T4PR_PR_LENGTH                                     0x8
#define _T4PR_PR_MASK                                       0xFF
#define _T4PR_T4PR_POSN                                     0x0
#define _T4PR_T4PR_POSITION                                 0x0
#define _T4PR_T4PR_SIZE                                     0x8
#define _T4PR_T4PR_LENGTH                                   0x8
#define _T4PR_T4PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T4PR                   :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x414);
// bitfield macros
#define _PR4_PR_POSN                                        0x0
#define _PR4_PR_POSITION                                    0x0
#define _PR4_PR_SIZE                                        0x8
#define _PR4_PR_LENGTH                                      0x8
#define _PR4_PR_MASK                                        0xFF
#define _PR4_T4PR_POSN                                      0x0
#define _PR4_T4PR_POSITION                                  0x0
#define _PR4_T4PR_SIZE                                      0x8
#define _PR4_T4PR_LENGTH                                    0x8
#define _PR4_T4PR_MASK                                      0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x415);
#ifndef _LIB_BUILD
asm("T4CON equ 0415h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x415);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x416);
#ifndef _LIB_BUILD
asm("T4HLT equ 0416h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x416);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x417);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0417h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x417);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x4
#define _T4CLKCON_CS_LENGTH                                 0x4
#define _T4CLKCON_CS_MASK                                   0xF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x4
#define _T4CLKCON_T4CS_LENGTH                               0x4
#define _T4CLKCON_T4CS_MASK                                 0xF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x418);
#ifndef _LIB_BUILD
asm("T4RST equ 0418h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T4RSEL                 :4;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x418);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x4
#define _T4RST_RSEL_LENGTH                                  0x4
#define _T4RST_RSEL_MASK                                    0xF
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x4
#define _T4RST_T4RSEL_LENGTH                                0x4
#define _T4RST_T4RSEL_MASK                                  0xF
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8

// Register: T6TMR
#define T6TMR T6TMR
extern volatile unsigned char           T6TMR               __at(0x41A);
#ifndef _LIB_BUILD
asm("T6TMR equ 041Ah");
#endif
// aliases
extern volatile unsigned char           TMR6                __at(0x41A);
#ifndef _LIB_BUILD
asm("TMR6 equ 041Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR6                   :8;
    };
} T6TMRbits_t;
extern volatile T6TMRbits_t T6TMRbits __at(0x41A);
// bitfield macros
#define _T6TMR_TMR_POSN                                     0x0
#define _T6TMR_TMR_POSITION                                 0x0
#define _T6TMR_TMR_SIZE                                     0x8
#define _T6TMR_TMR_LENGTH                                   0x8
#define _T6TMR_TMR_MASK                                     0xFF
#define _T6TMR_TMR6_POSN                                    0x0
#define _T6TMR_TMR6_POSITION                                0x0
#define _T6TMR_TMR6_SIZE                                    0x8
#define _T6TMR_TMR6_LENGTH                                  0x8
#define _T6TMR_TMR6_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0x41A);
// bitfield macros
#define _TMR6_TMR_POSN                                      0x0
#define _TMR6_TMR_POSITION                                  0x0
#define _TMR6_TMR_SIZE                                      0x8
#define _TMR6_TMR_LENGTH                                    0x8
#define _TMR6_TMR_MASK                                      0xFF
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: T6PR
#define T6PR T6PR
extern volatile unsigned char           T6PR                __at(0x41B);
#ifndef _LIB_BUILD
asm("T6PR equ 041Bh");
#endif
// aliases
extern volatile unsigned char           PR6                 __at(0x41B);
#ifndef _LIB_BUILD
asm("PR6 equ 041Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T6PR                   :8;
    };
} T6PRbits_t;
extern volatile T6PRbits_t T6PRbits __at(0x41B);
// bitfield macros
#define _T6PR_PR_POSN                                       0x0
#define _T6PR_PR_POSITION                                   0x0
#define _T6PR_PR_SIZE                                       0x8
#define _T6PR_PR_LENGTH                                     0x8
#define _T6PR_PR_MASK                                       0xFF
#define _T6PR_T6PR_POSN                                     0x0
#define _T6PR_T6PR_POSITION                                 0x0
#define _T6PR_T6PR_SIZE                                     0x8
#define _T6PR_T6PR_LENGTH                                   0x8
#define _T6PR_T6PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T6PR                   :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0x41B);
// bitfield macros
#define _PR6_PR_POSN                                        0x0
#define _PR6_PR_POSITION                                    0x0
#define _PR6_PR_SIZE                                        0x8
#define _PR6_PR_LENGTH                                      0x8
#define _PR6_PR_MASK                                        0xFF
#define _PR6_T6PR_POSN                                      0x0
#define _PR6_T6PR_POSITION                                  0x0
#define _PR6_T6PR_SIZE                                      0x8
#define _PR6_T6PR_LENGTH                                    0x8
#define _PR6_T6PR_MASK                                      0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0x41C);
#ifndef _LIB_BUILD
asm("T6CON equ 041Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T6OUTPS                :4;
        unsigned T6CKPS                 :3;
        unsigned T6ON                   :1;
    };
    struct {
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned T6CKPS2                :1;
        unsigned TMR6ON                 :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0x41C);
// bitfield macros
#define _T6CON_OUTPS_POSN                                   0x0
#define _T6CON_OUTPS_POSITION                               0x0
#define _T6CON_OUTPS_SIZE                                   0x4
#define _T6CON_OUTPS_LENGTH                                 0x4
#define _T6CON_OUTPS_MASK                                   0xF
#define _T6CON_CKPS_POSN                                    0x4
#define _T6CON_CKPS_POSITION                                0x4
#define _T6CON_CKPS_SIZE                                    0x3
#define _T6CON_CKPS_LENGTH                                  0x3
#define _T6CON_CKPS_MASK                                    0x70
#define _T6CON_ON_POSN                                      0x7
#define _T6CON_ON_POSITION                                  0x7
#define _T6CON_ON_SIZE                                      0x1
#define _T6CON_ON_LENGTH                                    0x1
#define _T6CON_ON_MASK                                      0x80
#define _T6CON_OUTPS0_POSN                                  0x0
#define _T6CON_OUTPS0_POSITION                              0x0
#define _T6CON_OUTPS0_SIZE                                  0x1
#define _T6CON_OUTPS0_LENGTH                                0x1
#define _T6CON_OUTPS0_MASK                                  0x1
#define _T6CON_OUTPS1_POSN                                  0x1
#define _T6CON_OUTPS1_POSITION                              0x1
#define _T6CON_OUTPS1_SIZE                                  0x1
#define _T6CON_OUTPS1_LENGTH                                0x1
#define _T6CON_OUTPS1_MASK                                  0x2
#define _T6CON_OUTPS2_POSN                                  0x2
#define _T6CON_OUTPS2_POSITION                              0x2
#define _T6CON_OUTPS2_SIZE                                  0x1
#define _T6CON_OUTPS2_LENGTH                                0x1
#define _T6CON_OUTPS2_MASK                                  0x4
#define _T6CON_OUTPS3_POSN                                  0x3
#define _T6CON_OUTPS3_POSITION                              0x3
#define _T6CON_OUTPS3_SIZE                                  0x1
#define _T6CON_OUTPS3_LENGTH                                0x1
#define _T6CON_OUTPS3_MASK                                  0x8
#define _T6CON_CKPS0_POSN                                   0x4
#define _T6CON_CKPS0_POSITION                               0x4
#define _T6CON_CKPS0_SIZE                                   0x1
#define _T6CON_CKPS0_LENGTH                                 0x1
#define _T6CON_CKPS0_MASK                                   0x10
#define _T6CON_CKPS1_POSN                                   0x5
#define _T6CON_CKPS1_POSITION                               0x5
#define _T6CON_CKPS1_SIZE                                   0x1
#define _T6CON_CKPS1_LENGTH                                 0x1
#define _T6CON_CKPS1_MASK                                   0x20
#define _T6CON_CKPS2_POSN                                   0x6
#define _T6CON_CKPS2_POSITION                               0x6
#define _T6CON_CKPS2_SIZE                                   0x1
#define _T6CON_CKPS2_LENGTH                                 0x1
#define _T6CON_CKPS2_MASK                                   0x40
#define _T6CON_T6OUTPS_POSN                                 0x0
#define _T6CON_T6OUTPS_POSITION                             0x0
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0xF
#define _T6CON_T6CKPS_POSN                                  0x4
#define _T6CON_T6CKPS_POSITION                              0x4
#define _T6CON_T6CKPS_SIZE                                  0x3
#define _T6CON_T6CKPS_LENGTH                                0x3
#define _T6CON_T6CKPS_MASK                                  0x70
#define _T6CON_T6ON_POSN                                    0x7
#define _T6CON_T6ON_POSITION                                0x7
#define _T6CON_T6ON_SIZE                                    0x1
#define _T6CON_T6ON_LENGTH                                  0x1
#define _T6CON_T6ON_MASK                                    0x80
#define _T6CON_T6OUTPS0_POSN                                0x0
#define _T6CON_T6OUTPS0_POSITION                            0x0
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x1
#define _T6CON_T6OUTPS1_POSN                                0x1
#define _T6CON_T6OUTPS1_POSITION                            0x1
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x2
#define _T6CON_T6OUTPS2_POSN                                0x2
#define _T6CON_T6OUTPS2_POSITION                            0x2
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x4
#define _T6CON_T6OUTPS3_POSN                                0x3
#define _T6CON_T6OUTPS3_POSITION                            0x3
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x8
#define _T6CON_T6CKPS0_POSN                                 0x4
#define _T6CON_T6CKPS0_POSITION                             0x4
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x10
#define _T6CON_T6CKPS1_POSN                                 0x5
#define _T6CON_T6CKPS1_POSITION                             0x5
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x20
#define _T6CON_T6CKPS2_POSN                                 0x6
#define _T6CON_T6CKPS2_POSITION                             0x6
#define _T6CON_T6CKPS2_SIZE                                 0x1
#define _T6CON_T6CKPS2_LENGTH                               0x1
#define _T6CON_T6CKPS2_MASK                                 0x40
#define _T6CON_TMR6ON_POSN                                  0x7
#define _T6CON_TMR6ON_POSITION                              0x7
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x80

// Register: T6HLT
#define T6HLT T6HLT
extern volatile unsigned char           T6HLT               __at(0x41D);
#ifndef _LIB_BUILD
asm("T6HLT equ 041Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T6MODE                 :5;
        unsigned T6CKSYNC               :1;
        unsigned T6CKPOL                :1;
        unsigned T6PSYNC                :1;
    };
    struct {
        unsigned T6MODE0                :1;
        unsigned T6MODE1                :1;
        unsigned T6MODE2                :1;
        unsigned T6MODE3                :1;
        unsigned T6MODE4                :1;
    };
} T6HLTbits_t;
extern volatile T6HLTbits_t T6HLTbits __at(0x41D);
// bitfield macros
#define _T6HLT_MODE_POSN                                    0x0
#define _T6HLT_MODE_POSITION                                0x0
#define _T6HLT_MODE_SIZE                                    0x5
#define _T6HLT_MODE_LENGTH                                  0x5
#define _T6HLT_MODE_MASK                                    0x1F
#define _T6HLT_CKSYNC_POSN                                  0x5
#define _T6HLT_CKSYNC_POSITION                              0x5
#define _T6HLT_CKSYNC_SIZE                                  0x1
#define _T6HLT_CKSYNC_LENGTH                                0x1
#define _T6HLT_CKSYNC_MASK                                  0x20
#define _T6HLT_CKPOL_POSN                                   0x6
#define _T6HLT_CKPOL_POSITION                               0x6
#define _T6HLT_CKPOL_SIZE                                   0x1
#define _T6HLT_CKPOL_LENGTH                                 0x1
#define _T6HLT_CKPOL_MASK                                   0x40
#define _T6HLT_PSYNC_POSN                                   0x7
#define _T6HLT_PSYNC_POSITION                               0x7
#define _T6HLT_PSYNC_SIZE                                   0x1
#define _T6HLT_PSYNC_LENGTH                                 0x1
#define _T6HLT_PSYNC_MASK                                   0x80
#define _T6HLT_MODE0_POSN                                   0x0
#define _T6HLT_MODE0_POSITION                               0x0
#define _T6HLT_MODE0_SIZE                                   0x1
#define _T6HLT_MODE0_LENGTH                                 0x1
#define _T6HLT_MODE0_MASK                                   0x1
#define _T6HLT_MODE1_POSN                                   0x1
#define _T6HLT_MODE1_POSITION                               0x1
#define _T6HLT_MODE1_SIZE                                   0x1
#define _T6HLT_MODE1_LENGTH                                 0x1
#define _T6HLT_MODE1_MASK                                   0x2
#define _T6HLT_MODE2_POSN                                   0x2
#define _T6HLT_MODE2_POSITION                               0x2
#define _T6HLT_MODE2_SIZE                                   0x1
#define _T6HLT_MODE2_LENGTH                                 0x1
#define _T6HLT_MODE2_MASK                                   0x4
#define _T6HLT_MODE3_POSN                                   0x3
#define _T6HLT_MODE3_POSITION                               0x3
#define _T6HLT_MODE3_SIZE                                   0x1
#define _T6HLT_MODE3_LENGTH                                 0x1
#define _T6HLT_MODE3_MASK                                   0x8
#define _T6HLT_MODE4_POSN                                   0x4
#define _T6HLT_MODE4_POSITION                               0x4
#define _T6HLT_MODE4_SIZE                                   0x1
#define _T6HLT_MODE4_LENGTH                                 0x1
#define _T6HLT_MODE4_MASK                                   0x10
#define _T6HLT_T6MODE_POSN                                  0x0
#define _T6HLT_T6MODE_POSITION                              0x0
#define _T6HLT_T6MODE_SIZE                                  0x5
#define _T6HLT_T6MODE_LENGTH                                0x5
#define _T6HLT_T6MODE_MASK                                  0x1F
#define _T6HLT_T6CKSYNC_POSN                                0x5
#define _T6HLT_T6CKSYNC_POSITION                            0x5
#define _T6HLT_T6CKSYNC_SIZE                                0x1
#define _T6HLT_T6CKSYNC_LENGTH                              0x1
#define _T6HLT_T6CKSYNC_MASK                                0x20
#define _T6HLT_T6CKPOL_POSN                                 0x6
#define _T6HLT_T6CKPOL_POSITION                             0x6
#define _T6HLT_T6CKPOL_SIZE                                 0x1
#define _T6HLT_T6CKPOL_LENGTH                               0x1
#define _T6HLT_T6CKPOL_MASK                                 0x40
#define _T6HLT_T6PSYNC_POSN                                 0x7
#define _T6HLT_T6PSYNC_POSITION                             0x7
#define _T6HLT_T6PSYNC_SIZE                                 0x1
#define _T6HLT_T6PSYNC_LENGTH                               0x1
#define _T6HLT_T6PSYNC_MASK                                 0x80
#define _T6HLT_T6MODE0_POSN                                 0x0
#define _T6HLT_T6MODE0_POSITION                             0x0
#define _T6HLT_T6MODE0_SIZE                                 0x1
#define _T6HLT_T6MODE0_LENGTH                               0x1
#define _T6HLT_T6MODE0_MASK                                 0x1
#define _T6HLT_T6MODE1_POSN                                 0x1
#define _T6HLT_T6MODE1_POSITION                             0x1
#define _T6HLT_T6MODE1_SIZE                                 0x1
#define _T6HLT_T6MODE1_LENGTH                               0x1
#define _T6HLT_T6MODE1_MASK                                 0x2
#define _T6HLT_T6MODE2_POSN                                 0x2
#define _T6HLT_T6MODE2_POSITION                             0x2
#define _T6HLT_T6MODE2_SIZE                                 0x1
#define _T6HLT_T6MODE2_LENGTH                               0x1
#define _T6HLT_T6MODE2_MASK                                 0x4
#define _T6HLT_T6MODE3_POSN                                 0x3
#define _T6HLT_T6MODE3_POSITION                             0x3
#define _T6HLT_T6MODE3_SIZE                                 0x1
#define _T6HLT_T6MODE3_LENGTH                               0x1
#define _T6HLT_T6MODE3_MASK                                 0x8
#define _T6HLT_T6MODE4_POSN                                 0x4
#define _T6HLT_T6MODE4_POSITION                             0x4
#define _T6HLT_T6MODE4_SIZE                                 0x1
#define _T6HLT_T6MODE4_LENGTH                               0x1
#define _T6HLT_T6MODE4_MASK                                 0x10

// Register: T6CLKCON
#define T6CLKCON T6CLKCON
extern volatile unsigned char           T6CLKCON            __at(0x41E);
#ifndef _LIB_BUILD
asm("T6CLKCON equ 041Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKCONbits_t;
extern volatile T6CLKCONbits_t T6CLKCONbits __at(0x41E);
// bitfield macros
#define _T6CLKCON_CS_POSN                                   0x0
#define _T6CLKCON_CS_POSITION                               0x0
#define _T6CLKCON_CS_SIZE                                   0x4
#define _T6CLKCON_CS_LENGTH                                 0x4
#define _T6CLKCON_CS_MASK                                   0xF
#define _T6CLKCON_CS0_POSN                                  0x0
#define _T6CLKCON_CS0_POSITION                              0x0
#define _T6CLKCON_CS0_SIZE                                  0x1
#define _T6CLKCON_CS0_LENGTH                                0x1
#define _T6CLKCON_CS0_MASK                                  0x1
#define _T6CLKCON_CS1_POSN                                  0x1
#define _T6CLKCON_CS1_POSITION                              0x1
#define _T6CLKCON_CS1_SIZE                                  0x1
#define _T6CLKCON_CS1_LENGTH                                0x1
#define _T6CLKCON_CS1_MASK                                  0x2
#define _T6CLKCON_CS2_POSN                                  0x2
#define _T6CLKCON_CS2_POSITION                              0x2
#define _T6CLKCON_CS2_SIZE                                  0x1
#define _T6CLKCON_CS2_LENGTH                                0x1
#define _T6CLKCON_CS2_MASK                                  0x4
#define _T6CLKCON_CS3_POSN                                  0x3
#define _T6CLKCON_CS3_POSITION                              0x3
#define _T6CLKCON_CS3_SIZE                                  0x1
#define _T6CLKCON_CS3_LENGTH                                0x1
#define _T6CLKCON_CS3_MASK                                  0x8
#define _T6CLKCON_T6CS_POSN                                 0x0
#define _T6CLKCON_T6CS_POSITION                             0x0
#define _T6CLKCON_T6CS_SIZE                                 0x4
#define _T6CLKCON_T6CS_LENGTH                               0x4
#define _T6CLKCON_T6CS_MASK                                 0xF
#define _T6CLKCON_T6CS0_POSN                                0x0
#define _T6CLKCON_T6CS0_POSITION                            0x0
#define _T6CLKCON_T6CS0_SIZE                                0x1
#define _T6CLKCON_T6CS0_LENGTH                              0x1
#define _T6CLKCON_T6CS0_MASK                                0x1
#define _T6CLKCON_T6CS1_POSN                                0x1
#define _T6CLKCON_T6CS1_POSITION                            0x1
#define _T6CLKCON_T6CS1_SIZE                                0x1
#define _T6CLKCON_T6CS1_LENGTH                              0x1
#define _T6CLKCON_T6CS1_MASK                                0x2
#define _T6CLKCON_T6CS2_POSN                                0x2
#define _T6CLKCON_T6CS2_POSITION                            0x2
#define _T6CLKCON_T6CS2_SIZE                                0x1
#define _T6CLKCON_T6CS2_LENGTH                              0x1
#define _T6CLKCON_T6CS2_MASK                                0x4
#define _T6CLKCON_T6CS3_POSN                                0x3
#define _T6CLKCON_T6CS3_POSITION                            0x3
#define _T6CLKCON_T6CS3_SIZE                                0x1
#define _T6CLKCON_T6CS3_LENGTH                              0x1
#define _T6CLKCON_T6CS3_MASK                                0x8

// Register: T6RST
#define T6RST T6RST
extern volatile unsigned char           T6RST               __at(0x41F);
#ifndef _LIB_BUILD
asm("T6RST equ 041Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T6RSEL                 :4;
    };
    struct {
        unsigned T6RSEL0                :1;
        unsigned T6RSEL1                :1;
        unsigned T6RSEL2                :1;
        unsigned T6RSEL3                :1;
    };
} T6RSTbits_t;
extern volatile T6RSTbits_t T6RSTbits __at(0x41F);
// bitfield macros
#define _T6RST_RSEL_POSN                                    0x0
#define _T6RST_RSEL_POSITION                                0x0
#define _T6RST_RSEL_SIZE                                    0x4
#define _T6RST_RSEL_LENGTH                                  0x4
#define _T6RST_RSEL_MASK                                    0xF
#define _T6RST_RSEL0_POSN                                   0x0
#define _T6RST_RSEL0_POSITION                               0x0
#define _T6RST_RSEL0_SIZE                                   0x1
#define _T6RST_RSEL0_LENGTH                                 0x1
#define _T6RST_RSEL0_MASK                                   0x1
#define _T6RST_RSEL1_POSN                                   0x1
#define _T6RST_RSEL1_POSITION                               0x1
#define _T6RST_RSEL1_SIZE                                   0x1
#define _T6RST_RSEL1_LENGTH                                 0x1
#define _T6RST_RSEL1_MASK                                   0x2
#define _T6RST_RSEL2_POSN                                   0x2
#define _T6RST_RSEL2_POSITION                               0x2
#define _T6RST_RSEL2_SIZE                                   0x1
#define _T6RST_RSEL2_LENGTH                                 0x1
#define _T6RST_RSEL2_MASK                                   0x4
#define _T6RST_RSEL3_POSN                                   0x3
#define _T6RST_RSEL3_POSITION                               0x3
#define _T6RST_RSEL3_SIZE                                   0x1
#define _T6RST_RSEL3_LENGTH                                 0x1
#define _T6RST_RSEL3_MASK                                   0x8
#define _T6RST_T6RSEL_POSN                                  0x0
#define _T6RST_T6RSEL_POSITION                              0x0
#define _T6RST_T6RSEL_SIZE                                  0x4
#define _T6RST_T6RSEL_LENGTH                                0x4
#define _T6RST_T6RSEL_MASK                                  0xF
#define _T6RST_T6RSEL0_POSN                                 0x0
#define _T6RST_T6RSEL0_POSITION                             0x0
#define _T6RST_T6RSEL0_SIZE                                 0x1
#define _T6RST_T6RSEL0_LENGTH                               0x1
#define _T6RST_T6RSEL0_MASK                                 0x1
#define _T6RST_T6RSEL1_POSN                                 0x1
#define _T6RST_T6RSEL1_POSITION                             0x1
#define _T6RST_T6RSEL1_SIZE                                 0x1
#define _T6RST_T6RSEL1_LENGTH                               0x1
#define _T6RST_T6RSEL1_MASK                                 0x2
#define _T6RST_T6RSEL2_POSN                                 0x2
#define _T6RST_T6RSEL2_POSITION                             0x2
#define _T6RST_T6RSEL2_SIZE                                 0x1
#define _T6RST_T6RSEL2_LENGTH                               0x1
#define _T6RST_T6RSEL2_MASK                                 0x4
#define _T6RST_T6RSEL3_POSN                                 0x3
#define _T6RST_T6RSEL3_POSITION                             0x3
#define _T6RST_T6RSEL3_SIZE                                 0x1
#define _T6RST_T6RSEL3_LENGTH                               0x1
#define _T6RST_T6RSEL3_MASK                                 0x8

// Register: TMR3
#define TMR3 TMR3
extern volatile unsigned short          TMR3                __at(0x493);
#ifndef _LIB_BUILD
asm("TMR3 equ 0493h");
#endif

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0x493);
#ifndef _LIB_BUILD
asm("TMR3L equ 0493h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0x493);
// bitfield macros
#define _TMR3L_TMR_POSN                                     0x0
#define _TMR3L_TMR_POSITION                                 0x0
#define _TMR3L_TMR_SIZE                                     0x8
#define _TMR3L_TMR_LENGTH                                   0x8
#define _TMR3L_TMR_MASK                                     0xFF

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0x494);
#ifndef _LIB_BUILD
asm("TMR3H equ 0494h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0x494);
// bitfield macros
#define _TMR3H_TMR_POSN                                     0x0
#define _TMR3H_TMR_POSITION                                 0x0
#define _TMR3H_TMR_SIZE                                     0x8
#define _TMR3H_TMR_LENGTH                                   0x8
#define _TMR3H_TMR_MASK                                     0xFF

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0x495);
#ifndef _LIB_BUILD
asm("T3CON equ 0495h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned                        :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
        unsigned CS                     :2;
    };
    struct {
        unsigned TMRON                  :1;
        unsigned                        :1;
        unsigned SYNC                   :1;
        unsigned                        :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned                        :1;
        unsigned nT3SYNC                :1;
        unsigned                        :3;
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
    };
    struct {
        unsigned T3ON                   :1;
        unsigned                        :3;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
        unsigned TMR3CS0                :1;
        unsigned TMR3CS1                :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0x495);
// bitfield macros
#define _T3CON_ON_POSN                                      0x0
#define _T3CON_ON_POSITION                                  0x0
#define _T3CON_ON_SIZE                                      0x1
#define _T3CON_ON_LENGTH                                    0x1
#define _T3CON_ON_MASK                                      0x1
#define _T3CON_nSYNC_POSN                                   0x2
#define _T3CON_nSYNC_POSITION                               0x2
#define _T3CON_nSYNC_SIZE                                   0x1
#define _T3CON_nSYNC_LENGTH                                 0x1
#define _T3CON_nSYNC_MASK                                   0x4
#define _T3CON_CKPS_POSN                                    0x4
#define _T3CON_CKPS_POSITION                                0x4
#define _T3CON_CKPS_SIZE                                    0x2
#define _T3CON_CKPS_LENGTH                                  0x2
#define _T3CON_CKPS_MASK                                    0x30
#define _T3CON_CS_POSN                                      0x6
#define _T3CON_CS_POSITION                                  0x6
#define _T3CON_CS_SIZE                                      0x2
#define _T3CON_CS_LENGTH                                    0x2
#define _T3CON_CS_MASK                                      0xC0
#define _T3CON_TMRON_POSN                                   0x0
#define _T3CON_TMRON_POSITION                               0x0
#define _T3CON_TMRON_SIZE                                   0x1
#define _T3CON_TMRON_LENGTH                                 0x1
#define _T3CON_TMRON_MASK                                   0x1
#define _T3CON_SYNC_POSN                                    0x2
#define _T3CON_SYNC_POSITION                                0x2
#define _T3CON_SYNC_SIZE                                    0x1
#define _T3CON_SYNC_LENGTH                                  0x1
#define _T3CON_SYNC_MASK                                    0x4
#define _T3CON_CKPS0_POSN                                   0x4
#define _T3CON_CKPS0_POSITION                               0x4
#define _T3CON_CKPS0_SIZE                                   0x1
#define _T3CON_CKPS0_LENGTH                                 0x1
#define _T3CON_CKPS0_MASK                                   0x10
#define _T3CON_CKPS1_POSN                                   0x5
#define _T3CON_CKPS1_POSITION                               0x5
#define _T3CON_CKPS1_SIZE                                   0x1
#define _T3CON_CKPS1_LENGTH                                 0x1
#define _T3CON_CKPS1_MASK                                   0x20
#define _T3CON_CS0_POSN                                     0x6
#define _T3CON_CS0_POSITION                                 0x6
#define _T3CON_CS0_SIZE                                     0x1
#define _T3CON_CS0_LENGTH                                   0x1
#define _T3CON_CS0_MASK                                     0x40
#define _T3CON_CS1_POSN                                     0x7
#define _T3CON_CS1_POSITION                                 0x7
#define _T3CON_CS1_SIZE                                     0x1
#define _T3CON_CS1_LENGTH                                   0x1
#define _T3CON_CS1_MASK                                     0x80
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_nT3SYNC_POSN                                 0x2
#define _T3CON_nT3SYNC_POSITION                             0x2
#define _T3CON_nT3SYNC_SIZE                                 0x1
#define _T3CON_nT3SYNC_LENGTH                               0x1
#define _T3CON_nT3SYNC_MASK                                 0x4
#define _T3CON_T3CS0_POSN                                   0x6
#define _T3CON_T3CS0_POSITION                               0x6
#define _T3CON_T3CS0_SIZE                                   0x1
#define _T3CON_T3CS0_LENGTH                                 0x1
#define _T3CON_T3CS0_MASK                                   0x40
#define _T3CON_T3CS1_POSN                                   0x7
#define _T3CON_T3CS1_POSITION                               0x7
#define _T3CON_T3CS1_SIZE                                   0x1
#define _T3CON_T3CS1_LENGTH                                 0x1
#define _T3CON_T3CS1_MASK                                   0x80
#define _T3CON_T3ON_POSN                                    0x0
#define _T3CON_T3ON_POSITION                                0x0
#define _T3CON_T3ON_SIZE                                    0x1
#define _T3CON_T3ON_LENGTH                                  0x1
#define _T3CON_T3ON_MASK                                    0x1
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_TMR3CS0_POSN                                 0x6
#define _T3CON_TMR3CS0_POSITION                             0x6
#define _T3CON_TMR3CS0_SIZE                                 0x1
#define _T3CON_TMR3CS0_LENGTH                               0x1
#define _T3CON_TMR3CS0_MASK                                 0x40
#define _T3CON_TMR3CS1_POSN                                 0x7
#define _T3CON_TMR3CS1_POSITION                             0x7
#define _T3CON_TMR3CS1_SIZE                                 0x1
#define _T3CON_TMR3CS1_LENGTH                               0x1
#define _T3CON_TMR3CS1_MASK                                 0x80

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0x496);
#ifndef _LIB_BUILD
asm("T3GCON equ 0496h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned                        :5;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nDONE            :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned TMR3GE                 :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0x496);
// bitfield macros
#define _T3GCON_GSS_POSN                                    0x0
#define _T3GCON_GSS_POSITION                                0x0
#define _T3GCON_GSS_SIZE                                    0x2
#define _T3GCON_GSS_LENGTH                                  0x2
#define _T3GCON_GSS_MASK                                    0x3
#define _T3GCON_GVAL_POSN                                   0x2
#define _T3GCON_GVAL_POSITION                               0x2
#define _T3GCON_GVAL_SIZE                                   0x1
#define _T3GCON_GVAL_LENGTH                                 0x1
#define _T3GCON_GVAL_MASK                                   0x4
#define _T3GCON_GGO_nDONE_POSN                              0x3
#define _T3GCON_GGO_nDONE_POSITION                          0x3
#define _T3GCON_GGO_nDONE_SIZE                              0x1
#define _T3GCON_GGO_nDONE_LENGTH                            0x1
#define _T3GCON_GGO_nDONE_MASK                              0x8
#define _T3GCON_GSPM_POSN                                   0x4
#define _T3GCON_GSPM_POSITION                               0x4
#define _T3GCON_GSPM_SIZE                                   0x1
#define _T3GCON_GSPM_LENGTH                                 0x1
#define _T3GCON_GSPM_MASK                                   0x10
#define _T3GCON_GTM_POSN                                    0x5
#define _T3GCON_GTM_POSITION                                0x5
#define _T3GCON_GTM_SIZE                                    0x1
#define _T3GCON_GTM_LENGTH                                  0x1
#define _T3GCON_GTM_MASK                                    0x20
#define _T3GCON_GPOL_POSN                                   0x6
#define _T3GCON_GPOL_POSITION                               0x6
#define _T3GCON_GPOL_SIZE                                   0x1
#define _T3GCON_GPOL_LENGTH                                 0x1
#define _T3GCON_GPOL_MASK                                   0x40
#define _T3GCON_GE_POSN                                     0x7
#define _T3GCON_GE_POSITION                                 0x7
#define _T3GCON_GE_SIZE                                     0x1
#define _T3GCON_GE_LENGTH                                   0x1
#define _T3GCON_GE_MASK                                     0x80
#define _T3GCON_GSS0_POSN                                   0x0
#define _T3GCON_GSS0_POSITION                               0x0
#define _T3GCON_GSS0_SIZE                                   0x1
#define _T3GCON_GSS0_LENGTH                                 0x1
#define _T3GCON_GSS0_MASK                                   0x1
#define _T3GCON_GSS1_POSN                                   0x1
#define _T3GCON_GSS1_POSITION                               0x1
#define _T3GCON_GSS1_SIZE                                   0x1
#define _T3GCON_GSS1_LENGTH                                 0x1
#define _T3GCON_GSS1_MASK                                   0x2
#define _T3GCON_T3GE_POSN                                   0x7
#define _T3GCON_T3GE_POSITION                               0x7
#define _T3GCON_T3GE_SIZE                                   0x1
#define _T3GCON_T3GE_LENGTH                                 0x1
#define _T3GCON_T3GE_MASK                                   0x80
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_nDONE_POSN                            0x3
#define _T3GCON_T3GGO_nDONE_POSITION                        0x3
#define _T3GCON_T3GGO_nDONE_SIZE                            0x1
#define _T3GCON_T3GGO_nDONE_LENGTH                          0x1
#define _T3GCON_T3GGO_nDONE_MASK                            0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_TMR3GE_POSN                                 0x7
#define _T3GCON_TMR3GE_POSITION                             0x7
#define _T3GCON_TMR3GE_SIZE                                 0x1
#define _T3GCON_TMR3GE_LENGTH                               0x1
#define _T3GCON_TMR3GE_MASK                                 0x80
#define _T3GCON_T3GSS0_POSN                                 0x0
#define _T3GCON_T3GSS0_POSITION                             0x0
#define _T3GCON_T3GSS0_SIZE                                 0x1
#define _T3GCON_T3GSS0_LENGTH                               0x1
#define _T3GCON_T3GSS0_MASK                                 0x1
#define _T3GCON_T3GSS1_POSN                                 0x1
#define _T3GCON_T3GSS1_POSITION                             0x1
#define _T3GCON_T3GSS1_SIZE                                 0x1
#define _T3GCON_T3GSS1_LENGTH                               0x1
#define _T3GCON_T3GSS1_MASK                                 0x2

// Register: TMR5
#define TMR5 TMR5
extern volatile unsigned short          TMR5                __at(0x49A);
#ifndef _LIB_BUILD
asm("TMR5 equ 049Ah");
#endif

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0x49A);
#ifndef _LIB_BUILD
asm("TMR5L equ 049Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0x49A);
// bitfield macros
#define _TMR5L_TMR_POSN                                     0x0
#define _TMR5L_TMR_POSITION                                 0x0
#define _TMR5L_TMR_SIZE                                     0x8
#define _TMR5L_TMR_LENGTH                                   0x8
#define _TMR5L_TMR_MASK                                     0xFF

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0x49B);
#ifndef _LIB_BUILD
asm("TMR5H equ 049Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0x49B);
// bitfield macros
#define _TMR5H_TMR_POSN                                     0x0
#define _TMR5H_TMR_POSITION                                 0x0
#define _TMR5H_TMR_SIZE                                     0x8
#define _TMR5H_TMR_LENGTH                                   0x8
#define _TMR5H_TMR_MASK                                     0xFF

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0x49C);
#ifndef _LIB_BUILD
asm("T5CON equ 049Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned                        :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
        unsigned CS                     :2;
    };
    struct {
        unsigned TMRON                  :1;
        unsigned                        :1;
        unsigned SYNC                   :1;
        unsigned                        :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned                        :1;
        unsigned nT5SYNC                :1;
        unsigned                        :3;
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
    };
    struct {
        unsigned T5ON                   :1;
        unsigned                        :3;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
        unsigned TMR5CS0                :1;
        unsigned TMR5CS1                :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0x49C);
// bitfield macros
#define _T5CON_ON_POSN                                      0x0
#define _T5CON_ON_POSITION                                  0x0
#define _T5CON_ON_SIZE                                      0x1
#define _T5CON_ON_LENGTH                                    0x1
#define _T5CON_ON_MASK                                      0x1
#define _T5CON_nSYNC_POSN                                   0x2
#define _T5CON_nSYNC_POSITION                               0x2
#define _T5CON_nSYNC_SIZE                                   0x1
#define _T5CON_nSYNC_LENGTH                                 0x1
#define _T5CON_nSYNC_MASK                                   0x4
#define _T5CON_CKPS_POSN                                    0x4
#define _T5CON_CKPS_POSITION                                0x4
#define _T5CON_CKPS_SIZE                                    0x2
#define _T5CON_CKPS_LENGTH                                  0x2
#define _T5CON_CKPS_MASK                                    0x30
#define _T5CON_CS_POSN                                      0x6
#define _T5CON_CS_POSITION                                  0x6
#define _T5CON_CS_SIZE                                      0x2
#define _T5CON_CS_LENGTH                                    0x2
#define _T5CON_CS_MASK                                      0xC0
#define _T5CON_TMRON_POSN                                   0x0
#define _T5CON_TMRON_POSITION                               0x0
#define _T5CON_TMRON_SIZE                                   0x1
#define _T5CON_TMRON_LENGTH                                 0x1
#define _T5CON_TMRON_MASK                                   0x1
#define _T5CON_SYNC_POSN                                    0x2
#define _T5CON_SYNC_POSITION                                0x2
#define _T5CON_SYNC_SIZE                                    0x1
#define _T5CON_SYNC_LENGTH                                  0x1
#define _T5CON_SYNC_MASK                                    0x4
#define _T5CON_CKPS0_POSN                                   0x4
#define _T5CON_CKPS0_POSITION                               0x4
#define _T5CON_CKPS0_SIZE                                   0x1
#define _T5CON_CKPS0_LENGTH                                 0x1
#define _T5CON_CKPS0_MASK                                   0x10
#define _T5CON_CKPS1_POSN                                   0x5
#define _T5CON_CKPS1_POSITION                               0x5
#define _T5CON_CKPS1_SIZE                                   0x1
#define _T5CON_CKPS1_LENGTH                                 0x1
#define _T5CON_CKPS1_MASK                                   0x20
#define _T5CON_CS0_POSN                                     0x6
#define _T5CON_CS0_POSITION                                 0x6
#define _T5CON_CS0_SIZE                                     0x1
#define _T5CON_CS0_LENGTH                                   0x1
#define _T5CON_CS0_MASK                                     0x40
#define _T5CON_CS1_POSN                                     0x7
#define _T5CON_CS1_POSITION                                 0x7
#define _T5CON_CS1_SIZE                                     0x1
#define _T5CON_CS1_LENGTH                                   0x1
#define _T5CON_CS1_MASK                                     0x80
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_nT5SYNC_POSN                                 0x2
#define _T5CON_nT5SYNC_POSITION                             0x2
#define _T5CON_nT5SYNC_SIZE                                 0x1
#define _T5CON_nT5SYNC_LENGTH                               0x1
#define _T5CON_nT5SYNC_MASK                                 0x4
#define _T5CON_T5CS0_POSN                                   0x6
#define _T5CON_T5CS0_POSITION                               0x6
#define _T5CON_T5CS0_SIZE                                   0x1
#define _T5CON_T5CS0_LENGTH                                 0x1
#define _T5CON_T5CS0_MASK                                   0x40
#define _T5CON_T5CS1_POSN                                   0x7
#define _T5CON_T5CS1_POSITION                               0x7
#define _T5CON_T5CS1_SIZE                                   0x1
#define _T5CON_T5CS1_LENGTH                                 0x1
#define _T5CON_T5CS1_MASK                                   0x80
#define _T5CON_T5ON_POSN                                    0x0
#define _T5CON_T5ON_POSITION                                0x0
#define _T5CON_T5ON_SIZE                                    0x1
#define _T5CON_T5ON_LENGTH                                  0x1
#define _T5CON_T5ON_MASK                                    0x1
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_TMR5CS0_POSN                                 0x6
#define _T5CON_TMR5CS0_POSITION                             0x6
#define _T5CON_TMR5CS0_SIZE                                 0x1
#define _T5CON_TMR5CS0_LENGTH                               0x1
#define _T5CON_TMR5CS0_MASK                                 0x40
#define _T5CON_TMR5CS1_POSN                                 0x7
#define _T5CON_TMR5CS1_POSITION                             0x7
#define _T5CON_TMR5CS1_SIZE                                 0x1
#define _T5CON_TMR5CS1_LENGTH                               0x1
#define _T5CON_TMR5CS1_MASK                                 0x80

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0x49D);
#ifndef _LIB_BUILD
asm("T5GCON equ 049Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned                        :5;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nDONE            :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned TMR5GE                 :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0x49D);
// bitfield macros
#define _T5GCON_GSS_POSN                                    0x0
#define _T5GCON_GSS_POSITION                                0x0
#define _T5GCON_GSS_SIZE                                    0x2
#define _T5GCON_GSS_LENGTH                                  0x2
#define _T5GCON_GSS_MASK                                    0x3
#define _T5GCON_GVAL_POSN                                   0x2
#define _T5GCON_GVAL_POSITION                               0x2
#define _T5GCON_GVAL_SIZE                                   0x1
#define _T5GCON_GVAL_LENGTH                                 0x1
#define _T5GCON_GVAL_MASK                                   0x4
#define _T5GCON_GGO_nDONE_POSN                              0x3
#define _T5GCON_GGO_nDONE_POSITION                          0x3
#define _T5GCON_GGO_nDONE_SIZE                              0x1
#define _T5GCON_GGO_nDONE_LENGTH                            0x1
#define _T5GCON_GGO_nDONE_MASK                              0x8
#define _T5GCON_GSPM_POSN                                   0x4
#define _T5GCON_GSPM_POSITION                               0x4
#define _T5GCON_GSPM_SIZE                                   0x1
#define _T5GCON_GSPM_LENGTH                                 0x1
#define _T5GCON_GSPM_MASK                                   0x10
#define _T5GCON_GTM_POSN                                    0x5
#define _T5GCON_GTM_POSITION                                0x5
#define _T5GCON_GTM_SIZE                                    0x1
#define _T5GCON_GTM_LENGTH                                  0x1
#define _T5GCON_GTM_MASK                                    0x20
#define _T5GCON_GPOL_POSN                                   0x6
#define _T5GCON_GPOL_POSITION                               0x6
#define _T5GCON_GPOL_SIZE                                   0x1
#define _T5GCON_GPOL_LENGTH                                 0x1
#define _T5GCON_GPOL_MASK                                   0x40
#define _T5GCON_GE_POSN                                     0x7
#define _T5GCON_GE_POSITION                                 0x7
#define _T5GCON_GE_SIZE                                     0x1
#define _T5GCON_GE_LENGTH                                   0x1
#define _T5GCON_GE_MASK                                     0x80
#define _T5GCON_GSS0_POSN                                   0x0
#define _T5GCON_GSS0_POSITION                               0x0
#define _T5GCON_GSS0_SIZE                                   0x1
#define _T5GCON_GSS0_LENGTH                                 0x1
#define _T5GCON_GSS0_MASK                                   0x1
#define _T5GCON_GSS1_POSN                                   0x1
#define _T5GCON_GSS1_POSITION                               0x1
#define _T5GCON_GSS1_SIZE                                   0x1
#define _T5GCON_GSS1_LENGTH                                 0x1
#define _T5GCON_GSS1_MASK                                   0x2
#define _T5GCON_T5GE_POSN                                   0x7
#define _T5GCON_T5GE_POSITION                               0x7
#define _T5GCON_T5GE_SIZE                                   0x1
#define _T5GCON_T5GE_LENGTH                                 0x1
#define _T5GCON_T5GE_MASK                                   0x80
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_nDONE_POSN                            0x3
#define _T5GCON_T5GGO_nDONE_POSITION                        0x3
#define _T5GCON_T5GGO_nDONE_SIZE                            0x1
#define _T5GCON_T5GGO_nDONE_LENGTH                          0x1
#define _T5GCON_T5GGO_nDONE_MASK                            0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_TMR5GE_POSN                                 0x7
#define _T5GCON_TMR5GE_POSITION                             0x7
#define _T5GCON_TMR5GE_SIZE                                 0x1
#define _T5GCON_TMR5GE_LENGTH                               0x1
#define _T5GCON_TMR5GE_MASK                                 0x80
#define _T5GCON_T5GSS0_POSN                                 0x0
#define _T5GCON_T5GSS0_POSITION                             0x0
#define _T5GCON_T5GSS0_SIZE                                 0x1
#define _T5GCON_T5GSS0_LENGTH                               0x1
#define _T5GCON_T5GSS0_MASK                                 0x1
#define _T5GCON_T5GSS1_POSN                                 0x1
#define _T5GCON_T5GSS1_POSITION                             0x1
#define _T5GCON_T5GSS1_SIZE                                 0x1
#define _T5GCON_T5GSS1_LENGTH                               0x1
#define _T5GCON_T5GSS1_MASK                                 0x2

// Register: OPA1NCHS
#define OPA1NCHS OPA1NCHS
extern volatile unsigned char           OPA1NCHS            __at(0x50F);
#ifndef _LIB_BUILD
asm("OPA1NCHS equ 050Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :8;
    };
    struct {
        unsigned OPA1NCH                :8;
    };
} OPA1NCHSbits_t;
extern volatile OPA1NCHSbits_t OPA1NCHSbits __at(0x50F);
// bitfield macros
#define _OPA1NCHS_NCH_POSN                                  0x0
#define _OPA1NCHS_NCH_POSITION                              0x0
#define _OPA1NCHS_NCH_SIZE                                  0x8
#define _OPA1NCHS_NCH_LENGTH                                0x8
#define _OPA1NCHS_NCH_MASK                                  0xFF
#define _OPA1NCHS_OPA1NCH_POSN                              0x0
#define _OPA1NCHS_OPA1NCH_POSITION                          0x0
#define _OPA1NCHS_OPA1NCH_SIZE                              0x8
#define _OPA1NCHS_OPA1NCH_LENGTH                            0x8
#define _OPA1NCHS_OPA1NCH_MASK                              0xFF

// Register: OPA1PCHS
#define OPA1PCHS OPA1PCHS
extern volatile unsigned char           OPA1PCHS            __at(0x510);
#ifndef _LIB_BUILD
asm("OPA1PCHS equ 0510h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
    struct {
        unsigned OPA1PCH                :8;
    };
} OPA1PCHSbits_t;
extern volatile OPA1PCHSbits_t OPA1PCHSbits __at(0x510);
// bitfield macros
#define _OPA1PCHS_PCH_POSN                                  0x0
#define _OPA1PCHS_PCH_POSITION                              0x0
#define _OPA1PCHS_PCH_SIZE                                  0x8
#define _OPA1PCHS_PCH_LENGTH                                0x8
#define _OPA1PCHS_PCH_MASK                                  0xFF
#define _OPA1PCHS_OPA1PCH_POSN                              0x0
#define _OPA1PCHS_OPA1PCH_POSITION                          0x0
#define _OPA1PCHS_OPA1PCH_SIZE                              0x8
#define _OPA1PCHS_OPA1PCH_LENGTH                            0x8
#define _OPA1PCHS_OPA1PCH_MASK                              0xFF

// Register: OPA1CON
#define OPA1CON OPA1CON
extern volatile unsigned char           OPA1CON             __at(0x511);
#ifndef _LIB_BUILD
asm("OPA1CON equ 0511h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ORM                    :2;
        unsigned ORPOL                  :1;
        unsigned                        :1;
        unsigned UG                     :1;
        unsigned                        :2;
        unsigned EN                     :1;
    };
    struct {
        unsigned ORM0                   :1;
        unsigned ORM1                   :1;
    };
    struct {
        unsigned OPA1ORM                :2;
        unsigned OPA1ORPOL              :1;
        unsigned                        :1;
        unsigned OPA1UG                 :1;
        unsigned                        :2;
        unsigned OPA1EN                 :1;
    };
    struct {
        unsigned OPA1ORM0               :1;
        unsigned OPA1ORM1               :1;
    };
} OPA1CONbits_t;
extern volatile OPA1CONbits_t OPA1CONbits __at(0x511);
// bitfield macros
#define _OPA1CON_ORM_POSN                                   0x0
#define _OPA1CON_ORM_POSITION                               0x0
#define _OPA1CON_ORM_SIZE                                   0x2
#define _OPA1CON_ORM_LENGTH                                 0x2
#define _OPA1CON_ORM_MASK                                   0x3
#define _OPA1CON_ORPOL_POSN                                 0x2
#define _OPA1CON_ORPOL_POSITION                             0x2
#define _OPA1CON_ORPOL_SIZE                                 0x1
#define _OPA1CON_ORPOL_LENGTH                               0x1
#define _OPA1CON_ORPOL_MASK                                 0x4
#define _OPA1CON_UG_POSN                                    0x4
#define _OPA1CON_UG_POSITION                                0x4
#define _OPA1CON_UG_SIZE                                    0x1
#define _OPA1CON_UG_LENGTH                                  0x1
#define _OPA1CON_UG_MASK                                    0x10
#define _OPA1CON_EN_POSN                                    0x7
#define _OPA1CON_EN_POSITION                                0x7
#define _OPA1CON_EN_SIZE                                    0x1
#define _OPA1CON_EN_LENGTH                                  0x1
#define _OPA1CON_EN_MASK                                    0x80
#define _OPA1CON_ORM0_POSN                                  0x0
#define _OPA1CON_ORM0_POSITION                              0x0
#define _OPA1CON_ORM0_SIZE                                  0x1
#define _OPA1CON_ORM0_LENGTH                                0x1
#define _OPA1CON_ORM0_MASK                                  0x1
#define _OPA1CON_ORM1_POSN                                  0x1
#define _OPA1CON_ORM1_POSITION                              0x1
#define _OPA1CON_ORM1_SIZE                                  0x1
#define _OPA1CON_ORM1_LENGTH                                0x1
#define _OPA1CON_ORM1_MASK                                  0x2
#define _OPA1CON_OPA1ORM_POSN                               0x0
#define _OPA1CON_OPA1ORM_POSITION                           0x0
#define _OPA1CON_OPA1ORM_SIZE                               0x2
#define _OPA1CON_OPA1ORM_LENGTH                             0x2
#define _OPA1CON_OPA1ORM_MASK                               0x3
#define _OPA1CON_OPA1ORPOL_POSN                             0x2
#define _OPA1CON_OPA1ORPOL_POSITION                         0x2
#define _OPA1CON_OPA1ORPOL_SIZE                             0x1
#define _OPA1CON_OPA1ORPOL_LENGTH                           0x1
#define _OPA1CON_OPA1ORPOL_MASK                             0x4
#define _OPA1CON_OPA1UG_POSN                                0x4
#define _OPA1CON_OPA1UG_POSITION                            0x4
#define _OPA1CON_OPA1UG_SIZE                                0x1
#define _OPA1CON_OPA1UG_LENGTH                              0x1
#define _OPA1CON_OPA1UG_MASK                                0x10
#define _OPA1CON_OPA1EN_POSN                                0x7
#define _OPA1CON_OPA1EN_POSITION                            0x7
#define _OPA1CON_OPA1EN_SIZE                                0x1
#define _OPA1CON_OPA1EN_LENGTH                              0x1
#define _OPA1CON_OPA1EN_MASK                                0x80
#define _OPA1CON_OPA1ORM0_POSN                              0x0
#define _OPA1CON_OPA1ORM0_POSITION                          0x0
#define _OPA1CON_OPA1ORM0_SIZE                              0x1
#define _OPA1CON_OPA1ORM0_LENGTH                            0x1
#define _OPA1CON_OPA1ORM0_MASK                              0x1
#define _OPA1CON_OPA1ORM1_POSN                              0x1
#define _OPA1CON_OPA1ORM1_POSITION                          0x1
#define _OPA1CON_OPA1ORM1_SIZE                              0x1
#define _OPA1CON_OPA1ORM1_LENGTH                            0x1
#define _OPA1CON_OPA1ORM1_MASK                              0x2

// Register: OPA1ORS
#define OPA1ORS OPA1ORS
extern volatile unsigned char           OPA1ORS             __at(0x512);
#ifndef _LIB_BUILD
asm("OPA1ORS equ 0512h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ORS                    :8;
    };
} OPA1ORSbits_t;
extern volatile OPA1ORSbits_t OPA1ORSbits __at(0x512);
// bitfield macros
#define _OPA1ORS_ORS_POSN                                   0x0
#define _OPA1ORS_ORS_POSITION                               0x0
#define _OPA1ORS_ORS_SIZE                                   0x8
#define _OPA1ORS_ORS_LENGTH                                 0x8
#define _OPA1ORS_ORS_MASK                                   0xFF

// Register: DACLD
#define DACLD DACLD
extern volatile unsigned char           DACLD               __at(0x590);
#ifndef _LIB_BUILD
asm("DACLD equ 0590h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1LD                 :1;
    };
} DACLDbits_t;
extern volatile DACLDbits_t DACLDbits __at(0x590);
// bitfield macros
#define _DACLD_DAC1LD_POSN                                  0x0
#define _DACLD_DAC1LD_POSITION                              0x0
#define _DACLD_DAC1LD_SIZE                                  0x1
#define _DACLD_DAC1LD_LENGTH                                0x1
#define _DACLD_DAC1LD_MASK                                  0x1

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0x591);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 0591h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :2;
        unsigned PSS                    :2;
        unsigned                        :1;
        unsigned OE1                    :1;
        unsigned FM                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned NSS0                   :1;
        unsigned                        :1;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
        unsigned                        :1;
        unsigned OE                     :1;
    };
    struct {
        unsigned DACNSS                 :2;
        unsigned DACPSS                 :2;
        unsigned                        :1;
        unsigned DACOE1                 :1;
        unsigned DACFM                  :1;
        unsigned DACEN                  :1;
    };
    struct {
        unsigned DACNSS0                :1;
        unsigned                        :1;
        unsigned DACPSS0                :1;
        unsigned DACPSS1                :1;
        unsigned                        :1;
        unsigned DACOE                  :1;
    };
    struct {
        unsigned DAC1NSS                :2;
        unsigned DAC1PSS                :2;
        unsigned                        :1;
        unsigned DAC1OE1                :1;
        unsigned DAC1FM                 :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned DAC1NSS0               :1;
        unsigned                        :1;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0x591);
// bitfield macros
#define _DAC1CON0_NSS_POSN                                  0x0
#define _DAC1CON0_NSS_POSITION                              0x0
#define _DAC1CON0_NSS_SIZE                                  0x2
#define _DAC1CON0_NSS_LENGTH                                0x2
#define _DAC1CON0_NSS_MASK                                  0x3
#define _DAC1CON0_PSS_POSN                                  0x2
#define _DAC1CON0_PSS_POSITION                              0x2
#define _DAC1CON0_PSS_SIZE                                  0x2
#define _DAC1CON0_PSS_LENGTH                                0x2
#define _DAC1CON0_PSS_MASK                                  0xC
#define _DAC1CON0_OE1_POSN                                  0x5
#define _DAC1CON0_OE1_POSITION                              0x5
#define _DAC1CON0_OE1_SIZE                                  0x1
#define _DAC1CON0_OE1_LENGTH                                0x1
#define _DAC1CON0_OE1_MASK                                  0x20
#define _DAC1CON0_FM_POSN                                   0x6
#define _DAC1CON0_FM_POSITION                               0x6
#define _DAC1CON0_FM_SIZE                                   0x1
#define _DAC1CON0_FM_LENGTH                                 0x1
#define _DAC1CON0_FM_MASK                                   0x40
#define _DAC1CON0_EN_POSN                                   0x7
#define _DAC1CON0_EN_POSITION                               0x7
#define _DAC1CON0_EN_SIZE                                   0x1
#define _DAC1CON0_EN_LENGTH                                 0x1
#define _DAC1CON0_EN_MASK                                   0x80
#define _DAC1CON0_NSS0_POSN                                 0x0
#define _DAC1CON0_NSS0_POSITION                             0x0
#define _DAC1CON0_NSS0_SIZE                                 0x1
#define _DAC1CON0_NSS0_LENGTH                               0x1
#define _DAC1CON0_NSS0_MASK                                 0x1
#define _DAC1CON0_PSS0_POSN                                 0x2
#define _DAC1CON0_PSS0_POSITION                             0x2
#define _DAC1CON0_PSS0_SIZE                                 0x1
#define _DAC1CON0_PSS0_LENGTH                               0x1
#define _DAC1CON0_PSS0_MASK                                 0x4
#define _DAC1CON0_PSS1_POSN                                 0x3
#define _DAC1CON0_PSS1_POSITION                             0x3
#define _DAC1CON0_PSS1_SIZE                                 0x1
#define _DAC1CON0_PSS1_LENGTH                               0x1
#define _DAC1CON0_PSS1_MASK                                 0x8
#define _DAC1CON0_OE_POSN                                   0x5
#define _DAC1CON0_OE_POSITION                               0x5
#define _DAC1CON0_OE_SIZE                                   0x1
#define _DAC1CON0_OE_LENGTH                                 0x1
#define _DAC1CON0_OE_MASK                                   0x20
#define _DAC1CON0_DACNSS_POSN                               0x0
#define _DAC1CON0_DACNSS_POSITION                           0x0
#define _DAC1CON0_DACNSS_SIZE                               0x2
#define _DAC1CON0_DACNSS_LENGTH                             0x2
#define _DAC1CON0_DACNSS_MASK                               0x3
#define _DAC1CON0_DACPSS_POSN                               0x2
#define _DAC1CON0_DACPSS_POSITION                           0x2
#define _DAC1CON0_DACPSS_SIZE                               0x2
#define _DAC1CON0_DACPSS_LENGTH                             0x2
#define _DAC1CON0_DACPSS_MASK                               0xC
#define _DAC1CON0_DACOE1_POSN                               0x5
#define _DAC1CON0_DACOE1_POSITION                           0x5
#define _DAC1CON0_DACOE1_SIZE                               0x1
#define _DAC1CON0_DACOE1_LENGTH                             0x1
#define _DAC1CON0_DACOE1_MASK                               0x20
#define _DAC1CON0_DACFM_POSN                                0x6
#define _DAC1CON0_DACFM_POSITION                            0x6
#define _DAC1CON0_DACFM_SIZE                                0x1
#define _DAC1CON0_DACFM_LENGTH                              0x1
#define _DAC1CON0_DACFM_MASK                                0x40
#define _DAC1CON0_DACEN_POSN                                0x7
#define _DAC1CON0_DACEN_POSITION                            0x7
#define _DAC1CON0_DACEN_SIZE                                0x1
#define _DAC1CON0_DACEN_LENGTH                              0x1
#define _DAC1CON0_DACEN_MASK                                0x80
#define _DAC1CON0_DACNSS0_POSN                              0x0
#define _DAC1CON0_DACNSS0_POSITION                          0x0
#define _DAC1CON0_DACNSS0_SIZE                              0x1
#define _DAC1CON0_DACNSS0_LENGTH                            0x1
#define _DAC1CON0_DACNSS0_MASK                              0x1
#define _DAC1CON0_DACPSS0_POSN                              0x2
#define _DAC1CON0_DACPSS0_POSITION                          0x2
#define _DAC1CON0_DACPSS0_SIZE                              0x1
#define _DAC1CON0_DACPSS0_LENGTH                            0x1
#define _DAC1CON0_DACPSS0_MASK                              0x4
#define _DAC1CON0_DACPSS1_POSN                              0x3
#define _DAC1CON0_DACPSS1_POSITION                          0x3
#define _DAC1CON0_DACPSS1_SIZE                              0x1
#define _DAC1CON0_DACPSS1_LENGTH                            0x1
#define _DAC1CON0_DACPSS1_MASK                              0x8
#define _DAC1CON0_DACOE_POSN                                0x5
#define _DAC1CON0_DACOE_POSITION                            0x5
#define _DAC1CON0_DACOE_SIZE                                0x1
#define _DAC1CON0_DACOE_LENGTH                              0x1
#define _DAC1CON0_DACOE_MASK                                0x20
#define _DAC1CON0_DAC1NSS_POSN                              0x0
#define _DAC1CON0_DAC1NSS_POSITION                          0x0
#define _DAC1CON0_DAC1NSS_SIZE                              0x2
#define _DAC1CON0_DAC1NSS_LENGTH                            0x2
#define _DAC1CON0_DAC1NSS_MASK                              0x3
#define _DAC1CON0_DAC1PSS_POSN                              0x2
#define _DAC1CON0_DAC1PSS_POSITION                          0x2
#define _DAC1CON0_DAC1PSS_SIZE                              0x2
#define _DAC1CON0_DAC1PSS_LENGTH                            0x2
#define _DAC1CON0_DAC1PSS_MASK                              0xC
#define _DAC1CON0_DAC1OE1_POSN                              0x5
#define _DAC1CON0_DAC1OE1_POSITION                          0x5
#define _DAC1CON0_DAC1OE1_SIZE                              0x1
#define _DAC1CON0_DAC1OE1_LENGTH                            0x1
#define _DAC1CON0_DAC1OE1_MASK                              0x20
#define _DAC1CON0_DAC1FM_POSN                               0x6
#define _DAC1CON0_DAC1FM_POSITION                           0x6
#define _DAC1CON0_DAC1FM_SIZE                               0x1
#define _DAC1CON0_DAC1FM_LENGTH                             0x1
#define _DAC1CON0_DAC1FM_MASK                               0x40
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_DAC1NSS0_POSN                             0x0
#define _DAC1CON0_DAC1NSS0_POSITION                         0x0
#define _DAC1CON0_DAC1NSS0_SIZE                             0x1
#define _DAC1CON0_DAC1NSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1NSS0_MASK                             0x1
#define _DAC1CON0_DAC1PSS0_POSN                             0x2
#define _DAC1CON0_DAC1PSS0_POSITION                         0x2
#define _DAC1CON0_DAC1PSS0_SIZE                             0x1
#define _DAC1CON0_DAC1PSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS0_MASK                             0x4
#define _DAC1CON0_DAC1PSS1_POSN                             0x3
#define _DAC1CON0_DAC1PSS1_POSITION                         0x3
#define _DAC1CON0_DAC1PSS1_SIZE                             0x1
#define _DAC1CON0_DAC1PSS1_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS1_MASK                             0x8

// Register: DAC1REF
#define DAC1REF DAC1REF
extern volatile unsigned short          DAC1REF             __at(0x592);
#ifndef _LIB_BUILD
asm("DAC1REF equ 0592h");
#endif

// Register: DAC1REFL
#define DAC1REFL DAC1REFL
extern volatile unsigned char           DAC1REFL            __at(0x592);
#ifndef _LIB_BUILD
asm("DAC1REFL equ 0592h");
#endif
// aliases
extern volatile unsigned char           DAC1CON1            __at(0x592);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 0592h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned REF0                   :1;
        unsigned REF1                   :1;
        unsigned REF2                   :1;
        unsigned REF3                   :1;
        unsigned REF4                   :1;
        unsigned REF5                   :1;
        unsigned REF6                   :1;
        unsigned REF7                   :1;
    };
    struct {
        unsigned DAC1REF0               :1;
        unsigned DAC1REF1               :1;
        unsigned DAC1REF2               :1;
        unsigned DAC1REF3               :1;
        unsigned DAC1REF4               :1;
        unsigned DAC1REF5               :1;
        unsigned DAC1REF6               :1;
        unsigned DAC1REF7               :1;
    };
    struct {
        unsigned R0                     :1;
        unsigned R1                     :1;
        unsigned R2                     :1;
        unsigned R3                     :1;
        unsigned R4                     :1;
        unsigned R5                     :1;
        unsigned R6                     :1;
        unsigned R7                     :1;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
        unsigned DAC1R5                 :1;
        unsigned DAC1R6                 :1;
        unsigned DAC1R7                 :1;
    };
} DAC1REFLbits_t;
extern volatile DAC1REFLbits_t DAC1REFLbits __at(0x592);
// bitfield macros
#define _DAC1REFL_REF0_POSN                                 0x0
#define _DAC1REFL_REF0_POSITION                             0x0
#define _DAC1REFL_REF0_SIZE                                 0x1
#define _DAC1REFL_REF0_LENGTH                               0x1
#define _DAC1REFL_REF0_MASK                                 0x1
#define _DAC1REFL_REF1_POSN                                 0x1
#define _DAC1REFL_REF1_POSITION                             0x1
#define _DAC1REFL_REF1_SIZE                                 0x1
#define _DAC1REFL_REF1_LENGTH                               0x1
#define _DAC1REFL_REF1_MASK                                 0x2
#define _DAC1REFL_REF2_POSN                                 0x2
#define _DAC1REFL_REF2_POSITION                             0x2
#define _DAC1REFL_REF2_SIZE                                 0x1
#define _DAC1REFL_REF2_LENGTH                               0x1
#define _DAC1REFL_REF2_MASK                                 0x4
#define _DAC1REFL_REF3_POSN                                 0x3
#define _DAC1REFL_REF3_POSITION                             0x3
#define _DAC1REFL_REF3_SIZE                                 0x1
#define _DAC1REFL_REF3_LENGTH                               0x1
#define _DAC1REFL_REF3_MASK                                 0x8
#define _DAC1REFL_REF4_POSN                                 0x4
#define _DAC1REFL_REF4_POSITION                             0x4
#define _DAC1REFL_REF4_SIZE                                 0x1
#define _DAC1REFL_REF4_LENGTH                               0x1
#define _DAC1REFL_REF4_MASK                                 0x10
#define _DAC1REFL_REF5_POSN                                 0x5
#define _DAC1REFL_REF5_POSITION                             0x5
#define _DAC1REFL_REF5_SIZE                                 0x1
#define _DAC1REFL_REF5_LENGTH                               0x1
#define _DAC1REFL_REF5_MASK                                 0x20
#define _DAC1REFL_REF6_POSN                                 0x6
#define _DAC1REFL_REF6_POSITION                             0x6
#define _DAC1REFL_REF6_SIZE                                 0x1
#define _DAC1REFL_REF6_LENGTH                               0x1
#define _DAC1REFL_REF6_MASK                                 0x40
#define _DAC1REFL_REF7_POSN                                 0x7
#define _DAC1REFL_REF7_POSITION                             0x7
#define _DAC1REFL_REF7_SIZE                                 0x1
#define _DAC1REFL_REF7_LENGTH                               0x1
#define _DAC1REFL_REF7_MASK                                 0x80
#define _DAC1REFL_DAC1REF0_POSN                             0x0
#define _DAC1REFL_DAC1REF0_POSITION                         0x0
#define _DAC1REFL_DAC1REF0_SIZE                             0x1
#define _DAC1REFL_DAC1REF0_LENGTH                           0x1
#define _DAC1REFL_DAC1REF0_MASK                             0x1
#define _DAC1REFL_DAC1REF1_POSN                             0x1
#define _DAC1REFL_DAC1REF1_POSITION                         0x1
#define _DAC1REFL_DAC1REF1_SIZE                             0x1
#define _DAC1REFL_DAC1REF1_LENGTH                           0x1
#define _DAC1REFL_DAC1REF1_MASK                             0x2
#define _DAC1REFL_DAC1REF2_POSN                             0x2
#define _DAC1REFL_DAC1REF2_POSITION                         0x2
#define _DAC1REFL_DAC1REF2_SIZE                             0x1
#define _DAC1REFL_DAC1REF2_LENGTH                           0x1
#define _DAC1REFL_DAC1REF2_MASK                             0x4
#define _DAC1REFL_DAC1REF3_POSN                             0x3
#define _DAC1REFL_DAC1REF3_POSITION                         0x3
#define _DAC1REFL_DAC1REF3_SIZE                             0x1
#define _DAC1REFL_DAC1REF3_LENGTH                           0x1
#define _DAC1REFL_DAC1REF3_MASK                             0x8
#define _DAC1REFL_DAC1REF4_POSN                             0x4
#define _DAC1REFL_DAC1REF4_POSITION                         0x4
#define _DAC1REFL_DAC1REF4_SIZE                             0x1
#define _DAC1REFL_DAC1REF4_LENGTH                           0x1
#define _DAC1REFL_DAC1REF4_MASK                             0x10
#define _DAC1REFL_DAC1REF5_POSN                             0x5
#define _DAC1REFL_DAC1REF5_POSITION                         0x5
#define _DAC1REFL_DAC1REF5_SIZE                             0x1
#define _DAC1REFL_DAC1REF5_LENGTH                           0x1
#define _DAC1REFL_DAC1REF5_MASK                             0x20
#define _DAC1REFL_DAC1REF6_POSN                             0x6
#define _DAC1REFL_DAC1REF6_POSITION                         0x6
#define _DAC1REFL_DAC1REF6_SIZE                             0x1
#define _DAC1REFL_DAC1REF6_LENGTH                           0x1
#define _DAC1REFL_DAC1REF6_MASK                             0x40
#define _DAC1REFL_DAC1REF7_POSN                             0x7
#define _DAC1REFL_DAC1REF7_POSITION                         0x7
#define _DAC1REFL_DAC1REF7_SIZE                             0x1
#define _DAC1REFL_DAC1REF7_LENGTH                           0x1
#define _DAC1REFL_DAC1REF7_MASK                             0x80
#define _DAC1REFL_R0_POSN                                   0x0
#define _DAC1REFL_R0_POSITION                               0x0
#define _DAC1REFL_R0_SIZE                                   0x1
#define _DAC1REFL_R0_LENGTH                                 0x1
#define _DAC1REFL_R0_MASK                                   0x1
#define _DAC1REFL_R1_POSN                                   0x1
#define _DAC1REFL_R1_POSITION                               0x1
#define _DAC1REFL_R1_SIZE                                   0x1
#define _DAC1REFL_R1_LENGTH                                 0x1
#define _DAC1REFL_R1_MASK                                   0x2
#define _DAC1REFL_R2_POSN                                   0x2
#define _DAC1REFL_R2_POSITION                               0x2
#define _DAC1REFL_R2_SIZE                                   0x1
#define _DAC1REFL_R2_LENGTH                                 0x1
#define _DAC1REFL_R2_MASK                                   0x4
#define _DAC1REFL_R3_POSN                                   0x3
#define _DAC1REFL_R3_POSITION                               0x3
#define _DAC1REFL_R3_SIZE                                   0x1
#define _DAC1REFL_R3_LENGTH                                 0x1
#define _DAC1REFL_R3_MASK                                   0x8
#define _DAC1REFL_R4_POSN                                   0x4
#define _DAC1REFL_R4_POSITION                               0x4
#define _DAC1REFL_R4_SIZE                                   0x1
#define _DAC1REFL_R4_LENGTH                                 0x1
#define _DAC1REFL_R4_MASK                                   0x10
#define _DAC1REFL_R5_POSN                                   0x5
#define _DAC1REFL_R5_POSITION                               0x5
#define _DAC1REFL_R5_SIZE                                   0x1
#define _DAC1REFL_R5_LENGTH                                 0x1
#define _DAC1REFL_R5_MASK                                   0x20
#define _DAC1REFL_R6_POSN                                   0x6
#define _DAC1REFL_R6_POSITION                               0x6
#define _DAC1REFL_R6_SIZE                                   0x1
#define _DAC1REFL_R6_LENGTH                                 0x1
#define _DAC1REFL_R6_MASK                                   0x40
#define _DAC1REFL_R7_POSN                                   0x7
#define _DAC1REFL_R7_POSITION                               0x7
#define _DAC1REFL_R7_SIZE                                   0x1
#define _DAC1REFL_R7_LENGTH                                 0x1
#define _DAC1REFL_R7_MASK                                   0x80
#define _DAC1REFL_DAC1R0_POSN                               0x0
#define _DAC1REFL_DAC1R0_POSITION                           0x0
#define _DAC1REFL_DAC1R0_SIZE                               0x1
#define _DAC1REFL_DAC1R0_LENGTH                             0x1
#define _DAC1REFL_DAC1R0_MASK                               0x1
#define _DAC1REFL_DAC1R1_POSN                               0x1
#define _DAC1REFL_DAC1R1_POSITION                           0x1
#define _DAC1REFL_DAC1R1_SIZE                               0x1
#define _DAC1REFL_DAC1R1_LENGTH                             0x1
#define _DAC1REFL_DAC1R1_MASK                               0x2
#define _DAC1REFL_DAC1R2_POSN                               0x2
#define _DAC1REFL_DAC1R2_POSITION                           0x2
#define _DAC1REFL_DAC1R2_SIZE                               0x1
#define _DAC1REFL_DAC1R2_LENGTH                             0x1
#define _DAC1REFL_DAC1R2_MASK                               0x4
#define _DAC1REFL_DAC1R3_POSN                               0x3
#define _DAC1REFL_DAC1R3_POSITION                           0x3
#define _DAC1REFL_DAC1R3_SIZE                               0x1
#define _DAC1REFL_DAC1R3_LENGTH                             0x1
#define _DAC1REFL_DAC1R3_MASK                               0x8
#define _DAC1REFL_DAC1R4_POSN                               0x4
#define _DAC1REFL_DAC1R4_POSITION                           0x4
#define _DAC1REFL_DAC1R4_SIZE                               0x1
#define _DAC1REFL_DAC1R4_LENGTH                             0x1
#define _DAC1REFL_DAC1R4_MASK                               0x10
#define _DAC1REFL_DAC1R5_POSN                               0x5
#define _DAC1REFL_DAC1R5_POSITION                           0x5
#define _DAC1REFL_DAC1R5_SIZE                               0x1
#define _DAC1REFL_DAC1R5_LENGTH                             0x1
#define _DAC1REFL_DAC1R5_MASK                               0x20
#define _DAC1REFL_DAC1R6_POSN                               0x6
#define _DAC1REFL_DAC1R6_POSITION                           0x6
#define _DAC1REFL_DAC1R6_SIZE                               0x1
#define _DAC1REFL_DAC1R6_LENGTH                             0x1
#define _DAC1REFL_DAC1R6_MASK                               0x40
#define _DAC1REFL_DAC1R7_POSN                               0x7
#define _DAC1REFL_DAC1R7_POSITION                           0x7
#define _DAC1REFL_DAC1R7_SIZE                               0x1
#define _DAC1REFL_DAC1R7_LENGTH                             0x1
#define _DAC1REFL_DAC1R7_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned REF0                   :1;
        unsigned REF1                   :1;
        unsigned REF2                   :1;
        unsigned REF3                   :1;
        unsigned REF4                   :1;
        unsigned REF5                   :1;
        unsigned REF6                   :1;
        unsigned REF7                   :1;
    };
    struct {
        unsigned DAC1REF0               :1;
        unsigned DAC1REF1               :1;
        unsigned DAC1REF2               :1;
        unsigned DAC1REF3               :1;
        unsigned DAC1REF4               :1;
        unsigned DAC1REF5               :1;
        unsigned DAC1REF6               :1;
        unsigned DAC1REF7               :1;
    };
    struct {
        unsigned R0                     :1;
        unsigned R1                     :1;
        unsigned R2                     :1;
        unsigned R3                     :1;
        unsigned R4                     :1;
        unsigned R5                     :1;
        unsigned R6                     :1;
        unsigned R7                     :1;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
        unsigned DAC1R5                 :1;
        unsigned DAC1R6                 :1;
        unsigned DAC1R7                 :1;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0x592);
// bitfield macros
#define _DAC1CON1_REF0_POSN                                 0x0
#define _DAC1CON1_REF0_POSITION                             0x0
#define _DAC1CON1_REF0_SIZE                                 0x1
#define _DAC1CON1_REF0_LENGTH                               0x1
#define _DAC1CON1_REF0_MASK                                 0x1
#define _DAC1CON1_REF1_POSN                                 0x1
#define _DAC1CON1_REF1_POSITION                             0x1
#define _DAC1CON1_REF1_SIZE                                 0x1
#define _DAC1CON1_REF1_LENGTH                               0x1
#define _DAC1CON1_REF1_MASK                                 0x2
#define _DAC1CON1_REF2_POSN                                 0x2
#define _DAC1CON1_REF2_POSITION                             0x2
#define _DAC1CON1_REF2_SIZE                                 0x1
#define _DAC1CON1_REF2_LENGTH                               0x1
#define _DAC1CON1_REF2_MASK                                 0x4
#define _DAC1CON1_REF3_POSN                                 0x3
#define _DAC1CON1_REF3_POSITION                             0x3
#define _DAC1CON1_REF3_SIZE                                 0x1
#define _DAC1CON1_REF3_LENGTH                               0x1
#define _DAC1CON1_REF3_MASK                                 0x8
#define _DAC1CON1_REF4_POSN                                 0x4
#define _DAC1CON1_REF4_POSITION                             0x4
#define _DAC1CON1_REF4_SIZE                                 0x1
#define _DAC1CON1_REF4_LENGTH                               0x1
#define _DAC1CON1_REF4_MASK                                 0x10
#define _DAC1CON1_REF5_POSN                                 0x5
#define _DAC1CON1_REF5_POSITION                             0x5
#define _DAC1CON1_REF5_SIZE                                 0x1
#define _DAC1CON1_REF5_LENGTH                               0x1
#define _DAC1CON1_REF5_MASK                                 0x20
#define _DAC1CON1_REF6_POSN                                 0x6
#define _DAC1CON1_REF6_POSITION                             0x6
#define _DAC1CON1_REF6_SIZE                                 0x1
#define _DAC1CON1_REF6_LENGTH                               0x1
#define _DAC1CON1_REF6_MASK                                 0x40
#define _DAC1CON1_REF7_POSN                                 0x7
#define _DAC1CON1_REF7_POSITION                             0x7
#define _DAC1CON1_REF7_SIZE                                 0x1
#define _DAC1CON1_REF7_LENGTH                               0x1
#define _DAC1CON1_REF7_MASK                                 0x80
#define _DAC1CON1_DAC1REF0_POSN                             0x0
#define _DAC1CON1_DAC1REF0_POSITION                         0x0
#define _DAC1CON1_DAC1REF0_SIZE                             0x1
#define _DAC1CON1_DAC1REF0_LENGTH                           0x1
#define _DAC1CON1_DAC1REF0_MASK                             0x1
#define _DAC1CON1_DAC1REF1_POSN                             0x1
#define _DAC1CON1_DAC1REF1_POSITION                         0x1
#define _DAC1CON1_DAC1REF1_SIZE                             0x1
#define _DAC1CON1_DAC1REF1_LENGTH                           0x1
#define _DAC1CON1_DAC1REF1_MASK                             0x2
#define _DAC1CON1_DAC1REF2_POSN                             0x2
#define _DAC1CON1_DAC1REF2_POSITION                         0x2
#define _DAC1CON1_DAC1REF2_SIZE                             0x1
#define _DAC1CON1_DAC1REF2_LENGTH                           0x1
#define _DAC1CON1_DAC1REF2_MASK                             0x4
#define _DAC1CON1_DAC1REF3_POSN                             0x3
#define _DAC1CON1_DAC1REF3_POSITION                         0x3
#define _DAC1CON1_DAC1REF3_SIZE                             0x1
#define _DAC1CON1_DAC1REF3_LENGTH                           0x1
#define _DAC1CON1_DAC1REF3_MASK                             0x8
#define _DAC1CON1_DAC1REF4_POSN                             0x4
#define _DAC1CON1_DAC1REF4_POSITION                         0x4
#define _DAC1CON1_DAC1REF4_SIZE                             0x1
#define _DAC1CON1_DAC1REF4_LENGTH                           0x1
#define _DAC1CON1_DAC1REF4_MASK                             0x10
#define _DAC1CON1_DAC1REF5_POSN                             0x5
#define _DAC1CON1_DAC1REF5_POSITION                         0x5
#define _DAC1CON1_DAC1REF5_SIZE                             0x1
#define _DAC1CON1_DAC1REF5_LENGTH                           0x1
#define _DAC1CON1_DAC1REF5_MASK                             0x20
#define _DAC1CON1_DAC1REF6_POSN                             0x6
#define _DAC1CON1_DAC1REF6_POSITION                         0x6
#define _DAC1CON1_DAC1REF6_SIZE                             0x1
#define _DAC1CON1_DAC1REF6_LENGTH                           0x1
#define _DAC1CON1_DAC1REF6_MASK                             0x40
#define _DAC1CON1_DAC1REF7_POSN                             0x7
#define _DAC1CON1_DAC1REF7_POSITION                         0x7
#define _DAC1CON1_DAC1REF7_SIZE                             0x1
#define _DAC1CON1_DAC1REF7_LENGTH                           0x1
#define _DAC1CON1_DAC1REF7_MASK                             0x80
#define _DAC1CON1_R0_POSN                                   0x0
#define _DAC1CON1_R0_POSITION                               0x0
#define _DAC1CON1_R0_SIZE                                   0x1
#define _DAC1CON1_R0_LENGTH                                 0x1
#define _DAC1CON1_R0_MASK                                   0x1
#define _DAC1CON1_R1_POSN                                   0x1
#define _DAC1CON1_R1_POSITION                               0x1
#define _DAC1CON1_R1_SIZE                                   0x1
#define _DAC1CON1_R1_LENGTH                                 0x1
#define _DAC1CON1_R1_MASK                                   0x2
#define _DAC1CON1_R2_POSN                                   0x2
#define _DAC1CON1_R2_POSITION                               0x2
#define _DAC1CON1_R2_SIZE                                   0x1
#define _DAC1CON1_R2_LENGTH                                 0x1
#define _DAC1CON1_R2_MASK                                   0x4
#define _DAC1CON1_R3_POSN                                   0x3
#define _DAC1CON1_R3_POSITION                               0x3
#define _DAC1CON1_R3_SIZE                                   0x1
#define _DAC1CON1_R3_LENGTH                                 0x1
#define _DAC1CON1_R3_MASK                                   0x8
#define _DAC1CON1_R4_POSN                                   0x4
#define _DAC1CON1_R4_POSITION                               0x4
#define _DAC1CON1_R4_SIZE                                   0x1
#define _DAC1CON1_R4_LENGTH                                 0x1
#define _DAC1CON1_R4_MASK                                   0x10
#define _DAC1CON1_R5_POSN                                   0x5
#define _DAC1CON1_R5_POSITION                               0x5
#define _DAC1CON1_R5_SIZE                                   0x1
#define _DAC1CON1_R5_LENGTH                                 0x1
#define _DAC1CON1_R5_MASK                                   0x20
#define _DAC1CON1_R6_POSN                                   0x6
#define _DAC1CON1_R6_POSITION                               0x6
#define _DAC1CON1_R6_SIZE                                   0x1
#define _DAC1CON1_R6_LENGTH                                 0x1
#define _DAC1CON1_R6_MASK                                   0x40
#define _DAC1CON1_R7_POSN                                   0x7
#define _DAC1CON1_R7_POSITION                               0x7
#define _DAC1CON1_R7_SIZE                                   0x1
#define _DAC1CON1_R7_LENGTH                                 0x1
#define _DAC1CON1_R7_MASK                                   0x80
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10
#define _DAC1CON1_DAC1R5_POSN                               0x5
#define _DAC1CON1_DAC1R5_POSITION                           0x5
#define _DAC1CON1_DAC1R5_SIZE                               0x1
#define _DAC1CON1_DAC1R5_LENGTH                             0x1
#define _DAC1CON1_DAC1R5_MASK                               0x20
#define _DAC1CON1_DAC1R6_POSN                               0x6
#define _DAC1CON1_DAC1R6_POSITION                           0x6
#define _DAC1CON1_DAC1R6_SIZE                               0x1
#define _DAC1CON1_DAC1R6_LENGTH                             0x1
#define _DAC1CON1_DAC1R6_MASK                               0x40
#define _DAC1CON1_DAC1R7_POSN                               0x7
#define _DAC1CON1_DAC1R7_POSITION                           0x7
#define _DAC1CON1_DAC1R7_SIZE                               0x1
#define _DAC1CON1_DAC1R7_LENGTH                             0x1
#define _DAC1CON1_DAC1R7_MASK                               0x80

// Register: DAC1REFH
#define DAC1REFH DAC1REFH
extern volatile unsigned char           DAC1REFH            __at(0x593);
#ifndef _LIB_BUILD
asm("DAC1REFH equ 0593h");
#endif
// aliases
extern volatile unsigned char           DAC1CON2            __at(0x593);
#ifndef _LIB_BUILD
asm("DAC1CON2 equ 0593h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned REF8                   :1;
        unsigned REF9                   :1;
        unsigned REF10                  :1;
        unsigned REF11                  :1;
        unsigned REF12                  :1;
        unsigned REF13                  :1;
        unsigned REF14                  :1;
        unsigned REF15                  :1;
    };
    struct {
        unsigned DAC1REF8               :1;
        unsigned DAC1REF9               :1;
        unsigned DAC1REF10              :1;
        unsigned DAC1REF11              :1;
        unsigned DAC1REF12              :1;
        unsigned DAC1REF13              :1;
        unsigned DAC1REF14              :1;
        unsigned DAC1REF15              :1;
    };
    struct {
        unsigned R8                     :1;
        unsigned R9                     :1;
        unsigned R10                    :1;
        unsigned R11                    :1;
        unsigned R12                    :1;
        unsigned R13                    :1;
        unsigned R14                    :1;
        unsigned R15                    :1;
    };
    struct {
        unsigned DAC1R8                 :1;
        unsigned DAC1R9                 :1;
        unsigned DAC1R10                :1;
        unsigned DAC1R11                :1;
        unsigned DAC1R12                :1;
        unsigned DAC1R13                :1;
        unsigned DAC1R14                :1;
        unsigned DAC1R15                :1;
    };
} DAC1REFHbits_t;
extern volatile DAC1REFHbits_t DAC1REFHbits __at(0x593);
// bitfield macros
#define _DAC1REFH_REF8_POSN                                 0x0
#define _DAC1REFH_REF8_POSITION                             0x0
#define _DAC1REFH_REF8_SIZE                                 0x1
#define _DAC1REFH_REF8_LENGTH                               0x1
#define _DAC1REFH_REF8_MASK                                 0x1
#define _DAC1REFH_REF9_POSN                                 0x1
#define _DAC1REFH_REF9_POSITION                             0x1
#define _DAC1REFH_REF9_SIZE                                 0x1
#define _DAC1REFH_REF9_LENGTH                               0x1
#define _DAC1REFH_REF9_MASK                                 0x2
#define _DAC1REFH_REF10_POSN                                0x2
#define _DAC1REFH_REF10_POSITION                            0x2
#define _DAC1REFH_REF10_SIZE                                0x1
#define _DAC1REFH_REF10_LENGTH                              0x1
#define _DAC1REFH_REF10_MASK                                0x4
#define _DAC1REFH_REF11_POSN                                0x3
#define _DAC1REFH_REF11_POSITION                            0x3
#define _DAC1REFH_REF11_SIZE                                0x1
#define _DAC1REFH_REF11_LENGTH                              0x1
#define _DAC1REFH_REF11_MASK                                0x8
#define _DAC1REFH_REF12_POSN                                0x4
#define _DAC1REFH_REF12_POSITION                            0x4
#define _DAC1REFH_REF12_SIZE                                0x1
#define _DAC1REFH_REF12_LENGTH                              0x1
#define _DAC1REFH_REF12_MASK                                0x10
#define _DAC1REFH_REF13_POSN                                0x5
#define _DAC1REFH_REF13_POSITION                            0x5
#define _DAC1REFH_REF13_SIZE                                0x1
#define _DAC1REFH_REF13_LENGTH                              0x1
#define _DAC1REFH_REF13_MASK                                0x20
#define _DAC1REFH_REF14_POSN                                0x6
#define _DAC1REFH_REF14_POSITION                            0x6
#define _DAC1REFH_REF14_SIZE                                0x1
#define _DAC1REFH_REF14_LENGTH                              0x1
#define _DAC1REFH_REF14_MASK                                0x40
#define _DAC1REFH_REF15_POSN                                0x7
#define _DAC1REFH_REF15_POSITION                            0x7
#define _DAC1REFH_REF15_SIZE                                0x1
#define _DAC1REFH_REF15_LENGTH                              0x1
#define _DAC1REFH_REF15_MASK                                0x80
#define _DAC1REFH_DAC1REF8_POSN                             0x0
#define _DAC1REFH_DAC1REF8_POSITION                         0x0
#define _DAC1REFH_DAC1REF8_SIZE                             0x1
#define _DAC1REFH_DAC1REF8_LENGTH                           0x1
#define _DAC1REFH_DAC1REF8_MASK                             0x1
#define _DAC1REFH_DAC1REF9_POSN                             0x1
#define _DAC1REFH_DAC1REF9_POSITION                         0x1
#define _DAC1REFH_DAC1REF9_SIZE                             0x1
#define _DAC1REFH_DAC1REF9_LENGTH                           0x1
#define _DAC1REFH_DAC1REF9_MASK                             0x2
#define _DAC1REFH_DAC1REF10_POSN                            0x2
#define _DAC1REFH_DAC1REF10_POSITION                        0x2
#define _DAC1REFH_DAC1REF10_SIZE                            0x1
#define _DAC1REFH_DAC1REF10_LENGTH                          0x1
#define _DAC1REFH_DAC1REF10_MASK                            0x4
#define _DAC1REFH_DAC1REF11_POSN                            0x3
#define _DAC1REFH_DAC1REF11_POSITION                        0x3
#define _DAC1REFH_DAC1REF11_SIZE                            0x1
#define _DAC1REFH_DAC1REF11_LENGTH                          0x1
#define _DAC1REFH_DAC1REF11_MASK                            0x8
#define _DAC1REFH_DAC1REF12_POSN                            0x4
#define _DAC1REFH_DAC1REF12_POSITION                        0x4
#define _DAC1REFH_DAC1REF12_SIZE                            0x1
#define _DAC1REFH_DAC1REF12_LENGTH                          0x1
#define _DAC1REFH_DAC1REF12_MASK                            0x10
#define _DAC1REFH_DAC1REF13_POSN                            0x5
#define _DAC1REFH_DAC1REF13_POSITION                        0x5
#define _DAC1REFH_DAC1REF13_SIZE                            0x1
#define _DAC1REFH_DAC1REF13_LENGTH                          0x1
#define _DAC1REFH_DAC1REF13_MASK                            0x20
#define _DAC1REFH_DAC1REF14_POSN                            0x6
#define _DAC1REFH_DAC1REF14_POSITION                        0x6
#define _DAC1REFH_DAC1REF14_SIZE                            0x1
#define _DAC1REFH_DAC1REF14_LENGTH                          0x1
#define _DAC1REFH_DAC1REF14_MASK                            0x40
#define _DAC1REFH_DAC1REF15_POSN                            0x7
#define _DAC1REFH_DAC1REF15_POSITION                        0x7
#define _DAC1REFH_DAC1REF15_SIZE                            0x1
#define _DAC1REFH_DAC1REF15_LENGTH                          0x1
#define _DAC1REFH_DAC1REF15_MASK                            0x80
#define _DAC1REFH_R8_POSN                                   0x0
#define _DAC1REFH_R8_POSITION                               0x0
#define _DAC1REFH_R8_SIZE                                   0x1
#define _DAC1REFH_R8_LENGTH                                 0x1
#define _DAC1REFH_R8_MASK                                   0x1
#define _DAC1REFH_R9_POSN                                   0x1
#define _DAC1REFH_R9_POSITION                               0x1
#define _DAC1REFH_R9_SIZE                                   0x1
#define _DAC1REFH_R9_LENGTH                                 0x1
#define _DAC1REFH_R9_MASK                                   0x2
#define _DAC1REFH_R10_POSN                                  0x2
#define _DAC1REFH_R10_POSITION                              0x2
#define _DAC1REFH_R10_SIZE                                  0x1
#define _DAC1REFH_R10_LENGTH                                0x1
#define _DAC1REFH_R10_MASK                                  0x4
#define _DAC1REFH_R11_POSN                                  0x3
#define _DAC1REFH_R11_POSITION                              0x3
#define _DAC1REFH_R11_SIZE                                  0x1
#define _DAC1REFH_R11_LENGTH                                0x1
#define _DAC1REFH_R11_MASK                                  0x8
#define _DAC1REFH_R12_POSN                                  0x4
#define _DAC1REFH_R12_POSITION                              0x4
#define _DAC1REFH_R12_SIZE                                  0x1
#define _DAC1REFH_R12_LENGTH                                0x1
#define _DAC1REFH_R12_MASK                                  0x10
#define _DAC1REFH_R13_POSN                                  0x5
#define _DAC1REFH_R13_POSITION                              0x5
#define _DAC1REFH_R13_SIZE                                  0x1
#define _DAC1REFH_R13_LENGTH                                0x1
#define _DAC1REFH_R13_MASK                                  0x20
#define _DAC1REFH_R14_POSN                                  0x6
#define _DAC1REFH_R14_POSITION                              0x6
#define _DAC1REFH_R14_SIZE                                  0x1
#define _DAC1REFH_R14_LENGTH                                0x1
#define _DAC1REFH_R14_MASK                                  0x40
#define _DAC1REFH_R15_POSN                                  0x7
#define _DAC1REFH_R15_POSITION                              0x7
#define _DAC1REFH_R15_SIZE                                  0x1
#define _DAC1REFH_R15_LENGTH                                0x1
#define _DAC1REFH_R15_MASK                                  0x80
#define _DAC1REFH_DAC1R8_POSN                               0x0
#define _DAC1REFH_DAC1R8_POSITION                           0x0
#define _DAC1REFH_DAC1R8_SIZE                               0x1
#define _DAC1REFH_DAC1R8_LENGTH                             0x1
#define _DAC1REFH_DAC1R8_MASK                               0x1
#define _DAC1REFH_DAC1R9_POSN                               0x1
#define _DAC1REFH_DAC1R9_POSITION                           0x1
#define _DAC1REFH_DAC1R9_SIZE                               0x1
#define _DAC1REFH_DAC1R9_LENGTH                             0x1
#define _DAC1REFH_DAC1R9_MASK                               0x2
#define _DAC1REFH_DAC1R10_POSN                              0x2
#define _DAC1REFH_DAC1R10_POSITION                          0x2
#define _DAC1REFH_DAC1R10_SIZE                              0x1
#define _DAC1REFH_DAC1R10_LENGTH                            0x1
#define _DAC1REFH_DAC1R10_MASK                              0x4
#define _DAC1REFH_DAC1R11_POSN                              0x3
#define _DAC1REFH_DAC1R11_POSITION                          0x3
#define _DAC1REFH_DAC1R11_SIZE                              0x1
#define _DAC1REFH_DAC1R11_LENGTH                            0x1
#define _DAC1REFH_DAC1R11_MASK                              0x8
#define _DAC1REFH_DAC1R12_POSN                              0x4
#define _DAC1REFH_DAC1R12_POSITION                          0x4
#define _DAC1REFH_DAC1R12_SIZE                              0x1
#define _DAC1REFH_DAC1R12_LENGTH                            0x1
#define _DAC1REFH_DAC1R12_MASK                              0x10
#define _DAC1REFH_DAC1R13_POSN                              0x5
#define _DAC1REFH_DAC1R13_POSITION                          0x5
#define _DAC1REFH_DAC1R13_SIZE                              0x1
#define _DAC1REFH_DAC1R13_LENGTH                            0x1
#define _DAC1REFH_DAC1R13_MASK                              0x20
#define _DAC1REFH_DAC1R14_POSN                              0x6
#define _DAC1REFH_DAC1R14_POSITION                          0x6
#define _DAC1REFH_DAC1R14_SIZE                              0x1
#define _DAC1REFH_DAC1R14_LENGTH                            0x1
#define _DAC1REFH_DAC1R14_MASK                              0x40
#define _DAC1REFH_DAC1R15_POSN                              0x7
#define _DAC1REFH_DAC1R15_POSITION                          0x7
#define _DAC1REFH_DAC1R15_SIZE                              0x1
#define _DAC1REFH_DAC1R15_LENGTH                            0x1
#define _DAC1REFH_DAC1R15_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned REF8                   :1;
        unsigned REF9                   :1;
        unsigned REF10                  :1;
        unsigned REF11                  :1;
        unsigned REF12                  :1;
        unsigned REF13                  :1;
        unsigned REF14                  :1;
        unsigned REF15                  :1;
    };
    struct {
        unsigned DAC1REF8               :1;
        unsigned DAC1REF9               :1;
        unsigned DAC1REF10              :1;
        unsigned DAC1REF11              :1;
        unsigned DAC1REF12              :1;
        unsigned DAC1REF13              :1;
        unsigned DAC1REF14              :1;
        unsigned DAC1REF15              :1;
    };
    struct {
        unsigned R8                     :1;
        unsigned R9                     :1;
        unsigned R10                    :1;
        unsigned R11                    :1;
        unsigned R12                    :1;
        unsigned R13                    :1;
        unsigned R14                    :1;
        unsigned R15                    :1;
    };
    struct {
        unsigned DAC1R8                 :1;
        unsigned DAC1R9                 :1;
        unsigned DAC1R10                :1;
        unsigned DAC1R11                :1;
        unsigned DAC1R12                :1;
        unsigned DAC1R13                :1;
        unsigned DAC1R14                :1;
        unsigned DAC1R15                :1;
    };
} DAC1CON2bits_t;
extern volatile DAC1CON2bits_t DAC1CON2bits __at(0x593);
// bitfield macros
#define _DAC1CON2_REF8_POSN                                 0x0
#define _DAC1CON2_REF8_POSITION                             0x0
#define _DAC1CON2_REF8_SIZE                                 0x1
#define _DAC1CON2_REF8_LENGTH                               0x1
#define _DAC1CON2_REF8_MASK                                 0x1
#define _DAC1CON2_REF9_POSN                                 0x1
#define _DAC1CON2_REF9_POSITION                             0x1
#define _DAC1CON2_REF9_SIZE                                 0x1
#define _DAC1CON2_REF9_LENGTH                               0x1
#define _DAC1CON2_REF9_MASK                                 0x2
#define _DAC1CON2_REF10_POSN                                0x2
#define _DAC1CON2_REF10_POSITION                            0x2
#define _DAC1CON2_REF10_SIZE                                0x1
#define _DAC1CON2_REF10_LENGTH                              0x1
#define _DAC1CON2_REF10_MASK                                0x4
#define _DAC1CON2_REF11_POSN                                0x3
#define _DAC1CON2_REF11_POSITION                            0x3
#define _DAC1CON2_REF11_SIZE                                0x1
#define _DAC1CON2_REF11_LENGTH                              0x1
#define _DAC1CON2_REF11_MASK                                0x8
#define _DAC1CON2_REF12_POSN                                0x4
#define _DAC1CON2_REF12_POSITION                            0x4
#define _DAC1CON2_REF12_SIZE                                0x1
#define _DAC1CON2_REF12_LENGTH                              0x1
#define _DAC1CON2_REF12_MASK                                0x10
#define _DAC1CON2_REF13_POSN                                0x5
#define _DAC1CON2_REF13_POSITION                            0x5
#define _DAC1CON2_REF13_SIZE                                0x1
#define _DAC1CON2_REF13_LENGTH                              0x1
#define _DAC1CON2_REF13_MASK                                0x20
#define _DAC1CON2_REF14_POSN                                0x6
#define _DAC1CON2_REF14_POSITION                            0x6
#define _DAC1CON2_REF14_SIZE                                0x1
#define _DAC1CON2_REF14_LENGTH                              0x1
#define _DAC1CON2_REF14_MASK                                0x40
#define _DAC1CON2_REF15_POSN                                0x7
#define _DAC1CON2_REF15_POSITION                            0x7
#define _DAC1CON2_REF15_SIZE                                0x1
#define _DAC1CON2_REF15_LENGTH                              0x1
#define _DAC1CON2_REF15_MASK                                0x80
#define _DAC1CON2_DAC1REF8_POSN                             0x0
#define _DAC1CON2_DAC1REF8_POSITION                         0x0
#define _DAC1CON2_DAC1REF8_SIZE                             0x1
#define _DAC1CON2_DAC1REF8_LENGTH                           0x1
#define _DAC1CON2_DAC1REF8_MASK                             0x1
#define _DAC1CON2_DAC1REF9_POSN                             0x1
#define _DAC1CON2_DAC1REF9_POSITION                         0x1
#define _DAC1CON2_DAC1REF9_SIZE                             0x1
#define _DAC1CON2_DAC1REF9_LENGTH                           0x1
#define _DAC1CON2_DAC1REF9_MASK                             0x2
#define _DAC1CON2_DAC1REF10_POSN                            0x2
#define _DAC1CON2_DAC1REF10_POSITION                        0x2
#define _DAC1CON2_DAC1REF10_SIZE                            0x1
#define _DAC1CON2_DAC1REF10_LENGTH                          0x1
#define _DAC1CON2_DAC1REF10_MASK                            0x4
#define _DAC1CON2_DAC1REF11_POSN                            0x3
#define _DAC1CON2_DAC1REF11_POSITION                        0x3
#define _DAC1CON2_DAC1REF11_SIZE                            0x1
#define _DAC1CON2_DAC1REF11_LENGTH                          0x1
#define _DAC1CON2_DAC1REF11_MASK                            0x8
#define _DAC1CON2_DAC1REF12_POSN                            0x4
#define _DAC1CON2_DAC1REF12_POSITION                        0x4
#define _DAC1CON2_DAC1REF12_SIZE                            0x1
#define _DAC1CON2_DAC1REF12_LENGTH                          0x1
#define _DAC1CON2_DAC1REF12_MASK                            0x10
#define _DAC1CON2_DAC1REF13_POSN                            0x5
#define _DAC1CON2_DAC1REF13_POSITION                        0x5
#define _DAC1CON2_DAC1REF13_SIZE                            0x1
#define _DAC1CON2_DAC1REF13_LENGTH                          0x1
#define _DAC1CON2_DAC1REF13_MASK                            0x20
#define _DAC1CON2_DAC1REF14_POSN                            0x6
#define _DAC1CON2_DAC1REF14_POSITION                        0x6
#define _DAC1CON2_DAC1REF14_SIZE                            0x1
#define _DAC1CON2_DAC1REF14_LENGTH                          0x1
#define _DAC1CON2_DAC1REF14_MASK                            0x40
#define _DAC1CON2_DAC1REF15_POSN                            0x7
#define _DAC1CON2_DAC1REF15_POSITION                        0x7
#define _DAC1CON2_DAC1REF15_SIZE                            0x1
#define _DAC1CON2_DAC1REF15_LENGTH                          0x1
#define _DAC1CON2_DAC1REF15_MASK                            0x80
#define _DAC1CON2_R8_POSN                                   0x0
#define _DAC1CON2_R8_POSITION                               0x0
#define _DAC1CON2_R8_SIZE                                   0x1
#define _DAC1CON2_R8_LENGTH                                 0x1
#define _DAC1CON2_R8_MASK                                   0x1
#define _DAC1CON2_R9_POSN                                   0x1
#define _DAC1CON2_R9_POSITION                               0x1
#define _DAC1CON2_R9_SIZE                                   0x1
#define _DAC1CON2_R9_LENGTH                                 0x1
#define _DAC1CON2_R9_MASK                                   0x2
#define _DAC1CON2_R10_POSN                                  0x2
#define _DAC1CON2_R10_POSITION                              0x2
#define _DAC1CON2_R10_SIZE                                  0x1
#define _DAC1CON2_R10_LENGTH                                0x1
#define _DAC1CON2_R10_MASK                                  0x4
#define _DAC1CON2_R11_POSN                                  0x3
#define _DAC1CON2_R11_POSITION                              0x3
#define _DAC1CON2_R11_SIZE                                  0x1
#define _DAC1CON2_R11_LENGTH                                0x1
#define _DAC1CON2_R11_MASK                                  0x8
#define _DAC1CON2_R12_POSN                                  0x4
#define _DAC1CON2_R12_POSITION                              0x4
#define _DAC1CON2_R12_SIZE                                  0x1
#define _DAC1CON2_R12_LENGTH                                0x1
#define _DAC1CON2_R12_MASK                                  0x10
#define _DAC1CON2_R13_POSN                                  0x5
#define _DAC1CON2_R13_POSITION                              0x5
#define _DAC1CON2_R13_SIZE                                  0x1
#define _DAC1CON2_R13_LENGTH                                0x1
#define _DAC1CON2_R13_MASK                                  0x20
#define _DAC1CON2_R14_POSN                                  0x6
#define _DAC1CON2_R14_POSITION                              0x6
#define _DAC1CON2_R14_SIZE                                  0x1
#define _DAC1CON2_R14_LENGTH                                0x1
#define _DAC1CON2_R14_MASK                                  0x40
#define _DAC1CON2_R15_POSN                                  0x7
#define _DAC1CON2_R15_POSITION                              0x7
#define _DAC1CON2_R15_SIZE                                  0x1
#define _DAC1CON2_R15_LENGTH                                0x1
#define _DAC1CON2_R15_MASK                                  0x80
#define _DAC1CON2_DAC1R8_POSN                               0x0
#define _DAC1CON2_DAC1R8_POSITION                           0x0
#define _DAC1CON2_DAC1R8_SIZE                               0x1
#define _DAC1CON2_DAC1R8_LENGTH                             0x1
#define _DAC1CON2_DAC1R8_MASK                               0x1
#define _DAC1CON2_DAC1R9_POSN                               0x1
#define _DAC1CON2_DAC1R9_POSITION                           0x1
#define _DAC1CON2_DAC1R9_SIZE                               0x1
#define _DAC1CON2_DAC1R9_LENGTH                             0x1
#define _DAC1CON2_DAC1R9_MASK                               0x2
#define _DAC1CON2_DAC1R10_POSN                              0x2
#define _DAC1CON2_DAC1R10_POSITION                          0x2
#define _DAC1CON2_DAC1R10_SIZE                              0x1
#define _DAC1CON2_DAC1R10_LENGTH                            0x1
#define _DAC1CON2_DAC1R10_MASK                              0x4
#define _DAC1CON2_DAC1R11_POSN                              0x3
#define _DAC1CON2_DAC1R11_POSITION                          0x3
#define _DAC1CON2_DAC1R11_SIZE                              0x1
#define _DAC1CON2_DAC1R11_LENGTH                            0x1
#define _DAC1CON2_DAC1R11_MASK                              0x8
#define _DAC1CON2_DAC1R12_POSN                              0x4
#define _DAC1CON2_DAC1R12_POSITION                          0x4
#define _DAC1CON2_DAC1R12_SIZE                              0x1
#define _DAC1CON2_DAC1R12_LENGTH                            0x1
#define _DAC1CON2_DAC1R12_MASK                              0x10
#define _DAC1CON2_DAC1R13_POSN                              0x5
#define _DAC1CON2_DAC1R13_POSITION                          0x5
#define _DAC1CON2_DAC1R13_SIZE                              0x1
#define _DAC1CON2_DAC1R13_LENGTH                            0x1
#define _DAC1CON2_DAC1R13_MASK                              0x20
#define _DAC1CON2_DAC1R14_POSN                              0x6
#define _DAC1CON2_DAC1R14_POSITION                          0x6
#define _DAC1CON2_DAC1R14_SIZE                              0x1
#define _DAC1CON2_DAC1R14_LENGTH                            0x1
#define _DAC1CON2_DAC1R14_MASK                              0x40
#define _DAC1CON2_DAC1R15_POSN                              0x7
#define _DAC1CON2_DAC1R15_POSITION                          0x7
#define _DAC1CON2_DAC1R15_SIZE                              0x1
#define _DAC1CON2_DAC1R15_LENGTH                            0x1
#define _DAC1CON2_DAC1R15_MASK                              0x80

// Register: DAC3CON0
#define DAC3CON0 DAC3CON0
extern volatile unsigned char           DAC3CON0            __at(0x597);
#ifndef _LIB_BUILD
asm("DAC3CON0 equ 0597h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :1;
        unsigned                        :1;
        unsigned PSS                    :2;
        unsigned                        :1;
        unsigned OE1                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
    };
    struct {
        unsigned DACNSS                 :1;
        unsigned                        :1;
        unsigned DACPSS                 :2;
        unsigned                        :1;
        unsigned DACOE1                 :1;
        unsigned                        :1;
        unsigned DACEN                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned DACPSS0                :1;
        unsigned DACPSS1                :1;
    };
    struct {
        unsigned DAC3NSS                :1;
        unsigned                        :1;
        unsigned DAC3PSS                :2;
        unsigned                        :1;
        unsigned DAC3OE1                :1;
        unsigned                        :1;
        unsigned DAC3EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned DAC3PSS0               :1;
        unsigned DAC3PSS1               :1;
    };
} DAC3CON0bits_t;
extern volatile DAC3CON0bits_t DAC3CON0bits __at(0x597);
// bitfield macros
#define _DAC3CON0_NSS_POSN                                  0x0
#define _DAC3CON0_NSS_POSITION                              0x0
#define _DAC3CON0_NSS_SIZE                                  0x1
#define _DAC3CON0_NSS_LENGTH                                0x1
#define _DAC3CON0_NSS_MASK                                  0x1
#define _DAC3CON0_PSS_POSN                                  0x2
#define _DAC3CON0_PSS_POSITION                              0x2
#define _DAC3CON0_PSS_SIZE                                  0x2
#define _DAC3CON0_PSS_LENGTH                                0x2
#define _DAC3CON0_PSS_MASK                                  0xC
#define _DAC3CON0_OE1_POSN                                  0x5
#define _DAC3CON0_OE1_POSITION                              0x5
#define _DAC3CON0_OE1_SIZE                                  0x1
#define _DAC3CON0_OE1_LENGTH                                0x1
#define _DAC3CON0_OE1_MASK                                  0x20
#define _DAC3CON0_EN_POSN                                   0x7
#define _DAC3CON0_EN_POSITION                               0x7
#define _DAC3CON0_EN_SIZE                                   0x1
#define _DAC3CON0_EN_LENGTH                                 0x1
#define _DAC3CON0_EN_MASK                                   0x80
#define _DAC3CON0_PSS0_POSN                                 0x2
#define _DAC3CON0_PSS0_POSITION                             0x2
#define _DAC3CON0_PSS0_SIZE                                 0x1
#define _DAC3CON0_PSS0_LENGTH                               0x1
#define _DAC3CON0_PSS0_MASK                                 0x4
#define _DAC3CON0_PSS1_POSN                                 0x3
#define _DAC3CON0_PSS1_POSITION                             0x3
#define _DAC3CON0_PSS1_SIZE                                 0x1
#define _DAC3CON0_PSS1_LENGTH                               0x1
#define _DAC3CON0_PSS1_MASK                                 0x8
#define _DAC3CON0_DACNSS_POSN                               0x0
#define _DAC3CON0_DACNSS_POSITION                           0x0
#define _DAC3CON0_DACNSS_SIZE                               0x1
#define _DAC3CON0_DACNSS_LENGTH                             0x1
#define _DAC3CON0_DACNSS_MASK                               0x1
#define _DAC3CON0_DACPSS_POSN                               0x2
#define _DAC3CON0_DACPSS_POSITION                           0x2
#define _DAC3CON0_DACPSS_SIZE                               0x2
#define _DAC3CON0_DACPSS_LENGTH                             0x2
#define _DAC3CON0_DACPSS_MASK                               0xC
#define _DAC3CON0_DACOE1_POSN                               0x5
#define _DAC3CON0_DACOE1_POSITION                           0x5
#define _DAC3CON0_DACOE1_SIZE                               0x1
#define _DAC3CON0_DACOE1_LENGTH                             0x1
#define _DAC3CON0_DACOE1_MASK                               0x20
#define _DAC3CON0_DACEN_POSN                                0x7
#define _DAC3CON0_DACEN_POSITION                            0x7
#define _DAC3CON0_DACEN_SIZE                                0x1
#define _DAC3CON0_DACEN_LENGTH                              0x1
#define _DAC3CON0_DACEN_MASK                                0x80
#define _DAC3CON0_DACPSS0_POSN                              0x2
#define _DAC3CON0_DACPSS0_POSITION                          0x2
#define _DAC3CON0_DACPSS0_SIZE                              0x1
#define _DAC3CON0_DACPSS0_LENGTH                            0x1
#define _DAC3CON0_DACPSS0_MASK                              0x4
#define _DAC3CON0_DACPSS1_POSN                              0x3
#define _DAC3CON0_DACPSS1_POSITION                          0x3
#define _DAC3CON0_DACPSS1_SIZE                              0x1
#define _DAC3CON0_DACPSS1_LENGTH                            0x1
#define _DAC3CON0_DACPSS1_MASK                              0x8
#define _DAC3CON0_DAC3NSS_POSN                              0x0
#define _DAC3CON0_DAC3NSS_POSITION                          0x0
#define _DAC3CON0_DAC3NSS_SIZE                              0x1
#define _DAC3CON0_DAC3NSS_LENGTH                            0x1
#define _DAC3CON0_DAC3NSS_MASK                              0x1
#define _DAC3CON0_DAC3PSS_POSN                              0x2
#define _DAC3CON0_DAC3PSS_POSITION                          0x2
#define _DAC3CON0_DAC3PSS_SIZE                              0x2
#define _DAC3CON0_DAC3PSS_LENGTH                            0x2
#define _DAC3CON0_DAC3PSS_MASK                              0xC
#define _DAC3CON0_DAC3OE1_POSN                              0x5
#define _DAC3CON0_DAC3OE1_POSITION                          0x5
#define _DAC3CON0_DAC3OE1_SIZE                              0x1
#define _DAC3CON0_DAC3OE1_LENGTH                            0x1
#define _DAC3CON0_DAC3OE1_MASK                              0x20
#define _DAC3CON0_DAC3EN_POSN                               0x7
#define _DAC3CON0_DAC3EN_POSITION                           0x7
#define _DAC3CON0_DAC3EN_SIZE                               0x1
#define _DAC3CON0_DAC3EN_LENGTH                             0x1
#define _DAC3CON0_DAC3EN_MASK                               0x80
#define _DAC3CON0_DAC3PSS0_POSN                             0x2
#define _DAC3CON0_DAC3PSS0_POSITION                         0x2
#define _DAC3CON0_DAC3PSS0_SIZE                             0x1
#define _DAC3CON0_DAC3PSS0_LENGTH                           0x1
#define _DAC3CON0_DAC3PSS0_MASK                             0x4
#define _DAC3CON0_DAC3PSS1_POSN                             0x3
#define _DAC3CON0_DAC3PSS1_POSITION                         0x3
#define _DAC3CON0_DAC3PSS1_SIZE                             0x1
#define _DAC3CON0_DAC3PSS1_LENGTH                           0x1
#define _DAC3CON0_DAC3PSS1_MASK                             0x8

// Register: DAC3REF
#define DAC3REF DAC3REF
extern volatile unsigned char           DAC3REF             __at(0x598);
#ifndef _LIB_BUILD
asm("DAC3REF equ 0598h");
#endif
// aliases
extern volatile unsigned char           DAC3CON1            __at(0x598);
#ifndef _LIB_BUILD
asm("DAC3CON1 equ 0598h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DACR                   :5;
    };
    struct {
        unsigned DACR0                  :1;
        unsigned DACR1                  :1;
        unsigned DACR2                  :1;
        unsigned DACR3                  :1;
        unsigned DACR4                  :1;
    };
    struct {
        unsigned R0                     :1;
        unsigned R1                     :1;
        unsigned R2                     :1;
        unsigned R3                     :1;
        unsigned R4                     :1;
    };
    struct {
        unsigned DAC3R                  :5;
    };
    struct {
        unsigned DAC3R0                 :1;
        unsigned DAC3R1                 :1;
        unsigned DAC3R2                 :1;
        unsigned DAC3R3                 :1;
        unsigned DAC3R4                 :1;
    };
    struct {
        unsigned REF0                   :1;
        unsigned REF1                   :1;
        unsigned REF2                   :1;
        unsigned REF3                   :1;
        unsigned REF4                   :1;
        unsigned REF5                   :1;
    };
    struct {
        unsigned DAC3REF0               :1;
        unsigned DAC3REF1               :1;
        unsigned DAC3REF2               :1;
        unsigned DAC3REF3               :1;
        unsigned DAC3REF4               :1;
        unsigned DAC3REF5               :1;
    };
} DAC3REFbits_t;
extern volatile DAC3REFbits_t DAC3REFbits __at(0x598);
// bitfield macros
#define _DAC3REF_DACR_POSN                                  0x0
#define _DAC3REF_DACR_POSITION                              0x0
#define _DAC3REF_DACR_SIZE                                  0x5
#define _DAC3REF_DACR_LENGTH                                0x5
#define _DAC3REF_DACR_MASK                                  0x1F
#define _DAC3REF_DACR0_POSN                                 0x0
#define _DAC3REF_DACR0_POSITION                             0x0
#define _DAC3REF_DACR0_SIZE                                 0x1
#define _DAC3REF_DACR0_LENGTH                               0x1
#define _DAC3REF_DACR0_MASK                                 0x1
#define _DAC3REF_DACR1_POSN                                 0x1
#define _DAC3REF_DACR1_POSITION                             0x1
#define _DAC3REF_DACR1_SIZE                                 0x1
#define _DAC3REF_DACR1_LENGTH                               0x1
#define _DAC3REF_DACR1_MASK                                 0x2
#define _DAC3REF_DACR2_POSN                                 0x2
#define _DAC3REF_DACR2_POSITION                             0x2
#define _DAC3REF_DACR2_SIZE                                 0x1
#define _DAC3REF_DACR2_LENGTH                               0x1
#define _DAC3REF_DACR2_MASK                                 0x4
#define _DAC3REF_DACR3_POSN                                 0x3
#define _DAC3REF_DACR3_POSITION                             0x3
#define _DAC3REF_DACR3_SIZE                                 0x1
#define _DAC3REF_DACR3_LENGTH                               0x1
#define _DAC3REF_DACR3_MASK                                 0x8
#define _DAC3REF_DACR4_POSN                                 0x4
#define _DAC3REF_DACR4_POSITION                             0x4
#define _DAC3REF_DACR4_SIZE                                 0x1
#define _DAC3REF_DACR4_LENGTH                               0x1
#define _DAC3REF_DACR4_MASK                                 0x10
#define _DAC3REF_R0_POSN                                    0x0
#define _DAC3REF_R0_POSITION                                0x0
#define _DAC3REF_R0_SIZE                                    0x1
#define _DAC3REF_R0_LENGTH                                  0x1
#define _DAC3REF_R0_MASK                                    0x1
#define _DAC3REF_R1_POSN                                    0x1
#define _DAC3REF_R1_POSITION                                0x1
#define _DAC3REF_R1_SIZE                                    0x1
#define _DAC3REF_R1_LENGTH                                  0x1
#define _DAC3REF_R1_MASK                                    0x2
#define _DAC3REF_R2_POSN                                    0x2
#define _DAC3REF_R2_POSITION                                0x2
#define _DAC3REF_R2_SIZE                                    0x1
#define _DAC3REF_R2_LENGTH                                  0x1
#define _DAC3REF_R2_MASK                                    0x4
#define _DAC3REF_R3_POSN                                    0x3
#define _DAC3REF_R3_POSITION                                0x3
#define _DAC3REF_R3_SIZE                                    0x1
#define _DAC3REF_R3_LENGTH                                  0x1
#define _DAC3REF_R3_MASK                                    0x8
#define _DAC3REF_R4_POSN                                    0x4
#define _DAC3REF_R4_POSITION                                0x4
#define _DAC3REF_R4_SIZE                                    0x1
#define _DAC3REF_R4_LENGTH                                  0x1
#define _DAC3REF_R4_MASK                                    0x10
#define _DAC3REF_DAC3R_POSN                                 0x0
#define _DAC3REF_DAC3R_POSITION                             0x0
#define _DAC3REF_DAC3R_SIZE                                 0x5
#define _DAC3REF_DAC3R_LENGTH                               0x5
#define _DAC3REF_DAC3R_MASK                                 0x1F
#define _DAC3REF_DAC3R0_POSN                                0x0
#define _DAC3REF_DAC3R0_POSITION                            0x0
#define _DAC3REF_DAC3R0_SIZE                                0x1
#define _DAC3REF_DAC3R0_LENGTH                              0x1
#define _DAC3REF_DAC3R0_MASK                                0x1
#define _DAC3REF_DAC3R1_POSN                                0x1
#define _DAC3REF_DAC3R1_POSITION                            0x1
#define _DAC3REF_DAC3R1_SIZE                                0x1
#define _DAC3REF_DAC3R1_LENGTH                              0x1
#define _DAC3REF_DAC3R1_MASK                                0x2
#define _DAC3REF_DAC3R2_POSN                                0x2
#define _DAC3REF_DAC3R2_POSITION                            0x2
#define _DAC3REF_DAC3R2_SIZE                                0x1
#define _DAC3REF_DAC3R2_LENGTH                              0x1
#define _DAC3REF_DAC3R2_MASK                                0x4
#define _DAC3REF_DAC3R3_POSN                                0x3
#define _DAC3REF_DAC3R3_POSITION                            0x3
#define _DAC3REF_DAC3R3_SIZE                                0x1
#define _DAC3REF_DAC3R3_LENGTH                              0x1
#define _DAC3REF_DAC3R3_MASK                                0x8
#define _DAC3REF_DAC3R4_POSN                                0x4
#define _DAC3REF_DAC3R4_POSITION                            0x4
#define _DAC3REF_DAC3R4_SIZE                                0x1
#define _DAC3REF_DAC3R4_LENGTH                              0x1
#define _DAC3REF_DAC3R4_MASK                                0x10
#define _DAC3REF_REF0_POSN                                  0x0
#define _DAC3REF_REF0_POSITION                              0x0
#define _DAC3REF_REF0_SIZE                                  0x1
#define _DAC3REF_REF0_LENGTH                                0x1
#define _DAC3REF_REF0_MASK                                  0x1
#define _DAC3REF_REF1_POSN                                  0x1
#define _DAC3REF_REF1_POSITION                              0x1
#define _DAC3REF_REF1_SIZE                                  0x1
#define _DAC3REF_REF1_LENGTH                                0x1
#define _DAC3REF_REF1_MASK                                  0x2
#define _DAC3REF_REF2_POSN                                  0x2
#define _DAC3REF_REF2_POSITION                              0x2
#define _DAC3REF_REF2_SIZE                                  0x1
#define _DAC3REF_REF2_LENGTH                                0x1
#define _DAC3REF_REF2_MASK                                  0x4
#define _DAC3REF_REF3_POSN                                  0x3
#define _DAC3REF_REF3_POSITION                              0x3
#define _DAC3REF_REF3_SIZE                                  0x1
#define _DAC3REF_REF3_LENGTH                                0x1
#define _DAC3REF_REF3_MASK                                  0x8
#define _DAC3REF_REF4_POSN                                  0x4
#define _DAC3REF_REF4_POSITION                              0x4
#define _DAC3REF_REF4_SIZE                                  0x1
#define _DAC3REF_REF4_LENGTH                                0x1
#define _DAC3REF_REF4_MASK                                  0x10
#define _DAC3REF_REF5_POSN                                  0x5
#define _DAC3REF_REF5_POSITION                              0x5
#define _DAC3REF_REF5_SIZE                                  0x1
#define _DAC3REF_REF5_LENGTH                                0x1
#define _DAC3REF_REF5_MASK                                  0x20
#define _DAC3REF_DAC3REF0_POSN                              0x0
#define _DAC3REF_DAC3REF0_POSITION                          0x0
#define _DAC3REF_DAC3REF0_SIZE                              0x1
#define _DAC3REF_DAC3REF0_LENGTH                            0x1
#define _DAC3REF_DAC3REF0_MASK                              0x1
#define _DAC3REF_DAC3REF1_POSN                              0x1
#define _DAC3REF_DAC3REF1_POSITION                          0x1
#define _DAC3REF_DAC3REF1_SIZE                              0x1
#define _DAC3REF_DAC3REF1_LENGTH                            0x1
#define _DAC3REF_DAC3REF1_MASK                              0x2
#define _DAC3REF_DAC3REF2_POSN                              0x2
#define _DAC3REF_DAC3REF2_POSITION                          0x2
#define _DAC3REF_DAC3REF2_SIZE                              0x1
#define _DAC3REF_DAC3REF2_LENGTH                            0x1
#define _DAC3REF_DAC3REF2_MASK                              0x4
#define _DAC3REF_DAC3REF3_POSN                              0x3
#define _DAC3REF_DAC3REF3_POSITION                          0x3
#define _DAC3REF_DAC3REF3_SIZE                              0x1
#define _DAC3REF_DAC3REF3_LENGTH                            0x1
#define _DAC3REF_DAC3REF3_MASK                              0x8
#define _DAC3REF_DAC3REF4_POSN                              0x4
#define _DAC3REF_DAC3REF4_POSITION                          0x4
#define _DAC3REF_DAC3REF4_SIZE                              0x1
#define _DAC3REF_DAC3REF4_LENGTH                            0x1
#define _DAC3REF_DAC3REF4_MASK                              0x10
#define _DAC3REF_DAC3REF5_POSN                              0x5
#define _DAC3REF_DAC3REF5_POSITION                          0x5
#define _DAC3REF_DAC3REF5_SIZE                              0x1
#define _DAC3REF_DAC3REF5_LENGTH                            0x1
#define _DAC3REF_DAC3REF5_MASK                              0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned DACR                   :5;
    };
    struct {
        unsigned DACR0                  :1;
        unsigned DACR1                  :1;
        unsigned DACR2                  :1;
        unsigned DACR3                  :1;
        unsigned DACR4                  :1;
    };
    struct {
        unsigned R0                     :1;
        unsigned R1                     :1;
        unsigned R2                     :1;
        unsigned R3                     :1;
        unsigned R4                     :1;
    };
    struct {
        unsigned DAC3R                  :5;
    };
    struct {
        unsigned DAC3R0                 :1;
        unsigned DAC3R1                 :1;
        unsigned DAC3R2                 :1;
        unsigned DAC3R3                 :1;
        unsigned DAC3R4                 :1;
    };
    struct {
        unsigned REF0                   :1;
        unsigned REF1                   :1;
        unsigned REF2                   :1;
        unsigned REF3                   :1;
        unsigned REF4                   :1;
        unsigned REF5                   :1;
    };
    struct {
        unsigned DAC3REF0               :1;
        unsigned DAC3REF1               :1;
        unsigned DAC3REF2               :1;
        unsigned DAC3REF3               :1;
        unsigned DAC3REF4               :1;
        unsigned DAC3REF5               :1;
    };
} DAC3CON1bits_t;
extern volatile DAC3CON1bits_t DAC3CON1bits __at(0x598);
// bitfield macros
#define _DAC3CON1_DACR_POSN                                 0x0
#define _DAC3CON1_DACR_POSITION                             0x0
#define _DAC3CON1_DACR_SIZE                                 0x5
#define _DAC3CON1_DACR_LENGTH                               0x5
#define _DAC3CON1_DACR_MASK                                 0x1F
#define _DAC3CON1_DACR0_POSN                                0x0
#define _DAC3CON1_DACR0_POSITION                            0x0
#define _DAC3CON1_DACR0_SIZE                                0x1
#define _DAC3CON1_DACR0_LENGTH                              0x1
#define _DAC3CON1_DACR0_MASK                                0x1
#define _DAC3CON1_DACR1_POSN                                0x1
#define _DAC3CON1_DACR1_POSITION                            0x1
#define _DAC3CON1_DACR1_SIZE                                0x1
#define _DAC3CON1_DACR1_LENGTH                              0x1
#define _DAC3CON1_DACR1_MASK                                0x2
#define _DAC3CON1_DACR2_POSN                                0x2
#define _DAC3CON1_DACR2_POSITION                            0x2
#define _DAC3CON1_DACR2_SIZE                                0x1
#define _DAC3CON1_DACR2_LENGTH                              0x1
#define _DAC3CON1_DACR2_MASK                                0x4
#define _DAC3CON1_DACR3_POSN                                0x3
#define _DAC3CON1_DACR3_POSITION                            0x3
#define _DAC3CON1_DACR3_SIZE                                0x1
#define _DAC3CON1_DACR3_LENGTH                              0x1
#define _DAC3CON1_DACR3_MASK                                0x8
#define _DAC3CON1_DACR4_POSN                                0x4
#define _DAC3CON1_DACR4_POSITION                            0x4
#define _DAC3CON1_DACR4_SIZE                                0x1
#define _DAC3CON1_DACR4_LENGTH                              0x1
#define _DAC3CON1_DACR4_MASK                                0x10
#define _DAC3CON1_R0_POSN                                   0x0
#define _DAC3CON1_R0_POSITION                               0x0
#define _DAC3CON1_R0_SIZE                                   0x1
#define _DAC3CON1_R0_LENGTH                                 0x1
#define _DAC3CON1_R0_MASK                                   0x1
#define _DAC3CON1_R1_POSN                                   0x1
#define _DAC3CON1_R1_POSITION                               0x1
#define _DAC3CON1_R1_SIZE                                   0x1
#define _DAC3CON1_R1_LENGTH                                 0x1
#define _DAC3CON1_R1_MASK                                   0x2
#define _DAC3CON1_R2_POSN                                   0x2
#define _DAC3CON1_R2_POSITION                               0x2
#define _DAC3CON1_R2_SIZE                                   0x1
#define _DAC3CON1_R2_LENGTH                                 0x1
#define _DAC3CON1_R2_MASK                                   0x4
#define _DAC3CON1_R3_POSN                                   0x3
#define _DAC3CON1_R3_POSITION                               0x3
#define _DAC3CON1_R3_SIZE                                   0x1
#define _DAC3CON1_R3_LENGTH                                 0x1
#define _DAC3CON1_R3_MASK                                   0x8
#define _DAC3CON1_R4_POSN                                   0x4
#define _DAC3CON1_R4_POSITION                               0x4
#define _DAC3CON1_R4_SIZE                                   0x1
#define _DAC3CON1_R4_LENGTH                                 0x1
#define _DAC3CON1_R4_MASK                                   0x10
#define _DAC3CON1_DAC3R_POSN                                0x0
#define _DAC3CON1_DAC3R_POSITION                            0x0
#define _DAC3CON1_DAC3R_SIZE                                0x5
#define _DAC3CON1_DAC3R_LENGTH                              0x5
#define _DAC3CON1_DAC3R_MASK                                0x1F
#define _DAC3CON1_DAC3R0_POSN                               0x0
#define _DAC3CON1_DAC3R0_POSITION                           0x0
#define _DAC3CON1_DAC3R0_SIZE                               0x1
#define _DAC3CON1_DAC3R0_LENGTH                             0x1
#define _DAC3CON1_DAC3R0_MASK                               0x1
#define _DAC3CON1_DAC3R1_POSN                               0x1
#define _DAC3CON1_DAC3R1_POSITION                           0x1
#define _DAC3CON1_DAC3R1_SIZE                               0x1
#define _DAC3CON1_DAC3R1_LENGTH                             0x1
#define _DAC3CON1_DAC3R1_MASK                               0x2
#define _DAC3CON1_DAC3R2_POSN                               0x2
#define _DAC3CON1_DAC3R2_POSITION                           0x2
#define _DAC3CON1_DAC3R2_SIZE                               0x1
#define _DAC3CON1_DAC3R2_LENGTH                             0x1
#define _DAC3CON1_DAC3R2_MASK                               0x4
#define _DAC3CON1_DAC3R3_POSN                               0x3
#define _DAC3CON1_DAC3R3_POSITION                           0x3
#define _DAC3CON1_DAC3R3_SIZE                               0x1
#define _DAC3CON1_DAC3R3_LENGTH                             0x1
#define _DAC3CON1_DAC3R3_MASK                               0x8
#define _DAC3CON1_DAC3R4_POSN                               0x4
#define _DAC3CON1_DAC3R4_POSITION                           0x4
#define _DAC3CON1_DAC3R4_SIZE                               0x1
#define _DAC3CON1_DAC3R4_LENGTH                             0x1
#define _DAC3CON1_DAC3R4_MASK                               0x10
#define _DAC3CON1_REF0_POSN                                 0x0
#define _DAC3CON1_REF0_POSITION                             0x0
#define _DAC3CON1_REF0_SIZE                                 0x1
#define _DAC3CON1_REF0_LENGTH                               0x1
#define _DAC3CON1_REF0_MASK                                 0x1
#define _DAC3CON1_REF1_POSN                                 0x1
#define _DAC3CON1_REF1_POSITION                             0x1
#define _DAC3CON1_REF1_SIZE                                 0x1
#define _DAC3CON1_REF1_LENGTH                               0x1
#define _DAC3CON1_REF1_MASK                                 0x2
#define _DAC3CON1_REF2_POSN                                 0x2
#define _DAC3CON1_REF2_POSITION                             0x2
#define _DAC3CON1_REF2_SIZE                                 0x1
#define _DAC3CON1_REF2_LENGTH                               0x1
#define _DAC3CON1_REF2_MASK                                 0x4
#define _DAC3CON1_REF3_POSN                                 0x3
#define _DAC3CON1_REF3_POSITION                             0x3
#define _DAC3CON1_REF3_SIZE                                 0x1
#define _DAC3CON1_REF3_LENGTH                               0x1
#define _DAC3CON1_REF3_MASK                                 0x8
#define _DAC3CON1_REF4_POSN                                 0x4
#define _DAC3CON1_REF4_POSITION                             0x4
#define _DAC3CON1_REF4_SIZE                                 0x1
#define _DAC3CON1_REF4_LENGTH                               0x1
#define _DAC3CON1_REF4_MASK                                 0x10
#define _DAC3CON1_REF5_POSN                                 0x5
#define _DAC3CON1_REF5_POSITION                             0x5
#define _DAC3CON1_REF5_SIZE                                 0x1
#define _DAC3CON1_REF5_LENGTH                               0x1
#define _DAC3CON1_REF5_MASK                                 0x20
#define _DAC3CON1_DAC3REF0_POSN                             0x0
#define _DAC3CON1_DAC3REF0_POSITION                         0x0
#define _DAC3CON1_DAC3REF0_SIZE                             0x1
#define _DAC3CON1_DAC3REF0_LENGTH                           0x1
#define _DAC3CON1_DAC3REF0_MASK                             0x1
#define _DAC3CON1_DAC3REF1_POSN                             0x1
#define _DAC3CON1_DAC3REF1_POSITION                         0x1
#define _DAC3CON1_DAC3REF1_SIZE                             0x1
#define _DAC3CON1_DAC3REF1_LENGTH                           0x1
#define _DAC3CON1_DAC3REF1_MASK                             0x2
#define _DAC3CON1_DAC3REF2_POSN                             0x2
#define _DAC3CON1_DAC3REF2_POSITION                         0x2
#define _DAC3CON1_DAC3REF2_SIZE                             0x1
#define _DAC3CON1_DAC3REF2_LENGTH                           0x1
#define _DAC3CON1_DAC3REF2_MASK                             0x4
#define _DAC3CON1_DAC3REF3_POSN                             0x3
#define _DAC3CON1_DAC3REF3_POSITION                         0x3
#define _DAC3CON1_DAC3REF3_SIZE                             0x1
#define _DAC3CON1_DAC3REF3_LENGTH                           0x1
#define _DAC3CON1_DAC3REF3_MASK                             0x8
#define _DAC3CON1_DAC3REF4_POSN                             0x4
#define _DAC3CON1_DAC3REF4_POSITION                         0x4
#define _DAC3CON1_DAC3REF4_SIZE                             0x1
#define _DAC3CON1_DAC3REF4_LENGTH                           0x1
#define _DAC3CON1_DAC3REF4_MASK                             0x10
#define _DAC3CON1_DAC3REF5_POSN                             0x5
#define _DAC3CON1_DAC3REF5_POSITION                         0x5
#define _DAC3CON1_DAC3REF5_SIZE                             0x1
#define _DAC3CON1_DAC3REF5_LENGTH                           0x1
#define _DAC3CON1_DAC3REF5_MASK                             0x20

// Register: PWM3DC
#define PWM3DC PWM3DC
extern volatile unsigned short          PWM3DC              __at(0x617);
#ifndef _LIB_BUILD
asm("PWM3DC equ 0617h");
#endif

// Register: PWM3DCL
#define PWM3DCL PWM3DCL
extern volatile unsigned char           PWM3DCL             __at(0x617);
#ifndef _LIB_BUILD
asm("PWM3DCL equ 0617h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM3DC0                :1;
        unsigned PWM3DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM3DCLbits_t;
extern volatile PWM3DCLbits_t PWM3DCLbits __at(0x617);
// bitfield macros
#define _PWM3DCL_DC_POSN                                    0x6
#define _PWM3DCL_DC_POSITION                                0x6
#define _PWM3DCL_DC_SIZE                                    0x2
#define _PWM3DCL_DC_LENGTH                                  0x2
#define _PWM3DCL_DC_MASK                                    0xC0
#define _PWM3DCL_DC0_POSN                                   0x6
#define _PWM3DCL_DC0_POSITION                               0x6
#define _PWM3DCL_DC0_SIZE                                   0x1
#define _PWM3DCL_DC0_LENGTH                                 0x1
#define _PWM3DCL_DC0_MASK                                   0x40
#define _PWM3DCL_DC1_POSN                                   0x7
#define _PWM3DCL_DC1_POSITION                               0x7
#define _PWM3DCL_DC1_SIZE                                   0x1
#define _PWM3DCL_DC1_LENGTH                                 0x1
#define _PWM3DCL_DC1_MASK                                   0x80
#define _PWM3DCL_PWM3DC0_POSN                               0x6
#define _PWM3DCL_PWM3DC0_POSITION                           0x6
#define _PWM3DCL_PWM3DC0_SIZE                               0x1
#define _PWM3DCL_PWM3DC0_LENGTH                             0x1
#define _PWM3DCL_PWM3DC0_MASK                               0x40
#define _PWM3DCL_PWM3DC1_POSN                               0x7
#define _PWM3DCL_PWM3DC1_POSITION                           0x7
#define _PWM3DCL_PWM3DC1_SIZE                               0x1
#define _PWM3DCL_PWM3DC1_LENGTH                             0x1
#define _PWM3DCL_PWM3DC1_MASK                               0x80
#define _PWM3DCL_PWMPW0_POSN                                0x6
#define _PWM3DCL_PWMPW0_POSITION                            0x6
#define _PWM3DCL_PWMPW0_SIZE                                0x1
#define _PWM3DCL_PWMPW0_LENGTH                              0x1
#define _PWM3DCL_PWMPW0_MASK                                0x40
#define _PWM3DCL_PWMPW1_POSN                                0x7
#define _PWM3DCL_PWMPW1_POSITION                            0x7
#define _PWM3DCL_PWMPW1_SIZE                                0x1
#define _PWM3DCL_PWMPW1_LENGTH                              0x1
#define _PWM3DCL_PWMPW1_MASK                                0x80

// Register: PWM3DCH
#define PWM3DCH PWM3DCH
extern volatile unsigned char           PWM3DCH             __at(0x618);
#ifndef _LIB_BUILD
asm("PWM3DCH equ 0618h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM3DC2                :1;
        unsigned PWM3DC3                :1;
        unsigned PWM3DC4                :1;
        unsigned PWM3DC5                :1;
        unsigned PWM3DC6                :1;
        unsigned PWM3DC7                :1;
        unsigned PWM3DC8                :1;
        unsigned PWM3DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM3DCHbits_t;
extern volatile PWM3DCHbits_t PWM3DCHbits __at(0x618);
// bitfield macros
#define _PWM3DCH_DC_POSN                                    0x0
#define _PWM3DCH_DC_POSITION                                0x0
#define _PWM3DCH_DC_SIZE                                    0x8
#define _PWM3DCH_DC_LENGTH                                  0x8
#define _PWM3DCH_DC_MASK                                    0xFF
#define _PWM3DCH_DC2_POSN                                   0x0
#define _PWM3DCH_DC2_POSITION                               0x0
#define _PWM3DCH_DC2_SIZE                                   0x1
#define _PWM3DCH_DC2_LENGTH                                 0x1
#define _PWM3DCH_DC2_MASK                                   0x1
#define _PWM3DCH_DC3_POSN                                   0x1
#define _PWM3DCH_DC3_POSITION                               0x1
#define _PWM3DCH_DC3_SIZE                                   0x1
#define _PWM3DCH_DC3_LENGTH                                 0x1
#define _PWM3DCH_DC3_MASK                                   0x2
#define _PWM3DCH_DC4_POSN                                   0x2
#define _PWM3DCH_DC4_POSITION                               0x2
#define _PWM3DCH_DC4_SIZE                                   0x1
#define _PWM3DCH_DC4_LENGTH                                 0x1
#define _PWM3DCH_DC4_MASK                                   0x4
#define _PWM3DCH_DC5_POSN                                   0x3
#define _PWM3DCH_DC5_POSITION                               0x3
#define _PWM3DCH_DC5_SIZE                                   0x1
#define _PWM3DCH_DC5_LENGTH                                 0x1
#define _PWM3DCH_DC5_MASK                                   0x8
#define _PWM3DCH_DC6_POSN                                   0x4
#define _PWM3DCH_DC6_POSITION                               0x4
#define _PWM3DCH_DC6_SIZE                                   0x1
#define _PWM3DCH_DC6_LENGTH                                 0x1
#define _PWM3DCH_DC6_MASK                                   0x10
#define _PWM3DCH_DC7_POSN                                   0x5
#define _PWM3DCH_DC7_POSITION                               0x5
#define _PWM3DCH_DC7_SIZE                                   0x1
#define _PWM3DCH_DC7_LENGTH                                 0x1
#define _PWM3DCH_DC7_MASK                                   0x20
#define _PWM3DCH_DC8_POSN                                   0x6
#define _PWM3DCH_DC8_POSITION                               0x6
#define _PWM3DCH_DC8_SIZE                                   0x1
#define _PWM3DCH_DC8_LENGTH                                 0x1
#define _PWM3DCH_DC8_MASK                                   0x40
#define _PWM3DCH_DC9_POSN                                   0x7
#define _PWM3DCH_DC9_POSITION                               0x7
#define _PWM3DCH_DC9_SIZE                                   0x1
#define _PWM3DCH_DC9_LENGTH                                 0x1
#define _PWM3DCH_DC9_MASK                                   0x80
#define _PWM3DCH_PWM3DC2_POSN                               0x0
#define _PWM3DCH_PWM3DC2_POSITION                           0x0
#define _PWM3DCH_PWM3DC2_SIZE                               0x1
#define _PWM3DCH_PWM3DC2_LENGTH                             0x1
#define _PWM3DCH_PWM3DC2_MASK                               0x1
#define _PWM3DCH_PWM3DC3_POSN                               0x1
#define _PWM3DCH_PWM3DC3_POSITION                           0x1
#define _PWM3DCH_PWM3DC3_SIZE                               0x1
#define _PWM3DCH_PWM3DC3_LENGTH                             0x1
#define _PWM3DCH_PWM3DC3_MASK                               0x2
#define _PWM3DCH_PWM3DC4_POSN                               0x2
#define _PWM3DCH_PWM3DC4_POSITION                           0x2
#define _PWM3DCH_PWM3DC4_SIZE                               0x1
#define _PWM3DCH_PWM3DC4_LENGTH                             0x1
#define _PWM3DCH_PWM3DC4_MASK                               0x4
#define _PWM3DCH_PWM3DC5_POSN                               0x3
#define _PWM3DCH_PWM3DC5_POSITION                           0x3
#define _PWM3DCH_PWM3DC5_SIZE                               0x1
#define _PWM3DCH_PWM3DC5_LENGTH                             0x1
#define _PWM3DCH_PWM3DC5_MASK                               0x8
#define _PWM3DCH_PWM3DC6_POSN                               0x4
#define _PWM3DCH_PWM3DC6_POSITION                           0x4
#define _PWM3DCH_PWM3DC6_SIZE                               0x1
#define _PWM3DCH_PWM3DC6_LENGTH                             0x1
#define _PWM3DCH_PWM3DC6_MASK                               0x10
#define _PWM3DCH_PWM3DC7_POSN                               0x5
#define _PWM3DCH_PWM3DC7_POSITION                           0x5
#define _PWM3DCH_PWM3DC7_SIZE                               0x1
#define _PWM3DCH_PWM3DC7_LENGTH                             0x1
#define _PWM3DCH_PWM3DC7_MASK                               0x20
#define _PWM3DCH_PWM3DC8_POSN                               0x6
#define _PWM3DCH_PWM3DC8_POSITION                           0x6
#define _PWM3DCH_PWM3DC8_SIZE                               0x1
#define _PWM3DCH_PWM3DC8_LENGTH                             0x1
#define _PWM3DCH_PWM3DC8_MASK                               0x40
#define _PWM3DCH_PWM3DC9_POSN                               0x7
#define _PWM3DCH_PWM3DC9_POSITION                           0x7
#define _PWM3DCH_PWM3DC9_SIZE                               0x1
#define _PWM3DCH_PWM3DC9_LENGTH                             0x1
#define _PWM3DCH_PWM3DC9_MASK                               0x80
#define _PWM3DCH_PWMPW2_POSN                                0x0
#define _PWM3DCH_PWMPW2_POSITION                            0x0
#define _PWM3DCH_PWMPW2_SIZE                                0x1
#define _PWM3DCH_PWMPW2_LENGTH                              0x1
#define _PWM3DCH_PWMPW2_MASK                                0x1
#define _PWM3DCH_PWMPW3_POSN                                0x1
#define _PWM3DCH_PWMPW3_POSITION                            0x1
#define _PWM3DCH_PWMPW3_SIZE                                0x1
#define _PWM3DCH_PWMPW3_LENGTH                              0x1
#define _PWM3DCH_PWMPW3_MASK                                0x2
#define _PWM3DCH_PWMPW4_POSN                                0x2
#define _PWM3DCH_PWMPW4_POSITION                            0x2
#define _PWM3DCH_PWMPW4_SIZE                                0x1
#define _PWM3DCH_PWMPW4_LENGTH                              0x1
#define _PWM3DCH_PWMPW4_MASK                                0x4
#define _PWM3DCH_PWMPW5_POSN                                0x3
#define _PWM3DCH_PWMPW5_POSITION                            0x3
#define _PWM3DCH_PWMPW5_SIZE                                0x1
#define _PWM3DCH_PWMPW5_LENGTH                              0x1
#define _PWM3DCH_PWMPW5_MASK                                0x8
#define _PWM3DCH_PWMPW6_POSN                                0x4
#define _PWM3DCH_PWMPW6_POSITION                            0x4
#define _PWM3DCH_PWMPW6_SIZE                                0x1
#define _PWM3DCH_PWMPW6_LENGTH                              0x1
#define _PWM3DCH_PWMPW6_MASK                                0x10
#define _PWM3DCH_PWMPW7_POSN                                0x5
#define _PWM3DCH_PWMPW7_POSITION                            0x5
#define _PWM3DCH_PWMPW7_SIZE                                0x1
#define _PWM3DCH_PWMPW7_LENGTH                              0x1
#define _PWM3DCH_PWMPW7_MASK                                0x20
#define _PWM3DCH_PWMPW8_POSN                                0x6
#define _PWM3DCH_PWMPW8_POSITION                            0x6
#define _PWM3DCH_PWMPW8_SIZE                                0x1
#define _PWM3DCH_PWMPW8_LENGTH                              0x1
#define _PWM3DCH_PWMPW8_MASK                                0x40
#define _PWM3DCH_PWMPW9_POSN                                0x7
#define _PWM3DCH_PWMPW9_POSITION                            0x7
#define _PWM3DCH_PWMPW9_SIZE                                0x1
#define _PWM3DCH_PWMPW9_LENGTH                              0x1
#define _PWM3DCH_PWMPW9_MASK                                0x80

// Register: PWM3CON
#define PWM3CON PWM3CON
extern volatile unsigned char           PWM3CON             __at(0x619);
#ifndef _LIB_BUILD
asm("PWM3CON equ 0619h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM3POL                :1;
        unsigned PWM3OUT                :1;
        unsigned                        :1;
        unsigned PWM3EN                 :1;
    };
} PWM3CONbits_t;
extern volatile PWM3CONbits_t PWM3CONbits __at(0x619);
// bitfield macros
#define _PWM3CON_POL_POSN                                   0x4
#define _PWM3CON_POL_POSITION                               0x4
#define _PWM3CON_POL_SIZE                                   0x1
#define _PWM3CON_POL_LENGTH                                 0x1
#define _PWM3CON_POL_MASK                                   0x10
#define _PWM3CON_OUT_POSN                                   0x5
#define _PWM3CON_OUT_POSITION                               0x5
#define _PWM3CON_OUT_SIZE                                   0x1
#define _PWM3CON_OUT_LENGTH                                 0x1
#define _PWM3CON_OUT_MASK                                   0x20
#define _PWM3CON_EN_POSN                                    0x7
#define _PWM3CON_EN_POSITION                                0x7
#define _PWM3CON_EN_SIZE                                    0x1
#define _PWM3CON_EN_LENGTH                                  0x1
#define _PWM3CON_EN_MASK                                    0x80
#define _PWM3CON_PWM3POL_POSN                               0x4
#define _PWM3CON_PWM3POL_POSITION                           0x4
#define _PWM3CON_PWM3POL_SIZE                               0x1
#define _PWM3CON_PWM3POL_LENGTH                             0x1
#define _PWM3CON_PWM3POL_MASK                               0x10
#define _PWM3CON_PWM3OUT_POSN                               0x5
#define _PWM3CON_PWM3OUT_POSITION                           0x5
#define _PWM3CON_PWM3OUT_SIZE                               0x1
#define _PWM3CON_PWM3OUT_LENGTH                             0x1
#define _PWM3CON_PWM3OUT_MASK                               0x20
#define _PWM3CON_PWM3EN_POSN                                0x7
#define _PWM3CON_PWM3EN_POSITION                            0x7
#define _PWM3CON_PWM3EN_SIZE                                0x1
#define _PWM3CON_PWM3EN_LENGTH                              0x1
#define _PWM3CON_PWM3EN_MASK                                0x80

// Register: COG1PHR
#define COG1PHR COG1PHR
extern volatile unsigned char           COG1PHR             __at(0x68D);
#ifndef _LIB_BUILD
asm("COG1PHR equ 068Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PHR                    :6;
    };
    struct {
        unsigned PHR0                   :1;
        unsigned PHR1                   :1;
        unsigned PHR2                   :1;
        unsigned PHR3                   :1;
        unsigned PHR4                   :1;
        unsigned PHR5                   :1;
    };
    struct {
        unsigned G1PHR0                 :1;
        unsigned G1PHR1                 :1;
        unsigned G1PHR2                 :1;
        unsigned G1PHR3                 :1;
        unsigned G1PHR4                 :1;
        unsigned G1PHR5                 :1;
    };
} COG1PHRbits_t;
extern volatile COG1PHRbits_t COG1PHRbits __at(0x68D);
// bitfield macros
#define _COG1PHR_PHR_POSN                                   0x0
#define _COG1PHR_PHR_POSITION                               0x0
#define _COG1PHR_PHR_SIZE                                   0x6
#define _COG1PHR_PHR_LENGTH                                 0x6
#define _COG1PHR_PHR_MASK                                   0x3F
#define _COG1PHR_PHR0_POSN                                  0x0
#define _COG1PHR_PHR0_POSITION                              0x0
#define _COG1PHR_PHR0_SIZE                                  0x1
#define _COG1PHR_PHR0_LENGTH                                0x1
#define _COG1PHR_PHR0_MASK                                  0x1
#define _COG1PHR_PHR1_POSN                                  0x1
#define _COG1PHR_PHR1_POSITION                              0x1
#define _COG1PHR_PHR1_SIZE                                  0x1
#define _COG1PHR_PHR1_LENGTH                                0x1
#define _COG1PHR_PHR1_MASK                                  0x2
#define _COG1PHR_PHR2_POSN                                  0x2
#define _COG1PHR_PHR2_POSITION                              0x2
#define _COG1PHR_PHR2_SIZE                                  0x1
#define _COG1PHR_PHR2_LENGTH                                0x1
#define _COG1PHR_PHR2_MASK                                  0x4
#define _COG1PHR_PHR3_POSN                                  0x3
#define _COG1PHR_PHR3_POSITION                              0x3
#define _COG1PHR_PHR3_SIZE                                  0x1
#define _COG1PHR_PHR3_LENGTH                                0x1
#define _COG1PHR_PHR3_MASK                                  0x8
#define _COG1PHR_PHR4_POSN                                  0x4
#define _COG1PHR_PHR4_POSITION                              0x4
#define _COG1PHR_PHR4_SIZE                                  0x1
#define _COG1PHR_PHR4_LENGTH                                0x1
#define _COG1PHR_PHR4_MASK                                  0x10
#define _COG1PHR_PHR5_POSN                                  0x5
#define _COG1PHR_PHR5_POSITION                              0x5
#define _COG1PHR_PHR5_SIZE                                  0x1
#define _COG1PHR_PHR5_LENGTH                                0x1
#define _COG1PHR_PHR5_MASK                                  0x20
#define _COG1PHR_G1PHR0_POSN                                0x0
#define _COG1PHR_G1PHR0_POSITION                            0x0
#define _COG1PHR_G1PHR0_SIZE                                0x1
#define _COG1PHR_G1PHR0_LENGTH                              0x1
#define _COG1PHR_G1PHR0_MASK                                0x1
#define _COG1PHR_G1PHR1_POSN                                0x1
#define _COG1PHR_G1PHR1_POSITION                            0x1
#define _COG1PHR_G1PHR1_SIZE                                0x1
#define _COG1PHR_G1PHR1_LENGTH                              0x1
#define _COG1PHR_G1PHR1_MASK                                0x2
#define _COG1PHR_G1PHR2_POSN                                0x2
#define _COG1PHR_G1PHR2_POSITION                            0x2
#define _COG1PHR_G1PHR2_SIZE                                0x1
#define _COG1PHR_G1PHR2_LENGTH                              0x1
#define _COG1PHR_G1PHR2_MASK                                0x4
#define _COG1PHR_G1PHR3_POSN                                0x3
#define _COG1PHR_G1PHR3_POSITION                            0x3
#define _COG1PHR_G1PHR3_SIZE                                0x1
#define _COG1PHR_G1PHR3_LENGTH                              0x1
#define _COG1PHR_G1PHR3_MASK                                0x8
#define _COG1PHR_G1PHR4_POSN                                0x4
#define _COG1PHR_G1PHR4_POSITION                            0x4
#define _COG1PHR_G1PHR4_SIZE                                0x1
#define _COG1PHR_G1PHR4_LENGTH                              0x1
#define _COG1PHR_G1PHR4_MASK                                0x10
#define _COG1PHR_G1PHR5_POSN                                0x5
#define _COG1PHR_G1PHR5_POSITION                            0x5
#define _COG1PHR_G1PHR5_SIZE                                0x1
#define _COG1PHR_G1PHR5_LENGTH                              0x1
#define _COG1PHR_G1PHR5_MASK                                0x20

// Register: COG1PHF
#define COG1PHF COG1PHF
extern volatile unsigned char           COG1PHF             __at(0x68E);
#ifndef _LIB_BUILD
asm("COG1PHF equ 068Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PHF                    :6;
    };
    struct {
        unsigned PHF0                   :1;
        unsigned PHF1                   :1;
        unsigned PHF2                   :1;
        unsigned PHF3                   :1;
        unsigned PHF4                   :1;
        unsigned PHF5                   :1;
    };
    struct {
        unsigned G1PHF0                 :1;
        unsigned G1PHF1                 :1;
        unsigned G1PHF2                 :1;
        unsigned G1PHF3                 :1;
        unsigned G1PHF4                 :1;
        unsigned G1PHF5                 :1;
    };
} COG1PHFbits_t;
extern volatile COG1PHFbits_t COG1PHFbits __at(0x68E);
// bitfield macros
#define _COG1PHF_PHF_POSN                                   0x0
#define _COG1PHF_PHF_POSITION                               0x0
#define _COG1PHF_PHF_SIZE                                   0x6
#define _COG1PHF_PHF_LENGTH                                 0x6
#define _COG1PHF_PHF_MASK                                   0x3F
#define _COG1PHF_PHF0_POSN                                  0x0
#define _COG1PHF_PHF0_POSITION                              0x0
#define _COG1PHF_PHF0_SIZE                                  0x1
#define _COG1PHF_PHF0_LENGTH                                0x1
#define _COG1PHF_PHF0_MASK                                  0x1
#define _COG1PHF_PHF1_POSN                                  0x1
#define _COG1PHF_PHF1_POSITION                              0x1
#define _COG1PHF_PHF1_SIZE                                  0x1
#define _COG1PHF_PHF1_LENGTH                                0x1
#define _COG1PHF_PHF1_MASK                                  0x2
#define _COG1PHF_PHF2_POSN                                  0x2
#define _COG1PHF_PHF2_POSITION                              0x2
#define _COG1PHF_PHF2_SIZE                                  0x1
#define _COG1PHF_PHF2_LENGTH                                0x1
#define _COG1PHF_PHF2_MASK                                  0x4
#define _COG1PHF_PHF3_POSN                                  0x3
#define _COG1PHF_PHF3_POSITION                              0x3
#define _COG1PHF_PHF3_SIZE                                  0x1
#define _COG1PHF_PHF3_LENGTH                                0x1
#define _COG1PHF_PHF3_MASK                                  0x8
#define _COG1PHF_PHF4_POSN                                  0x4
#define _COG1PHF_PHF4_POSITION                              0x4
#define _COG1PHF_PHF4_SIZE                                  0x1
#define _COG1PHF_PHF4_LENGTH                                0x1
#define _COG1PHF_PHF4_MASK                                  0x10
#define _COG1PHF_PHF5_POSN                                  0x5
#define _COG1PHF_PHF5_POSITION                              0x5
#define _COG1PHF_PHF5_SIZE                                  0x1
#define _COG1PHF_PHF5_LENGTH                                0x1
#define _COG1PHF_PHF5_MASK                                  0x20
#define _COG1PHF_G1PHF0_POSN                                0x0
#define _COG1PHF_G1PHF0_POSITION                            0x0
#define _COG1PHF_G1PHF0_SIZE                                0x1
#define _COG1PHF_G1PHF0_LENGTH                              0x1
#define _COG1PHF_G1PHF0_MASK                                0x1
#define _COG1PHF_G1PHF1_POSN                                0x1
#define _COG1PHF_G1PHF1_POSITION                            0x1
#define _COG1PHF_G1PHF1_SIZE                                0x1
#define _COG1PHF_G1PHF1_LENGTH                              0x1
#define _COG1PHF_G1PHF1_MASK                                0x2
#define _COG1PHF_G1PHF2_POSN                                0x2
#define _COG1PHF_G1PHF2_POSITION                            0x2
#define _COG1PHF_G1PHF2_SIZE                                0x1
#define _COG1PHF_G1PHF2_LENGTH                              0x1
#define _COG1PHF_G1PHF2_MASK                                0x4
#define _COG1PHF_G1PHF3_POSN                                0x3
#define _COG1PHF_G1PHF3_POSITION                            0x3
#define _COG1PHF_G1PHF3_SIZE                                0x1
#define _COG1PHF_G1PHF3_LENGTH                              0x1
#define _COG1PHF_G1PHF3_MASK                                0x8
#define _COG1PHF_G1PHF4_POSN                                0x4
#define _COG1PHF_G1PHF4_POSITION                            0x4
#define _COG1PHF_G1PHF4_SIZE                                0x1
#define _COG1PHF_G1PHF4_LENGTH                              0x1
#define _COG1PHF_G1PHF4_MASK                                0x10
#define _COG1PHF_G1PHF5_POSN                                0x5
#define _COG1PHF_G1PHF5_POSITION                            0x5
#define _COG1PHF_G1PHF5_SIZE                                0x1
#define _COG1PHF_G1PHF5_LENGTH                              0x1
#define _COG1PHF_G1PHF5_MASK                                0x20

// Register: COG1BLKR
#define COG1BLKR COG1BLKR
extern volatile unsigned char           COG1BLKR            __at(0x68F);
#ifndef _LIB_BUILD
asm("COG1BLKR equ 068Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BLKR                   :6;
    };
    struct {
        unsigned BLKR0                  :1;
        unsigned BLKR1                  :1;
        unsigned BLKR2                  :1;
        unsigned BLKR3                  :1;
        unsigned BLKR4                  :1;
        unsigned BLKR5                  :1;
    };
    struct {
        unsigned G1BLKR0                :1;
        unsigned G1BLKR1                :1;
        unsigned G1BLKR2                :1;
        unsigned G1BLKR3                :1;
        unsigned G1BLKR4                :1;
        unsigned G1BLKR5                :1;
    };
} COG1BLKRbits_t;
extern volatile COG1BLKRbits_t COG1BLKRbits __at(0x68F);
// bitfield macros
#define _COG1BLKR_BLKR_POSN                                 0x0
#define _COG1BLKR_BLKR_POSITION                             0x0
#define _COG1BLKR_BLKR_SIZE                                 0x6
#define _COG1BLKR_BLKR_LENGTH                               0x6
#define _COG1BLKR_BLKR_MASK                                 0x3F
#define _COG1BLKR_BLKR0_POSN                                0x0
#define _COG1BLKR_BLKR0_POSITION                            0x0
#define _COG1BLKR_BLKR0_SIZE                                0x1
#define _COG1BLKR_BLKR0_LENGTH                              0x1
#define _COG1BLKR_BLKR0_MASK                                0x1
#define _COG1BLKR_BLKR1_POSN                                0x1
#define _COG1BLKR_BLKR1_POSITION                            0x1
#define _COG1BLKR_BLKR1_SIZE                                0x1
#define _COG1BLKR_BLKR1_LENGTH                              0x1
#define _COG1BLKR_BLKR1_MASK                                0x2
#define _COG1BLKR_BLKR2_POSN                                0x2
#define _COG1BLKR_BLKR2_POSITION                            0x2
#define _COG1BLKR_BLKR2_SIZE                                0x1
#define _COG1BLKR_BLKR2_LENGTH                              0x1
#define _COG1BLKR_BLKR2_MASK                                0x4
#define _COG1BLKR_BLKR3_POSN                                0x3
#define _COG1BLKR_BLKR3_POSITION                            0x3
#define _COG1BLKR_BLKR3_SIZE                                0x1
#define _COG1BLKR_BLKR3_LENGTH                              0x1
#define _COG1BLKR_BLKR3_MASK                                0x8
#define _COG1BLKR_BLKR4_POSN                                0x4
#define _COG1BLKR_BLKR4_POSITION                            0x4
#define _COG1BLKR_BLKR4_SIZE                                0x1
#define _COG1BLKR_BLKR4_LENGTH                              0x1
#define _COG1BLKR_BLKR4_MASK                                0x10
#define _COG1BLKR_BLKR5_POSN                                0x5
#define _COG1BLKR_BLKR5_POSITION                            0x5
#define _COG1BLKR_BLKR5_SIZE                                0x1
#define _COG1BLKR_BLKR5_LENGTH                              0x1
#define _COG1BLKR_BLKR5_MASK                                0x20
#define _COG1BLKR_G1BLKR0_POSN                              0x0
#define _COG1BLKR_G1BLKR0_POSITION                          0x0
#define _COG1BLKR_G1BLKR0_SIZE                              0x1
#define _COG1BLKR_G1BLKR0_LENGTH                            0x1
#define _COG1BLKR_G1BLKR0_MASK                              0x1
#define _COG1BLKR_G1BLKR1_POSN                              0x1
#define _COG1BLKR_G1BLKR1_POSITION                          0x1
#define _COG1BLKR_G1BLKR1_SIZE                              0x1
#define _COG1BLKR_G1BLKR1_LENGTH                            0x1
#define _COG1BLKR_G1BLKR1_MASK                              0x2
#define _COG1BLKR_G1BLKR2_POSN                              0x2
#define _COG1BLKR_G1BLKR2_POSITION                          0x2
#define _COG1BLKR_G1BLKR2_SIZE                              0x1
#define _COG1BLKR_G1BLKR2_LENGTH                            0x1
#define _COG1BLKR_G1BLKR2_MASK                              0x4
#define _COG1BLKR_G1BLKR3_POSN                              0x3
#define _COG1BLKR_G1BLKR3_POSITION                          0x3
#define _COG1BLKR_G1BLKR3_SIZE                              0x1
#define _COG1BLKR_G1BLKR3_LENGTH                            0x1
#define _COG1BLKR_G1BLKR3_MASK                              0x8
#define _COG1BLKR_G1BLKR4_POSN                              0x4
#define _COG1BLKR_G1BLKR4_POSITION                          0x4
#define _COG1BLKR_G1BLKR4_SIZE                              0x1
#define _COG1BLKR_G1BLKR4_LENGTH                            0x1
#define _COG1BLKR_G1BLKR4_MASK                              0x10
#define _COG1BLKR_G1BLKR5_POSN                              0x5
#define _COG1BLKR_G1BLKR5_POSITION                          0x5
#define _COG1BLKR_G1BLKR5_SIZE                              0x1
#define _COG1BLKR_G1BLKR5_LENGTH                            0x1
#define _COG1BLKR_G1BLKR5_MASK                              0x20

// Register: COG1BLKF
#define COG1BLKF COG1BLKF
extern volatile unsigned char           COG1BLKF            __at(0x690);
#ifndef _LIB_BUILD
asm("COG1BLKF equ 0690h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BLKF                   :6;
    };
    struct {
        unsigned BLKF0                  :1;
        unsigned BLKF1                  :1;
        unsigned BLKF2                  :1;
        unsigned BLKF3                  :1;
        unsigned BLKF4                  :1;
        unsigned BLKF5                  :1;
    };
    struct {
        unsigned G1BLKF0                :1;
        unsigned G1BLKF1                :1;
        unsigned G1BLKF2                :1;
        unsigned G1BLKF3                :1;
        unsigned G1BLKF4                :1;
        unsigned G1BLKF5                :1;
    };
} COG1BLKFbits_t;
extern volatile COG1BLKFbits_t COG1BLKFbits __at(0x690);
// bitfield macros
#define _COG1BLKF_BLKF_POSN                                 0x0
#define _COG1BLKF_BLKF_POSITION                             0x0
#define _COG1BLKF_BLKF_SIZE                                 0x6
#define _COG1BLKF_BLKF_LENGTH                               0x6
#define _COG1BLKF_BLKF_MASK                                 0x3F
#define _COG1BLKF_BLKF0_POSN                                0x0
#define _COG1BLKF_BLKF0_POSITION                            0x0
#define _COG1BLKF_BLKF0_SIZE                                0x1
#define _COG1BLKF_BLKF0_LENGTH                              0x1
#define _COG1BLKF_BLKF0_MASK                                0x1
#define _COG1BLKF_BLKF1_POSN                                0x1
#define _COG1BLKF_BLKF1_POSITION                            0x1
#define _COG1BLKF_BLKF1_SIZE                                0x1
#define _COG1BLKF_BLKF1_LENGTH                              0x1
#define _COG1BLKF_BLKF1_MASK                                0x2
#define _COG1BLKF_BLKF2_POSN                                0x2
#define _COG1BLKF_BLKF2_POSITION                            0x2
#define _COG1BLKF_BLKF2_SIZE                                0x1
#define _COG1BLKF_BLKF2_LENGTH                              0x1
#define _COG1BLKF_BLKF2_MASK                                0x4
#define _COG1BLKF_BLKF3_POSN                                0x3
#define _COG1BLKF_BLKF3_POSITION                            0x3
#define _COG1BLKF_BLKF3_SIZE                                0x1
#define _COG1BLKF_BLKF3_LENGTH                              0x1
#define _COG1BLKF_BLKF3_MASK                                0x8
#define _COG1BLKF_BLKF4_POSN                                0x4
#define _COG1BLKF_BLKF4_POSITION                            0x4
#define _COG1BLKF_BLKF4_SIZE                                0x1
#define _COG1BLKF_BLKF4_LENGTH                              0x1
#define _COG1BLKF_BLKF4_MASK                                0x10
#define _COG1BLKF_BLKF5_POSN                                0x5
#define _COG1BLKF_BLKF5_POSITION                            0x5
#define _COG1BLKF_BLKF5_SIZE                                0x1
#define _COG1BLKF_BLKF5_LENGTH                              0x1
#define _COG1BLKF_BLKF5_MASK                                0x20
#define _COG1BLKF_G1BLKF0_POSN                              0x0
#define _COG1BLKF_G1BLKF0_POSITION                          0x0
#define _COG1BLKF_G1BLKF0_SIZE                              0x1
#define _COG1BLKF_G1BLKF0_LENGTH                            0x1
#define _COG1BLKF_G1BLKF0_MASK                              0x1
#define _COG1BLKF_G1BLKF1_POSN                              0x1
#define _COG1BLKF_G1BLKF1_POSITION                          0x1
#define _COG1BLKF_G1BLKF1_SIZE                              0x1
#define _COG1BLKF_G1BLKF1_LENGTH                            0x1
#define _COG1BLKF_G1BLKF1_MASK                              0x2
#define _COG1BLKF_G1BLKF2_POSN                              0x2
#define _COG1BLKF_G1BLKF2_POSITION                          0x2
#define _COG1BLKF_G1BLKF2_SIZE                              0x1
#define _COG1BLKF_G1BLKF2_LENGTH                            0x1
#define _COG1BLKF_G1BLKF2_MASK                              0x4
#define _COG1BLKF_G1BLKF3_POSN                              0x3
#define _COG1BLKF_G1BLKF3_POSITION                          0x3
#define _COG1BLKF_G1BLKF3_SIZE                              0x1
#define _COG1BLKF_G1BLKF3_LENGTH                            0x1
#define _COG1BLKF_G1BLKF3_MASK                              0x8
#define _COG1BLKF_G1BLKF4_POSN                              0x4
#define _COG1BLKF_G1BLKF4_POSITION                          0x4
#define _COG1BLKF_G1BLKF4_SIZE                              0x1
#define _COG1BLKF_G1BLKF4_LENGTH                            0x1
#define _COG1BLKF_G1BLKF4_MASK                              0x10
#define _COG1BLKF_G1BLKF5_POSN                              0x5
#define _COG1BLKF_G1BLKF5_POSITION                          0x5
#define _COG1BLKF_G1BLKF5_SIZE                              0x1
#define _COG1BLKF_G1BLKF5_LENGTH                            0x1
#define _COG1BLKF_G1BLKF5_MASK                              0x20

// Register: COG1DBR
#define COG1DBR COG1DBR
extern volatile unsigned char           COG1DBR             __at(0x691);
#ifndef _LIB_BUILD
asm("COG1DBR equ 0691h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned G1DBR0                 :1;
        unsigned G1DBR1                 :1;
        unsigned G1DBR2                 :1;
        unsigned G1DBR3                 :1;
        unsigned G1DBR4                 :1;
        unsigned G1DBR5                 :1;
    };
} COG1DBRbits_t;
extern volatile COG1DBRbits_t COG1DBRbits __at(0x691);
// bitfield macros
#define _COG1DBR_DBR_POSN                                   0x0
#define _COG1DBR_DBR_POSITION                               0x0
#define _COG1DBR_DBR_SIZE                                   0x6
#define _COG1DBR_DBR_LENGTH                                 0x6
#define _COG1DBR_DBR_MASK                                   0x3F
#define _COG1DBR_DBR0_POSN                                  0x0
#define _COG1DBR_DBR0_POSITION                              0x0
#define _COG1DBR_DBR0_SIZE                                  0x1
#define _COG1DBR_DBR0_LENGTH                                0x1
#define _COG1DBR_DBR0_MASK                                  0x1
#define _COG1DBR_DBR1_POSN                                  0x1
#define _COG1DBR_DBR1_POSITION                              0x1
#define _COG1DBR_DBR1_SIZE                                  0x1
#define _COG1DBR_DBR1_LENGTH                                0x1
#define _COG1DBR_DBR1_MASK                                  0x2
#define _COG1DBR_DBR2_POSN                                  0x2
#define _COG1DBR_DBR2_POSITION                              0x2
#define _COG1DBR_DBR2_SIZE                                  0x1
#define _COG1DBR_DBR2_LENGTH                                0x1
#define _COG1DBR_DBR2_MASK                                  0x4
#define _COG1DBR_DBR3_POSN                                  0x3
#define _COG1DBR_DBR3_POSITION                              0x3
#define _COG1DBR_DBR3_SIZE                                  0x1
#define _COG1DBR_DBR3_LENGTH                                0x1
#define _COG1DBR_DBR3_MASK                                  0x8
#define _COG1DBR_DBR4_POSN                                  0x4
#define _COG1DBR_DBR4_POSITION                              0x4
#define _COG1DBR_DBR4_SIZE                                  0x1
#define _COG1DBR_DBR4_LENGTH                                0x1
#define _COG1DBR_DBR4_MASK                                  0x10
#define _COG1DBR_DBR5_POSN                                  0x5
#define _COG1DBR_DBR5_POSITION                              0x5
#define _COG1DBR_DBR5_SIZE                                  0x1
#define _COG1DBR_DBR5_LENGTH                                0x1
#define _COG1DBR_DBR5_MASK                                  0x20
#define _COG1DBR_G1DBR0_POSN                                0x0
#define _COG1DBR_G1DBR0_POSITION                            0x0
#define _COG1DBR_G1DBR0_SIZE                                0x1
#define _COG1DBR_G1DBR0_LENGTH                              0x1
#define _COG1DBR_G1DBR0_MASK                                0x1
#define _COG1DBR_G1DBR1_POSN                                0x1
#define _COG1DBR_G1DBR1_POSITION                            0x1
#define _COG1DBR_G1DBR1_SIZE                                0x1
#define _COG1DBR_G1DBR1_LENGTH                              0x1
#define _COG1DBR_G1DBR1_MASK                                0x2
#define _COG1DBR_G1DBR2_POSN                                0x2
#define _COG1DBR_G1DBR2_POSITION                            0x2
#define _COG1DBR_G1DBR2_SIZE                                0x1
#define _COG1DBR_G1DBR2_LENGTH                              0x1
#define _COG1DBR_G1DBR2_MASK                                0x4
#define _COG1DBR_G1DBR3_POSN                                0x3
#define _COG1DBR_G1DBR3_POSITION                            0x3
#define _COG1DBR_G1DBR3_SIZE                                0x1
#define _COG1DBR_G1DBR3_LENGTH                              0x1
#define _COG1DBR_G1DBR3_MASK                                0x8
#define _COG1DBR_G1DBR4_POSN                                0x4
#define _COG1DBR_G1DBR4_POSITION                            0x4
#define _COG1DBR_G1DBR4_SIZE                                0x1
#define _COG1DBR_G1DBR4_LENGTH                              0x1
#define _COG1DBR_G1DBR4_MASK                                0x10
#define _COG1DBR_G1DBR5_POSN                                0x5
#define _COG1DBR_G1DBR5_POSITION                            0x5
#define _COG1DBR_G1DBR5_SIZE                                0x1
#define _COG1DBR_G1DBR5_LENGTH                              0x1
#define _COG1DBR_G1DBR5_MASK                                0x20

// Register: COG1DBF
#define COG1DBF COG1DBF
extern volatile unsigned char           COG1DBF             __at(0x692);
#ifndef _LIB_BUILD
asm("COG1DBF equ 0692h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned G1DBF0                 :1;
        unsigned G1DBF1                 :1;
        unsigned G1DBF2                 :1;
        unsigned G1DBF3                 :1;
        unsigned G1DBF4                 :1;
        unsigned G1DBF5                 :1;
    };
    struct {
        unsigned G1DBF                  :6;
    };
} COG1DBFbits_t;
extern volatile COG1DBFbits_t COG1DBFbits __at(0x692);
// bitfield macros
#define _COG1DBF_DBF0_POSN                                  0x0
#define _COG1DBF_DBF0_POSITION                              0x0
#define _COG1DBF_DBF0_SIZE                                  0x1
#define _COG1DBF_DBF0_LENGTH                                0x1
#define _COG1DBF_DBF0_MASK                                  0x1
#define _COG1DBF_DBF1_POSN                                  0x1
#define _COG1DBF_DBF1_POSITION                              0x1
#define _COG1DBF_DBF1_SIZE                                  0x1
#define _COG1DBF_DBF1_LENGTH                                0x1
#define _COG1DBF_DBF1_MASK                                  0x2
#define _COG1DBF_DBF2_POSN                                  0x2
#define _COG1DBF_DBF2_POSITION                              0x2
#define _COG1DBF_DBF2_SIZE                                  0x1
#define _COG1DBF_DBF2_LENGTH                                0x1
#define _COG1DBF_DBF2_MASK                                  0x4
#define _COG1DBF_DBF3_POSN                                  0x3
#define _COG1DBF_DBF3_POSITION                              0x3
#define _COG1DBF_DBF3_SIZE                                  0x1
#define _COG1DBF_DBF3_LENGTH                                0x1
#define _COG1DBF_DBF3_MASK                                  0x8
#define _COG1DBF_DBF4_POSN                                  0x4
#define _COG1DBF_DBF4_POSITION                              0x4
#define _COG1DBF_DBF4_SIZE                                  0x1
#define _COG1DBF_DBF4_LENGTH                                0x1
#define _COG1DBF_DBF4_MASK                                  0x10
#define _COG1DBF_DBF5_POSN                                  0x5
#define _COG1DBF_DBF5_POSITION                              0x5
#define _COG1DBF_DBF5_SIZE                                  0x1
#define _COG1DBF_DBF5_LENGTH                                0x1
#define _COG1DBF_DBF5_MASK                                  0x20
#define _COG1DBF_G1DBF0_POSN                                0x0
#define _COG1DBF_G1DBF0_POSITION                            0x0
#define _COG1DBF_G1DBF0_SIZE                                0x1
#define _COG1DBF_G1DBF0_LENGTH                              0x1
#define _COG1DBF_G1DBF0_MASK                                0x1
#define _COG1DBF_G1DBF1_POSN                                0x1
#define _COG1DBF_G1DBF1_POSITION                            0x1
#define _COG1DBF_G1DBF1_SIZE                                0x1
#define _COG1DBF_G1DBF1_LENGTH                              0x1
#define _COG1DBF_G1DBF1_MASK                                0x2
#define _COG1DBF_G1DBF2_POSN                                0x2
#define _COG1DBF_G1DBF2_POSITION                            0x2
#define _COG1DBF_G1DBF2_SIZE                                0x1
#define _COG1DBF_G1DBF2_LENGTH                              0x1
#define _COG1DBF_G1DBF2_MASK                                0x4
#define _COG1DBF_G1DBF3_POSN                                0x3
#define _COG1DBF_G1DBF3_POSITION                            0x3
#define _COG1DBF_G1DBF3_SIZE                                0x1
#define _COG1DBF_G1DBF3_LENGTH                              0x1
#define _COG1DBF_G1DBF3_MASK                                0x8
#define _COG1DBF_G1DBF4_POSN                                0x4
#define _COG1DBF_G1DBF4_POSITION                            0x4
#define _COG1DBF_G1DBF4_SIZE                                0x1
#define _COG1DBF_G1DBF4_LENGTH                              0x1
#define _COG1DBF_G1DBF4_MASK                                0x10
#define _COG1DBF_G1DBF5_POSN                                0x5
#define _COG1DBF_G1DBF5_POSITION                            0x5
#define _COG1DBF_G1DBF5_SIZE                                0x1
#define _COG1DBF_G1DBF5_LENGTH                              0x1
#define _COG1DBF_G1DBF5_MASK                                0x20
#define _COG1DBF_G1DBF_POSN                                 0x0
#define _COG1DBF_G1DBF_POSITION                             0x0
#define _COG1DBF_G1DBF_SIZE                                 0x6
#define _COG1DBF_G1DBF_LENGTH                               0x6
#define _COG1DBF_G1DBF_MASK                                 0x3F

// Register: COG1CON0
#define COG1CON0 COG1CON0
extern volatile unsigned char           COG1CON0            __at(0x693);
#ifndef _LIB_BUILD
asm("COG1CON0 equ 0693h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD                     :3;
        unsigned CS                     :2;
        unsigned                        :1;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
        unsigned MD2                    :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
    };
    struct {
        unsigned G1MD                   :3;
        unsigned G1CS                   :2;
        unsigned                        :1;
        unsigned G1LD                   :1;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned G1MD0                  :1;
        unsigned G1MD1                  :1;
        unsigned G1MD2                  :1;
        unsigned G1CS0                  :1;
        unsigned G1CS1                  :1;
    };
} COG1CON0bits_t;
extern volatile COG1CON0bits_t COG1CON0bits __at(0x693);
// bitfield macros
#define _COG1CON0_MD_POSN                                   0x0
#define _COG1CON0_MD_POSITION                               0x0
#define _COG1CON0_MD_SIZE                                   0x3
#define _COG1CON0_MD_LENGTH                                 0x3
#define _COG1CON0_MD_MASK                                   0x7
#define _COG1CON0_CS_POSN                                   0x3
#define _COG1CON0_CS_POSITION                               0x3
#define _COG1CON0_CS_SIZE                                   0x2
#define _COG1CON0_CS_LENGTH                                 0x2
#define _COG1CON0_CS_MASK                                   0x18
#define _COG1CON0_LD_POSN                                   0x6
#define _COG1CON0_LD_POSITION                               0x6
#define _COG1CON0_LD_SIZE                                   0x1
#define _COG1CON0_LD_LENGTH                                 0x1
#define _COG1CON0_LD_MASK                                   0x40
#define _COG1CON0_EN_POSN                                   0x7
#define _COG1CON0_EN_POSITION                               0x7
#define _COG1CON0_EN_SIZE                                   0x1
#define _COG1CON0_EN_LENGTH                                 0x1
#define _COG1CON0_EN_MASK                                   0x80
#define _COG1CON0_MD0_POSN                                  0x0
#define _COG1CON0_MD0_POSITION                              0x0
#define _COG1CON0_MD0_SIZE                                  0x1
#define _COG1CON0_MD0_LENGTH                                0x1
#define _COG1CON0_MD0_MASK                                  0x1
#define _COG1CON0_MD1_POSN                                  0x1
#define _COG1CON0_MD1_POSITION                              0x1
#define _COG1CON0_MD1_SIZE                                  0x1
#define _COG1CON0_MD1_LENGTH                                0x1
#define _COG1CON0_MD1_MASK                                  0x2
#define _COG1CON0_MD2_POSN                                  0x2
#define _COG1CON0_MD2_POSITION                              0x2
#define _COG1CON0_MD2_SIZE                                  0x1
#define _COG1CON0_MD2_LENGTH                                0x1
#define _COG1CON0_MD2_MASK                                  0x4
#define _COG1CON0_CS0_POSN                                  0x3
#define _COG1CON0_CS0_POSITION                              0x3
#define _COG1CON0_CS0_SIZE                                  0x1
#define _COG1CON0_CS0_LENGTH                                0x1
#define _COG1CON0_CS0_MASK                                  0x8
#define _COG1CON0_CS1_POSN                                  0x4
#define _COG1CON0_CS1_POSITION                              0x4
#define _COG1CON0_CS1_SIZE                                  0x1
#define _COG1CON0_CS1_LENGTH                                0x1
#define _COG1CON0_CS1_MASK                                  0x10
#define _COG1CON0_G1MD_POSN                                 0x0
#define _COG1CON0_G1MD_POSITION                             0x0
#define _COG1CON0_G1MD_SIZE                                 0x3
#define _COG1CON0_G1MD_LENGTH                               0x3
#define _COG1CON0_G1MD_MASK                                 0x7
#define _COG1CON0_G1CS_POSN                                 0x3
#define _COG1CON0_G1CS_POSITION                             0x3
#define _COG1CON0_G1CS_SIZE                                 0x2
#define _COG1CON0_G1CS_LENGTH                               0x2
#define _COG1CON0_G1CS_MASK                                 0x18
#define _COG1CON0_G1LD_POSN                                 0x6
#define _COG1CON0_G1LD_POSITION                             0x6
#define _COG1CON0_G1LD_SIZE                                 0x1
#define _COG1CON0_G1LD_LENGTH                               0x1
#define _COG1CON0_G1LD_MASK                                 0x40
#define _COG1CON0_G1EN_POSN                                 0x7
#define _COG1CON0_G1EN_POSITION                             0x7
#define _COG1CON0_G1EN_SIZE                                 0x1
#define _COG1CON0_G1EN_LENGTH                               0x1
#define _COG1CON0_G1EN_MASK                                 0x80
#define _COG1CON0_G1MD0_POSN                                0x0
#define _COG1CON0_G1MD0_POSITION                            0x0
#define _COG1CON0_G1MD0_SIZE                                0x1
#define _COG1CON0_G1MD0_LENGTH                              0x1
#define _COG1CON0_G1MD0_MASK                                0x1
#define _COG1CON0_G1MD1_POSN                                0x1
#define _COG1CON0_G1MD1_POSITION                            0x1
#define _COG1CON0_G1MD1_SIZE                                0x1
#define _COG1CON0_G1MD1_LENGTH                              0x1
#define _COG1CON0_G1MD1_MASK                                0x2
#define _COG1CON0_G1MD2_POSN                                0x2
#define _COG1CON0_G1MD2_POSITION                            0x2
#define _COG1CON0_G1MD2_SIZE                                0x1
#define _COG1CON0_G1MD2_LENGTH                              0x1
#define _COG1CON0_G1MD2_MASK                                0x4
#define _COG1CON0_G1CS0_POSN                                0x3
#define _COG1CON0_G1CS0_POSITION                            0x3
#define _COG1CON0_G1CS0_SIZE                                0x1
#define _COG1CON0_G1CS0_LENGTH                              0x1
#define _COG1CON0_G1CS0_MASK                                0x8
#define _COG1CON0_G1CS1_POSN                                0x4
#define _COG1CON0_G1CS1_POSITION                            0x4
#define _COG1CON0_G1CS1_SIZE                                0x1
#define _COG1CON0_G1CS1_LENGTH                              0x1
#define _COG1CON0_G1CS1_MASK                                0x10

// Register: COG1CON1
#define COG1CON1 COG1CON1
extern volatile unsigned char           COG1CON1            __at(0x694);
#ifndef _LIB_BUILD
asm("COG1CON1 equ 0694h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :2;
        unsigned FDBS                   :1;
        unsigned RDBS                   :1;
    };
    struct {
        unsigned G1POLA                 :1;
        unsigned G1POLB                 :1;
        unsigned G1POLC                 :1;
        unsigned G1POLD                 :1;
        unsigned                        :2;
        unsigned G1FDBS                 :1;
        unsigned G1RDBS                 :1;
    };
} COG1CON1bits_t;
extern volatile COG1CON1bits_t COG1CON1bits __at(0x694);
// bitfield macros
#define _COG1CON1_POLA_POSN                                 0x0
#define _COG1CON1_POLA_POSITION                             0x0
#define _COG1CON1_POLA_SIZE                                 0x1
#define _COG1CON1_POLA_LENGTH                               0x1
#define _COG1CON1_POLA_MASK                                 0x1
#define _COG1CON1_POLB_POSN                                 0x1
#define _COG1CON1_POLB_POSITION                             0x1
#define _COG1CON1_POLB_SIZE                                 0x1
#define _COG1CON1_POLB_LENGTH                               0x1
#define _COG1CON1_POLB_MASK                                 0x2
#define _COG1CON1_POLC_POSN                                 0x2
#define _COG1CON1_POLC_POSITION                             0x2
#define _COG1CON1_POLC_SIZE                                 0x1
#define _COG1CON1_POLC_LENGTH                               0x1
#define _COG1CON1_POLC_MASK                                 0x4
#define _COG1CON1_POLD_POSN                                 0x3
#define _COG1CON1_POLD_POSITION                             0x3
#define _COG1CON1_POLD_SIZE                                 0x1
#define _COG1CON1_POLD_LENGTH                               0x1
#define _COG1CON1_POLD_MASK                                 0x8
#define _COG1CON1_FDBS_POSN                                 0x6
#define _COG1CON1_FDBS_POSITION                             0x6
#define _COG1CON1_FDBS_SIZE                                 0x1
#define _COG1CON1_FDBS_LENGTH                               0x1
#define _COG1CON1_FDBS_MASK                                 0x40
#define _COG1CON1_RDBS_POSN                                 0x7
#define _COG1CON1_RDBS_POSITION                             0x7
#define _COG1CON1_RDBS_SIZE                                 0x1
#define _COG1CON1_RDBS_LENGTH                               0x1
#define _COG1CON1_RDBS_MASK                                 0x80
#define _COG1CON1_G1POLA_POSN                               0x0
#define _COG1CON1_G1POLA_POSITION                           0x0
#define _COG1CON1_G1POLA_SIZE                               0x1
#define _COG1CON1_G1POLA_LENGTH                             0x1
#define _COG1CON1_G1POLA_MASK                               0x1
#define _COG1CON1_G1POLB_POSN                               0x1
#define _COG1CON1_G1POLB_POSITION                           0x1
#define _COG1CON1_G1POLB_SIZE                               0x1
#define _COG1CON1_G1POLB_LENGTH                             0x1
#define _COG1CON1_G1POLB_MASK                               0x2
#define _COG1CON1_G1POLC_POSN                               0x2
#define _COG1CON1_G1POLC_POSITION                           0x2
#define _COG1CON1_G1POLC_SIZE                               0x1
#define _COG1CON1_G1POLC_LENGTH                             0x1
#define _COG1CON1_G1POLC_MASK                               0x4
#define _COG1CON1_G1POLD_POSN                               0x3
#define _COG1CON1_G1POLD_POSITION                           0x3
#define _COG1CON1_G1POLD_SIZE                               0x1
#define _COG1CON1_G1POLD_LENGTH                             0x1
#define _COG1CON1_G1POLD_MASK                               0x8
#define _COG1CON1_G1FDBS_POSN                               0x6
#define _COG1CON1_G1FDBS_POSITION                           0x6
#define _COG1CON1_G1FDBS_SIZE                               0x1
#define _COG1CON1_G1FDBS_LENGTH                             0x1
#define _COG1CON1_G1FDBS_MASK                               0x40
#define _COG1CON1_G1RDBS_POSN                               0x7
#define _COG1CON1_G1RDBS_POSITION                           0x7
#define _COG1CON1_G1RDBS_SIZE                               0x1
#define _COG1CON1_G1RDBS_LENGTH                             0x1
#define _COG1CON1_G1RDBS_MASK                               0x80

// Register: COG1RIS0
#define COG1RIS0 COG1RIS0
extern volatile unsigned char           COG1RIS0            __at(0x695);
#ifndef _LIB_BUILD
asm("COG1RIS0 equ 0695h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RIS0                   :1;
        unsigned RIS1                   :1;
        unsigned RIS2                   :1;
        unsigned RIS3                   :1;
        unsigned RIS4                   :1;
        unsigned RIS5                   :1;
        unsigned RIS6                   :1;
        unsigned RIS7                   :1;
    };
    struct {
        unsigned G1RIS0                 :1;
        unsigned G1RIS1                 :1;
        unsigned G1RIS2                 :1;
        unsigned G1RIS3                 :1;
        unsigned G1RIS4                 :1;
        unsigned G1RIS5                 :1;
        unsigned G1RIS6                 :1;
        unsigned G1RIS7                 :1;
    };
} COG1RIS0bits_t;
extern volatile COG1RIS0bits_t COG1RIS0bits __at(0x695);
// bitfield macros
#define _COG1RIS0_RIS0_POSN                                 0x0
#define _COG1RIS0_RIS0_POSITION                             0x0
#define _COG1RIS0_RIS0_SIZE                                 0x1
#define _COG1RIS0_RIS0_LENGTH                               0x1
#define _COG1RIS0_RIS0_MASK                                 0x1
#define _COG1RIS0_RIS1_POSN                                 0x1
#define _COG1RIS0_RIS1_POSITION                             0x1
#define _COG1RIS0_RIS1_SIZE                                 0x1
#define _COG1RIS0_RIS1_LENGTH                               0x1
#define _COG1RIS0_RIS1_MASK                                 0x2
#define _COG1RIS0_RIS2_POSN                                 0x2
#define _COG1RIS0_RIS2_POSITION                             0x2
#define _COG1RIS0_RIS2_SIZE                                 0x1
#define _COG1RIS0_RIS2_LENGTH                               0x1
#define _COG1RIS0_RIS2_MASK                                 0x4
#define _COG1RIS0_RIS3_POSN                                 0x3
#define _COG1RIS0_RIS3_POSITION                             0x3
#define _COG1RIS0_RIS3_SIZE                                 0x1
#define _COG1RIS0_RIS3_LENGTH                               0x1
#define _COG1RIS0_RIS3_MASK                                 0x8
#define _COG1RIS0_RIS4_POSN                                 0x4
#define _COG1RIS0_RIS4_POSITION                             0x4
#define _COG1RIS0_RIS4_SIZE                                 0x1
#define _COG1RIS0_RIS4_LENGTH                               0x1
#define _COG1RIS0_RIS4_MASK                                 0x10
#define _COG1RIS0_RIS5_POSN                                 0x5
#define _COG1RIS0_RIS5_POSITION                             0x5
#define _COG1RIS0_RIS5_SIZE                                 0x1
#define _COG1RIS0_RIS5_LENGTH                               0x1
#define _COG1RIS0_RIS5_MASK                                 0x20
#define _COG1RIS0_RIS6_POSN                                 0x6
#define _COG1RIS0_RIS6_POSITION                             0x6
#define _COG1RIS0_RIS6_SIZE                                 0x1
#define _COG1RIS0_RIS6_LENGTH                               0x1
#define _COG1RIS0_RIS6_MASK                                 0x40
#define _COG1RIS0_RIS7_POSN                                 0x7
#define _COG1RIS0_RIS7_POSITION                             0x7
#define _COG1RIS0_RIS7_SIZE                                 0x1
#define _COG1RIS0_RIS7_LENGTH                               0x1
#define _COG1RIS0_RIS7_MASK                                 0x80
#define _COG1RIS0_G1RIS0_POSN                               0x0
#define _COG1RIS0_G1RIS0_POSITION                           0x0
#define _COG1RIS0_G1RIS0_SIZE                               0x1
#define _COG1RIS0_G1RIS0_LENGTH                             0x1
#define _COG1RIS0_G1RIS0_MASK                               0x1
#define _COG1RIS0_G1RIS1_POSN                               0x1
#define _COG1RIS0_G1RIS1_POSITION                           0x1
#define _COG1RIS0_G1RIS1_SIZE                               0x1
#define _COG1RIS0_G1RIS1_LENGTH                             0x1
#define _COG1RIS0_G1RIS1_MASK                               0x2
#define _COG1RIS0_G1RIS2_POSN                               0x2
#define _COG1RIS0_G1RIS2_POSITION                           0x2
#define _COG1RIS0_G1RIS2_SIZE                               0x1
#define _COG1RIS0_G1RIS2_LENGTH                             0x1
#define _COG1RIS0_G1RIS2_MASK                               0x4
#define _COG1RIS0_G1RIS3_POSN                               0x3
#define _COG1RIS0_G1RIS3_POSITION                           0x3
#define _COG1RIS0_G1RIS3_SIZE                               0x1
#define _COG1RIS0_G1RIS3_LENGTH                             0x1
#define _COG1RIS0_G1RIS3_MASK                               0x8
#define _COG1RIS0_G1RIS4_POSN                               0x4
#define _COG1RIS0_G1RIS4_POSITION                           0x4
#define _COG1RIS0_G1RIS4_SIZE                               0x1
#define _COG1RIS0_G1RIS4_LENGTH                             0x1
#define _COG1RIS0_G1RIS4_MASK                               0x10
#define _COG1RIS0_G1RIS5_POSN                               0x5
#define _COG1RIS0_G1RIS5_POSITION                           0x5
#define _COG1RIS0_G1RIS5_SIZE                               0x1
#define _COG1RIS0_G1RIS5_LENGTH                             0x1
#define _COG1RIS0_G1RIS5_MASK                               0x20
#define _COG1RIS0_G1RIS6_POSN                               0x6
#define _COG1RIS0_G1RIS6_POSITION                           0x6
#define _COG1RIS0_G1RIS6_SIZE                               0x1
#define _COG1RIS0_G1RIS6_LENGTH                             0x1
#define _COG1RIS0_G1RIS6_MASK                               0x40
#define _COG1RIS0_G1RIS7_POSN                               0x7
#define _COG1RIS0_G1RIS7_POSITION                           0x7
#define _COG1RIS0_G1RIS7_SIZE                               0x1
#define _COG1RIS0_G1RIS7_LENGTH                             0x1
#define _COG1RIS0_G1RIS7_MASK                               0x80

// Register: COG1RIS1
#define COG1RIS1 COG1RIS1
extern volatile unsigned char           COG1RIS1            __at(0x696);
#ifndef _LIB_BUILD
asm("COG1RIS1 equ 0696h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RIS8                   :1;
        unsigned RIS9                   :1;
        unsigned RIS10                  :1;
        unsigned RIS11                  :1;
        unsigned RIS12                  :1;
        unsigned RIS13                  :1;
        unsigned RIS14                  :1;
    };
    struct {
        unsigned G1RIS8                 :1;
        unsigned G1RIS9                 :1;
        unsigned G1RIS10                :1;
        unsigned G1RIS11                :1;
        unsigned G1RIS12                :1;
        unsigned G1RIS13                :1;
        unsigned G1RIS14                :1;
    };
} COG1RIS1bits_t;
extern volatile COG1RIS1bits_t COG1RIS1bits __at(0x696);
// bitfield macros
#define _COG1RIS1_RIS8_POSN                                 0x0
#define _COG1RIS1_RIS8_POSITION                             0x0
#define _COG1RIS1_RIS8_SIZE                                 0x1
#define _COG1RIS1_RIS8_LENGTH                               0x1
#define _COG1RIS1_RIS8_MASK                                 0x1
#define _COG1RIS1_RIS9_POSN                                 0x1
#define _COG1RIS1_RIS9_POSITION                             0x1
#define _COG1RIS1_RIS9_SIZE                                 0x1
#define _COG1RIS1_RIS9_LENGTH                               0x1
#define _COG1RIS1_RIS9_MASK                                 0x2
#define _COG1RIS1_RIS10_POSN                                0x2
#define _COG1RIS1_RIS10_POSITION                            0x2
#define _COG1RIS1_RIS10_SIZE                                0x1
#define _COG1RIS1_RIS10_LENGTH                              0x1
#define _COG1RIS1_RIS10_MASK                                0x4
#define _COG1RIS1_RIS11_POSN                                0x3
#define _COG1RIS1_RIS11_POSITION                            0x3
#define _COG1RIS1_RIS11_SIZE                                0x1
#define _COG1RIS1_RIS11_LENGTH                              0x1
#define _COG1RIS1_RIS11_MASK                                0x8
#define _COG1RIS1_RIS12_POSN                                0x4
#define _COG1RIS1_RIS12_POSITION                            0x4
#define _COG1RIS1_RIS12_SIZE                                0x1
#define _COG1RIS1_RIS12_LENGTH                              0x1
#define _COG1RIS1_RIS12_MASK                                0x10
#define _COG1RIS1_RIS13_POSN                                0x5
#define _COG1RIS1_RIS13_POSITION                            0x5
#define _COG1RIS1_RIS13_SIZE                                0x1
#define _COG1RIS1_RIS13_LENGTH                              0x1
#define _COG1RIS1_RIS13_MASK                                0x20
#define _COG1RIS1_RIS14_POSN                                0x6
#define _COG1RIS1_RIS14_POSITION                            0x6
#define _COG1RIS1_RIS14_SIZE                                0x1
#define _COG1RIS1_RIS14_LENGTH                              0x1
#define _COG1RIS1_RIS14_MASK                                0x40
#define _COG1RIS1_G1RIS8_POSN                               0x0
#define _COG1RIS1_G1RIS8_POSITION                           0x0
#define _COG1RIS1_G1RIS8_SIZE                               0x1
#define _COG1RIS1_G1RIS8_LENGTH                             0x1
#define _COG1RIS1_G1RIS8_MASK                               0x1
#define _COG1RIS1_G1RIS9_POSN                               0x1
#define _COG1RIS1_G1RIS9_POSITION                           0x1
#define _COG1RIS1_G1RIS9_SIZE                               0x1
#define _COG1RIS1_G1RIS9_LENGTH                             0x1
#define _COG1RIS1_G1RIS9_MASK                               0x2
#define _COG1RIS1_G1RIS10_POSN                              0x2
#define _COG1RIS1_G1RIS10_POSITION                          0x2
#define _COG1RIS1_G1RIS10_SIZE                              0x1
#define _COG1RIS1_G1RIS10_LENGTH                            0x1
#define _COG1RIS1_G1RIS10_MASK                              0x4
#define _COG1RIS1_G1RIS11_POSN                              0x3
#define _COG1RIS1_G1RIS11_POSITION                          0x3
#define _COG1RIS1_G1RIS11_SIZE                              0x1
#define _COG1RIS1_G1RIS11_LENGTH                            0x1
#define _COG1RIS1_G1RIS11_MASK                              0x8
#define _COG1RIS1_G1RIS12_POSN                              0x4
#define _COG1RIS1_G1RIS12_POSITION                          0x4
#define _COG1RIS1_G1RIS12_SIZE                              0x1
#define _COG1RIS1_G1RIS12_LENGTH                            0x1
#define _COG1RIS1_G1RIS12_MASK                              0x10
#define _COG1RIS1_G1RIS13_POSN                              0x5
#define _COG1RIS1_G1RIS13_POSITION                          0x5
#define _COG1RIS1_G1RIS13_SIZE                              0x1
#define _COG1RIS1_G1RIS13_LENGTH                            0x1
#define _COG1RIS1_G1RIS13_MASK                              0x20
#define _COG1RIS1_G1RIS14_POSN                              0x6
#define _COG1RIS1_G1RIS14_POSITION                          0x6
#define _COG1RIS1_G1RIS14_SIZE                              0x1
#define _COG1RIS1_G1RIS14_LENGTH                            0x1
#define _COG1RIS1_G1RIS14_MASK                              0x40

// Register: COG1RSIM0
#define COG1RSIM0 COG1RSIM0
extern volatile unsigned char           COG1RSIM0           __at(0x697);
#ifndef _LIB_BUILD
asm("COG1RSIM0 equ 0697h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSIM0                  :1;
        unsigned RSIM1                  :1;
        unsigned RSIM2                  :1;
        unsigned RSIM3                  :1;
        unsigned RSIM4                  :1;
        unsigned RSIM5                  :1;
        unsigned RSIM6                  :1;
        unsigned RSIM7                  :1;
    };
    struct {
        unsigned G1RSIM0                :1;
        unsigned G1RSIM1                :1;
        unsigned G1RSIM2                :1;
        unsigned G1RSIM3                :1;
        unsigned G1RSIM4                :1;
        unsigned G1RSIM5                :1;
        unsigned G1RSIM6                :1;
        unsigned G1RSIM7                :1;
    };
} COG1RSIM0bits_t;
extern volatile COG1RSIM0bits_t COG1RSIM0bits __at(0x697);
// bitfield macros
#define _COG1RSIM0_RSIM0_POSN                               0x0
#define _COG1RSIM0_RSIM0_POSITION                           0x0
#define _COG1RSIM0_RSIM0_SIZE                               0x1
#define _COG1RSIM0_RSIM0_LENGTH                             0x1
#define _COG1RSIM0_RSIM0_MASK                               0x1
#define _COG1RSIM0_RSIM1_POSN                               0x1
#define _COG1RSIM0_RSIM1_POSITION                           0x1
#define _COG1RSIM0_RSIM1_SIZE                               0x1
#define _COG1RSIM0_RSIM1_LENGTH                             0x1
#define _COG1RSIM0_RSIM1_MASK                               0x2
#define _COG1RSIM0_RSIM2_POSN                               0x2
#define _COG1RSIM0_RSIM2_POSITION                           0x2
#define _COG1RSIM0_RSIM2_SIZE                               0x1
#define _COG1RSIM0_RSIM2_LENGTH                             0x1
#define _COG1RSIM0_RSIM2_MASK                               0x4
#define _COG1RSIM0_RSIM3_POSN                               0x3
#define _COG1RSIM0_RSIM3_POSITION                           0x3
#define _COG1RSIM0_RSIM3_SIZE                               0x1
#define _COG1RSIM0_RSIM3_LENGTH                             0x1
#define _COG1RSIM0_RSIM3_MASK                               0x8
#define _COG1RSIM0_RSIM4_POSN                               0x4
#define _COG1RSIM0_RSIM4_POSITION                           0x4
#define _COG1RSIM0_RSIM4_SIZE                               0x1
#define _COG1RSIM0_RSIM4_LENGTH                             0x1
#define _COG1RSIM0_RSIM4_MASK                               0x10
#define _COG1RSIM0_RSIM5_POSN                               0x5
#define _COG1RSIM0_RSIM5_POSITION                           0x5
#define _COG1RSIM0_RSIM5_SIZE                               0x1
#define _COG1RSIM0_RSIM5_LENGTH                             0x1
#define _COG1RSIM0_RSIM5_MASK                               0x20
#define _COG1RSIM0_RSIM6_POSN                               0x6
#define _COG1RSIM0_RSIM6_POSITION                           0x6
#define _COG1RSIM0_RSIM6_SIZE                               0x1
#define _COG1RSIM0_RSIM6_LENGTH                             0x1
#define _COG1RSIM0_RSIM6_MASK                               0x40
#define _COG1RSIM0_RSIM7_POSN                               0x7
#define _COG1RSIM0_RSIM7_POSITION                           0x7
#define _COG1RSIM0_RSIM7_SIZE                               0x1
#define _COG1RSIM0_RSIM7_LENGTH                             0x1
#define _COG1RSIM0_RSIM7_MASK                               0x80
#define _COG1RSIM0_G1RSIM0_POSN                             0x0
#define _COG1RSIM0_G1RSIM0_POSITION                         0x0
#define _COG1RSIM0_G1RSIM0_SIZE                             0x1
#define _COG1RSIM0_G1RSIM0_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM0_MASK                             0x1
#define _COG1RSIM0_G1RSIM1_POSN                             0x1
#define _COG1RSIM0_G1RSIM1_POSITION                         0x1
#define _COG1RSIM0_G1RSIM1_SIZE                             0x1
#define _COG1RSIM0_G1RSIM1_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM1_MASK                             0x2
#define _COG1RSIM0_G1RSIM2_POSN                             0x2
#define _COG1RSIM0_G1RSIM2_POSITION                         0x2
#define _COG1RSIM0_G1RSIM2_SIZE                             0x1
#define _COG1RSIM0_G1RSIM2_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM2_MASK                             0x4
#define _COG1RSIM0_G1RSIM3_POSN                             0x3
#define _COG1RSIM0_G1RSIM3_POSITION                         0x3
#define _COG1RSIM0_G1RSIM3_SIZE                             0x1
#define _COG1RSIM0_G1RSIM3_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM3_MASK                             0x8
#define _COG1RSIM0_G1RSIM4_POSN                             0x4
#define _COG1RSIM0_G1RSIM4_POSITION                         0x4
#define _COG1RSIM0_G1RSIM4_SIZE                             0x1
#define _COG1RSIM0_G1RSIM4_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM4_MASK                             0x10
#define _COG1RSIM0_G1RSIM5_POSN                             0x5
#define _COG1RSIM0_G1RSIM5_POSITION                         0x5
#define _COG1RSIM0_G1RSIM5_SIZE                             0x1
#define _COG1RSIM0_G1RSIM5_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM5_MASK                             0x20
#define _COG1RSIM0_G1RSIM6_POSN                             0x6
#define _COG1RSIM0_G1RSIM6_POSITION                         0x6
#define _COG1RSIM0_G1RSIM6_SIZE                             0x1
#define _COG1RSIM0_G1RSIM6_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM6_MASK                             0x40
#define _COG1RSIM0_G1RSIM7_POSN                             0x7
#define _COG1RSIM0_G1RSIM7_POSITION                         0x7
#define _COG1RSIM0_G1RSIM7_SIZE                             0x1
#define _COG1RSIM0_G1RSIM7_LENGTH                           0x1
#define _COG1RSIM0_G1RSIM7_MASK                             0x80

// Register: COG1RSIM1
#define COG1RSIM1 COG1RSIM1
extern volatile unsigned char           COG1RSIM1           __at(0x698);
#ifndef _LIB_BUILD
asm("COG1RSIM1 equ 0698h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSIM8                  :1;
        unsigned RSIM9                  :1;
        unsigned RSIM10                 :1;
        unsigned RSIM11                 :1;
        unsigned RSIM12                 :1;
        unsigned RSIM13                 :1;
        unsigned RSIM14                 :1;
    };
    struct {
        unsigned G1RSIM8                :1;
        unsigned G1RSIM9                :1;
        unsigned G1RSIM10               :1;
        unsigned G1RSIM11               :1;
        unsigned G1RSIM12               :1;
        unsigned G1RSIM13               :1;
        unsigned G1RSIM14               :1;
    };
} COG1RSIM1bits_t;
extern volatile COG1RSIM1bits_t COG1RSIM1bits __at(0x698);
// bitfield macros
#define _COG1RSIM1_RSIM8_POSN                               0x0
#define _COG1RSIM1_RSIM8_POSITION                           0x0
#define _COG1RSIM1_RSIM8_SIZE                               0x1
#define _COG1RSIM1_RSIM8_LENGTH                             0x1
#define _COG1RSIM1_RSIM8_MASK                               0x1
#define _COG1RSIM1_RSIM9_POSN                               0x1
#define _COG1RSIM1_RSIM9_POSITION                           0x1
#define _COG1RSIM1_RSIM9_SIZE                               0x1
#define _COG1RSIM1_RSIM9_LENGTH                             0x1
#define _COG1RSIM1_RSIM9_MASK                               0x2
#define _COG1RSIM1_RSIM10_POSN                              0x2
#define _COG1RSIM1_RSIM10_POSITION                          0x2
#define _COG1RSIM1_RSIM10_SIZE                              0x1
#define _COG1RSIM1_RSIM10_LENGTH                            0x1
#define _COG1RSIM1_RSIM10_MASK                              0x4
#define _COG1RSIM1_RSIM11_POSN                              0x3
#define _COG1RSIM1_RSIM11_POSITION                          0x3
#define _COG1RSIM1_RSIM11_SIZE                              0x1
#define _COG1RSIM1_RSIM11_LENGTH                            0x1
#define _COG1RSIM1_RSIM11_MASK                              0x8
#define _COG1RSIM1_RSIM12_POSN                              0x4
#define _COG1RSIM1_RSIM12_POSITION                          0x4
#define _COG1RSIM1_RSIM12_SIZE                              0x1
#define _COG1RSIM1_RSIM12_LENGTH                            0x1
#define _COG1RSIM1_RSIM12_MASK                              0x10
#define _COG1RSIM1_RSIM13_POSN                              0x5
#define _COG1RSIM1_RSIM13_POSITION                          0x5
#define _COG1RSIM1_RSIM13_SIZE                              0x1
#define _COG1RSIM1_RSIM13_LENGTH                            0x1
#define _COG1RSIM1_RSIM13_MASK                              0x20
#define _COG1RSIM1_RSIM14_POSN                              0x6
#define _COG1RSIM1_RSIM14_POSITION                          0x6
#define _COG1RSIM1_RSIM14_SIZE                              0x1
#define _COG1RSIM1_RSIM14_LENGTH                            0x1
#define _COG1RSIM1_RSIM14_MASK                              0x40
#define _COG1RSIM1_G1RSIM8_POSN                             0x0
#define _COG1RSIM1_G1RSIM8_POSITION                         0x0
#define _COG1RSIM1_G1RSIM8_SIZE                             0x1
#define _COG1RSIM1_G1RSIM8_LENGTH                           0x1
#define _COG1RSIM1_G1RSIM8_MASK                             0x1
#define _COG1RSIM1_G1RSIM9_POSN                             0x1
#define _COG1RSIM1_G1RSIM9_POSITION                         0x1
#define _COG1RSIM1_G1RSIM9_SIZE                             0x1
#define _COG1RSIM1_G1RSIM9_LENGTH                           0x1
#define _COG1RSIM1_G1RSIM9_MASK                             0x2
#define _COG1RSIM1_G1RSIM10_POSN                            0x2
#define _COG1RSIM1_G1RSIM10_POSITION                        0x2
#define _COG1RSIM1_G1RSIM10_SIZE                            0x1
#define _COG1RSIM1_G1RSIM10_LENGTH                          0x1
#define _COG1RSIM1_G1RSIM10_MASK                            0x4
#define _COG1RSIM1_G1RSIM11_POSN                            0x3
#define _COG1RSIM1_G1RSIM11_POSITION                        0x3
#define _COG1RSIM1_G1RSIM11_SIZE                            0x1
#define _COG1RSIM1_G1RSIM11_LENGTH                          0x1
#define _COG1RSIM1_G1RSIM11_MASK                            0x8
#define _COG1RSIM1_G1RSIM12_POSN                            0x4
#define _COG1RSIM1_G1RSIM12_POSITION                        0x4
#define _COG1RSIM1_G1RSIM12_SIZE                            0x1
#define _COG1RSIM1_G1RSIM12_LENGTH                          0x1
#define _COG1RSIM1_G1RSIM12_MASK                            0x10
#define _COG1RSIM1_G1RSIM13_POSN                            0x5
#define _COG1RSIM1_G1RSIM13_POSITION                        0x5
#define _COG1RSIM1_G1RSIM13_SIZE                            0x1
#define _COG1RSIM1_G1RSIM13_LENGTH                          0x1
#define _COG1RSIM1_G1RSIM13_MASK                            0x20
#define _COG1RSIM1_G1RSIM14_POSN                            0x6
#define _COG1RSIM1_G1RSIM14_POSITION                        0x6
#define _COG1RSIM1_G1RSIM14_SIZE                            0x1
#define _COG1RSIM1_G1RSIM14_LENGTH                          0x1
#define _COG1RSIM1_G1RSIM14_MASK                            0x40

// Register: COG1FIS0
#define COG1FIS0 COG1FIS0
extern volatile unsigned char           COG1FIS0            __at(0x699);
#ifndef _LIB_BUILD
asm("COG1FIS0 equ 0699h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FIS0                   :1;
        unsigned FIS1                   :1;
        unsigned FIS2                   :1;
        unsigned FIS3                   :1;
        unsigned FIS4                   :1;
        unsigned FIS5                   :1;
        unsigned FIS6                   :1;
        unsigned FIS7                   :1;
    };
    struct {
        unsigned G1FIS0                 :1;
        unsigned G1FIS1                 :1;
        unsigned G1FIS2                 :1;
        unsigned G1FIS3                 :1;
        unsigned G1FIS4                 :1;
        unsigned G1FIS5                 :1;
        unsigned G1FIS6                 :1;
        unsigned G1FIS7                 :1;
    };
} COG1FIS0bits_t;
extern volatile COG1FIS0bits_t COG1FIS0bits __at(0x699);
// bitfield macros
#define _COG1FIS0_FIS0_POSN                                 0x0
#define _COG1FIS0_FIS0_POSITION                             0x0
#define _COG1FIS0_FIS0_SIZE                                 0x1
#define _COG1FIS0_FIS0_LENGTH                               0x1
#define _COG1FIS0_FIS0_MASK                                 0x1
#define _COG1FIS0_FIS1_POSN                                 0x1
#define _COG1FIS0_FIS1_POSITION                             0x1
#define _COG1FIS0_FIS1_SIZE                                 0x1
#define _COG1FIS0_FIS1_LENGTH                               0x1
#define _COG1FIS0_FIS1_MASK                                 0x2
#define _COG1FIS0_FIS2_POSN                                 0x2
#define _COG1FIS0_FIS2_POSITION                             0x2
#define _COG1FIS0_FIS2_SIZE                                 0x1
#define _COG1FIS0_FIS2_LENGTH                               0x1
#define _COG1FIS0_FIS2_MASK                                 0x4
#define _COG1FIS0_FIS3_POSN                                 0x3
#define _COG1FIS0_FIS3_POSITION                             0x3
#define _COG1FIS0_FIS3_SIZE                                 0x1
#define _COG1FIS0_FIS3_LENGTH                               0x1
#define _COG1FIS0_FIS3_MASK                                 0x8
#define _COG1FIS0_FIS4_POSN                                 0x4
#define _COG1FIS0_FIS4_POSITION                             0x4
#define _COG1FIS0_FIS4_SIZE                                 0x1
#define _COG1FIS0_FIS4_LENGTH                               0x1
#define _COG1FIS0_FIS4_MASK                                 0x10
#define _COG1FIS0_FIS5_POSN                                 0x5
#define _COG1FIS0_FIS5_POSITION                             0x5
#define _COG1FIS0_FIS5_SIZE                                 0x1
#define _COG1FIS0_FIS5_LENGTH                               0x1
#define _COG1FIS0_FIS5_MASK                                 0x20
#define _COG1FIS0_FIS6_POSN                                 0x6
#define _COG1FIS0_FIS6_POSITION                             0x6
#define _COG1FIS0_FIS6_SIZE                                 0x1
#define _COG1FIS0_FIS6_LENGTH                               0x1
#define _COG1FIS0_FIS6_MASK                                 0x40
#define _COG1FIS0_FIS7_POSN                                 0x7
#define _COG1FIS0_FIS7_POSITION                             0x7
#define _COG1FIS0_FIS7_SIZE                                 0x1
#define _COG1FIS0_FIS7_LENGTH                               0x1
#define _COG1FIS0_FIS7_MASK                                 0x80
#define _COG1FIS0_G1FIS0_POSN                               0x0
#define _COG1FIS0_G1FIS0_POSITION                           0x0
#define _COG1FIS0_G1FIS0_SIZE                               0x1
#define _COG1FIS0_G1FIS0_LENGTH                             0x1
#define _COG1FIS0_G1FIS0_MASK                               0x1
#define _COG1FIS0_G1FIS1_POSN                               0x1
#define _COG1FIS0_G1FIS1_POSITION                           0x1
#define _COG1FIS0_G1FIS1_SIZE                               0x1
#define _COG1FIS0_G1FIS1_LENGTH                             0x1
#define _COG1FIS0_G1FIS1_MASK                               0x2
#define _COG1FIS0_G1FIS2_POSN                               0x2
#define _COG1FIS0_G1FIS2_POSITION                           0x2
#define _COG1FIS0_G1FIS2_SIZE                               0x1
#define _COG1FIS0_G1FIS2_LENGTH                             0x1
#define _COG1FIS0_G1FIS2_MASK                               0x4
#define _COG1FIS0_G1FIS3_POSN                               0x3
#define _COG1FIS0_G1FIS3_POSITION                           0x3
#define _COG1FIS0_G1FIS3_SIZE                               0x1
#define _COG1FIS0_G1FIS3_LENGTH                             0x1
#define _COG1FIS0_G1FIS3_MASK                               0x8
#define _COG1FIS0_G1FIS4_POSN                               0x4
#define _COG1FIS0_G1FIS4_POSITION                           0x4
#define _COG1FIS0_G1FIS4_SIZE                               0x1
#define _COG1FIS0_G1FIS4_LENGTH                             0x1
#define _COG1FIS0_G1FIS4_MASK                               0x10
#define _COG1FIS0_G1FIS5_POSN                               0x5
#define _COG1FIS0_G1FIS5_POSITION                           0x5
#define _COG1FIS0_G1FIS5_SIZE                               0x1
#define _COG1FIS0_G1FIS5_LENGTH                             0x1
#define _COG1FIS0_G1FIS5_MASK                               0x20
#define _COG1FIS0_G1FIS6_POSN                               0x6
#define _COG1FIS0_G1FIS6_POSITION                           0x6
#define _COG1FIS0_G1FIS6_SIZE                               0x1
#define _COG1FIS0_G1FIS6_LENGTH                             0x1
#define _COG1FIS0_G1FIS6_MASK                               0x40
#define _COG1FIS0_G1FIS7_POSN                               0x7
#define _COG1FIS0_G1FIS7_POSITION                           0x7
#define _COG1FIS0_G1FIS7_SIZE                               0x1
#define _COG1FIS0_G1FIS7_LENGTH                             0x1
#define _COG1FIS0_G1FIS7_MASK                               0x80

// Register: COG1FIS1
#define COG1FIS1 COG1FIS1
extern volatile unsigned char           COG1FIS1            __at(0x69A);
#ifndef _LIB_BUILD
asm("COG1FIS1 equ 069Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FIS8                   :1;
        unsigned FIS9                   :1;
        unsigned FIS10                  :1;
        unsigned FIS11                  :1;
        unsigned FIS12                  :1;
        unsigned FIS13                  :1;
        unsigned FIS14                  :1;
    };
    struct {
        unsigned G1FIS8                 :1;
        unsigned G1FIS9                 :1;
        unsigned G1FIS10                :1;
        unsigned G1FIS11                :1;
        unsigned G1FIS12                :1;
        unsigned G1FIS13                :1;
        unsigned G1FIS14                :1;
    };
} COG1FIS1bits_t;
extern volatile COG1FIS1bits_t COG1FIS1bits __at(0x69A);
// bitfield macros
#define _COG1FIS1_FIS8_POSN                                 0x0
#define _COG1FIS1_FIS8_POSITION                             0x0
#define _COG1FIS1_FIS8_SIZE                                 0x1
#define _COG1FIS1_FIS8_LENGTH                               0x1
#define _COG1FIS1_FIS8_MASK                                 0x1
#define _COG1FIS1_FIS9_POSN                                 0x1
#define _COG1FIS1_FIS9_POSITION                             0x1
#define _COG1FIS1_FIS9_SIZE                                 0x1
#define _COG1FIS1_FIS9_LENGTH                               0x1
#define _COG1FIS1_FIS9_MASK                                 0x2
#define _COG1FIS1_FIS10_POSN                                0x2
#define _COG1FIS1_FIS10_POSITION                            0x2
#define _COG1FIS1_FIS10_SIZE                                0x1
#define _COG1FIS1_FIS10_LENGTH                              0x1
#define _COG1FIS1_FIS10_MASK                                0x4
#define _COG1FIS1_FIS11_POSN                                0x3
#define _COG1FIS1_FIS11_POSITION                            0x3
#define _COG1FIS1_FIS11_SIZE                                0x1
#define _COG1FIS1_FIS11_LENGTH                              0x1
#define _COG1FIS1_FIS11_MASK                                0x8
#define _COG1FIS1_FIS12_POSN                                0x4
#define _COG1FIS1_FIS12_POSITION                            0x4
#define _COG1FIS1_FIS12_SIZE                                0x1
#define _COG1FIS1_FIS12_LENGTH                              0x1
#define _COG1FIS1_FIS12_MASK                                0x10
#define _COG1FIS1_FIS13_POSN                                0x5
#define _COG1FIS1_FIS13_POSITION                            0x5
#define _COG1FIS1_FIS13_SIZE                                0x1
#define _COG1FIS1_FIS13_LENGTH                              0x1
#define _COG1FIS1_FIS13_MASK                                0x20
#define _COG1FIS1_FIS14_POSN                                0x6
#define _COG1FIS1_FIS14_POSITION                            0x6
#define _COG1FIS1_FIS14_SIZE                                0x1
#define _COG1FIS1_FIS14_LENGTH                              0x1
#define _COG1FIS1_FIS14_MASK                                0x40
#define _COG1FIS1_G1FIS8_POSN                               0x0
#define _COG1FIS1_G1FIS8_POSITION                           0x0
#define _COG1FIS1_G1FIS8_SIZE                               0x1
#define _COG1FIS1_G1FIS8_LENGTH                             0x1
#define _COG1FIS1_G1FIS8_MASK                               0x1
#define _COG1FIS1_G1FIS9_POSN                               0x1
#define _COG1FIS1_G1FIS9_POSITION                           0x1
#define _COG1FIS1_G1FIS9_SIZE                               0x1
#define _COG1FIS1_G1FIS9_LENGTH                             0x1
#define _COG1FIS1_G1FIS9_MASK                               0x2
#define _COG1FIS1_G1FIS10_POSN                              0x2
#define _COG1FIS1_G1FIS10_POSITION                          0x2
#define _COG1FIS1_G1FIS10_SIZE                              0x1
#define _COG1FIS1_G1FIS10_LENGTH                            0x1
#define _COG1FIS1_G1FIS10_MASK                              0x4
#define _COG1FIS1_G1FIS11_POSN                              0x3
#define _COG1FIS1_G1FIS11_POSITION                          0x3
#define _COG1FIS1_G1FIS11_SIZE                              0x1
#define _COG1FIS1_G1FIS11_LENGTH                            0x1
#define _COG1FIS1_G1FIS11_MASK                              0x8
#define _COG1FIS1_G1FIS12_POSN                              0x4
#define _COG1FIS1_G1FIS12_POSITION                          0x4
#define _COG1FIS1_G1FIS12_SIZE                              0x1
#define _COG1FIS1_G1FIS12_LENGTH                            0x1
#define _COG1FIS1_G1FIS12_MASK                              0x10
#define _COG1FIS1_G1FIS13_POSN                              0x5
#define _COG1FIS1_G1FIS13_POSITION                          0x5
#define _COG1FIS1_G1FIS13_SIZE                              0x1
#define _COG1FIS1_G1FIS13_LENGTH                            0x1
#define _COG1FIS1_G1FIS13_MASK                              0x20
#define _COG1FIS1_G1FIS14_POSN                              0x6
#define _COG1FIS1_G1FIS14_POSITION                          0x6
#define _COG1FIS1_G1FIS14_SIZE                              0x1
#define _COG1FIS1_G1FIS14_LENGTH                            0x1
#define _COG1FIS1_G1FIS14_MASK                              0x40

// Register: COG1FSIM0
#define COG1FSIM0 COG1FSIM0
extern volatile unsigned char           COG1FSIM0           __at(0x69B);
#ifndef _LIB_BUILD
asm("COG1FSIM0 equ 069Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSIM0                  :1;
        unsigned FSIM1                  :1;
        unsigned FSIM2                  :1;
        unsigned FSIM3                  :1;
        unsigned FSIM4                  :1;
        unsigned FSIM5                  :1;
        unsigned FSIM6                  :1;
        unsigned FSIM7                  :1;
    };
    struct {
        unsigned G1FSIM0                :1;
        unsigned G1FSIM1                :1;
        unsigned G1FSIM2                :1;
        unsigned G1FSIM3                :1;
        unsigned G1FSIM4                :1;
        unsigned G1FSIM5                :1;
        unsigned G1FSIM6                :1;
        unsigned G1FSIM7                :1;
    };
} COG1FSIM0bits_t;
extern volatile COG1FSIM0bits_t COG1FSIM0bits __at(0x69B);
// bitfield macros
#define _COG1FSIM0_FSIM0_POSN                               0x0
#define _COG1FSIM0_FSIM0_POSITION                           0x0
#define _COG1FSIM0_FSIM0_SIZE                               0x1
#define _COG1FSIM0_FSIM0_LENGTH                             0x1
#define _COG1FSIM0_FSIM0_MASK                               0x1
#define _COG1FSIM0_FSIM1_POSN                               0x1
#define _COG1FSIM0_FSIM1_POSITION                           0x1
#define _COG1FSIM0_FSIM1_SIZE                               0x1
#define _COG1FSIM0_FSIM1_LENGTH                             0x1
#define _COG1FSIM0_FSIM1_MASK                               0x2
#define _COG1FSIM0_FSIM2_POSN                               0x2
#define _COG1FSIM0_FSIM2_POSITION                           0x2
#define _COG1FSIM0_FSIM2_SIZE                               0x1
#define _COG1FSIM0_FSIM2_LENGTH                             0x1
#define _COG1FSIM0_FSIM2_MASK                               0x4
#define _COG1FSIM0_FSIM3_POSN                               0x3
#define _COG1FSIM0_FSIM3_POSITION                           0x3
#define _COG1FSIM0_FSIM3_SIZE                               0x1
#define _COG1FSIM0_FSIM3_LENGTH                             0x1
#define _COG1FSIM0_FSIM3_MASK                               0x8
#define _COG1FSIM0_FSIM4_POSN                               0x4
#define _COG1FSIM0_FSIM4_POSITION                           0x4
#define _COG1FSIM0_FSIM4_SIZE                               0x1
#define _COG1FSIM0_FSIM4_LENGTH                             0x1
#define _COG1FSIM0_FSIM4_MASK                               0x10
#define _COG1FSIM0_FSIM5_POSN                               0x5
#define _COG1FSIM0_FSIM5_POSITION                           0x5
#define _COG1FSIM0_FSIM5_SIZE                               0x1
#define _COG1FSIM0_FSIM5_LENGTH                             0x1
#define _COG1FSIM0_FSIM5_MASK                               0x20
#define _COG1FSIM0_FSIM6_POSN                               0x6
#define _COG1FSIM0_FSIM6_POSITION                           0x6
#define _COG1FSIM0_FSIM6_SIZE                               0x1
#define _COG1FSIM0_FSIM6_LENGTH                             0x1
#define _COG1FSIM0_FSIM6_MASK                               0x40
#define _COG1FSIM0_FSIM7_POSN                               0x7
#define _COG1FSIM0_FSIM7_POSITION                           0x7
#define _COG1FSIM0_FSIM7_SIZE                               0x1
#define _COG1FSIM0_FSIM7_LENGTH                             0x1
#define _COG1FSIM0_FSIM7_MASK                               0x80
#define _COG1FSIM0_G1FSIM0_POSN                             0x0
#define _COG1FSIM0_G1FSIM0_POSITION                         0x0
#define _COG1FSIM0_G1FSIM0_SIZE                             0x1
#define _COG1FSIM0_G1FSIM0_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM0_MASK                             0x1
#define _COG1FSIM0_G1FSIM1_POSN                             0x1
#define _COG1FSIM0_G1FSIM1_POSITION                         0x1
#define _COG1FSIM0_G1FSIM1_SIZE                             0x1
#define _COG1FSIM0_G1FSIM1_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM1_MASK                             0x2
#define _COG1FSIM0_G1FSIM2_POSN                             0x2
#define _COG1FSIM0_G1FSIM2_POSITION                         0x2
#define _COG1FSIM0_G1FSIM2_SIZE                             0x1
#define _COG1FSIM0_G1FSIM2_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM2_MASK                             0x4
#define _COG1FSIM0_G1FSIM3_POSN                             0x3
#define _COG1FSIM0_G1FSIM3_POSITION                         0x3
#define _COG1FSIM0_G1FSIM3_SIZE                             0x1
#define _COG1FSIM0_G1FSIM3_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM3_MASK                             0x8
#define _COG1FSIM0_G1FSIM4_POSN                             0x4
#define _COG1FSIM0_G1FSIM4_POSITION                         0x4
#define _COG1FSIM0_G1FSIM4_SIZE                             0x1
#define _COG1FSIM0_G1FSIM4_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM4_MASK                             0x10
#define _COG1FSIM0_G1FSIM5_POSN                             0x5
#define _COG1FSIM0_G1FSIM5_POSITION                         0x5
#define _COG1FSIM0_G1FSIM5_SIZE                             0x1
#define _COG1FSIM0_G1FSIM5_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM5_MASK                             0x20
#define _COG1FSIM0_G1FSIM6_POSN                             0x6
#define _COG1FSIM0_G1FSIM6_POSITION                         0x6
#define _COG1FSIM0_G1FSIM6_SIZE                             0x1
#define _COG1FSIM0_G1FSIM6_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM6_MASK                             0x40
#define _COG1FSIM0_G1FSIM7_POSN                             0x7
#define _COG1FSIM0_G1FSIM7_POSITION                         0x7
#define _COG1FSIM0_G1FSIM7_SIZE                             0x1
#define _COG1FSIM0_G1FSIM7_LENGTH                           0x1
#define _COG1FSIM0_G1FSIM7_MASK                             0x80

// Register: COG1FSIM1
#define COG1FSIM1 COG1FSIM1
extern volatile unsigned char           COG1FSIM1           __at(0x69C);
#ifndef _LIB_BUILD
asm("COG1FSIM1 equ 069Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSIM8                  :1;
        unsigned FSIM9                  :1;
        unsigned FSIM10                 :1;
        unsigned FSIM11                 :1;
        unsigned FSIM12                 :1;
        unsigned FSIM13                 :1;
        unsigned FSIM14                 :1;
    };
    struct {
        unsigned G1FSIM8                :1;
        unsigned G1FSIM9                :1;
        unsigned G1FSIM10               :1;
        unsigned G1FSIM11               :1;
        unsigned G1FSIM12               :1;
        unsigned G1FSIM13               :1;
        unsigned G1FSIM14               :1;
    };
} COG1FSIM1bits_t;
extern volatile COG1FSIM1bits_t COG1FSIM1bits __at(0x69C);
// bitfield macros
#define _COG1FSIM1_FSIM8_POSN                               0x0
#define _COG1FSIM1_FSIM8_POSITION                           0x0
#define _COG1FSIM1_FSIM8_SIZE                               0x1
#define _COG1FSIM1_FSIM8_LENGTH                             0x1
#define _COG1FSIM1_FSIM8_MASK                               0x1
#define _COG1FSIM1_FSIM9_POSN                               0x1
#define _COG1FSIM1_FSIM9_POSITION                           0x1
#define _COG1FSIM1_FSIM9_SIZE                               0x1
#define _COG1FSIM1_FSIM9_LENGTH                             0x1
#define _COG1FSIM1_FSIM9_MASK                               0x2
#define _COG1FSIM1_FSIM10_POSN                              0x2
#define _COG1FSIM1_FSIM10_POSITION                          0x2
#define _COG1FSIM1_FSIM10_SIZE                              0x1
#define _COG1FSIM1_FSIM10_LENGTH                            0x1
#define _COG1FSIM1_FSIM10_MASK                              0x4
#define _COG1FSIM1_FSIM11_POSN                              0x3
#define _COG1FSIM1_FSIM11_POSITION                          0x3
#define _COG1FSIM1_FSIM11_SIZE                              0x1
#define _COG1FSIM1_FSIM11_LENGTH                            0x1
#define _COG1FSIM1_FSIM11_MASK                              0x8
#define _COG1FSIM1_FSIM12_POSN                              0x4
#define _COG1FSIM1_FSIM12_POSITION                          0x4
#define _COG1FSIM1_FSIM12_SIZE                              0x1
#define _COG1FSIM1_FSIM12_LENGTH                            0x1
#define _COG1FSIM1_FSIM12_MASK                              0x10
#define _COG1FSIM1_FSIM13_POSN                              0x5
#define _COG1FSIM1_FSIM13_POSITION                          0x5
#define _COG1FSIM1_FSIM13_SIZE                              0x1
#define _COG1FSIM1_FSIM13_LENGTH                            0x1
#define _COG1FSIM1_FSIM13_MASK                              0x20
#define _COG1FSIM1_FSIM14_POSN                              0x6
#define _COG1FSIM1_FSIM14_POSITION                          0x6
#define _COG1FSIM1_FSIM14_SIZE                              0x1
#define _COG1FSIM1_FSIM14_LENGTH                            0x1
#define _COG1FSIM1_FSIM14_MASK                              0x40
#define _COG1FSIM1_G1FSIM8_POSN                             0x0
#define _COG1FSIM1_G1FSIM8_POSITION                         0x0
#define _COG1FSIM1_G1FSIM8_SIZE                             0x1
#define _COG1FSIM1_G1FSIM8_LENGTH                           0x1
#define _COG1FSIM1_G1FSIM8_MASK                             0x1
#define _COG1FSIM1_G1FSIM9_POSN                             0x1
#define _COG1FSIM1_G1FSIM9_POSITION                         0x1
#define _COG1FSIM1_G1FSIM9_SIZE                             0x1
#define _COG1FSIM1_G1FSIM9_LENGTH                           0x1
#define _COG1FSIM1_G1FSIM9_MASK                             0x2
#define _COG1FSIM1_G1FSIM10_POSN                            0x2
#define _COG1FSIM1_G1FSIM10_POSITION                        0x2
#define _COG1FSIM1_G1FSIM10_SIZE                            0x1
#define _COG1FSIM1_G1FSIM10_LENGTH                          0x1
#define _COG1FSIM1_G1FSIM10_MASK                            0x4
#define _COG1FSIM1_G1FSIM11_POSN                            0x3
#define _COG1FSIM1_G1FSIM11_POSITION                        0x3
#define _COG1FSIM1_G1FSIM11_SIZE                            0x1
#define _COG1FSIM1_G1FSIM11_LENGTH                          0x1
#define _COG1FSIM1_G1FSIM11_MASK                            0x8
#define _COG1FSIM1_G1FSIM12_POSN                            0x4
#define _COG1FSIM1_G1FSIM12_POSITION                        0x4
#define _COG1FSIM1_G1FSIM12_SIZE                            0x1
#define _COG1FSIM1_G1FSIM12_LENGTH                          0x1
#define _COG1FSIM1_G1FSIM12_MASK                            0x10
#define _COG1FSIM1_G1FSIM13_POSN                            0x5
#define _COG1FSIM1_G1FSIM13_POSITION                        0x5
#define _COG1FSIM1_G1FSIM13_SIZE                            0x1
#define _COG1FSIM1_G1FSIM13_LENGTH                          0x1
#define _COG1FSIM1_G1FSIM13_MASK                            0x20
#define _COG1FSIM1_G1FSIM14_POSN                            0x6
#define _COG1FSIM1_G1FSIM14_POSITION                        0x6
#define _COG1FSIM1_G1FSIM14_SIZE                            0x1
#define _COG1FSIM1_G1FSIM14_LENGTH                          0x1
#define _COG1FSIM1_G1FSIM14_MASK                            0x40

// Register: COG1ASD0
#define COG1ASD0 COG1ASD0
extern volatile unsigned char           COG1ASD0            __at(0x69D);
#ifndef _LIB_BUILD
asm("COG1ASD0 equ 069Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ASDAC                  :2;
        unsigned ASDBD                  :2;
        unsigned ASREN                  :1;
        unsigned ASE                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned ASDAC0                 :1;
        unsigned ASDAC1                 :1;
        unsigned ASDBD0                 :1;
        unsigned ASDBD1                 :1;
        unsigned ARSEN                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned G1ASDAC                :2;
        unsigned G1ASDBD                :2;
        unsigned G1ARSEN                :1;
        unsigned G1ASE                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned G1ASDAC0               :1;
        unsigned G1ASDAC1               :1;
        unsigned G1ASDBD0               :1;
        unsigned G1ASDBD1               :1;
        unsigned G1ASREN                :1;
    };
} COG1ASD0bits_t;
extern volatile COG1ASD0bits_t COG1ASD0bits __at(0x69D);
// bitfield macros
#define _COG1ASD0_ASDAC_POSN                                0x2
#define _COG1ASD0_ASDAC_POSITION                            0x2
#define _COG1ASD0_ASDAC_SIZE                                0x2
#define _COG1ASD0_ASDAC_LENGTH                              0x2
#define _COG1ASD0_ASDAC_MASK                                0xC
#define _COG1ASD0_ASDBD_POSN                                0x4
#define _COG1ASD0_ASDBD_POSITION                            0x4
#define _COG1ASD0_ASDBD_SIZE                                0x2
#define _COG1ASD0_ASDBD_LENGTH                              0x2
#define _COG1ASD0_ASDBD_MASK                                0x30
#define _COG1ASD0_ASREN_POSN                                0x6
#define _COG1ASD0_ASREN_POSITION                            0x6
#define _COG1ASD0_ASREN_SIZE                                0x1
#define _COG1ASD0_ASREN_LENGTH                              0x1
#define _COG1ASD0_ASREN_MASK                                0x40
#define _COG1ASD0_ASE_POSN                                  0x7
#define _COG1ASD0_ASE_POSITION                              0x7
#define _COG1ASD0_ASE_SIZE                                  0x1
#define _COG1ASD0_ASE_LENGTH                                0x1
#define _COG1ASD0_ASE_MASK                                  0x80
#define _COG1ASD0_ASDAC0_POSN                               0x2
#define _COG1ASD0_ASDAC0_POSITION                           0x2
#define _COG1ASD0_ASDAC0_SIZE                               0x1
#define _COG1ASD0_ASDAC0_LENGTH                             0x1
#define _COG1ASD0_ASDAC0_MASK                               0x4
#define _COG1ASD0_ASDAC1_POSN                               0x3
#define _COG1ASD0_ASDAC1_POSITION                           0x3
#define _COG1ASD0_ASDAC1_SIZE                               0x1
#define _COG1ASD0_ASDAC1_LENGTH                             0x1
#define _COG1ASD0_ASDAC1_MASK                               0x8
#define _COG1ASD0_ASDBD0_POSN                               0x4
#define _COG1ASD0_ASDBD0_POSITION                           0x4
#define _COG1ASD0_ASDBD0_SIZE                               0x1
#define _COG1ASD0_ASDBD0_LENGTH                             0x1
#define _COG1ASD0_ASDBD0_MASK                               0x10
#define _COG1ASD0_ASDBD1_POSN                               0x5
#define _COG1ASD0_ASDBD1_POSITION                           0x5
#define _COG1ASD0_ASDBD1_SIZE                               0x1
#define _COG1ASD0_ASDBD1_LENGTH                             0x1
#define _COG1ASD0_ASDBD1_MASK                               0x20
#define _COG1ASD0_ARSEN_POSN                                0x6
#define _COG1ASD0_ARSEN_POSITION                            0x6
#define _COG1ASD0_ARSEN_SIZE                                0x1
#define _COG1ASD0_ARSEN_LENGTH                              0x1
#define _COG1ASD0_ARSEN_MASK                                0x40
#define _COG1ASD0_G1ASDAC_POSN                              0x2
#define _COG1ASD0_G1ASDAC_POSITION                          0x2
#define _COG1ASD0_G1ASDAC_SIZE                              0x2
#define _COG1ASD0_G1ASDAC_LENGTH                            0x2
#define _COG1ASD0_G1ASDAC_MASK                              0xC
#define _COG1ASD0_G1ASDBD_POSN                              0x4
#define _COG1ASD0_G1ASDBD_POSITION                          0x4
#define _COG1ASD0_G1ASDBD_SIZE                              0x2
#define _COG1ASD0_G1ASDBD_LENGTH                            0x2
#define _COG1ASD0_G1ASDBD_MASK                              0x30
#define _COG1ASD0_G1ARSEN_POSN                              0x6
#define _COG1ASD0_G1ARSEN_POSITION                          0x6
#define _COG1ASD0_G1ARSEN_SIZE                              0x1
#define _COG1ASD0_G1ARSEN_LENGTH                            0x1
#define _COG1ASD0_G1ARSEN_MASK                              0x40
#define _COG1ASD0_G1ASE_POSN                                0x7
#define _COG1ASD0_G1ASE_POSITION                            0x7
#define _COG1ASD0_G1ASE_SIZE                                0x1
#define _COG1ASD0_G1ASE_LENGTH                              0x1
#define _COG1ASD0_G1ASE_MASK                                0x80
#define _COG1ASD0_G1ASDAC0_POSN                             0x2
#define _COG1ASD0_G1ASDAC0_POSITION                         0x2
#define _COG1ASD0_G1ASDAC0_SIZE                             0x1
#define _COG1ASD0_G1ASDAC0_LENGTH                           0x1
#define _COG1ASD0_G1ASDAC0_MASK                             0x4
#define _COG1ASD0_G1ASDAC1_POSN                             0x3
#define _COG1ASD0_G1ASDAC1_POSITION                         0x3
#define _COG1ASD0_G1ASDAC1_SIZE                             0x1
#define _COG1ASD0_G1ASDAC1_LENGTH                           0x1
#define _COG1ASD0_G1ASDAC1_MASK                             0x8
#define _COG1ASD0_G1ASDBD0_POSN                             0x4
#define _COG1ASD0_G1ASDBD0_POSITION                         0x4
#define _COG1ASD0_G1ASDBD0_SIZE                             0x1
#define _COG1ASD0_G1ASDBD0_LENGTH                           0x1
#define _COG1ASD0_G1ASDBD0_MASK                             0x10
#define _COG1ASD0_G1ASDBD1_POSN                             0x5
#define _COG1ASD0_G1ASDBD1_POSITION                         0x5
#define _COG1ASD0_G1ASDBD1_SIZE                             0x1
#define _COG1ASD0_G1ASDBD1_LENGTH                           0x1
#define _COG1ASD0_G1ASDBD1_MASK                             0x20
#define _COG1ASD0_G1ASREN_POSN                              0x6
#define _COG1ASD0_G1ASREN_POSITION                          0x6
#define _COG1ASD0_G1ASREN_SIZE                              0x1
#define _COG1ASD0_G1ASREN_LENGTH                            0x1
#define _COG1ASD0_G1ASREN_MASK                              0x40

// Register: COG1ASD1
#define COG1ASD1 COG1ASD1
extern volatile unsigned char           COG1ASD1            __at(0x69E);
#ifndef _LIB_BUILD
asm("COG1ASD1 equ 069Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
        unsigned AS7E                   :1;
    };
    struct {
        unsigned G1AS0E                 :1;
        unsigned G1AS1E                 :1;
        unsigned G1AS2E                 :1;
        unsigned G1AS3E                 :1;
        unsigned G1AS4E                 :1;
        unsigned G1AS5E                 :1;
        unsigned G1AS6E                 :1;
        unsigned G1AS7E                 :1;
    };
} COG1ASD1bits_t;
extern volatile COG1ASD1bits_t COG1ASD1bits __at(0x69E);
// bitfield macros
#define _COG1ASD1_AS0E_POSN                                 0x0
#define _COG1ASD1_AS0E_POSITION                             0x0
#define _COG1ASD1_AS0E_SIZE                                 0x1
#define _COG1ASD1_AS0E_LENGTH                               0x1
#define _COG1ASD1_AS0E_MASK                                 0x1
#define _COG1ASD1_AS1E_POSN                                 0x1
#define _COG1ASD1_AS1E_POSITION                             0x1
#define _COG1ASD1_AS1E_SIZE                                 0x1
#define _COG1ASD1_AS1E_LENGTH                               0x1
#define _COG1ASD1_AS1E_MASK                                 0x2
#define _COG1ASD1_AS2E_POSN                                 0x2
#define _COG1ASD1_AS2E_POSITION                             0x2
#define _COG1ASD1_AS2E_SIZE                                 0x1
#define _COG1ASD1_AS2E_LENGTH                               0x1
#define _COG1ASD1_AS2E_MASK                                 0x4
#define _COG1ASD1_AS3E_POSN                                 0x3
#define _COG1ASD1_AS3E_POSITION                             0x3
#define _COG1ASD1_AS3E_SIZE                                 0x1
#define _COG1ASD1_AS3E_LENGTH                               0x1
#define _COG1ASD1_AS3E_MASK                                 0x8
#define _COG1ASD1_AS4E_POSN                                 0x4
#define _COG1ASD1_AS4E_POSITION                             0x4
#define _COG1ASD1_AS4E_SIZE                                 0x1
#define _COG1ASD1_AS4E_LENGTH                               0x1
#define _COG1ASD1_AS4E_MASK                                 0x10
#define _COG1ASD1_AS5E_POSN                                 0x5
#define _COG1ASD1_AS5E_POSITION                             0x5
#define _COG1ASD1_AS5E_SIZE                                 0x1
#define _COG1ASD1_AS5E_LENGTH                               0x1
#define _COG1ASD1_AS5E_MASK                                 0x20
#define _COG1ASD1_AS6E_POSN                                 0x6
#define _COG1ASD1_AS6E_POSITION                             0x6
#define _COG1ASD1_AS6E_SIZE                                 0x1
#define _COG1ASD1_AS6E_LENGTH                               0x1
#define _COG1ASD1_AS6E_MASK                                 0x40
#define _COG1ASD1_AS7E_POSN                                 0x7
#define _COG1ASD1_AS7E_POSITION                             0x7
#define _COG1ASD1_AS7E_SIZE                                 0x1
#define _COG1ASD1_AS7E_LENGTH                               0x1
#define _COG1ASD1_AS7E_MASK                                 0x80
#define _COG1ASD1_G1AS0E_POSN                               0x0
#define _COG1ASD1_G1AS0E_POSITION                           0x0
#define _COG1ASD1_G1AS0E_SIZE                               0x1
#define _COG1ASD1_G1AS0E_LENGTH                             0x1
#define _COG1ASD1_G1AS0E_MASK                               0x1
#define _COG1ASD1_G1AS1E_POSN                               0x1
#define _COG1ASD1_G1AS1E_POSITION                           0x1
#define _COG1ASD1_G1AS1E_SIZE                               0x1
#define _COG1ASD1_G1AS1E_LENGTH                             0x1
#define _COG1ASD1_G1AS1E_MASK                               0x2
#define _COG1ASD1_G1AS2E_POSN                               0x2
#define _COG1ASD1_G1AS2E_POSITION                           0x2
#define _COG1ASD1_G1AS2E_SIZE                               0x1
#define _COG1ASD1_G1AS2E_LENGTH                             0x1
#define _COG1ASD1_G1AS2E_MASK                               0x4
#define _COG1ASD1_G1AS3E_POSN                               0x3
#define _COG1ASD1_G1AS3E_POSITION                           0x3
#define _COG1ASD1_G1AS3E_SIZE                               0x1
#define _COG1ASD1_G1AS3E_LENGTH                             0x1
#define _COG1ASD1_G1AS3E_MASK                               0x8
#define _COG1ASD1_G1AS4E_POSN                               0x4
#define _COG1ASD1_G1AS4E_POSITION                           0x4
#define _COG1ASD1_G1AS4E_SIZE                               0x1
#define _COG1ASD1_G1AS4E_LENGTH                             0x1
#define _COG1ASD1_G1AS4E_MASK                               0x10
#define _COG1ASD1_G1AS5E_POSN                               0x5
#define _COG1ASD1_G1AS5E_POSITION                           0x5
#define _COG1ASD1_G1AS5E_SIZE                               0x1
#define _COG1ASD1_G1AS5E_LENGTH                             0x1
#define _COG1ASD1_G1AS5E_MASK                               0x20
#define _COG1ASD1_G1AS6E_POSN                               0x6
#define _COG1ASD1_G1AS6E_POSITION                           0x6
#define _COG1ASD1_G1AS6E_SIZE                               0x1
#define _COG1ASD1_G1AS6E_LENGTH                             0x1
#define _COG1ASD1_G1AS6E_MASK                               0x40
#define _COG1ASD1_G1AS7E_POSN                               0x7
#define _COG1ASD1_G1AS7E_POSITION                           0x7
#define _COG1ASD1_G1AS7E_SIZE                               0x1
#define _COG1ASD1_G1AS7E_LENGTH                             0x1
#define _COG1ASD1_G1AS7E_MASK                               0x80

// Register: COG1STR
#define COG1STR COG1STR
extern volatile unsigned char           COG1STR             __at(0x69F);
#ifndef _LIB_BUILD
asm("COG1STR equ 069Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned SDATA                  :1;
        unsigned SDATB                  :1;
        unsigned SDATC                  :1;
        unsigned SDATD                  :1;
    };
    struct {
        unsigned G1STRA                 :1;
        unsigned G1STRB                 :1;
        unsigned G1STRC                 :1;
        unsigned G1STRD                 :1;
        unsigned G1SDATA                :1;
        unsigned G1SDATB                :1;
        unsigned G1SDATC                :1;
        unsigned G1SDATD                :1;
    };
} COG1STRbits_t;
extern volatile COG1STRbits_t COG1STRbits __at(0x69F);
// bitfield macros
#define _COG1STR_STRA_POSN                                  0x0
#define _COG1STR_STRA_POSITION                              0x0
#define _COG1STR_STRA_SIZE                                  0x1
#define _COG1STR_STRA_LENGTH                                0x1
#define _COG1STR_STRA_MASK                                  0x1
#define _COG1STR_STRB_POSN                                  0x1
#define _COG1STR_STRB_POSITION                              0x1
#define _COG1STR_STRB_SIZE                                  0x1
#define _COG1STR_STRB_LENGTH                                0x1
#define _COG1STR_STRB_MASK                                  0x2
#define _COG1STR_STRC_POSN                                  0x2
#define _COG1STR_STRC_POSITION                              0x2
#define _COG1STR_STRC_SIZE                                  0x1
#define _COG1STR_STRC_LENGTH                                0x1
#define _COG1STR_STRC_MASK                                  0x4
#define _COG1STR_STRD_POSN                                  0x3
#define _COG1STR_STRD_POSITION                              0x3
#define _COG1STR_STRD_SIZE                                  0x1
#define _COG1STR_STRD_LENGTH                                0x1
#define _COG1STR_STRD_MASK                                  0x8
#define _COG1STR_SDATA_POSN                                 0x4
#define _COG1STR_SDATA_POSITION                             0x4
#define _COG1STR_SDATA_SIZE                                 0x1
#define _COG1STR_SDATA_LENGTH                               0x1
#define _COG1STR_SDATA_MASK                                 0x10
#define _COG1STR_SDATB_POSN                                 0x5
#define _COG1STR_SDATB_POSITION                             0x5
#define _COG1STR_SDATB_SIZE                                 0x1
#define _COG1STR_SDATB_LENGTH                               0x1
#define _COG1STR_SDATB_MASK                                 0x20
#define _COG1STR_SDATC_POSN                                 0x6
#define _COG1STR_SDATC_POSITION                             0x6
#define _COG1STR_SDATC_SIZE                                 0x1
#define _COG1STR_SDATC_LENGTH                               0x1
#define _COG1STR_SDATC_MASK                                 0x40
#define _COG1STR_SDATD_POSN                                 0x7
#define _COG1STR_SDATD_POSITION                             0x7
#define _COG1STR_SDATD_SIZE                                 0x1
#define _COG1STR_SDATD_LENGTH                               0x1
#define _COG1STR_SDATD_MASK                                 0x80
#define _COG1STR_G1STRA_POSN                                0x0
#define _COG1STR_G1STRA_POSITION                            0x0
#define _COG1STR_G1STRA_SIZE                                0x1
#define _COG1STR_G1STRA_LENGTH                              0x1
#define _COG1STR_G1STRA_MASK                                0x1
#define _COG1STR_G1STRB_POSN                                0x1
#define _COG1STR_G1STRB_POSITION                            0x1
#define _COG1STR_G1STRB_SIZE                                0x1
#define _COG1STR_G1STRB_LENGTH                              0x1
#define _COG1STR_G1STRB_MASK                                0x2
#define _COG1STR_G1STRC_POSN                                0x2
#define _COG1STR_G1STRC_POSITION                            0x2
#define _COG1STR_G1STRC_SIZE                                0x1
#define _COG1STR_G1STRC_LENGTH                              0x1
#define _COG1STR_G1STRC_MASK                                0x4
#define _COG1STR_G1STRD_POSN                                0x3
#define _COG1STR_G1STRD_POSITION                            0x3
#define _COG1STR_G1STRD_SIZE                                0x1
#define _COG1STR_G1STRD_LENGTH                              0x1
#define _COG1STR_G1STRD_MASK                                0x8
#define _COG1STR_G1SDATA_POSN                               0x4
#define _COG1STR_G1SDATA_POSITION                           0x4
#define _COG1STR_G1SDATA_SIZE                               0x1
#define _COG1STR_G1SDATA_LENGTH                             0x1
#define _COG1STR_G1SDATA_MASK                               0x10
#define _COG1STR_G1SDATB_POSN                               0x5
#define _COG1STR_G1SDATB_POSITION                           0x5
#define _COG1STR_G1SDATB_SIZE                               0x1
#define _COG1STR_G1SDATB_LENGTH                             0x1
#define _COG1STR_G1SDATB_MASK                               0x20
#define _COG1STR_G1SDATC_POSN                               0x6
#define _COG1STR_G1SDATC_POSITION                           0x6
#define _COG1STR_G1SDATC_SIZE                               0x1
#define _COG1STR_G1SDATC_LENGTH                             0x1
#define _COG1STR_G1SDATC_MASK                               0x40
#define _COG1STR_G1SDATD_POSN                               0x7
#define _COG1STR_G1SDATD_POSITION                           0x7
#define _COG1STR_G1SDATD_SIZE                               0x1
#define _COG1STR_G1SDATD_LENGTH                             0x1
#define _COG1STR_G1SDATD_MASK                               0x80

// Register: PRG1RTSS
#define PRG1RTSS PRG1RTSS
extern volatile unsigned char           PRG1RTSS            __at(0x794);
#ifndef _LIB_BUILD
asm("PRG1RTSS equ 0794h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTSS                   :8;
    };
    struct {
        unsigned RTSS0                  :1;
        unsigned RTSS1                  :1;
        unsigned RTSS2                  :1;
        unsigned RTSS3                  :1;
    };
    struct {
        unsigned RG1RTSS0               :1;
        unsigned RG1RTSS1               :1;
        unsigned RG1RTSS2               :1;
        unsigned RG1RTSS3               :1;
    };
} PRG1RTSSbits_t;
extern volatile PRG1RTSSbits_t PRG1RTSSbits __at(0x794);
// bitfield macros
#define _PRG1RTSS_RTSS_POSN                                 0x0
#define _PRG1RTSS_RTSS_POSITION                             0x0
#define _PRG1RTSS_RTSS_SIZE                                 0x8
#define _PRG1RTSS_RTSS_LENGTH                               0x8
#define _PRG1RTSS_RTSS_MASK                                 0xFF
#define _PRG1RTSS_RTSS0_POSN                                0x0
#define _PRG1RTSS_RTSS0_POSITION                            0x0
#define _PRG1RTSS_RTSS0_SIZE                                0x1
#define _PRG1RTSS_RTSS0_LENGTH                              0x1
#define _PRG1RTSS_RTSS0_MASK                                0x1
#define _PRG1RTSS_RTSS1_POSN                                0x1
#define _PRG1RTSS_RTSS1_POSITION                            0x1
#define _PRG1RTSS_RTSS1_SIZE                                0x1
#define _PRG1RTSS_RTSS1_LENGTH                              0x1
#define _PRG1RTSS_RTSS1_MASK                                0x2
#define _PRG1RTSS_RTSS2_POSN                                0x2
#define _PRG1RTSS_RTSS2_POSITION                            0x2
#define _PRG1RTSS_RTSS2_SIZE                                0x1
#define _PRG1RTSS_RTSS2_LENGTH                              0x1
#define _PRG1RTSS_RTSS2_MASK                                0x4
#define _PRG1RTSS_RTSS3_POSN                                0x3
#define _PRG1RTSS_RTSS3_POSITION                            0x3
#define _PRG1RTSS_RTSS3_SIZE                                0x1
#define _PRG1RTSS_RTSS3_LENGTH                              0x1
#define _PRG1RTSS_RTSS3_MASK                                0x8
#define _PRG1RTSS_RG1RTSS0_POSN                             0x0
#define _PRG1RTSS_RG1RTSS0_POSITION                         0x0
#define _PRG1RTSS_RG1RTSS0_SIZE                             0x1
#define _PRG1RTSS_RG1RTSS0_LENGTH                           0x1
#define _PRG1RTSS_RG1RTSS0_MASK                             0x1
#define _PRG1RTSS_RG1RTSS1_POSN                             0x1
#define _PRG1RTSS_RG1RTSS1_POSITION                         0x1
#define _PRG1RTSS_RG1RTSS1_SIZE                             0x1
#define _PRG1RTSS_RG1RTSS1_LENGTH                           0x1
#define _PRG1RTSS_RG1RTSS1_MASK                             0x2
#define _PRG1RTSS_RG1RTSS2_POSN                             0x2
#define _PRG1RTSS_RG1RTSS2_POSITION                         0x2
#define _PRG1RTSS_RG1RTSS2_SIZE                             0x1
#define _PRG1RTSS_RG1RTSS2_LENGTH                           0x1
#define _PRG1RTSS_RG1RTSS2_MASK                             0x4
#define _PRG1RTSS_RG1RTSS3_POSN                             0x3
#define _PRG1RTSS_RG1RTSS3_POSITION                         0x3
#define _PRG1RTSS_RG1RTSS3_SIZE                             0x1
#define _PRG1RTSS_RG1RTSS3_LENGTH                           0x1
#define _PRG1RTSS_RG1RTSS3_MASK                             0x8

// Register: PRG1FTSS
#define PRG1FTSS PRG1FTSS
extern volatile unsigned char           PRG1FTSS            __at(0x795);
#ifndef _LIB_BUILD
asm("PRG1FTSS equ 0795h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FTSS                   :8;
    };
    struct {
        unsigned FTSS0                  :1;
        unsigned FTSS1                  :1;
        unsigned FTSS2                  :1;
        unsigned FTSS3                  :1;
    };
    struct {
        unsigned RG1FTSS0               :1;
        unsigned RG1FTSS1               :1;
        unsigned RG1FTSS2               :1;
        unsigned RG1FTSS3               :1;
    };
} PRG1FTSSbits_t;
extern volatile PRG1FTSSbits_t PRG1FTSSbits __at(0x795);
// bitfield macros
#define _PRG1FTSS_FTSS_POSN                                 0x0
#define _PRG1FTSS_FTSS_POSITION                             0x0
#define _PRG1FTSS_FTSS_SIZE                                 0x8
#define _PRG1FTSS_FTSS_LENGTH                               0x8
#define _PRG1FTSS_FTSS_MASK                                 0xFF
#define _PRG1FTSS_FTSS0_POSN                                0x0
#define _PRG1FTSS_FTSS0_POSITION                            0x0
#define _PRG1FTSS_FTSS0_SIZE                                0x1
#define _PRG1FTSS_FTSS0_LENGTH                              0x1
#define _PRG1FTSS_FTSS0_MASK                                0x1
#define _PRG1FTSS_FTSS1_POSN                                0x1
#define _PRG1FTSS_FTSS1_POSITION                            0x1
#define _PRG1FTSS_FTSS1_SIZE                                0x1
#define _PRG1FTSS_FTSS1_LENGTH                              0x1
#define _PRG1FTSS_FTSS1_MASK                                0x2
#define _PRG1FTSS_FTSS2_POSN                                0x2
#define _PRG1FTSS_FTSS2_POSITION                            0x2
#define _PRG1FTSS_FTSS2_SIZE                                0x1
#define _PRG1FTSS_FTSS2_LENGTH                              0x1
#define _PRG1FTSS_FTSS2_MASK                                0x4
#define _PRG1FTSS_FTSS3_POSN                                0x3
#define _PRG1FTSS_FTSS3_POSITION                            0x3
#define _PRG1FTSS_FTSS3_SIZE                                0x1
#define _PRG1FTSS_FTSS3_LENGTH                              0x1
#define _PRG1FTSS_FTSS3_MASK                                0x8
#define _PRG1FTSS_RG1FTSS0_POSN                             0x0
#define _PRG1FTSS_RG1FTSS0_POSITION                         0x0
#define _PRG1FTSS_RG1FTSS0_SIZE                             0x1
#define _PRG1FTSS_RG1FTSS0_LENGTH                           0x1
#define _PRG1FTSS_RG1FTSS0_MASK                             0x1
#define _PRG1FTSS_RG1FTSS1_POSN                             0x1
#define _PRG1FTSS_RG1FTSS1_POSITION                         0x1
#define _PRG1FTSS_RG1FTSS1_SIZE                             0x1
#define _PRG1FTSS_RG1FTSS1_LENGTH                           0x1
#define _PRG1FTSS_RG1FTSS1_MASK                             0x2
#define _PRG1FTSS_RG1FTSS2_POSN                             0x2
#define _PRG1FTSS_RG1FTSS2_POSITION                         0x2
#define _PRG1FTSS_RG1FTSS2_SIZE                             0x1
#define _PRG1FTSS_RG1FTSS2_LENGTH                           0x1
#define _PRG1FTSS_RG1FTSS2_MASK                             0x4
#define _PRG1FTSS_RG1FTSS3_POSN                             0x3
#define _PRG1FTSS_RG1FTSS3_POSITION                         0x3
#define _PRG1FTSS_RG1FTSS3_SIZE                             0x1
#define _PRG1FTSS_RG1FTSS3_LENGTH                           0x1
#define _PRG1FTSS_RG1FTSS3_MASK                             0x8

// Register: PRG1INS
#define PRG1INS PRG1INS
extern volatile unsigned char           PRG1INS             __at(0x796);
#ifndef _LIB_BUILD
asm("PRG1INS equ 0796h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INS                    :8;
    };
    struct {
        unsigned INS0                   :1;
        unsigned INS1                   :1;
        unsigned INS2                   :1;
        unsigned INS3                   :1;
    };
    struct {
        unsigned RG1INS0                :1;
        unsigned RG1INS1                :1;
        unsigned RG1INS2                :1;
        unsigned RG1INS3                :1;
    };
} PRG1INSbits_t;
extern volatile PRG1INSbits_t PRG1INSbits __at(0x796);
// bitfield macros
#define _PRG1INS_INS_POSN                                   0x0
#define _PRG1INS_INS_POSITION                               0x0
#define _PRG1INS_INS_SIZE                                   0x8
#define _PRG1INS_INS_LENGTH                                 0x8
#define _PRG1INS_INS_MASK                                   0xFF
#define _PRG1INS_INS0_POSN                                  0x0
#define _PRG1INS_INS0_POSITION                              0x0
#define _PRG1INS_INS0_SIZE                                  0x1
#define _PRG1INS_INS0_LENGTH                                0x1
#define _PRG1INS_INS0_MASK                                  0x1
#define _PRG1INS_INS1_POSN                                  0x1
#define _PRG1INS_INS1_POSITION                              0x1
#define _PRG1INS_INS1_SIZE                                  0x1
#define _PRG1INS_INS1_LENGTH                                0x1
#define _PRG1INS_INS1_MASK                                  0x2
#define _PRG1INS_INS2_POSN                                  0x2
#define _PRG1INS_INS2_POSITION                              0x2
#define _PRG1INS_INS2_SIZE                                  0x1
#define _PRG1INS_INS2_LENGTH                                0x1
#define _PRG1INS_INS2_MASK                                  0x4
#define _PRG1INS_INS3_POSN                                  0x3
#define _PRG1INS_INS3_POSITION                              0x3
#define _PRG1INS_INS3_SIZE                                  0x1
#define _PRG1INS_INS3_LENGTH                                0x1
#define _PRG1INS_INS3_MASK                                  0x8
#define _PRG1INS_RG1INS0_POSN                               0x0
#define _PRG1INS_RG1INS0_POSITION                           0x0
#define _PRG1INS_RG1INS0_SIZE                               0x1
#define _PRG1INS_RG1INS0_LENGTH                             0x1
#define _PRG1INS_RG1INS0_MASK                               0x1
#define _PRG1INS_RG1INS1_POSN                               0x1
#define _PRG1INS_RG1INS1_POSITION                           0x1
#define _PRG1INS_RG1INS1_SIZE                               0x1
#define _PRG1INS_RG1INS1_LENGTH                             0x1
#define _PRG1INS_RG1INS1_MASK                               0x2
#define _PRG1INS_RG1INS2_POSN                               0x2
#define _PRG1INS_RG1INS2_POSITION                           0x2
#define _PRG1INS_RG1INS2_SIZE                               0x1
#define _PRG1INS_RG1INS2_LENGTH                             0x1
#define _PRG1INS_RG1INS2_MASK                               0x4
#define _PRG1INS_RG1INS3_POSN                               0x3
#define _PRG1INS_RG1INS3_POSITION                           0x3
#define _PRG1INS_RG1INS3_SIZE                               0x1
#define _PRG1INS_RG1INS3_LENGTH                             0x1
#define _PRG1INS_RG1INS3_MASK                               0x8

// Register: PRG1CON0
#define PRG1CON0 PRG1CON0
extern volatile unsigned char           PRG1CON0            __at(0x797);
#ifndef _LIB_BUILD
asm("PRG1CON0 equ 0797h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
        unsigned OS                     :1;
        unsigned MODE                   :2;
        unsigned REDG                   :1;
        unsigned FEDG                   :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
    };
    struct {
        unsigned RG1GO                  :1;
        unsigned RG1OS                  :1;
        unsigned RG1MODE                :2;
        unsigned RG1REDG                :1;
        unsigned RG1FEDG                :1;
        unsigned                        :1;
        unsigned RG1EN                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned RG1MODE0               :1;
        unsigned RG1MODE1               :1;
    };
} PRG1CON0bits_t;
extern volatile PRG1CON0bits_t PRG1CON0bits __at(0x797);
// bitfield macros
#define _PRG1CON0_GO_POSN                                   0x0
#define _PRG1CON0_GO_POSITION                               0x0
#define _PRG1CON0_GO_SIZE                                   0x1
#define _PRG1CON0_GO_LENGTH                                 0x1
#define _PRG1CON0_GO_MASK                                   0x1
#define _PRG1CON0_OS_POSN                                   0x1
#define _PRG1CON0_OS_POSITION                               0x1
#define _PRG1CON0_OS_SIZE                                   0x1
#define _PRG1CON0_OS_LENGTH                                 0x1
#define _PRG1CON0_OS_MASK                                   0x2
#define _PRG1CON0_MODE_POSN                                 0x2
#define _PRG1CON0_MODE_POSITION                             0x2
#define _PRG1CON0_MODE_SIZE                                 0x2
#define _PRG1CON0_MODE_LENGTH                               0x2
#define _PRG1CON0_MODE_MASK                                 0xC
#define _PRG1CON0_REDG_POSN                                 0x4
#define _PRG1CON0_REDG_POSITION                             0x4
#define _PRG1CON0_REDG_SIZE                                 0x1
#define _PRG1CON0_REDG_LENGTH                               0x1
#define _PRG1CON0_REDG_MASK                                 0x10
#define _PRG1CON0_FEDG_POSN                                 0x5
#define _PRG1CON0_FEDG_POSITION                             0x5
#define _PRG1CON0_FEDG_SIZE                                 0x1
#define _PRG1CON0_FEDG_LENGTH                               0x1
#define _PRG1CON0_FEDG_MASK                                 0x20
#define _PRG1CON0_EN_POSN                                   0x7
#define _PRG1CON0_EN_POSITION                               0x7
#define _PRG1CON0_EN_SIZE                                   0x1
#define _PRG1CON0_EN_LENGTH                                 0x1
#define _PRG1CON0_EN_MASK                                   0x80
#define _PRG1CON0_MODE0_POSN                                0x2
#define _PRG1CON0_MODE0_POSITION                            0x2
#define _PRG1CON0_MODE0_SIZE                                0x1
#define _PRG1CON0_MODE0_LENGTH                              0x1
#define _PRG1CON0_MODE0_MASK                                0x4
#define _PRG1CON0_MODE1_POSN                                0x3
#define _PRG1CON0_MODE1_POSITION                            0x3
#define _PRG1CON0_MODE1_SIZE                                0x1
#define _PRG1CON0_MODE1_LENGTH                              0x1
#define _PRG1CON0_MODE1_MASK                                0x8
#define _PRG1CON0_RG1GO_POSN                                0x0
#define _PRG1CON0_RG1GO_POSITION                            0x0
#define _PRG1CON0_RG1GO_SIZE                                0x1
#define _PRG1CON0_RG1GO_LENGTH                              0x1
#define _PRG1CON0_RG1GO_MASK                                0x1
#define _PRG1CON0_RG1OS_POSN                                0x1
#define _PRG1CON0_RG1OS_POSITION                            0x1
#define _PRG1CON0_RG1OS_SIZE                                0x1
#define _PRG1CON0_RG1OS_LENGTH                              0x1
#define _PRG1CON0_RG1OS_MASK                                0x2
#define _PRG1CON0_RG1MODE_POSN                              0x2
#define _PRG1CON0_RG1MODE_POSITION                          0x2
#define _PRG1CON0_RG1MODE_SIZE                              0x2
#define _PRG1CON0_RG1MODE_LENGTH                            0x2
#define _PRG1CON0_RG1MODE_MASK                              0xC
#define _PRG1CON0_RG1REDG_POSN                              0x4
#define _PRG1CON0_RG1REDG_POSITION                          0x4
#define _PRG1CON0_RG1REDG_SIZE                              0x1
#define _PRG1CON0_RG1REDG_LENGTH                            0x1
#define _PRG1CON0_RG1REDG_MASK                              0x10
#define _PRG1CON0_RG1FEDG_POSN                              0x5
#define _PRG1CON0_RG1FEDG_POSITION                          0x5
#define _PRG1CON0_RG1FEDG_SIZE                              0x1
#define _PRG1CON0_RG1FEDG_LENGTH                            0x1
#define _PRG1CON0_RG1FEDG_MASK                              0x20
#define _PRG1CON0_RG1EN_POSN                                0x7
#define _PRG1CON0_RG1EN_POSITION                            0x7
#define _PRG1CON0_RG1EN_SIZE                                0x1
#define _PRG1CON0_RG1EN_LENGTH                              0x1
#define _PRG1CON0_RG1EN_MASK                                0x80
#define _PRG1CON0_RG1MODE0_POSN                             0x2
#define _PRG1CON0_RG1MODE0_POSITION                         0x2
#define _PRG1CON0_RG1MODE0_SIZE                             0x1
#define _PRG1CON0_RG1MODE0_LENGTH                           0x1
#define _PRG1CON0_RG1MODE0_MASK                             0x4
#define _PRG1CON0_RG1MODE1_POSN                             0x3
#define _PRG1CON0_RG1MODE1_POSITION                         0x3
#define _PRG1CON0_RG1MODE1_SIZE                             0x1
#define _PRG1CON0_RG1MODE1_LENGTH                           0x1
#define _PRG1CON0_RG1MODE1_MASK                             0x8

// Register: PRG1CON1
#define PRG1CON1 PRG1CON1
extern volatile unsigned char           PRG1CON1            __at(0x798);
#ifndef _LIB_BUILD
asm("PRG1CON1 equ 0798h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPOL                   :1;
        unsigned FPOL                   :1;
        unsigned RDY                    :1;
    };
    struct {
        unsigned RG1RPOL                :1;
        unsigned RG1FPOL                :1;
        unsigned RG1RDY                 :1;
    };
} PRG1CON1bits_t;
extern volatile PRG1CON1bits_t PRG1CON1bits __at(0x798);
// bitfield macros
#define _PRG1CON1_RPOL_POSN                                 0x0
#define _PRG1CON1_RPOL_POSITION                             0x0
#define _PRG1CON1_RPOL_SIZE                                 0x1
#define _PRG1CON1_RPOL_LENGTH                               0x1
#define _PRG1CON1_RPOL_MASK                                 0x1
#define _PRG1CON1_FPOL_POSN                                 0x1
#define _PRG1CON1_FPOL_POSITION                             0x1
#define _PRG1CON1_FPOL_SIZE                                 0x1
#define _PRG1CON1_FPOL_LENGTH                               0x1
#define _PRG1CON1_FPOL_MASK                                 0x2
#define _PRG1CON1_RDY_POSN                                  0x2
#define _PRG1CON1_RDY_POSITION                              0x2
#define _PRG1CON1_RDY_SIZE                                  0x1
#define _PRG1CON1_RDY_LENGTH                                0x1
#define _PRG1CON1_RDY_MASK                                  0x4
#define _PRG1CON1_RG1RPOL_POSN                              0x0
#define _PRG1CON1_RG1RPOL_POSITION                          0x0
#define _PRG1CON1_RG1RPOL_SIZE                              0x1
#define _PRG1CON1_RG1RPOL_LENGTH                            0x1
#define _PRG1CON1_RG1RPOL_MASK                              0x1
#define _PRG1CON1_RG1FPOL_POSN                              0x1
#define _PRG1CON1_RG1FPOL_POSITION                          0x1
#define _PRG1CON1_RG1FPOL_SIZE                              0x1
#define _PRG1CON1_RG1FPOL_LENGTH                            0x1
#define _PRG1CON1_RG1FPOL_MASK                              0x2
#define _PRG1CON1_RG1RDY_POSN                               0x2
#define _PRG1CON1_RG1RDY_POSITION                           0x2
#define _PRG1CON1_RG1RDY_SIZE                               0x1
#define _PRG1CON1_RG1RDY_LENGTH                             0x1
#define _PRG1CON1_RG1RDY_MASK                               0x4

// Register: PRG1CON2
#define PRG1CON2 PRG1CON2
extern volatile unsigned char           PRG1CON2            __at(0x799);
#ifndef _LIB_BUILD
asm("PRG1CON2 equ 0799h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISET                   :5;
    };
    struct {
        unsigned ISET0                  :1;
        unsigned ISET1                  :1;
        unsigned ISET2                  :1;
        unsigned ISET3                  :1;
        unsigned ISET4                  :1;
    };
    struct {
        unsigned RG1ISET                :5;
    };
    struct {
        unsigned RG1ISET0               :1;
        unsigned RG1ISET1               :1;
        unsigned RG1ISET2               :1;
        unsigned RG1ISET3               :1;
        unsigned RG1ISET4               :1;
    };
} PRG1CON2bits_t;
extern volatile PRG1CON2bits_t PRG1CON2bits __at(0x799);
// bitfield macros
#define _PRG1CON2_ISET_POSN                                 0x0
#define _PRG1CON2_ISET_POSITION                             0x0
#define _PRG1CON2_ISET_SIZE                                 0x5
#define _PRG1CON2_ISET_LENGTH                               0x5
#define _PRG1CON2_ISET_MASK                                 0x1F
#define _PRG1CON2_ISET0_POSN                                0x0
#define _PRG1CON2_ISET0_POSITION                            0x0
#define _PRG1CON2_ISET0_SIZE                                0x1
#define _PRG1CON2_ISET0_LENGTH                              0x1
#define _PRG1CON2_ISET0_MASK                                0x1
#define _PRG1CON2_ISET1_POSN                                0x1
#define _PRG1CON2_ISET1_POSITION                            0x1
#define _PRG1CON2_ISET1_SIZE                                0x1
#define _PRG1CON2_ISET1_LENGTH                              0x1
#define _PRG1CON2_ISET1_MASK                                0x2
#define _PRG1CON2_ISET2_POSN                                0x2
#define _PRG1CON2_ISET2_POSITION                            0x2
#define _PRG1CON2_ISET2_SIZE                                0x1
#define _PRG1CON2_ISET2_LENGTH                              0x1
#define _PRG1CON2_ISET2_MASK                                0x4
#define _PRG1CON2_ISET3_POSN                                0x3
#define _PRG1CON2_ISET3_POSITION                            0x3
#define _PRG1CON2_ISET3_SIZE                                0x1
#define _PRG1CON2_ISET3_LENGTH                              0x1
#define _PRG1CON2_ISET3_MASK                                0x8
#define _PRG1CON2_ISET4_POSN                                0x4
#define _PRG1CON2_ISET4_POSITION                            0x4
#define _PRG1CON2_ISET4_SIZE                                0x1
#define _PRG1CON2_ISET4_LENGTH                              0x1
#define _PRG1CON2_ISET4_MASK                                0x10
#define _PRG1CON2_RG1ISET_POSN                              0x0
#define _PRG1CON2_RG1ISET_POSITION                          0x0
#define _PRG1CON2_RG1ISET_SIZE                              0x5
#define _PRG1CON2_RG1ISET_LENGTH                            0x5
#define _PRG1CON2_RG1ISET_MASK                              0x1F
#define _PRG1CON2_RG1ISET0_POSN                             0x0
#define _PRG1CON2_RG1ISET0_POSITION                         0x0
#define _PRG1CON2_RG1ISET0_SIZE                             0x1
#define _PRG1CON2_RG1ISET0_LENGTH                           0x1
#define _PRG1CON2_RG1ISET0_MASK                             0x1
#define _PRG1CON2_RG1ISET1_POSN                             0x1
#define _PRG1CON2_RG1ISET1_POSITION                         0x1
#define _PRG1CON2_RG1ISET1_SIZE                             0x1
#define _PRG1CON2_RG1ISET1_LENGTH                           0x1
#define _PRG1CON2_RG1ISET1_MASK                             0x2
#define _PRG1CON2_RG1ISET2_POSN                             0x2
#define _PRG1CON2_RG1ISET2_POSITION                         0x2
#define _PRG1CON2_RG1ISET2_SIZE                             0x1
#define _PRG1CON2_RG1ISET2_LENGTH                           0x1
#define _PRG1CON2_RG1ISET2_MASK                             0x4
#define _PRG1CON2_RG1ISET3_POSN                             0x3
#define _PRG1CON2_RG1ISET3_POSITION                         0x3
#define _PRG1CON2_RG1ISET3_SIZE                             0x1
#define _PRG1CON2_RG1ISET3_LENGTH                           0x1
#define _PRG1CON2_RG1ISET3_MASK                             0x8
#define _PRG1CON2_RG1ISET4_POSN                             0x4
#define _PRG1CON2_RG1ISET4_POSITION                         0x4
#define _PRG1CON2_RG1ISET4_SIZE                             0x1
#define _PRG1CON2_RG1ISET4_LENGTH                           0x1
#define _PRG1CON2_RG1ISET4_MASK                             0x10

// Register: PWMEN
#define PWMEN PWMEN
extern volatile unsigned char           PWMEN               __at(0xD8E);
#ifndef _LIB_BUILD
asm("PWMEN equ 0D8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned MPWM5EN                :1;
    };
} PWMENbits_t;
extern volatile PWMENbits_t PWMENbits __at(0xD8E);
// bitfield macros
#define _PWMEN_MPWM5EN_POSN                                 0x4
#define _PWMEN_MPWM5EN_POSITION                             0x4
#define _PWMEN_MPWM5EN_SIZE                                 0x1
#define _PWMEN_MPWM5EN_LENGTH                               0x1
#define _PWMEN_MPWM5EN_MASK                                 0x10

// Register: PWMLD
#define PWMLD PWMLD
extern volatile unsigned char           PWMLD               __at(0xD8F);
#ifndef _LIB_BUILD
asm("PWMLD equ 0D8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned MPWM5LD                :1;
    };
} PWMLDbits_t;
extern volatile PWMLDbits_t PWMLDbits __at(0xD8F);
// bitfield macros
#define _PWMLD_MPWM5LD_POSN                                 0x4
#define _PWMLD_MPWM5LD_POSITION                             0x4
#define _PWMLD_MPWM5LD_SIZE                                 0x1
#define _PWMLD_MPWM5LD_LENGTH                               0x1
#define _PWMLD_MPWM5LD_MASK                                 0x10

// Register: PWMOUT
#define PWMOUT PWMOUT
extern volatile unsigned char           PWMOUT              __at(0xD90);
#ifndef _LIB_BUILD
asm("PWMOUT equ 0D90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned MPWM5OUT               :1;
    };
} PWMOUTbits_t;
extern volatile PWMOUTbits_t PWMOUTbits __at(0xD90);
// bitfield macros
#define _PWMOUT_MPWM5OUT_POSN                               0x4
#define _PWMOUT_MPWM5OUT_POSITION                           0x4
#define _PWMOUT_MPWM5OUT_SIZE                               0x1
#define _PWMOUT_MPWM5OUT_LENGTH                             0x1
#define _PWMOUT_MPWM5OUT_MASK                               0x10

// Register: PWM5PH
#define PWM5PH PWM5PH
extern volatile unsigned short          PWM5PH              __at(0xD91);
#ifndef _LIB_BUILD
asm("PWM5PH equ 0D91h");
#endif

// Register: PWM5PHL
#define PWM5PHL PWM5PHL
extern volatile unsigned char           PWM5PHL             __at(0xD91);
#ifndef _LIB_BUILD
asm("PWM5PHL equ 0D91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PH                     :8;
    };
    struct {
        unsigned PWM5PHL0               :1;
        unsigned PWM5PHL1               :1;
        unsigned PWM5PHL2               :1;
        unsigned PWM5PHL3               :1;
        unsigned PWM5PHL4               :1;
        unsigned PWM5PHL5               :1;
        unsigned PWM5PHL6               :1;
        unsigned PWM5PHL7               :1;
    };
    struct {
        unsigned PWM5PHL                :8;
    };
} PWM5PHLbits_t;
extern volatile PWM5PHLbits_t PWM5PHLbits __at(0xD91);
// bitfield macros
#define _PWM5PHL_PH_POSN                                    0x0
#define _PWM5PHL_PH_POSITION                                0x0
#define _PWM5PHL_PH_SIZE                                    0x8
#define _PWM5PHL_PH_LENGTH                                  0x8
#define _PWM5PHL_PH_MASK                                    0xFF
#define _PWM5PHL_PWM5PHL0_POSN                              0x0
#define _PWM5PHL_PWM5PHL0_POSITION                          0x0
#define _PWM5PHL_PWM5PHL0_SIZE                              0x1
#define _PWM5PHL_PWM5PHL0_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL0_MASK                              0x1
#define _PWM5PHL_PWM5PHL1_POSN                              0x1
#define _PWM5PHL_PWM5PHL1_POSITION                          0x1
#define _PWM5PHL_PWM5PHL1_SIZE                              0x1
#define _PWM5PHL_PWM5PHL1_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL1_MASK                              0x2
#define _PWM5PHL_PWM5PHL2_POSN                              0x2
#define _PWM5PHL_PWM5PHL2_POSITION                          0x2
#define _PWM5PHL_PWM5PHL2_SIZE                              0x1
#define _PWM5PHL_PWM5PHL2_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL2_MASK                              0x4
#define _PWM5PHL_PWM5PHL3_POSN                              0x3
#define _PWM5PHL_PWM5PHL3_POSITION                          0x3
#define _PWM5PHL_PWM5PHL3_SIZE                              0x1
#define _PWM5PHL_PWM5PHL3_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL3_MASK                              0x8
#define _PWM5PHL_PWM5PHL4_POSN                              0x4
#define _PWM5PHL_PWM5PHL4_POSITION                          0x4
#define _PWM5PHL_PWM5PHL4_SIZE                              0x1
#define _PWM5PHL_PWM5PHL4_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL4_MASK                              0x10
#define _PWM5PHL_PWM5PHL5_POSN                              0x5
#define _PWM5PHL_PWM5PHL5_POSITION                          0x5
#define _PWM5PHL_PWM5PHL5_SIZE                              0x1
#define _PWM5PHL_PWM5PHL5_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL5_MASK                              0x20
#define _PWM5PHL_PWM5PHL6_POSN                              0x6
#define _PWM5PHL_PWM5PHL6_POSITION                          0x6
#define _PWM5PHL_PWM5PHL6_SIZE                              0x1
#define _PWM5PHL_PWM5PHL6_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL6_MASK                              0x40
#define _PWM5PHL_PWM5PHL7_POSN                              0x7
#define _PWM5PHL_PWM5PHL7_POSITION                          0x7
#define _PWM5PHL_PWM5PHL7_SIZE                              0x1
#define _PWM5PHL_PWM5PHL7_LENGTH                            0x1
#define _PWM5PHL_PWM5PHL7_MASK                              0x80
#define _PWM5PHL_PWM5PHL_POSN                               0x0
#define _PWM5PHL_PWM5PHL_POSITION                           0x0
#define _PWM5PHL_PWM5PHL_SIZE                               0x8
#define _PWM5PHL_PWM5PHL_LENGTH                             0x8
#define _PWM5PHL_PWM5PHL_MASK                               0xFF

// Register: PWM5PHH
#define PWM5PHH PWM5PHH
extern volatile unsigned char           PWM5PHH             __at(0xD92);
#ifndef _LIB_BUILD
asm("PWM5PHH equ 0D92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PH                     :8;
    };
    struct {
        unsigned PWM5PHH0               :1;
        unsigned PWM5PHH1               :1;
        unsigned PWM5PHH2               :1;
        unsigned PWM5PHH3               :1;
        unsigned PWM5PHH4               :1;
        unsigned PWM5PHH5               :1;
        unsigned PWM5PHH6               :1;
        unsigned PWM5PHH7               :1;
    };
    struct {
        unsigned PWM5PHH                :8;
    };
} PWM5PHHbits_t;
extern volatile PWM5PHHbits_t PWM5PHHbits __at(0xD92);
// bitfield macros
#define _PWM5PHH_PH_POSN                                    0x0
#define _PWM5PHH_PH_POSITION                                0x0
#define _PWM5PHH_PH_SIZE                                    0x8
#define _PWM5PHH_PH_LENGTH                                  0x8
#define _PWM5PHH_PH_MASK                                    0xFF
#define _PWM5PHH_PWM5PHH0_POSN                              0x0
#define _PWM5PHH_PWM5PHH0_POSITION                          0x0
#define _PWM5PHH_PWM5PHH0_SIZE                              0x1
#define _PWM5PHH_PWM5PHH0_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH0_MASK                              0x1
#define _PWM5PHH_PWM5PHH1_POSN                              0x1
#define _PWM5PHH_PWM5PHH1_POSITION                          0x1
#define _PWM5PHH_PWM5PHH1_SIZE                              0x1
#define _PWM5PHH_PWM5PHH1_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH1_MASK                              0x2
#define _PWM5PHH_PWM5PHH2_POSN                              0x2
#define _PWM5PHH_PWM5PHH2_POSITION                          0x2
#define _PWM5PHH_PWM5PHH2_SIZE                              0x1
#define _PWM5PHH_PWM5PHH2_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH2_MASK                              0x4
#define _PWM5PHH_PWM5PHH3_POSN                              0x3
#define _PWM5PHH_PWM5PHH3_POSITION                          0x3
#define _PWM5PHH_PWM5PHH3_SIZE                              0x1
#define _PWM5PHH_PWM5PHH3_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH3_MASK                              0x8
#define _PWM5PHH_PWM5PHH4_POSN                              0x4
#define _PWM5PHH_PWM5PHH4_POSITION                          0x4
#define _PWM5PHH_PWM5PHH4_SIZE                              0x1
#define _PWM5PHH_PWM5PHH4_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH4_MASK                              0x10
#define _PWM5PHH_PWM5PHH5_POSN                              0x5
#define _PWM5PHH_PWM5PHH5_POSITION                          0x5
#define _PWM5PHH_PWM5PHH5_SIZE                              0x1
#define _PWM5PHH_PWM5PHH5_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH5_MASK                              0x20
#define _PWM5PHH_PWM5PHH6_POSN                              0x6
#define _PWM5PHH_PWM5PHH6_POSITION                          0x6
#define _PWM5PHH_PWM5PHH6_SIZE                              0x1
#define _PWM5PHH_PWM5PHH6_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH6_MASK                              0x40
#define _PWM5PHH_PWM5PHH7_POSN                              0x7
#define _PWM5PHH_PWM5PHH7_POSITION                          0x7
#define _PWM5PHH_PWM5PHH7_SIZE                              0x1
#define _PWM5PHH_PWM5PHH7_LENGTH                            0x1
#define _PWM5PHH_PWM5PHH7_MASK                              0x80
#define _PWM5PHH_PWM5PHH_POSN                               0x0
#define _PWM5PHH_PWM5PHH_POSITION                           0x0
#define _PWM5PHH_PWM5PHH_SIZE                               0x8
#define _PWM5PHH_PWM5PHH_LENGTH                             0x8
#define _PWM5PHH_PWM5PHH_MASK                               0xFF

// Register: PWM5DC
#define PWM5DC PWM5DC
extern volatile unsigned short          PWM5DC              __at(0xD93);
#ifndef _LIB_BUILD
asm("PWM5DC equ 0D93h");
#endif

// Register: PWM5DCL
#define PWM5DCL PWM5DCL
extern volatile unsigned char           PWM5DCL             __at(0xD93);
#ifndef _LIB_BUILD
asm("PWM5DCL equ 0D93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned PWM5DCL0               :1;
        unsigned PWM5DCL1               :1;
        unsigned PWM5DCL2               :1;
        unsigned PWM5DCL3               :1;
        unsigned PWM5DCL4               :1;
        unsigned PWM5DCL5               :1;
        unsigned PWM5DCL6               :1;
        unsigned PWM5DCL7               :1;
    };
    struct {
        unsigned PWM5DCL                :8;
    };
} PWM5DCLbits_t;
extern volatile PWM5DCLbits_t PWM5DCLbits __at(0xD93);
// bitfield macros
#define _PWM5DCL_DC_POSN                                    0x0
#define _PWM5DCL_DC_POSITION                                0x0
#define _PWM5DCL_DC_SIZE                                    0x8
#define _PWM5DCL_DC_LENGTH                                  0x8
#define _PWM5DCL_DC_MASK                                    0xFF
#define _PWM5DCL_PWM5DCL0_POSN                              0x0
#define _PWM5DCL_PWM5DCL0_POSITION                          0x0
#define _PWM5DCL_PWM5DCL0_SIZE                              0x1
#define _PWM5DCL_PWM5DCL0_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL0_MASK                              0x1
#define _PWM5DCL_PWM5DCL1_POSN                              0x1
#define _PWM5DCL_PWM5DCL1_POSITION                          0x1
#define _PWM5DCL_PWM5DCL1_SIZE                              0x1
#define _PWM5DCL_PWM5DCL1_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL1_MASK                              0x2
#define _PWM5DCL_PWM5DCL2_POSN                              0x2
#define _PWM5DCL_PWM5DCL2_POSITION                          0x2
#define _PWM5DCL_PWM5DCL2_SIZE                              0x1
#define _PWM5DCL_PWM5DCL2_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL2_MASK                              0x4
#define _PWM5DCL_PWM5DCL3_POSN                              0x3
#define _PWM5DCL_PWM5DCL3_POSITION                          0x3
#define _PWM5DCL_PWM5DCL3_SIZE                              0x1
#define _PWM5DCL_PWM5DCL3_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL3_MASK                              0x8
#define _PWM5DCL_PWM5DCL4_POSN                              0x4
#define _PWM5DCL_PWM5DCL4_POSITION                          0x4
#define _PWM5DCL_PWM5DCL4_SIZE                              0x1
#define _PWM5DCL_PWM5DCL4_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL4_MASK                              0x10
#define _PWM5DCL_PWM5DCL5_POSN                              0x5
#define _PWM5DCL_PWM5DCL5_POSITION                          0x5
#define _PWM5DCL_PWM5DCL5_SIZE                              0x1
#define _PWM5DCL_PWM5DCL5_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL5_MASK                              0x20
#define _PWM5DCL_PWM5DCL6_POSN                              0x6
#define _PWM5DCL_PWM5DCL6_POSITION                          0x6
#define _PWM5DCL_PWM5DCL6_SIZE                              0x1
#define _PWM5DCL_PWM5DCL6_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL6_MASK                              0x40
#define _PWM5DCL_PWM5DCL7_POSN                              0x7
#define _PWM5DCL_PWM5DCL7_POSITION                          0x7
#define _PWM5DCL_PWM5DCL7_SIZE                              0x1
#define _PWM5DCL_PWM5DCL7_LENGTH                            0x1
#define _PWM5DCL_PWM5DCL7_MASK                              0x80
#define _PWM5DCL_PWM5DCL_POSN                               0x0
#define _PWM5DCL_PWM5DCL_POSITION                           0x0
#define _PWM5DCL_PWM5DCL_SIZE                               0x8
#define _PWM5DCL_PWM5DCL_LENGTH                             0x8
#define _PWM5DCL_PWM5DCL_MASK                               0xFF

// Register: PWM5DCH
#define PWM5DCH PWM5DCH
extern volatile unsigned char           PWM5DCH             __at(0xD94);
#ifndef _LIB_BUILD
asm("PWM5DCH equ 0D94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned PWM5DCH0               :1;
        unsigned PWM5DCH1               :1;
        unsigned PWM5DCH2               :1;
        unsigned PWM5DCH3               :1;
        unsigned PWM5DCH4               :1;
        unsigned PWM5DCH5               :1;
        unsigned PWM5DCH6               :1;
        unsigned PWM5DCH7               :1;
    };
    struct {
        unsigned PWM5DCH                :8;
    };
} PWM5DCHbits_t;
extern volatile PWM5DCHbits_t PWM5DCHbits __at(0xD94);
// bitfield macros
#define _PWM5DCH_DC_POSN                                    0x0
#define _PWM5DCH_DC_POSITION                                0x0
#define _PWM5DCH_DC_SIZE                                    0x8
#define _PWM5DCH_DC_LENGTH                                  0x8
#define _PWM5DCH_DC_MASK                                    0xFF
#define _PWM5DCH_PWM5DCH0_POSN                              0x0
#define _PWM5DCH_PWM5DCH0_POSITION                          0x0
#define _PWM5DCH_PWM5DCH0_SIZE                              0x1
#define _PWM5DCH_PWM5DCH0_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH0_MASK                              0x1
#define _PWM5DCH_PWM5DCH1_POSN                              0x1
#define _PWM5DCH_PWM5DCH1_POSITION                          0x1
#define _PWM5DCH_PWM5DCH1_SIZE                              0x1
#define _PWM5DCH_PWM5DCH1_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH1_MASK                              0x2
#define _PWM5DCH_PWM5DCH2_POSN                              0x2
#define _PWM5DCH_PWM5DCH2_POSITION                          0x2
#define _PWM5DCH_PWM5DCH2_SIZE                              0x1
#define _PWM5DCH_PWM5DCH2_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH2_MASK                              0x4
#define _PWM5DCH_PWM5DCH3_POSN                              0x3
#define _PWM5DCH_PWM5DCH3_POSITION                          0x3
#define _PWM5DCH_PWM5DCH3_SIZE                              0x1
#define _PWM5DCH_PWM5DCH3_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH3_MASK                              0x8
#define _PWM5DCH_PWM5DCH4_POSN                              0x4
#define _PWM5DCH_PWM5DCH4_POSITION                          0x4
#define _PWM5DCH_PWM5DCH4_SIZE                              0x1
#define _PWM5DCH_PWM5DCH4_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH4_MASK                              0x10
#define _PWM5DCH_PWM5DCH5_POSN                              0x5
#define _PWM5DCH_PWM5DCH5_POSITION                          0x5
#define _PWM5DCH_PWM5DCH5_SIZE                              0x1
#define _PWM5DCH_PWM5DCH5_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH5_MASK                              0x20
#define _PWM5DCH_PWM5DCH6_POSN                              0x6
#define _PWM5DCH_PWM5DCH6_POSITION                          0x6
#define _PWM5DCH_PWM5DCH6_SIZE                              0x1
#define _PWM5DCH_PWM5DCH6_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH6_MASK                              0x40
#define _PWM5DCH_PWM5DCH7_POSN                              0x7
#define _PWM5DCH_PWM5DCH7_POSITION                          0x7
#define _PWM5DCH_PWM5DCH7_SIZE                              0x1
#define _PWM5DCH_PWM5DCH7_LENGTH                            0x1
#define _PWM5DCH_PWM5DCH7_MASK                              0x80
#define _PWM5DCH_PWM5DCH_POSN                               0x0
#define _PWM5DCH_PWM5DCH_POSITION                           0x0
#define _PWM5DCH_PWM5DCH_SIZE                               0x8
#define _PWM5DCH_PWM5DCH_LENGTH                             0x8
#define _PWM5DCH_PWM5DCH_MASK                               0xFF

// Register: PWM5PR
#define PWM5PR PWM5PR
extern volatile unsigned short          PWM5PR              __at(0xD95);
#ifndef _LIB_BUILD
asm("PWM5PR equ 0D95h");
#endif

// Register: PWM5PRL
#define PWM5PRL PWM5PRL
extern volatile unsigned char           PWM5PRL             __at(0xD95);
#ifndef _LIB_BUILD
asm("PWM5PRL equ 0D95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PWM5PRL0               :1;
        unsigned PWM5PRL1               :1;
        unsigned PWM5PRL2               :1;
        unsigned PWM5PRL3               :1;
        unsigned PWM5PRL4               :1;
        unsigned PWM5PRL5               :1;
        unsigned PWM5PRL6               :1;
        unsigned PWM5PRL7               :1;
    };
    struct {
        unsigned PWM5PRL                :8;
    };
} PWM5PRLbits_t;
extern volatile PWM5PRLbits_t PWM5PRLbits __at(0xD95);
// bitfield macros
#define _PWM5PRL_PR_POSN                                    0x0
#define _PWM5PRL_PR_POSITION                                0x0
#define _PWM5PRL_PR_SIZE                                    0x8
#define _PWM5PRL_PR_LENGTH                                  0x8
#define _PWM5PRL_PR_MASK                                    0xFF
#define _PWM5PRL_PWM5PRL0_POSN                              0x0
#define _PWM5PRL_PWM5PRL0_POSITION                          0x0
#define _PWM5PRL_PWM5PRL0_SIZE                              0x1
#define _PWM5PRL_PWM5PRL0_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL0_MASK                              0x1
#define _PWM5PRL_PWM5PRL1_POSN                              0x1
#define _PWM5PRL_PWM5PRL1_POSITION                          0x1
#define _PWM5PRL_PWM5PRL1_SIZE                              0x1
#define _PWM5PRL_PWM5PRL1_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL1_MASK                              0x2
#define _PWM5PRL_PWM5PRL2_POSN                              0x2
#define _PWM5PRL_PWM5PRL2_POSITION                          0x2
#define _PWM5PRL_PWM5PRL2_SIZE                              0x1
#define _PWM5PRL_PWM5PRL2_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL2_MASK                              0x4
#define _PWM5PRL_PWM5PRL3_POSN                              0x3
#define _PWM5PRL_PWM5PRL3_POSITION                          0x3
#define _PWM5PRL_PWM5PRL3_SIZE                              0x1
#define _PWM5PRL_PWM5PRL3_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL3_MASK                              0x8
#define _PWM5PRL_PWM5PRL4_POSN                              0x4
#define _PWM5PRL_PWM5PRL4_POSITION                          0x4
#define _PWM5PRL_PWM5PRL4_SIZE                              0x1
#define _PWM5PRL_PWM5PRL4_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL4_MASK                              0x10
#define _PWM5PRL_PWM5PRL5_POSN                              0x5
#define _PWM5PRL_PWM5PRL5_POSITION                          0x5
#define _PWM5PRL_PWM5PRL5_SIZE                              0x1
#define _PWM5PRL_PWM5PRL5_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL5_MASK                              0x20
#define _PWM5PRL_PWM5PRL6_POSN                              0x6
#define _PWM5PRL_PWM5PRL6_POSITION                          0x6
#define _PWM5PRL_PWM5PRL6_SIZE                              0x1
#define _PWM5PRL_PWM5PRL6_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL6_MASK                              0x40
#define _PWM5PRL_PWM5PRL7_POSN                              0x7
#define _PWM5PRL_PWM5PRL7_POSITION                          0x7
#define _PWM5PRL_PWM5PRL7_SIZE                              0x1
#define _PWM5PRL_PWM5PRL7_LENGTH                            0x1
#define _PWM5PRL_PWM5PRL7_MASK                              0x80
#define _PWM5PRL_PWM5PRL_POSN                               0x0
#define _PWM5PRL_PWM5PRL_POSITION                           0x0
#define _PWM5PRL_PWM5PRL_SIZE                               0x8
#define _PWM5PRL_PWM5PRL_LENGTH                             0x8
#define _PWM5PRL_PWM5PRL_MASK                               0xFF

// Register: PWM5PRH
#define PWM5PRH PWM5PRH
extern volatile unsigned char           PWM5PRH             __at(0xD96);
#ifndef _LIB_BUILD
asm("PWM5PRH equ 0D96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PWM5PRH0               :1;
        unsigned PWM5PRH1               :1;
        unsigned PWM5PRH2               :1;
        unsigned PWM5PRH3               :1;
        unsigned PWM5PRH4               :1;
        unsigned PWM5PRH5               :1;
        unsigned PWM5PRH6               :1;
        unsigned PWM5PRH7               :1;
    };
    struct {
        unsigned PWM5PRH                :8;
    };
} PWM5PRHbits_t;
extern volatile PWM5PRHbits_t PWM5PRHbits __at(0xD96);
// bitfield macros
#define _PWM5PRH_PR_POSN                                    0x0
#define _PWM5PRH_PR_POSITION                                0x0
#define _PWM5PRH_PR_SIZE                                    0x8
#define _PWM5PRH_PR_LENGTH                                  0x8
#define _PWM5PRH_PR_MASK                                    0xFF
#define _PWM5PRH_PWM5PRH0_POSN                              0x0
#define _PWM5PRH_PWM5PRH0_POSITION                          0x0
#define _PWM5PRH_PWM5PRH0_SIZE                              0x1
#define _PWM5PRH_PWM5PRH0_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH0_MASK                              0x1
#define _PWM5PRH_PWM5PRH1_POSN                              0x1
#define _PWM5PRH_PWM5PRH1_POSITION                          0x1
#define _PWM5PRH_PWM5PRH1_SIZE                              0x1
#define _PWM5PRH_PWM5PRH1_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH1_MASK                              0x2
#define _PWM5PRH_PWM5PRH2_POSN                              0x2
#define _PWM5PRH_PWM5PRH2_POSITION                          0x2
#define _PWM5PRH_PWM5PRH2_SIZE                              0x1
#define _PWM5PRH_PWM5PRH2_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH2_MASK                              0x4
#define _PWM5PRH_PWM5PRH3_POSN                              0x3
#define _PWM5PRH_PWM5PRH3_POSITION                          0x3
#define _PWM5PRH_PWM5PRH3_SIZE                              0x1
#define _PWM5PRH_PWM5PRH3_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH3_MASK                              0x8
#define _PWM5PRH_PWM5PRH4_POSN                              0x4
#define _PWM5PRH_PWM5PRH4_POSITION                          0x4
#define _PWM5PRH_PWM5PRH4_SIZE                              0x1
#define _PWM5PRH_PWM5PRH4_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH4_MASK                              0x10
#define _PWM5PRH_PWM5PRH5_POSN                              0x5
#define _PWM5PRH_PWM5PRH5_POSITION                          0x5
#define _PWM5PRH_PWM5PRH5_SIZE                              0x1
#define _PWM5PRH_PWM5PRH5_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH5_MASK                              0x20
#define _PWM5PRH_PWM5PRH6_POSN                              0x6
#define _PWM5PRH_PWM5PRH6_POSITION                          0x6
#define _PWM5PRH_PWM5PRH6_SIZE                              0x1
#define _PWM5PRH_PWM5PRH6_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH6_MASK                              0x40
#define _PWM5PRH_PWM5PRH7_POSN                              0x7
#define _PWM5PRH_PWM5PRH7_POSITION                          0x7
#define _PWM5PRH_PWM5PRH7_SIZE                              0x1
#define _PWM5PRH_PWM5PRH7_LENGTH                            0x1
#define _PWM5PRH_PWM5PRH7_MASK                              0x80
#define _PWM5PRH_PWM5PRH_POSN                               0x0
#define _PWM5PRH_PWM5PRH_POSITION                           0x0
#define _PWM5PRH_PWM5PRH_SIZE                               0x8
#define _PWM5PRH_PWM5PRH_LENGTH                             0x8
#define _PWM5PRH_PWM5PRH_MASK                               0xFF

// Register: PWM5OF
#define PWM5OF PWM5OF
extern volatile unsigned short          PWM5OF              __at(0xD97);
#ifndef _LIB_BUILD
asm("PWM5OF equ 0D97h");
#endif

// Register: PWM5OFL
#define PWM5OFL PWM5OFL
extern volatile unsigned char           PWM5OFL             __at(0xD97);
#ifndef _LIB_BUILD
asm("PWM5OFL equ 0D97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OF                     :8;
    };
    struct {
        unsigned PWM5OFL0               :1;
        unsigned PWM5OFL1               :1;
        unsigned PWM5OFL2               :1;
        unsigned PWM5OFL3               :1;
        unsigned PWM5OFL4               :1;
        unsigned PWM5OFL5               :1;
        unsigned PWM5OFL6               :1;
        unsigned PWM5OFL7               :1;
    };
    struct {
        unsigned PWM5OFL                :8;
    };
} PWM5OFLbits_t;
extern volatile PWM5OFLbits_t PWM5OFLbits __at(0xD97);
// bitfield macros
#define _PWM5OFL_OF_POSN                                    0x0
#define _PWM5OFL_OF_POSITION                                0x0
#define _PWM5OFL_OF_SIZE                                    0x8
#define _PWM5OFL_OF_LENGTH                                  0x8
#define _PWM5OFL_OF_MASK                                    0xFF
#define _PWM5OFL_PWM5OFL0_POSN                              0x0
#define _PWM5OFL_PWM5OFL0_POSITION                          0x0
#define _PWM5OFL_PWM5OFL0_SIZE                              0x1
#define _PWM5OFL_PWM5OFL0_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL0_MASK                              0x1
#define _PWM5OFL_PWM5OFL1_POSN                              0x1
#define _PWM5OFL_PWM5OFL1_POSITION                          0x1
#define _PWM5OFL_PWM5OFL1_SIZE                              0x1
#define _PWM5OFL_PWM5OFL1_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL1_MASK                              0x2
#define _PWM5OFL_PWM5OFL2_POSN                              0x2
#define _PWM5OFL_PWM5OFL2_POSITION                          0x2
#define _PWM5OFL_PWM5OFL2_SIZE                              0x1
#define _PWM5OFL_PWM5OFL2_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL2_MASK                              0x4
#define _PWM5OFL_PWM5OFL3_POSN                              0x3
#define _PWM5OFL_PWM5OFL3_POSITION                          0x3
#define _PWM5OFL_PWM5OFL3_SIZE                              0x1
#define _PWM5OFL_PWM5OFL3_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL3_MASK                              0x8
#define _PWM5OFL_PWM5OFL4_POSN                              0x4
#define _PWM5OFL_PWM5OFL4_POSITION                          0x4
#define _PWM5OFL_PWM5OFL4_SIZE                              0x1
#define _PWM5OFL_PWM5OFL4_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL4_MASK                              0x10
#define _PWM5OFL_PWM5OFL5_POSN                              0x5
#define _PWM5OFL_PWM5OFL5_POSITION                          0x5
#define _PWM5OFL_PWM5OFL5_SIZE                              0x1
#define _PWM5OFL_PWM5OFL5_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL5_MASK                              0x20
#define _PWM5OFL_PWM5OFL6_POSN                              0x6
#define _PWM5OFL_PWM5OFL6_POSITION                          0x6
#define _PWM5OFL_PWM5OFL6_SIZE                              0x1
#define _PWM5OFL_PWM5OFL6_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL6_MASK                              0x40
#define _PWM5OFL_PWM5OFL7_POSN                              0x7
#define _PWM5OFL_PWM5OFL7_POSITION                          0x7
#define _PWM5OFL_PWM5OFL7_SIZE                              0x1
#define _PWM5OFL_PWM5OFL7_LENGTH                            0x1
#define _PWM5OFL_PWM5OFL7_MASK                              0x80
#define _PWM5OFL_PWM5OFL_POSN                               0x0
#define _PWM5OFL_PWM5OFL_POSITION                           0x0
#define _PWM5OFL_PWM5OFL_SIZE                               0x8
#define _PWM5OFL_PWM5OFL_LENGTH                             0x8
#define _PWM5OFL_PWM5OFL_MASK                               0xFF

// Register: PWM5OFH
#define PWM5OFH PWM5OFH
extern volatile unsigned char           PWM5OFH             __at(0xD98);
#ifndef _LIB_BUILD
asm("PWM5OFH equ 0D98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OF                     :8;
    };
    struct {
        unsigned PWM5OFH0               :1;
        unsigned PWM5OFH1               :1;
        unsigned PWM5OFH2               :1;
        unsigned PWM5OFH3               :1;
        unsigned PWM5OFH4               :1;
        unsigned PWM5OFH5               :1;
        unsigned PWM5OFH6               :1;
        unsigned PWM5OFH7               :1;
    };
    struct {
        unsigned PWM5OFH                :8;
    };
} PWM5OFHbits_t;
extern volatile PWM5OFHbits_t PWM5OFHbits __at(0xD98);
// bitfield macros
#define _PWM5OFH_OF_POSN                                    0x0
#define _PWM5OFH_OF_POSITION                                0x0
#define _PWM5OFH_OF_SIZE                                    0x8
#define _PWM5OFH_OF_LENGTH                                  0x8
#define _PWM5OFH_OF_MASK                                    0xFF
#define _PWM5OFH_PWM5OFH0_POSN                              0x0
#define _PWM5OFH_PWM5OFH0_POSITION                          0x0
#define _PWM5OFH_PWM5OFH0_SIZE                              0x1
#define _PWM5OFH_PWM5OFH0_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH0_MASK                              0x1
#define _PWM5OFH_PWM5OFH1_POSN                              0x1
#define _PWM5OFH_PWM5OFH1_POSITION                          0x1
#define _PWM5OFH_PWM5OFH1_SIZE                              0x1
#define _PWM5OFH_PWM5OFH1_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH1_MASK                              0x2
#define _PWM5OFH_PWM5OFH2_POSN                              0x2
#define _PWM5OFH_PWM5OFH2_POSITION                          0x2
#define _PWM5OFH_PWM5OFH2_SIZE                              0x1
#define _PWM5OFH_PWM5OFH2_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH2_MASK                              0x4
#define _PWM5OFH_PWM5OFH3_POSN                              0x3
#define _PWM5OFH_PWM5OFH3_POSITION                          0x3
#define _PWM5OFH_PWM5OFH3_SIZE                              0x1
#define _PWM5OFH_PWM5OFH3_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH3_MASK                              0x8
#define _PWM5OFH_PWM5OFH4_POSN                              0x4
#define _PWM5OFH_PWM5OFH4_POSITION                          0x4
#define _PWM5OFH_PWM5OFH4_SIZE                              0x1
#define _PWM5OFH_PWM5OFH4_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH4_MASK                              0x10
#define _PWM5OFH_PWM5OFH5_POSN                              0x5
#define _PWM5OFH_PWM5OFH5_POSITION                          0x5
#define _PWM5OFH_PWM5OFH5_SIZE                              0x1
#define _PWM5OFH_PWM5OFH5_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH5_MASK                              0x20
#define _PWM5OFH_PWM5OFH6_POSN                              0x6
#define _PWM5OFH_PWM5OFH6_POSITION                          0x6
#define _PWM5OFH_PWM5OFH6_SIZE                              0x1
#define _PWM5OFH_PWM5OFH6_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH6_MASK                              0x40
#define _PWM5OFH_PWM5OFH7_POSN                              0x7
#define _PWM5OFH_PWM5OFH7_POSITION                          0x7
#define _PWM5OFH_PWM5OFH7_SIZE                              0x1
#define _PWM5OFH_PWM5OFH7_LENGTH                            0x1
#define _PWM5OFH_PWM5OFH7_MASK                              0x80
#define _PWM5OFH_PWM5OFH_POSN                               0x0
#define _PWM5OFH_PWM5OFH_POSITION                           0x0
#define _PWM5OFH_PWM5OFH_SIZE                               0x8
#define _PWM5OFH_PWM5OFH_LENGTH                             0x8
#define _PWM5OFH_PWM5OFH_MASK                               0xFF

// Register: PWM5TMR
#define PWM5TMR PWM5TMR
extern volatile unsigned short          PWM5TMR             __at(0xD99);
#ifndef _LIB_BUILD
asm("PWM5TMR equ 0D99h");
#endif

// Register: PWM5TMRL
#define PWM5TMRL PWM5TMRL
extern volatile unsigned char           PWM5TMRL            __at(0xD99);
#ifndef _LIB_BUILD
asm("PWM5TMRL equ 0D99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned PWM5TMRL0              :1;
        unsigned PWM5TMRL1              :1;
        unsigned PWM5TMRL2              :1;
        unsigned PWM5TMRL3              :1;
        unsigned PWM5TMRL4              :1;
        unsigned PWM5TMRL5              :1;
        unsigned PWM5TMRL6              :1;
        unsigned PWM5TMRL7              :1;
    };
    struct {
        unsigned PWM5TMRL               :8;
    };
} PWM5TMRLbits_t;
extern volatile PWM5TMRLbits_t PWM5TMRLbits __at(0xD99);
// bitfield macros
#define _PWM5TMRL_TMR_POSN                                  0x0
#define _PWM5TMRL_TMR_POSITION                              0x0
#define _PWM5TMRL_TMR_SIZE                                  0x8
#define _PWM5TMRL_TMR_LENGTH                                0x8
#define _PWM5TMRL_TMR_MASK                                  0xFF
#define _PWM5TMRL_PWM5TMRL0_POSN                            0x0
#define _PWM5TMRL_PWM5TMRL0_POSITION                        0x0
#define _PWM5TMRL_PWM5TMRL0_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL0_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL0_MASK                            0x1
#define _PWM5TMRL_PWM5TMRL1_POSN                            0x1
#define _PWM5TMRL_PWM5TMRL1_POSITION                        0x1
#define _PWM5TMRL_PWM5TMRL1_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL1_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL1_MASK                            0x2
#define _PWM5TMRL_PWM5TMRL2_POSN                            0x2
#define _PWM5TMRL_PWM5TMRL2_POSITION                        0x2
#define _PWM5TMRL_PWM5TMRL2_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL2_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL2_MASK                            0x4
#define _PWM5TMRL_PWM5TMRL3_POSN                            0x3
#define _PWM5TMRL_PWM5TMRL3_POSITION                        0x3
#define _PWM5TMRL_PWM5TMRL3_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL3_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL3_MASK                            0x8
#define _PWM5TMRL_PWM5TMRL4_POSN                            0x4
#define _PWM5TMRL_PWM5TMRL4_POSITION                        0x4
#define _PWM5TMRL_PWM5TMRL4_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL4_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL4_MASK                            0x10
#define _PWM5TMRL_PWM5TMRL5_POSN                            0x5
#define _PWM5TMRL_PWM5TMRL5_POSITION                        0x5
#define _PWM5TMRL_PWM5TMRL5_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL5_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL5_MASK                            0x20
#define _PWM5TMRL_PWM5TMRL6_POSN                            0x6
#define _PWM5TMRL_PWM5TMRL6_POSITION                        0x6
#define _PWM5TMRL_PWM5TMRL6_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL6_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL6_MASK                            0x40
#define _PWM5TMRL_PWM5TMRL7_POSN                            0x7
#define _PWM5TMRL_PWM5TMRL7_POSITION                        0x7
#define _PWM5TMRL_PWM5TMRL7_SIZE                            0x1
#define _PWM5TMRL_PWM5TMRL7_LENGTH                          0x1
#define _PWM5TMRL_PWM5TMRL7_MASK                            0x80
#define _PWM5TMRL_PWM5TMRL_POSN                             0x0
#define _PWM5TMRL_PWM5TMRL_POSITION                         0x0
#define _PWM5TMRL_PWM5TMRL_SIZE                             0x8
#define _PWM5TMRL_PWM5TMRL_LENGTH                           0x8
#define _PWM5TMRL_PWM5TMRL_MASK                             0xFF

// Register: PWM5TMRH
#define PWM5TMRH PWM5TMRH
extern volatile unsigned char           PWM5TMRH            __at(0xD9A);
#ifndef _LIB_BUILD
asm("PWM5TMRH equ 0D9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned PWM5TMRH0              :1;
        unsigned PWM5TMRH1              :1;
        unsigned PWM5TMRH2              :1;
        unsigned PWM5TMRH3              :1;
        unsigned PWM5TMRH4              :1;
        unsigned PWM5TMRH5              :1;
        unsigned PWM5TMRH6              :1;
        unsigned PWM5TMRH7              :1;
    };
    struct {
        unsigned PWM5TMRH               :8;
    };
} PWM5TMRHbits_t;
extern volatile PWM5TMRHbits_t PWM5TMRHbits __at(0xD9A);
// bitfield macros
#define _PWM5TMRH_TMR_POSN                                  0x0
#define _PWM5TMRH_TMR_POSITION                              0x0
#define _PWM5TMRH_TMR_SIZE                                  0x8
#define _PWM5TMRH_TMR_LENGTH                                0x8
#define _PWM5TMRH_TMR_MASK                                  0xFF
#define _PWM5TMRH_PWM5TMRH0_POSN                            0x0
#define _PWM5TMRH_PWM5TMRH0_POSITION                        0x0
#define _PWM5TMRH_PWM5TMRH0_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH0_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH0_MASK                            0x1
#define _PWM5TMRH_PWM5TMRH1_POSN                            0x1
#define _PWM5TMRH_PWM5TMRH1_POSITION                        0x1
#define _PWM5TMRH_PWM5TMRH1_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH1_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH1_MASK                            0x2
#define _PWM5TMRH_PWM5TMRH2_POSN                            0x2
#define _PWM5TMRH_PWM5TMRH2_POSITION                        0x2
#define _PWM5TMRH_PWM5TMRH2_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH2_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH2_MASK                            0x4
#define _PWM5TMRH_PWM5TMRH3_POSN                            0x3
#define _PWM5TMRH_PWM5TMRH3_POSITION                        0x3
#define _PWM5TMRH_PWM5TMRH3_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH3_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH3_MASK                            0x8
#define _PWM5TMRH_PWM5TMRH4_POSN                            0x4
#define _PWM5TMRH_PWM5TMRH4_POSITION                        0x4
#define _PWM5TMRH_PWM5TMRH4_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH4_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH4_MASK                            0x10
#define _PWM5TMRH_PWM5TMRH5_POSN                            0x5
#define _PWM5TMRH_PWM5TMRH5_POSITION                        0x5
#define _PWM5TMRH_PWM5TMRH5_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH5_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH5_MASK                            0x20
#define _PWM5TMRH_PWM5TMRH6_POSN                            0x6
#define _PWM5TMRH_PWM5TMRH6_POSITION                        0x6
#define _PWM5TMRH_PWM5TMRH6_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH6_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH6_MASK                            0x40
#define _PWM5TMRH_PWM5TMRH7_POSN                            0x7
#define _PWM5TMRH_PWM5TMRH7_POSITION                        0x7
#define _PWM5TMRH_PWM5TMRH7_SIZE                            0x1
#define _PWM5TMRH_PWM5TMRH7_LENGTH                          0x1
#define _PWM5TMRH_PWM5TMRH7_MASK                            0x80
#define _PWM5TMRH_PWM5TMRH_POSN                             0x0
#define _PWM5TMRH_PWM5TMRH_POSITION                         0x0
#define _PWM5TMRH_PWM5TMRH_SIZE                             0x8
#define _PWM5TMRH_PWM5TMRH_LENGTH                           0x8
#define _PWM5TMRH_PWM5TMRH_MASK                             0xFF

// Register: PWM5CON
#define PWM5CON PWM5CON
extern volatile unsigned char           PWM5CON             __at(0xD9B);
#ifndef _LIB_BUILD
asm("PWM5CON equ 0D9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned MODE                   :2;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned PWM5MODE0              :1;
        unsigned PWM5MODE1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned PWM5MODE               :2;
        unsigned PWM5POL                :1;
        unsigned PWM5OUT                :1;
        unsigned                        :1;
        unsigned PWM5EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
    };
} PWM5CONbits_t;
extern volatile PWM5CONbits_t PWM5CONbits __at(0xD9B);
// bitfield macros
#define _PWM5CON_MODE_POSN                                  0x2
#define _PWM5CON_MODE_POSITION                              0x2
#define _PWM5CON_MODE_SIZE                                  0x2
#define _PWM5CON_MODE_LENGTH                                0x2
#define _PWM5CON_MODE_MASK                                  0xC
#define _PWM5CON_POL_POSN                                   0x4
#define _PWM5CON_POL_POSITION                               0x4
#define _PWM5CON_POL_SIZE                                   0x1
#define _PWM5CON_POL_LENGTH                                 0x1
#define _PWM5CON_POL_MASK                                   0x10
#define _PWM5CON_OUT_POSN                                   0x5
#define _PWM5CON_OUT_POSITION                               0x5
#define _PWM5CON_OUT_SIZE                                   0x1
#define _PWM5CON_OUT_LENGTH                                 0x1
#define _PWM5CON_OUT_MASK                                   0x20
#define _PWM5CON_EN_POSN                                    0x7
#define _PWM5CON_EN_POSITION                                0x7
#define _PWM5CON_EN_SIZE                                    0x1
#define _PWM5CON_EN_LENGTH                                  0x1
#define _PWM5CON_EN_MASK                                    0x80
#define _PWM5CON_PWM5MODE0_POSN                             0x2
#define _PWM5CON_PWM5MODE0_POSITION                         0x2
#define _PWM5CON_PWM5MODE0_SIZE                             0x1
#define _PWM5CON_PWM5MODE0_LENGTH                           0x1
#define _PWM5CON_PWM5MODE0_MASK                             0x4
#define _PWM5CON_PWM5MODE1_POSN                             0x3
#define _PWM5CON_PWM5MODE1_POSITION                         0x3
#define _PWM5CON_PWM5MODE1_SIZE                             0x1
#define _PWM5CON_PWM5MODE1_LENGTH                           0x1
#define _PWM5CON_PWM5MODE1_MASK                             0x8
#define _PWM5CON_PWM5MODE_POSN                              0x2
#define _PWM5CON_PWM5MODE_POSITION                          0x2
#define _PWM5CON_PWM5MODE_SIZE                              0x2
#define _PWM5CON_PWM5MODE_LENGTH                            0x2
#define _PWM5CON_PWM5MODE_MASK                              0xC
#define _PWM5CON_PWM5POL_POSN                               0x4
#define _PWM5CON_PWM5POL_POSITION                           0x4
#define _PWM5CON_PWM5POL_SIZE                               0x1
#define _PWM5CON_PWM5POL_LENGTH                             0x1
#define _PWM5CON_PWM5POL_MASK                               0x10
#define _PWM5CON_PWM5OUT_POSN                               0x5
#define _PWM5CON_PWM5OUT_POSITION                           0x5
#define _PWM5CON_PWM5OUT_SIZE                               0x1
#define _PWM5CON_PWM5OUT_LENGTH                             0x1
#define _PWM5CON_PWM5OUT_MASK                               0x20
#define _PWM5CON_PWM5EN_POSN                                0x7
#define _PWM5CON_PWM5EN_POSITION                            0x7
#define _PWM5CON_PWM5EN_SIZE                                0x1
#define _PWM5CON_PWM5EN_LENGTH                              0x1
#define _PWM5CON_PWM5EN_MASK                                0x80
#define _PWM5CON_MODE0_POSN                                 0x2
#define _PWM5CON_MODE0_POSITION                             0x2
#define _PWM5CON_MODE0_SIZE                                 0x1
#define _PWM5CON_MODE0_LENGTH                               0x1
#define _PWM5CON_MODE0_MASK                                 0x4
#define _PWM5CON_MODE1_POSN                                 0x3
#define _PWM5CON_MODE1_POSITION                             0x3
#define _PWM5CON_MODE1_SIZE                                 0x1
#define _PWM5CON_MODE1_LENGTH                               0x1
#define _PWM5CON_MODE1_MASK                                 0x8

// Register: PWM5INTE
#define PWM5INTE PWM5INTE
extern volatile unsigned char           PWM5INTE            __at(0xD9C);
#ifndef _LIB_BUILD
asm("PWM5INTE equ 0D9Ch");
#endif
// aliases
extern volatile unsigned char           PWM5INTCON          __at(0xD9C);
#ifndef _LIB_BUILD
asm("PWM5INTCON equ 0D9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRIE                   :1;
        unsigned DCIE                   :1;
        unsigned PHIE                   :1;
        unsigned OFIE                   :1;
    };
    struct {
        unsigned PWM5PRIE               :1;
        unsigned PWM5DCIE               :1;
        unsigned PWM5PHIE               :1;
        unsigned PWM5OFIE               :1;
    };
} PWM5INTEbits_t;
extern volatile PWM5INTEbits_t PWM5INTEbits __at(0xD9C);
// bitfield macros
#define _PWM5INTE_PRIE_POSN                                 0x0
#define _PWM5INTE_PRIE_POSITION                             0x0
#define _PWM5INTE_PRIE_SIZE                                 0x1
#define _PWM5INTE_PRIE_LENGTH                               0x1
#define _PWM5INTE_PRIE_MASK                                 0x1
#define _PWM5INTE_DCIE_POSN                                 0x1
#define _PWM5INTE_DCIE_POSITION                             0x1
#define _PWM5INTE_DCIE_SIZE                                 0x1
#define _PWM5INTE_DCIE_LENGTH                               0x1
#define _PWM5INTE_DCIE_MASK                                 0x2
#define _PWM5INTE_PHIE_POSN                                 0x2
#define _PWM5INTE_PHIE_POSITION                             0x2
#define _PWM5INTE_PHIE_SIZE                                 0x1
#define _PWM5INTE_PHIE_LENGTH                               0x1
#define _PWM5INTE_PHIE_MASK                                 0x4
#define _PWM5INTE_OFIE_POSN                                 0x3
#define _PWM5INTE_OFIE_POSITION                             0x3
#define _PWM5INTE_OFIE_SIZE                                 0x1
#define _PWM5INTE_OFIE_LENGTH                               0x1
#define _PWM5INTE_OFIE_MASK                                 0x8
#define _PWM5INTE_PWM5PRIE_POSN                             0x0
#define _PWM5INTE_PWM5PRIE_POSITION                         0x0
#define _PWM5INTE_PWM5PRIE_SIZE                             0x1
#define _PWM5INTE_PWM5PRIE_LENGTH                           0x1
#define _PWM5INTE_PWM5PRIE_MASK                             0x1
#define _PWM5INTE_PWM5DCIE_POSN                             0x1
#define _PWM5INTE_PWM5DCIE_POSITION                         0x1
#define _PWM5INTE_PWM5DCIE_SIZE                             0x1
#define _PWM5INTE_PWM5DCIE_LENGTH                           0x1
#define _PWM5INTE_PWM5DCIE_MASK                             0x2
#define _PWM5INTE_PWM5PHIE_POSN                             0x2
#define _PWM5INTE_PWM5PHIE_POSITION                         0x2
#define _PWM5INTE_PWM5PHIE_SIZE                             0x1
#define _PWM5INTE_PWM5PHIE_LENGTH                           0x1
#define _PWM5INTE_PWM5PHIE_MASK                             0x4
#define _PWM5INTE_PWM5OFIE_POSN                             0x3
#define _PWM5INTE_PWM5OFIE_POSITION                         0x3
#define _PWM5INTE_PWM5OFIE_SIZE                             0x1
#define _PWM5INTE_PWM5OFIE_LENGTH                           0x1
#define _PWM5INTE_PWM5OFIE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned PRIE                   :1;
        unsigned DCIE                   :1;
        unsigned PHIE                   :1;
        unsigned OFIE                   :1;
    };
    struct {
        unsigned PWM5PRIE               :1;
        unsigned PWM5DCIE               :1;
        unsigned PWM5PHIE               :1;
        unsigned PWM5OFIE               :1;
    };
} PWM5INTCONbits_t;
extern volatile PWM5INTCONbits_t PWM5INTCONbits __at(0xD9C);
// bitfield macros
#define _PWM5INTCON_PRIE_POSN                               0x0
#define _PWM5INTCON_PRIE_POSITION                           0x0
#define _PWM5INTCON_PRIE_SIZE                               0x1
#define _PWM5INTCON_PRIE_LENGTH                             0x1
#define _PWM5INTCON_PRIE_MASK                               0x1
#define _PWM5INTCON_DCIE_POSN                               0x1
#define _PWM5INTCON_DCIE_POSITION                           0x1
#define _PWM5INTCON_DCIE_SIZE                               0x1
#define _PWM5INTCON_DCIE_LENGTH                             0x1
#define _PWM5INTCON_DCIE_MASK                               0x2
#define _PWM5INTCON_PHIE_POSN                               0x2
#define _PWM5INTCON_PHIE_POSITION                           0x2
#define _PWM5INTCON_PHIE_SIZE                               0x1
#define _PWM5INTCON_PHIE_LENGTH                             0x1
#define _PWM5INTCON_PHIE_MASK                               0x4
#define _PWM5INTCON_OFIE_POSN                               0x3
#define _PWM5INTCON_OFIE_POSITION                           0x3
#define _PWM5INTCON_OFIE_SIZE                               0x1
#define _PWM5INTCON_OFIE_LENGTH                             0x1
#define _PWM5INTCON_OFIE_MASK                               0x8
#define _PWM5INTCON_PWM5PRIE_POSN                           0x0
#define _PWM5INTCON_PWM5PRIE_POSITION                       0x0
#define _PWM5INTCON_PWM5PRIE_SIZE                           0x1
#define _PWM5INTCON_PWM5PRIE_LENGTH                         0x1
#define _PWM5INTCON_PWM5PRIE_MASK                           0x1
#define _PWM5INTCON_PWM5DCIE_POSN                           0x1
#define _PWM5INTCON_PWM5DCIE_POSITION                       0x1
#define _PWM5INTCON_PWM5DCIE_SIZE                           0x1
#define _PWM5INTCON_PWM5DCIE_LENGTH                         0x1
#define _PWM5INTCON_PWM5DCIE_MASK                           0x2
#define _PWM5INTCON_PWM5PHIE_POSN                           0x2
#define _PWM5INTCON_PWM5PHIE_POSITION                       0x2
#define _PWM5INTCON_PWM5PHIE_SIZE                           0x1
#define _PWM5INTCON_PWM5PHIE_LENGTH                         0x1
#define _PWM5INTCON_PWM5PHIE_MASK                           0x4
#define _PWM5INTCON_PWM5OFIE_POSN                           0x3
#define _PWM5INTCON_PWM5OFIE_POSITION                       0x3
#define _PWM5INTCON_PWM5OFIE_SIZE                           0x1
#define _PWM5INTCON_PWM5OFIE_LENGTH                         0x1
#define _PWM5INTCON_PWM5OFIE_MASK                           0x8

// Register: PWM5INTF
#define PWM5INTF PWM5INTF
extern volatile unsigned char           PWM5INTF            __at(0xD9D);
#ifndef _LIB_BUILD
asm("PWM5INTF equ 0D9Dh");
#endif
// aliases
extern volatile unsigned char           PWM5INTFLG          __at(0xD9D);
#ifndef _LIB_BUILD
asm("PWM5INTFLG equ 0D9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRIF                   :1;
        unsigned DCIF                   :1;
        unsigned PHIF                   :1;
        unsigned OFIF                   :1;
    };
    struct {
        unsigned PWM5PRIF               :1;
        unsigned PWM5DCIF               :1;
        unsigned PWM5PHIF               :1;
        unsigned PWM5OFIF               :1;
    };
} PWM5INTFbits_t;
extern volatile PWM5INTFbits_t PWM5INTFbits __at(0xD9D);
// bitfield macros
#define _PWM5INTF_PRIF_POSN                                 0x0
#define _PWM5INTF_PRIF_POSITION                             0x0
#define _PWM5INTF_PRIF_SIZE                                 0x1
#define _PWM5INTF_PRIF_LENGTH                               0x1
#define _PWM5INTF_PRIF_MASK                                 0x1
#define _PWM5INTF_DCIF_POSN                                 0x1
#define _PWM5INTF_DCIF_POSITION                             0x1
#define _PWM5INTF_DCIF_SIZE                                 0x1
#define _PWM5INTF_DCIF_LENGTH                               0x1
#define _PWM5INTF_DCIF_MASK                                 0x2
#define _PWM5INTF_PHIF_POSN                                 0x2
#define _PWM5INTF_PHIF_POSITION                             0x2
#define _PWM5INTF_PHIF_SIZE                                 0x1
#define _PWM5INTF_PHIF_LENGTH                               0x1
#define _PWM5INTF_PHIF_MASK                                 0x4
#define _PWM5INTF_OFIF_POSN                                 0x3
#define _PWM5INTF_OFIF_POSITION                             0x3
#define _PWM5INTF_OFIF_SIZE                                 0x1
#define _PWM5INTF_OFIF_LENGTH                               0x1
#define _PWM5INTF_OFIF_MASK                                 0x8
#define _PWM5INTF_PWM5PRIF_POSN                             0x0
#define _PWM5INTF_PWM5PRIF_POSITION                         0x0
#define _PWM5INTF_PWM5PRIF_SIZE                             0x1
#define _PWM5INTF_PWM5PRIF_LENGTH                           0x1
#define _PWM5INTF_PWM5PRIF_MASK                             0x1
#define _PWM5INTF_PWM5DCIF_POSN                             0x1
#define _PWM5INTF_PWM5DCIF_POSITION                         0x1
#define _PWM5INTF_PWM5DCIF_SIZE                             0x1
#define _PWM5INTF_PWM5DCIF_LENGTH                           0x1
#define _PWM5INTF_PWM5DCIF_MASK                             0x2
#define _PWM5INTF_PWM5PHIF_POSN                             0x2
#define _PWM5INTF_PWM5PHIF_POSITION                         0x2
#define _PWM5INTF_PWM5PHIF_SIZE                             0x1
#define _PWM5INTF_PWM5PHIF_LENGTH                           0x1
#define _PWM5INTF_PWM5PHIF_MASK                             0x4
#define _PWM5INTF_PWM5OFIF_POSN                             0x3
#define _PWM5INTF_PWM5OFIF_POSITION                         0x3
#define _PWM5INTF_PWM5OFIF_SIZE                             0x1
#define _PWM5INTF_PWM5OFIF_LENGTH                           0x1
#define _PWM5INTF_PWM5OFIF_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned PRIF                   :1;
        unsigned DCIF                   :1;
        unsigned PHIF                   :1;
        unsigned OFIF                   :1;
    };
    struct {
        unsigned PWM5PRIF               :1;
        unsigned PWM5DCIF               :1;
        unsigned PWM5PHIF               :1;
        unsigned PWM5OFIF               :1;
    };
} PWM5INTFLGbits_t;
extern volatile PWM5INTFLGbits_t PWM5INTFLGbits __at(0xD9D);
// bitfield macros
#define _PWM5INTFLG_PRIF_POSN                               0x0
#define _PWM5INTFLG_PRIF_POSITION                           0x0
#define _PWM5INTFLG_PRIF_SIZE                               0x1
#define _PWM5INTFLG_PRIF_LENGTH                             0x1
#define _PWM5INTFLG_PRIF_MASK                               0x1
#define _PWM5INTFLG_DCIF_POSN                               0x1
#define _PWM5INTFLG_DCIF_POSITION                           0x1
#define _PWM5INTFLG_DCIF_SIZE                               0x1
#define _PWM5INTFLG_DCIF_LENGTH                             0x1
#define _PWM5INTFLG_DCIF_MASK                               0x2
#define _PWM5INTFLG_PHIF_POSN                               0x2
#define _PWM5INTFLG_PHIF_POSITION                           0x2
#define _PWM5INTFLG_PHIF_SIZE                               0x1
#define _PWM5INTFLG_PHIF_LENGTH                             0x1
#define _PWM5INTFLG_PHIF_MASK                               0x4
#define _PWM5INTFLG_OFIF_POSN                               0x3
#define _PWM5INTFLG_OFIF_POSITION                           0x3
#define _PWM5INTFLG_OFIF_SIZE                               0x1
#define _PWM5INTFLG_OFIF_LENGTH                             0x1
#define _PWM5INTFLG_OFIF_MASK                               0x8
#define _PWM5INTFLG_PWM5PRIF_POSN                           0x0
#define _PWM5INTFLG_PWM5PRIF_POSITION                       0x0
#define _PWM5INTFLG_PWM5PRIF_SIZE                           0x1
#define _PWM5INTFLG_PWM5PRIF_LENGTH                         0x1
#define _PWM5INTFLG_PWM5PRIF_MASK                           0x1
#define _PWM5INTFLG_PWM5DCIF_POSN                           0x1
#define _PWM5INTFLG_PWM5DCIF_POSITION                       0x1
#define _PWM5INTFLG_PWM5DCIF_SIZE                           0x1
#define _PWM5INTFLG_PWM5DCIF_LENGTH                         0x1
#define _PWM5INTFLG_PWM5DCIF_MASK                           0x2
#define _PWM5INTFLG_PWM5PHIF_POSN                           0x2
#define _PWM5INTFLG_PWM5PHIF_POSITION                       0x2
#define _PWM5INTFLG_PWM5PHIF_SIZE                           0x1
#define _PWM5INTFLG_PWM5PHIF_LENGTH                         0x1
#define _PWM5INTFLG_PWM5PHIF_MASK                           0x4
#define _PWM5INTFLG_PWM5OFIF_POSN                           0x3
#define _PWM5INTFLG_PWM5OFIF_POSITION                       0x3
#define _PWM5INTFLG_PWM5OFIF_SIZE                           0x1
#define _PWM5INTFLG_PWM5OFIF_LENGTH                         0x1
#define _PWM5INTFLG_PWM5OFIF_MASK                           0x8

// Register: PWM5CLKCON
#define PWM5CLKCON PWM5CLKCON
extern volatile unsigned char           PWM5CLKCON          __at(0xD9E);
#ifndef _LIB_BUILD
asm("PWM5CLKCON equ 0D9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :2;
        unsigned                        :2;
        unsigned PS                     :3;
    };
    struct {
        unsigned PWM5CS0                :1;
        unsigned PWM5CS1                :1;
        unsigned PWM5CS2                :1;
        unsigned                        :1;
        unsigned PWM5PS0                :1;
        unsigned PWM5PS1                :1;
        unsigned PWM5PS2                :1;
    };
    struct {
        unsigned PWM5CS                 :3;
        unsigned                        :1;
        unsigned PWM5PS                 :3;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned                        :1;
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
    };
} PWM5CLKCONbits_t;
extern volatile PWM5CLKCONbits_t PWM5CLKCONbits __at(0xD9E);
// bitfield macros
#define _PWM5CLKCON_CS_POSN                                 0x0
#define _PWM5CLKCON_CS_POSITION                             0x0
#define _PWM5CLKCON_CS_SIZE                                 0x2
#define _PWM5CLKCON_CS_LENGTH                               0x2
#define _PWM5CLKCON_CS_MASK                                 0x3
#define _PWM5CLKCON_PS_POSN                                 0x4
#define _PWM5CLKCON_PS_POSITION                             0x4
#define _PWM5CLKCON_PS_SIZE                                 0x3
#define _PWM5CLKCON_PS_LENGTH                               0x3
#define _PWM5CLKCON_PS_MASK                                 0x70
#define _PWM5CLKCON_PWM5CS0_POSN                            0x0
#define _PWM5CLKCON_PWM5CS0_POSITION                        0x0
#define _PWM5CLKCON_PWM5CS0_SIZE                            0x1
#define _PWM5CLKCON_PWM5CS0_LENGTH                          0x1
#define _PWM5CLKCON_PWM5CS0_MASK                            0x1
#define _PWM5CLKCON_PWM5CS1_POSN                            0x1
#define _PWM5CLKCON_PWM5CS1_POSITION                        0x1
#define _PWM5CLKCON_PWM5CS1_SIZE                            0x1
#define _PWM5CLKCON_PWM5CS1_LENGTH                          0x1
#define _PWM5CLKCON_PWM5CS1_MASK                            0x2
#define _PWM5CLKCON_PWM5CS2_POSN                            0x2
#define _PWM5CLKCON_PWM5CS2_POSITION                        0x2
#define _PWM5CLKCON_PWM5CS2_SIZE                            0x1
#define _PWM5CLKCON_PWM5CS2_LENGTH                          0x1
#define _PWM5CLKCON_PWM5CS2_MASK                            0x4
#define _PWM5CLKCON_PWM5PS0_POSN                            0x4
#define _PWM5CLKCON_PWM5PS0_POSITION                        0x4
#define _PWM5CLKCON_PWM5PS0_SIZE                            0x1
#define _PWM5CLKCON_PWM5PS0_LENGTH                          0x1
#define _PWM5CLKCON_PWM5PS0_MASK                            0x10
#define _PWM5CLKCON_PWM5PS1_POSN                            0x5
#define _PWM5CLKCON_PWM5PS1_POSITION                        0x5
#define _PWM5CLKCON_PWM5PS1_SIZE                            0x1
#define _PWM5CLKCON_PWM5PS1_LENGTH                          0x1
#define _PWM5CLKCON_PWM5PS1_MASK                            0x20
#define _PWM5CLKCON_PWM5PS2_POSN                            0x6
#define _PWM5CLKCON_PWM5PS2_POSITION                        0x6
#define _PWM5CLKCON_PWM5PS2_SIZE                            0x1
#define _PWM5CLKCON_PWM5PS2_LENGTH                          0x1
#define _PWM5CLKCON_PWM5PS2_MASK                            0x40
#define _PWM5CLKCON_PWM5CS_POSN                             0x0
#define _PWM5CLKCON_PWM5CS_POSITION                         0x0
#define _PWM5CLKCON_PWM5CS_SIZE                             0x3
#define _PWM5CLKCON_PWM5CS_LENGTH                           0x3
#define _PWM5CLKCON_PWM5CS_MASK                             0x7
#define _PWM5CLKCON_PWM5PS_POSN                             0x4
#define _PWM5CLKCON_PWM5PS_POSITION                         0x4
#define _PWM5CLKCON_PWM5PS_SIZE                             0x3
#define _PWM5CLKCON_PWM5PS_LENGTH                           0x3
#define _PWM5CLKCON_PWM5PS_MASK                             0x70
#define _PWM5CLKCON_CS0_POSN                                0x0
#define _PWM5CLKCON_CS0_POSITION                            0x0
#define _PWM5CLKCON_CS0_SIZE                                0x1
#define _PWM5CLKCON_CS0_LENGTH                              0x1
#define _PWM5CLKCON_CS0_MASK                                0x1
#define _PWM5CLKCON_CS1_POSN                                0x1
#define _PWM5CLKCON_CS1_POSITION                            0x1
#define _PWM5CLKCON_CS1_SIZE                                0x1
#define _PWM5CLKCON_CS1_LENGTH                              0x1
#define _PWM5CLKCON_CS1_MASK                                0x2
#define _PWM5CLKCON_CS2_POSN                                0x2
#define _PWM5CLKCON_CS2_POSITION                            0x2
#define _PWM5CLKCON_CS2_SIZE                                0x1
#define _PWM5CLKCON_CS2_LENGTH                              0x1
#define _PWM5CLKCON_CS2_MASK                                0x4
#define _PWM5CLKCON_PS0_POSN                                0x4
#define _PWM5CLKCON_PS0_POSITION                            0x4
#define _PWM5CLKCON_PS0_SIZE                                0x1
#define _PWM5CLKCON_PS0_LENGTH                              0x1
#define _PWM5CLKCON_PS0_MASK                                0x10
#define _PWM5CLKCON_PS1_POSN                                0x5
#define _PWM5CLKCON_PS1_POSITION                            0x5
#define _PWM5CLKCON_PS1_SIZE                                0x1
#define _PWM5CLKCON_PS1_LENGTH                              0x1
#define _PWM5CLKCON_PS1_MASK                                0x20
#define _PWM5CLKCON_PS2_POSN                                0x6
#define _PWM5CLKCON_PS2_POSITION                            0x6
#define _PWM5CLKCON_PS2_SIZE                                0x1
#define _PWM5CLKCON_PS2_LENGTH                              0x1
#define _PWM5CLKCON_PS2_MASK                                0x40

// Register: PWM5LDCON
#define PWM5LDCON PWM5LDCON
extern volatile unsigned char           PWM5LDCON           __at(0xD9F);
#ifndef _LIB_BUILD
asm("PWM5LDCON equ 0D9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :7;
        unsigned LDA                    :1;
    };
    struct {
        unsigned                        :7;
        unsigned PWM5LD                 :1;
    };
} PWM5LDCONbits_t;
extern volatile PWM5LDCONbits_t PWM5LDCONbits __at(0xD9F);
// bitfield macros
#define _PWM5LDCON_LDA_POSN                                 0x7
#define _PWM5LDCON_LDA_POSITION                             0x7
#define _PWM5LDCON_LDA_SIZE                                 0x1
#define _PWM5LDCON_LDA_LENGTH                               0x1
#define _PWM5LDCON_LDA_MASK                                 0x80
#define _PWM5LDCON_PWM5LD_POSN                              0x7
#define _PWM5LDCON_PWM5LD_POSITION                          0x7
#define _PWM5LDCON_PWM5LD_SIZE                              0x1
#define _PWM5LDCON_PWM5LD_LENGTH                            0x1
#define _PWM5LDCON_PWM5LD_MASK                              0x80

// Register: PWM5OFCON
#define PWM5OFCON PWM5OFCON
extern volatile unsigned char           PWM5OFCON           __at(0xDA0);
#ifndef _LIB_BUILD
asm("PWM5OFCON equ 0DA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned OFO                    :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM5OFMC               :1;
    };
} PWM5OFCONbits_t;
extern volatile PWM5OFCONbits_t PWM5OFCONbits __at(0xDA0);
// bitfield macros
#define _PWM5OFCON_OFO_POSN                                 0x4
#define _PWM5OFCON_OFO_POSITION                             0x4
#define _PWM5OFCON_OFO_SIZE                                 0x1
#define _PWM5OFCON_OFO_LENGTH                               0x1
#define _PWM5OFCON_OFO_MASK                                 0x10
#define _PWM5OFCON_PWM5OFMC_POSN                            0x4
#define _PWM5OFCON_PWM5OFMC_POSITION                        0x4
#define _PWM5OFCON_PWM5OFMC_SIZE                            0x1
#define _PWM5OFCON_PWM5OFMC_LENGTH                          0x1
#define _PWM5OFCON_PWM5OFMC_MASK                            0x10

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0xE0F);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 0E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0xE0F);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0xE10);
#ifndef _LIB_BUILD
asm("INTPPS equ 0E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS                 :5;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0xE10);
// bitfield macros
#define _INTPPS_INTPPS_POSN                                 0x0
#define _INTPPS_INTPPS_POSITION                             0x0
#define _INTPPS_INTPPS_SIZE                                 0x5
#define _INTPPS_INTPPS_LENGTH                               0x5
#define _INTPPS_INTPPS_MASK                                 0x1F

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0xE11);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 0E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :5;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0xE11);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x5
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x5
#define _T0CKIPPS_T0CKIPPS_MASK                             0x1F

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0xE12);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 0E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :5;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0xE12);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0xE13);
#ifndef _LIB_BUILD
asm("T1GPPS equ 0E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :5;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0xE13);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0xE14);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 0E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :5;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0xE14);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F

// Register: COG1INPPS
#define COG1INPPS COG1INPPS
extern volatile unsigned char           COG1INPPS           __at(0xE16);
#ifndef _LIB_BUILD
asm("COG1INPPS equ 0E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned COG1INPPS              :5;
    };
} COG1INPPSbits_t;
extern volatile COG1INPPSbits_t COG1INPPSbits __at(0xE16);
// bitfield macros
#define _COG1INPPS_COG1INPPS_POSN                           0x0
#define _COG1INPPS_COG1INPPS_POSITION                       0x0
#define _COG1INPPS_COG1INPPS_SIZE                           0x5
#define _COG1INPPS_COG1INPPS_LENGTH                         0x5
#define _COG1INPPS_COG1INPPS_MASK                           0x1F

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0xE19);
#ifndef _LIB_BUILD
asm("T2INPPS equ 0E19h");
#endif
// aliases
extern volatile unsigned char           T2CKIPPS            __at(0xE19);
#ifndef _LIB_BUILD
asm("T2CKIPPS equ 0E19h");
#endif
extern volatile unsigned char           T2PPS               __at(0xE19);
#ifndef _LIB_BUILD
asm("T2PPS equ 0E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :5;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0xE19);
// bitfield macros
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x5
#define _T2INPPS_T2INPPS_LENGTH                             0x5
#define _T2INPPS_T2INPPS_MASK                               0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :5;
    };
} T2CKIPPSbits_t;
extern volatile T2CKIPPSbits_t T2CKIPPSbits __at(0xE19);
// bitfield macros
#define _T2CKIPPS_T2INPPS_POSN                              0x0
#define _T2CKIPPS_T2INPPS_POSITION                          0x0
#define _T2CKIPPS_T2INPPS_SIZE                              0x5
#define _T2CKIPPS_T2INPPS_LENGTH                            0x5
#define _T2CKIPPS_T2INPPS_MASK                              0x1F
typedef union {
    struct {
        unsigned T2INPPS                :5;
    };
} T2PPSbits_t;
extern volatile T2PPSbits_t T2PPSbits __at(0xE19);
// bitfield macros
#define _T2PPS_T2INPPS_POSN                                 0x0
#define _T2PPS_T2INPPS_POSITION                             0x0
#define _T2PPS_T2INPPS_SIZE                                 0x5
#define _T2PPS_T2INPPS_LENGTH                               0x5
#define _T2PPS_T2INPPS_MASK                                 0x1F

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0xE1A);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 0E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3CKIPPS               :5;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0xE1A);
// bitfield macros
#define _T3CKIPPS_T3CKIPPS_POSN                             0x0
#define _T3CKIPPS_T3CKIPPS_POSITION                         0x0
#define _T3CKIPPS_T3CKIPPS_SIZE                             0x5
#define _T3CKIPPS_T3CKIPPS_LENGTH                           0x5
#define _T3CKIPPS_T3CKIPPS_MASK                             0x1F

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0xE1B);
#ifndef _LIB_BUILD
asm("T3GPPS equ 0E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GPPS                 :5;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0xE1B);
// bitfield macros
#define _T3GPPS_T3GPPS_POSN                                 0x0
#define _T3GPPS_T3GPPS_POSITION                             0x0
#define _T3GPPS_T3GPPS_SIZE                                 0x5
#define _T3GPPS_T3GPPS_LENGTH                               0x5
#define _T3GPPS_T3GPPS_MASK                                 0x1F

// Register: T4INPPS
#define T4INPPS T4INPPS
extern volatile unsigned char           T4INPPS             __at(0xE1C);
#ifndef _LIB_BUILD
asm("T4INPPS equ 0E1Ch");
#endif
// aliases
extern volatile unsigned char           T4CKIPPS            __at(0xE1C);
#ifndef _LIB_BUILD
asm("T4CKIPPS equ 0E1Ch");
#endif
extern volatile unsigned char           T4PPS               __at(0xE1C);
#ifndef _LIB_BUILD
asm("T4PPS equ 0E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4INPPS                :5;
    };
} T4INPPSbits_t;
extern volatile T4INPPSbits_t T4INPPSbits __at(0xE1C);
// bitfield macros
#define _T4INPPS_T4INPPS_POSN                               0x0
#define _T4INPPS_T4INPPS_POSITION                           0x0
#define _T4INPPS_T4INPPS_SIZE                               0x5
#define _T4INPPS_T4INPPS_LENGTH                             0x5
#define _T4INPPS_T4INPPS_MASK                               0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned T4INPPS                :5;
    };
} T4CKIPPSbits_t;
extern volatile T4CKIPPSbits_t T4CKIPPSbits __at(0xE1C);
// bitfield macros
#define _T4CKIPPS_T4INPPS_POSN                              0x0
#define _T4CKIPPS_T4INPPS_POSITION                          0x0
#define _T4CKIPPS_T4INPPS_SIZE                              0x5
#define _T4CKIPPS_T4INPPS_LENGTH                            0x5
#define _T4CKIPPS_T4INPPS_MASK                              0x1F
typedef union {
    struct {
        unsigned T4INPPS                :5;
    };
} T4PPSbits_t;
extern volatile T4PPSbits_t T4PPSbits __at(0xE1C);
// bitfield macros
#define _T4PPS_T4INPPS_POSN                                 0x0
#define _T4PPS_T4INPPS_POSITION                             0x0
#define _T4PPS_T4INPPS_SIZE                                 0x5
#define _T4PPS_T4INPPS_LENGTH                               0x5
#define _T4PPS_T4INPPS_MASK                                 0x1F

// Register: T5CKIPPS
#define T5CKIPPS T5CKIPPS
extern volatile unsigned char           T5CKIPPS            __at(0xE1D);
#ifndef _LIB_BUILD
asm("T5CKIPPS equ 0E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5CKIPPS               :5;
    };
} T5CKIPPSbits_t;
extern volatile T5CKIPPSbits_t T5CKIPPSbits __at(0xE1D);
// bitfield macros
#define _T5CKIPPS_T5CKIPPS_POSN                             0x0
#define _T5CKIPPS_T5CKIPPS_POSITION                         0x0
#define _T5CKIPPS_T5CKIPPS_SIZE                             0x5
#define _T5CKIPPS_T5CKIPPS_LENGTH                           0x5
#define _T5CKIPPS_T5CKIPPS_MASK                             0x1F

// Register: T5GPPS
#define T5GPPS T5GPPS
extern volatile unsigned char           T5GPPS              __at(0xE1E);
#ifndef _LIB_BUILD
asm("T5GPPS equ 0E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5GPPS                 :5;
    };
} T5GPPSbits_t;
extern volatile T5GPPSbits_t T5GPPSbits __at(0xE1E);
// bitfield macros
#define _T5GPPS_T5GPPS_POSN                                 0x0
#define _T5GPPS_T5GPPS_POSITION                             0x0
#define _T5GPPS_T5GPPS_SIZE                                 0x5
#define _T5GPPS_T5GPPS_LENGTH                               0x5
#define _T5GPPS_T5GPPS_MASK                                 0x1F

// Register: T6INPPS
#define T6INPPS T6INPPS
extern volatile unsigned char           T6INPPS             __at(0xE1F);
#ifndef _LIB_BUILD
asm("T6INPPS equ 0E1Fh");
#endif
// aliases
extern volatile unsigned char           T6CKIPPS            __at(0xE1F);
#ifndef _LIB_BUILD
asm("T6CKIPPS equ 0E1Fh");
#endif
extern volatile unsigned char           T6PPS               __at(0xE1F);
#ifndef _LIB_BUILD
asm("T6PPS equ 0E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T6INPPS                :5;
    };
} T6INPPSbits_t;
extern volatile T6INPPSbits_t T6INPPSbits __at(0xE1F);
// bitfield macros
#define _T6INPPS_T6INPPS_POSN                               0x0
#define _T6INPPS_T6INPPS_POSITION                           0x0
#define _T6INPPS_T6INPPS_SIZE                               0x5
#define _T6INPPS_T6INPPS_LENGTH                             0x5
#define _T6INPPS_T6INPPS_MASK                               0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned T6INPPS                :5;
    };
} T6CKIPPSbits_t;
extern volatile T6CKIPPSbits_t T6CKIPPSbits __at(0xE1F);
// bitfield macros
#define _T6CKIPPS_T6INPPS_POSN                              0x0
#define _T6CKIPPS_T6INPPS_POSITION                          0x0
#define _T6CKIPPS_T6INPPS_SIZE                              0x5
#define _T6CKIPPS_T6INPPS_LENGTH                            0x5
#define _T6CKIPPS_T6INPPS_MASK                              0x1F
typedef union {
    struct {
        unsigned T6INPPS                :5;
    };
} T6PPSbits_t;
extern volatile T6PPSbits_t T6PPSbits __at(0xE1F);
// bitfield macros
#define _T6PPS_T6INPPS_POSN                                 0x0
#define _T6PPS_T6INPPS_POSITION                             0x0
#define _T6PPS_T6INPPS_SIZE                                 0x5
#define _T6PPS_T6INPPS_LENGTH                               0x5
#define _T6PPS_T6INPPS_MASK                                 0x1F

// Register: SSPCLKPPS
#define SSPCLKPPS SSPCLKPPS
extern volatile unsigned char           SSPCLKPPS           __at(0xE20);
#ifndef _LIB_BUILD
asm("SSPCLKPPS equ 0E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPCLKPPS              :5;
    };
} SSPCLKPPSbits_t;
extern volatile SSPCLKPPSbits_t SSPCLKPPSbits __at(0xE20);
// bitfield macros
#define _SSPCLKPPS_SSPCLKPPS_POSN                           0x0
#define _SSPCLKPPS_SSPCLKPPS_POSITION                       0x0
#define _SSPCLKPPS_SSPCLKPPS_SIZE                           0x5
#define _SSPCLKPPS_SSPCLKPPS_LENGTH                         0x5
#define _SSPCLKPPS_SSPCLKPPS_MASK                           0x1F

// Register: SSPDATPPS
#define SSPDATPPS SSPDATPPS
extern volatile unsigned char           SSPDATPPS           __at(0xE21);
#ifndef _LIB_BUILD
asm("SSPDATPPS equ 0E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPDATPPS              :5;
    };
} SSPDATPPSbits_t;
extern volatile SSPDATPPSbits_t SSPDATPPSbits __at(0xE21);
// bitfield macros
#define _SSPDATPPS_SSPDATPPS_POSN                           0x0
#define _SSPDATPPS_SSPDATPPS_POSITION                       0x0
#define _SSPDATPPS_SSPDATPPS_SIZE                           0x5
#define _SSPDATPPS_SSPDATPPS_LENGTH                         0x5
#define _SSPDATPPS_SSPDATPPS_MASK                           0x1F

// Register: SSPSSPPS
#define SSPSSPPS SSPSSPPS
extern volatile unsigned char           SSPSSPPS            __at(0xE22);
#ifndef _LIB_BUILD
asm("SSPSSPPS equ 0E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPSSPPS               :5;
    };
} SSPSSPPSbits_t;
extern volatile SSPSSPPSbits_t SSPSSPPSbits __at(0xE22);
// bitfield macros
#define _SSPSSPPS_SSPSSPPS_POSN                             0x0
#define _SSPSSPPS_SSPSSPPS_POSITION                         0x0
#define _SSPSSPPS_SSPSSPPS_SIZE                             0x5
#define _SSPSSPPS_SSPSSPPS_LENGTH                           0x5
#define _SSPSSPPS_SSPSSPPS_MASK                             0x1F

// Register: RXPPS
#define RXPPS RXPPS
extern volatile unsigned char           RXPPS               __at(0xE24);
#ifndef _LIB_BUILD
asm("RXPPS equ 0E24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXPPS                  :5;
    };
} RXPPSbits_t;
extern volatile RXPPSbits_t RXPPSbits __at(0xE24);
// bitfield macros
#define _RXPPS_RXPPS_POSN                                   0x0
#define _RXPPS_RXPPS_POSITION                               0x0
#define _RXPPS_RXPPS_SIZE                                   0x5
#define _RXPPS_RXPPS_LENGTH                                 0x5
#define _RXPPS_RXPPS_MASK                                   0x1F

// Register: CKPPS
#define CKPPS CKPPS
extern volatile unsigned char           CKPPS               __at(0xE25);
#ifndef _LIB_BUILD
asm("CKPPS equ 0E25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKPPS                  :5;
    };
} CKPPSbits_t;
extern volatile CKPPSbits_t CKPPSbits __at(0xE25);
// bitfield macros
#define _CKPPS_CKPPS_POSN                                   0x0
#define _CKPPS_CKPPS_POSITION                               0x0
#define _CKPPS_CKPPS_SIZE                                   0x5
#define _CKPPS_CKPPS_LENGTH                                 0x5
#define _CKPPS_CKPPS_MASK                                   0x1F

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0xE28);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 0E28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :5;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0xE28);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0xE29);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 0E29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :5;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0xE29);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0xE2A);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 0E2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :5;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0xE2A);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0xE2B);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 0E2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :5;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0xE2B);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F

// Register: PRG1RPPS
#define PRG1RPPS PRG1RPPS
extern volatile unsigned char           PRG1RPPS            __at(0xE2C);
#ifndef _LIB_BUILD
asm("PRG1RPPS equ 0E2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRG1RPPS               :5;
    };
} PRG1RPPSbits_t;
extern volatile PRG1RPPSbits_t PRG1RPPSbits __at(0xE2C);
// bitfield macros
#define _PRG1RPPS_PRG1RPPS_POSN                             0x0
#define _PRG1RPPS_PRG1RPPS_POSITION                         0x0
#define _PRG1RPPS_PRG1RPPS_SIZE                             0x5
#define _PRG1RPPS_PRG1RPPS_LENGTH                           0x5
#define _PRG1RPPS_PRG1RPPS_MASK                             0x1F

// Register: PRG1FPPS
#define PRG1FPPS PRG1FPPS
extern volatile unsigned char           PRG1FPPS            __at(0xE2D);
#ifndef _LIB_BUILD
asm("PRG1FPPS equ 0E2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRG1FPPS               :5;
    };
} PRG1FPPSbits_t;
extern volatile PRG1FPPSbits_t PRG1FPPSbits __at(0xE2D);
// bitfield macros
#define _PRG1FPPS_PRG1FPPS_POSN                             0x0
#define _PRG1FPPS_PRG1FPPS_POSITION                         0x0
#define _PRG1FPPS_PRG1FPPS_SIZE                             0x5
#define _PRG1FPPS_PRG1FPPS_LENGTH                           0x5
#define _PRG1FPPS_PRG1FPPS_MASK                             0x1F

// Register: MD1CHPPS
#define MD1CHPPS MD1CHPPS
extern volatile unsigned char           MD1CHPPS            __at(0xE30);
#ifndef _LIB_BUILD
asm("MD1CHPPS equ 0E30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD1CHPPS               :5;
    };
} MD1CHPPSbits_t;
extern volatile MD1CHPPSbits_t MD1CHPPSbits __at(0xE30);
// bitfield macros
#define _MD1CHPPS_MD1CHPPS_POSN                             0x0
#define _MD1CHPPS_MD1CHPPS_POSITION                         0x0
#define _MD1CHPPS_MD1CHPPS_SIZE                             0x5
#define _MD1CHPPS_MD1CHPPS_LENGTH                           0x5
#define _MD1CHPPS_MD1CHPPS_MASK                             0x1F

// Register: MD1CLPPS
#define MD1CLPPS MD1CLPPS
extern volatile unsigned char           MD1CLPPS            __at(0xE31);
#ifndef _LIB_BUILD
asm("MD1CLPPS equ 0E31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD1CLPPS               :5;
    };
} MD1CLPPSbits_t;
extern volatile MD1CLPPSbits_t MD1CLPPSbits __at(0xE31);
// bitfield macros
#define _MD1CLPPS_MD1CLPPS_POSN                             0x0
#define _MD1CLPPS_MD1CLPPS_POSITION                         0x0
#define _MD1CLPPS_MD1CLPPS_SIZE                             0x5
#define _MD1CLPPS_MD1CLPPS_LENGTH                           0x5
#define _MD1CLPPS_MD1CLPPS_MASK                             0x1F

// Register: MD1MODPPS
#define MD1MODPPS MD1MODPPS
extern volatile unsigned char           MD1MODPPS           __at(0xE32);
#ifndef _LIB_BUILD
asm("MD1MODPPS equ 0E32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD1MODPPS              :5;
    };
} MD1MODPPSbits_t;
extern volatile MD1MODPPSbits_t MD1MODPPSbits __at(0xE32);
// bitfield macros
#define _MD1MODPPS_MD1MODPPS_POSN                           0x0
#define _MD1MODPPS_MD1MODPPS_POSITION                       0x0
#define _MD1MODPPS_MD1MODPPS_SIZE                           0x5
#define _MD1MODPPS_MD1MODPPS_LENGTH                         0x5
#define _MD1MODPPS_MD1MODPPS_MASK                           0x1F

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0xE90);
#ifndef _LIB_BUILD
asm("RA0PPS equ 0E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS                 :5;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0xE90);
// bitfield macros
#define _RA0PPS_RA0PPS_POSN                                 0x0
#define _RA0PPS_RA0PPS_POSITION                             0x0
#define _RA0PPS_RA0PPS_SIZE                                 0x5
#define _RA0PPS_RA0PPS_LENGTH                               0x5
#define _RA0PPS_RA0PPS_MASK                                 0x1F

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0xE91);
#ifndef _LIB_BUILD
asm("RA1PPS equ 0E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS                 :5;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0xE91);
// bitfield macros
#define _RA1PPS_RA1PPS_POSN                                 0x0
#define _RA1PPS_RA1PPS_POSITION                             0x0
#define _RA1PPS_RA1PPS_SIZE                                 0x5
#define _RA1PPS_RA1PPS_LENGTH                               0x5
#define _RA1PPS_RA1PPS_MASK                                 0x1F

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0xE92);
#ifndef _LIB_BUILD
asm("RA2PPS equ 0E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS                 :5;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0xE92);
// bitfield macros
#define _RA2PPS_RA2PPS_POSN                                 0x0
#define _RA2PPS_RA2PPS_POSITION                             0x0
#define _RA2PPS_RA2PPS_SIZE                                 0x5
#define _RA2PPS_RA2PPS_LENGTH                               0x5
#define _RA2PPS_RA2PPS_MASK                                 0x1F

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0xE94);
#ifndef _LIB_BUILD
asm("RA4PPS equ 0E94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS                 :5;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0xE94);
// bitfield macros
#define _RA4PPS_RA4PPS_POSN                                 0x0
#define _RA4PPS_RA4PPS_POSITION                             0x0
#define _RA4PPS_RA4PPS_SIZE                                 0x5
#define _RA4PPS_RA4PPS_LENGTH                               0x5
#define _RA4PPS_RA4PPS_MASK                                 0x1F

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0xE95);
#ifndef _LIB_BUILD
asm("RA5PPS equ 0E95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS                 :5;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0xE95);
// bitfield macros
#define _RA5PPS_RA5PPS_POSN                                 0x0
#define _RA5PPS_RA5PPS_POSITION                             0x0
#define _RA5PPS_RA5PPS_SIZE                                 0x5
#define _RA5PPS_RA5PPS_LENGTH                               0x5
#define _RA5PPS_RA5PPS_MASK                                 0x1F

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0xEA0);
#ifndef _LIB_BUILD
asm("RC0PPS equ 0EA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS                 :5;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0xEA0);
// bitfield macros
#define _RC0PPS_RC0PPS_POSN                                 0x0
#define _RC0PPS_RC0PPS_POSITION                             0x0
#define _RC0PPS_RC0PPS_SIZE                                 0x5
#define _RC0PPS_RC0PPS_LENGTH                               0x5
#define _RC0PPS_RC0PPS_MASK                                 0x1F

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0xEA1);
#ifndef _LIB_BUILD
asm("RC1PPS equ 0EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS                 :5;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0xEA1);
// bitfield macros
#define _RC1PPS_RC1PPS_POSN                                 0x0
#define _RC1PPS_RC1PPS_POSITION                             0x0
#define _RC1PPS_RC1PPS_SIZE                                 0x5
#define _RC1PPS_RC1PPS_LENGTH                               0x5
#define _RC1PPS_RC1PPS_MASK                                 0x1F

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0xEA2);
#ifndef _LIB_BUILD
asm("RC2PPS equ 0EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS                 :5;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0xEA2);
// bitfield macros
#define _RC2PPS_RC2PPS_POSN                                 0x0
#define _RC2PPS_RC2PPS_POSITION                             0x0
#define _RC2PPS_RC2PPS_SIZE                                 0x5
#define _RC2PPS_RC2PPS_LENGTH                               0x5
#define _RC2PPS_RC2PPS_MASK                                 0x1F

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0xEA3);
#ifndef _LIB_BUILD
asm("RC3PPS equ 0EA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS                 :5;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0xEA3);
// bitfield macros
#define _RC3PPS_RC3PPS_POSN                                 0x0
#define _RC3PPS_RC3PPS_POSITION                             0x0
#define _RC3PPS_RC3PPS_SIZE                                 0x5
#define _RC3PPS_RC3PPS_LENGTH                               0x5
#define _RC3PPS_RC3PPS_MASK                                 0x1F

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0xEA4);
#ifndef _LIB_BUILD
asm("RC4PPS equ 0EA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS                 :5;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0xEA4);
// bitfield macros
#define _RC4PPS_RC4PPS_POSN                                 0x0
#define _RC4PPS_RC4PPS_POSITION                             0x0
#define _RC4PPS_RC4PPS_SIZE                                 0x5
#define _RC4PPS_RC4PPS_LENGTH                               0x5
#define _RC4PPS_RC4PPS_MASK                                 0x1F

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0xEA5);
#ifndef _LIB_BUILD
asm("RC5PPS equ 0EA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS                 :5;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0xEA5);
// bitfield macros
#define _RC5PPS_RC5PPS_POSN                                 0x0
#define _RC5PPS_RC5PPS_POSITION                             0x0
#define _RC5PPS_RC5PPS_SIZE                                 0x5
#define _RC5PPS_RC5PPS_LENGTH                               0x5
#define _RC5PPS_RC5PPS_MASK                                 0x1F

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0xF0F);
#ifndef _LIB_BUILD
asm("CLCDATA equ 0F0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MCLC1OUT               :1;
        unsigned MCLC2OUT               :1;
        unsigned MCLC3OUT               :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0xF0F);
// bitfield macros
#define _CLCDATA_MCLC1OUT_POSN                              0x0
#define _CLCDATA_MCLC1OUT_POSITION                          0x0
#define _CLCDATA_MCLC1OUT_SIZE                              0x1
#define _CLCDATA_MCLC1OUT_LENGTH                            0x1
#define _CLCDATA_MCLC1OUT_MASK                              0x1
#define _CLCDATA_MCLC2OUT_POSN                              0x1
#define _CLCDATA_MCLC2OUT_POSITION                          0x1
#define _CLCDATA_MCLC2OUT_SIZE                              0x1
#define _CLCDATA_MCLC2OUT_LENGTH                            0x1
#define _CLCDATA_MCLC2OUT_MASK                              0x2
#define _CLCDATA_MCLC3OUT_POSN                              0x2
#define _CLCDATA_MCLC3OUT_POSITION                          0x2
#define _CLCDATA_MCLC3OUT_SIZE                              0x1
#define _CLCDATA_MCLC3OUT_LENGTH                            0x1
#define _CLCDATA_MCLC3OUT_MASK                              0x4

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0xF10);
#ifndef _LIB_BUILD
asm("CLC1CON equ 0F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned                        :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0xF10);
// bitfield macros
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0xF11);
#ifndef _LIB_BUILD
asm("CLC1POL equ 0F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0xF11);
// bitfield macros
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0xF12);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 0F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0xF12);
// bitfield macros
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0xF13);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 0F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0xF13);
// bitfield macros
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0xF14);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 0F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0xF14);
// bitfield macros
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0xF15);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 0F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0xF15);
// bitfield macros
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0xF16);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 0F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0xF16);
// bitfield macros
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80
#define _CLC1GLS0_D1N_POSN                                  0x0
#define _CLC1GLS0_D1N_POSITION                              0x0
#define _CLC1GLS0_D1N_SIZE                                  0x1
#define _CLC1GLS0_D1N_LENGTH                                0x1
#define _CLC1GLS0_D1N_MASK                                  0x1
#define _CLC1GLS0_D1T_POSN                                  0x1
#define _CLC1GLS0_D1T_POSITION                              0x1
#define _CLC1GLS0_D1T_SIZE                                  0x1
#define _CLC1GLS0_D1T_LENGTH                                0x1
#define _CLC1GLS0_D1T_MASK                                  0x2
#define _CLC1GLS0_D2N_POSN                                  0x2
#define _CLC1GLS0_D2N_POSITION                              0x2
#define _CLC1GLS0_D2N_SIZE                                  0x1
#define _CLC1GLS0_D2N_LENGTH                                0x1
#define _CLC1GLS0_D2N_MASK                                  0x4
#define _CLC1GLS0_D2T_POSN                                  0x3
#define _CLC1GLS0_D2T_POSITION                              0x3
#define _CLC1GLS0_D2T_SIZE                                  0x1
#define _CLC1GLS0_D2T_LENGTH                                0x1
#define _CLC1GLS0_D2T_MASK                                  0x8
#define _CLC1GLS0_D3N_POSN                                  0x4
#define _CLC1GLS0_D3N_POSITION                              0x4
#define _CLC1GLS0_D3N_SIZE                                  0x1
#define _CLC1GLS0_D3N_LENGTH                                0x1
#define _CLC1GLS0_D3N_MASK                                  0x10
#define _CLC1GLS0_D3T_POSN                                  0x5
#define _CLC1GLS0_D3T_POSITION                              0x5
#define _CLC1GLS0_D3T_SIZE                                  0x1
#define _CLC1GLS0_D3T_LENGTH                                0x1
#define _CLC1GLS0_D3T_MASK                                  0x20
#define _CLC1GLS0_D4N_POSN                                  0x6
#define _CLC1GLS0_D4N_POSITION                              0x6
#define _CLC1GLS0_D4N_SIZE                                  0x1
#define _CLC1GLS0_D4N_LENGTH                                0x1
#define _CLC1GLS0_D4N_MASK                                  0x40
#define _CLC1GLS0_D4T_POSN                                  0x7
#define _CLC1GLS0_D4T_POSITION                              0x7
#define _CLC1GLS0_D4T_SIZE                                  0x1
#define _CLC1GLS0_D4T_LENGTH                                0x1
#define _CLC1GLS0_D4T_MASK                                  0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0xF17);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 0F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0xF17);
// bitfield macros
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80
#define _CLC1GLS1_D1N_POSN                                  0x0
#define _CLC1GLS1_D1N_POSITION                              0x0
#define _CLC1GLS1_D1N_SIZE                                  0x1
#define _CLC1GLS1_D1N_LENGTH                                0x1
#define _CLC1GLS1_D1N_MASK                                  0x1
#define _CLC1GLS1_D1T_POSN                                  0x1
#define _CLC1GLS1_D1T_POSITION                              0x1
#define _CLC1GLS1_D1T_SIZE                                  0x1
#define _CLC1GLS1_D1T_LENGTH                                0x1
#define _CLC1GLS1_D1T_MASK                                  0x2
#define _CLC1GLS1_D2N_POSN                                  0x2
#define _CLC1GLS1_D2N_POSITION                              0x2
#define _CLC1GLS1_D2N_SIZE                                  0x1
#define _CLC1GLS1_D2N_LENGTH                                0x1
#define _CLC1GLS1_D2N_MASK                                  0x4
#define _CLC1GLS1_D2T_POSN                                  0x3
#define _CLC1GLS1_D2T_POSITION                              0x3
#define _CLC1GLS1_D2T_SIZE                                  0x1
#define _CLC1GLS1_D2T_LENGTH                                0x1
#define _CLC1GLS1_D2T_MASK                                  0x8
#define _CLC1GLS1_D3N_POSN                                  0x4
#define _CLC1GLS1_D3N_POSITION                              0x4
#define _CLC1GLS1_D3N_SIZE                                  0x1
#define _CLC1GLS1_D3N_LENGTH                                0x1
#define _CLC1GLS1_D3N_MASK                                  0x10
#define _CLC1GLS1_D3T_POSN                                  0x5
#define _CLC1GLS1_D3T_POSITION                              0x5
#define _CLC1GLS1_D3T_SIZE                                  0x1
#define _CLC1GLS1_D3T_LENGTH                                0x1
#define _CLC1GLS1_D3T_MASK                                  0x20
#define _CLC1GLS1_D4N_POSN                                  0x6
#define _CLC1GLS1_D4N_POSITION                              0x6
#define _CLC1GLS1_D4N_SIZE                                  0x1
#define _CLC1GLS1_D4N_LENGTH                                0x1
#define _CLC1GLS1_D4N_MASK                                  0x40
#define _CLC1GLS1_D4T_POSN                                  0x7
#define _CLC1GLS1_D4T_POSITION                              0x7
#define _CLC1GLS1_D4T_SIZE                                  0x1
#define _CLC1GLS1_D4T_LENGTH                                0x1
#define _CLC1GLS1_D4T_MASK                                  0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0xF18);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 0F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0xF18);
// bitfield macros
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80
#define _CLC1GLS2_D1N_POSN                                  0x0
#define _CLC1GLS2_D1N_POSITION                              0x0
#define _CLC1GLS2_D1N_SIZE                                  0x1
#define _CLC1GLS2_D1N_LENGTH                                0x1
#define _CLC1GLS2_D1N_MASK                                  0x1
#define _CLC1GLS2_D1T_POSN                                  0x1
#define _CLC1GLS2_D1T_POSITION                              0x1
#define _CLC1GLS2_D1T_SIZE                                  0x1
#define _CLC1GLS2_D1T_LENGTH                                0x1
#define _CLC1GLS2_D1T_MASK                                  0x2
#define _CLC1GLS2_D2N_POSN                                  0x2
#define _CLC1GLS2_D2N_POSITION                              0x2
#define _CLC1GLS2_D2N_SIZE                                  0x1
#define _CLC1GLS2_D2N_LENGTH                                0x1
#define _CLC1GLS2_D2N_MASK                                  0x4
#define _CLC1GLS2_D2T_POSN                                  0x3
#define _CLC1GLS2_D2T_POSITION                              0x3
#define _CLC1GLS2_D2T_SIZE                                  0x1
#define _CLC1GLS2_D2T_LENGTH                                0x1
#define _CLC1GLS2_D2T_MASK                                  0x8
#define _CLC1GLS2_D3N_POSN                                  0x4
#define _CLC1GLS2_D3N_POSITION                              0x4
#define _CLC1GLS2_D3N_SIZE                                  0x1
#define _CLC1GLS2_D3N_LENGTH                                0x1
#define _CLC1GLS2_D3N_MASK                                  0x10
#define _CLC1GLS2_D3T_POSN                                  0x5
#define _CLC1GLS2_D3T_POSITION                              0x5
#define _CLC1GLS2_D3T_SIZE                                  0x1
#define _CLC1GLS2_D3T_LENGTH                                0x1
#define _CLC1GLS2_D3T_MASK                                  0x20
#define _CLC1GLS2_D4N_POSN                                  0x6
#define _CLC1GLS2_D4N_POSITION                              0x6
#define _CLC1GLS2_D4N_SIZE                                  0x1
#define _CLC1GLS2_D4N_LENGTH                                0x1
#define _CLC1GLS2_D4N_MASK                                  0x40
#define _CLC1GLS2_D4T_POSN                                  0x7
#define _CLC1GLS2_D4T_POSITION                              0x7
#define _CLC1GLS2_D4T_SIZE                                  0x1
#define _CLC1GLS2_D4T_LENGTH                                0x1
#define _CLC1GLS2_D4T_MASK                                  0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0xF19);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 0F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0xF19);
// bitfield macros
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0xF1A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 0F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned                        :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0xF1A);
// bitfield macros
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0xF1B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 0F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0xF1B);
// bitfield macros
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0xF1C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 0F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0xF1C);
// bitfield macros
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0xF1D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 0F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0xF1D);
// bitfield macros
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0xF1E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 0F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0xF1E);
// bitfield macros
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0xF1F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 0F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0xF1F);
// bitfield macros
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0xF20);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 0F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0xF20);
// bitfield macros
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80
#define _CLC2GLS0_D1N_POSN                                  0x0
#define _CLC2GLS0_D1N_POSITION                              0x0
#define _CLC2GLS0_D1N_SIZE                                  0x1
#define _CLC2GLS0_D1N_LENGTH                                0x1
#define _CLC2GLS0_D1N_MASK                                  0x1
#define _CLC2GLS0_D1T_POSN                                  0x1
#define _CLC2GLS0_D1T_POSITION                              0x1
#define _CLC2GLS0_D1T_SIZE                                  0x1
#define _CLC2GLS0_D1T_LENGTH                                0x1
#define _CLC2GLS0_D1T_MASK                                  0x2
#define _CLC2GLS0_D2N_POSN                                  0x2
#define _CLC2GLS0_D2N_POSITION                              0x2
#define _CLC2GLS0_D2N_SIZE                                  0x1
#define _CLC2GLS0_D2N_LENGTH                                0x1
#define _CLC2GLS0_D2N_MASK                                  0x4
#define _CLC2GLS0_D2T_POSN                                  0x3
#define _CLC2GLS0_D2T_POSITION                              0x3
#define _CLC2GLS0_D2T_SIZE                                  0x1
#define _CLC2GLS0_D2T_LENGTH                                0x1
#define _CLC2GLS0_D2T_MASK                                  0x8
#define _CLC2GLS0_D3N_POSN                                  0x4
#define _CLC2GLS0_D3N_POSITION                              0x4
#define _CLC2GLS0_D3N_SIZE                                  0x1
#define _CLC2GLS0_D3N_LENGTH                                0x1
#define _CLC2GLS0_D3N_MASK                                  0x10
#define _CLC2GLS0_D3T_POSN                                  0x5
#define _CLC2GLS0_D3T_POSITION                              0x5
#define _CLC2GLS0_D3T_SIZE                                  0x1
#define _CLC2GLS0_D3T_LENGTH                                0x1
#define _CLC2GLS0_D3T_MASK                                  0x20
#define _CLC2GLS0_D4N_POSN                                  0x6
#define _CLC2GLS0_D4N_POSITION                              0x6
#define _CLC2GLS0_D4N_SIZE                                  0x1
#define _CLC2GLS0_D4N_LENGTH                                0x1
#define _CLC2GLS0_D4N_MASK                                  0x40
#define _CLC2GLS0_D4T_POSN                                  0x7
#define _CLC2GLS0_D4T_POSITION                              0x7
#define _CLC2GLS0_D4T_SIZE                                  0x1
#define _CLC2GLS0_D4T_LENGTH                                0x1
#define _CLC2GLS0_D4T_MASK                                  0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0xF21);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 0F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0xF21);
// bitfield macros
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80
#define _CLC2GLS1_D1N_POSN                                  0x0
#define _CLC2GLS1_D1N_POSITION                              0x0
#define _CLC2GLS1_D1N_SIZE                                  0x1
#define _CLC2GLS1_D1N_LENGTH                                0x1
#define _CLC2GLS1_D1N_MASK                                  0x1
#define _CLC2GLS1_D1T_POSN                                  0x1
#define _CLC2GLS1_D1T_POSITION                              0x1
#define _CLC2GLS1_D1T_SIZE                                  0x1
#define _CLC2GLS1_D1T_LENGTH                                0x1
#define _CLC2GLS1_D1T_MASK                                  0x2
#define _CLC2GLS1_D2N_POSN                                  0x2
#define _CLC2GLS1_D2N_POSITION                              0x2
#define _CLC2GLS1_D2N_SIZE                                  0x1
#define _CLC2GLS1_D2N_LENGTH                                0x1
#define _CLC2GLS1_D2N_MASK                                  0x4
#define _CLC2GLS1_D2T_POSN                                  0x3
#define _CLC2GLS1_D2T_POSITION                              0x3
#define _CLC2GLS1_D2T_SIZE                                  0x1
#define _CLC2GLS1_D2T_LENGTH                                0x1
#define _CLC2GLS1_D2T_MASK                                  0x8
#define _CLC2GLS1_D3N_POSN                                  0x4
#define _CLC2GLS1_D3N_POSITION                              0x4
#define _CLC2GLS1_D3N_SIZE                                  0x1
#define _CLC2GLS1_D3N_LENGTH                                0x1
#define _CLC2GLS1_D3N_MASK                                  0x10
#define _CLC2GLS1_D3T_POSN                                  0x5
#define _CLC2GLS1_D3T_POSITION                              0x5
#define _CLC2GLS1_D3T_SIZE                                  0x1
#define _CLC2GLS1_D3T_LENGTH                                0x1
#define _CLC2GLS1_D3T_MASK                                  0x20
#define _CLC2GLS1_D4N_POSN                                  0x6
#define _CLC2GLS1_D4N_POSITION                              0x6
#define _CLC2GLS1_D4N_SIZE                                  0x1
#define _CLC2GLS1_D4N_LENGTH                                0x1
#define _CLC2GLS1_D4N_MASK                                  0x40
#define _CLC2GLS1_D4T_POSN                                  0x7
#define _CLC2GLS1_D4T_POSITION                              0x7
#define _CLC2GLS1_D4T_SIZE                                  0x1
#define _CLC2GLS1_D4T_LENGTH                                0x1
#define _CLC2GLS1_D4T_MASK                                  0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0xF22);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 0F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0xF22);
// bitfield macros
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80
#define _CLC2GLS2_D1N_POSN                                  0x0
#define _CLC2GLS2_D1N_POSITION                              0x0
#define _CLC2GLS2_D1N_SIZE                                  0x1
#define _CLC2GLS2_D1N_LENGTH                                0x1
#define _CLC2GLS2_D1N_MASK                                  0x1
#define _CLC2GLS2_D1T_POSN                                  0x1
#define _CLC2GLS2_D1T_POSITION                              0x1
#define _CLC2GLS2_D1T_SIZE                                  0x1
#define _CLC2GLS2_D1T_LENGTH                                0x1
#define _CLC2GLS2_D1T_MASK                                  0x2
#define _CLC2GLS2_D2N_POSN                                  0x2
#define _CLC2GLS2_D2N_POSITION                              0x2
#define _CLC2GLS2_D2N_SIZE                                  0x1
#define _CLC2GLS2_D2N_LENGTH                                0x1
#define _CLC2GLS2_D2N_MASK                                  0x4
#define _CLC2GLS2_D2T_POSN                                  0x3
#define _CLC2GLS2_D2T_POSITION                              0x3
#define _CLC2GLS2_D2T_SIZE                                  0x1
#define _CLC2GLS2_D2T_LENGTH                                0x1
#define _CLC2GLS2_D2T_MASK                                  0x8
#define _CLC2GLS2_D3N_POSN                                  0x4
#define _CLC2GLS2_D3N_POSITION                              0x4
#define _CLC2GLS2_D3N_SIZE                                  0x1
#define _CLC2GLS2_D3N_LENGTH                                0x1
#define _CLC2GLS2_D3N_MASK                                  0x10
#define _CLC2GLS2_D3T_POSN                                  0x5
#define _CLC2GLS2_D3T_POSITION                              0x5
#define _CLC2GLS2_D3T_SIZE                                  0x1
#define _CLC2GLS2_D3T_LENGTH                                0x1
#define _CLC2GLS2_D3T_MASK                                  0x20
#define _CLC2GLS2_D4N_POSN                                  0x6
#define _CLC2GLS2_D4N_POSITION                              0x6
#define _CLC2GLS2_D4N_SIZE                                  0x1
#define _CLC2GLS2_D4N_LENGTH                                0x1
#define _CLC2GLS2_D4N_MASK                                  0x40
#define _CLC2GLS2_D4T_POSN                                  0x7
#define _CLC2GLS2_D4T_POSITION                              0x7
#define _CLC2GLS2_D4T_SIZE                                  0x1
#define _CLC2GLS2_D4T_LENGTH                                0x1
#define _CLC2GLS2_D4T_MASK                                  0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0xF23);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 0F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0xF23);
// bitfield macros
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80

// Register: CLC3CON
#define CLC3CON CLC3CON
extern volatile unsigned char           CLC3CON             __at(0xF24);
#ifndef _LIB_BUILD
asm("CLC3CON equ 0F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3MODE                :3;
        unsigned LC3INTN                :1;
        unsigned LC3INTP                :1;
        unsigned LC3OUT                 :1;
        unsigned                        :1;
        unsigned LC3EN                  :1;
    };
    struct {
        unsigned LC3MODE0               :1;
        unsigned LC3MODE1               :1;
        unsigned LC3MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC3CONbits_t;
extern volatile CLC3CONbits_t CLC3CONbits __at(0xF24);
// bitfield macros
#define _CLC3CON_LC3MODE_POSN                               0x0
#define _CLC3CON_LC3MODE_POSITION                           0x0
#define _CLC3CON_LC3MODE_SIZE                               0x3
#define _CLC3CON_LC3MODE_LENGTH                             0x3
#define _CLC3CON_LC3MODE_MASK                               0x7
#define _CLC3CON_LC3INTN_POSN                               0x3
#define _CLC3CON_LC3INTN_POSITION                           0x3
#define _CLC3CON_LC3INTN_SIZE                               0x1
#define _CLC3CON_LC3INTN_LENGTH                             0x1
#define _CLC3CON_LC3INTN_MASK                               0x8
#define _CLC3CON_LC3INTP_POSN                               0x4
#define _CLC3CON_LC3INTP_POSITION                           0x4
#define _CLC3CON_LC3INTP_SIZE                               0x1
#define _CLC3CON_LC3INTP_LENGTH                             0x1
#define _CLC3CON_LC3INTP_MASK                               0x10
#define _CLC3CON_LC3OUT_POSN                                0x5
#define _CLC3CON_LC3OUT_POSITION                            0x5
#define _CLC3CON_LC3OUT_SIZE                                0x1
#define _CLC3CON_LC3OUT_LENGTH                              0x1
#define _CLC3CON_LC3OUT_MASK                                0x20
#define _CLC3CON_LC3EN_POSN                                 0x7
#define _CLC3CON_LC3EN_POSITION                             0x7
#define _CLC3CON_LC3EN_SIZE                                 0x1
#define _CLC3CON_LC3EN_LENGTH                               0x1
#define _CLC3CON_LC3EN_MASK                                 0x80
#define _CLC3CON_LC3MODE0_POSN                              0x0
#define _CLC3CON_LC3MODE0_POSITION                          0x0
#define _CLC3CON_LC3MODE0_SIZE                              0x1
#define _CLC3CON_LC3MODE0_LENGTH                            0x1
#define _CLC3CON_LC3MODE0_MASK                              0x1
#define _CLC3CON_LC3MODE1_POSN                              0x1
#define _CLC3CON_LC3MODE1_POSITION                          0x1
#define _CLC3CON_LC3MODE1_SIZE                              0x1
#define _CLC3CON_LC3MODE1_LENGTH                            0x1
#define _CLC3CON_LC3MODE1_MASK                              0x2
#define _CLC3CON_LC3MODE2_POSN                              0x2
#define _CLC3CON_LC3MODE2_POSITION                          0x2
#define _CLC3CON_LC3MODE2_SIZE                              0x1
#define _CLC3CON_LC3MODE2_LENGTH                            0x1
#define _CLC3CON_LC3MODE2_MASK                              0x4
#define _CLC3CON_MODE_POSN                                  0x0
#define _CLC3CON_MODE_POSITION                              0x0
#define _CLC3CON_MODE_SIZE                                  0x3
#define _CLC3CON_MODE_LENGTH                                0x3
#define _CLC3CON_MODE_MASK                                  0x7
#define _CLC3CON_INTN_POSN                                  0x3
#define _CLC3CON_INTN_POSITION                              0x3
#define _CLC3CON_INTN_SIZE                                  0x1
#define _CLC3CON_INTN_LENGTH                                0x1
#define _CLC3CON_INTN_MASK                                  0x8
#define _CLC3CON_INTP_POSN                                  0x4
#define _CLC3CON_INTP_POSITION                              0x4
#define _CLC3CON_INTP_SIZE                                  0x1
#define _CLC3CON_INTP_LENGTH                                0x1
#define _CLC3CON_INTP_MASK                                  0x10
#define _CLC3CON_OUT_POSN                                   0x5
#define _CLC3CON_OUT_POSITION                               0x5
#define _CLC3CON_OUT_SIZE                                   0x1
#define _CLC3CON_OUT_LENGTH                                 0x1
#define _CLC3CON_OUT_MASK                                   0x20
#define _CLC3CON_EN_POSN                                    0x7
#define _CLC3CON_EN_POSITION                                0x7
#define _CLC3CON_EN_SIZE                                    0x1
#define _CLC3CON_EN_LENGTH                                  0x1
#define _CLC3CON_EN_MASK                                    0x80
#define _CLC3CON_MODE0_POSN                                 0x0
#define _CLC3CON_MODE0_POSITION                             0x0
#define _CLC3CON_MODE0_SIZE                                 0x1
#define _CLC3CON_MODE0_LENGTH                               0x1
#define _CLC3CON_MODE0_MASK                                 0x1
#define _CLC3CON_MODE1_POSN                                 0x1
#define _CLC3CON_MODE1_POSITION                             0x1
#define _CLC3CON_MODE1_SIZE                                 0x1
#define _CLC3CON_MODE1_LENGTH                               0x1
#define _CLC3CON_MODE1_MASK                                 0x2
#define _CLC3CON_MODE2_POSN                                 0x2
#define _CLC3CON_MODE2_POSITION                             0x2
#define _CLC3CON_MODE2_SIZE                                 0x1
#define _CLC3CON_MODE2_LENGTH                               0x1
#define _CLC3CON_MODE2_MASK                                 0x4

// Register: CLC3POL
#define CLC3POL CLC3POL
extern volatile unsigned char           CLC3POL             __at(0xF25);
#ifndef _LIB_BUILD
asm("CLC3POL equ 0F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1POL               :1;
        unsigned LC3G2POL               :1;
        unsigned LC3G3POL               :1;
        unsigned LC3G4POL               :1;
        unsigned                        :3;
        unsigned LC3POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC3POLbits_t;
extern volatile CLC3POLbits_t CLC3POLbits __at(0xF25);
// bitfield macros
#define _CLC3POL_LC3G1POL_POSN                              0x0
#define _CLC3POL_LC3G1POL_POSITION                          0x0
#define _CLC3POL_LC3G1POL_SIZE                              0x1
#define _CLC3POL_LC3G1POL_LENGTH                            0x1
#define _CLC3POL_LC3G1POL_MASK                              0x1
#define _CLC3POL_LC3G2POL_POSN                              0x1
#define _CLC3POL_LC3G2POL_POSITION                          0x1
#define _CLC3POL_LC3G2POL_SIZE                              0x1
#define _CLC3POL_LC3G2POL_LENGTH                            0x1
#define _CLC3POL_LC3G2POL_MASK                              0x2
#define _CLC3POL_LC3G3POL_POSN                              0x2
#define _CLC3POL_LC3G3POL_POSITION                          0x2
#define _CLC3POL_LC3G3POL_SIZE                              0x1
#define _CLC3POL_LC3G3POL_LENGTH                            0x1
#define _CLC3POL_LC3G3POL_MASK                              0x4
#define _CLC3POL_LC3G4POL_POSN                              0x3
#define _CLC3POL_LC3G4POL_POSITION                          0x3
#define _CLC3POL_LC3G4POL_SIZE                              0x1
#define _CLC3POL_LC3G4POL_LENGTH                            0x1
#define _CLC3POL_LC3G4POL_MASK                              0x8
#define _CLC3POL_LC3POL_POSN                                0x7
#define _CLC3POL_LC3POL_POSITION                            0x7
#define _CLC3POL_LC3POL_SIZE                                0x1
#define _CLC3POL_LC3POL_LENGTH                              0x1
#define _CLC3POL_LC3POL_MASK                                0x80
#define _CLC3POL_G1POL_POSN                                 0x0
#define _CLC3POL_G1POL_POSITION                             0x0
#define _CLC3POL_G1POL_SIZE                                 0x1
#define _CLC3POL_G1POL_LENGTH                               0x1
#define _CLC3POL_G1POL_MASK                                 0x1
#define _CLC3POL_G2POL_POSN                                 0x1
#define _CLC3POL_G2POL_POSITION                             0x1
#define _CLC3POL_G2POL_SIZE                                 0x1
#define _CLC3POL_G2POL_LENGTH                               0x1
#define _CLC3POL_G2POL_MASK                                 0x2
#define _CLC3POL_G3POL_POSN                                 0x2
#define _CLC3POL_G3POL_POSITION                             0x2
#define _CLC3POL_G3POL_SIZE                                 0x1
#define _CLC3POL_G3POL_LENGTH                               0x1
#define _CLC3POL_G3POL_MASK                                 0x4
#define _CLC3POL_G4POL_POSN                                 0x3
#define _CLC3POL_G4POL_POSITION                             0x3
#define _CLC3POL_G4POL_SIZE                                 0x1
#define _CLC3POL_G4POL_LENGTH                               0x1
#define _CLC3POL_G4POL_MASK                                 0x8
#define _CLC3POL_POL_POSN                                   0x7
#define _CLC3POL_POL_POSITION                               0x7
#define _CLC3POL_POL_SIZE                                   0x1
#define _CLC3POL_POL_LENGTH                                 0x1
#define _CLC3POL_POL_MASK                                   0x80

// Register: CLC3SEL0
#define CLC3SEL0 CLC3SEL0
extern volatile unsigned char           CLC3SEL0            __at(0xF26);
#ifndef _LIB_BUILD
asm("CLC3SEL0 equ 0F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D1S0                :1;
        unsigned LC3D1S1                :1;
        unsigned LC3D1S2                :1;
        unsigned LC3D1S3                :1;
        unsigned LC3D1S4                :1;
    };
    struct {
        unsigned LC3D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
    };
} CLC3SEL0bits_t;
extern volatile CLC3SEL0bits_t CLC3SEL0bits __at(0xF26);
// bitfield macros
#define _CLC3SEL0_LC3D1S0_POSN                              0x0
#define _CLC3SEL0_LC3D1S0_POSITION                          0x0
#define _CLC3SEL0_LC3D1S0_SIZE                              0x1
#define _CLC3SEL0_LC3D1S0_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S0_MASK                              0x1
#define _CLC3SEL0_LC3D1S1_POSN                              0x1
#define _CLC3SEL0_LC3D1S1_POSITION                          0x1
#define _CLC3SEL0_LC3D1S1_SIZE                              0x1
#define _CLC3SEL0_LC3D1S1_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S1_MASK                              0x2
#define _CLC3SEL0_LC3D1S2_POSN                              0x2
#define _CLC3SEL0_LC3D1S2_POSITION                          0x2
#define _CLC3SEL0_LC3D1S2_SIZE                              0x1
#define _CLC3SEL0_LC3D1S2_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S2_MASK                              0x4
#define _CLC3SEL0_LC3D1S3_POSN                              0x3
#define _CLC3SEL0_LC3D1S3_POSITION                          0x3
#define _CLC3SEL0_LC3D1S3_SIZE                              0x1
#define _CLC3SEL0_LC3D1S3_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S3_MASK                              0x8
#define _CLC3SEL0_LC3D1S4_POSN                              0x4
#define _CLC3SEL0_LC3D1S4_POSITION                          0x4
#define _CLC3SEL0_LC3D1S4_SIZE                              0x1
#define _CLC3SEL0_LC3D1S4_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S4_MASK                              0x10
#define _CLC3SEL0_LC3D1S_POSN                               0x0
#define _CLC3SEL0_LC3D1S_POSITION                           0x0
#define _CLC3SEL0_LC3D1S_SIZE                               0x8
#define _CLC3SEL0_LC3D1S_LENGTH                             0x8
#define _CLC3SEL0_LC3D1S_MASK                               0xFF
#define _CLC3SEL0_D1S_POSN                                  0x0
#define _CLC3SEL0_D1S_POSITION                              0x0
#define _CLC3SEL0_D1S_SIZE                                  0x8
#define _CLC3SEL0_D1S_LENGTH                                0x8
#define _CLC3SEL0_D1S_MASK                                  0xFF
#define _CLC3SEL0_D1S0_POSN                                 0x0
#define _CLC3SEL0_D1S0_POSITION                             0x0
#define _CLC3SEL0_D1S0_SIZE                                 0x1
#define _CLC3SEL0_D1S0_LENGTH                               0x1
#define _CLC3SEL0_D1S0_MASK                                 0x1
#define _CLC3SEL0_D1S1_POSN                                 0x1
#define _CLC3SEL0_D1S1_POSITION                             0x1
#define _CLC3SEL0_D1S1_SIZE                                 0x1
#define _CLC3SEL0_D1S1_LENGTH                               0x1
#define _CLC3SEL0_D1S1_MASK                                 0x2
#define _CLC3SEL0_D1S2_POSN                                 0x2
#define _CLC3SEL0_D1S2_POSITION                             0x2
#define _CLC3SEL0_D1S2_SIZE                                 0x1
#define _CLC3SEL0_D1S2_LENGTH                               0x1
#define _CLC3SEL0_D1S2_MASK                                 0x4
#define _CLC3SEL0_D1S3_POSN                                 0x3
#define _CLC3SEL0_D1S3_POSITION                             0x3
#define _CLC3SEL0_D1S3_SIZE                                 0x1
#define _CLC3SEL0_D1S3_LENGTH                               0x1
#define _CLC3SEL0_D1S3_MASK                                 0x8
#define _CLC3SEL0_D1S4_POSN                                 0x4
#define _CLC3SEL0_D1S4_POSITION                             0x4
#define _CLC3SEL0_D1S4_SIZE                                 0x1
#define _CLC3SEL0_D1S4_LENGTH                               0x1
#define _CLC3SEL0_D1S4_MASK                                 0x10

// Register: CLC3SEL1
#define CLC3SEL1 CLC3SEL1
extern volatile unsigned char           CLC3SEL1            __at(0xF27);
#ifndef _LIB_BUILD
asm("CLC3SEL1 equ 0F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D2S0                :1;
        unsigned LC3D2S1                :1;
        unsigned LC3D2S2                :1;
        unsigned LC3D2S3                :1;
        unsigned LC3D2S4                :1;
    };
    struct {
        unsigned LC3D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
    };
} CLC3SEL1bits_t;
extern volatile CLC3SEL1bits_t CLC3SEL1bits __at(0xF27);
// bitfield macros
#define _CLC3SEL1_LC3D2S0_POSN                              0x0
#define _CLC3SEL1_LC3D2S0_POSITION                          0x0
#define _CLC3SEL1_LC3D2S0_SIZE                              0x1
#define _CLC3SEL1_LC3D2S0_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S0_MASK                              0x1
#define _CLC3SEL1_LC3D2S1_POSN                              0x1
#define _CLC3SEL1_LC3D2S1_POSITION                          0x1
#define _CLC3SEL1_LC3D2S1_SIZE                              0x1
#define _CLC3SEL1_LC3D2S1_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S1_MASK                              0x2
#define _CLC3SEL1_LC3D2S2_POSN                              0x2
#define _CLC3SEL1_LC3D2S2_POSITION                          0x2
#define _CLC3SEL1_LC3D2S2_SIZE                              0x1
#define _CLC3SEL1_LC3D2S2_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S2_MASK                              0x4
#define _CLC3SEL1_LC3D2S3_POSN                              0x3
#define _CLC3SEL1_LC3D2S3_POSITION                          0x3
#define _CLC3SEL1_LC3D2S3_SIZE                              0x1
#define _CLC3SEL1_LC3D2S3_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S3_MASK                              0x8
#define _CLC3SEL1_LC3D2S4_POSN                              0x4
#define _CLC3SEL1_LC3D2S4_POSITION                          0x4
#define _CLC3SEL1_LC3D2S4_SIZE                              0x1
#define _CLC3SEL1_LC3D2S4_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S4_MASK                              0x10
#define _CLC3SEL1_LC3D2S_POSN                               0x0
#define _CLC3SEL1_LC3D2S_POSITION                           0x0
#define _CLC3SEL1_LC3D2S_SIZE                               0x8
#define _CLC3SEL1_LC3D2S_LENGTH                             0x8
#define _CLC3SEL1_LC3D2S_MASK                               0xFF
#define _CLC3SEL1_D2S_POSN                                  0x0
#define _CLC3SEL1_D2S_POSITION                              0x0
#define _CLC3SEL1_D2S_SIZE                                  0x8
#define _CLC3SEL1_D2S_LENGTH                                0x8
#define _CLC3SEL1_D2S_MASK                                  0xFF
#define _CLC3SEL1_D2S0_POSN                                 0x0
#define _CLC3SEL1_D2S0_POSITION                             0x0
#define _CLC3SEL1_D2S0_SIZE                                 0x1
#define _CLC3SEL1_D2S0_LENGTH                               0x1
#define _CLC3SEL1_D2S0_MASK                                 0x1
#define _CLC3SEL1_D2S1_POSN                                 0x1
#define _CLC3SEL1_D2S1_POSITION                             0x1
#define _CLC3SEL1_D2S1_SIZE                                 0x1
#define _CLC3SEL1_D2S1_LENGTH                               0x1
#define _CLC3SEL1_D2S1_MASK                                 0x2
#define _CLC3SEL1_D2S2_POSN                                 0x2
#define _CLC3SEL1_D2S2_POSITION                             0x2
#define _CLC3SEL1_D2S2_SIZE                                 0x1
#define _CLC3SEL1_D2S2_LENGTH                               0x1
#define _CLC3SEL1_D2S2_MASK                                 0x4
#define _CLC3SEL1_D2S3_POSN                                 0x3
#define _CLC3SEL1_D2S3_POSITION                             0x3
#define _CLC3SEL1_D2S3_SIZE                                 0x1
#define _CLC3SEL1_D2S3_LENGTH                               0x1
#define _CLC3SEL1_D2S3_MASK                                 0x8
#define _CLC3SEL1_D2S4_POSN                                 0x4
#define _CLC3SEL1_D2S4_POSITION                             0x4
#define _CLC3SEL1_D2S4_SIZE                                 0x1
#define _CLC3SEL1_D2S4_LENGTH                               0x1
#define _CLC3SEL1_D2S4_MASK                                 0x10

// Register: CLC3SEL2
#define CLC3SEL2 CLC3SEL2
extern volatile unsigned char           CLC3SEL2            __at(0xF28);
#ifndef _LIB_BUILD
asm("CLC3SEL2 equ 0F28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D3S0                :1;
        unsigned LC3D3S1                :1;
        unsigned LC3D3S2                :1;
        unsigned LC3D3S3                :1;
        unsigned LC3D3S4                :1;
    };
    struct {
        unsigned LC3D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
    };
} CLC3SEL2bits_t;
extern volatile CLC3SEL2bits_t CLC3SEL2bits __at(0xF28);
// bitfield macros
#define _CLC3SEL2_LC3D3S0_POSN                              0x0
#define _CLC3SEL2_LC3D3S0_POSITION                          0x0
#define _CLC3SEL2_LC3D3S0_SIZE                              0x1
#define _CLC3SEL2_LC3D3S0_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S0_MASK                              0x1
#define _CLC3SEL2_LC3D3S1_POSN                              0x1
#define _CLC3SEL2_LC3D3S1_POSITION                          0x1
#define _CLC3SEL2_LC3D3S1_SIZE                              0x1
#define _CLC3SEL2_LC3D3S1_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S1_MASK                              0x2
#define _CLC3SEL2_LC3D3S2_POSN                              0x2
#define _CLC3SEL2_LC3D3S2_POSITION                          0x2
#define _CLC3SEL2_LC3D3S2_SIZE                              0x1
#define _CLC3SEL2_LC3D3S2_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S2_MASK                              0x4
#define _CLC3SEL2_LC3D3S3_POSN                              0x3
#define _CLC3SEL2_LC3D3S3_POSITION                          0x3
#define _CLC3SEL2_LC3D3S3_SIZE                              0x1
#define _CLC3SEL2_LC3D3S3_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S3_MASK                              0x8
#define _CLC3SEL2_LC3D3S4_POSN                              0x4
#define _CLC3SEL2_LC3D3S4_POSITION                          0x4
#define _CLC3SEL2_LC3D3S4_SIZE                              0x1
#define _CLC3SEL2_LC3D3S4_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S4_MASK                              0x10
#define _CLC3SEL2_LC3D3S_POSN                               0x0
#define _CLC3SEL2_LC3D3S_POSITION                           0x0
#define _CLC3SEL2_LC3D3S_SIZE                               0x8
#define _CLC3SEL2_LC3D3S_LENGTH                             0x8
#define _CLC3SEL2_LC3D3S_MASK                               0xFF
#define _CLC3SEL2_D3S_POSN                                  0x0
#define _CLC3SEL2_D3S_POSITION                              0x0
#define _CLC3SEL2_D3S_SIZE                                  0x8
#define _CLC3SEL2_D3S_LENGTH                                0x8
#define _CLC3SEL2_D3S_MASK                                  0xFF
#define _CLC3SEL2_D3S0_POSN                                 0x0
#define _CLC3SEL2_D3S0_POSITION                             0x0
#define _CLC3SEL2_D3S0_SIZE                                 0x1
#define _CLC3SEL2_D3S0_LENGTH                               0x1
#define _CLC3SEL2_D3S0_MASK                                 0x1
#define _CLC3SEL2_D3S1_POSN                                 0x1
#define _CLC3SEL2_D3S1_POSITION                             0x1
#define _CLC3SEL2_D3S1_SIZE                                 0x1
#define _CLC3SEL2_D3S1_LENGTH                               0x1
#define _CLC3SEL2_D3S1_MASK                                 0x2
#define _CLC3SEL2_D3S2_POSN                                 0x2
#define _CLC3SEL2_D3S2_POSITION                             0x2
#define _CLC3SEL2_D3S2_SIZE                                 0x1
#define _CLC3SEL2_D3S2_LENGTH                               0x1
#define _CLC3SEL2_D3S2_MASK                                 0x4
#define _CLC3SEL2_D3S3_POSN                                 0x3
#define _CLC3SEL2_D3S3_POSITION                             0x3
#define _CLC3SEL2_D3S3_SIZE                                 0x1
#define _CLC3SEL2_D3S3_LENGTH                               0x1
#define _CLC3SEL2_D3S3_MASK                                 0x8
#define _CLC3SEL2_D3S4_POSN                                 0x4
#define _CLC3SEL2_D3S4_POSITION                             0x4
#define _CLC3SEL2_D3S4_SIZE                                 0x1
#define _CLC3SEL2_D3S4_LENGTH                               0x1
#define _CLC3SEL2_D3S4_MASK                                 0x10

// Register: CLC3SEL3
#define CLC3SEL3 CLC3SEL3
extern volatile unsigned char           CLC3SEL3            __at(0xF29);
#ifndef _LIB_BUILD
asm("CLC3SEL3 equ 0F29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D4S0                :1;
        unsigned LC3D4S1                :1;
        unsigned LC3D4S2                :1;
        unsigned LC3D4S3                :1;
        unsigned LC3D4S4                :1;
    };
    struct {
        unsigned LC3D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
    };
} CLC3SEL3bits_t;
extern volatile CLC3SEL3bits_t CLC3SEL3bits __at(0xF29);
// bitfield macros
#define _CLC3SEL3_LC3D4S0_POSN                              0x0
#define _CLC3SEL3_LC3D4S0_POSITION                          0x0
#define _CLC3SEL3_LC3D4S0_SIZE                              0x1
#define _CLC3SEL3_LC3D4S0_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S0_MASK                              0x1
#define _CLC3SEL3_LC3D4S1_POSN                              0x1
#define _CLC3SEL3_LC3D4S1_POSITION                          0x1
#define _CLC3SEL3_LC3D4S1_SIZE                              0x1
#define _CLC3SEL3_LC3D4S1_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S1_MASK                              0x2
#define _CLC3SEL3_LC3D4S2_POSN                              0x2
#define _CLC3SEL3_LC3D4S2_POSITION                          0x2
#define _CLC3SEL3_LC3D4S2_SIZE                              0x1
#define _CLC3SEL3_LC3D4S2_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S2_MASK                              0x4
#define _CLC3SEL3_LC3D4S3_POSN                              0x3
#define _CLC3SEL3_LC3D4S3_POSITION                          0x3
#define _CLC3SEL3_LC3D4S3_SIZE                              0x1
#define _CLC3SEL3_LC3D4S3_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S3_MASK                              0x8
#define _CLC3SEL3_LC3D4S4_POSN                              0x4
#define _CLC3SEL3_LC3D4S4_POSITION                          0x4
#define _CLC3SEL3_LC3D4S4_SIZE                              0x1
#define _CLC3SEL3_LC3D4S4_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S4_MASK                              0x10
#define _CLC3SEL3_LC3D4S_POSN                               0x0
#define _CLC3SEL3_LC3D4S_POSITION                           0x0
#define _CLC3SEL3_LC3D4S_SIZE                               0x8
#define _CLC3SEL3_LC3D4S_LENGTH                             0x8
#define _CLC3SEL3_LC3D4S_MASK                               0xFF
#define _CLC3SEL3_D4S_POSN                                  0x0
#define _CLC3SEL3_D4S_POSITION                              0x0
#define _CLC3SEL3_D4S_SIZE                                  0x8
#define _CLC3SEL3_D4S_LENGTH                                0x8
#define _CLC3SEL3_D4S_MASK                                  0xFF
#define _CLC3SEL3_D4S0_POSN                                 0x0
#define _CLC3SEL3_D4S0_POSITION                             0x0
#define _CLC3SEL3_D4S0_SIZE                                 0x1
#define _CLC3SEL3_D4S0_LENGTH                               0x1
#define _CLC3SEL3_D4S0_MASK                                 0x1
#define _CLC3SEL3_D4S1_POSN                                 0x1
#define _CLC3SEL3_D4S1_POSITION                             0x1
#define _CLC3SEL3_D4S1_SIZE                                 0x1
#define _CLC3SEL3_D4S1_LENGTH                               0x1
#define _CLC3SEL3_D4S1_MASK                                 0x2
#define _CLC3SEL3_D4S2_POSN                                 0x2
#define _CLC3SEL3_D4S2_POSITION                             0x2
#define _CLC3SEL3_D4S2_SIZE                                 0x1
#define _CLC3SEL3_D4S2_LENGTH                               0x1
#define _CLC3SEL3_D4S2_MASK                                 0x4
#define _CLC3SEL3_D4S3_POSN                                 0x3
#define _CLC3SEL3_D4S3_POSITION                             0x3
#define _CLC3SEL3_D4S3_SIZE                                 0x1
#define _CLC3SEL3_D4S3_LENGTH                               0x1
#define _CLC3SEL3_D4S3_MASK                                 0x8
#define _CLC3SEL3_D4S4_POSN                                 0x4
#define _CLC3SEL3_D4S4_POSITION                             0x4
#define _CLC3SEL3_D4S4_SIZE                                 0x1
#define _CLC3SEL3_D4S4_LENGTH                               0x1
#define _CLC3SEL3_D4S4_MASK                                 0x10

// Register: CLC3GLS0
#define CLC3GLS0 CLC3GLS0
extern volatile unsigned char           CLC3GLS0            __at(0xF2A);
#ifndef _LIB_BUILD
asm("CLC3GLS0 equ 0F2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1D1N               :1;
        unsigned LC3G1D1T               :1;
        unsigned LC3G1D2N               :1;
        unsigned LC3G1D2T               :1;
        unsigned LC3G1D3N               :1;
        unsigned LC3G1D3T               :1;
        unsigned LC3G1D4N               :1;
        unsigned LC3G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS0bits_t;
extern volatile CLC3GLS0bits_t CLC3GLS0bits __at(0xF2A);
// bitfield macros
#define _CLC3GLS0_LC3G1D1N_POSN                             0x0
#define _CLC3GLS0_LC3G1D1N_POSITION                         0x0
#define _CLC3GLS0_LC3G1D1N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1N_MASK                             0x1
#define _CLC3GLS0_LC3G1D1T_POSN                             0x1
#define _CLC3GLS0_LC3G1D1T_POSITION                         0x1
#define _CLC3GLS0_LC3G1D1T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1T_MASK                             0x2
#define _CLC3GLS0_LC3G1D2N_POSN                             0x2
#define _CLC3GLS0_LC3G1D2N_POSITION                         0x2
#define _CLC3GLS0_LC3G1D2N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2N_MASK                             0x4
#define _CLC3GLS0_LC3G1D2T_POSN                             0x3
#define _CLC3GLS0_LC3G1D2T_POSITION                         0x3
#define _CLC3GLS0_LC3G1D2T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2T_MASK                             0x8
#define _CLC3GLS0_LC3G1D3N_POSN                             0x4
#define _CLC3GLS0_LC3G1D3N_POSITION                         0x4
#define _CLC3GLS0_LC3G1D3N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3N_MASK                             0x10
#define _CLC3GLS0_LC3G1D3T_POSN                             0x5
#define _CLC3GLS0_LC3G1D3T_POSITION                         0x5
#define _CLC3GLS0_LC3G1D3T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3T_MASK                             0x20
#define _CLC3GLS0_LC3G1D4N_POSN                             0x6
#define _CLC3GLS0_LC3G1D4N_POSITION                         0x6
#define _CLC3GLS0_LC3G1D4N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4N_MASK                             0x40
#define _CLC3GLS0_LC3G1D4T_POSN                             0x7
#define _CLC3GLS0_LC3G1D4T_POSITION                         0x7
#define _CLC3GLS0_LC3G1D4T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4T_MASK                             0x80
#define _CLC3GLS0_D1N_POSN                                  0x0
#define _CLC3GLS0_D1N_POSITION                              0x0
#define _CLC3GLS0_D1N_SIZE                                  0x1
#define _CLC3GLS0_D1N_LENGTH                                0x1
#define _CLC3GLS0_D1N_MASK                                  0x1
#define _CLC3GLS0_D1T_POSN                                  0x1
#define _CLC3GLS0_D1T_POSITION                              0x1
#define _CLC3GLS0_D1T_SIZE                                  0x1
#define _CLC3GLS0_D1T_LENGTH                                0x1
#define _CLC3GLS0_D1T_MASK                                  0x2
#define _CLC3GLS0_D2N_POSN                                  0x2
#define _CLC3GLS0_D2N_POSITION                              0x2
#define _CLC3GLS0_D2N_SIZE                                  0x1
#define _CLC3GLS0_D2N_LENGTH                                0x1
#define _CLC3GLS0_D2N_MASK                                  0x4
#define _CLC3GLS0_D2T_POSN                                  0x3
#define _CLC3GLS0_D2T_POSITION                              0x3
#define _CLC3GLS0_D2T_SIZE                                  0x1
#define _CLC3GLS0_D2T_LENGTH                                0x1
#define _CLC3GLS0_D2T_MASK                                  0x8
#define _CLC3GLS0_D3N_POSN                                  0x4
#define _CLC3GLS0_D3N_POSITION                              0x4
#define _CLC3GLS0_D3N_SIZE                                  0x1
#define _CLC3GLS0_D3N_LENGTH                                0x1
#define _CLC3GLS0_D3N_MASK                                  0x10
#define _CLC3GLS0_D3T_POSN                                  0x5
#define _CLC3GLS0_D3T_POSITION                              0x5
#define _CLC3GLS0_D3T_SIZE                                  0x1
#define _CLC3GLS0_D3T_LENGTH                                0x1
#define _CLC3GLS0_D3T_MASK                                  0x20
#define _CLC3GLS0_D4N_POSN                                  0x6
#define _CLC3GLS0_D4N_POSITION                              0x6
#define _CLC3GLS0_D4N_SIZE                                  0x1
#define _CLC3GLS0_D4N_LENGTH                                0x1
#define _CLC3GLS0_D4N_MASK                                  0x40
#define _CLC3GLS0_D4T_POSN                                  0x7
#define _CLC3GLS0_D4T_POSITION                              0x7
#define _CLC3GLS0_D4T_SIZE                                  0x1
#define _CLC3GLS0_D4T_LENGTH                                0x1
#define _CLC3GLS0_D4T_MASK                                  0x80

// Register: CLC3GLS1
#define CLC3GLS1 CLC3GLS1
extern volatile unsigned char           CLC3GLS1            __at(0xF2B);
#ifndef _LIB_BUILD
asm("CLC3GLS1 equ 0F2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G2D1N               :1;
        unsigned LC3G2D1T               :1;
        unsigned LC3G2D2N               :1;
        unsigned LC3G2D2T               :1;
        unsigned LC3G2D3N               :1;
        unsigned LC3G2D3T               :1;
        unsigned LC3G2D4N               :1;
        unsigned LC3G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS1bits_t;
extern volatile CLC3GLS1bits_t CLC3GLS1bits __at(0xF2B);
// bitfield macros
#define _CLC3GLS1_LC3G2D1N_POSN                             0x0
#define _CLC3GLS1_LC3G2D1N_POSITION                         0x0
#define _CLC3GLS1_LC3G2D1N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1N_MASK                             0x1
#define _CLC3GLS1_LC3G2D1T_POSN                             0x1
#define _CLC3GLS1_LC3G2D1T_POSITION                         0x1
#define _CLC3GLS1_LC3G2D1T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1T_MASK                             0x2
#define _CLC3GLS1_LC3G2D2N_POSN                             0x2
#define _CLC3GLS1_LC3G2D2N_POSITION                         0x2
#define _CLC3GLS1_LC3G2D2N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2N_MASK                             0x4
#define _CLC3GLS1_LC3G2D2T_POSN                             0x3
#define _CLC3GLS1_LC3G2D2T_POSITION                         0x3
#define _CLC3GLS1_LC3G2D2T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2T_MASK                             0x8
#define _CLC3GLS1_LC3G2D3N_POSN                             0x4
#define _CLC3GLS1_LC3G2D3N_POSITION                         0x4
#define _CLC3GLS1_LC3G2D3N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3N_MASK                             0x10
#define _CLC3GLS1_LC3G2D3T_POSN                             0x5
#define _CLC3GLS1_LC3G2D3T_POSITION                         0x5
#define _CLC3GLS1_LC3G2D3T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3T_MASK                             0x20
#define _CLC3GLS1_LC3G2D4N_POSN                             0x6
#define _CLC3GLS1_LC3G2D4N_POSITION                         0x6
#define _CLC3GLS1_LC3G2D4N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4N_MASK                             0x40
#define _CLC3GLS1_LC3G2D4T_POSN                             0x7
#define _CLC3GLS1_LC3G2D4T_POSITION                         0x7
#define _CLC3GLS1_LC3G2D4T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4T_MASK                             0x80
#define _CLC3GLS1_D1N_POSN                                  0x0
#define _CLC3GLS1_D1N_POSITION                              0x0
#define _CLC3GLS1_D1N_SIZE                                  0x1
#define _CLC3GLS1_D1N_LENGTH                                0x1
#define _CLC3GLS1_D1N_MASK                                  0x1
#define _CLC3GLS1_D1T_POSN                                  0x1
#define _CLC3GLS1_D1T_POSITION                              0x1
#define _CLC3GLS1_D1T_SIZE                                  0x1
#define _CLC3GLS1_D1T_LENGTH                                0x1
#define _CLC3GLS1_D1T_MASK                                  0x2
#define _CLC3GLS1_D2N_POSN                                  0x2
#define _CLC3GLS1_D2N_POSITION                              0x2
#define _CLC3GLS1_D2N_SIZE                                  0x1
#define _CLC3GLS1_D2N_LENGTH                                0x1
#define _CLC3GLS1_D2N_MASK                                  0x4
#define _CLC3GLS1_D2T_POSN                                  0x3
#define _CLC3GLS1_D2T_POSITION                              0x3
#define _CLC3GLS1_D2T_SIZE                                  0x1
#define _CLC3GLS1_D2T_LENGTH                                0x1
#define _CLC3GLS1_D2T_MASK                                  0x8
#define _CLC3GLS1_D3N_POSN                                  0x4
#define _CLC3GLS1_D3N_POSITION                              0x4
#define _CLC3GLS1_D3N_SIZE                                  0x1
#define _CLC3GLS1_D3N_LENGTH                                0x1
#define _CLC3GLS1_D3N_MASK                                  0x10
#define _CLC3GLS1_D3T_POSN                                  0x5
#define _CLC3GLS1_D3T_POSITION                              0x5
#define _CLC3GLS1_D3T_SIZE                                  0x1
#define _CLC3GLS1_D3T_LENGTH                                0x1
#define _CLC3GLS1_D3T_MASK                                  0x20
#define _CLC3GLS1_D4N_POSN                                  0x6
#define _CLC3GLS1_D4N_POSITION                              0x6
#define _CLC3GLS1_D4N_SIZE                                  0x1
#define _CLC3GLS1_D4N_LENGTH                                0x1
#define _CLC3GLS1_D4N_MASK                                  0x40
#define _CLC3GLS1_D4T_POSN                                  0x7
#define _CLC3GLS1_D4T_POSITION                              0x7
#define _CLC3GLS1_D4T_SIZE                                  0x1
#define _CLC3GLS1_D4T_LENGTH                                0x1
#define _CLC3GLS1_D4T_MASK                                  0x80

// Register: CLC3GLS2
#define CLC3GLS2 CLC3GLS2
extern volatile unsigned char           CLC3GLS2            __at(0xF2C);
#ifndef _LIB_BUILD
asm("CLC3GLS2 equ 0F2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G3D1N               :1;
        unsigned LC3G3D1T               :1;
        unsigned LC3G3D2N               :1;
        unsigned LC3G3D2T               :1;
        unsigned LC3G3D3N               :1;
        unsigned LC3G3D3T               :1;
        unsigned LC3G3D4N               :1;
        unsigned LC3G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS2bits_t;
extern volatile CLC3GLS2bits_t CLC3GLS2bits __at(0xF2C);
// bitfield macros
#define _CLC3GLS2_LC3G3D1N_POSN                             0x0
#define _CLC3GLS2_LC3G3D1N_POSITION                         0x0
#define _CLC3GLS2_LC3G3D1N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1N_MASK                             0x1
#define _CLC3GLS2_LC3G3D1T_POSN                             0x1
#define _CLC3GLS2_LC3G3D1T_POSITION                         0x1
#define _CLC3GLS2_LC3G3D1T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1T_MASK                             0x2
#define _CLC3GLS2_LC3G3D2N_POSN                             0x2
#define _CLC3GLS2_LC3G3D2N_POSITION                         0x2
#define _CLC3GLS2_LC3G3D2N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2N_MASK                             0x4
#define _CLC3GLS2_LC3G3D2T_POSN                             0x3
#define _CLC3GLS2_LC3G3D2T_POSITION                         0x3
#define _CLC3GLS2_LC3G3D2T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2T_MASK                             0x8
#define _CLC3GLS2_LC3G3D3N_POSN                             0x4
#define _CLC3GLS2_LC3G3D3N_POSITION                         0x4
#define _CLC3GLS2_LC3G3D3N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3N_MASK                             0x10
#define _CLC3GLS2_LC3G3D3T_POSN                             0x5
#define _CLC3GLS2_LC3G3D3T_POSITION                         0x5
#define _CLC3GLS2_LC3G3D3T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3T_MASK                             0x20
#define _CLC3GLS2_LC3G3D4N_POSN                             0x6
#define _CLC3GLS2_LC3G3D4N_POSITION                         0x6
#define _CLC3GLS2_LC3G3D4N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4N_MASK                             0x40
#define _CLC3GLS2_LC3G3D4T_POSN                             0x7
#define _CLC3GLS2_LC3G3D4T_POSITION                         0x7
#define _CLC3GLS2_LC3G3D4T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4T_MASK                             0x80
#define _CLC3GLS2_D1N_POSN                                  0x0
#define _CLC3GLS2_D1N_POSITION                              0x0
#define _CLC3GLS2_D1N_SIZE                                  0x1
#define _CLC3GLS2_D1N_LENGTH                                0x1
#define _CLC3GLS2_D1N_MASK                                  0x1
#define _CLC3GLS2_D1T_POSN                                  0x1
#define _CLC3GLS2_D1T_POSITION                              0x1
#define _CLC3GLS2_D1T_SIZE                                  0x1
#define _CLC3GLS2_D1T_LENGTH                                0x1
#define _CLC3GLS2_D1T_MASK                                  0x2
#define _CLC3GLS2_D2N_POSN                                  0x2
#define _CLC3GLS2_D2N_POSITION                              0x2
#define _CLC3GLS2_D2N_SIZE                                  0x1
#define _CLC3GLS2_D2N_LENGTH                                0x1
#define _CLC3GLS2_D2N_MASK                                  0x4
#define _CLC3GLS2_D2T_POSN                                  0x3
#define _CLC3GLS2_D2T_POSITION                              0x3
#define _CLC3GLS2_D2T_SIZE                                  0x1
#define _CLC3GLS2_D2T_LENGTH                                0x1
#define _CLC3GLS2_D2T_MASK                                  0x8
#define _CLC3GLS2_D3N_POSN                                  0x4
#define _CLC3GLS2_D3N_POSITION                              0x4
#define _CLC3GLS2_D3N_SIZE                                  0x1
#define _CLC3GLS2_D3N_LENGTH                                0x1
#define _CLC3GLS2_D3N_MASK                                  0x10
#define _CLC3GLS2_D3T_POSN                                  0x5
#define _CLC3GLS2_D3T_POSITION                              0x5
#define _CLC3GLS2_D3T_SIZE                                  0x1
#define _CLC3GLS2_D3T_LENGTH                                0x1
#define _CLC3GLS2_D3T_MASK                                  0x20
#define _CLC3GLS2_D4N_POSN                                  0x6
#define _CLC3GLS2_D4N_POSITION                              0x6
#define _CLC3GLS2_D4N_SIZE                                  0x1
#define _CLC3GLS2_D4N_LENGTH                                0x1
#define _CLC3GLS2_D4N_MASK                                  0x40
#define _CLC3GLS2_D4T_POSN                                  0x7
#define _CLC3GLS2_D4T_POSITION                              0x7
#define _CLC3GLS2_D4T_SIZE                                  0x1
#define _CLC3GLS2_D4T_LENGTH                                0x1
#define _CLC3GLS2_D4T_MASK                                  0x80

// Register: CLC3GLS3
#define CLC3GLS3 CLC3GLS3
extern volatile unsigned char           CLC3GLS3            __at(0xF2D);
#ifndef _LIB_BUILD
asm("CLC3GLS3 equ 0F2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G4D1N               :1;
        unsigned LC3G4D1T               :1;
        unsigned LC3G4D2N               :1;
        unsigned LC3G4D2T               :1;
        unsigned LC3G4D3N               :1;
        unsigned LC3G4D3T               :1;
        unsigned LC3G4D4N               :1;
        unsigned LC3G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC3GLS3bits_t;
extern volatile CLC3GLS3bits_t CLC3GLS3bits __at(0xF2D);
// bitfield macros
#define _CLC3GLS3_LC3G4D1N_POSN                             0x0
#define _CLC3GLS3_LC3G4D1N_POSITION                         0x0
#define _CLC3GLS3_LC3G4D1N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1N_MASK                             0x1
#define _CLC3GLS3_LC3G4D1T_POSN                             0x1
#define _CLC3GLS3_LC3G4D1T_POSITION                         0x1
#define _CLC3GLS3_LC3G4D1T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1T_MASK                             0x2
#define _CLC3GLS3_LC3G4D2N_POSN                             0x2
#define _CLC3GLS3_LC3G4D2N_POSITION                         0x2
#define _CLC3GLS3_LC3G4D2N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2N_MASK                             0x4
#define _CLC3GLS3_LC3G4D2T_POSN                             0x3
#define _CLC3GLS3_LC3G4D2T_POSITION                         0x3
#define _CLC3GLS3_LC3G4D2T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2T_MASK                             0x8
#define _CLC3GLS3_LC3G4D3N_POSN                             0x4
#define _CLC3GLS3_LC3G4D3N_POSITION                         0x4
#define _CLC3GLS3_LC3G4D3N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3N_MASK                             0x10
#define _CLC3GLS3_LC3G4D3T_POSN                             0x5
#define _CLC3GLS3_LC3G4D3T_POSITION                         0x5
#define _CLC3GLS3_LC3G4D3T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3T_MASK                             0x20
#define _CLC3GLS3_LC3G4D4N_POSN                             0x6
#define _CLC3GLS3_LC3G4D4N_POSITION                         0x6
#define _CLC3GLS3_LC3G4D4N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4N_MASK                             0x40
#define _CLC3GLS3_LC3G4D4T_POSN                             0x7
#define _CLC3GLS3_LC3G4D4T_POSITION                         0x7
#define _CLC3GLS3_LC3G4D4T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4T_MASK                             0x80
#define _CLC3GLS3_G4D1N_POSN                                0x0
#define _CLC3GLS3_G4D1N_POSITION                            0x0
#define _CLC3GLS3_G4D1N_SIZE                                0x1
#define _CLC3GLS3_G4D1N_LENGTH                              0x1
#define _CLC3GLS3_G4D1N_MASK                                0x1
#define _CLC3GLS3_G4D1T_POSN                                0x1
#define _CLC3GLS3_G4D1T_POSITION                            0x1
#define _CLC3GLS3_G4D1T_SIZE                                0x1
#define _CLC3GLS3_G4D1T_LENGTH                              0x1
#define _CLC3GLS3_G4D1T_MASK                                0x2
#define _CLC3GLS3_G4D2N_POSN                                0x2
#define _CLC3GLS3_G4D2N_POSITION                            0x2
#define _CLC3GLS3_G4D2N_SIZE                                0x1
#define _CLC3GLS3_G4D2N_LENGTH                              0x1
#define _CLC3GLS3_G4D2N_MASK                                0x4
#define _CLC3GLS3_G4D2T_POSN                                0x3
#define _CLC3GLS3_G4D2T_POSITION                            0x3
#define _CLC3GLS3_G4D2T_SIZE                                0x1
#define _CLC3GLS3_G4D2T_LENGTH                              0x1
#define _CLC3GLS3_G4D2T_MASK                                0x8
#define _CLC3GLS3_G4D3N_POSN                                0x4
#define _CLC3GLS3_G4D3N_POSITION                            0x4
#define _CLC3GLS3_G4D3N_SIZE                                0x1
#define _CLC3GLS3_G4D3N_LENGTH                              0x1
#define _CLC3GLS3_G4D3N_MASK                                0x10
#define _CLC3GLS3_G4D3T_POSN                                0x5
#define _CLC3GLS3_G4D3T_POSITION                            0x5
#define _CLC3GLS3_G4D3T_SIZE                                0x1
#define _CLC3GLS3_G4D3T_LENGTH                              0x1
#define _CLC3GLS3_G4D3T_MASK                                0x20
#define _CLC3GLS3_G4D4N_POSN                                0x6
#define _CLC3GLS3_G4D4N_POSITION                            0x6
#define _CLC3GLS3_G4D4N_SIZE                                0x1
#define _CLC3GLS3_G4D4N_LENGTH                              0x1
#define _CLC3GLS3_G4D4N_MASK                                0x40
#define _CLC3GLS3_G4D4T_POSN                                0x7
#define _CLC3GLS3_G4D4T_POSITION                            0x7
#define _CLC3GLS3_G4D4T_SIZE                                0x1
#define _CLC3GLS3_G4D4T_LENGTH                              0x1
#define _CLC3GLS3_G4D4T_MASK                                0x80

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0xFE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 0FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C_SHAD                 :1;
        unsigned DC_SHAD                :1;
        unsigned Z_SHAD                 :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0xFE4);
// bitfield macros
#define _STATUS_SHAD_C_SHAD_POSN                            0x0
#define _STATUS_SHAD_C_SHAD_POSITION                        0x0
#define _STATUS_SHAD_C_SHAD_SIZE                            0x1
#define _STATUS_SHAD_C_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_C_SHAD_MASK                            0x1
#define _STATUS_SHAD_DC_SHAD_POSN                           0x1
#define _STATUS_SHAD_DC_SHAD_POSITION                       0x1
#define _STATUS_SHAD_DC_SHAD_SIZE                           0x1
#define _STATUS_SHAD_DC_SHAD_LENGTH                         0x1
#define _STATUS_SHAD_DC_SHAD_MASK                           0x2
#define _STATUS_SHAD_Z_SHAD_POSN                            0x2
#define _STATUS_SHAD_Z_SHAD_POSITION                        0x2
#define _STATUS_SHAD_Z_SHAD_SIZE                            0x1
#define _STATUS_SHAD_Z_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_Z_SHAD_MASK                            0x4

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0xFE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 0FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0xFE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0xFE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 0FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :5;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0xFE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x5
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x5
#define _BSR_SHAD_BSR_SHAD_MASK                             0x1F

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0xFE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 0FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :7;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0xFE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x7
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x7
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0x7F

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0xFE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 0FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0xFE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 0FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0xFE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0xFEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 0FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0xFEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0xFEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 0FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0xFEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0xFED);
#ifndef _LIB_BUILD
asm("STKPTR equ 0FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0xFED);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0xFEE);
#ifndef _LIB_BUILD
asm("TOSL equ 0FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0xFEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0xFEF);
#ifndef _LIB_BUILD
asm("TOSH equ 0FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :7;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0xFEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x7
#define _TOSH_TOSH_LENGTH                                   0x7
#define _TOSH_TOSH_MASK                                     0x7F

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// BAUD1CON<ABDEN>
extern volatile __bit                   ABDEN               __at(0xCF8);	// @ (0x19F * 8 + 0)
#define                                 ABDEN_bit           _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDOVF>
extern volatile __bit                   ABDOVF              __at(0xCFF);	// @ (0x19F * 8 + 7)
#define                                 ABDOVF_bit          _BIT_ACCESS(BAUD1CON,7)
// SSP1CON2<ACKDT>
extern volatile __bit                   ACKDT               __at(0x10B5);	// @ (0x216 * 8 + 5)
#define                                 ACKDT_bit           _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKEN>
extern volatile __bit                   ACKEN               __at(0x10B4);	// @ (0x216 * 8 + 4)
#define                                 ACKEN_bit           _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0x10B6);	// @ (0x216 * 8 + 6)
#define                                 ACKSTAT_bit         _BIT_ACCESS(SSP1CON2,6)
// SSP1CON3<ACKTIM>
extern volatile __bit                   ACKTIM              __at(0x10BF);	// @ (0x217 * 8 + 7)
#define                                 ACKTIM_bit          _BIT_ACCESS(SSP1CON3,7)
// SSP1ADD<ADD0>
extern volatile __bit                   ADD0                __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 ADD0_bit            _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<ADD1>
extern volatile __bit                   ADD1                __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 ADD1_bit            _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<ADD2>
extern volatile __bit                   ADD2                __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 ADD2_bit            _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<ADD3>
extern volatile __bit                   ADD3                __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 ADD3_bit            _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<ADD4>
extern volatile __bit                   ADD4                __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 ADD4_bit            _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<ADD5>
extern volatile __bit                   ADD5                __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 ADD5_bit            _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<ADD6>
extern volatile __bit                   ADD6                __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 ADD6_bit            _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<ADD7>
extern volatile __bit                   ADD7                __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 ADD7_bit            _BIT_ACCESS(SSP1ADD,7)
// RC1STA<ADDEN>
extern volatile __bit                   ADDEN               __at(0xCEB);	// @ (0x19D * 8 + 3)
#define                                 ADDEN_bit           _BIT_ACCESS(RC1STA,3)
// ADCON1<ADFM>
extern volatile __bit                   ADFM                __at(0x4F7);	// @ (0x9E * 8 + 7)
#define                                 ADFM_bit            _BIT_ACCESS(ADCON1,7)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,1)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x48E);	// @ (0x91 * 8 + 6)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,6)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x8E);	// @ (0x11 * 8 + 6)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,6)
// ADCON1<ADNREF>
extern volatile __bit                   ADNREF              __at(0x4F2);	// @ (0x9E * 8 + 2)
#define                                 ADNREF_bit          _BIT_ACCESS(ADCON1,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x4F0);	// @ (0x9E * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADCON1,0)
// ADCON1<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x4F1);	// @ (0x9E * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADCON1,1)
// SSP1CON3<AHEN>
extern volatile __bit                   AHEN                __at(0x10B9);	// @ (0x217 * 8 + 1)
#define                                 AHEN_bit            _BIT_ACCESS(SSP1CON3,1)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0xC60);	// @ (0x18C * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0xC61);	// @ (0x18C * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0xC62);	// @ (0x18C * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA4>
extern volatile __bit                   ANSA4               __at(0xC64);	// @ (0x18C * 8 + 4)
#define                                 ANSA4_bit           _BIT_ACCESS(ANSELA,4)
// ANSELC<ANSC0>
extern volatile __bit                   ANSC0               __at(0xC70);	// @ (0x18E * 8 + 0)
#define                                 ANSC0_bit           _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSC1>
extern volatile __bit                   ANSC1               __at(0xC71);	// @ (0x18E * 8 + 1)
#define                                 ANSC1_bit           _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSC2>
extern volatile __bit                   ANSC2               __at(0xC72);	// @ (0x18E * 8 + 2)
#define                                 ANSC2_bit           _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSC3>
extern volatile __bit                   ANSC3               __at(0xC73);	// @ (0x18E * 8 + 3)
#define                                 ANSC3_bit           _BIT_ACCESS(ANSELC,3)
// COG1ASD0<ARSEN>
extern volatile __bit                   ARSEN               __at(0x34EE);	// @ (0x69D * 8 + 6)
#define                                 ARSEN_bit           _BIT_ACCESS(COG1ASD0,6)
// COG1ASD1<AS0E>
extern volatile __bit                   AS0E                __at(0x34F0);	// @ (0x69E * 8 + 0)
#define                                 AS0E_bit            _BIT_ACCESS(COG1ASD1,0)
// COG1ASD1<AS1E>
extern volatile __bit                   AS1E                __at(0x34F1);	// @ (0x69E * 8 + 1)
#define                                 AS1E_bit            _BIT_ACCESS(COG1ASD1,1)
// COG1ASD1<AS2E>
extern volatile __bit                   AS2E                __at(0x34F2);	// @ (0x69E * 8 + 2)
#define                                 AS2E_bit            _BIT_ACCESS(COG1ASD1,2)
// COG1ASD1<AS3E>
extern volatile __bit                   AS3E                __at(0x34F3);	// @ (0x69E * 8 + 3)
#define                                 AS3E_bit            _BIT_ACCESS(COG1ASD1,3)
// COG1ASD1<AS4E>
extern volatile __bit                   AS4E                __at(0x34F4);	// @ (0x69E * 8 + 4)
#define                                 AS4E_bit            _BIT_ACCESS(COG1ASD1,4)
// COG1ASD1<AS5E>
extern volatile __bit                   AS5E                __at(0x34F5);	// @ (0x69E * 8 + 5)
#define                                 AS5E_bit            _BIT_ACCESS(COG1ASD1,5)
// COG1ASD1<AS6E>
extern volatile __bit                   AS6E                __at(0x34F6);	// @ (0x69E * 8 + 6)
#define                                 AS6E_bit            _BIT_ACCESS(COG1ASD1,6)
// COG1ASD1<AS7E>
extern volatile __bit                   AS7E                __at(0x34F7);	// @ (0x69E * 8 + 7)
#define                                 AS7E_bit            _BIT_ACCESS(COG1ASD1,7)
// COG1ASD0<ASDAC0>
extern volatile __bit                   ASDAC0              __at(0x34EA);	// @ (0x69D * 8 + 2)
#define                                 ASDAC0_bit          _BIT_ACCESS(COG1ASD0,2)
// COG1ASD0<ASDAC1>
extern volatile __bit                   ASDAC1              __at(0x34EB);	// @ (0x69D * 8 + 3)
#define                                 ASDAC1_bit          _BIT_ACCESS(COG1ASD0,3)
// COG1ASD0<ASDBD0>
extern volatile __bit                   ASDBD0              __at(0x34EC);	// @ (0x69D * 8 + 4)
#define                                 ASDBD0_bit          _BIT_ACCESS(COG1ASD0,4)
// COG1ASD0<ASDBD1>
extern volatile __bit                   ASDBD1              __at(0x34ED);	// @ (0x69D * 8 + 5)
#define                                 ASDBD1_bit          _BIT_ACCESS(COG1ASD0,5)
// COG1ASD0<ASE>
extern volatile __bit                   ASE                 __at(0x34EF);	// @ (0x69D * 8 + 7)
#define                                 ASE_bit             _BIT_ACCESS(COG1ASD0,7)
// COG1ASD0<ASREN>
extern volatile __bit                   ASREN               __at(0x34EE);	// @ (0x69D * 8 + 6)
#define                                 ASREN_bit           _BIT_ACCESS(COG1ASD0,6)
// PIE2<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x493);	// @ (0x92 * 8 + 3)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE2,3)
// PIR2<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x93);	// @ (0x12 * 8 + 3)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR2,3)
// SSP1STAT<BF>
extern volatile __bit                   BF                  __at(0x10A0);	// @ (0x214 * 8 + 0)
#define                                 BF_bit              _BIT_ACCESS(SSP1STAT,0)
// MD1CON0<BIT>
extern volatile __bit                   BIT                 __at(0x1CD8);	// @ (0x39B * 8 + 0)
#define                                 BIT_bit             _BIT_ACCESS(MD1CON0,0)
// COG1BLKF<BLKF0>
extern volatile __bit                   BLKF0               __at(0x3480);	// @ (0x690 * 8 + 0)
#define                                 BLKF0_bit           _BIT_ACCESS(COG1BLKF,0)
// COG1BLKF<BLKF1>
extern volatile __bit                   BLKF1               __at(0x3481);	// @ (0x690 * 8 + 1)
#define                                 BLKF1_bit           _BIT_ACCESS(COG1BLKF,1)
// COG1BLKF<BLKF2>
extern volatile __bit                   BLKF2               __at(0x3482);	// @ (0x690 * 8 + 2)
#define                                 BLKF2_bit           _BIT_ACCESS(COG1BLKF,2)
// COG1BLKF<BLKF3>
extern volatile __bit                   BLKF3               __at(0x3483);	// @ (0x690 * 8 + 3)
#define                                 BLKF3_bit           _BIT_ACCESS(COG1BLKF,3)
// COG1BLKF<BLKF4>
extern volatile __bit                   BLKF4               __at(0x3484);	// @ (0x690 * 8 + 4)
#define                                 BLKF4_bit           _BIT_ACCESS(COG1BLKF,4)
// COG1BLKF<BLKF5>
extern volatile __bit                   BLKF5               __at(0x3485);	// @ (0x690 * 8 + 5)
#define                                 BLKF5_bit           _BIT_ACCESS(COG1BLKF,5)
// COG1BLKR<BLKR0>
extern volatile __bit                   BLKR0               __at(0x3478);	// @ (0x68F * 8 + 0)
#define                                 BLKR0_bit           _BIT_ACCESS(COG1BLKR,0)
// COG1BLKR<BLKR1>
extern volatile __bit                   BLKR1               __at(0x3479);	// @ (0x68F * 8 + 1)
#define                                 BLKR1_bit           _BIT_ACCESS(COG1BLKR,1)
// COG1BLKR<BLKR2>
extern volatile __bit                   BLKR2               __at(0x347A);	// @ (0x68F * 8 + 2)
#define                                 BLKR2_bit           _BIT_ACCESS(COG1BLKR,2)
// COG1BLKR<BLKR3>
extern volatile __bit                   BLKR3               __at(0x347B);	// @ (0x68F * 8 + 3)
#define                                 BLKR3_bit           _BIT_ACCESS(COG1BLKR,3)
// COG1BLKR<BLKR4>
extern volatile __bit                   BLKR4               __at(0x347C);	// @ (0x68F * 8 + 4)
#define                                 BLKR4_bit           _BIT_ACCESS(COG1BLKR,4)
// COG1BLKR<BLKR5>
extern volatile __bit                   BLKR5               __at(0x347D);	// @ (0x68F * 8 + 5)
#define                                 BLKR5_bit           _BIT_ACCESS(COG1BLKR,5)
// SSP1CON3<BOEN>
extern volatile __bit                   BOEN                __at(0x10BC);	// @ (0x217 * 8 + 4)
#define                                 BOEN_bit            _BIT_ACCESS(SSP1CON3,4)
// BORCON<BORFS>
extern volatile __bit                   BORFS               __at(0x10EE);	// @ (0x21D * 8 + 6)
#define                                 BORFS_bit           _BIT_ACCESS(BORCON,6)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x10E8);	// @ (0x21D * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BAUD1CON<BRG16>
extern volatile __bit                   BRG16               __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 BRG16_bit           _BIT_ACCESS(BAUD1CON,3)
// TX1STA<BRGH>
extern volatile __bit                   BRGH                __at(0xCF2);	// @ (0x19E * 8 + 2)
#define                                 BRGH_bit            _BIT_ACCESS(TX1STA,2)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// SSP1BUF<BUF0>
extern volatile __bit                   BUF0                __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 BUF0_bit            _BIT_ACCESS(SSP1BUF,0)
// SSP1BUF<BUF1>
extern volatile __bit                   BUF1                __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 BUF1_bit            _BIT_ACCESS(SSP1BUF,1)
// SSP1BUF<BUF2>
extern volatile __bit                   BUF2                __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 BUF2_bit            _BIT_ACCESS(SSP1BUF,2)
// SSP1BUF<BUF3>
extern volatile __bit                   BUF3                __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 BUF3_bit            _BIT_ACCESS(SSP1BUF,3)
// SSP1BUF<BUF4>
extern volatile __bit                   BUF4                __at(0x108C);	// @ (0x211 * 8 + 4)
#define                                 BUF4_bit            _BIT_ACCESS(SSP1BUF,4)
// SSP1BUF<BUF5>
extern volatile __bit                   BUF5                __at(0x108D);	// @ (0x211 * 8 + 5)
#define                                 BUF5_bit            _BIT_ACCESS(SSP1BUF,5)
// SSP1BUF<BUF6>
extern volatile __bit                   BUF6                __at(0x108E);	// @ (0x211 * 8 + 6)
#define                                 BUF6_bit            _BIT_ACCESS(SSP1BUF,6)
// SSP1BUF<BUF7>
extern volatile __bit                   BUF7                __at(0x108F);	// @ (0x211 * 8 + 7)
#define                                 BUF7_bit            _BIT_ACCESS(SSP1BUF,7)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x881);	// @ (0x110 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE2<C1IE>
extern volatile __bit                   C1IE                __at(0x495);	// @ (0x92 * 8 + 5)
#define                                 C1IE_bit            _BIT_ACCESS(PIE2,5)
// PIR2<C1IF>
extern volatile __bit                   C1IF                __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 C1IF_bit            _BIT_ACCESS(PIR2,5)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x889);	// @ (0x111 * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// CM1NSEL<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x890);	// @ (0x112 * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NSEL,0)
// CM1NSEL<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x891);	// @ (0x112 * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NSEL,1)
// CM1NSEL<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x892);	// @ (0x112 * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NSEL,2)
// CM1CON0<C1ON>
extern volatile __bit                   C1ON                __at(0x887);	// @ (0x110 * 8 + 7)
#define                                 C1ON_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1OUT>
extern volatile __bit                   C1OUT               __at(0x886);	// @ (0x110 * 8 + 6)
#define                                 C1OUT_bit           _BIT_ACCESS(CM1CON0,6)
// CM1PSEL<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x898);	// @ (0x113 * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PSEL,0)
// CM1PSEL<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x899);	// @ (0x113 * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PSEL,1)
// CM1PSEL<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x89A);	// @ (0x113 * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PSEL,2)
// CM1PSEL<C1PCH3>
extern volatile __bit                   C1PCH3              __at(0x89B);	// @ (0x113 * 8 + 3)
#define                                 C1PCH3_bit          _BIT_ACCESS(CM1PSEL,3)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x884);	// @ (0x110 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SP>
extern volatile __bit                   C1SP                __at(0x882);	// @ (0x110 * 8 + 2)
#define                                 C1SP_bit            _BIT_ACCESS(CM1CON0,2)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x880);	// @ (0x110 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CCPTMRS<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x14F0);	// @ (0x29E * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS,0)
// CCPTMRS<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x14F1);	// @ (0x29E * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS,1)
// CM1CON0<C1ZLF>
extern volatile __bit                   C1ZLF               __at(0x883);	// @ (0x110 * 8 + 3)
#define                                 C1ZLF_bit           _BIT_ACCESS(CM1CON0,3)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x8A1);	// @ (0x114 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE2<C2IE>
extern volatile __bit                   C2IE                __at(0x496);	// @ (0x92 * 8 + 6)
#define                                 C2IE_bit            _BIT_ACCESS(PIE2,6)
// PIR2<C2IF>
extern volatile __bit                   C2IF                __at(0x96);	// @ (0x12 * 8 + 6)
#define                                 C2IF_bit            _BIT_ACCESS(PIR2,6)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x8A8);	// @ (0x115 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x8A9);	// @ (0x115 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// CM2NSEL<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x8B0);	// @ (0x116 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NSEL,0)
// CM2NSEL<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x8B1);	// @ (0x116 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NSEL,1)
// CM2NSEL<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x8B2);	// @ (0x116 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NSEL,2)
// CM2CON0<C2ON>
extern volatile __bit                   C2ON                __at(0x8A7);	// @ (0x114 * 8 + 7)
#define                                 C2ON_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2OUT>
extern volatile __bit                   C2OUT               __at(0x8A6);	// @ (0x114 * 8 + 6)
#define                                 C2OUT_bit           _BIT_ACCESS(CM2CON0,6)
// CM2PSEL<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x8B8);	// @ (0x117 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PSEL,0)
// CM2PSEL<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x8B9);	// @ (0x117 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PSEL,1)
// CM2PSEL<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x8BA);	// @ (0x117 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PSEL,2)
// CM2PSEL<C2PCH3>
extern volatile __bit                   C2PCH3              __at(0x8BB);	// @ (0x117 * 8 + 3)
#define                                 C2PCH3_bit          _BIT_ACCESS(CM2PSEL,3)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x8A4);	// @ (0x114 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SP>
extern volatile __bit                   C2SP                __at(0x8A2);	// @ (0x114 * 8 + 2)
#define                                 C2SP_bit            _BIT_ACCESS(CM2CON0,2)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x8A0);	// @ (0x114 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// CM2CON0<C2ZLF>
extern volatile __bit                   C2ZLF               __at(0x8A3);	// @ (0x114 * 8 + 3)
#define                                 C2ZLF_bit           _BIT_ACCESS(CM2CON0,3)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x14A0);	// @ (0x294 * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x14A1);	// @ (0x294 * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x14A2);	// @ (0x294 * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x149F);	// @ (0x293 * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x149C);	// @ (0x293 * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE1<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE1,2)
// PIR1<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x8A);	// @ (0x11 * 8 + 2)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR1,2)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1498);	// @ (0x293 * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1499);	// @ (0x293 * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x149A);	// @ (0x293 * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x149B);	// @ (0x293 * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x149D);	// @ (0x293 * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// PIE1<CCPIE>
extern volatile __bit                   CCPIE               __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 CCPIE_bit           _BIT_ACCESS(PIE1,2)
// PIR1<CCPIF>
extern volatile __bit                   CCPIF               __at(0x8A);	// @ (0x11 * 8 + 2)
#define                                 CCPIF_bit           _BIT_ACCESS(PIR1,2)
// PMCON1<CFGS>
extern volatile __bit                   CFGS                __at(0xCAE);	// @ (0x195 * 8 + 6)
#define                                 CFGS_bit            _BIT_ACCESS(PMCON1,6)
// MD1CARH<CH0>
extern volatile __bit                   CH0                 __at(0x1CF8);	// @ (0x39F * 8 + 0)
#define                                 CH0_bit             _BIT_ACCESS(MD1CARH,0)
// MD1CARH<CH1>
extern volatile __bit                   CH1                 __at(0x1CF9);	// @ (0x39F * 8 + 1)
#define                                 CH1_bit             _BIT_ACCESS(MD1CARH,1)
// MD1CARH<CH2>
extern volatile __bit                   CH2                 __at(0x1CFA);	// @ (0x39F * 8 + 2)
#define                                 CH2_bit             _BIT_ACCESS(MD1CARH,2)
// MD1CARH<CH3>
extern volatile __bit                   CH3                 __at(0x1CFB);	// @ (0x39F * 8 + 3)
#define                                 CH3_bit             _BIT_ACCESS(MD1CARH,3)
// MD1CON1<CHPOL>
extern volatile __bit                   CHPOL               __at(0x1CE5);	// @ (0x39C * 8 + 5)
#define                                 CHPOL_bit           _BIT_ACCESS(MD1CON1,5)
// ADCON0<CHS0>
extern volatile __bit                   CHS0                __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 CHS0_bit            _BIT_ACCESS(ADCON0,2)
// ADCON0<CHS1>
extern volatile __bit                   CHS1                __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 CHS1_bit            _BIT_ACCESS(ADCON0,3)
// ADCON0<CHS2>
extern volatile __bit                   CHS2                __at(0x4EC);	// @ (0x9D * 8 + 4)
#define                                 CHS2_bit            _BIT_ACCESS(ADCON0,4)
// ADCON0<CHS3>
extern volatile __bit                   CHS3                __at(0x4ED);	// @ (0x9D * 8 + 5)
#define                                 CHS3_bit            _BIT_ACCESS(ADCON0,5)
// ADCON0<CHS4>
extern volatile __bit                   CHS4                __at(0x4EE);	// @ (0x9D * 8 + 6)
#define                                 CHS4_bit            _BIT_ACCESS(ADCON0,6)
// MD1CON1<CHSYNC>
extern volatile __bit                   CHSYNC              __at(0x1CE4);	// @ (0x39C * 8 + 4)
#define                                 CHSYNC_bit          _BIT_ACCESS(MD1CON1,4)
// SSP1STAT<CKE>
extern volatile __bit                   CKE                 __at(0x10A6);	// @ (0x214 * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SSP1STAT,6)
// SSP1CON1<CKP>
extern volatile __bit                   CKP                 __at(0x10AC);	// @ (0x215 * 8 + 4)
#define                                 CKP_bit             _BIT_ACCESS(SSP1CON1,4)
// MD1CARL<CL0>
extern volatile __bit                   CL0                 __at(0x1CF0);	// @ (0x39E * 8 + 0)
#define                                 CL0_bit             _BIT_ACCESS(MD1CARL,0)
// MD1CARL<CL1>
extern volatile __bit                   CL1                 __at(0x1CF1);	// @ (0x39E * 8 + 1)
#define                                 CL1_bit             _BIT_ACCESS(MD1CARL,1)
// MD1CARL<CL2>
extern volatile __bit                   CL2                 __at(0x1CF2);	// @ (0x39E * 8 + 2)
#define                                 CL2_bit             _BIT_ACCESS(MD1CARL,2)
// MD1CARL<CL3>
extern volatile __bit                   CL3                 __at(0x1CF3);	// @ (0x39E * 8 + 3)
#define                                 CL3_bit             _BIT_ACCESS(MD1CARL,3)
// PIE3<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x98);	// @ (0x13 * 8 + 0)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR3,0)
// PIE3<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x499);	// @ (0x93 * 8 + 1)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x99);	// @ (0x13 * 8 + 1)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR3,1)
// PIE3<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE3,2)
// PIR3<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x9A);	// @ (0x13 * 8 + 2)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR3,2)
// MD1CON1<CLPOL>
extern volatile __bit                   CLPOL               __at(0x1CE1);	// @ (0x39C * 8 + 1)
#define                                 CLPOL_bit           _BIT_ACCESS(MD1CON1,1)
// MD1CON1<CLSYNC>
extern volatile __bit                   CLSYNC              __at(0x1CE0);	// @ (0x39C * 8 + 0)
#define                                 CLSYNC_bit          _BIT_ACCESS(MD1CON1,0)
// PIR3<COG1IF>
extern volatile __bit                   COG1IF              __at(0x9D);	// @ (0x13 * 8 + 5)
#define                                 COG1IF_bit          _BIT_ACCESS(PIR3,5)
// PIE3<COGIE>
extern volatile __bit                   COGIE               __at(0x49D);	// @ (0x93 * 8 + 5)
#define                                 COGIE_bit           _BIT_ACCESS(PIE3,5)
// RC1STA<CREN>
extern volatile __bit                   CREN                __at(0xCEC);	// @ (0x19D * 8 + 4)
#define                                 CREN_bit            _BIT_ACCESS(RC1STA,4)
// TX1STA<CSRC>
extern volatile __bit                   CSRC                __at(0xCF7);	// @ (0x19E * 8 + 7)
#define                                 CSRC_bit            _BIT_ACCESS(TX1STA,7)
// CCP1CAP<CTS0>
extern volatile __bit                   CTS0                __at(0x14A0);	// @ (0x294 * 8 + 0)
#define                                 CTS0_bit            _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CTS1>
extern volatile __bit                   CTS1                __at(0x14A1);	// @ (0x294 * 8 + 1)
#define                                 CTS1_bit            _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CTS2>
extern volatile __bit                   CTS2                __at(0x14A2);	// @ (0x294 * 8 + 2)
#define                                 CTS2_bit            _BIT_ACCESS(CCP1CAP,2)
// STATUS_SHAD<C_SHAD>
extern volatile __bit                   C_SHAD              __at(0x7F20);	// @ (0xFE4 * 8 + 0)
#define                                 C_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,0)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x2C8F);	// @ (0x591 * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// DAC1CON0<DAC1FM>
extern volatile __bit                   DAC1FM              __at(0x2C8E);	// @ (0x591 * 8 + 6)
#define                                 DAC1FM_bit          _BIT_ACCESS(DAC1CON0,6)
// DACLD<DAC1LD>
extern volatile __bit                   DAC1LD              __at(0x2C80);	// @ (0x590 * 8 + 0)
#define                                 DAC1LD_bit          _BIT_ACCESS(DACLD,0)
// DAC1CON0<DAC1NSS0>
extern volatile __bit                   DAC1NSS0            __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 DAC1NSS0_bit        _BIT_ACCESS(DAC1CON0,0)
// DAC1CON0<DAC1OE1>
extern volatile __bit                   DAC1OE1             __at(0x2C8D);	// @ (0x591 * 8 + 5)
#define                                 DAC1OE1_bit         _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x2C8A);	// @ (0x591 * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x2C8B);	// @ (0x591 * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON0,3)
// DAC1REFL<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x2C90);	// @ (0x592 * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1REFL,0)
// DAC1REFL<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x2C91);	// @ (0x592 * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1REFL,1)
// DAC1REFH<DAC1R10>
extern volatile __bit                   DAC1R10             __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 DAC1R10_bit         _BIT_ACCESS(DAC1REFH,2)
// DAC1REFH<DAC1R11>
extern volatile __bit                   DAC1R11             __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 DAC1R11_bit         _BIT_ACCESS(DAC1REFH,3)
// DAC1REFH<DAC1R12>
extern volatile __bit                   DAC1R12             __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 DAC1R12_bit         _BIT_ACCESS(DAC1REFH,4)
// DAC1REFH<DAC1R13>
extern volatile __bit                   DAC1R13             __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 DAC1R13_bit         _BIT_ACCESS(DAC1REFH,5)
// DAC1REFH<DAC1R14>
extern volatile __bit                   DAC1R14             __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 DAC1R14_bit         _BIT_ACCESS(DAC1REFH,6)
// DAC1REFH<DAC1R15>
extern volatile __bit                   DAC1R15             __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 DAC1R15_bit         _BIT_ACCESS(DAC1REFH,7)
// DAC1REFL<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x2C92);	// @ (0x592 * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1REFL,2)
// DAC1REFL<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x2C93);	// @ (0x592 * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1REFL,3)
// DAC1REFL<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x2C94);	// @ (0x592 * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1REFL,4)
// DAC1REFL<DAC1R5>
extern volatile __bit                   DAC1R5              __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 DAC1R5_bit          _BIT_ACCESS(DAC1REFL,5)
// DAC1REFL<DAC1R6>
extern volatile __bit                   DAC1R6              __at(0x2C96);	// @ (0x592 * 8 + 6)
#define                                 DAC1R6_bit          _BIT_ACCESS(DAC1REFL,6)
// DAC1REFL<DAC1R7>
extern volatile __bit                   DAC1R7              __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 DAC1R7_bit          _BIT_ACCESS(DAC1REFL,7)
// DAC1REFH<DAC1R8>
extern volatile __bit                   DAC1R8              __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 DAC1R8_bit          _BIT_ACCESS(DAC1REFH,0)
// DAC1REFH<DAC1R9>
extern volatile __bit                   DAC1R9              __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 DAC1R9_bit          _BIT_ACCESS(DAC1REFH,1)
// DAC1REFL<DAC1REF0>
extern volatile __bit                   DAC1REF0            __at(0x2C90);	// @ (0x592 * 8 + 0)
#define                                 DAC1REF0_bit        _BIT_ACCESS(DAC1REFL,0)
// DAC1REFL<DAC1REF1>
extern volatile __bit                   DAC1REF1            __at(0x2C91);	// @ (0x592 * 8 + 1)
#define                                 DAC1REF1_bit        _BIT_ACCESS(DAC1REFL,1)
// DAC1REFH<DAC1REF10>
extern volatile __bit                   DAC1REF10           __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 DAC1REF10_bit       _BIT_ACCESS(DAC1REFH,2)
// DAC1REFH<DAC1REF11>
extern volatile __bit                   DAC1REF11           __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 DAC1REF11_bit       _BIT_ACCESS(DAC1REFH,3)
// DAC1REFH<DAC1REF12>
extern volatile __bit                   DAC1REF12           __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 DAC1REF12_bit       _BIT_ACCESS(DAC1REFH,4)
// DAC1REFH<DAC1REF13>
extern volatile __bit                   DAC1REF13           __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 DAC1REF13_bit       _BIT_ACCESS(DAC1REFH,5)
// DAC1REFH<DAC1REF14>
extern volatile __bit                   DAC1REF14           __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 DAC1REF14_bit       _BIT_ACCESS(DAC1REFH,6)
// DAC1REFH<DAC1REF15>
extern volatile __bit                   DAC1REF15           __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 DAC1REF15_bit       _BIT_ACCESS(DAC1REFH,7)
// DAC1REFL<DAC1REF2>
extern volatile __bit                   DAC1REF2            __at(0x2C92);	// @ (0x592 * 8 + 2)
#define                                 DAC1REF2_bit        _BIT_ACCESS(DAC1REFL,2)
// DAC1REFL<DAC1REF3>
extern volatile __bit                   DAC1REF3            __at(0x2C93);	// @ (0x592 * 8 + 3)
#define                                 DAC1REF3_bit        _BIT_ACCESS(DAC1REFL,3)
// DAC1REFL<DAC1REF4>
extern volatile __bit                   DAC1REF4            __at(0x2C94);	// @ (0x592 * 8 + 4)
#define                                 DAC1REF4_bit        _BIT_ACCESS(DAC1REFL,4)
// DAC1REFL<DAC1REF5>
extern volatile __bit                   DAC1REF5            __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 DAC1REF5_bit        _BIT_ACCESS(DAC1REFL,5)
// DAC1REFL<DAC1REF6>
extern volatile __bit                   DAC1REF6            __at(0x2C96);	// @ (0x592 * 8 + 6)
#define                                 DAC1REF6_bit        _BIT_ACCESS(DAC1REFL,6)
// DAC1REFL<DAC1REF7>
extern volatile __bit                   DAC1REF7            __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 DAC1REF7_bit        _BIT_ACCESS(DAC1REFL,7)
// DAC1REFH<DAC1REF8>
extern volatile __bit                   DAC1REF8            __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 DAC1REF8_bit        _BIT_ACCESS(DAC1REFH,0)
// DAC1REFH<DAC1REF9>
extern volatile __bit                   DAC1REF9            __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 DAC1REF9_bit        _BIT_ACCESS(DAC1REFH,1)
// DAC3CON0<DAC3EN>
extern volatile __bit                   DAC3EN              __at(0x2CBF);	// @ (0x597 * 8 + 7)
#define                                 DAC3EN_bit          _BIT_ACCESS(DAC3CON0,7)
// DAC3CON0<DAC3NSS>
extern volatile __bit                   DAC3NSS             __at(0x2CB8);	// @ (0x597 * 8 + 0)
#define                                 DAC3NSS_bit         _BIT_ACCESS(DAC3CON0,0)
// DAC3CON0<DAC3OE1>
extern volatile __bit                   DAC3OE1             __at(0x2CBD);	// @ (0x597 * 8 + 5)
#define                                 DAC3OE1_bit         _BIT_ACCESS(DAC3CON0,5)
// DAC3CON0<DAC3PSS0>
extern volatile __bit                   DAC3PSS0            __at(0x2CBA);	// @ (0x597 * 8 + 2)
#define                                 DAC3PSS0_bit        _BIT_ACCESS(DAC3CON0,2)
// DAC3CON0<DAC3PSS1>
extern volatile __bit                   DAC3PSS1            __at(0x2CBB);	// @ (0x597 * 8 + 3)
#define                                 DAC3PSS1_bit        _BIT_ACCESS(DAC3CON0,3)
// DAC3REF<DAC3R0>
extern volatile __bit                   DAC3R0              __at(0x2CC0);	// @ (0x598 * 8 + 0)
#define                                 DAC3R0_bit          _BIT_ACCESS(DAC3REF,0)
// DAC3REF<DAC3R1>
extern volatile __bit                   DAC3R1              __at(0x2CC1);	// @ (0x598 * 8 + 1)
#define                                 DAC3R1_bit          _BIT_ACCESS(DAC3REF,1)
// DAC3REF<DAC3R2>
extern volatile __bit                   DAC3R2              __at(0x2CC2);	// @ (0x598 * 8 + 2)
#define                                 DAC3R2_bit          _BIT_ACCESS(DAC3REF,2)
// DAC3REF<DAC3R3>
extern volatile __bit                   DAC3R3              __at(0x2CC3);	// @ (0x598 * 8 + 3)
#define                                 DAC3R3_bit          _BIT_ACCESS(DAC3REF,3)
// DAC3REF<DAC3R4>
extern volatile __bit                   DAC3R4              __at(0x2CC4);	// @ (0x598 * 8 + 4)
#define                                 DAC3R4_bit          _BIT_ACCESS(DAC3REF,4)
// DAC3REF<DAC3REF0>
extern volatile __bit                   DAC3REF0            __at(0x2CC0);	// @ (0x598 * 8 + 0)
#define                                 DAC3REF0_bit        _BIT_ACCESS(DAC3REF,0)
// DAC3REF<DAC3REF1>
extern volatile __bit                   DAC3REF1            __at(0x2CC1);	// @ (0x598 * 8 + 1)
#define                                 DAC3REF1_bit        _BIT_ACCESS(DAC3REF,1)
// DAC3REF<DAC3REF2>
extern volatile __bit                   DAC3REF2            __at(0x2CC2);	// @ (0x598 * 8 + 2)
#define                                 DAC3REF2_bit        _BIT_ACCESS(DAC3REF,2)
// DAC3REF<DAC3REF3>
extern volatile __bit                   DAC3REF3            __at(0x2CC3);	// @ (0x598 * 8 + 3)
#define                                 DAC3REF3_bit        _BIT_ACCESS(DAC3REF,3)
// DAC3REF<DAC3REF4>
extern volatile __bit                   DAC3REF4            __at(0x2CC4);	// @ (0x598 * 8 + 4)
#define                                 DAC3REF4_bit        _BIT_ACCESS(DAC3REF,4)
// DAC3REF<DAC3REF5>
extern volatile __bit                   DAC3REF5            __at(0x2CC5);	// @ (0x598 * 8 + 5)
#define                                 DAC3REF5_bit        _BIT_ACCESS(DAC3REF,5)
// DAC1CON0<DACFM>
extern volatile __bit                   DACFM               __at(0x2C8E);	// @ (0x591 * 8 + 6)
#define                                 DACFM_bit           _BIT_ACCESS(DAC1CON0,6)
// DAC3CON0<DACNSS>
extern volatile __bit                   DACNSS              __at(0x2CB8);	// @ (0x597 * 8 + 0)
#define                                 DACNSS_bit          _BIT_ACCESS(DAC3CON0,0)
// DAC1CON0<DACNSS0>
extern volatile __bit                   DACNSS0             __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 DACNSS0_bit         _BIT_ACCESS(DAC1CON0,0)
// DAC1CON0<DACOE>
extern volatile __bit                   DACOE               __at(0x2C8D);	// @ (0x591 * 8 + 5)
#define                                 DACOE_bit           _BIT_ACCESS(DAC1CON0,5)
// DAC3REF<DACR0>
extern volatile __bit                   DACR0               __at(0x2CC0);	// @ (0x598 * 8 + 0)
#define                                 DACR0_bit           _BIT_ACCESS(DAC3REF,0)
// DAC3REF<DACR1>
extern volatile __bit                   DACR1               __at(0x2CC1);	// @ (0x598 * 8 + 1)
#define                                 DACR1_bit           _BIT_ACCESS(DAC3REF,1)
// DAC3REF<DACR2>
extern volatile __bit                   DACR2               __at(0x2CC2);	// @ (0x598 * 8 + 2)
#define                                 DACR2_bit           _BIT_ACCESS(DAC3REF,2)
// DAC3REF<DACR3>
extern volatile __bit                   DACR3               __at(0x2CC3);	// @ (0x598 * 8 + 3)
#define                                 DACR3_bit           _BIT_ACCESS(DAC3REF,3)
// DAC3REF<DACR4>
extern volatile __bit                   DACR4               __at(0x2CC4);	// @ (0x598 * 8 + 4)
#define                                 DACR4_bit           _BIT_ACCESS(DAC3REF,4)
// COG1DBF<DBF0>
extern volatile __bit                   DBF0                __at(0x3490);	// @ (0x692 * 8 + 0)
#define                                 DBF0_bit            _BIT_ACCESS(COG1DBF,0)
// COG1DBF<DBF1>
extern volatile __bit                   DBF1                __at(0x3491);	// @ (0x692 * 8 + 1)
#define                                 DBF1_bit            _BIT_ACCESS(COG1DBF,1)
// COG1DBF<DBF2>
extern volatile __bit                   DBF2                __at(0x3492);	// @ (0x692 * 8 + 2)
#define                                 DBF2_bit            _BIT_ACCESS(COG1DBF,2)
// COG1DBF<DBF3>
extern volatile __bit                   DBF3                __at(0x3493);	// @ (0x692 * 8 + 3)
#define                                 DBF3_bit            _BIT_ACCESS(COG1DBF,3)
// COG1DBF<DBF4>
extern volatile __bit                   DBF4                __at(0x3494);	// @ (0x692 * 8 + 4)
#define                                 DBF4_bit            _BIT_ACCESS(COG1DBF,4)
// COG1DBF<DBF5>
extern volatile __bit                   DBF5                __at(0x3495);	// @ (0x692 * 8 + 5)
#define                                 DBF5_bit            _BIT_ACCESS(COG1DBF,5)
// COG1DBR<DBR0>
extern volatile __bit                   DBR0                __at(0x3488);	// @ (0x691 * 8 + 0)
#define                                 DBR0_bit            _BIT_ACCESS(COG1DBR,0)
// COG1DBR<DBR1>
extern volatile __bit                   DBR1                __at(0x3489);	// @ (0x691 * 8 + 1)
#define                                 DBR1_bit            _BIT_ACCESS(COG1DBR,1)
// COG1DBR<DBR2>
extern volatile __bit                   DBR2                __at(0x348A);	// @ (0x691 * 8 + 2)
#define                                 DBR2_bit            _BIT_ACCESS(COG1DBR,2)
// COG1DBR<DBR3>
extern volatile __bit                   DBR3                __at(0x348B);	// @ (0x691 * 8 + 3)
#define                                 DBR3_bit            _BIT_ACCESS(COG1DBR,3)
// COG1DBR<DBR4>
extern volatile __bit                   DBR4                __at(0x348C);	// @ (0x691 * 8 + 4)
#define                                 DBR4_bit            _BIT_ACCESS(COG1DBR,4)
// COG1DBR<DBR5>
extern volatile __bit                   DBR5                __at(0x348D);	// @ (0x691 * 8 + 5)
#define                                 DBR5_bit            _BIT_ACCESS(COG1DBR,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// PWM3DCL<DC0>
extern volatile __bit                   DC0                 __at(0x30BE);	// @ (0x617 * 8 + 6)
#define                                 DC0_bit             _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<DC1>
extern volatile __bit                   DC1                 __at(0x30BF);	// @ (0x617 * 8 + 7)
#define                                 DC1_bit             _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<DC2>
extern volatile __bit                   DC2                 __at(0x30C0);	// @ (0x618 * 8 + 0)
#define                                 DC2_bit             _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<DC3>
extern volatile __bit                   DC3                 __at(0x30C1);	// @ (0x618 * 8 + 1)
#define                                 DC3_bit             _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<DC4>
extern volatile __bit                   DC4                 __at(0x30C2);	// @ (0x618 * 8 + 2)
#define                                 DC4_bit             _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<DC5>
extern volatile __bit                   DC5                 __at(0x30C3);	// @ (0x618 * 8 + 3)
#define                                 DC5_bit             _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<DC6>
extern volatile __bit                   DC6                 __at(0x30C4);	// @ (0x618 * 8 + 4)
#define                                 DC6_bit             _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<DC7>
extern volatile __bit                   DC7                 __at(0x30C5);	// @ (0x618 * 8 + 5)
#define                                 DC7_bit             _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<DC8>
extern volatile __bit                   DC8                 __at(0x30C6);	// @ (0x618 * 8 + 6)
#define                                 DC8_bit             _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<DC9>
extern volatile __bit                   DC9                 __at(0x30C7);	// @ (0x618 * 8 + 7)
#define                                 DC9_bit             _BIT_ACCESS(PWM3DCH,7)
// PWM5INTE<DCIE>
extern volatile __bit                   DCIE                __at(0x6CE1);	// @ (0xD9C * 8 + 1)
#define                                 DCIE_bit            _BIT_ACCESS(PWM5INTE,1)
// PWM5INTF<DCIF>
extern volatile __bit                   DCIF                __at(0x6CE9);	// @ (0xD9D * 8 + 1)
#define                                 DCIF_bit            _BIT_ACCESS(PWM5INTF,1)
// STATUS_SHAD<DC_SHAD>
extern volatile __bit                   DC_SHAD             __at(0x7F21);	// @ (0xFE4 * 8 + 1)
#define                                 DC_SHAD_bit         _BIT_ACCESS(STATUS_SHAD,1)
// SSP1CON3<DHEN>
extern volatile __bit                   DHEN                __at(0x10B8);	// @ (0x217 * 8 + 0)
#define                                 DHEN_bit            _BIT_ACCESS(SSP1CON3,0)
// SSP1STAT<D_nA>
extern volatile __bit                   D_nA                __at(0x10A5);	// @ (0x214 * 8 + 5)
#define                                 D_nA_bit            _BIT_ACCESS(SSP1STAT,5)
// COG1CON1<FDBS>
extern volatile __bit                   FDBS                __at(0x34A6);	// @ (0x694 * 8 + 6)
#define                                 FDBS_bit            _BIT_ACCESS(COG1CON1,6)
// PRG1CON0<FEDG>
extern volatile __bit                   FEDG                __at(0x3CBD);	// @ (0x797 * 8 + 5)
#define                                 FEDG_bit            _BIT_ACCESS(PRG1CON0,5)
// RC1STA<FERR>
extern volatile __bit                   FERR                __at(0xCEA);	// @ (0x19D * 8 + 2)
#define                                 FERR_bit            _BIT_ACCESS(RC1STA,2)
// COG1FIS0<FIS0>
extern volatile __bit                   FIS0                __at(0x34C8);	// @ (0x699 * 8 + 0)
#define                                 FIS0_bit            _BIT_ACCESS(COG1FIS0,0)
// COG1FIS0<FIS1>
extern volatile __bit                   FIS1                __at(0x34C9);	// @ (0x699 * 8 + 1)
#define                                 FIS1_bit            _BIT_ACCESS(COG1FIS0,1)
// COG1FIS1<FIS10>
extern volatile __bit                   FIS10               __at(0x34D2);	// @ (0x69A * 8 + 2)
#define                                 FIS10_bit           _BIT_ACCESS(COG1FIS1,2)
// COG1FIS1<FIS11>
extern volatile __bit                   FIS11               __at(0x34D3);	// @ (0x69A * 8 + 3)
#define                                 FIS11_bit           _BIT_ACCESS(COG1FIS1,3)
// COG1FIS1<FIS12>
extern volatile __bit                   FIS12               __at(0x34D4);	// @ (0x69A * 8 + 4)
#define                                 FIS12_bit           _BIT_ACCESS(COG1FIS1,4)
// COG1FIS1<FIS13>
extern volatile __bit                   FIS13               __at(0x34D5);	// @ (0x69A * 8 + 5)
#define                                 FIS13_bit           _BIT_ACCESS(COG1FIS1,5)
// COG1FIS1<FIS14>
extern volatile __bit                   FIS14               __at(0x34D6);	// @ (0x69A * 8 + 6)
#define                                 FIS14_bit           _BIT_ACCESS(COG1FIS1,6)
// COG1FIS0<FIS2>
extern volatile __bit                   FIS2                __at(0x34CA);	// @ (0x699 * 8 + 2)
#define                                 FIS2_bit            _BIT_ACCESS(COG1FIS0,2)
// COG1FIS0<FIS3>
extern volatile __bit                   FIS3                __at(0x34CB);	// @ (0x699 * 8 + 3)
#define                                 FIS3_bit            _BIT_ACCESS(COG1FIS0,3)
// COG1FIS0<FIS4>
extern volatile __bit                   FIS4                __at(0x34CC);	// @ (0x699 * 8 + 4)
#define                                 FIS4_bit            _BIT_ACCESS(COG1FIS0,4)
// COG1FIS0<FIS5>
extern volatile __bit                   FIS5                __at(0x34CD);	// @ (0x699 * 8 + 5)
#define                                 FIS5_bit            _BIT_ACCESS(COG1FIS0,5)
// COG1FIS0<FIS6>
extern volatile __bit                   FIS6                __at(0x34CE);	// @ (0x699 * 8 + 6)
#define                                 FIS6_bit            _BIT_ACCESS(COG1FIS0,6)
// COG1FIS0<FIS7>
extern volatile __bit                   FIS7                __at(0x34CF);	// @ (0x699 * 8 + 7)
#define                                 FIS7_bit            _BIT_ACCESS(COG1FIS0,7)
// COG1FIS1<FIS8>
extern volatile __bit                   FIS8                __at(0x34D0);	// @ (0x69A * 8 + 0)
#define                                 FIS8_bit            _BIT_ACCESS(COG1FIS1,0)
// COG1FIS1<FIS9>
extern volatile __bit                   FIS9                __at(0x34D1);	// @ (0x69A * 8 + 1)
#define                                 FIS9_bit            _BIT_ACCESS(COG1FIS1,1)
// DAC1CON0<FM>
extern volatile __bit                   FM                  __at(0x2C8E);	// @ (0x591 * 8 + 6)
#define                                 FM_bit              _BIT_ACCESS(DAC1CON0,6)
// CCP1CON<FMT>
extern volatile __bit                   FMT                 __at(0x149C);	// @ (0x293 * 8 + 4)
#define                                 FMT_bit             _BIT_ACCESS(CCP1CON,4)
// PRG1CON1<FPOL>
extern volatile __bit                   FPOL                __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 FPOL_bit            _BIT_ACCESS(PRG1CON1,1)
// PMCON1<FREE>
extern volatile __bit                   FREE                __at(0xCAC);	// @ (0x195 * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(PMCON1,4)
// COG1FSIM0<FSIM0>
extern volatile __bit                   FSIM0               __at(0x34D8);	// @ (0x69B * 8 + 0)
#define                                 FSIM0_bit           _BIT_ACCESS(COG1FSIM0,0)
// COG1FSIM0<FSIM1>
extern volatile __bit                   FSIM1               __at(0x34D9);	// @ (0x69B * 8 + 1)
#define                                 FSIM1_bit           _BIT_ACCESS(COG1FSIM0,1)
// COG1FSIM1<FSIM10>
extern volatile __bit                   FSIM10              __at(0x34E2);	// @ (0x69C * 8 + 2)
#define                                 FSIM10_bit          _BIT_ACCESS(COG1FSIM1,2)
// COG1FSIM1<FSIM11>
extern volatile __bit                   FSIM11              __at(0x34E3);	// @ (0x69C * 8 + 3)
#define                                 FSIM11_bit          _BIT_ACCESS(COG1FSIM1,3)
// COG1FSIM1<FSIM12>
extern volatile __bit                   FSIM12              __at(0x34E4);	// @ (0x69C * 8 + 4)
#define                                 FSIM12_bit          _BIT_ACCESS(COG1FSIM1,4)
// COG1FSIM1<FSIM13>
extern volatile __bit                   FSIM13              __at(0x34E5);	// @ (0x69C * 8 + 5)
#define                                 FSIM13_bit          _BIT_ACCESS(COG1FSIM1,5)
// COG1FSIM1<FSIM14>
extern volatile __bit                   FSIM14              __at(0x34E6);	// @ (0x69C * 8 + 6)
#define                                 FSIM14_bit          _BIT_ACCESS(COG1FSIM1,6)
// COG1FSIM0<FSIM2>
extern volatile __bit                   FSIM2               __at(0x34DA);	// @ (0x69B * 8 + 2)
#define                                 FSIM2_bit           _BIT_ACCESS(COG1FSIM0,2)
// COG1FSIM0<FSIM3>
extern volatile __bit                   FSIM3               __at(0x34DB);	// @ (0x69B * 8 + 3)
#define                                 FSIM3_bit           _BIT_ACCESS(COG1FSIM0,3)
// COG1FSIM0<FSIM4>
extern volatile __bit                   FSIM4               __at(0x34DC);	// @ (0x69B * 8 + 4)
#define                                 FSIM4_bit           _BIT_ACCESS(COG1FSIM0,4)
// COG1FSIM0<FSIM5>
extern volatile __bit                   FSIM5               __at(0x34DD);	// @ (0x69B * 8 + 5)
#define                                 FSIM5_bit           _BIT_ACCESS(COG1FSIM0,5)
// COG1FSIM0<FSIM6>
extern volatile __bit                   FSIM6               __at(0x34DE);	// @ (0x69B * 8 + 6)
#define                                 FSIM6_bit           _BIT_ACCESS(COG1FSIM0,6)
// COG1FSIM0<FSIM7>
extern volatile __bit                   FSIM7               __at(0x34DF);	// @ (0x69B * 8 + 7)
#define                                 FSIM7_bit           _BIT_ACCESS(COG1FSIM0,7)
// COG1FSIM1<FSIM8>
extern volatile __bit                   FSIM8               __at(0x34E0);	// @ (0x69C * 8 + 0)
#define                                 FSIM8_bit           _BIT_ACCESS(COG1FSIM1,0)
// COG1FSIM1<FSIM9>
extern volatile __bit                   FSIM9               __at(0x34E1);	// @ (0x69C * 8 + 1)
#define                                 FSIM9_bit           _BIT_ACCESS(COG1FSIM1,1)
// PRG1FTSS<FTSS0>
extern volatile __bit                   FTSS0               __at(0x3CA8);	// @ (0x795 * 8 + 0)
#define                                 FTSS0_bit           _BIT_ACCESS(PRG1FTSS,0)
// PRG1FTSS<FTSS1>
extern volatile __bit                   FTSS1               __at(0x3CA9);	// @ (0x795 * 8 + 1)
#define                                 FTSS1_bit           _BIT_ACCESS(PRG1FTSS,1)
// PRG1FTSS<FTSS2>
extern volatile __bit                   FTSS2               __at(0x3CAA);	// @ (0x795 * 8 + 2)
#define                                 FTSS2_bit           _BIT_ACCESS(PRG1FTSS,2)
// PRG1FTSS<FTSS3>
extern volatile __bit                   FTSS3               __at(0x3CAB);	// @ (0x795 * 8 + 3)
#define                                 FTSS3_bit           _BIT_ACCESS(PRG1FTSS,3)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x10F7);	// @ (0x21E * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x10F6);	// @ (0x21E * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// COG1ASD0<G1ARSEN>
extern volatile __bit                   G1ARSEN             __at(0x34EE);	// @ (0x69D * 8 + 6)
#define                                 G1ARSEN_bit         _BIT_ACCESS(COG1ASD0,6)
// COG1ASD1<G1AS0E>
extern volatile __bit                   G1AS0E              __at(0x34F0);	// @ (0x69E * 8 + 0)
#define                                 G1AS0E_bit          _BIT_ACCESS(COG1ASD1,0)
// COG1ASD1<G1AS1E>
extern volatile __bit                   G1AS1E              __at(0x34F1);	// @ (0x69E * 8 + 1)
#define                                 G1AS1E_bit          _BIT_ACCESS(COG1ASD1,1)
// COG1ASD1<G1AS2E>
extern volatile __bit                   G1AS2E              __at(0x34F2);	// @ (0x69E * 8 + 2)
#define                                 G1AS2E_bit          _BIT_ACCESS(COG1ASD1,2)
// COG1ASD1<G1AS3E>
extern volatile __bit                   G1AS3E              __at(0x34F3);	// @ (0x69E * 8 + 3)
#define                                 G1AS3E_bit          _BIT_ACCESS(COG1ASD1,3)
// COG1ASD1<G1AS4E>
extern volatile __bit                   G1AS4E              __at(0x34F4);	// @ (0x69E * 8 + 4)
#define                                 G1AS4E_bit          _BIT_ACCESS(COG1ASD1,4)
// COG1ASD1<G1AS5E>
extern volatile __bit                   G1AS5E              __at(0x34F5);	// @ (0x69E * 8 + 5)
#define                                 G1AS5E_bit          _BIT_ACCESS(COG1ASD1,5)
// COG1ASD1<G1AS6E>
extern volatile __bit                   G1AS6E              __at(0x34F6);	// @ (0x69E * 8 + 6)
#define                                 G1AS6E_bit          _BIT_ACCESS(COG1ASD1,6)
// COG1ASD1<G1AS7E>
extern volatile __bit                   G1AS7E              __at(0x34F7);	// @ (0x69E * 8 + 7)
#define                                 G1AS7E_bit          _BIT_ACCESS(COG1ASD1,7)
// COG1ASD0<G1ASDAC0>
extern volatile __bit                   G1ASDAC0            __at(0x34EA);	// @ (0x69D * 8 + 2)
#define                                 G1ASDAC0_bit        _BIT_ACCESS(COG1ASD0,2)
// COG1ASD0<G1ASDAC1>
extern volatile __bit                   G1ASDAC1            __at(0x34EB);	// @ (0x69D * 8 + 3)
#define                                 G1ASDAC1_bit        _BIT_ACCESS(COG1ASD0,3)
// COG1ASD0<G1ASDBD0>
extern volatile __bit                   G1ASDBD0            __at(0x34EC);	// @ (0x69D * 8 + 4)
#define                                 G1ASDBD0_bit        _BIT_ACCESS(COG1ASD0,4)
// COG1ASD0<G1ASDBD1>
extern volatile __bit                   G1ASDBD1            __at(0x34ED);	// @ (0x69D * 8 + 5)
#define                                 G1ASDBD1_bit        _BIT_ACCESS(COG1ASD0,5)
// COG1ASD0<G1ASE>
extern volatile __bit                   G1ASE               __at(0x34EF);	// @ (0x69D * 8 + 7)
#define                                 G1ASE_bit           _BIT_ACCESS(COG1ASD0,7)
// COG1ASD0<G1ASREN>
extern volatile __bit                   G1ASREN             __at(0x34EE);	// @ (0x69D * 8 + 6)
#define                                 G1ASREN_bit         _BIT_ACCESS(COG1ASD0,6)
// COG1BLKF<G1BLKF0>
extern volatile __bit                   G1BLKF0             __at(0x3480);	// @ (0x690 * 8 + 0)
#define                                 G1BLKF0_bit         _BIT_ACCESS(COG1BLKF,0)
// COG1BLKF<G1BLKF1>
extern volatile __bit                   G1BLKF1             __at(0x3481);	// @ (0x690 * 8 + 1)
#define                                 G1BLKF1_bit         _BIT_ACCESS(COG1BLKF,1)
// COG1BLKF<G1BLKF2>
extern volatile __bit                   G1BLKF2             __at(0x3482);	// @ (0x690 * 8 + 2)
#define                                 G1BLKF2_bit         _BIT_ACCESS(COG1BLKF,2)
// COG1BLKF<G1BLKF3>
extern volatile __bit                   G1BLKF3             __at(0x3483);	// @ (0x690 * 8 + 3)
#define                                 G1BLKF3_bit         _BIT_ACCESS(COG1BLKF,3)
// COG1BLKF<G1BLKF4>
extern volatile __bit                   G1BLKF4             __at(0x3484);	// @ (0x690 * 8 + 4)
#define                                 G1BLKF4_bit         _BIT_ACCESS(COG1BLKF,4)
// COG1BLKF<G1BLKF5>
extern volatile __bit                   G1BLKF5             __at(0x3485);	// @ (0x690 * 8 + 5)
#define                                 G1BLKF5_bit         _BIT_ACCESS(COG1BLKF,5)
// COG1BLKR<G1BLKR0>
extern volatile __bit                   G1BLKR0             __at(0x3478);	// @ (0x68F * 8 + 0)
#define                                 G1BLKR0_bit         _BIT_ACCESS(COG1BLKR,0)
// COG1BLKR<G1BLKR1>
extern volatile __bit                   G1BLKR1             __at(0x3479);	// @ (0x68F * 8 + 1)
#define                                 G1BLKR1_bit         _BIT_ACCESS(COG1BLKR,1)
// COG1BLKR<G1BLKR2>
extern volatile __bit                   G1BLKR2             __at(0x347A);	// @ (0x68F * 8 + 2)
#define                                 G1BLKR2_bit         _BIT_ACCESS(COG1BLKR,2)
// COG1BLKR<G1BLKR3>
extern volatile __bit                   G1BLKR3             __at(0x347B);	// @ (0x68F * 8 + 3)
#define                                 G1BLKR3_bit         _BIT_ACCESS(COG1BLKR,3)
// COG1BLKR<G1BLKR4>
extern volatile __bit                   G1BLKR4             __at(0x347C);	// @ (0x68F * 8 + 4)
#define                                 G1BLKR4_bit         _BIT_ACCESS(COG1BLKR,4)
// COG1BLKR<G1BLKR5>
extern volatile __bit                   G1BLKR5             __at(0x347D);	// @ (0x68F * 8 + 5)
#define                                 G1BLKR5_bit         _BIT_ACCESS(COG1BLKR,5)
// COG1CON0<G1CS0>
extern volatile __bit                   G1CS0               __at(0x349B);	// @ (0x693 * 8 + 3)
#define                                 G1CS0_bit           _BIT_ACCESS(COG1CON0,3)
// COG1CON0<G1CS1>
extern volatile __bit                   G1CS1               __at(0x349C);	// @ (0x693 * 8 + 4)
#define                                 G1CS1_bit           _BIT_ACCESS(COG1CON0,4)
// COG1DBF<G1DBF0>
extern volatile __bit                   G1DBF0              __at(0x3490);	// @ (0x692 * 8 + 0)
#define                                 G1DBF0_bit          _BIT_ACCESS(COG1DBF,0)
// COG1DBF<G1DBF1>
extern volatile __bit                   G1DBF1              __at(0x3491);	// @ (0x692 * 8 + 1)
#define                                 G1DBF1_bit          _BIT_ACCESS(COG1DBF,1)
// COG1DBF<G1DBF2>
extern volatile __bit                   G1DBF2              __at(0x3492);	// @ (0x692 * 8 + 2)
#define                                 G1DBF2_bit          _BIT_ACCESS(COG1DBF,2)
// COG1DBF<G1DBF3>
extern volatile __bit                   G1DBF3              __at(0x3493);	// @ (0x692 * 8 + 3)
#define                                 G1DBF3_bit          _BIT_ACCESS(COG1DBF,3)
// COG1DBF<G1DBF4>
extern volatile __bit                   G1DBF4              __at(0x3494);	// @ (0x692 * 8 + 4)
#define                                 G1DBF4_bit          _BIT_ACCESS(COG1DBF,4)
// COG1DBF<G1DBF5>
extern volatile __bit                   G1DBF5              __at(0x3495);	// @ (0x692 * 8 + 5)
#define                                 G1DBF5_bit          _BIT_ACCESS(COG1DBF,5)
// COG1DBR<G1DBR0>
extern volatile __bit                   G1DBR0              __at(0x3488);	// @ (0x691 * 8 + 0)
#define                                 G1DBR0_bit          _BIT_ACCESS(COG1DBR,0)
// COG1DBR<G1DBR1>
extern volatile __bit                   G1DBR1              __at(0x3489);	// @ (0x691 * 8 + 1)
#define                                 G1DBR1_bit          _BIT_ACCESS(COG1DBR,1)
// COG1DBR<G1DBR2>
extern volatile __bit                   G1DBR2              __at(0x348A);	// @ (0x691 * 8 + 2)
#define                                 G1DBR2_bit          _BIT_ACCESS(COG1DBR,2)
// COG1DBR<G1DBR3>
extern volatile __bit                   G1DBR3              __at(0x348B);	// @ (0x691 * 8 + 3)
#define                                 G1DBR3_bit          _BIT_ACCESS(COG1DBR,3)
// COG1DBR<G1DBR4>
extern volatile __bit                   G1DBR4              __at(0x348C);	// @ (0x691 * 8 + 4)
#define                                 G1DBR4_bit          _BIT_ACCESS(COG1DBR,4)
// COG1DBR<G1DBR5>
extern volatile __bit                   G1DBR5              __at(0x348D);	// @ (0x691 * 8 + 5)
#define                                 G1DBR5_bit          _BIT_ACCESS(COG1DBR,5)
// COG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x349F);	// @ (0x693 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(COG1CON0,7)
// COG1CON1<G1FDBS>
extern volatile __bit                   G1FDBS              __at(0x34A6);	// @ (0x694 * 8 + 6)
#define                                 G1FDBS_bit          _BIT_ACCESS(COG1CON1,6)
// COG1FIS0<G1FIS0>
extern volatile __bit                   G1FIS0              __at(0x34C8);	// @ (0x699 * 8 + 0)
#define                                 G1FIS0_bit          _BIT_ACCESS(COG1FIS0,0)
// COG1FIS0<G1FIS1>
extern volatile __bit                   G1FIS1              __at(0x34C9);	// @ (0x699 * 8 + 1)
#define                                 G1FIS1_bit          _BIT_ACCESS(COG1FIS0,1)
// COG1FIS1<G1FIS10>
extern volatile __bit                   G1FIS10             __at(0x34D2);	// @ (0x69A * 8 + 2)
#define                                 G1FIS10_bit         _BIT_ACCESS(COG1FIS1,2)
// COG1FIS1<G1FIS11>
extern volatile __bit                   G1FIS11             __at(0x34D3);	// @ (0x69A * 8 + 3)
#define                                 G1FIS11_bit         _BIT_ACCESS(COG1FIS1,3)
// COG1FIS1<G1FIS12>
extern volatile __bit                   G1FIS12             __at(0x34D4);	// @ (0x69A * 8 + 4)
#define                                 G1FIS12_bit         _BIT_ACCESS(COG1FIS1,4)
// COG1FIS1<G1FIS13>
extern volatile __bit                   G1FIS13             __at(0x34D5);	// @ (0x69A * 8 + 5)
#define                                 G1FIS13_bit         _BIT_ACCESS(COG1FIS1,5)
// COG1FIS1<G1FIS14>
extern volatile __bit                   G1FIS14             __at(0x34D6);	// @ (0x69A * 8 + 6)
#define                                 G1FIS14_bit         _BIT_ACCESS(COG1FIS1,6)
// COG1FIS0<G1FIS2>
extern volatile __bit                   G1FIS2              __at(0x34CA);	// @ (0x699 * 8 + 2)
#define                                 G1FIS2_bit          _BIT_ACCESS(COG1FIS0,2)
// COG1FIS0<G1FIS3>
extern volatile __bit                   G1FIS3              __at(0x34CB);	// @ (0x699 * 8 + 3)
#define                                 G1FIS3_bit          _BIT_ACCESS(COG1FIS0,3)
// COG1FIS0<G1FIS4>
extern volatile __bit                   G1FIS4              __at(0x34CC);	// @ (0x699 * 8 + 4)
#define                                 G1FIS4_bit          _BIT_ACCESS(COG1FIS0,4)
// COG1FIS0<G1FIS5>
extern volatile __bit                   G1FIS5              __at(0x34CD);	// @ (0x699 * 8 + 5)
#define                                 G1FIS5_bit          _BIT_ACCESS(COG1FIS0,5)
// COG1FIS0<G1FIS6>
extern volatile __bit                   G1FIS6              __at(0x34CE);	// @ (0x699 * 8 + 6)
#define                                 G1FIS6_bit          _BIT_ACCESS(COG1FIS0,6)
// COG1FIS0<G1FIS7>
extern volatile __bit                   G1FIS7              __at(0x34CF);	// @ (0x699 * 8 + 7)
#define                                 G1FIS7_bit          _BIT_ACCESS(COG1FIS0,7)
// COG1FIS1<G1FIS8>
extern volatile __bit                   G1FIS8              __at(0x34D0);	// @ (0x69A * 8 + 0)
#define                                 G1FIS8_bit          _BIT_ACCESS(COG1FIS1,0)
// COG1FIS1<G1FIS9>
extern volatile __bit                   G1FIS9              __at(0x34D1);	// @ (0x69A * 8 + 1)
#define                                 G1FIS9_bit          _BIT_ACCESS(COG1FIS1,1)
// COG1FSIM0<G1FSIM0>
extern volatile __bit                   G1FSIM0             __at(0x34D8);	// @ (0x69B * 8 + 0)
#define                                 G1FSIM0_bit         _BIT_ACCESS(COG1FSIM0,0)
// COG1FSIM0<G1FSIM1>
extern volatile __bit                   G1FSIM1             __at(0x34D9);	// @ (0x69B * 8 + 1)
#define                                 G1FSIM1_bit         _BIT_ACCESS(COG1FSIM0,1)
// COG1FSIM1<G1FSIM10>
extern volatile __bit                   G1FSIM10            __at(0x34E2);	// @ (0x69C * 8 + 2)
#define                                 G1FSIM10_bit        _BIT_ACCESS(COG1FSIM1,2)
// COG1FSIM1<G1FSIM11>
extern volatile __bit                   G1FSIM11            __at(0x34E3);	// @ (0x69C * 8 + 3)
#define                                 G1FSIM11_bit        _BIT_ACCESS(COG1FSIM1,3)
// COG1FSIM1<G1FSIM12>
extern volatile __bit                   G1FSIM12            __at(0x34E4);	// @ (0x69C * 8 + 4)
#define                                 G1FSIM12_bit        _BIT_ACCESS(COG1FSIM1,4)
// COG1FSIM1<G1FSIM13>
extern volatile __bit                   G1FSIM13            __at(0x34E5);	// @ (0x69C * 8 + 5)
#define                                 G1FSIM13_bit        _BIT_ACCESS(COG1FSIM1,5)
// COG1FSIM1<G1FSIM14>
extern volatile __bit                   G1FSIM14            __at(0x34E6);	// @ (0x69C * 8 + 6)
#define                                 G1FSIM14_bit        _BIT_ACCESS(COG1FSIM1,6)
// COG1FSIM0<G1FSIM2>
extern volatile __bit                   G1FSIM2             __at(0x34DA);	// @ (0x69B * 8 + 2)
#define                                 G1FSIM2_bit         _BIT_ACCESS(COG1FSIM0,2)
// COG1FSIM0<G1FSIM3>
extern volatile __bit                   G1FSIM3             __at(0x34DB);	// @ (0x69B * 8 + 3)
#define                                 G1FSIM3_bit         _BIT_ACCESS(COG1FSIM0,3)
// COG1FSIM0<G1FSIM4>
extern volatile __bit                   G1FSIM4             __at(0x34DC);	// @ (0x69B * 8 + 4)
#define                                 G1FSIM4_bit         _BIT_ACCESS(COG1FSIM0,4)
// COG1FSIM0<G1FSIM5>
extern volatile __bit                   G1FSIM5             __at(0x34DD);	// @ (0x69B * 8 + 5)
#define                                 G1FSIM5_bit         _BIT_ACCESS(COG1FSIM0,5)
// COG1FSIM0<G1FSIM6>
extern volatile __bit                   G1FSIM6             __at(0x34DE);	// @ (0x69B * 8 + 6)
#define                                 G1FSIM6_bit         _BIT_ACCESS(COG1FSIM0,6)
// COG1FSIM0<G1FSIM7>
extern volatile __bit                   G1FSIM7             __at(0x34DF);	// @ (0x69B * 8 + 7)
#define                                 G1FSIM7_bit         _BIT_ACCESS(COG1FSIM0,7)
// COG1FSIM1<G1FSIM8>
extern volatile __bit                   G1FSIM8             __at(0x34E0);	// @ (0x69C * 8 + 0)
#define                                 G1FSIM8_bit         _BIT_ACCESS(COG1FSIM1,0)
// COG1FSIM1<G1FSIM9>
extern volatile __bit                   G1FSIM9             __at(0x34E1);	// @ (0x69C * 8 + 1)
#define                                 G1FSIM9_bit         _BIT_ACCESS(COG1FSIM1,1)
// COG1CON0<G1LD>
extern volatile __bit                   G1LD                __at(0x349E);	// @ (0x693 * 8 + 6)
#define                                 G1LD_bit            _BIT_ACCESS(COG1CON0,6)
// COG1CON0<G1MD0>
extern volatile __bit                   G1MD0               __at(0x3498);	// @ (0x693 * 8 + 0)
#define                                 G1MD0_bit           _BIT_ACCESS(COG1CON0,0)
// COG1CON0<G1MD1>
extern volatile __bit                   G1MD1               __at(0x3499);	// @ (0x693 * 8 + 1)
#define                                 G1MD1_bit           _BIT_ACCESS(COG1CON0,1)
// COG1CON0<G1MD2>
extern volatile __bit                   G1MD2               __at(0x349A);	// @ (0x693 * 8 + 2)
#define                                 G1MD2_bit           _BIT_ACCESS(COG1CON0,2)
// COG1PHF<G1PHF0>
extern volatile __bit                   G1PHF0              __at(0x3470);	// @ (0x68E * 8 + 0)
#define                                 G1PHF0_bit          _BIT_ACCESS(COG1PHF,0)
// COG1PHF<G1PHF1>
extern volatile __bit                   G1PHF1              __at(0x3471);	// @ (0x68E * 8 + 1)
#define                                 G1PHF1_bit          _BIT_ACCESS(COG1PHF,1)
// COG1PHF<G1PHF2>
extern volatile __bit                   G1PHF2              __at(0x3472);	// @ (0x68E * 8 + 2)
#define                                 G1PHF2_bit          _BIT_ACCESS(COG1PHF,2)
// COG1PHF<G1PHF3>
extern volatile __bit                   G1PHF3              __at(0x3473);	// @ (0x68E * 8 + 3)
#define                                 G1PHF3_bit          _BIT_ACCESS(COG1PHF,3)
// COG1PHF<G1PHF4>
extern volatile __bit                   G1PHF4              __at(0x3474);	// @ (0x68E * 8 + 4)
#define                                 G1PHF4_bit          _BIT_ACCESS(COG1PHF,4)
// COG1PHF<G1PHF5>
extern volatile __bit                   G1PHF5              __at(0x3475);	// @ (0x68E * 8 + 5)
#define                                 G1PHF5_bit          _BIT_ACCESS(COG1PHF,5)
// COG1PHR<G1PHR0>
extern volatile __bit                   G1PHR0              __at(0x3468);	// @ (0x68D * 8 + 0)
#define                                 G1PHR0_bit          _BIT_ACCESS(COG1PHR,0)
// COG1PHR<G1PHR1>
extern volatile __bit                   G1PHR1              __at(0x3469);	// @ (0x68D * 8 + 1)
#define                                 G1PHR1_bit          _BIT_ACCESS(COG1PHR,1)
// COG1PHR<G1PHR2>
extern volatile __bit                   G1PHR2              __at(0x346A);	// @ (0x68D * 8 + 2)
#define                                 G1PHR2_bit          _BIT_ACCESS(COG1PHR,2)
// COG1PHR<G1PHR3>
extern volatile __bit                   G1PHR3              __at(0x346B);	// @ (0x68D * 8 + 3)
#define                                 G1PHR3_bit          _BIT_ACCESS(COG1PHR,3)
// COG1PHR<G1PHR4>
extern volatile __bit                   G1PHR4              __at(0x346C);	// @ (0x68D * 8 + 4)
#define                                 G1PHR4_bit          _BIT_ACCESS(COG1PHR,4)
// COG1PHR<G1PHR5>
extern volatile __bit                   G1PHR5              __at(0x346D);	// @ (0x68D * 8 + 5)
#define                                 G1PHR5_bit          _BIT_ACCESS(COG1PHR,5)
// COG1CON1<G1POLA>
extern volatile __bit                   G1POLA              __at(0x34A0);	// @ (0x694 * 8 + 0)
#define                                 G1POLA_bit          _BIT_ACCESS(COG1CON1,0)
// COG1CON1<G1POLB>
extern volatile __bit                   G1POLB              __at(0x34A1);	// @ (0x694 * 8 + 1)
#define                                 G1POLB_bit          _BIT_ACCESS(COG1CON1,1)
// COG1CON1<G1POLC>
extern volatile __bit                   G1POLC              __at(0x34A2);	// @ (0x694 * 8 + 2)
#define                                 G1POLC_bit          _BIT_ACCESS(COG1CON1,2)
// COG1CON1<G1POLD>
extern volatile __bit                   G1POLD              __at(0x34A3);	// @ (0x694 * 8 + 3)
#define                                 G1POLD_bit          _BIT_ACCESS(COG1CON1,3)
// COG1CON1<G1RDBS>
extern volatile __bit                   G1RDBS              __at(0x34A7);	// @ (0x694 * 8 + 7)
#define                                 G1RDBS_bit          _BIT_ACCESS(COG1CON1,7)
// COG1RIS0<G1RIS0>
extern volatile __bit                   G1RIS0              __at(0x34A8);	// @ (0x695 * 8 + 0)
#define                                 G1RIS0_bit          _BIT_ACCESS(COG1RIS0,0)
// COG1RIS0<G1RIS1>
extern volatile __bit                   G1RIS1              __at(0x34A9);	// @ (0x695 * 8 + 1)
#define                                 G1RIS1_bit          _BIT_ACCESS(COG1RIS0,1)
// COG1RIS1<G1RIS10>
extern volatile __bit                   G1RIS10             __at(0x34B2);	// @ (0x696 * 8 + 2)
#define                                 G1RIS10_bit         _BIT_ACCESS(COG1RIS1,2)
// COG1RIS1<G1RIS11>
extern volatile __bit                   G1RIS11             __at(0x34B3);	// @ (0x696 * 8 + 3)
#define                                 G1RIS11_bit         _BIT_ACCESS(COG1RIS1,3)
// COG1RIS1<G1RIS12>
extern volatile __bit                   G1RIS12             __at(0x34B4);	// @ (0x696 * 8 + 4)
#define                                 G1RIS12_bit         _BIT_ACCESS(COG1RIS1,4)
// COG1RIS1<G1RIS13>
extern volatile __bit                   G1RIS13             __at(0x34B5);	// @ (0x696 * 8 + 5)
#define                                 G1RIS13_bit         _BIT_ACCESS(COG1RIS1,5)
// COG1RIS1<G1RIS14>
extern volatile __bit                   G1RIS14             __at(0x34B6);	// @ (0x696 * 8 + 6)
#define                                 G1RIS14_bit         _BIT_ACCESS(COG1RIS1,6)
// COG1RIS0<G1RIS2>
extern volatile __bit                   G1RIS2              __at(0x34AA);	// @ (0x695 * 8 + 2)
#define                                 G1RIS2_bit          _BIT_ACCESS(COG1RIS0,2)
// COG1RIS0<G1RIS3>
extern volatile __bit                   G1RIS3              __at(0x34AB);	// @ (0x695 * 8 + 3)
#define                                 G1RIS3_bit          _BIT_ACCESS(COG1RIS0,3)
// COG1RIS0<G1RIS4>
extern volatile __bit                   G1RIS4              __at(0x34AC);	// @ (0x695 * 8 + 4)
#define                                 G1RIS4_bit          _BIT_ACCESS(COG1RIS0,4)
// COG1RIS0<G1RIS5>
extern volatile __bit                   G1RIS5              __at(0x34AD);	// @ (0x695 * 8 + 5)
#define                                 G1RIS5_bit          _BIT_ACCESS(COG1RIS0,5)
// COG1RIS0<G1RIS6>
extern volatile __bit                   G1RIS6              __at(0x34AE);	// @ (0x695 * 8 + 6)
#define                                 G1RIS6_bit          _BIT_ACCESS(COG1RIS0,6)
// COG1RIS0<G1RIS7>
extern volatile __bit                   G1RIS7              __at(0x34AF);	// @ (0x695 * 8 + 7)
#define                                 G1RIS7_bit          _BIT_ACCESS(COG1RIS0,7)
// COG1RIS1<G1RIS8>
extern volatile __bit                   G1RIS8              __at(0x34B0);	// @ (0x696 * 8 + 0)
#define                                 G1RIS8_bit          _BIT_ACCESS(COG1RIS1,0)
// COG1RIS1<G1RIS9>
extern volatile __bit                   G1RIS9              __at(0x34B1);	// @ (0x696 * 8 + 1)
#define                                 G1RIS9_bit          _BIT_ACCESS(COG1RIS1,1)
// COG1RSIM0<G1RSIM0>
extern volatile __bit                   G1RSIM0             __at(0x34B8);	// @ (0x697 * 8 + 0)
#define                                 G1RSIM0_bit         _BIT_ACCESS(COG1RSIM0,0)
// COG1RSIM0<G1RSIM1>
extern volatile __bit                   G1RSIM1             __at(0x34B9);	// @ (0x697 * 8 + 1)
#define                                 G1RSIM1_bit         _BIT_ACCESS(COG1RSIM0,1)
// COG1RSIM1<G1RSIM10>
extern volatile __bit                   G1RSIM10            __at(0x34C2);	// @ (0x698 * 8 + 2)
#define                                 G1RSIM10_bit        _BIT_ACCESS(COG1RSIM1,2)
// COG1RSIM1<G1RSIM11>
extern volatile __bit                   G1RSIM11            __at(0x34C3);	// @ (0x698 * 8 + 3)
#define                                 G1RSIM11_bit        _BIT_ACCESS(COG1RSIM1,3)
// COG1RSIM1<G1RSIM12>
extern volatile __bit                   G1RSIM12            __at(0x34C4);	// @ (0x698 * 8 + 4)
#define                                 G1RSIM12_bit        _BIT_ACCESS(COG1RSIM1,4)
// COG1RSIM1<G1RSIM13>
extern volatile __bit                   G1RSIM13            __at(0x34C5);	// @ (0x698 * 8 + 5)
#define                                 G1RSIM13_bit        _BIT_ACCESS(COG1RSIM1,5)
// COG1RSIM1<G1RSIM14>
extern volatile __bit                   G1RSIM14            __at(0x34C6);	// @ (0x698 * 8 + 6)
#define                                 G1RSIM14_bit        _BIT_ACCESS(COG1RSIM1,6)
// COG1RSIM0<G1RSIM2>
extern volatile __bit                   G1RSIM2             __at(0x34BA);	// @ (0x697 * 8 + 2)
#define                                 G1RSIM2_bit         _BIT_ACCESS(COG1RSIM0,2)
// COG1RSIM0<G1RSIM3>
extern volatile __bit                   G1RSIM3             __at(0x34BB);	// @ (0x697 * 8 + 3)
#define                                 G1RSIM3_bit         _BIT_ACCESS(COG1RSIM0,3)
// COG1RSIM0<G1RSIM4>
extern volatile __bit                   G1RSIM4             __at(0x34BC);	// @ (0x697 * 8 + 4)
#define                                 G1RSIM4_bit         _BIT_ACCESS(COG1RSIM0,4)
// COG1RSIM0<G1RSIM5>
extern volatile __bit                   G1RSIM5             __at(0x34BD);	// @ (0x697 * 8 + 5)
#define                                 G1RSIM5_bit         _BIT_ACCESS(COG1RSIM0,5)
// COG1RSIM0<G1RSIM6>
extern volatile __bit                   G1RSIM6             __at(0x34BE);	// @ (0x697 * 8 + 6)
#define                                 G1RSIM6_bit         _BIT_ACCESS(COG1RSIM0,6)
// COG1RSIM0<G1RSIM7>
extern volatile __bit                   G1RSIM7             __at(0x34BF);	// @ (0x697 * 8 + 7)
#define                                 G1RSIM7_bit         _BIT_ACCESS(COG1RSIM0,7)
// COG1RSIM1<G1RSIM8>
extern volatile __bit                   G1RSIM8             __at(0x34C0);	// @ (0x698 * 8 + 0)
#define                                 G1RSIM8_bit         _BIT_ACCESS(COG1RSIM1,0)
// COG1RSIM1<G1RSIM9>
extern volatile __bit                   G1RSIM9             __at(0x34C1);	// @ (0x698 * 8 + 1)
#define                                 G1RSIM9_bit         _BIT_ACCESS(COG1RSIM1,1)
// COG1STR<G1SDATA>
extern volatile __bit                   G1SDATA             __at(0x34FC);	// @ (0x69F * 8 + 4)
#define                                 G1SDATA_bit         _BIT_ACCESS(COG1STR,4)
// COG1STR<G1SDATB>
extern volatile __bit                   G1SDATB             __at(0x34FD);	// @ (0x69F * 8 + 5)
#define                                 G1SDATB_bit         _BIT_ACCESS(COG1STR,5)
// COG1STR<G1SDATC>
extern volatile __bit                   G1SDATC             __at(0x34FE);	// @ (0x69F * 8 + 6)
#define                                 G1SDATC_bit         _BIT_ACCESS(COG1STR,6)
// COG1STR<G1SDATD>
extern volatile __bit                   G1SDATD             __at(0x34FF);	// @ (0x69F * 8 + 7)
#define                                 G1SDATD_bit         _BIT_ACCESS(COG1STR,7)
// COG1STR<G1STRA>
extern volatile __bit                   G1STRA              __at(0x34F8);	// @ (0x69F * 8 + 0)
#define                                 G1STRA_bit          _BIT_ACCESS(COG1STR,0)
// COG1STR<G1STRB>
extern volatile __bit                   G1STRB              __at(0x34F9);	// @ (0x69F * 8 + 1)
#define                                 G1STRB_bit          _BIT_ACCESS(COG1STR,1)
// COG1STR<G1STRC>
extern volatile __bit                   G1STRC              __at(0x34FA);	// @ (0x69F * 8 + 2)
#define                                 G1STRC_bit          _BIT_ACCESS(COG1STR,2)
// COG1STR<G1STRD>
extern volatile __bit                   G1STRD              __at(0x34FB);	// @ (0x69F * 8 + 3)
#define                                 G1STRD_bit          _BIT_ACCESS(COG1STR,3)
// SSP1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0x10B7);	// @ (0x216 * 8 + 7)
#define                                 GCEN_bit            _BIT_ACCESS(SSP1CON2,7)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,1)
// OSCSTAT<HFIOFL>
extern volatile __bit                   HFIOFL              __at(0x4D3);	// @ (0x9A * 8 + 3)
#define                                 HFIOFL_bit          _BIT_ACCESS(OSCSTAT,3)
// OSCSTAT<HFIOFR>
extern volatile __bit                   HFIOFR              __at(0x4D4);	// @ (0x9A * 8 + 4)
#define                                 HFIOFR_bit          _BIT_ACCESS(OSCSTAT,4)
// OSCSTAT<HFIOFS>
extern volatile __bit                   HFIOFS              __at(0x4D0);	// @ (0x9A * 8 + 0)
#define                                 HFIOFS_bit          _BIT_ACCESS(OSCSTAT,0)
// HIDRVC<HIDC4>
extern volatile __bit                   HIDC4               __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 HIDC4_bit           _BIT_ACCESS(HIDRVC,4)
// HIDRVC<HIDC5>
extern volatile __bit                   HIDC5               __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 HIDC5_bit           _BIT_ACCESS(HIDRVC,5)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x1C60);	// @ (0x38C * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x1C61);	// @ (0x38C * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x1C62);	// @ (0x38C * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x1C63);	// @ (0x38C * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0x1C64);	// @ (0x38C * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0x1C65);	// @ (0x38C * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0x1C70);	// @ (0x38E * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0x1C71);	// @ (0x38E * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0x1C72);	// @ (0x38E * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x1C73);	// @ (0x38E * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x1C74);	// @ (0x38E * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x1C75);	// @ (0x38E * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// PRG1INS<INS0>
extern volatile __bit                   INS0                __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 INS0_bit            _BIT_ACCESS(PRG1INS,0)
// PRG1INS<INS1>
extern volatile __bit                   INS1                __at(0x3CB1);	// @ (0x796 * 8 + 1)
#define                                 INS1_bit            _BIT_ACCESS(PRG1INS,1)
// PRG1INS<INS2>
extern volatile __bit                   INS2                __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 INS2_bit            _BIT_ACCESS(PRG1INS,2)
// PRG1INS<INS3>
extern volatile __bit                   INS3                __at(0x3CB3);	// @ (0x796 * 8 + 3)
#define                                 INS3_bit            _BIT_ACCESS(PRG1INS,3)
// INTCON<INTE>
extern volatile __bit                   INTE                __at(0x5C);	// @ (0xB * 8 + 4)
#define                                 INTE_bit            _BIT_ACCESS(INTCON,4)
// OPTION_REG<INTEDG>
extern volatile __bit                   INTEDG              __at(0x4AE);	// @ (0x95 * 8 + 6)
#define                                 INTEDG_bit          _BIT_ACCESS(OPTION_REG,6)
// INTCON<INTF>
extern volatile __bit                   INTF                __at(0x59);	// @ (0xB * 8 + 1)
#define                                 INTF_bit            _BIT_ACCESS(INTCON,1)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x1C98);	// @ (0x393 * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x1C99);	// @ (0x393 * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x1C9A);	// @ (0x393 * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x1C9B);	// @ (0x393 * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0x1C9C);	// @ (0x393 * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0x1C9D);	// @ (0x393 * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x1C90);	// @ (0x392 * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x1C91);	// @ (0x392 * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x1C92);	// @ (0x392 * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x1C93);	// @ (0x392 * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0x1C94);	// @ (0x392 * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0x1C95);	// @ (0x392 * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x1C88);	// @ (0x391 * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x1C89);	// @ (0x391 * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x1C8A);	// @ (0x391 * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x1C8B);	// @ (0x391 * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0x1C8C);	// @ (0x391 * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0x1C8D);	// @ (0x391 * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0x1CC8);	// @ (0x399 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0x1CC9);	// @ (0x399 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0x1CCA);	// @ (0x399 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0x1CCB);	// @ (0x399 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x1CCC);	// @ (0x399 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x1CCD);	// @ (0x399 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0x1CC0);	// @ (0x398 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0x1CC1);	// @ (0x398 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0x1CC2);	// @ (0x398 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0x1CC3);	// @ (0x398 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x1CC4);	// @ (0x398 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x1CC5);	// @ (0x398 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0x1CB8);	// @ (0x397 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0x1CB9);	// @ (0x397 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0x1CBA);	// @ (0x397 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0x1CBB);	// @ (0x397 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x1CBC);	// @ (0x397 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x1CBD);	// @ (0x397 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// INTCON<IOCIE>
extern volatile __bit                   IOCIE               __at(0x5B);	// @ (0xB * 8 + 3)
#define                                 IOCIE_bit           _BIT_ACCESS(INTCON,3)
// INTCON<IOCIF>
extern volatile __bit                   IOCIF               __at(0x58);	// @ (0xB * 8 + 0)
#define                                 IOCIF_bit           _BIT_ACCESS(INTCON,0)
// OSCCON<IRCF0>
extern volatile __bit                   IRCF0               __at(0x4CB);	// @ (0x99 * 8 + 3)
#define                                 IRCF0_bit           _BIT_ACCESS(OSCCON,3)
// OSCCON<IRCF1>
extern volatile __bit                   IRCF1               __at(0x4CC);	// @ (0x99 * 8 + 4)
#define                                 IRCF1_bit           _BIT_ACCESS(OSCCON,4)
// OSCCON<IRCF2>
extern volatile __bit                   IRCF2               __at(0x4CD);	// @ (0x99 * 8 + 5)
#define                                 IRCF2_bit           _BIT_ACCESS(OSCCON,5)
// OSCCON<IRCF3>
extern volatile __bit                   IRCF3               __at(0x4CE);	// @ (0x99 * 8 + 6)
#define                                 IRCF3_bit           _BIT_ACCESS(OSCCON,6)
// PRG1CON2<ISET0>
extern volatile __bit                   ISET0               __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 ISET0_bit           _BIT_ACCESS(PRG1CON2,0)
// PRG1CON2<ISET1>
extern volatile __bit                   ISET1               __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 ISET1_bit           _BIT_ACCESS(PRG1CON2,1)
// PRG1CON2<ISET2>
extern volatile __bit                   ISET2               __at(0x3CCA);	// @ (0x799 * 8 + 2)
#define                                 ISET2_bit           _BIT_ACCESS(PRG1CON2,2)
// PRG1CON2<ISET3>
extern volatile __bit                   ISET3               __at(0x3CCB);	// @ (0x799 * 8 + 3)
#define                                 ISET3_bit           _BIT_ACCESS(PRG1CON2,3)
// PRG1CON2<ISET4>
extern volatile __bit                   ISET4               __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 ISET4_bit           _BIT_ACCESS(PRG1CON2,4)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x864);	// @ (0x10C * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x865);	// @ (0x10C * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x870);	// @ (0x10E * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x871);	// @ (0x10E * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0x872);	// @ (0x10E * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x873);	// @ (0x10E * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x874);	// @ (0x10E * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x875);	// @ (0x10E * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0x7890);	// @ (0xF12 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0x7891);	// @ (0xF12 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0x7892);	// @ (0xF12 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0x7893);	// @ (0xF12 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0x7894);	// @ (0xF12 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0x7898);	// @ (0xF13 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0x7899);	// @ (0xF13 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0x789A);	// @ (0xF13 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0x789C);	// @ (0xF13 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0x78A0);	// @ (0xF14 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0x78A1);	// @ (0xF14 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0x78A2);	// @ (0xF14 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0x78A3);	// @ (0xF14 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0x78A4);	// @ (0xF14 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0x78A8);	// @ (0xF15 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0x78A9);	// @ (0xF15 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0x78AA);	// @ (0xF15 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0x78AB);	// @ (0xF15 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0x78AC);	// @ (0xF15 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0x7887);	// @ (0xF10 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0x78B0);	// @ (0xF16 * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0x78B1);	// @ (0xF16 * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0x78B2);	// @ (0xF16 * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0x78B3);	// @ (0xF16 * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0x78B4);	// @ (0xF16 * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0x78B5);	// @ (0xF16 * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0x78B6);	// @ (0xF16 * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0x78B7);	// @ (0xF16 * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0x7888);	// @ (0xF11 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0x78B8);	// @ (0xF17 * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0x78B9);	// @ (0xF17 * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0x78BA);	// @ (0xF17 * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0x78BB);	// @ (0xF17 * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0x78BC);	// @ (0xF17 * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0x78BD);	// @ (0xF17 * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0x78BE);	// @ (0xF17 * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0x78BF);	// @ (0xF17 * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0x7889);	// @ (0xF11 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0x78C0);	// @ (0xF18 * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0x78C1);	// @ (0xF18 * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0x78C2);	// @ (0xF18 * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0x78C3);	// @ (0xF18 * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0x78C4);	// @ (0xF18 * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0x78C5);	// @ (0xF18 * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0x78C6);	// @ (0xF18 * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0x78C7);	// @ (0xF18 * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0x788A);	// @ (0xF11 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0x78C8);	// @ (0xF19 * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0x78C9);	// @ (0xF19 * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0x78CA);	// @ (0xF19 * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0x78CB);	// @ (0xF19 * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0x78CC);	// @ (0xF19 * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0x78CD);	// @ (0xF19 * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0x78CE);	// @ (0xF19 * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0x78CF);	// @ (0xF19 * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0x788B);	// @ (0xF11 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0x7883);	// @ (0xF10 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0x7884);	// @ (0xF10 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0x7880);	// @ (0xF10 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0x7881);	// @ (0xF10 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0x7882);	// @ (0xF10 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1CON<LC1OUT>
extern volatile __bit                   LC1OUT              __at(0x7885);	// @ (0xF10 * 8 + 5)
#define                                 LC1OUT_bit          _BIT_ACCESS(CLC1CON,5)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0x788F);	// @ (0xF11 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0x78E8);	// @ (0xF1D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0x78E9);	// @ (0xF1D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0x78EA);	// @ (0xF1D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0x78EB);	// @ (0xF1D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0x78EC);	// @ (0xF1D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0x78F0);	// @ (0xF1E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0x78F1);	// @ (0xF1E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0x78F2);	// @ (0xF1E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0x78F3);	// @ (0xF1E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0x78F4);	// @ (0xF1E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0x78F8);	// @ (0xF1F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0x78F9);	// @ (0xF1F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0x78FA);	// @ (0xF1F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0x78FB);	// @ (0xF1F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0x78FC);	// @ (0xF1F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0x78D7);	// @ (0xF1A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0x7900);	// @ (0xF20 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0x7901);	// @ (0xF20 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0x7902);	// @ (0xF20 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0x7903);	// @ (0xF20 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0x7904);	// @ (0xF20 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0x7905);	// @ (0xF20 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0x7906);	// @ (0xF20 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0x7907);	// @ (0xF20 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0x7908);	// @ (0xF21 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0x7909);	// @ (0xF21 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0x790A);	// @ (0xF21 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0x790B);	// @ (0xF21 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0x790C);	// @ (0xF21 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0x790D);	// @ (0xF21 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0x790E);	// @ (0xF21 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0x790F);	// @ (0xF21 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0x7910);	// @ (0xF22 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0x7911);	// @ (0xF22 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0x7912);	// @ (0xF22 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0x7913);	// @ (0xF22 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0x7914);	// @ (0xF22 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0x7915);	// @ (0xF22 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0x7916);	// @ (0xF22 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0x7917);	// @ (0xF22 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0x7918);	// @ (0xF23 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0x7919);	// @ (0xF23 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0x791A);	// @ (0xF23 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0x791B);	// @ (0xF23 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0x791C);	// @ (0xF23 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0x791D);	// @ (0xF23 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0x791E);	// @ (0xF23 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0x791F);	// @ (0xF23 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0x78D3);	// @ (0xF1A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0x78D4);	// @ (0xF1A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0x78D0);	// @ (0xF1A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0x78D1);	// @ (0xF1A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2CON<LC2OUT>
extern volatile __bit                   LC2OUT              __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 LC2OUT_bit          _BIT_ACCESS(CLC2CON,5)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0x78DF);	// @ (0xF1B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// CLC3SEL0<LC3D1S0>
extern volatile __bit                   LC3D1S0             __at(0x7930);	// @ (0xF26 * 8 + 0)
#define                                 LC3D1S0_bit         _BIT_ACCESS(CLC3SEL0,0)
// CLC3SEL0<LC3D1S1>
extern volatile __bit                   LC3D1S1             __at(0x7931);	// @ (0xF26 * 8 + 1)
#define                                 LC3D1S1_bit         _BIT_ACCESS(CLC3SEL0,1)
// CLC3SEL0<LC3D1S2>
extern volatile __bit                   LC3D1S2             __at(0x7932);	// @ (0xF26 * 8 + 2)
#define                                 LC3D1S2_bit         _BIT_ACCESS(CLC3SEL0,2)
// CLC3SEL0<LC3D1S3>
extern volatile __bit                   LC3D1S3             __at(0x7933);	// @ (0xF26 * 8 + 3)
#define                                 LC3D1S3_bit         _BIT_ACCESS(CLC3SEL0,3)
// CLC3SEL0<LC3D1S4>
extern volatile __bit                   LC3D1S4             __at(0x7934);	// @ (0xF26 * 8 + 4)
#define                                 LC3D1S4_bit         _BIT_ACCESS(CLC3SEL0,4)
// CLC3SEL1<LC3D2S0>
extern volatile __bit                   LC3D2S0             __at(0x7938);	// @ (0xF27 * 8 + 0)
#define                                 LC3D2S0_bit         _BIT_ACCESS(CLC3SEL1,0)
// CLC3SEL1<LC3D2S1>
extern volatile __bit                   LC3D2S1             __at(0x7939);	// @ (0xF27 * 8 + 1)
#define                                 LC3D2S1_bit         _BIT_ACCESS(CLC3SEL1,1)
// CLC3SEL1<LC3D2S2>
extern volatile __bit                   LC3D2S2             __at(0x793A);	// @ (0xF27 * 8 + 2)
#define                                 LC3D2S2_bit         _BIT_ACCESS(CLC3SEL1,2)
// CLC3SEL1<LC3D2S3>
extern volatile __bit                   LC3D2S3             __at(0x793B);	// @ (0xF27 * 8 + 3)
#define                                 LC3D2S3_bit         _BIT_ACCESS(CLC3SEL1,3)
// CLC3SEL1<LC3D2S4>
extern volatile __bit                   LC3D2S4             __at(0x793C);	// @ (0xF27 * 8 + 4)
#define                                 LC3D2S4_bit         _BIT_ACCESS(CLC3SEL1,4)
// CLC3SEL2<LC3D3S0>
extern volatile __bit                   LC3D3S0             __at(0x7940);	// @ (0xF28 * 8 + 0)
#define                                 LC3D3S0_bit         _BIT_ACCESS(CLC3SEL2,0)
// CLC3SEL2<LC3D3S1>
extern volatile __bit                   LC3D3S1             __at(0x7941);	// @ (0xF28 * 8 + 1)
#define                                 LC3D3S1_bit         _BIT_ACCESS(CLC3SEL2,1)
// CLC3SEL2<LC3D3S2>
extern volatile __bit                   LC3D3S2             __at(0x7942);	// @ (0xF28 * 8 + 2)
#define                                 LC3D3S2_bit         _BIT_ACCESS(CLC3SEL2,2)
// CLC3SEL2<LC3D3S3>
extern volatile __bit                   LC3D3S3             __at(0x7943);	// @ (0xF28 * 8 + 3)
#define                                 LC3D3S3_bit         _BIT_ACCESS(CLC3SEL2,3)
// CLC3SEL2<LC3D3S4>
extern volatile __bit                   LC3D3S4             __at(0x7944);	// @ (0xF28 * 8 + 4)
#define                                 LC3D3S4_bit         _BIT_ACCESS(CLC3SEL2,4)
// CLC3SEL3<LC3D4S0>
extern volatile __bit                   LC3D4S0             __at(0x7948);	// @ (0xF29 * 8 + 0)
#define                                 LC3D4S0_bit         _BIT_ACCESS(CLC3SEL3,0)
// CLC3SEL3<LC3D4S1>
extern volatile __bit                   LC3D4S1             __at(0x7949);	// @ (0xF29 * 8 + 1)
#define                                 LC3D4S1_bit         _BIT_ACCESS(CLC3SEL3,1)
// CLC3SEL3<LC3D4S2>
extern volatile __bit                   LC3D4S2             __at(0x794A);	// @ (0xF29 * 8 + 2)
#define                                 LC3D4S2_bit         _BIT_ACCESS(CLC3SEL3,2)
// CLC3SEL3<LC3D4S3>
extern volatile __bit                   LC3D4S3             __at(0x794B);	// @ (0xF29 * 8 + 3)
#define                                 LC3D4S3_bit         _BIT_ACCESS(CLC3SEL3,3)
// CLC3SEL3<LC3D4S4>
extern volatile __bit                   LC3D4S4             __at(0x794C);	// @ (0xF29 * 8 + 4)
#define                                 LC3D4S4_bit         _BIT_ACCESS(CLC3SEL3,4)
// CLC3CON<LC3EN>
extern volatile __bit                   LC3EN               __at(0x7927);	// @ (0xF24 * 8 + 7)
#define                                 LC3EN_bit           _BIT_ACCESS(CLC3CON,7)
// CLC3GLS0<LC3G1D1N>
extern volatile __bit                   LC3G1D1N            __at(0x7950);	// @ (0xF2A * 8 + 0)
#define                                 LC3G1D1N_bit        _BIT_ACCESS(CLC3GLS0,0)
// CLC3GLS0<LC3G1D1T>
extern volatile __bit                   LC3G1D1T            __at(0x7951);	// @ (0xF2A * 8 + 1)
#define                                 LC3G1D1T_bit        _BIT_ACCESS(CLC3GLS0,1)
// CLC3GLS0<LC3G1D2N>
extern volatile __bit                   LC3G1D2N            __at(0x7952);	// @ (0xF2A * 8 + 2)
#define                                 LC3G1D2N_bit        _BIT_ACCESS(CLC3GLS0,2)
// CLC3GLS0<LC3G1D2T>
extern volatile __bit                   LC3G1D2T            __at(0x7953);	// @ (0xF2A * 8 + 3)
#define                                 LC3G1D2T_bit        _BIT_ACCESS(CLC3GLS0,3)
// CLC3GLS0<LC3G1D3N>
extern volatile __bit                   LC3G1D3N            __at(0x7954);	// @ (0xF2A * 8 + 4)
#define                                 LC3G1D3N_bit        _BIT_ACCESS(CLC3GLS0,4)
// CLC3GLS0<LC3G1D3T>
extern volatile __bit                   LC3G1D3T            __at(0x7955);	// @ (0xF2A * 8 + 5)
#define                                 LC3G1D3T_bit        _BIT_ACCESS(CLC3GLS0,5)
// CLC3GLS0<LC3G1D4N>
extern volatile __bit                   LC3G1D4N            __at(0x7956);	// @ (0xF2A * 8 + 6)
#define                                 LC3G1D4N_bit        _BIT_ACCESS(CLC3GLS0,6)
// CLC3GLS0<LC3G1D4T>
extern volatile __bit                   LC3G1D4T            __at(0x7957);	// @ (0xF2A * 8 + 7)
#define                                 LC3G1D4T_bit        _BIT_ACCESS(CLC3GLS0,7)
// CLC3POL<LC3G1POL>
extern volatile __bit                   LC3G1POL            __at(0x7928);	// @ (0xF25 * 8 + 0)
#define                                 LC3G1POL_bit        _BIT_ACCESS(CLC3POL,0)
// CLC3GLS1<LC3G2D1N>
extern volatile __bit                   LC3G2D1N            __at(0x7958);	// @ (0xF2B * 8 + 0)
#define                                 LC3G2D1N_bit        _BIT_ACCESS(CLC3GLS1,0)
// CLC3GLS1<LC3G2D1T>
extern volatile __bit                   LC3G2D1T            __at(0x7959);	// @ (0xF2B * 8 + 1)
#define                                 LC3G2D1T_bit        _BIT_ACCESS(CLC3GLS1,1)
// CLC3GLS1<LC3G2D2N>
extern volatile __bit                   LC3G2D2N            __at(0x795A);	// @ (0xF2B * 8 + 2)
#define                                 LC3G2D2N_bit        _BIT_ACCESS(CLC3GLS1,2)
// CLC3GLS1<LC3G2D2T>
extern volatile __bit                   LC3G2D2T            __at(0x795B);	// @ (0xF2B * 8 + 3)
#define                                 LC3G2D2T_bit        _BIT_ACCESS(CLC3GLS1,3)
// CLC3GLS1<LC3G2D3N>
extern volatile __bit                   LC3G2D3N            __at(0x795C);	// @ (0xF2B * 8 + 4)
#define                                 LC3G2D3N_bit        _BIT_ACCESS(CLC3GLS1,4)
// CLC3GLS1<LC3G2D3T>
extern volatile __bit                   LC3G2D3T            __at(0x795D);	// @ (0xF2B * 8 + 5)
#define                                 LC3G2D3T_bit        _BIT_ACCESS(CLC3GLS1,5)
// CLC3GLS1<LC3G2D4N>
extern volatile __bit                   LC3G2D4N            __at(0x795E);	// @ (0xF2B * 8 + 6)
#define                                 LC3G2D4N_bit        _BIT_ACCESS(CLC3GLS1,6)
// CLC3GLS1<LC3G2D4T>
extern volatile __bit                   LC3G2D4T            __at(0x795F);	// @ (0xF2B * 8 + 7)
#define                                 LC3G2D4T_bit        _BIT_ACCESS(CLC3GLS1,7)
// CLC3POL<LC3G2POL>
extern volatile __bit                   LC3G2POL            __at(0x7929);	// @ (0xF25 * 8 + 1)
#define                                 LC3G2POL_bit        _BIT_ACCESS(CLC3POL,1)
// CLC3GLS2<LC3G3D1N>
extern volatile __bit                   LC3G3D1N            __at(0x7960);	// @ (0xF2C * 8 + 0)
#define                                 LC3G3D1N_bit        _BIT_ACCESS(CLC3GLS2,0)
// CLC3GLS2<LC3G3D1T>
extern volatile __bit                   LC3G3D1T            __at(0x7961);	// @ (0xF2C * 8 + 1)
#define                                 LC3G3D1T_bit        _BIT_ACCESS(CLC3GLS2,1)
// CLC3GLS2<LC3G3D2N>
extern volatile __bit                   LC3G3D2N            __at(0x7962);	// @ (0xF2C * 8 + 2)
#define                                 LC3G3D2N_bit        _BIT_ACCESS(CLC3GLS2,2)
// CLC3GLS2<LC3G3D2T>
extern volatile __bit                   LC3G3D2T            __at(0x7963);	// @ (0xF2C * 8 + 3)
#define                                 LC3G3D2T_bit        _BIT_ACCESS(CLC3GLS2,3)
// CLC3GLS2<LC3G3D3N>
extern volatile __bit                   LC3G3D3N            __at(0x7964);	// @ (0xF2C * 8 + 4)
#define                                 LC3G3D3N_bit        _BIT_ACCESS(CLC3GLS2,4)
// CLC3GLS2<LC3G3D3T>
extern volatile __bit                   LC3G3D3T            __at(0x7965);	// @ (0xF2C * 8 + 5)
#define                                 LC3G3D3T_bit        _BIT_ACCESS(CLC3GLS2,5)
// CLC3GLS2<LC3G3D4N>
extern volatile __bit                   LC3G3D4N            __at(0x7966);	// @ (0xF2C * 8 + 6)
#define                                 LC3G3D4N_bit        _BIT_ACCESS(CLC3GLS2,6)
// CLC3GLS2<LC3G3D4T>
extern volatile __bit                   LC3G3D4T            __at(0x7967);	// @ (0xF2C * 8 + 7)
#define                                 LC3G3D4T_bit        _BIT_ACCESS(CLC3GLS2,7)
// CLC3POL<LC3G3POL>
extern volatile __bit                   LC3G3POL            __at(0x792A);	// @ (0xF25 * 8 + 2)
#define                                 LC3G3POL_bit        _BIT_ACCESS(CLC3POL,2)
// CLC3GLS3<LC3G4D1N>
extern volatile __bit                   LC3G4D1N            __at(0x7968);	// @ (0xF2D * 8 + 0)
#define                                 LC3G4D1N_bit        _BIT_ACCESS(CLC3GLS3,0)
// CLC3GLS3<LC3G4D1T>
extern volatile __bit                   LC3G4D1T            __at(0x7969);	// @ (0xF2D * 8 + 1)
#define                                 LC3G4D1T_bit        _BIT_ACCESS(CLC3GLS3,1)
// CLC3GLS3<LC3G4D2N>
extern volatile __bit                   LC3G4D2N            __at(0x796A);	// @ (0xF2D * 8 + 2)
#define                                 LC3G4D2N_bit        _BIT_ACCESS(CLC3GLS3,2)
// CLC3GLS3<LC3G4D2T>
extern volatile __bit                   LC3G4D2T            __at(0x796B);	// @ (0xF2D * 8 + 3)
#define                                 LC3G4D2T_bit        _BIT_ACCESS(CLC3GLS3,3)
// CLC3GLS3<LC3G4D3N>
extern volatile __bit                   LC3G4D3N            __at(0x796C);	// @ (0xF2D * 8 + 4)
#define                                 LC3G4D3N_bit        _BIT_ACCESS(CLC3GLS3,4)
// CLC3GLS3<LC3G4D3T>
extern volatile __bit                   LC3G4D3T            __at(0x796D);	// @ (0xF2D * 8 + 5)
#define                                 LC3G4D3T_bit        _BIT_ACCESS(CLC3GLS3,5)
// CLC3GLS3<LC3G4D4N>
extern volatile __bit                   LC3G4D4N            __at(0x796E);	// @ (0xF2D * 8 + 6)
#define                                 LC3G4D4N_bit        _BIT_ACCESS(CLC3GLS3,6)
// CLC3GLS3<LC3G4D4T>
extern volatile __bit                   LC3G4D4T            __at(0x796F);	// @ (0xF2D * 8 + 7)
#define                                 LC3G4D4T_bit        _BIT_ACCESS(CLC3GLS3,7)
// CLC3POL<LC3G4POL>
extern volatile __bit                   LC3G4POL            __at(0x792B);	// @ (0xF25 * 8 + 3)
#define                                 LC3G4POL_bit        _BIT_ACCESS(CLC3POL,3)
// CLC3CON<LC3INTN>
extern volatile __bit                   LC3INTN             __at(0x7923);	// @ (0xF24 * 8 + 3)
#define                                 LC3INTN_bit         _BIT_ACCESS(CLC3CON,3)
// CLC3CON<LC3INTP>
extern volatile __bit                   LC3INTP             __at(0x7924);	// @ (0xF24 * 8 + 4)
#define                                 LC3INTP_bit         _BIT_ACCESS(CLC3CON,4)
// CLC3CON<LC3MODE0>
extern volatile __bit                   LC3MODE0            __at(0x7920);	// @ (0xF24 * 8 + 0)
#define                                 LC3MODE0_bit        _BIT_ACCESS(CLC3CON,0)
// CLC3CON<LC3MODE1>
extern volatile __bit                   LC3MODE1            __at(0x7921);	// @ (0xF24 * 8 + 1)
#define                                 LC3MODE1_bit        _BIT_ACCESS(CLC3CON,1)
// CLC3CON<LC3MODE2>
extern volatile __bit                   LC3MODE2            __at(0x7922);	// @ (0xF24 * 8 + 2)
#define                                 LC3MODE2_bit        _BIT_ACCESS(CLC3CON,2)
// CLC3CON<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0x7925);	// @ (0xF24 * 8 + 5)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLC3CON,5)
// CLC3POL<LC3POL>
extern volatile __bit                   LC3POL              __at(0x792F);	// @ (0xF25 * 8 + 7)
#define                                 LC3POL_bit          _BIT_ACCESS(CLC3POL,7)
// COG1CON0<LD>
extern volatile __bit                   LD                  __at(0x349E);	// @ (0x693 * 8 + 6)
#define                                 LD_bit              _BIT_ACCESS(COG1CON0,6)
// PWM5LDCON<LDA>
extern volatile __bit                   LDA                 __at(0x6CFF);	// @ (0xD9F * 8 + 7)
#define                                 LDA_bit             _BIT_ACCESS(PWM5LDCON,7)
// OSCSTAT<LFIOFR>
extern volatile __bit                   LFIOFR              __at(0x4D1);	// @ (0x9A * 8 + 1)
#define                                 LFIOFR_bit          _BIT_ACCESS(OSCSTAT,1)
// PMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0xCAD);	// @ (0x195 * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(PMCON1,5)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x878);	// @ (0x10F * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x879);	// @ (0x10F * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// CLCDATA<MCLC1OUT>
extern volatile __bit                   MCLC1OUT            __at(0x7878);	// @ (0xF0F * 8 + 0)
#define                                 MCLC1OUT_bit        _BIT_ACCESS(CLCDATA,0)
// CLCDATA<MCLC2OUT>
extern volatile __bit                   MCLC2OUT            __at(0x7879);	// @ (0xF0F * 8 + 1)
#define                                 MCLC2OUT_bit        _BIT_ACCESS(CLCDATA,1)
// CLCDATA<MCLC3OUT>
extern volatile __bit                   MCLC3OUT            __at(0x787A);	// @ (0xF0F * 8 + 2)
#define                                 MCLC3OUT_bit        _BIT_ACCESS(CLCDATA,2)
// COG1CON0<MD0>
extern volatile __bit                   MD0                 __at(0x3498);	// @ (0x693 * 8 + 0)
#define                                 MD0_bit             _BIT_ACCESS(COG1CON0,0)
// COG1CON0<MD1>
extern volatile __bit                   MD1                 __at(0x3499);	// @ (0x693 * 8 + 1)
#define                                 MD1_bit             _BIT_ACCESS(COG1CON0,1)
// MD1CON0<MD1BIT>
extern volatile __bit                   MD1BIT              __at(0x1CD8);	// @ (0x39B * 8 + 0)
#define                                 MD1BIT_bit          _BIT_ACCESS(MD1CON0,0)
// MD1CARH<MD1CH0>
extern volatile __bit                   MD1CH0              __at(0x1CF8);	// @ (0x39F * 8 + 0)
#define                                 MD1CH0_bit          _BIT_ACCESS(MD1CARH,0)
// MD1CARH<MD1CH1>
extern volatile __bit                   MD1CH1              __at(0x1CF9);	// @ (0x39F * 8 + 1)
#define                                 MD1CH1_bit          _BIT_ACCESS(MD1CARH,1)
// MD1CARH<MD1CH2>
extern volatile __bit                   MD1CH2              __at(0x1CFA);	// @ (0x39F * 8 + 2)
#define                                 MD1CH2_bit          _BIT_ACCESS(MD1CARH,2)
// MD1CARH<MD1CH3>
extern volatile __bit                   MD1CH3              __at(0x1CFB);	// @ (0x39F * 8 + 3)
#define                                 MD1CH3_bit          _BIT_ACCESS(MD1CARH,3)
// MD1CON1<MD1CHPOL>
extern volatile __bit                   MD1CHPOL            __at(0x1CE5);	// @ (0x39C * 8 + 5)
#define                                 MD1CHPOL_bit        _BIT_ACCESS(MD1CON1,5)
// MD1CON1<MD1CHSYNC>
extern volatile __bit                   MD1CHSYNC           __at(0x1CE4);	// @ (0x39C * 8 + 4)
#define                                 MD1CHSYNC_bit       _BIT_ACCESS(MD1CON1,4)
// MD1CARL<MD1CL0>
extern volatile __bit                   MD1CL0              __at(0x1CF0);	// @ (0x39E * 8 + 0)
#define                                 MD1CL0_bit          _BIT_ACCESS(MD1CARL,0)
// MD1CARL<MD1CL1>
extern volatile __bit                   MD1CL1              __at(0x1CF1);	// @ (0x39E * 8 + 1)
#define                                 MD1CL1_bit          _BIT_ACCESS(MD1CARL,1)
// MD1CARL<MD1CL2>
extern volatile __bit                   MD1CL2              __at(0x1CF2);	// @ (0x39E * 8 + 2)
#define                                 MD1CL2_bit          _BIT_ACCESS(MD1CARL,2)
// MD1CARL<MD1CL3>
extern volatile __bit                   MD1CL3              __at(0x1CF3);	// @ (0x39E * 8 + 3)
#define                                 MD1CL3_bit          _BIT_ACCESS(MD1CARL,3)
// MD1CON1<MD1CLPOL>
extern volatile __bit                   MD1CLPOL            __at(0x1CE1);	// @ (0x39C * 8 + 1)
#define                                 MD1CLPOL_bit        _BIT_ACCESS(MD1CON1,1)
// MD1CON1<MD1CLSYNC>
extern volatile __bit                   MD1CLSYNC           __at(0x1CE0);	// @ (0x39C * 8 + 0)
#define                                 MD1CLSYNC_bit       _BIT_ACCESS(MD1CON1,0)
// MD1CON0<MD1EN>
extern volatile __bit                   MD1EN               __at(0x1CDF);	// @ (0x39B * 8 + 7)
#define                                 MD1EN_bit           _BIT_ACCESS(MD1CON0,7)
// MD1SRC<MD1MS0>
extern volatile __bit                   MD1MS0              __at(0x1CE8);	// @ (0x39D * 8 + 0)
#define                                 MD1MS0_bit          _BIT_ACCESS(MD1SRC,0)
// MD1SRC<MD1MS1>
extern volatile __bit                   MD1MS1              __at(0x1CE9);	// @ (0x39D * 8 + 1)
#define                                 MD1MS1_bit          _BIT_ACCESS(MD1SRC,1)
// MD1SRC<MD1MS2>
extern volatile __bit                   MD1MS2              __at(0x1CEA);	// @ (0x39D * 8 + 2)
#define                                 MD1MS2_bit          _BIT_ACCESS(MD1SRC,2)
// MD1SRC<MD1MS3>
extern volatile __bit                   MD1MS3              __at(0x1CEB);	// @ (0x39D * 8 + 3)
#define                                 MD1MS3_bit          _BIT_ACCESS(MD1SRC,3)
// MD1SRC<MD1MS4>
extern volatile __bit                   MD1MS4              __at(0x1CEC);	// @ (0x39D * 8 + 4)
#define                                 MD1MS4_bit          _BIT_ACCESS(MD1SRC,4)
// MD1CON0<MD1OPOL>
extern volatile __bit                   MD1OPOL             __at(0x1CDC);	// @ (0x39B * 8 + 4)
#define                                 MD1OPOL_bit         _BIT_ACCESS(MD1CON0,4)
// MD1CON0<MD1OUT>
extern volatile __bit                   MD1OUT              __at(0x1CDD);	// @ (0x39B * 8 + 5)
#define                                 MD1OUT_bit          _BIT_ACCESS(MD1CON0,5)
// COG1CON0<MD2>
extern volatile __bit                   MD2                 __at(0x349A);	// @ (0x693 * 8 + 2)
#define                                 MD2_bit             _BIT_ACCESS(COG1CON0,2)
// OSCSTAT<MFIOFR>
extern volatile __bit                   MFIOFR              __at(0x4D2);	// @ (0x9A * 8 + 2)
#define                                 MFIOFR_bit          _BIT_ACCESS(OSCSTAT,2)
// PWMEN<MPWM5EN>
extern volatile __bit                   MPWM5EN             __at(0x6C74);	// @ (0xD8E * 8 + 4)
#define                                 MPWM5EN_bit         _BIT_ACCESS(PWMEN,4)
// PWMLD<MPWM5LD>
extern volatile __bit                   MPWM5LD             __at(0x6C7C);	// @ (0xD8F * 8 + 4)
#define                                 MPWM5LD_bit         _BIT_ACCESS(PWMLD,4)
// PWMOUT<MPWM5OUT>
extern volatile __bit                   MPWM5OUT            __at(0x6C84);	// @ (0xD90 * 8 + 4)
#define                                 MPWM5OUT_bit        _BIT_ACCESS(PWMOUT,4)
// MD1SRC<MS0>
extern volatile __bit                   MS0                 __at(0x1CE8);	// @ (0x39D * 8 + 0)
#define                                 MS0_bit             _BIT_ACCESS(MD1SRC,0)
// MD1SRC<MS1>
extern volatile __bit                   MS1                 __at(0x1CE9);	// @ (0x39D * 8 + 1)
#define                                 MS1_bit             _BIT_ACCESS(MD1SRC,1)
// MD1SRC<MS2>
extern volatile __bit                   MS2                 __at(0x1CEA);	// @ (0x39D * 8 + 2)
#define                                 MS2_bit             _BIT_ACCESS(MD1SRC,2)
// MD1SRC<MS3>
extern volatile __bit                   MS3                 __at(0x1CEB);	// @ (0x39D * 8 + 3)
#define                                 MS3_bit             _BIT_ACCESS(MD1SRC,3)
// MD1SRC<MS4>
extern volatile __bit                   MS4                 __at(0x1CEC);	// @ (0x39D * 8 + 4)
#define                                 MS4_bit             _BIT_ACCESS(MD1SRC,4)
// SSP1MSK<MSK0>
extern volatile __bit                   MSK0                __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 MSK0_bit            _BIT_ACCESS(SSP1MSK,0)
// SSP1MSK<MSK1>
extern volatile __bit                   MSK1                __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 MSK1_bit            _BIT_ACCESS(SSP1MSK,1)
// SSP1MSK<MSK2>
extern volatile __bit                   MSK2                __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 MSK2_bit            _BIT_ACCESS(SSP1MSK,2)
// SSP1MSK<MSK3>
extern volatile __bit                   MSK3                __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 MSK3_bit            _BIT_ACCESS(SSP1MSK,3)
// SSP1MSK<MSK4>
extern volatile __bit                   MSK4                __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 MSK4_bit            _BIT_ACCESS(SSP1MSK,4)
// SSP1MSK<MSK5>
extern volatile __bit                   MSK5                __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 MSK5_bit            _BIT_ACCESS(SSP1MSK,5)
// SSP1MSK<MSK6>
extern volatile __bit                   MSK6                __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 MSK6_bit            _BIT_ACCESS(SSP1MSK,6)
// SSP1MSK<MSK7>
extern volatile __bit                   MSK7                __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 MSK7_bit            _BIT_ACCESS(SSP1MSK,7)
// DAC3CON0<NSS>
extern volatile __bit                   NSS                 __at(0x2CB8);	// @ (0x597 * 8 + 0)
#define                                 NSS_bit             _BIT_ACCESS(DAC3CON0,0)
// DAC1CON0<NSS0>
extern volatile __bit                   NSS0                __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 NSS0_bit            _BIT_ACCESS(DAC1CON0,0)
// ODCONA<ODA0>
extern volatile __bit                   ODA0                __at(0x1460);	// @ (0x28C * 8 + 0)
#define                                 ODA0_bit            _BIT_ACCESS(ODCONA,0)
// ODCONA<ODA1>
extern volatile __bit                   ODA1                __at(0x1461);	// @ (0x28C * 8 + 1)
#define                                 ODA1_bit            _BIT_ACCESS(ODCONA,1)
// ODCONA<ODA2>
extern volatile __bit                   ODA2                __at(0x1462);	// @ (0x28C * 8 + 2)
#define                                 ODA2_bit            _BIT_ACCESS(ODCONA,2)
// ODCONA<ODA4>
extern volatile __bit                   ODA4                __at(0x1464);	// @ (0x28C * 8 + 4)
#define                                 ODA4_bit            _BIT_ACCESS(ODCONA,4)
// ODCONA<ODA5>
extern volatile __bit                   ODA5                __at(0x1465);	// @ (0x28C * 8 + 5)
#define                                 ODA5_bit            _BIT_ACCESS(ODCONA,5)
// ODCONC<ODC0>
extern volatile __bit                   ODC0                __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 ODC0_bit            _BIT_ACCESS(ODCONC,0)
// ODCONC<ODC1>
extern volatile __bit                   ODC1                __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 ODC1_bit            _BIT_ACCESS(ODCONC,1)
// ODCONC<ODC2>
extern volatile __bit                   ODC2                __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 ODC2_bit            _BIT_ACCESS(ODCONC,2)
// ODCONC<ODC3>
extern volatile __bit                   ODC3                __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 ODC3_bit            _BIT_ACCESS(ODCONC,3)
// ODCONC<ODC4>
extern volatile __bit                   ODC4                __at(0x1474);	// @ (0x28E * 8 + 4)
#define                                 ODC4_bit            _BIT_ACCESS(ODCONC,4)
// ODCONC<ODC5>
extern volatile __bit                   ODC5                __at(0x1475);	// @ (0x28E * 8 + 5)
#define                                 ODC5_bit            _BIT_ACCESS(ODCONC,5)
// DAC1CON0<OE>
extern volatile __bit                   OE                  __at(0x2C8D);	// @ (0x591 * 8 + 5)
#define                                 OE_bit              _BIT_ACCESS(DAC1CON0,5)
// RC1STA<OERR>
extern volatile __bit                   OERR                __at(0xCE9);	// @ (0x19D * 8 + 1)
#define                                 OERR_bit            _BIT_ACCESS(RC1STA,1)
// PWM5INTE<OFIE>
extern volatile __bit                   OFIE                __at(0x6CE3);	// @ (0xD9C * 8 + 3)
#define                                 OFIE_bit            _BIT_ACCESS(PWM5INTE,3)
// PWM5INTF<OFIF>
extern volatile __bit                   OFIF                __at(0x6CEB);	// @ (0xD9D * 8 + 3)
#define                                 OFIF_bit            _BIT_ACCESS(PWM5INTF,3)
// PWM5OFCON<OFO>
extern volatile __bit                   OFO                 __at(0x6D04);	// @ (0xDA0 * 8 + 4)
#define                                 OFO_bit             _BIT_ACCESS(PWM5OFCON,4)
// OPA1CON<OPA1EN>
extern volatile __bit                   OPA1EN              __at(0x288F);	// @ (0x511 * 8 + 7)
#define                                 OPA1EN_bit          _BIT_ACCESS(OPA1CON,7)
// OPA1CON<OPA1ORM0>
extern volatile __bit                   OPA1ORM0            __at(0x2888);	// @ (0x511 * 8 + 0)
#define                                 OPA1ORM0_bit        _BIT_ACCESS(OPA1CON,0)
// OPA1CON<OPA1ORM1>
extern volatile __bit                   OPA1ORM1            __at(0x2889);	// @ (0x511 * 8 + 1)
#define                                 OPA1ORM1_bit        _BIT_ACCESS(OPA1CON,1)
// OPA1CON<OPA1ORPOL>
extern volatile __bit                   OPA1ORPOL           __at(0x288A);	// @ (0x511 * 8 + 2)
#define                                 OPA1ORPOL_bit       _BIT_ACCESS(OPA1CON,2)
// OPA1CON<OPA1UG>
extern volatile __bit                   OPA1UG              __at(0x288C);	// @ (0x511 * 8 + 4)
#define                                 OPA1UG_bit          _BIT_ACCESS(OPA1CON,4)
// MD1CON0<OPOL>
extern volatile __bit                   OPOL                __at(0x1CDC);	// @ (0x39B * 8 + 4)
#define                                 OPOL_bit            _BIT_ACCESS(MD1CON0,4)
// OPA1CON<ORM0>
extern volatile __bit                   ORM0                __at(0x2888);	// @ (0x511 * 8 + 0)
#define                                 ORM0_bit            _BIT_ACCESS(OPA1CON,0)
// OPA1CON<ORM1>
extern volatile __bit                   ORM1                __at(0x2889);	// @ (0x511 * 8 + 1)
#define                                 ORM1_bit            _BIT_ACCESS(OPA1CON,1)
// OPA1CON<ORPOL>
extern volatile __bit                   ORPOL               __at(0x288A);	// @ (0x511 * 8 + 2)
#define                                 ORPOL_bit           _BIT_ACCESS(OPA1CON,2)
// PRG1CON0<OS>
extern volatile __bit                   OS                  __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 OS_bit              _BIT_ACCESS(PRG1CON0,1)
// T1CON<OSCEN>
extern volatile __bit                   OSCEN               __at(0xC3);	// @ (0x18 * 8 + 3)
#define                                 OSCEN_bit           _BIT_ACCESS(T1CON,3)
// PIE2<OSFIE>
extern volatile __bit                   OSFIE               __at(0x497);	// @ (0x92 * 8 + 7)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE2,7)
// PIR2<OSFIF>
extern volatile __bit                   OSFIF               __at(0x97);	// @ (0x12 * 8 + 7)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR2,7)
// OSCSTAT<OSTS>
extern volatile __bit                   OSTS                __at(0x4D5);	// @ (0x9A * 8 + 5)
#define                                 OSTS_bit            _BIT_ACCESS(OSCSTAT,5)
// CCPTMRS<P3TSEL0>
extern volatile __bit                   P3TSEL0             __at(0x14F4);	// @ (0x29E * 8 + 4)
#define                                 P3TSEL0_bit         _BIT_ACCESS(CCPTMRS,4)
// CCPTMRS<P3TSEL1>
extern volatile __bit                   P3TSEL1             __at(0x14F5);	// @ (0x29E * 8 + 5)
#define                                 P3TSEL1_bit         _BIT_ACCESS(CCPTMRS,5)
// SSP1CON3<PCIE>
extern volatile __bit                   PCIE                __at(0x10BE);	// @ (0x217 * 8 + 6)
#define                                 PCIE_bit            _BIT_ACCESS(SSP1CON3,6)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN>
extern volatile __bit                   PEN                 __at(0x10B2);	// @ (0x216 * 8 + 2)
#define                                 PEN_bit             _BIT_ACCESS(SSP1CON2,2)
// COG1PHF<PHF0>
extern volatile __bit                   PHF0                __at(0x3470);	// @ (0x68E * 8 + 0)
#define                                 PHF0_bit            _BIT_ACCESS(COG1PHF,0)
// COG1PHF<PHF1>
extern volatile __bit                   PHF1                __at(0x3471);	// @ (0x68E * 8 + 1)
#define                                 PHF1_bit            _BIT_ACCESS(COG1PHF,1)
// COG1PHF<PHF2>
extern volatile __bit                   PHF2                __at(0x3472);	// @ (0x68E * 8 + 2)
#define                                 PHF2_bit            _BIT_ACCESS(COG1PHF,2)
// COG1PHF<PHF3>
extern volatile __bit                   PHF3                __at(0x3473);	// @ (0x68E * 8 + 3)
#define                                 PHF3_bit            _BIT_ACCESS(COG1PHF,3)
// COG1PHF<PHF4>
extern volatile __bit                   PHF4                __at(0x3474);	// @ (0x68E * 8 + 4)
#define                                 PHF4_bit            _BIT_ACCESS(COG1PHF,4)
// COG1PHF<PHF5>
extern volatile __bit                   PHF5                __at(0x3475);	// @ (0x68E * 8 + 5)
#define                                 PHF5_bit            _BIT_ACCESS(COG1PHF,5)
// PWM5INTE<PHIE>
extern volatile __bit                   PHIE                __at(0x6CE2);	// @ (0xD9C * 8 + 2)
#define                                 PHIE_bit            _BIT_ACCESS(PWM5INTE,2)
// PWM5INTF<PHIF>
extern volatile __bit                   PHIF                __at(0x6CEA);	// @ (0xD9D * 8 + 2)
#define                                 PHIF_bit            _BIT_ACCESS(PWM5INTF,2)
// COG1PHR<PHR0>
extern volatile __bit                   PHR0                __at(0x3468);	// @ (0x68D * 8 + 0)
#define                                 PHR0_bit            _BIT_ACCESS(COG1PHR,0)
// COG1PHR<PHR1>
extern volatile __bit                   PHR1                __at(0x3469);	// @ (0x68D * 8 + 1)
#define                                 PHR1_bit            _BIT_ACCESS(COG1PHR,1)
// COG1PHR<PHR2>
extern volatile __bit                   PHR2                __at(0x346A);	// @ (0x68D * 8 + 2)
#define                                 PHR2_bit            _BIT_ACCESS(COG1PHR,2)
// COG1PHR<PHR3>
extern volatile __bit                   PHR3                __at(0x346B);	// @ (0x68D * 8 + 3)
#define                                 PHR3_bit            _BIT_ACCESS(COG1PHR,3)
// COG1PHR<PHR4>
extern volatile __bit                   PHR4                __at(0x346C);	// @ (0x68D * 8 + 4)
#define                                 PHR4_bit            _BIT_ACCESS(COG1PHR,4)
// COG1PHR<PHR5>
extern volatile __bit                   PHR5                __at(0x346D);	// @ (0x68D * 8 + 5)
#define                                 PHR5_bit            _BIT_ACCESS(COG1PHR,5)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x4D6);	// @ (0x9A * 8 + 6)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,6)
// COG1CON1<POLA>
extern volatile __bit                   POLA                __at(0x34A0);	// @ (0x694 * 8 + 0)
#define                                 POLA_bit            _BIT_ACCESS(COG1CON1,0)
// COG1CON1<POLB>
extern volatile __bit                   POLB                __at(0x34A1);	// @ (0x694 * 8 + 1)
#define                                 POLB_bit            _BIT_ACCESS(COG1CON1,1)
// COG1CON1<POLC>
extern volatile __bit                   POLC                __at(0x34A2);	// @ (0x694 * 8 + 2)
#define                                 POLC_bit            _BIT_ACCESS(COG1CON1,2)
// COG1CON1<POLD>
extern volatile __bit                   POLD                __at(0x34A3);	// @ (0x694 * 8 + 3)
#define                                 POLD_bit            _BIT_ACCESS(COG1CON1,3)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x7078);	// @ (0xE0F * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// PWM5INTE<PRIE>
extern volatile __bit                   PRIE                __at(0x6CE0);	// @ (0xD9C * 8 + 0)
#define                                 PRIE_bit            _BIT_ACCESS(PWM5INTE,0)
// PWM5INTF<PRIF>
extern volatile __bit                   PRIF                __at(0x6CE8);	// @ (0xD9D * 8 + 0)
#define                                 PRIF_bit            _BIT_ACCESS(PWM5INTF,0)
// OPTION_REG<PSA>
extern volatile __bit                   PSA                 __at(0x4AB);	// @ (0x95 * 8 + 3)
#define                                 PSA_bit             _BIT_ACCESS(OPTION_REG,3)
// PWM3DCL<PWM3DC0>
extern volatile __bit                   PWM3DC0             __at(0x30BE);	// @ (0x617 * 8 + 6)
#define                                 PWM3DC0_bit         _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<PWM3DC1>
extern volatile __bit                   PWM3DC1             __at(0x30BF);	// @ (0x617 * 8 + 7)
#define                                 PWM3DC1_bit         _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<PWM3DC2>
extern volatile __bit                   PWM3DC2             __at(0x30C0);	// @ (0x618 * 8 + 0)
#define                                 PWM3DC2_bit         _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<PWM3DC3>
extern volatile __bit                   PWM3DC3             __at(0x30C1);	// @ (0x618 * 8 + 1)
#define                                 PWM3DC3_bit         _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<PWM3DC4>
extern volatile __bit                   PWM3DC4             __at(0x30C2);	// @ (0x618 * 8 + 2)
#define                                 PWM3DC4_bit         _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<PWM3DC5>
extern volatile __bit                   PWM3DC5             __at(0x30C3);	// @ (0x618 * 8 + 3)
#define                                 PWM3DC5_bit         _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<PWM3DC6>
extern volatile __bit                   PWM3DC6             __at(0x30C4);	// @ (0x618 * 8 + 4)
#define                                 PWM3DC6_bit         _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<PWM3DC7>
extern volatile __bit                   PWM3DC7             __at(0x30C5);	// @ (0x618 * 8 + 5)
#define                                 PWM3DC7_bit         _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<PWM3DC8>
extern volatile __bit                   PWM3DC8             __at(0x30C6);	// @ (0x618 * 8 + 6)
#define                                 PWM3DC8_bit         _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<PWM3DC9>
extern volatile __bit                   PWM3DC9             __at(0x30C7);	// @ (0x618 * 8 + 7)
#define                                 PWM3DC9_bit         _BIT_ACCESS(PWM3DCH,7)
// PWM3CON<PWM3EN>
extern volatile __bit                   PWM3EN              __at(0x30CF);	// @ (0x619 * 8 + 7)
#define                                 PWM3EN_bit          _BIT_ACCESS(PWM3CON,7)
// PWM3CON<PWM3OUT>
extern volatile __bit                   PWM3OUT             __at(0x30CD);	// @ (0x619 * 8 + 5)
#define                                 PWM3OUT_bit         _BIT_ACCESS(PWM3CON,5)
// PWM3CON<PWM3POL>
extern volatile __bit                   PWM3POL             __at(0x30CC);	// @ (0x619 * 8 + 4)
#define                                 PWM3POL_bit         _BIT_ACCESS(PWM3CON,4)
// PWM5CLKCON<PWM5CS0>
extern volatile __bit                   PWM5CS0             __at(0x6CF0);	// @ (0xD9E * 8 + 0)
#define                                 PWM5CS0_bit         _BIT_ACCESS(PWM5CLKCON,0)
// PWM5CLKCON<PWM5CS1>
extern volatile __bit                   PWM5CS1             __at(0x6CF1);	// @ (0xD9E * 8 + 1)
#define                                 PWM5CS1_bit         _BIT_ACCESS(PWM5CLKCON,1)
// PWM5CLKCON<PWM5CS2>
extern volatile __bit                   PWM5CS2             __at(0x6CF2);	// @ (0xD9E * 8 + 2)
#define                                 PWM5CS2_bit         _BIT_ACCESS(PWM5CLKCON,2)
// PWM5DCH<PWM5DCH0>
extern volatile __bit                   PWM5DCH0            __at(0x6CA0);	// @ (0xD94 * 8 + 0)
#define                                 PWM5DCH0_bit        _BIT_ACCESS(PWM5DCH,0)
// PWM5DCH<PWM5DCH1>
extern volatile __bit                   PWM5DCH1            __at(0x6CA1);	// @ (0xD94 * 8 + 1)
#define                                 PWM5DCH1_bit        _BIT_ACCESS(PWM5DCH,1)
// PWM5DCH<PWM5DCH2>
extern volatile __bit                   PWM5DCH2            __at(0x6CA2);	// @ (0xD94 * 8 + 2)
#define                                 PWM5DCH2_bit        _BIT_ACCESS(PWM5DCH,2)
// PWM5DCH<PWM5DCH3>
extern volatile __bit                   PWM5DCH3            __at(0x6CA3);	// @ (0xD94 * 8 + 3)
#define                                 PWM5DCH3_bit        _BIT_ACCESS(PWM5DCH,3)
// PWM5DCH<PWM5DCH4>
extern volatile __bit                   PWM5DCH4            __at(0x6CA4);	// @ (0xD94 * 8 + 4)
#define                                 PWM5DCH4_bit        _BIT_ACCESS(PWM5DCH,4)
// PWM5DCH<PWM5DCH5>
extern volatile __bit                   PWM5DCH5            __at(0x6CA5);	// @ (0xD94 * 8 + 5)
#define                                 PWM5DCH5_bit        _BIT_ACCESS(PWM5DCH,5)
// PWM5DCH<PWM5DCH6>
extern volatile __bit                   PWM5DCH6            __at(0x6CA6);	// @ (0xD94 * 8 + 6)
#define                                 PWM5DCH6_bit        _BIT_ACCESS(PWM5DCH,6)
// PWM5DCH<PWM5DCH7>
extern volatile __bit                   PWM5DCH7            __at(0x6CA7);	// @ (0xD94 * 8 + 7)
#define                                 PWM5DCH7_bit        _BIT_ACCESS(PWM5DCH,7)
// PWM5INTE<PWM5DCIE>
extern volatile __bit                   PWM5DCIE            __at(0x6CE1);	// @ (0xD9C * 8 + 1)
#define                                 PWM5DCIE_bit        _BIT_ACCESS(PWM5INTE,1)
// PWM5INTF<PWM5DCIF>
extern volatile __bit                   PWM5DCIF            __at(0x6CE9);	// @ (0xD9D * 8 + 1)
#define                                 PWM5DCIF_bit        _BIT_ACCESS(PWM5INTF,1)
// PWM5DCL<PWM5DCL0>
extern volatile __bit                   PWM5DCL0            __at(0x6C98);	// @ (0xD93 * 8 + 0)
#define                                 PWM5DCL0_bit        _BIT_ACCESS(PWM5DCL,0)
// PWM5DCL<PWM5DCL1>
extern volatile __bit                   PWM5DCL1            __at(0x6C99);	// @ (0xD93 * 8 + 1)
#define                                 PWM5DCL1_bit        _BIT_ACCESS(PWM5DCL,1)
// PWM5DCL<PWM5DCL2>
extern volatile __bit                   PWM5DCL2            __at(0x6C9A);	// @ (0xD93 * 8 + 2)
#define                                 PWM5DCL2_bit        _BIT_ACCESS(PWM5DCL,2)
// PWM5DCL<PWM5DCL3>
extern volatile __bit                   PWM5DCL3            __at(0x6C9B);	// @ (0xD93 * 8 + 3)
#define                                 PWM5DCL3_bit        _BIT_ACCESS(PWM5DCL,3)
// PWM5DCL<PWM5DCL4>
extern volatile __bit                   PWM5DCL4            __at(0x6C9C);	// @ (0xD93 * 8 + 4)
#define                                 PWM5DCL4_bit        _BIT_ACCESS(PWM5DCL,4)
// PWM5DCL<PWM5DCL5>
extern volatile __bit                   PWM5DCL5            __at(0x6C9D);	// @ (0xD93 * 8 + 5)
#define                                 PWM5DCL5_bit        _BIT_ACCESS(PWM5DCL,5)
// PWM5DCL<PWM5DCL6>
extern volatile __bit                   PWM5DCL6            __at(0x6C9E);	// @ (0xD93 * 8 + 6)
#define                                 PWM5DCL6_bit        _BIT_ACCESS(PWM5DCL,6)
// PWM5DCL<PWM5DCL7>
extern volatile __bit                   PWM5DCL7            __at(0x6C9F);	// @ (0xD93 * 8 + 7)
#define                                 PWM5DCL7_bit        _BIT_ACCESS(PWM5DCL,7)
// PWM5CON<PWM5EN>
extern volatile __bit                   PWM5EN              __at(0x6CDF);	// @ (0xD9B * 8 + 7)
#define                                 PWM5EN_bit          _BIT_ACCESS(PWM5CON,7)
// PIE3<PWM5IE>
extern volatile __bit                   PWM5IE              __at(0x49E);	// @ (0x93 * 8 + 6)
#define                                 PWM5IE_bit          _BIT_ACCESS(PIE3,6)
// PIR3<PWM5IF>
extern volatile __bit                   PWM5IF              __at(0x9E);	// @ (0x13 * 8 + 6)
#define                                 PWM5IF_bit          _BIT_ACCESS(PIR3,6)
// PWM5LDCON<PWM5LD>
extern volatile __bit                   PWM5LD              __at(0x6CFF);	// @ (0xD9F * 8 + 7)
#define                                 PWM5LD_bit          _BIT_ACCESS(PWM5LDCON,7)
// PWM5CON<PWM5MODE0>
extern volatile __bit                   PWM5MODE0           __at(0x6CDA);	// @ (0xD9B * 8 + 2)
#define                                 PWM5MODE0_bit       _BIT_ACCESS(PWM5CON,2)
// PWM5CON<PWM5MODE1>
extern volatile __bit                   PWM5MODE1           __at(0x6CDB);	// @ (0xD9B * 8 + 3)
#define                                 PWM5MODE1_bit       _BIT_ACCESS(PWM5CON,3)
// PWM5OFH<PWM5OFH0>
extern volatile __bit                   PWM5OFH0            __at(0x6CC0);	// @ (0xD98 * 8 + 0)
#define                                 PWM5OFH0_bit        _BIT_ACCESS(PWM5OFH,0)
// PWM5OFH<PWM5OFH1>
extern volatile __bit                   PWM5OFH1            __at(0x6CC1);	// @ (0xD98 * 8 + 1)
#define                                 PWM5OFH1_bit        _BIT_ACCESS(PWM5OFH,1)
// PWM5OFH<PWM5OFH2>
extern volatile __bit                   PWM5OFH2            __at(0x6CC2);	// @ (0xD98 * 8 + 2)
#define                                 PWM5OFH2_bit        _BIT_ACCESS(PWM5OFH,2)
// PWM5OFH<PWM5OFH3>
extern volatile __bit                   PWM5OFH3            __at(0x6CC3);	// @ (0xD98 * 8 + 3)
#define                                 PWM5OFH3_bit        _BIT_ACCESS(PWM5OFH,3)
// PWM5OFH<PWM5OFH4>
extern volatile __bit                   PWM5OFH4            __at(0x6CC4);	// @ (0xD98 * 8 + 4)
#define                                 PWM5OFH4_bit        _BIT_ACCESS(PWM5OFH,4)
// PWM5OFH<PWM5OFH5>
extern volatile __bit                   PWM5OFH5            __at(0x6CC5);	// @ (0xD98 * 8 + 5)
#define                                 PWM5OFH5_bit        _BIT_ACCESS(PWM5OFH,5)
// PWM5OFH<PWM5OFH6>
extern volatile __bit                   PWM5OFH6            __at(0x6CC6);	// @ (0xD98 * 8 + 6)
#define                                 PWM5OFH6_bit        _BIT_ACCESS(PWM5OFH,6)
// PWM5OFH<PWM5OFH7>
extern volatile __bit                   PWM5OFH7            __at(0x6CC7);	// @ (0xD98 * 8 + 7)
#define                                 PWM5OFH7_bit        _BIT_ACCESS(PWM5OFH,7)
// PWM5INTE<PWM5OFIE>
extern volatile __bit                   PWM5OFIE            __at(0x6CE3);	// @ (0xD9C * 8 + 3)
#define                                 PWM5OFIE_bit        _BIT_ACCESS(PWM5INTE,3)
// PWM5INTF<PWM5OFIF>
extern volatile __bit                   PWM5OFIF            __at(0x6CEB);	// @ (0xD9D * 8 + 3)
#define                                 PWM5OFIF_bit        _BIT_ACCESS(PWM5INTF,3)
// PWM5OFL<PWM5OFL0>
extern volatile __bit                   PWM5OFL0            __at(0x6CB8);	// @ (0xD97 * 8 + 0)
#define                                 PWM5OFL0_bit        _BIT_ACCESS(PWM5OFL,0)
// PWM5OFL<PWM5OFL1>
extern volatile __bit                   PWM5OFL1            __at(0x6CB9);	// @ (0xD97 * 8 + 1)
#define                                 PWM5OFL1_bit        _BIT_ACCESS(PWM5OFL,1)
// PWM5OFL<PWM5OFL2>
extern volatile __bit                   PWM5OFL2            __at(0x6CBA);	// @ (0xD97 * 8 + 2)
#define                                 PWM5OFL2_bit        _BIT_ACCESS(PWM5OFL,2)
// PWM5OFL<PWM5OFL3>
extern volatile __bit                   PWM5OFL3            __at(0x6CBB);	// @ (0xD97 * 8 + 3)
#define                                 PWM5OFL3_bit        _BIT_ACCESS(PWM5OFL,3)
// PWM5OFL<PWM5OFL4>
extern volatile __bit                   PWM5OFL4            __at(0x6CBC);	// @ (0xD97 * 8 + 4)
#define                                 PWM5OFL4_bit        _BIT_ACCESS(PWM5OFL,4)
// PWM5OFL<PWM5OFL5>
extern volatile __bit                   PWM5OFL5            __at(0x6CBD);	// @ (0xD97 * 8 + 5)
#define                                 PWM5OFL5_bit        _BIT_ACCESS(PWM5OFL,5)
// PWM5OFL<PWM5OFL6>
extern volatile __bit                   PWM5OFL6            __at(0x6CBE);	// @ (0xD97 * 8 + 6)
#define                                 PWM5OFL6_bit        _BIT_ACCESS(PWM5OFL,6)
// PWM5OFL<PWM5OFL7>
extern volatile __bit                   PWM5OFL7            __at(0x6CBF);	// @ (0xD97 * 8 + 7)
#define                                 PWM5OFL7_bit        _BIT_ACCESS(PWM5OFL,7)
// PWM5OFCON<PWM5OFMC>
extern volatile __bit                   PWM5OFMC            __at(0x6D04);	// @ (0xDA0 * 8 + 4)
#define                                 PWM5OFMC_bit        _BIT_ACCESS(PWM5OFCON,4)
// PWM5CON<PWM5OUT>
extern volatile __bit                   PWM5OUT             __at(0x6CDD);	// @ (0xD9B * 8 + 5)
#define                                 PWM5OUT_bit         _BIT_ACCESS(PWM5CON,5)
// PWM5PHH<PWM5PHH0>
extern volatile __bit                   PWM5PHH0            __at(0x6C90);	// @ (0xD92 * 8 + 0)
#define                                 PWM5PHH0_bit        _BIT_ACCESS(PWM5PHH,0)
// PWM5PHH<PWM5PHH1>
extern volatile __bit                   PWM5PHH1            __at(0x6C91);	// @ (0xD92 * 8 + 1)
#define                                 PWM5PHH1_bit        _BIT_ACCESS(PWM5PHH,1)
// PWM5PHH<PWM5PHH2>
extern volatile __bit                   PWM5PHH2            __at(0x6C92);	// @ (0xD92 * 8 + 2)
#define                                 PWM5PHH2_bit        _BIT_ACCESS(PWM5PHH,2)
// PWM5PHH<PWM5PHH3>
extern volatile __bit                   PWM5PHH3            __at(0x6C93);	// @ (0xD92 * 8 + 3)
#define                                 PWM5PHH3_bit        _BIT_ACCESS(PWM5PHH,3)
// PWM5PHH<PWM5PHH4>
extern volatile __bit                   PWM5PHH4            __at(0x6C94);	// @ (0xD92 * 8 + 4)
#define                                 PWM5PHH4_bit        _BIT_ACCESS(PWM5PHH,4)
// PWM5PHH<PWM5PHH5>
extern volatile __bit                   PWM5PHH5            __at(0x6C95);	// @ (0xD92 * 8 + 5)
#define                                 PWM5PHH5_bit        _BIT_ACCESS(PWM5PHH,5)
// PWM5PHH<PWM5PHH6>
extern volatile __bit                   PWM5PHH6            __at(0x6C96);	// @ (0xD92 * 8 + 6)
#define                                 PWM5PHH6_bit        _BIT_ACCESS(PWM5PHH,6)
// PWM5PHH<PWM5PHH7>
extern volatile __bit                   PWM5PHH7            __at(0x6C97);	// @ (0xD92 * 8 + 7)
#define                                 PWM5PHH7_bit        _BIT_ACCESS(PWM5PHH,7)
// PWM5INTE<PWM5PHIE>
extern volatile __bit                   PWM5PHIE            __at(0x6CE2);	// @ (0xD9C * 8 + 2)
#define                                 PWM5PHIE_bit        _BIT_ACCESS(PWM5INTE,2)
// PWM5INTF<PWM5PHIF>
extern volatile __bit                   PWM5PHIF            __at(0x6CEA);	// @ (0xD9D * 8 + 2)
#define                                 PWM5PHIF_bit        _BIT_ACCESS(PWM5INTF,2)
// PWM5PHL<PWM5PHL0>
extern volatile __bit                   PWM5PHL0            __at(0x6C88);	// @ (0xD91 * 8 + 0)
#define                                 PWM5PHL0_bit        _BIT_ACCESS(PWM5PHL,0)
// PWM5PHL<PWM5PHL1>
extern volatile __bit                   PWM5PHL1            __at(0x6C89);	// @ (0xD91 * 8 + 1)
#define                                 PWM5PHL1_bit        _BIT_ACCESS(PWM5PHL,1)
// PWM5PHL<PWM5PHL2>
extern volatile __bit                   PWM5PHL2            __at(0x6C8A);	// @ (0xD91 * 8 + 2)
#define                                 PWM5PHL2_bit        _BIT_ACCESS(PWM5PHL,2)
// PWM5PHL<PWM5PHL3>
extern volatile __bit                   PWM5PHL3            __at(0x6C8B);	// @ (0xD91 * 8 + 3)
#define                                 PWM5PHL3_bit        _BIT_ACCESS(PWM5PHL,3)
// PWM5PHL<PWM5PHL4>
extern volatile __bit                   PWM5PHL4            __at(0x6C8C);	// @ (0xD91 * 8 + 4)
#define                                 PWM5PHL4_bit        _BIT_ACCESS(PWM5PHL,4)
// PWM5PHL<PWM5PHL5>
extern volatile __bit                   PWM5PHL5            __at(0x6C8D);	// @ (0xD91 * 8 + 5)
#define                                 PWM5PHL5_bit        _BIT_ACCESS(PWM5PHL,5)
// PWM5PHL<PWM5PHL6>
extern volatile __bit                   PWM5PHL6            __at(0x6C8E);	// @ (0xD91 * 8 + 6)
#define                                 PWM5PHL6_bit        _BIT_ACCESS(PWM5PHL,6)
// PWM5PHL<PWM5PHL7>
extern volatile __bit                   PWM5PHL7            __at(0x6C8F);	// @ (0xD91 * 8 + 7)
#define                                 PWM5PHL7_bit        _BIT_ACCESS(PWM5PHL,7)
// PWM5CON<PWM5POL>
extern volatile __bit                   PWM5POL             __at(0x6CDC);	// @ (0xD9B * 8 + 4)
#define                                 PWM5POL_bit         _BIT_ACCESS(PWM5CON,4)
// PWM5PRH<PWM5PRH0>
extern volatile __bit                   PWM5PRH0            __at(0x6CB0);	// @ (0xD96 * 8 + 0)
#define                                 PWM5PRH0_bit        _BIT_ACCESS(PWM5PRH,0)
// PWM5PRH<PWM5PRH1>
extern volatile __bit                   PWM5PRH1            __at(0x6CB1);	// @ (0xD96 * 8 + 1)
#define                                 PWM5PRH1_bit        _BIT_ACCESS(PWM5PRH,1)
// PWM5PRH<PWM5PRH2>
extern volatile __bit                   PWM5PRH2            __at(0x6CB2);	// @ (0xD96 * 8 + 2)
#define                                 PWM5PRH2_bit        _BIT_ACCESS(PWM5PRH,2)
// PWM5PRH<PWM5PRH3>
extern volatile __bit                   PWM5PRH3            __at(0x6CB3);	// @ (0xD96 * 8 + 3)
#define                                 PWM5PRH3_bit        _BIT_ACCESS(PWM5PRH,3)
// PWM5PRH<PWM5PRH4>
extern volatile __bit                   PWM5PRH4            __at(0x6CB4);	// @ (0xD96 * 8 + 4)
#define                                 PWM5PRH4_bit        _BIT_ACCESS(PWM5PRH,4)
// PWM5PRH<PWM5PRH5>
extern volatile __bit                   PWM5PRH5            __at(0x6CB5);	// @ (0xD96 * 8 + 5)
#define                                 PWM5PRH5_bit        _BIT_ACCESS(PWM5PRH,5)
// PWM5PRH<PWM5PRH6>
extern volatile __bit                   PWM5PRH6            __at(0x6CB6);	// @ (0xD96 * 8 + 6)
#define                                 PWM5PRH6_bit        _BIT_ACCESS(PWM5PRH,6)
// PWM5PRH<PWM5PRH7>
extern volatile __bit                   PWM5PRH7            __at(0x6CB7);	// @ (0xD96 * 8 + 7)
#define                                 PWM5PRH7_bit        _BIT_ACCESS(PWM5PRH,7)
// PWM5INTE<PWM5PRIE>
extern volatile __bit                   PWM5PRIE            __at(0x6CE0);	// @ (0xD9C * 8 + 0)
#define                                 PWM5PRIE_bit        _BIT_ACCESS(PWM5INTE,0)
// PWM5INTF<PWM5PRIF>
extern volatile __bit                   PWM5PRIF            __at(0x6CE8);	// @ (0xD9D * 8 + 0)
#define                                 PWM5PRIF_bit        _BIT_ACCESS(PWM5INTF,0)
// PWM5PRL<PWM5PRL0>
extern volatile __bit                   PWM5PRL0            __at(0x6CA8);	// @ (0xD95 * 8 + 0)
#define                                 PWM5PRL0_bit        _BIT_ACCESS(PWM5PRL,0)
// PWM5PRL<PWM5PRL1>
extern volatile __bit                   PWM5PRL1            __at(0x6CA9);	// @ (0xD95 * 8 + 1)
#define                                 PWM5PRL1_bit        _BIT_ACCESS(PWM5PRL,1)
// PWM5PRL<PWM5PRL2>
extern volatile __bit                   PWM5PRL2            __at(0x6CAA);	// @ (0xD95 * 8 + 2)
#define                                 PWM5PRL2_bit        _BIT_ACCESS(PWM5PRL,2)
// PWM5PRL<PWM5PRL3>
extern volatile __bit                   PWM5PRL3            __at(0x6CAB);	// @ (0xD95 * 8 + 3)
#define                                 PWM5PRL3_bit        _BIT_ACCESS(PWM5PRL,3)
// PWM5PRL<PWM5PRL4>
extern volatile __bit                   PWM5PRL4            __at(0x6CAC);	// @ (0xD95 * 8 + 4)
#define                                 PWM5PRL4_bit        _BIT_ACCESS(PWM5PRL,4)
// PWM5PRL<PWM5PRL5>
extern volatile __bit                   PWM5PRL5            __at(0x6CAD);	// @ (0xD95 * 8 + 5)
#define                                 PWM5PRL5_bit        _BIT_ACCESS(PWM5PRL,5)
// PWM5PRL<PWM5PRL6>
extern volatile __bit                   PWM5PRL6            __at(0x6CAE);	// @ (0xD95 * 8 + 6)
#define                                 PWM5PRL6_bit        _BIT_ACCESS(PWM5PRL,6)
// PWM5PRL<PWM5PRL7>
extern volatile __bit                   PWM5PRL7            __at(0x6CAF);	// @ (0xD95 * 8 + 7)
#define                                 PWM5PRL7_bit        _BIT_ACCESS(PWM5PRL,7)
// PWM5CLKCON<PWM5PS0>
extern volatile __bit                   PWM5PS0             __at(0x6CF4);	// @ (0xD9E * 8 + 4)
#define                                 PWM5PS0_bit         _BIT_ACCESS(PWM5CLKCON,4)
// PWM5CLKCON<PWM5PS1>
extern volatile __bit                   PWM5PS1             __at(0x6CF5);	// @ (0xD9E * 8 + 5)
#define                                 PWM5PS1_bit         _BIT_ACCESS(PWM5CLKCON,5)
// PWM5CLKCON<PWM5PS2>
extern volatile __bit                   PWM5PS2             __at(0x6CF6);	// @ (0xD9E * 8 + 6)
#define                                 PWM5PS2_bit         _BIT_ACCESS(PWM5CLKCON,6)
// PWM5TMRH<PWM5TMRH0>
extern volatile __bit                   PWM5TMRH0           __at(0x6CD0);	// @ (0xD9A * 8 + 0)
#define                                 PWM5TMRH0_bit       _BIT_ACCESS(PWM5TMRH,0)
// PWM5TMRH<PWM5TMRH1>
extern volatile __bit                   PWM5TMRH1           __at(0x6CD1);	// @ (0xD9A * 8 + 1)
#define                                 PWM5TMRH1_bit       _BIT_ACCESS(PWM5TMRH,1)
// PWM5TMRH<PWM5TMRH2>
extern volatile __bit                   PWM5TMRH2           __at(0x6CD2);	// @ (0xD9A * 8 + 2)
#define                                 PWM5TMRH2_bit       _BIT_ACCESS(PWM5TMRH,2)
// PWM5TMRH<PWM5TMRH3>
extern volatile __bit                   PWM5TMRH3           __at(0x6CD3);	// @ (0xD9A * 8 + 3)
#define                                 PWM5TMRH3_bit       _BIT_ACCESS(PWM5TMRH,3)
// PWM5TMRH<PWM5TMRH4>
extern volatile __bit                   PWM5TMRH4           __at(0x6CD4);	// @ (0xD9A * 8 + 4)
#define                                 PWM5TMRH4_bit       _BIT_ACCESS(PWM5TMRH,4)
// PWM5TMRH<PWM5TMRH5>
extern volatile __bit                   PWM5TMRH5           __at(0x6CD5);	// @ (0xD9A * 8 + 5)
#define                                 PWM5TMRH5_bit       _BIT_ACCESS(PWM5TMRH,5)
// PWM5TMRH<PWM5TMRH6>
extern volatile __bit                   PWM5TMRH6           __at(0x6CD6);	// @ (0xD9A * 8 + 6)
#define                                 PWM5TMRH6_bit       _BIT_ACCESS(PWM5TMRH,6)
// PWM5TMRH<PWM5TMRH7>
extern volatile __bit                   PWM5TMRH7           __at(0x6CD7);	// @ (0xD9A * 8 + 7)
#define                                 PWM5TMRH7_bit       _BIT_ACCESS(PWM5TMRH,7)
// PWM5TMRL<PWM5TMRL0>
extern volatile __bit                   PWM5TMRL0           __at(0x6CC8);	// @ (0xD99 * 8 + 0)
#define                                 PWM5TMRL0_bit       _BIT_ACCESS(PWM5TMRL,0)
// PWM5TMRL<PWM5TMRL1>
extern volatile __bit                   PWM5TMRL1           __at(0x6CC9);	// @ (0xD99 * 8 + 1)
#define                                 PWM5TMRL1_bit       _BIT_ACCESS(PWM5TMRL,1)
// PWM5TMRL<PWM5TMRL2>
extern volatile __bit                   PWM5TMRL2           __at(0x6CCA);	// @ (0xD99 * 8 + 2)
#define                                 PWM5TMRL2_bit       _BIT_ACCESS(PWM5TMRL,2)
// PWM5TMRL<PWM5TMRL3>
extern volatile __bit                   PWM5TMRL3           __at(0x6CCB);	// @ (0xD99 * 8 + 3)
#define                                 PWM5TMRL3_bit       _BIT_ACCESS(PWM5TMRL,3)
// PWM5TMRL<PWM5TMRL4>
extern volatile __bit                   PWM5TMRL4           __at(0x6CCC);	// @ (0xD99 * 8 + 4)
#define                                 PWM5TMRL4_bit       _BIT_ACCESS(PWM5TMRL,4)
// PWM5TMRL<PWM5TMRL5>
extern volatile __bit                   PWM5TMRL5           __at(0x6CCD);	// @ (0xD99 * 8 + 5)
#define                                 PWM5TMRL5_bit       _BIT_ACCESS(PWM5TMRL,5)
// PWM5TMRL<PWM5TMRL6>
extern volatile __bit                   PWM5TMRL6           __at(0x6CCE);	// @ (0xD99 * 8 + 6)
#define                                 PWM5TMRL6_bit       _BIT_ACCESS(PWM5TMRL,6)
// PWM5TMRL<PWM5TMRL7>
extern volatile __bit                   PWM5TMRL7           __at(0x6CCF);	// @ (0xD99 * 8 + 7)
#define                                 PWM5TMRL7_bit       _BIT_ACCESS(PWM5TMRL,7)
// PWM3DCL<PWMPW0>
extern volatile __bit                   PWMPW0              __at(0x30BE);	// @ (0x617 * 8 + 6)
#define                                 PWMPW0_bit          _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<PWMPW1>
extern volatile __bit                   PWMPW1              __at(0x30BF);	// @ (0x617 * 8 + 7)
#define                                 PWMPW1_bit          _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<PWMPW2>
extern volatile __bit                   PWMPW2              __at(0x30C0);	// @ (0x618 * 8 + 0)
#define                                 PWMPW2_bit          _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<PWMPW3>
extern volatile __bit                   PWMPW3              __at(0x30C1);	// @ (0x618 * 8 + 1)
#define                                 PWMPW3_bit          _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<PWMPW4>
extern volatile __bit                   PWMPW4              __at(0x30C2);	// @ (0x618 * 8 + 2)
#define                                 PWMPW4_bit          _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<PWMPW5>
extern volatile __bit                   PWMPW5              __at(0x30C3);	// @ (0x618 * 8 + 3)
#define                                 PWMPW5_bit          _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<PWMPW6>
extern volatile __bit                   PWMPW6              __at(0x30C4);	// @ (0x618 * 8 + 4)
#define                                 PWMPW6_bit          _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<PWMPW7>
extern volatile __bit                   PWMPW7              __at(0x30C5);	// @ (0x618 * 8 + 5)
#define                                 PWMPW7_bit          _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<PWMPW8>
extern volatile __bit                   PWMPW8              __at(0x30C6);	// @ (0x618 * 8 + 6)
#define                                 PWMPW8_bit          _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<PWMPW9>
extern volatile __bit                   PWMPW9              __at(0x30C7);	// @ (0x618 * 8 + 7)
#define                                 PWMPW9_bit          _BIT_ACCESS(PWM3DCH,7)
// DAC1REFH<R10>
extern volatile __bit                   R10                 __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 R10_bit             _BIT_ACCESS(DAC1REFH,2)
// DAC1REFH<R11>
extern volatile __bit                   R11                 __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 R11_bit             _BIT_ACCESS(DAC1REFH,3)
// DAC1REFH<R12>
extern volatile __bit                   R12                 __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 R12_bit             _BIT_ACCESS(DAC1REFH,4)
// DAC1REFH<R13>
extern volatile __bit                   R13                 __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 R13_bit             _BIT_ACCESS(DAC1REFH,5)
// DAC1REFH<R14>
extern volatile __bit                   R14                 __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 R14_bit             _BIT_ACCESS(DAC1REFH,6)
// DAC1REFH<R15>
extern volatile __bit                   R15                 __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 R15_bit             _BIT_ACCESS(DAC1REFH,7)
// DAC1REFL<R5>
extern volatile __bit                   R5                  __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 R5_bit              _BIT_ACCESS(DAC1REFL,5)
// DAC1REFL<R6>
extern volatile __bit                   R6                  __at(0x2C96);	// @ (0x592 * 8 + 6)
#define                                 R6_bit              _BIT_ACCESS(DAC1REFL,6)
// DAC1REFL<R7>
extern volatile __bit                   R7                  __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 R7_bit              _BIT_ACCESS(DAC1REFL,7)
// DAC1REFH<R8>
extern volatile __bit                   R8                  __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 R8_bit              _BIT_ACCESS(DAC1REFH,0)
// DAC1REFH<R9>
extern volatile __bit                   R9                  __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 R9_bit              _BIT_ACCESS(DAC1REFH,1)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x64);	// @ (0xC * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x65);	// @ (0xC * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x70);	// @ (0xE * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x71);	// @ (0xE * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x72);	// @ (0xE * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x73);	// @ (0xE * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// SSP1CON2<RCEN>
extern volatile __bit                   RCEN                __at(0x10B3);	// @ (0x216 * 8 + 3)
#define                                 RCEN_bit            _BIT_ACCESS(SSP1CON2,3)
// BAUD1CON<RCIDL>
extern volatile __bit                   RCIDL               __at(0xCFE);	// @ (0x19F * 8 + 6)
#define                                 RCIDL_bit           _BIT_ACCESS(BAUD1CON,6)
// PIE1<RCIE>
extern volatile __bit                   RCIE                __at(0x48D);	// @ (0x91 * 8 + 5)
#define                                 RCIE_bit            _BIT_ACCESS(PIE1,5)
// PIR1<RCIF>
extern volatile __bit                   RCIF                __at(0x8D);	// @ (0x11 * 8 + 5)
#define                                 RCIF_bit            _BIT_ACCESS(PIR1,5)
// PMCON1<RD>
extern volatile __bit                   RD                  __at(0xCA8);	// @ (0x195 * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(PMCON1,0)
// COG1CON1<RDBS>
extern volatile __bit                   RDBS                __at(0x34A7);	// @ (0x694 * 8 + 7)
#define                                 RDBS_bit            _BIT_ACCESS(COG1CON1,7)
// PRG1CON1<RDY>
extern volatile __bit                   RDY                 __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 RDY_bit             _BIT_ACCESS(PRG1CON1,2)
// PRG1CON0<REDG>
extern volatile __bit                   REDG                __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 REDG_bit            _BIT_ACCESS(PRG1CON0,4)
// DAC1REFH<REF10>
extern volatile __bit                   REF10               __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 REF10_bit           _BIT_ACCESS(DAC1REFH,2)
// DAC1REFH<REF11>
extern volatile __bit                   REF11               __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 REF11_bit           _BIT_ACCESS(DAC1REFH,3)
// DAC1REFH<REF12>
extern volatile __bit                   REF12               __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 REF12_bit           _BIT_ACCESS(DAC1REFH,4)
// DAC1REFH<REF13>
extern volatile __bit                   REF13               __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 REF13_bit           _BIT_ACCESS(DAC1REFH,5)
// DAC1REFH<REF14>
extern volatile __bit                   REF14               __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 REF14_bit           _BIT_ACCESS(DAC1REFH,6)
// DAC1REFH<REF15>
extern volatile __bit                   REF15               __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 REF15_bit           _BIT_ACCESS(DAC1REFH,7)
// DAC1REFL<REF6>
extern volatile __bit                   REF6                __at(0x2C96);	// @ (0x592 * 8 + 6)
#define                                 REF6_bit            _BIT_ACCESS(DAC1REFL,6)
// DAC1REFL<REF7>
extern volatile __bit                   REF7                __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 REF7_bit            _BIT_ACCESS(DAC1REFL,7)
// DAC1REFH<REF8>
extern volatile __bit                   REF8                __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 REF8_bit            _BIT_ACCESS(DAC1REFH,0)
// DAC1REFH<REF9>
extern volatile __bit                   REF9                __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 REF9_bit            _BIT_ACCESS(DAC1REFH,1)
// PRG1CON0<RG1EN>
extern volatile __bit                   RG1EN               __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 RG1EN_bit           _BIT_ACCESS(PRG1CON0,7)
// PRG1CON0<RG1FEDG>
extern volatile __bit                   RG1FEDG             __at(0x3CBD);	// @ (0x797 * 8 + 5)
#define                                 RG1FEDG_bit         _BIT_ACCESS(PRG1CON0,5)
// PRG1CON1<RG1FPOL>
extern volatile __bit                   RG1FPOL             __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 RG1FPOL_bit         _BIT_ACCESS(PRG1CON1,1)
// PRG1FTSS<RG1FTSS0>
extern volatile __bit                   RG1FTSS0            __at(0x3CA8);	// @ (0x795 * 8 + 0)
#define                                 RG1FTSS0_bit        _BIT_ACCESS(PRG1FTSS,0)
// PRG1FTSS<RG1FTSS1>
extern volatile __bit                   RG1FTSS1            __at(0x3CA9);	// @ (0x795 * 8 + 1)
#define                                 RG1FTSS1_bit        _BIT_ACCESS(PRG1FTSS,1)
// PRG1FTSS<RG1FTSS2>
extern volatile __bit                   RG1FTSS2            __at(0x3CAA);	// @ (0x795 * 8 + 2)
#define                                 RG1FTSS2_bit        _BIT_ACCESS(PRG1FTSS,2)
// PRG1FTSS<RG1FTSS3>
extern volatile __bit                   RG1FTSS3            __at(0x3CAB);	// @ (0x795 * 8 + 3)
#define                                 RG1FTSS3_bit        _BIT_ACCESS(PRG1FTSS,3)
// PRG1CON0<RG1GO>
extern volatile __bit                   RG1GO               __at(0x3CB8);	// @ (0x797 * 8 + 0)
#define                                 RG1GO_bit           _BIT_ACCESS(PRG1CON0,0)
// PRG1INS<RG1INS0>
extern volatile __bit                   RG1INS0             __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 RG1INS0_bit         _BIT_ACCESS(PRG1INS,0)
// PRG1INS<RG1INS1>
extern volatile __bit                   RG1INS1             __at(0x3CB1);	// @ (0x796 * 8 + 1)
#define                                 RG1INS1_bit         _BIT_ACCESS(PRG1INS,1)
// PRG1INS<RG1INS2>
extern volatile __bit                   RG1INS2             __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 RG1INS2_bit         _BIT_ACCESS(PRG1INS,2)
// PRG1INS<RG1INS3>
extern volatile __bit                   RG1INS3             __at(0x3CB3);	// @ (0x796 * 8 + 3)
#define                                 RG1INS3_bit         _BIT_ACCESS(PRG1INS,3)
// PRG1CON2<RG1ISET0>
extern volatile __bit                   RG1ISET0            __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 RG1ISET0_bit        _BIT_ACCESS(PRG1CON2,0)
// PRG1CON2<RG1ISET1>
extern volatile __bit                   RG1ISET1            __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 RG1ISET1_bit        _BIT_ACCESS(PRG1CON2,1)
// PRG1CON2<RG1ISET2>
extern volatile __bit                   RG1ISET2            __at(0x3CCA);	// @ (0x799 * 8 + 2)
#define                                 RG1ISET2_bit        _BIT_ACCESS(PRG1CON2,2)
// PRG1CON2<RG1ISET3>
extern volatile __bit                   RG1ISET3            __at(0x3CCB);	// @ (0x799 * 8 + 3)
#define                                 RG1ISET3_bit        _BIT_ACCESS(PRG1CON2,3)
// PRG1CON2<RG1ISET4>
extern volatile __bit                   RG1ISET4            __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 RG1ISET4_bit        _BIT_ACCESS(PRG1CON2,4)
// PRG1CON0<RG1MODE0>
extern volatile __bit                   RG1MODE0            __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 RG1MODE0_bit        _BIT_ACCESS(PRG1CON0,2)
// PRG1CON0<RG1MODE1>
extern volatile __bit                   RG1MODE1            __at(0x3CBB);	// @ (0x797 * 8 + 3)
#define                                 RG1MODE1_bit        _BIT_ACCESS(PRG1CON0,3)
// PRG1CON0<RG1OS>
extern volatile __bit                   RG1OS               __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 RG1OS_bit           _BIT_ACCESS(PRG1CON0,1)
// PRG1CON1<RG1RDY>
extern volatile __bit                   RG1RDY              __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 RG1RDY_bit          _BIT_ACCESS(PRG1CON1,2)
// PRG1CON0<RG1REDG>
extern volatile __bit                   RG1REDG             __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 RG1REDG_bit         _BIT_ACCESS(PRG1CON0,4)
// PRG1CON1<RG1RPOL>
extern volatile __bit                   RG1RPOL             __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 RG1RPOL_bit         _BIT_ACCESS(PRG1CON1,0)
// PRG1RTSS<RG1RTSS0>
extern volatile __bit                   RG1RTSS0            __at(0x3CA0);	// @ (0x794 * 8 + 0)
#define                                 RG1RTSS0_bit        _BIT_ACCESS(PRG1RTSS,0)
// PRG1RTSS<RG1RTSS1>
extern volatile __bit                   RG1RTSS1            __at(0x3CA1);	// @ (0x794 * 8 + 1)
#define                                 RG1RTSS1_bit        _BIT_ACCESS(PRG1RTSS,1)
// PRG1RTSS<RG1RTSS2>
extern volatile __bit                   RG1RTSS2            __at(0x3CA2);	// @ (0x794 * 8 + 2)
#define                                 RG1RTSS2_bit        _BIT_ACCESS(PRG1RTSS,2)
// PRG1RTSS<RG1RTSS3>
extern volatile __bit                   RG1RTSS3            __at(0x3CA3);	// @ (0x794 * 8 + 3)
#define                                 RG1RTSS3_bit        _BIT_ACCESS(PRG1RTSS,3)
// COG1RIS0<RIS0>
extern volatile __bit                   RIS0                __at(0x34A8);	// @ (0x695 * 8 + 0)
#define                                 RIS0_bit            _BIT_ACCESS(COG1RIS0,0)
// COG1RIS0<RIS1>
extern volatile __bit                   RIS1                __at(0x34A9);	// @ (0x695 * 8 + 1)
#define                                 RIS1_bit            _BIT_ACCESS(COG1RIS0,1)
// COG1RIS1<RIS10>
extern volatile __bit                   RIS10               __at(0x34B2);	// @ (0x696 * 8 + 2)
#define                                 RIS10_bit           _BIT_ACCESS(COG1RIS1,2)
// COG1RIS1<RIS11>
extern volatile __bit                   RIS11               __at(0x34B3);	// @ (0x696 * 8 + 3)
#define                                 RIS11_bit           _BIT_ACCESS(COG1RIS1,3)
// COG1RIS1<RIS12>
extern volatile __bit                   RIS12               __at(0x34B4);	// @ (0x696 * 8 + 4)
#define                                 RIS12_bit           _BIT_ACCESS(COG1RIS1,4)
// COG1RIS1<RIS13>
extern volatile __bit                   RIS13               __at(0x34B5);	// @ (0x696 * 8 + 5)
#define                                 RIS13_bit           _BIT_ACCESS(COG1RIS1,5)
// COG1RIS1<RIS14>
extern volatile __bit                   RIS14               __at(0x34B6);	// @ (0x696 * 8 + 6)
#define                                 RIS14_bit           _BIT_ACCESS(COG1RIS1,6)
// COG1RIS0<RIS2>
extern volatile __bit                   RIS2                __at(0x34AA);	// @ (0x695 * 8 + 2)
#define                                 RIS2_bit            _BIT_ACCESS(COG1RIS0,2)
// COG1RIS0<RIS3>
extern volatile __bit                   RIS3                __at(0x34AB);	// @ (0x695 * 8 + 3)
#define                                 RIS3_bit            _BIT_ACCESS(COG1RIS0,3)
// COG1RIS0<RIS4>
extern volatile __bit                   RIS4                __at(0x34AC);	// @ (0x695 * 8 + 4)
#define                                 RIS4_bit            _BIT_ACCESS(COG1RIS0,4)
// COG1RIS0<RIS5>
extern volatile __bit                   RIS5                __at(0x34AD);	// @ (0x695 * 8 + 5)
#define                                 RIS5_bit            _BIT_ACCESS(COG1RIS0,5)
// COG1RIS0<RIS6>
extern volatile __bit                   RIS6                __at(0x34AE);	// @ (0x695 * 8 + 6)
#define                                 RIS6_bit            _BIT_ACCESS(COG1RIS0,6)
// COG1RIS0<RIS7>
extern volatile __bit                   RIS7                __at(0x34AF);	// @ (0x695 * 8 + 7)
#define                                 RIS7_bit            _BIT_ACCESS(COG1RIS0,7)
// COG1RIS1<RIS8>
extern volatile __bit                   RIS8                __at(0x34B0);	// @ (0x696 * 8 + 0)
#define                                 RIS8_bit            _BIT_ACCESS(COG1RIS1,0)
// COG1RIS1<RIS9>
extern volatile __bit                   RIS9                __at(0x34B1);	// @ (0x696 * 8 + 1)
#define                                 RIS9_bit            _BIT_ACCESS(COG1RIS1,1)
// PRG1CON1<RPOL>
extern volatile __bit                   RPOL                __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 RPOL_bit            _BIT_ACCESS(PRG1CON1,0)
// SSP1CON2<RSEN>
extern volatile __bit                   RSEN                __at(0x10B1);	// @ (0x216 * 8 + 1)
#define                                 RSEN_bit            _BIT_ACCESS(SSP1CON2,1)
// COG1RSIM0<RSIM0>
extern volatile __bit                   RSIM0               __at(0x34B8);	// @ (0x697 * 8 + 0)
#define                                 RSIM0_bit           _BIT_ACCESS(COG1RSIM0,0)
// COG1RSIM0<RSIM1>
extern volatile __bit                   RSIM1               __at(0x34B9);	// @ (0x697 * 8 + 1)
#define                                 RSIM1_bit           _BIT_ACCESS(COG1RSIM0,1)
// COG1RSIM1<RSIM10>
extern volatile __bit                   RSIM10              __at(0x34C2);	// @ (0x698 * 8 + 2)
#define                                 RSIM10_bit          _BIT_ACCESS(COG1RSIM1,2)
// COG1RSIM1<RSIM11>
extern volatile __bit                   RSIM11              __at(0x34C3);	// @ (0x698 * 8 + 3)
#define                                 RSIM11_bit          _BIT_ACCESS(COG1RSIM1,3)
// COG1RSIM1<RSIM12>
extern volatile __bit                   RSIM12              __at(0x34C4);	// @ (0x698 * 8 + 4)
#define                                 RSIM12_bit          _BIT_ACCESS(COG1RSIM1,4)
// COG1RSIM1<RSIM13>
extern volatile __bit                   RSIM13              __at(0x34C5);	// @ (0x698 * 8 + 5)
#define                                 RSIM13_bit          _BIT_ACCESS(COG1RSIM1,5)
// COG1RSIM1<RSIM14>
extern volatile __bit                   RSIM14              __at(0x34C6);	// @ (0x698 * 8 + 6)
#define                                 RSIM14_bit          _BIT_ACCESS(COG1RSIM1,6)
// COG1RSIM0<RSIM2>
extern volatile __bit                   RSIM2               __at(0x34BA);	// @ (0x697 * 8 + 2)
#define                                 RSIM2_bit           _BIT_ACCESS(COG1RSIM0,2)
// COG1RSIM0<RSIM3>
extern volatile __bit                   RSIM3               __at(0x34BB);	// @ (0x697 * 8 + 3)
#define                                 RSIM3_bit           _BIT_ACCESS(COG1RSIM0,3)
// COG1RSIM0<RSIM4>
extern volatile __bit                   RSIM4               __at(0x34BC);	// @ (0x697 * 8 + 4)
#define                                 RSIM4_bit           _BIT_ACCESS(COG1RSIM0,4)
// COG1RSIM0<RSIM5>
extern volatile __bit                   RSIM5               __at(0x34BD);	// @ (0x697 * 8 + 5)
#define                                 RSIM5_bit           _BIT_ACCESS(COG1RSIM0,5)
// COG1RSIM0<RSIM6>
extern volatile __bit                   RSIM6               __at(0x34BE);	// @ (0x697 * 8 + 6)
#define                                 RSIM6_bit           _BIT_ACCESS(COG1RSIM0,6)
// COG1RSIM0<RSIM7>
extern volatile __bit                   RSIM7               __at(0x34BF);	// @ (0x697 * 8 + 7)
#define                                 RSIM7_bit           _BIT_ACCESS(COG1RSIM0,7)
// COG1RSIM1<RSIM8>
extern volatile __bit                   RSIM8               __at(0x34C0);	// @ (0x698 * 8 + 0)
#define                                 RSIM8_bit           _BIT_ACCESS(COG1RSIM1,0)
// COG1RSIM1<RSIM9>
extern volatile __bit                   RSIM9               __at(0x34C1);	// @ (0x698 * 8 + 1)
#define                                 RSIM9_bit           _BIT_ACCESS(COG1RSIM1,1)
// PRG1RTSS<RTSS0>
extern volatile __bit                   RTSS0               __at(0x3CA0);	// @ (0x794 * 8 + 0)
#define                                 RTSS0_bit           _BIT_ACCESS(PRG1RTSS,0)
// PRG1RTSS<RTSS1>
extern volatile __bit                   RTSS1               __at(0x3CA1);	// @ (0x794 * 8 + 1)
#define                                 RTSS1_bit           _BIT_ACCESS(PRG1RTSS,1)
// PRG1RTSS<RTSS2>
extern volatile __bit                   RTSS2               __at(0x3CA2);	// @ (0x794 * 8 + 2)
#define                                 RTSS2_bit           _BIT_ACCESS(PRG1RTSS,2)
// PRG1RTSS<RTSS3>
extern volatile __bit                   RTSS3               __at(0x3CA3);	// @ (0x794 * 8 + 3)
#define                                 RTSS3_bit           _BIT_ACCESS(PRG1RTSS,3)
// RC1STA<RX9>
extern volatile __bit                   RX9                 __at(0xCEE);	// @ (0x19D * 8 + 6)
#define                                 RX9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RX9D>
extern volatile __bit                   RX9D                __at(0xCE8);	// @ (0x19D * 8 + 0)
#define                                 RX9D_bit            _BIT_ACCESS(RC1STA,0)
// SSP1STAT<R_nW>
extern volatile __bit                   R_nW                __at(0x10A2);	// @ (0x214 * 8 + 2)
#define                                 R_nW_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1CON3<SBCDE>
extern volatile __bit                   SBCDE               __at(0x10BA);	// @ (0x217 * 8 + 2)
#define                                 SBCDE_bit           _BIT_ACCESS(SSP1CON3,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x10EF);	// @ (0x21D * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SSP1CON3<SCIE>
extern volatile __bit                   SCIE                __at(0x10BD);	// @ (0x217 * 8 + 5)
#define                                 SCIE_bit            _BIT_ACCESS(SSP1CON3,5)
// BAUD1CON<SCKP>
extern volatile __bit                   SCKP                __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUD1CON,4)
// OSCCON<SCS0>
extern volatile __bit                   SCS0                __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 SCS0_bit            _BIT_ACCESS(OSCCON,0)
// OSCCON<SCS1>
extern volatile __bit                   SCS1                __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 SCS1_bit            _BIT_ACCESS(OSCCON,1)
// SSP1CON3<SDAHT>
extern volatile __bit                   SDAHT               __at(0x10BB);	// @ (0x217 * 8 + 3)
#define                                 SDAHT_bit           _BIT_ACCESS(SSP1CON3,3)
// COG1STR<SDATA>
extern volatile __bit                   SDATA               __at(0x34FC);	// @ (0x69F * 8 + 4)
#define                                 SDATA_bit           _BIT_ACCESS(COG1STR,4)
// COG1STR<SDATB>
extern volatile __bit                   SDATB               __at(0x34FD);	// @ (0x69F * 8 + 5)
#define                                 SDATB_bit           _BIT_ACCESS(COG1STR,5)
// COG1STR<SDATC>
extern volatile __bit                   SDATC               __at(0x34FE);	// @ (0x69F * 8 + 6)
#define                                 SDATC_bit           _BIT_ACCESS(COG1STR,6)
// COG1STR<SDATD>
extern volatile __bit                   SDATD               __at(0x34FF);	// @ (0x69F * 8 + 7)
#define                                 SDATD_bit           _BIT_ACCESS(COG1STR,7)
// SSP1CON2<SEN>
extern volatile __bit                   SEN                 __at(0x10B0);	// @ (0x216 * 8 + 0)
#define                                 SEN_bit             _BIT_ACCESS(SSP1CON2,0)
// TX1STA<SENDB>
extern volatile __bit                   SENDB               __at(0xCF3);	// @ (0x19E * 8 + 3)
#define                                 SENDB_bit           _BIT_ACCESS(TX1STA,3)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0x1873);	// @ (0x30E * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0x1874);	// @ (0x30E * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SSP1STAT<SMP>
extern volatile __bit                   SMP                 __at(0x10A7);	// @ (0x214 * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SSP1STAT,7)
// T1CON<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0xC3);	// @ (0x18 * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(T1CON,3)
// OSCSTAT<SOSCR>
extern volatile __bit                   SOSCR               __at(0x4D7);	// @ (0x9A * 8 + 7)
#define                                 SOSCR_bit           _BIT_ACCESS(OSCSTAT,7)
// RC1STA<SPEN>
extern volatile __bit                   SPEN                __at(0xCEF);	// @ (0x19D * 8 + 7)
#define                                 SPEN_bit            _BIT_ACCESS(RC1STA,7)
// OSCCON<SPLLEN>
extern volatile __bit                   SPLLEN              __at(0x4CF);	// @ (0x99 * 8 + 7)
#define                                 SPLLEN_bit          _BIT_ACCESS(OSCCON,7)
// RC1STA<SREN>
extern volatile __bit                   SREN                __at(0xCED);	// @ (0x19D * 8 + 5)
#define                                 SREN_bit            _BIT_ACCESS(RC1STA,5)
// SSP1ADD<SSP1ADD0>
extern volatile __bit                   SSP1ADD0            __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 SSP1ADD0_bit        _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<SSP1ADD1>
extern volatile __bit                   SSP1ADD1            __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 SSP1ADD1_bit        _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<SSP1ADD2>
extern volatile __bit                   SSP1ADD2            __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 SSP1ADD2_bit        _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<SSP1ADD3>
extern volatile __bit                   SSP1ADD3            __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 SSP1ADD3_bit        _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<SSP1ADD4>
extern volatile __bit                   SSP1ADD4            __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 SSP1ADD4_bit        _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<SSP1ADD5>
extern volatile __bit                   SSP1ADD5            __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 SSP1ADD5_bit        _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<SSP1ADD6>
extern volatile __bit                   SSP1ADD6            __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 SSP1ADD6_bit        _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<SSP1ADD7>
extern volatile __bit                   SSP1ADD7            __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 SSP1ADD7_bit        _BIT_ACCESS(SSP1ADD,7)
// SSP1BUF<SSP1BUF0>
extern volatile __bit                   SSP1BUF0            __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 SSP1BUF0_bit        _BIT_ACCESS(SSP1BUF,0)
// SSP1BUF<SSP1BUF1>
extern volatile __bit                   SSP1BUF1            __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 SSP1BUF1_bit        _BIT_ACCESS(SSP1BUF,1)
// SSP1BUF<SSP1BUF2>
extern volatile __bit                   SSP1BUF2            __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 SSP1BUF2_bit        _BIT_ACCESS(SSP1BUF,2)
// SSP1BUF<SSP1BUF3>
extern volatile __bit                   SSP1BUF3            __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 SSP1BUF3_bit        _BIT_ACCESS(SSP1BUF,3)
// SSP1BUF<SSP1BUF4>
extern volatile __bit                   SSP1BUF4            __at(0x108C);	// @ (0x211 * 8 + 4)
#define                                 SSP1BUF4_bit        _BIT_ACCESS(SSP1BUF,4)
// SSP1BUF<SSP1BUF5>
extern volatile __bit                   SSP1BUF5            __at(0x108D);	// @ (0x211 * 8 + 5)
#define                                 SSP1BUF5_bit        _BIT_ACCESS(SSP1BUF,5)
// SSP1BUF<SSP1BUF6>
extern volatile __bit                   SSP1BUF6            __at(0x108E);	// @ (0x211 * 8 + 6)
#define                                 SSP1BUF6_bit        _BIT_ACCESS(SSP1BUF,6)
// SSP1BUF<SSP1BUF7>
extern volatile __bit                   SSP1BUF7            __at(0x108F);	// @ (0x211 * 8 + 7)
#define                                 SSP1BUF7_bit        _BIT_ACCESS(SSP1BUF,7)
// PIE1<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE1,3)
// PIR1<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x8B);	// @ (0x11 * 8 + 3)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR1,3)
// SSP1MSK<SSP1MSK0>
extern volatile __bit                   SSP1MSK0            __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 SSP1MSK0_bit        _BIT_ACCESS(SSP1MSK,0)
// SSP1MSK<SSP1MSK1>
extern volatile __bit                   SSP1MSK1            __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 SSP1MSK1_bit        _BIT_ACCESS(SSP1MSK,1)
// SSP1MSK<SSP1MSK2>
extern volatile __bit                   SSP1MSK2            __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 SSP1MSK2_bit        _BIT_ACCESS(SSP1MSK,2)
// SSP1MSK<SSP1MSK3>
extern volatile __bit                   SSP1MSK3            __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 SSP1MSK3_bit        _BIT_ACCESS(SSP1MSK,3)
// SSP1MSK<SSP1MSK4>
extern volatile __bit                   SSP1MSK4            __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 SSP1MSK4_bit        _BIT_ACCESS(SSP1MSK,4)
// SSP1MSK<SSP1MSK5>
extern volatile __bit                   SSP1MSK5            __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 SSP1MSK5_bit        _BIT_ACCESS(SSP1MSK,5)
// SSP1MSK<SSP1MSK6>
extern volatile __bit                   SSP1MSK6            __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 SSP1MSK6_bit        _BIT_ACCESS(SSP1MSK,6)
// SSP1MSK<SSP1MSK7>
extern volatile __bit                   SSP1MSK7            __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 SSP1MSK7_bit        _BIT_ACCESS(SSP1MSK,7)
// SSP1CON1<SSPEN>
extern volatile __bit                   SSPEN               __at(0x10AD);	// @ (0x215 * 8 + 5)
#define                                 SSPEN_bit           _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPM0>
extern volatile __bit                   SSPM0               __at(0x10A8);	// @ (0x215 * 8 + 0)
#define                                 SSPM0_bit           _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM1>
extern volatile __bit                   SSPM1               __at(0x10A9);	// @ (0x215 * 8 + 1)
#define                                 SSPM1_bit           _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM2>
extern volatile __bit                   SSPM2               __at(0x10AA);	// @ (0x215 * 8 + 2)
#define                                 SSPM2_bit           _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM3>
extern volatile __bit                   SSPM3               __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 SSPM3_bit           _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPOV>
extern volatile __bit                   SSPOV               __at(0x10AE);	// @ (0x215 * 8 + 6)
#define                                 SSPOV_bit           _BIT_ACCESS(SSP1CON1,6)
// PCON<STKOVF>
extern volatile __bit                   STKOVF              __at(0x4B7);	// @ (0x96 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON,7)
// PCON<STKUNF>
extern volatile __bit                   STKUNF              __at(0x4B6);	// @ (0x96 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON,6)
// COG1STR<STRA>
extern volatile __bit                   STRA                __at(0x34F8);	// @ (0x69F * 8 + 0)
#define                                 STRA_bit            _BIT_ACCESS(COG1STR,0)
// COG1STR<STRB>
extern volatile __bit                   STRB                __at(0x34F9);	// @ (0x69F * 8 + 1)
#define                                 STRB_bit            _BIT_ACCESS(COG1STR,1)
// COG1STR<STRC>
extern volatile __bit                   STRC                __at(0x34FA);	// @ (0x69F * 8 + 2)
#define                                 STRC_bit            _BIT_ACCESS(COG1STR,2)
// COG1STR<STRD>
extern volatile __bit                   STRD                __at(0x34FB);	// @ (0x69F * 8 + 3)
#define                                 STRD_bit            _BIT_ACCESS(COG1STR,3)
// WDTCON<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x4B8);	// @ (0x97 * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON,0)
// OPTION_REG<T0CS>
extern volatile __bit                   T0CS                __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 T0CS_bit            _BIT_ACCESS(OPTION_REG,5)
// INTCON<T0IE>
extern volatile __bit                   T0IE                __at(0x5D);	// @ (0xB * 8 + 5)
#define                                 T0IE_bit            _BIT_ACCESS(INTCON,5)
// INTCON<T0IF>
extern volatile __bit                   T0IF                __at(0x5A);	// @ (0xB * 8 + 2)
#define                                 T0IF_bit            _BIT_ACCESS(INTCON,2)
// OPTION_REG<T0SE>
extern volatile __bit                   T0SE                __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 T0SE_bit            _BIT_ACCESS(OPTION_REG,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0xC5);	// @ (0x18 * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CON<T1CS0>
extern volatile __bit                   T1CS0               __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CON,6)
// T1CON<T1CS1>
extern volatile __bit                   T1CS1               __at(0xC7);	// @ (0x18 * 8 + 7)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CON,7)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0xCF);	// @ (0x19 * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0xCB);	// @ (0x19 * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0xCE);	// @ (0x19 * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0xCC);	// @ (0x19 * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GCON<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0xC8);	// @ (0x19 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GCON,0)
// T1GCON<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0xC9);	// @ (0x19 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GCON,1)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0xCD);	// @ (0x19 * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0xCA);	// @ (0x19 * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1ON>
extern volatile __bit                   T1ON                __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 T1ON_bit            _BIT_ACCESS(T1CON,0)
// T1CON<T1OSCEN>
extern volatile __bit                   T1OSCEN             __at(0xC3);	// @ (0x18 * 8 + 3)
#define                                 T1OSCEN_bit         _BIT_ACCESS(T1CON,3)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0xEE);	// @ (0x1D * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0xE4);	// @ (0x1C * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0xE5);	// @ (0x1C * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0xE6);	// @ (0x1C * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0xED);	// @ (0x1D * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0xF0);	// @ (0x1E * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0xF1);	// @ (0x1E * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0xF2);	// @ (0x1E * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0xF3);	// @ (0x1E * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0xE8);	// @ (0x1D * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0xE9);	// @ (0x1D * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0xEA);	// @ (0x1D * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0xEB);	// @ (0x1D * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0xEC);	// @ (0x1D * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0xE7);	// @ (0x1C * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0xE0);	// @ (0x1C * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0xE1);	// @ (0x1C * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0xE2);	// @ (0x1C * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0xE3);	// @ (0x1C * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0xEF);	// @ (0x1D * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0xF8);	// @ (0x1F * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0xF9);	// @ (0x1F * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0xFA);	// @ (0x1F * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0xFB);	// @ (0x1F * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x24AC);	// @ (0x495 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x24AD);	// @ (0x495 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// T3CON<T3CS0>
extern volatile __bit                   T3CS0               __at(0x24AE);	// @ (0x495 * 8 + 6)
#define                                 T3CS0_bit           _BIT_ACCESS(T3CON,6)
// T3CON<T3CS1>
extern volatile __bit                   T3CS1               __at(0x24AF);	// @ (0x495 * 8 + 7)
#define                                 T3CS1_bit           _BIT_ACCESS(T3CON,7)
// T3GCON<T3GE>
extern volatile __bit                   T3GE                __at(0x24B7);	// @ (0x496 * 8 + 7)
#define                                 T3GE_bit            _BIT_ACCESS(T3GCON,7)
// T3GCON<T3GGO_nDONE>
extern volatile __bit                   T3GGO_nDONE         __at(0x24B3);	// @ (0x496 * 8 + 3)
#define                                 T3GGO_nDONE_bit     _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x24B6);	// @ (0x496 * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x24B4);	// @ (0x496 * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GCON<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x24B0);	// @ (0x496 * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GCON,0)
// T3GCON<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x24B1);	// @ (0x496 * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GCON,1)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x24B5);	// @ (0x496 * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x24B2);	// @ (0x496 * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3ON>
extern volatile __bit                   T3ON                __at(0x24A8);	// @ (0x495 * 8 + 0)
#define                                 T3ON_bit            _BIT_ACCESS(T3CON,0)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x20B6);	// @ (0x416 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x20AC);	// @ (0x415 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x20AD);	// @ (0x415 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x20AE);	// @ (0x415 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x20B5);	// @ (0x416 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x20B8);	// @ (0x417 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x20B9);	// @ (0x417 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x20BA);	// @ (0x417 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x20BB);	// @ (0x417 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x20B0);	// @ (0x416 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x20B1);	// @ (0x416 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x20B2);	// @ (0x416 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x20B3);	// @ (0x416 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x20B4);	// @ (0x416 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x20AF);	// @ (0x415 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x20A8);	// @ (0x415 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x20A9);	// @ (0x415 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x20AA);	// @ (0x415 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x20AB);	// @ (0x415 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x20B7);	// @ (0x416 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x20C0);	// @ (0x418 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x20C1);	// @ (0x418 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x20C2);	// @ (0x418 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x20C3);	// @ (0x418 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x24E4);	// @ (0x49C * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x24E5);	// @ (0x49C * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5CON<T5CS0>
extern volatile __bit                   T5CS0               __at(0x24E6);	// @ (0x49C * 8 + 6)
#define                                 T5CS0_bit           _BIT_ACCESS(T5CON,6)
// T5CON<T5CS1>
extern volatile __bit                   T5CS1               __at(0x24E7);	// @ (0x49C * 8 + 7)
#define                                 T5CS1_bit           _BIT_ACCESS(T5CON,7)
// T5GCON<T5GE>
extern volatile __bit                   T5GE                __at(0x24EF);	// @ (0x49D * 8 + 7)
#define                                 T5GE_bit            _BIT_ACCESS(T5GCON,7)
// T5GCON<T5GGO_nDONE>
extern volatile __bit                   T5GGO_nDONE         __at(0x24EB);	// @ (0x49D * 8 + 3)
#define                                 T5GGO_nDONE_bit     _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x24EE);	// @ (0x49D * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x24EC);	// @ (0x49D * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GCON<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x24E8);	// @ (0x49D * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GCON,0)
// T5GCON<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x24E9);	// @ (0x49D * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GCON,1)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x24ED);	// @ (0x49D * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x24EA);	// @ (0x49D * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5ON>
extern volatile __bit                   T5ON                __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 T5ON_bit            _BIT_ACCESS(T5CON,0)
// T6HLT<T6CKPOL>
extern volatile __bit                   T6CKPOL             __at(0x20EE);	// @ (0x41D * 8 + 6)
#define                                 T6CKPOL_bit         _BIT_ACCESS(T6HLT,6)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x20E4);	// @ (0x41C * 8 + 4)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,4)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x20E5);	// @ (0x41C * 8 + 5)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,5)
// T6CON<T6CKPS2>
extern volatile __bit                   T6CKPS2             __at(0x20E6);	// @ (0x41C * 8 + 6)
#define                                 T6CKPS2_bit         _BIT_ACCESS(T6CON,6)
// T6HLT<T6CKSYNC>
extern volatile __bit                   T6CKSYNC            __at(0x20ED);	// @ (0x41D * 8 + 5)
#define                                 T6CKSYNC_bit        _BIT_ACCESS(T6HLT,5)
// T6CLKCON<T6CS0>
extern volatile __bit                   T6CS0               __at(0x20F0);	// @ (0x41E * 8 + 0)
#define                                 T6CS0_bit           _BIT_ACCESS(T6CLKCON,0)
// T6CLKCON<T6CS1>
extern volatile __bit                   T6CS1               __at(0x20F1);	// @ (0x41E * 8 + 1)
#define                                 T6CS1_bit           _BIT_ACCESS(T6CLKCON,1)
// T6CLKCON<T6CS2>
extern volatile __bit                   T6CS2               __at(0x20F2);	// @ (0x41E * 8 + 2)
#define                                 T6CS2_bit           _BIT_ACCESS(T6CLKCON,2)
// T6CLKCON<T6CS3>
extern volatile __bit                   T6CS3               __at(0x20F3);	// @ (0x41E * 8 + 3)
#define                                 T6CS3_bit           _BIT_ACCESS(T6CLKCON,3)
// T6HLT<T6MODE0>
extern volatile __bit                   T6MODE0             __at(0x20E8);	// @ (0x41D * 8 + 0)
#define                                 T6MODE0_bit         _BIT_ACCESS(T6HLT,0)
// T6HLT<T6MODE1>
extern volatile __bit                   T6MODE1             __at(0x20E9);	// @ (0x41D * 8 + 1)
#define                                 T6MODE1_bit         _BIT_ACCESS(T6HLT,1)
// T6HLT<T6MODE2>
extern volatile __bit                   T6MODE2             __at(0x20EA);	// @ (0x41D * 8 + 2)
#define                                 T6MODE2_bit         _BIT_ACCESS(T6HLT,2)
// T6HLT<T6MODE3>
extern volatile __bit                   T6MODE3             __at(0x20EB);	// @ (0x41D * 8 + 3)
#define                                 T6MODE3_bit         _BIT_ACCESS(T6HLT,3)
// T6HLT<T6MODE4>
extern volatile __bit                   T6MODE4             __at(0x20EC);	// @ (0x41D * 8 + 4)
#define                                 T6MODE4_bit         _BIT_ACCESS(T6HLT,4)
// T6CON<T6ON>
extern volatile __bit                   T6ON                __at(0x20E7);	// @ (0x41C * 8 + 7)
#define                                 T6ON_bit            _BIT_ACCESS(T6CON,7)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x20E0);	// @ (0x41C * 8 + 0)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,0)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x20E1);	// @ (0x41C * 8 + 1)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x20E2);	// @ (0x41C * 8 + 2)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,2)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x20E3);	// @ (0x41C * 8 + 3)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,3)
// T6HLT<T6PSYNC>
extern volatile __bit                   T6PSYNC             __at(0x20EF);	// @ (0x41D * 8 + 7)
#define                                 T6PSYNC_bit         _BIT_ACCESS(T6HLT,7)
// T6RST<T6RSEL0>
extern volatile __bit                   T6RSEL0             __at(0x20F8);	// @ (0x41F * 8 + 0)
#define                                 T6RSEL0_bit         _BIT_ACCESS(T6RST,0)
// T6RST<T6RSEL1>
extern volatile __bit                   T6RSEL1             __at(0x20F9);	// @ (0x41F * 8 + 1)
#define                                 T6RSEL1_bit         _BIT_ACCESS(T6RST,1)
// T6RST<T6RSEL2>
extern volatile __bit                   T6RSEL2             __at(0x20FA);	// @ (0x41F * 8 + 2)
#define                                 T6RSEL2_bit         _BIT_ACCESS(T6RST,2)
// T6RST<T6RSEL3>
extern volatile __bit                   T6RSEL3             __at(0x20FB);	// @ (0x41F * 8 + 3)
#define                                 T6RSEL3_bit         _BIT_ACCESS(T6RST,3)
// OPTION_REG<TMR0CS>
extern volatile __bit                   TMR0CS              __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 TMR0CS_bit          _BIT_ACCESS(OPTION_REG,5)
// INTCON<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x5D);	// @ (0xB * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(INTCON,5)
// INTCON<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x5A);	// @ (0xB * 8 + 2)
#define                                 TMR0IF_bit          _BIT_ACCESS(INTCON,2)
// OPTION_REG<TMR0SE>
extern volatile __bit                   TMR0SE              __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 TMR0SE_bit          _BIT_ACCESS(OPTION_REG,4)
// T1CON<TMR1CS0>
extern volatile __bit                   TMR1CS0             __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 TMR1CS0_bit         _BIT_ACCESS(T1CON,6)
// T1CON<TMR1CS1>
extern volatile __bit                   TMR1CS1             __at(0xC7);	// @ (0x18 * 8 + 7)
#define                                 TMR1CS1_bit         _BIT_ACCESS(T1CON,7)
// T1GCON<TMR1GE>
extern volatile __bit                   TMR1GE              __at(0xCF);	// @ (0x19 * 8 + 7)
#define                                 TMR1GE_bit          _BIT_ACCESS(T1GCON,7)
// PIE1<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE1,7)
// PIR1<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x8F);	// @ (0x11 * 8 + 7)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR1,7)
// PIE1<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE1,0)
// PIR1<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x88);	// @ (0x11 * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR1,0)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE1<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE1,1)
// PIR1<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x89);	// @ (0x11 * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR1,1)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0xE7);	// @ (0x1C * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// T3CON<TMR3CS0>
extern volatile __bit                   TMR3CS0             __at(0x24AE);	// @ (0x495 * 8 + 6)
#define                                 TMR3CS0_bit         _BIT_ACCESS(T3CON,6)
// T3CON<TMR3CS1>
extern volatile __bit                   TMR3CS1             __at(0x24AF);	// @ (0x495 * 8 + 7)
#define                                 TMR3CS1_bit         _BIT_ACCESS(T3CON,7)
// T3GCON<TMR3GE>
extern volatile __bit                   TMR3GE              __at(0x24B7);	// @ (0x496 * 8 + 7)
#define                                 TMR3GE_bit          _BIT_ACCESS(T3GCON,7)
// PIE4<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x4A3);	// @ (0x94 * 8 + 3)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE4,3)
// PIR4<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0xA3);	// @ (0x14 * 8 + 3)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR4,3)
// PIE4<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x4A2);	// @ (0x94 * 8 + 2)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE4,2)
// PIR4<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0xA2);	// @ (0x14 * 8 + 2)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR4,2)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x24A8);	// @ (0x495 * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// PIE4<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x4A0);	// @ (0x94 * 8 + 0)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0xA0);	// @ (0x14 * 8 + 0)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR4,0)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x20AF);	// @ (0x415 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// T5CON<TMR5CS0>
extern volatile __bit                   TMR5CS0             __at(0x24E6);	// @ (0x49C * 8 + 6)
#define                                 TMR5CS0_bit         _BIT_ACCESS(T5CON,6)
// T5CON<TMR5CS1>
extern volatile __bit                   TMR5CS1             __at(0x24E7);	// @ (0x49C * 8 + 7)
#define                                 TMR5CS1_bit         _BIT_ACCESS(T5CON,7)
// T5GCON<TMR5GE>
extern volatile __bit                   TMR5GE              __at(0x24EF);	// @ (0x49D * 8 + 7)
#define                                 TMR5GE_bit          _BIT_ACCESS(T5GCON,7)
// PIE4<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x4A5);	// @ (0x94 * 8 + 5)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE4,5)
// PIR4<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0xA5);	// @ (0x14 * 8 + 5)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR4,5)
// PIE4<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x4A4);	// @ (0x94 * 8 + 4)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE4,4)
// PIR4<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0xA4);	// @ (0x14 * 8 + 4)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR4,4)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// PIE4<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x4A1);	// @ (0x94 * 8 + 1)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0xA1);	// @ (0x14 * 8 + 1)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR4,1)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x20E7);	// @ (0x41C * 8 + 7)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,7)
// ADCON2<TRIGSEL0>
extern volatile __bit                   TRIGSEL0            __at(0x4FB);	// @ (0x9F * 8 + 3)
#define                                 TRIGSEL0_bit        _BIT_ACCESS(ADCON2,3)
// ADCON2<TRIGSEL1>
extern volatile __bit                   TRIGSEL1            __at(0x4FC);	// @ (0x9F * 8 + 4)
#define                                 TRIGSEL1_bit        _BIT_ACCESS(ADCON2,4)
// ADCON2<TRIGSEL2>
extern volatile __bit                   TRIGSEL2            __at(0x4FD);	// @ (0x9F * 8 + 5)
#define                                 TRIGSEL2_bit        _BIT_ACCESS(ADCON2,5)
// ADCON2<TRIGSEL3>
extern volatile __bit                   TRIGSEL3            __at(0x4FE);	// @ (0x9F * 8 + 6)
#define                                 TRIGSEL3_bit        _BIT_ACCESS(ADCON2,6)
// ADCON2<TRIGSEL4>
extern volatile __bit                   TRIGSEL4            __at(0x4FF);	// @ (0x9F * 8 + 7)
#define                                 TRIGSEL4_bit        _BIT_ACCESS(ADCON2,7)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x461);	// @ (0x8C * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x462);	// @ (0x8C * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x465);	// @ (0x8C * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x471);	// @ (0x8E * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TX1STA<TRMT>
extern volatile __bit                   TRMT                __at(0xCF1);	// @ (0x19E * 8 + 1)
#define                                 TRMT_bit            _BIT_ACCESS(TX1STA,1)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x10F5);	// @ (0x21E * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x10F4);	// @ (0x21E * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x4C0);	// @ (0x98 * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x4C1);	// @ (0x98 * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x4C2);	// @ (0x98 * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x4C3);	// @ (0x98 * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x4C4);	// @ (0x98 * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x4C5);	// @ (0x98 * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// TX1STA<TX9>
extern volatile __bit                   TX9                 __at(0xCF6);	// @ (0x19E * 8 + 6)
#define                                 TX9_bit             _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9D>
extern volatile __bit                   TX9D                __at(0xCF0);	// @ (0x19E * 8 + 0)
#define                                 TX9D_bit            _BIT_ACCESS(TX1STA,0)
// TX1STA<TXEN>
extern volatile __bit                   TXEN                __at(0xCF5);	// @ (0x19E * 8 + 5)
#define                                 TXEN_bit            _BIT_ACCESS(TX1STA,5)
// PIE1<TXIE>
extern volatile __bit                   TXIE                __at(0x48C);	// @ (0x91 * 8 + 4)
#define                                 TXIE_bit            _BIT_ACCESS(PIE1,4)
// PIR1<TXIF>
extern volatile __bit                   TXIF                __at(0x8C);	// @ (0x11 * 8 + 4)
#define                                 TXIF_bit            _BIT_ACCESS(PIR1,4)
// SSP1STAT<UA>
extern volatile __bit                   UA                  __at(0x10A1);	// @ (0x214 * 8 + 1)
#define                                 UA_bit              _BIT_ACCESS(SSP1STAT,1)
// OPA1CON<UG>
extern volatile __bit                   UG                  __at(0x288C);	// @ (0x511 * 8 + 4)
#define                                 UG_bit              _BIT_ACCESS(OPA1CON,4)
// VREGCON<VREGPM>
extern volatile __bit                   VREGPM              __at(0xCB9);	// @ (0x197 * 8 + 1)
#define                                 VREGPM_bit          _BIT_ACCESS(VREGCON,1)
// SSP1CON1<WCOL>
extern volatile __bit                   WCOL                __at(0x10AF);	// @ (0x215 * 8 + 7)
#define                                 WCOL_bit            _BIT_ACCESS(SSP1CON1,7)
// WDTCON<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x4B9);	// @ (0x97 * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON,1)
// WDTCON<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x4BA);	// @ (0x97 * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON,2)
// WDTCON<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x4BB);	// @ (0x97 * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON,3)
// WDTCON<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x4BC);	// @ (0x97 * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON,4)
// WDTCON<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x4BD);	// @ (0x97 * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON,5)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0x1070);	// @ (0x20E * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0x1073);	// @ (0x20E * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// PMCON1<WR>
extern volatile __bit                   WR                  __at(0xCA9);	// @ (0x195 * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(PMCON1,1)
// PMCON1<WREN>
extern volatile __bit                   WREN                __at(0xCAA);	// @ (0x195 * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(PMCON1,2)
// PMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0xCAB);	// @ (0x195 * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(PMCON1,3)
// BAUD1CON<WUE>
extern volatile __bit                   WUE                 __at(0xCF9);	// @ (0x19F * 8 + 1)
#define                                 WUE_bit             _BIT_ACCESS(BAUD1CON,1)
// ZCD1CON<ZCD1EN>
extern volatile __bit                   ZCD1EN              __at(0x10FF);	// @ (0x21F * 8 + 7)
#define                                 ZCD1EN_bit          _BIT_ACCESS(ZCD1CON,7)
// ZCD1CON<ZCD1INTN>
extern volatile __bit                   ZCD1INTN            __at(0x10F8);	// @ (0x21F * 8 + 0)
#define                                 ZCD1INTN_bit        _BIT_ACCESS(ZCD1CON,0)
// ZCD1CON<ZCD1INTP>
extern volatile __bit                   ZCD1INTP            __at(0x10F9);	// @ (0x21F * 8 + 1)
#define                                 ZCD1INTP_bit        _BIT_ACCESS(ZCD1CON,1)
// ZCD1CON<ZCD1OUT>
extern volatile __bit                   ZCD1OUT             __at(0x10FD);	// @ (0x21F * 8 + 5)
#define                                 ZCD1OUT_bit         _BIT_ACCESS(ZCD1CON,5)
// ZCD1CON<ZCD1POL>
extern volatile __bit                   ZCD1POL             __at(0x10FC);	// @ (0x21F * 8 + 4)
#define                                 ZCD1POL_bit         _BIT_ACCESS(ZCD1CON,4)
// PIE3<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x49C);	// @ (0x93 * 8 + 4)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x9C);	// @ (0x13 * 8 + 4)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR3,4)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// STATUS_SHAD<Z_SHAD>
extern volatile __bit                   Z_SHAD              __at(0x7F22);	// @ (0xFE4 * 8 + 2)
#define                                 Z_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,2)
// PCON<nBOR>
extern volatile __bit                   nBOR                __at(0x4B0);	// @ (0x96 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON,0)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON<nPOR>
extern volatile __bit                   nPOR                __at(0x4B1);	// @ (0x96 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON,1)
// PCON<nRI>
extern volatile __bit                   nRI                 __at(0x4B2);	// @ (0x96 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON,2)
// PCON<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x4B3);	// @ (0x96 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON,3)
// PCON<nRWDT>
extern volatile __bit                   nRWDT               __at(0x4B4);	// @ (0x96 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON,4)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0xC2);	// @ (0x18 * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// T3CON<nT3SYNC>
extern volatile __bit                   nT3SYNC             __at(0x24AA);	// @ (0x495 * 8 + 2)
#define                                 nT3SYNC_bit         _BIT_ACCESS(T3CON,2)
// T5CON<nT5SYNC>
extern volatile __bit                   nT5SYNC             __at(0x24E2);	// @ (0x49C * 8 + 2)
#define                                 nT5SYNC_bit         _BIT_ACCESS(T5CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// OPTION_REG<nWPUEN>
extern volatile __bit                   nWPUEN              __at(0x4AF);	// @ (0x95 * 8 + 7)
#define                                 nWPUEN_bit          _BIT_ACCESS(OPTION_REG,7)

#endif // _PIC16F1764_H_
