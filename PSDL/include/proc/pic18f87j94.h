// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC18F87J94_H_
#define _PIC18F87J94_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC18F87J94
 */
#ifndef _XC_H_
#warning Header file pic18f87j94.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Register Definitions
 */

// Register: UEP0
#define UEP0 UEP0
extern volatile unsigned char           UEP0                __at(0xDFF);
#ifndef _LIB_BUILD
asm("UEP0 equ 0DFFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP0STALL               :1;
        unsigned EP0INEN                :1;
        unsigned EP0OUTEN               :1;
        unsigned EP0CONDIS              :1;
        unsigned EP0HSHK                :1;
    };
    struct {
        unsigned EPSTALL0               :1;
        unsigned EPINEN0                :1;
        unsigned EPOUTEN0               :1;
        unsigned EPCONDIS0              :1;
        unsigned EPHSHK0                :1;
    };
} UEP0bits_t;
extern volatile UEP0bits_t UEP0bits __at(0xDFF);
// bitfield macros
#define _UEP0_EPSTALL_POSN                                  0x0
#define _UEP0_EPSTALL_POSITION                              0x0
#define _UEP0_EPSTALL_SIZE                                  0x1
#define _UEP0_EPSTALL_LENGTH                                0x1
#define _UEP0_EPSTALL_MASK                                  0x1
#define _UEP0_EPINEN_POSN                                   0x1
#define _UEP0_EPINEN_POSITION                               0x1
#define _UEP0_EPINEN_SIZE                                   0x1
#define _UEP0_EPINEN_LENGTH                                 0x1
#define _UEP0_EPINEN_MASK                                   0x2
#define _UEP0_EPOUTEN_POSN                                  0x2
#define _UEP0_EPOUTEN_POSITION                              0x2
#define _UEP0_EPOUTEN_SIZE                                  0x1
#define _UEP0_EPOUTEN_LENGTH                                0x1
#define _UEP0_EPOUTEN_MASK                                  0x4
#define _UEP0_EPCONDIS_POSN                                 0x3
#define _UEP0_EPCONDIS_POSITION                             0x3
#define _UEP0_EPCONDIS_SIZE                                 0x1
#define _UEP0_EPCONDIS_LENGTH                               0x1
#define _UEP0_EPCONDIS_MASK                                 0x8
#define _UEP0_EPHSHK_POSN                                   0x4
#define _UEP0_EPHSHK_POSITION                               0x4
#define _UEP0_EPHSHK_SIZE                                   0x1
#define _UEP0_EPHSHK_LENGTH                                 0x1
#define _UEP0_EPHSHK_MASK                                   0x10
#define _UEP0_EP0STALL_POSN                                 0x0
#define _UEP0_EP0STALL_POSITION                             0x0
#define _UEP0_EP0STALL_SIZE                                 0x1
#define _UEP0_EP0STALL_LENGTH                               0x1
#define _UEP0_EP0STALL_MASK                                 0x1
#define _UEP0_EP0INEN_POSN                                  0x1
#define _UEP0_EP0INEN_POSITION                              0x1
#define _UEP0_EP0INEN_SIZE                                  0x1
#define _UEP0_EP0INEN_LENGTH                                0x1
#define _UEP0_EP0INEN_MASK                                  0x2
#define _UEP0_EP0OUTEN_POSN                                 0x2
#define _UEP0_EP0OUTEN_POSITION                             0x2
#define _UEP0_EP0OUTEN_SIZE                                 0x1
#define _UEP0_EP0OUTEN_LENGTH                               0x1
#define _UEP0_EP0OUTEN_MASK                                 0x4
#define _UEP0_EP0CONDIS_POSN                                0x3
#define _UEP0_EP0CONDIS_POSITION                            0x3
#define _UEP0_EP0CONDIS_SIZE                                0x1
#define _UEP0_EP0CONDIS_LENGTH                              0x1
#define _UEP0_EP0CONDIS_MASK                                0x8
#define _UEP0_EP0HSHK_POSN                                  0x4
#define _UEP0_EP0HSHK_POSITION                              0x4
#define _UEP0_EP0HSHK_SIZE                                  0x1
#define _UEP0_EP0HSHK_LENGTH                                0x1
#define _UEP0_EP0HSHK_MASK                                  0x10
#define _UEP0_EPSTALL0_POSN                                 0x0
#define _UEP0_EPSTALL0_POSITION                             0x0
#define _UEP0_EPSTALL0_SIZE                                 0x1
#define _UEP0_EPSTALL0_LENGTH                               0x1
#define _UEP0_EPSTALL0_MASK                                 0x1
#define _UEP0_EPINEN0_POSN                                  0x1
#define _UEP0_EPINEN0_POSITION                              0x1
#define _UEP0_EPINEN0_SIZE                                  0x1
#define _UEP0_EPINEN0_LENGTH                                0x1
#define _UEP0_EPINEN0_MASK                                  0x2
#define _UEP0_EPOUTEN0_POSN                                 0x2
#define _UEP0_EPOUTEN0_POSITION                             0x2
#define _UEP0_EPOUTEN0_SIZE                                 0x1
#define _UEP0_EPOUTEN0_LENGTH                               0x1
#define _UEP0_EPOUTEN0_MASK                                 0x4
#define _UEP0_EPCONDIS0_POSN                                0x3
#define _UEP0_EPCONDIS0_POSITION                            0x3
#define _UEP0_EPCONDIS0_SIZE                                0x1
#define _UEP0_EPCONDIS0_LENGTH                              0x1
#define _UEP0_EPCONDIS0_MASK                                0x8
#define _UEP0_EPHSHK0_POSN                                  0x4
#define _UEP0_EPHSHK0_POSITION                              0x4
#define _UEP0_EPHSHK0_SIZE                                  0x1
#define _UEP0_EPHSHK0_LENGTH                                0x1
#define _UEP0_EPHSHK0_MASK                                  0x10

// Register: UEP1
#define UEP1 UEP1
extern volatile unsigned char           UEP1                __at(0xE00);
#ifndef _LIB_BUILD
asm("UEP1 equ 0E00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP1STALL               :1;
        unsigned EP1INEN                :1;
        unsigned EP1OUTEN               :1;
        unsigned EP1CONDIS              :1;
        unsigned EP1HSHK                :1;
    };
    struct {
        unsigned EPSTALL1               :1;
        unsigned EPINEN1                :1;
        unsigned EPOUTEN1               :1;
        unsigned EPCONDIS1              :1;
        unsigned EPHSHK1                :1;
    };
} UEP1bits_t;
extern volatile UEP1bits_t UEP1bits __at(0xE00);
// bitfield macros
#define _UEP1_EPSTALL_POSN                                  0x0
#define _UEP1_EPSTALL_POSITION                              0x0
#define _UEP1_EPSTALL_SIZE                                  0x1
#define _UEP1_EPSTALL_LENGTH                                0x1
#define _UEP1_EPSTALL_MASK                                  0x1
#define _UEP1_EPINEN_POSN                                   0x1
#define _UEP1_EPINEN_POSITION                               0x1
#define _UEP1_EPINEN_SIZE                                   0x1
#define _UEP1_EPINEN_LENGTH                                 0x1
#define _UEP1_EPINEN_MASK                                   0x2
#define _UEP1_EPOUTEN_POSN                                  0x2
#define _UEP1_EPOUTEN_POSITION                              0x2
#define _UEP1_EPOUTEN_SIZE                                  0x1
#define _UEP1_EPOUTEN_LENGTH                                0x1
#define _UEP1_EPOUTEN_MASK                                  0x4
#define _UEP1_EPCONDIS_POSN                                 0x3
#define _UEP1_EPCONDIS_POSITION                             0x3
#define _UEP1_EPCONDIS_SIZE                                 0x1
#define _UEP1_EPCONDIS_LENGTH                               0x1
#define _UEP1_EPCONDIS_MASK                                 0x8
#define _UEP1_EPHSHK_POSN                                   0x4
#define _UEP1_EPHSHK_POSITION                               0x4
#define _UEP1_EPHSHK_SIZE                                   0x1
#define _UEP1_EPHSHK_LENGTH                                 0x1
#define _UEP1_EPHSHK_MASK                                   0x10
#define _UEP1_EP1STALL_POSN                                 0x0
#define _UEP1_EP1STALL_POSITION                             0x0
#define _UEP1_EP1STALL_SIZE                                 0x1
#define _UEP1_EP1STALL_LENGTH                               0x1
#define _UEP1_EP1STALL_MASK                                 0x1
#define _UEP1_EP1INEN_POSN                                  0x1
#define _UEP1_EP1INEN_POSITION                              0x1
#define _UEP1_EP1INEN_SIZE                                  0x1
#define _UEP1_EP1INEN_LENGTH                                0x1
#define _UEP1_EP1INEN_MASK                                  0x2
#define _UEP1_EP1OUTEN_POSN                                 0x2
#define _UEP1_EP1OUTEN_POSITION                             0x2
#define _UEP1_EP1OUTEN_SIZE                                 0x1
#define _UEP1_EP1OUTEN_LENGTH                               0x1
#define _UEP1_EP1OUTEN_MASK                                 0x4
#define _UEP1_EP1CONDIS_POSN                                0x3
#define _UEP1_EP1CONDIS_POSITION                            0x3
#define _UEP1_EP1CONDIS_SIZE                                0x1
#define _UEP1_EP1CONDIS_LENGTH                              0x1
#define _UEP1_EP1CONDIS_MASK                                0x8
#define _UEP1_EP1HSHK_POSN                                  0x4
#define _UEP1_EP1HSHK_POSITION                              0x4
#define _UEP1_EP1HSHK_SIZE                                  0x1
#define _UEP1_EP1HSHK_LENGTH                                0x1
#define _UEP1_EP1HSHK_MASK                                  0x10
#define _UEP1_EPSTALL1_POSN                                 0x0
#define _UEP1_EPSTALL1_POSITION                             0x0
#define _UEP1_EPSTALL1_SIZE                                 0x1
#define _UEP1_EPSTALL1_LENGTH                               0x1
#define _UEP1_EPSTALL1_MASK                                 0x1
#define _UEP1_EPINEN1_POSN                                  0x1
#define _UEP1_EPINEN1_POSITION                              0x1
#define _UEP1_EPINEN1_SIZE                                  0x1
#define _UEP1_EPINEN1_LENGTH                                0x1
#define _UEP1_EPINEN1_MASK                                  0x2
#define _UEP1_EPOUTEN1_POSN                                 0x2
#define _UEP1_EPOUTEN1_POSITION                             0x2
#define _UEP1_EPOUTEN1_SIZE                                 0x1
#define _UEP1_EPOUTEN1_LENGTH                               0x1
#define _UEP1_EPOUTEN1_MASK                                 0x4
#define _UEP1_EPCONDIS1_POSN                                0x3
#define _UEP1_EPCONDIS1_POSITION                            0x3
#define _UEP1_EPCONDIS1_SIZE                                0x1
#define _UEP1_EPCONDIS1_LENGTH                              0x1
#define _UEP1_EPCONDIS1_MASK                                0x8
#define _UEP1_EPHSHK1_POSN                                  0x4
#define _UEP1_EPHSHK1_POSITION                              0x4
#define _UEP1_EPHSHK1_SIZE                                  0x1
#define _UEP1_EPHSHK1_LENGTH                                0x1
#define _UEP1_EPHSHK1_MASK                                  0x10

// Register: UEP2
#define UEP2 UEP2
extern volatile unsigned char           UEP2                __at(0xE01);
#ifndef _LIB_BUILD
asm("UEP2 equ 0E01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP2STALL               :1;
        unsigned EP2INEN                :1;
        unsigned EP2OUTEN               :1;
        unsigned EP2CONDIS              :1;
        unsigned EP2HSHK                :1;
    };
    struct {
        unsigned EPSTALL2               :1;
        unsigned EPINEN2                :1;
        unsigned EPOUTEN2               :1;
        unsigned EPCONDIS2              :1;
        unsigned EPHSHK2                :1;
    };
} UEP2bits_t;
extern volatile UEP2bits_t UEP2bits __at(0xE01);
// bitfield macros
#define _UEP2_EPSTALL_POSN                                  0x0
#define _UEP2_EPSTALL_POSITION                              0x0
#define _UEP2_EPSTALL_SIZE                                  0x1
#define _UEP2_EPSTALL_LENGTH                                0x1
#define _UEP2_EPSTALL_MASK                                  0x1
#define _UEP2_EPINEN_POSN                                   0x1
#define _UEP2_EPINEN_POSITION                               0x1
#define _UEP2_EPINEN_SIZE                                   0x1
#define _UEP2_EPINEN_LENGTH                                 0x1
#define _UEP2_EPINEN_MASK                                   0x2
#define _UEP2_EPOUTEN_POSN                                  0x2
#define _UEP2_EPOUTEN_POSITION                              0x2
#define _UEP2_EPOUTEN_SIZE                                  0x1
#define _UEP2_EPOUTEN_LENGTH                                0x1
#define _UEP2_EPOUTEN_MASK                                  0x4
#define _UEP2_EPCONDIS_POSN                                 0x3
#define _UEP2_EPCONDIS_POSITION                             0x3
#define _UEP2_EPCONDIS_SIZE                                 0x1
#define _UEP2_EPCONDIS_LENGTH                               0x1
#define _UEP2_EPCONDIS_MASK                                 0x8
#define _UEP2_EPHSHK_POSN                                   0x4
#define _UEP2_EPHSHK_POSITION                               0x4
#define _UEP2_EPHSHK_SIZE                                   0x1
#define _UEP2_EPHSHK_LENGTH                                 0x1
#define _UEP2_EPHSHK_MASK                                   0x10
#define _UEP2_EP2STALL_POSN                                 0x0
#define _UEP2_EP2STALL_POSITION                             0x0
#define _UEP2_EP2STALL_SIZE                                 0x1
#define _UEP2_EP2STALL_LENGTH                               0x1
#define _UEP2_EP2STALL_MASK                                 0x1
#define _UEP2_EP2INEN_POSN                                  0x1
#define _UEP2_EP2INEN_POSITION                              0x1
#define _UEP2_EP2INEN_SIZE                                  0x1
#define _UEP2_EP2INEN_LENGTH                                0x1
#define _UEP2_EP2INEN_MASK                                  0x2
#define _UEP2_EP2OUTEN_POSN                                 0x2
#define _UEP2_EP2OUTEN_POSITION                             0x2
#define _UEP2_EP2OUTEN_SIZE                                 0x1
#define _UEP2_EP2OUTEN_LENGTH                               0x1
#define _UEP2_EP2OUTEN_MASK                                 0x4
#define _UEP2_EP2CONDIS_POSN                                0x3
#define _UEP2_EP2CONDIS_POSITION                            0x3
#define _UEP2_EP2CONDIS_SIZE                                0x1
#define _UEP2_EP2CONDIS_LENGTH                              0x1
#define _UEP2_EP2CONDIS_MASK                                0x8
#define _UEP2_EP2HSHK_POSN                                  0x4
#define _UEP2_EP2HSHK_POSITION                              0x4
#define _UEP2_EP2HSHK_SIZE                                  0x1
#define _UEP2_EP2HSHK_LENGTH                                0x1
#define _UEP2_EP2HSHK_MASK                                  0x10
#define _UEP2_EPSTALL2_POSN                                 0x0
#define _UEP2_EPSTALL2_POSITION                             0x0
#define _UEP2_EPSTALL2_SIZE                                 0x1
#define _UEP2_EPSTALL2_LENGTH                               0x1
#define _UEP2_EPSTALL2_MASK                                 0x1
#define _UEP2_EPINEN2_POSN                                  0x1
#define _UEP2_EPINEN2_POSITION                              0x1
#define _UEP2_EPINEN2_SIZE                                  0x1
#define _UEP2_EPINEN2_LENGTH                                0x1
#define _UEP2_EPINEN2_MASK                                  0x2
#define _UEP2_EPOUTEN2_POSN                                 0x2
#define _UEP2_EPOUTEN2_POSITION                             0x2
#define _UEP2_EPOUTEN2_SIZE                                 0x1
#define _UEP2_EPOUTEN2_LENGTH                               0x1
#define _UEP2_EPOUTEN2_MASK                                 0x4
#define _UEP2_EPCONDIS2_POSN                                0x3
#define _UEP2_EPCONDIS2_POSITION                            0x3
#define _UEP2_EPCONDIS2_SIZE                                0x1
#define _UEP2_EPCONDIS2_LENGTH                              0x1
#define _UEP2_EPCONDIS2_MASK                                0x8
#define _UEP2_EPHSHK2_POSN                                  0x4
#define _UEP2_EPHSHK2_POSITION                              0x4
#define _UEP2_EPHSHK2_SIZE                                  0x1
#define _UEP2_EPHSHK2_LENGTH                                0x1
#define _UEP2_EPHSHK2_MASK                                  0x10

// Register: UEP3
#define UEP3 UEP3
extern volatile unsigned char           UEP3                __at(0xE02);
#ifndef _LIB_BUILD
asm("UEP3 equ 0E02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP3STALL               :1;
        unsigned EP3INEN                :1;
        unsigned EP3OUTEN               :1;
        unsigned EP3CONDIS              :1;
        unsigned EP3HSHK                :1;
    };
    struct {
        unsigned EPSTALL3               :1;
        unsigned EPINEN3                :1;
        unsigned EPOUTEN3               :1;
        unsigned EPCONDIS3              :1;
        unsigned EPHSHK3                :1;
    };
} UEP3bits_t;
extern volatile UEP3bits_t UEP3bits __at(0xE02);
// bitfield macros
#define _UEP3_EPSTALL_POSN                                  0x0
#define _UEP3_EPSTALL_POSITION                              0x0
#define _UEP3_EPSTALL_SIZE                                  0x1
#define _UEP3_EPSTALL_LENGTH                                0x1
#define _UEP3_EPSTALL_MASK                                  0x1
#define _UEP3_EPINEN_POSN                                   0x1
#define _UEP3_EPINEN_POSITION                               0x1
#define _UEP3_EPINEN_SIZE                                   0x1
#define _UEP3_EPINEN_LENGTH                                 0x1
#define _UEP3_EPINEN_MASK                                   0x2
#define _UEP3_EPOUTEN_POSN                                  0x2
#define _UEP3_EPOUTEN_POSITION                              0x2
#define _UEP3_EPOUTEN_SIZE                                  0x1
#define _UEP3_EPOUTEN_LENGTH                                0x1
#define _UEP3_EPOUTEN_MASK                                  0x4
#define _UEP3_EPCONDIS_POSN                                 0x3
#define _UEP3_EPCONDIS_POSITION                             0x3
#define _UEP3_EPCONDIS_SIZE                                 0x1
#define _UEP3_EPCONDIS_LENGTH                               0x1
#define _UEP3_EPCONDIS_MASK                                 0x8
#define _UEP3_EPHSHK_POSN                                   0x4
#define _UEP3_EPHSHK_POSITION                               0x4
#define _UEP3_EPHSHK_SIZE                                   0x1
#define _UEP3_EPHSHK_LENGTH                                 0x1
#define _UEP3_EPHSHK_MASK                                   0x10
#define _UEP3_EP3STALL_POSN                                 0x0
#define _UEP3_EP3STALL_POSITION                             0x0
#define _UEP3_EP3STALL_SIZE                                 0x1
#define _UEP3_EP3STALL_LENGTH                               0x1
#define _UEP3_EP3STALL_MASK                                 0x1
#define _UEP3_EP3INEN_POSN                                  0x1
#define _UEP3_EP3INEN_POSITION                              0x1
#define _UEP3_EP3INEN_SIZE                                  0x1
#define _UEP3_EP3INEN_LENGTH                                0x1
#define _UEP3_EP3INEN_MASK                                  0x2
#define _UEP3_EP3OUTEN_POSN                                 0x2
#define _UEP3_EP3OUTEN_POSITION                             0x2
#define _UEP3_EP3OUTEN_SIZE                                 0x1
#define _UEP3_EP3OUTEN_LENGTH                               0x1
#define _UEP3_EP3OUTEN_MASK                                 0x4
#define _UEP3_EP3CONDIS_POSN                                0x3
#define _UEP3_EP3CONDIS_POSITION                            0x3
#define _UEP3_EP3CONDIS_SIZE                                0x1
#define _UEP3_EP3CONDIS_LENGTH                              0x1
#define _UEP3_EP3CONDIS_MASK                                0x8
#define _UEP3_EP3HSHK_POSN                                  0x4
#define _UEP3_EP3HSHK_POSITION                              0x4
#define _UEP3_EP3HSHK_SIZE                                  0x1
#define _UEP3_EP3HSHK_LENGTH                                0x1
#define _UEP3_EP3HSHK_MASK                                  0x10
#define _UEP3_EPSTALL3_POSN                                 0x0
#define _UEP3_EPSTALL3_POSITION                             0x0
#define _UEP3_EPSTALL3_SIZE                                 0x1
#define _UEP3_EPSTALL3_LENGTH                               0x1
#define _UEP3_EPSTALL3_MASK                                 0x1
#define _UEP3_EPINEN3_POSN                                  0x1
#define _UEP3_EPINEN3_POSITION                              0x1
#define _UEP3_EPINEN3_SIZE                                  0x1
#define _UEP3_EPINEN3_LENGTH                                0x1
#define _UEP3_EPINEN3_MASK                                  0x2
#define _UEP3_EPOUTEN3_POSN                                 0x2
#define _UEP3_EPOUTEN3_POSITION                             0x2
#define _UEP3_EPOUTEN3_SIZE                                 0x1
#define _UEP3_EPOUTEN3_LENGTH                               0x1
#define _UEP3_EPOUTEN3_MASK                                 0x4
#define _UEP3_EPCONDIS3_POSN                                0x3
#define _UEP3_EPCONDIS3_POSITION                            0x3
#define _UEP3_EPCONDIS3_SIZE                                0x1
#define _UEP3_EPCONDIS3_LENGTH                              0x1
#define _UEP3_EPCONDIS3_MASK                                0x8
#define _UEP3_EPHSHK3_POSN                                  0x4
#define _UEP3_EPHSHK3_POSITION                              0x4
#define _UEP3_EPHSHK3_SIZE                                  0x1
#define _UEP3_EPHSHK3_LENGTH                                0x1
#define _UEP3_EPHSHK3_MASK                                  0x10

// Register: UEP4
#define UEP4 UEP4
extern volatile unsigned char           UEP4                __at(0xE03);
#ifndef _LIB_BUILD
asm("UEP4 equ 0E03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP4STALL               :1;
        unsigned EP4INEN                :1;
        unsigned EP4OUTEN               :1;
        unsigned EP4CONDIS              :1;
        unsigned EP4HSHK                :1;
    };
    struct {
        unsigned EPSTALL4               :1;
        unsigned EPINEN4                :1;
        unsigned EPOUTEN4               :1;
        unsigned EPCONDIS4              :1;
        unsigned EPHSHK4                :1;
    };
} UEP4bits_t;
extern volatile UEP4bits_t UEP4bits __at(0xE03);
// bitfield macros
#define _UEP4_EPSTALL_POSN                                  0x0
#define _UEP4_EPSTALL_POSITION                              0x0
#define _UEP4_EPSTALL_SIZE                                  0x1
#define _UEP4_EPSTALL_LENGTH                                0x1
#define _UEP4_EPSTALL_MASK                                  0x1
#define _UEP4_EPINEN_POSN                                   0x1
#define _UEP4_EPINEN_POSITION                               0x1
#define _UEP4_EPINEN_SIZE                                   0x1
#define _UEP4_EPINEN_LENGTH                                 0x1
#define _UEP4_EPINEN_MASK                                   0x2
#define _UEP4_EPOUTEN_POSN                                  0x2
#define _UEP4_EPOUTEN_POSITION                              0x2
#define _UEP4_EPOUTEN_SIZE                                  0x1
#define _UEP4_EPOUTEN_LENGTH                                0x1
#define _UEP4_EPOUTEN_MASK                                  0x4
#define _UEP4_EPCONDIS_POSN                                 0x3
#define _UEP4_EPCONDIS_POSITION                             0x3
#define _UEP4_EPCONDIS_SIZE                                 0x1
#define _UEP4_EPCONDIS_LENGTH                               0x1
#define _UEP4_EPCONDIS_MASK                                 0x8
#define _UEP4_EPHSHK_POSN                                   0x4
#define _UEP4_EPHSHK_POSITION                               0x4
#define _UEP4_EPHSHK_SIZE                                   0x1
#define _UEP4_EPHSHK_LENGTH                                 0x1
#define _UEP4_EPHSHK_MASK                                   0x10
#define _UEP4_EP4STALL_POSN                                 0x0
#define _UEP4_EP4STALL_POSITION                             0x0
#define _UEP4_EP4STALL_SIZE                                 0x1
#define _UEP4_EP4STALL_LENGTH                               0x1
#define _UEP4_EP4STALL_MASK                                 0x1
#define _UEP4_EP4INEN_POSN                                  0x1
#define _UEP4_EP4INEN_POSITION                              0x1
#define _UEP4_EP4INEN_SIZE                                  0x1
#define _UEP4_EP4INEN_LENGTH                                0x1
#define _UEP4_EP4INEN_MASK                                  0x2
#define _UEP4_EP4OUTEN_POSN                                 0x2
#define _UEP4_EP4OUTEN_POSITION                             0x2
#define _UEP4_EP4OUTEN_SIZE                                 0x1
#define _UEP4_EP4OUTEN_LENGTH                               0x1
#define _UEP4_EP4OUTEN_MASK                                 0x4
#define _UEP4_EP4CONDIS_POSN                                0x3
#define _UEP4_EP4CONDIS_POSITION                            0x3
#define _UEP4_EP4CONDIS_SIZE                                0x1
#define _UEP4_EP4CONDIS_LENGTH                              0x1
#define _UEP4_EP4CONDIS_MASK                                0x8
#define _UEP4_EP4HSHK_POSN                                  0x4
#define _UEP4_EP4HSHK_POSITION                              0x4
#define _UEP4_EP4HSHK_SIZE                                  0x1
#define _UEP4_EP4HSHK_LENGTH                                0x1
#define _UEP4_EP4HSHK_MASK                                  0x10
#define _UEP4_EPSTALL4_POSN                                 0x0
#define _UEP4_EPSTALL4_POSITION                             0x0
#define _UEP4_EPSTALL4_SIZE                                 0x1
#define _UEP4_EPSTALL4_LENGTH                               0x1
#define _UEP4_EPSTALL4_MASK                                 0x1
#define _UEP4_EPINEN4_POSN                                  0x1
#define _UEP4_EPINEN4_POSITION                              0x1
#define _UEP4_EPINEN4_SIZE                                  0x1
#define _UEP4_EPINEN4_LENGTH                                0x1
#define _UEP4_EPINEN4_MASK                                  0x2
#define _UEP4_EPOUTEN4_POSN                                 0x2
#define _UEP4_EPOUTEN4_POSITION                             0x2
#define _UEP4_EPOUTEN4_SIZE                                 0x1
#define _UEP4_EPOUTEN4_LENGTH                               0x1
#define _UEP4_EPOUTEN4_MASK                                 0x4
#define _UEP4_EPCONDIS4_POSN                                0x3
#define _UEP4_EPCONDIS4_POSITION                            0x3
#define _UEP4_EPCONDIS4_SIZE                                0x1
#define _UEP4_EPCONDIS4_LENGTH                              0x1
#define _UEP4_EPCONDIS4_MASK                                0x8
#define _UEP4_EPHSHK4_POSN                                  0x4
#define _UEP4_EPHSHK4_POSITION                              0x4
#define _UEP4_EPHSHK4_SIZE                                  0x1
#define _UEP4_EPHSHK4_LENGTH                                0x1
#define _UEP4_EPHSHK4_MASK                                  0x10

// Register: UEP5
#define UEP5 UEP5
extern volatile unsigned char           UEP5                __at(0xE04);
#ifndef _LIB_BUILD
asm("UEP5 equ 0E04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP5STALL               :1;
        unsigned EP5INEN                :1;
        unsigned EP5OUTEN               :1;
        unsigned EP5CONDIS              :1;
        unsigned EP5HSHK                :1;
    };
    struct {
        unsigned EPSTALL5               :1;
        unsigned EPINEN5                :1;
        unsigned EPOUTEN5               :1;
        unsigned EPCONDIS5              :1;
        unsigned EPHSHK5                :1;
    };
} UEP5bits_t;
extern volatile UEP5bits_t UEP5bits __at(0xE04);
// bitfield macros
#define _UEP5_EPSTALL_POSN                                  0x0
#define _UEP5_EPSTALL_POSITION                              0x0
#define _UEP5_EPSTALL_SIZE                                  0x1
#define _UEP5_EPSTALL_LENGTH                                0x1
#define _UEP5_EPSTALL_MASK                                  0x1
#define _UEP5_EPINEN_POSN                                   0x1
#define _UEP5_EPINEN_POSITION                               0x1
#define _UEP5_EPINEN_SIZE                                   0x1
#define _UEP5_EPINEN_LENGTH                                 0x1
#define _UEP5_EPINEN_MASK                                   0x2
#define _UEP5_EPOUTEN_POSN                                  0x2
#define _UEP5_EPOUTEN_POSITION                              0x2
#define _UEP5_EPOUTEN_SIZE                                  0x1
#define _UEP5_EPOUTEN_LENGTH                                0x1
#define _UEP5_EPOUTEN_MASK                                  0x4
#define _UEP5_EPCONDIS_POSN                                 0x3
#define _UEP5_EPCONDIS_POSITION                             0x3
#define _UEP5_EPCONDIS_SIZE                                 0x1
#define _UEP5_EPCONDIS_LENGTH                               0x1
#define _UEP5_EPCONDIS_MASK                                 0x8
#define _UEP5_EPHSHK_POSN                                   0x4
#define _UEP5_EPHSHK_POSITION                               0x4
#define _UEP5_EPHSHK_SIZE                                   0x1
#define _UEP5_EPHSHK_LENGTH                                 0x1
#define _UEP5_EPHSHK_MASK                                   0x10
#define _UEP5_EP5STALL_POSN                                 0x0
#define _UEP5_EP5STALL_POSITION                             0x0
#define _UEP5_EP5STALL_SIZE                                 0x1
#define _UEP5_EP5STALL_LENGTH                               0x1
#define _UEP5_EP5STALL_MASK                                 0x1
#define _UEP5_EP5INEN_POSN                                  0x1
#define _UEP5_EP5INEN_POSITION                              0x1
#define _UEP5_EP5INEN_SIZE                                  0x1
#define _UEP5_EP5INEN_LENGTH                                0x1
#define _UEP5_EP5INEN_MASK                                  0x2
#define _UEP5_EP5OUTEN_POSN                                 0x2
#define _UEP5_EP5OUTEN_POSITION                             0x2
#define _UEP5_EP5OUTEN_SIZE                                 0x1
#define _UEP5_EP5OUTEN_LENGTH                               0x1
#define _UEP5_EP5OUTEN_MASK                                 0x4
#define _UEP5_EP5CONDIS_POSN                                0x3
#define _UEP5_EP5CONDIS_POSITION                            0x3
#define _UEP5_EP5CONDIS_SIZE                                0x1
#define _UEP5_EP5CONDIS_LENGTH                              0x1
#define _UEP5_EP5CONDIS_MASK                                0x8
#define _UEP5_EP5HSHK_POSN                                  0x4
#define _UEP5_EP5HSHK_POSITION                              0x4
#define _UEP5_EP5HSHK_SIZE                                  0x1
#define _UEP5_EP5HSHK_LENGTH                                0x1
#define _UEP5_EP5HSHK_MASK                                  0x10
#define _UEP5_EPSTALL5_POSN                                 0x0
#define _UEP5_EPSTALL5_POSITION                             0x0
#define _UEP5_EPSTALL5_SIZE                                 0x1
#define _UEP5_EPSTALL5_LENGTH                               0x1
#define _UEP5_EPSTALL5_MASK                                 0x1
#define _UEP5_EPINEN5_POSN                                  0x1
#define _UEP5_EPINEN5_POSITION                              0x1
#define _UEP5_EPINEN5_SIZE                                  0x1
#define _UEP5_EPINEN5_LENGTH                                0x1
#define _UEP5_EPINEN5_MASK                                  0x2
#define _UEP5_EPOUTEN5_POSN                                 0x2
#define _UEP5_EPOUTEN5_POSITION                             0x2
#define _UEP5_EPOUTEN5_SIZE                                 0x1
#define _UEP5_EPOUTEN5_LENGTH                               0x1
#define _UEP5_EPOUTEN5_MASK                                 0x4
#define _UEP5_EPCONDIS5_POSN                                0x3
#define _UEP5_EPCONDIS5_POSITION                            0x3
#define _UEP5_EPCONDIS5_SIZE                                0x1
#define _UEP5_EPCONDIS5_LENGTH                              0x1
#define _UEP5_EPCONDIS5_MASK                                0x8
#define _UEP5_EPHSHK5_POSN                                  0x4
#define _UEP5_EPHSHK5_POSITION                              0x4
#define _UEP5_EPHSHK5_SIZE                                  0x1
#define _UEP5_EPHSHK5_LENGTH                                0x1
#define _UEP5_EPHSHK5_MASK                                  0x10

// Register: UEP6
#define UEP6 UEP6
extern volatile unsigned char           UEP6                __at(0xE05);
#ifndef _LIB_BUILD
asm("UEP6 equ 0E05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP6STALL               :1;
        unsigned EP6INEN                :1;
        unsigned EP6OUTEN               :1;
        unsigned EP6CONDIS              :1;
        unsigned EP6HSHK                :1;
    };
    struct {
        unsigned EPSTALL6               :1;
        unsigned EPINEN6                :1;
        unsigned EPOUTEN6               :1;
        unsigned EPCONDIS6              :1;
        unsigned EPHSHK6                :1;
    };
} UEP6bits_t;
extern volatile UEP6bits_t UEP6bits __at(0xE05);
// bitfield macros
#define _UEP6_EPSTALL_POSN                                  0x0
#define _UEP6_EPSTALL_POSITION                              0x0
#define _UEP6_EPSTALL_SIZE                                  0x1
#define _UEP6_EPSTALL_LENGTH                                0x1
#define _UEP6_EPSTALL_MASK                                  0x1
#define _UEP6_EPINEN_POSN                                   0x1
#define _UEP6_EPINEN_POSITION                               0x1
#define _UEP6_EPINEN_SIZE                                   0x1
#define _UEP6_EPINEN_LENGTH                                 0x1
#define _UEP6_EPINEN_MASK                                   0x2
#define _UEP6_EPOUTEN_POSN                                  0x2
#define _UEP6_EPOUTEN_POSITION                              0x2
#define _UEP6_EPOUTEN_SIZE                                  0x1
#define _UEP6_EPOUTEN_LENGTH                                0x1
#define _UEP6_EPOUTEN_MASK                                  0x4
#define _UEP6_EPCONDIS_POSN                                 0x3
#define _UEP6_EPCONDIS_POSITION                             0x3
#define _UEP6_EPCONDIS_SIZE                                 0x1
#define _UEP6_EPCONDIS_LENGTH                               0x1
#define _UEP6_EPCONDIS_MASK                                 0x8
#define _UEP6_EPHSHK_POSN                                   0x4
#define _UEP6_EPHSHK_POSITION                               0x4
#define _UEP6_EPHSHK_SIZE                                   0x1
#define _UEP6_EPHSHK_LENGTH                                 0x1
#define _UEP6_EPHSHK_MASK                                   0x10
#define _UEP6_EP6STALL_POSN                                 0x0
#define _UEP6_EP6STALL_POSITION                             0x0
#define _UEP6_EP6STALL_SIZE                                 0x1
#define _UEP6_EP6STALL_LENGTH                               0x1
#define _UEP6_EP6STALL_MASK                                 0x1
#define _UEP6_EP6INEN_POSN                                  0x1
#define _UEP6_EP6INEN_POSITION                              0x1
#define _UEP6_EP6INEN_SIZE                                  0x1
#define _UEP6_EP6INEN_LENGTH                                0x1
#define _UEP6_EP6INEN_MASK                                  0x2
#define _UEP6_EP6OUTEN_POSN                                 0x2
#define _UEP6_EP6OUTEN_POSITION                             0x2
#define _UEP6_EP6OUTEN_SIZE                                 0x1
#define _UEP6_EP6OUTEN_LENGTH                               0x1
#define _UEP6_EP6OUTEN_MASK                                 0x4
#define _UEP6_EP6CONDIS_POSN                                0x3
#define _UEP6_EP6CONDIS_POSITION                            0x3
#define _UEP6_EP6CONDIS_SIZE                                0x1
#define _UEP6_EP6CONDIS_LENGTH                              0x1
#define _UEP6_EP6CONDIS_MASK                                0x8
#define _UEP6_EP6HSHK_POSN                                  0x4
#define _UEP6_EP6HSHK_POSITION                              0x4
#define _UEP6_EP6HSHK_SIZE                                  0x1
#define _UEP6_EP6HSHK_LENGTH                                0x1
#define _UEP6_EP6HSHK_MASK                                  0x10
#define _UEP6_EPSTALL6_POSN                                 0x0
#define _UEP6_EPSTALL6_POSITION                             0x0
#define _UEP6_EPSTALL6_SIZE                                 0x1
#define _UEP6_EPSTALL6_LENGTH                               0x1
#define _UEP6_EPSTALL6_MASK                                 0x1
#define _UEP6_EPINEN6_POSN                                  0x1
#define _UEP6_EPINEN6_POSITION                              0x1
#define _UEP6_EPINEN6_SIZE                                  0x1
#define _UEP6_EPINEN6_LENGTH                                0x1
#define _UEP6_EPINEN6_MASK                                  0x2
#define _UEP6_EPOUTEN6_POSN                                 0x2
#define _UEP6_EPOUTEN6_POSITION                             0x2
#define _UEP6_EPOUTEN6_SIZE                                 0x1
#define _UEP6_EPOUTEN6_LENGTH                               0x1
#define _UEP6_EPOUTEN6_MASK                                 0x4
#define _UEP6_EPCONDIS6_POSN                                0x3
#define _UEP6_EPCONDIS6_POSITION                            0x3
#define _UEP6_EPCONDIS6_SIZE                                0x1
#define _UEP6_EPCONDIS6_LENGTH                              0x1
#define _UEP6_EPCONDIS6_MASK                                0x8
#define _UEP6_EPHSHK6_POSN                                  0x4
#define _UEP6_EPHSHK6_POSITION                              0x4
#define _UEP6_EPHSHK6_SIZE                                  0x1
#define _UEP6_EPHSHK6_LENGTH                                0x1
#define _UEP6_EPHSHK6_MASK                                  0x10

// Register: UEP7
#define UEP7 UEP7
extern volatile unsigned char           UEP7                __at(0xE06);
#ifndef _LIB_BUILD
asm("UEP7 equ 0E06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EP7STALL               :1;
        unsigned EP7INEN                :1;
        unsigned EP7OUTEN               :1;
        unsigned EP7CONDIS              :1;
        unsigned EP7HSHK                :1;
    };
    struct {
        unsigned EPSTALL7               :1;
        unsigned EPINEN7                :1;
        unsigned EPOUTEN7               :1;
        unsigned EPCONDIS7              :1;
        unsigned EPHSHK7                :1;
    };
} UEP7bits_t;
extern volatile UEP7bits_t UEP7bits __at(0xE06);
// bitfield macros
#define _UEP7_EPSTALL_POSN                                  0x0
#define _UEP7_EPSTALL_POSITION                              0x0
#define _UEP7_EPSTALL_SIZE                                  0x1
#define _UEP7_EPSTALL_LENGTH                                0x1
#define _UEP7_EPSTALL_MASK                                  0x1
#define _UEP7_EPINEN_POSN                                   0x1
#define _UEP7_EPINEN_POSITION                               0x1
#define _UEP7_EPINEN_SIZE                                   0x1
#define _UEP7_EPINEN_LENGTH                                 0x1
#define _UEP7_EPINEN_MASK                                   0x2
#define _UEP7_EPOUTEN_POSN                                  0x2
#define _UEP7_EPOUTEN_POSITION                              0x2
#define _UEP7_EPOUTEN_SIZE                                  0x1
#define _UEP7_EPOUTEN_LENGTH                                0x1
#define _UEP7_EPOUTEN_MASK                                  0x4
#define _UEP7_EPCONDIS_POSN                                 0x3
#define _UEP7_EPCONDIS_POSITION                             0x3
#define _UEP7_EPCONDIS_SIZE                                 0x1
#define _UEP7_EPCONDIS_LENGTH                               0x1
#define _UEP7_EPCONDIS_MASK                                 0x8
#define _UEP7_EPHSHK_POSN                                   0x4
#define _UEP7_EPHSHK_POSITION                               0x4
#define _UEP7_EPHSHK_SIZE                                   0x1
#define _UEP7_EPHSHK_LENGTH                                 0x1
#define _UEP7_EPHSHK_MASK                                   0x10
#define _UEP7_EP7STALL_POSN                                 0x0
#define _UEP7_EP7STALL_POSITION                             0x0
#define _UEP7_EP7STALL_SIZE                                 0x1
#define _UEP7_EP7STALL_LENGTH                               0x1
#define _UEP7_EP7STALL_MASK                                 0x1
#define _UEP7_EP7INEN_POSN                                  0x1
#define _UEP7_EP7INEN_POSITION                              0x1
#define _UEP7_EP7INEN_SIZE                                  0x1
#define _UEP7_EP7INEN_LENGTH                                0x1
#define _UEP7_EP7INEN_MASK                                  0x2
#define _UEP7_EP7OUTEN_POSN                                 0x2
#define _UEP7_EP7OUTEN_POSITION                             0x2
#define _UEP7_EP7OUTEN_SIZE                                 0x1
#define _UEP7_EP7OUTEN_LENGTH                               0x1
#define _UEP7_EP7OUTEN_MASK                                 0x4
#define _UEP7_EP7CONDIS_POSN                                0x3
#define _UEP7_EP7CONDIS_POSITION                            0x3
#define _UEP7_EP7CONDIS_SIZE                                0x1
#define _UEP7_EP7CONDIS_LENGTH                              0x1
#define _UEP7_EP7CONDIS_MASK                                0x8
#define _UEP7_EP7HSHK_POSN                                  0x4
#define _UEP7_EP7HSHK_POSITION                              0x4
#define _UEP7_EP7HSHK_SIZE                                  0x1
#define _UEP7_EP7HSHK_LENGTH                                0x1
#define _UEP7_EP7HSHK_MASK                                  0x10
#define _UEP7_EPSTALL7_POSN                                 0x0
#define _UEP7_EPSTALL7_POSITION                             0x0
#define _UEP7_EPSTALL7_SIZE                                 0x1
#define _UEP7_EPSTALL7_LENGTH                               0x1
#define _UEP7_EPSTALL7_MASK                                 0x1
#define _UEP7_EPINEN7_POSN                                  0x1
#define _UEP7_EPINEN7_POSITION                              0x1
#define _UEP7_EPINEN7_SIZE                                  0x1
#define _UEP7_EPINEN7_LENGTH                                0x1
#define _UEP7_EPINEN7_MASK                                  0x2
#define _UEP7_EPOUTEN7_POSN                                 0x2
#define _UEP7_EPOUTEN7_POSITION                             0x2
#define _UEP7_EPOUTEN7_SIZE                                 0x1
#define _UEP7_EPOUTEN7_LENGTH                               0x1
#define _UEP7_EPOUTEN7_MASK                                 0x4
#define _UEP7_EPCONDIS7_POSN                                0x3
#define _UEP7_EPCONDIS7_POSITION                            0x3
#define _UEP7_EPCONDIS7_SIZE                                0x1
#define _UEP7_EPCONDIS7_LENGTH                              0x1
#define _UEP7_EPCONDIS7_MASK                                0x8
#define _UEP7_EPHSHK7_POSN                                  0x4
#define _UEP7_EPHSHK7_POSITION                              0x4
#define _UEP7_EPHSHK7_SIZE                                  0x1
#define _UEP7_EPHSHK7_LENGTH                                0x1
#define _UEP7_EPHSHK7_MASK                                  0x10

// Register: UEP8
#define UEP8 UEP8
extern volatile unsigned char           UEP8                __at(0xE07);
#ifndef _LIB_BUILD
asm("UEP8 equ 0E07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL8               :1;
        unsigned EPINEN8                :1;
        unsigned EPOUTEN8               :1;
        unsigned EPCONDIS8              :1;
        unsigned EPHSHK8                :1;
    };
} UEP8bits_t;
extern volatile UEP8bits_t UEP8bits __at(0xE07);
// bitfield macros
#define _UEP8_EPSTALL_POSN                                  0x0
#define _UEP8_EPSTALL_POSITION                              0x0
#define _UEP8_EPSTALL_SIZE                                  0x1
#define _UEP8_EPSTALL_LENGTH                                0x1
#define _UEP8_EPSTALL_MASK                                  0x1
#define _UEP8_EPINEN_POSN                                   0x1
#define _UEP8_EPINEN_POSITION                               0x1
#define _UEP8_EPINEN_SIZE                                   0x1
#define _UEP8_EPINEN_LENGTH                                 0x1
#define _UEP8_EPINEN_MASK                                   0x2
#define _UEP8_EPOUTEN_POSN                                  0x2
#define _UEP8_EPOUTEN_POSITION                              0x2
#define _UEP8_EPOUTEN_SIZE                                  0x1
#define _UEP8_EPOUTEN_LENGTH                                0x1
#define _UEP8_EPOUTEN_MASK                                  0x4
#define _UEP8_EPCONDIS_POSN                                 0x3
#define _UEP8_EPCONDIS_POSITION                             0x3
#define _UEP8_EPCONDIS_SIZE                                 0x1
#define _UEP8_EPCONDIS_LENGTH                               0x1
#define _UEP8_EPCONDIS_MASK                                 0x8
#define _UEP8_EPHSHK_POSN                                   0x4
#define _UEP8_EPHSHK_POSITION                               0x4
#define _UEP8_EPHSHK_SIZE                                   0x1
#define _UEP8_EPHSHK_LENGTH                                 0x1
#define _UEP8_EPHSHK_MASK                                   0x10
#define _UEP8_EPSTALL8_POSN                                 0x0
#define _UEP8_EPSTALL8_POSITION                             0x0
#define _UEP8_EPSTALL8_SIZE                                 0x1
#define _UEP8_EPSTALL8_LENGTH                               0x1
#define _UEP8_EPSTALL8_MASK                                 0x1
#define _UEP8_EPINEN8_POSN                                  0x1
#define _UEP8_EPINEN8_POSITION                              0x1
#define _UEP8_EPINEN8_SIZE                                  0x1
#define _UEP8_EPINEN8_LENGTH                                0x1
#define _UEP8_EPINEN8_MASK                                  0x2
#define _UEP8_EPOUTEN8_POSN                                 0x2
#define _UEP8_EPOUTEN8_POSITION                             0x2
#define _UEP8_EPOUTEN8_SIZE                                 0x1
#define _UEP8_EPOUTEN8_LENGTH                               0x1
#define _UEP8_EPOUTEN8_MASK                                 0x4
#define _UEP8_EPCONDIS8_POSN                                0x3
#define _UEP8_EPCONDIS8_POSITION                            0x3
#define _UEP8_EPCONDIS8_SIZE                                0x1
#define _UEP8_EPCONDIS8_LENGTH                              0x1
#define _UEP8_EPCONDIS8_MASK                                0x8
#define _UEP8_EPHSHK8_POSN                                  0x4
#define _UEP8_EPHSHK8_POSITION                              0x4
#define _UEP8_EPHSHK8_SIZE                                  0x1
#define _UEP8_EPHSHK8_LENGTH                                0x1
#define _UEP8_EPHSHK8_MASK                                  0x10

// Register: UEP9
#define UEP9 UEP9
extern volatile unsigned char           UEP9                __at(0xE08);
#ifndef _LIB_BUILD
asm("UEP9 equ 0E08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL9               :1;
        unsigned EPINEN9                :1;
        unsigned EPOUTEN9               :1;
        unsigned EPCONDIS9              :1;
        unsigned EPHSHK9                :1;
    };
} UEP9bits_t;
extern volatile UEP9bits_t UEP9bits __at(0xE08);
// bitfield macros
#define _UEP9_EPSTALL_POSN                                  0x0
#define _UEP9_EPSTALL_POSITION                              0x0
#define _UEP9_EPSTALL_SIZE                                  0x1
#define _UEP9_EPSTALL_LENGTH                                0x1
#define _UEP9_EPSTALL_MASK                                  0x1
#define _UEP9_EPINEN_POSN                                   0x1
#define _UEP9_EPINEN_POSITION                               0x1
#define _UEP9_EPINEN_SIZE                                   0x1
#define _UEP9_EPINEN_LENGTH                                 0x1
#define _UEP9_EPINEN_MASK                                   0x2
#define _UEP9_EPOUTEN_POSN                                  0x2
#define _UEP9_EPOUTEN_POSITION                              0x2
#define _UEP9_EPOUTEN_SIZE                                  0x1
#define _UEP9_EPOUTEN_LENGTH                                0x1
#define _UEP9_EPOUTEN_MASK                                  0x4
#define _UEP9_EPCONDIS_POSN                                 0x3
#define _UEP9_EPCONDIS_POSITION                             0x3
#define _UEP9_EPCONDIS_SIZE                                 0x1
#define _UEP9_EPCONDIS_LENGTH                               0x1
#define _UEP9_EPCONDIS_MASK                                 0x8
#define _UEP9_EPHSHK_POSN                                   0x4
#define _UEP9_EPHSHK_POSITION                               0x4
#define _UEP9_EPHSHK_SIZE                                   0x1
#define _UEP9_EPHSHK_LENGTH                                 0x1
#define _UEP9_EPHSHK_MASK                                   0x10
#define _UEP9_EPSTALL9_POSN                                 0x0
#define _UEP9_EPSTALL9_POSITION                             0x0
#define _UEP9_EPSTALL9_SIZE                                 0x1
#define _UEP9_EPSTALL9_LENGTH                               0x1
#define _UEP9_EPSTALL9_MASK                                 0x1
#define _UEP9_EPINEN9_POSN                                  0x1
#define _UEP9_EPINEN9_POSITION                              0x1
#define _UEP9_EPINEN9_SIZE                                  0x1
#define _UEP9_EPINEN9_LENGTH                                0x1
#define _UEP9_EPINEN9_MASK                                  0x2
#define _UEP9_EPOUTEN9_POSN                                 0x2
#define _UEP9_EPOUTEN9_POSITION                             0x2
#define _UEP9_EPOUTEN9_SIZE                                 0x1
#define _UEP9_EPOUTEN9_LENGTH                               0x1
#define _UEP9_EPOUTEN9_MASK                                 0x4
#define _UEP9_EPCONDIS9_POSN                                0x3
#define _UEP9_EPCONDIS9_POSITION                            0x3
#define _UEP9_EPCONDIS9_SIZE                                0x1
#define _UEP9_EPCONDIS9_LENGTH                              0x1
#define _UEP9_EPCONDIS9_MASK                                0x8
#define _UEP9_EPHSHK9_POSN                                  0x4
#define _UEP9_EPHSHK9_POSITION                              0x4
#define _UEP9_EPHSHK9_SIZE                                  0x1
#define _UEP9_EPHSHK9_LENGTH                                0x1
#define _UEP9_EPHSHK9_MASK                                  0x10

// Register: UEP10
#define UEP10 UEP10
extern volatile unsigned char           UEP10               __at(0xE09);
#ifndef _LIB_BUILD
asm("UEP10 equ 0E09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL10              :1;
        unsigned EPINEN10               :1;
        unsigned EPOUTEN10              :1;
        unsigned EPCONDIS10             :1;
        unsigned EPHSHK10               :1;
    };
} UEP10bits_t;
extern volatile UEP10bits_t UEP10bits __at(0xE09);
// bitfield macros
#define _UEP10_EPSTALL_POSN                                 0x0
#define _UEP10_EPSTALL_POSITION                             0x0
#define _UEP10_EPSTALL_SIZE                                 0x1
#define _UEP10_EPSTALL_LENGTH                               0x1
#define _UEP10_EPSTALL_MASK                                 0x1
#define _UEP10_EPINEN_POSN                                  0x1
#define _UEP10_EPINEN_POSITION                              0x1
#define _UEP10_EPINEN_SIZE                                  0x1
#define _UEP10_EPINEN_LENGTH                                0x1
#define _UEP10_EPINEN_MASK                                  0x2
#define _UEP10_EPOUTEN_POSN                                 0x2
#define _UEP10_EPOUTEN_POSITION                             0x2
#define _UEP10_EPOUTEN_SIZE                                 0x1
#define _UEP10_EPOUTEN_LENGTH                               0x1
#define _UEP10_EPOUTEN_MASK                                 0x4
#define _UEP10_EPCONDIS_POSN                                0x3
#define _UEP10_EPCONDIS_POSITION                            0x3
#define _UEP10_EPCONDIS_SIZE                                0x1
#define _UEP10_EPCONDIS_LENGTH                              0x1
#define _UEP10_EPCONDIS_MASK                                0x8
#define _UEP10_EPHSHK_POSN                                  0x4
#define _UEP10_EPHSHK_POSITION                              0x4
#define _UEP10_EPHSHK_SIZE                                  0x1
#define _UEP10_EPHSHK_LENGTH                                0x1
#define _UEP10_EPHSHK_MASK                                  0x10
#define _UEP10_EPSTALL10_POSN                               0x0
#define _UEP10_EPSTALL10_POSITION                           0x0
#define _UEP10_EPSTALL10_SIZE                               0x1
#define _UEP10_EPSTALL10_LENGTH                             0x1
#define _UEP10_EPSTALL10_MASK                               0x1
#define _UEP10_EPINEN10_POSN                                0x1
#define _UEP10_EPINEN10_POSITION                            0x1
#define _UEP10_EPINEN10_SIZE                                0x1
#define _UEP10_EPINEN10_LENGTH                              0x1
#define _UEP10_EPINEN10_MASK                                0x2
#define _UEP10_EPOUTEN10_POSN                               0x2
#define _UEP10_EPOUTEN10_POSITION                           0x2
#define _UEP10_EPOUTEN10_SIZE                               0x1
#define _UEP10_EPOUTEN10_LENGTH                             0x1
#define _UEP10_EPOUTEN10_MASK                               0x4
#define _UEP10_EPCONDIS10_POSN                              0x3
#define _UEP10_EPCONDIS10_POSITION                          0x3
#define _UEP10_EPCONDIS10_SIZE                              0x1
#define _UEP10_EPCONDIS10_LENGTH                            0x1
#define _UEP10_EPCONDIS10_MASK                              0x8
#define _UEP10_EPHSHK10_POSN                                0x4
#define _UEP10_EPHSHK10_POSITION                            0x4
#define _UEP10_EPHSHK10_SIZE                                0x1
#define _UEP10_EPHSHK10_LENGTH                              0x1
#define _UEP10_EPHSHK10_MASK                                0x10

// Register: UEP11
#define UEP11 UEP11
extern volatile unsigned char           UEP11               __at(0xE0A);
#ifndef _LIB_BUILD
asm("UEP11 equ 0E0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL11              :1;
        unsigned EPINEN11               :1;
        unsigned EPOUTEN11              :1;
        unsigned EPCONDIS11             :1;
        unsigned EPHSHK11               :1;
    };
} UEP11bits_t;
extern volatile UEP11bits_t UEP11bits __at(0xE0A);
// bitfield macros
#define _UEP11_EPSTALL_POSN                                 0x0
#define _UEP11_EPSTALL_POSITION                             0x0
#define _UEP11_EPSTALL_SIZE                                 0x1
#define _UEP11_EPSTALL_LENGTH                               0x1
#define _UEP11_EPSTALL_MASK                                 0x1
#define _UEP11_EPINEN_POSN                                  0x1
#define _UEP11_EPINEN_POSITION                              0x1
#define _UEP11_EPINEN_SIZE                                  0x1
#define _UEP11_EPINEN_LENGTH                                0x1
#define _UEP11_EPINEN_MASK                                  0x2
#define _UEP11_EPOUTEN_POSN                                 0x2
#define _UEP11_EPOUTEN_POSITION                             0x2
#define _UEP11_EPOUTEN_SIZE                                 0x1
#define _UEP11_EPOUTEN_LENGTH                               0x1
#define _UEP11_EPOUTEN_MASK                                 0x4
#define _UEP11_EPCONDIS_POSN                                0x3
#define _UEP11_EPCONDIS_POSITION                            0x3
#define _UEP11_EPCONDIS_SIZE                                0x1
#define _UEP11_EPCONDIS_LENGTH                              0x1
#define _UEP11_EPCONDIS_MASK                                0x8
#define _UEP11_EPHSHK_POSN                                  0x4
#define _UEP11_EPHSHK_POSITION                              0x4
#define _UEP11_EPHSHK_SIZE                                  0x1
#define _UEP11_EPHSHK_LENGTH                                0x1
#define _UEP11_EPHSHK_MASK                                  0x10
#define _UEP11_EPSTALL11_POSN                               0x0
#define _UEP11_EPSTALL11_POSITION                           0x0
#define _UEP11_EPSTALL11_SIZE                               0x1
#define _UEP11_EPSTALL11_LENGTH                             0x1
#define _UEP11_EPSTALL11_MASK                               0x1
#define _UEP11_EPINEN11_POSN                                0x1
#define _UEP11_EPINEN11_POSITION                            0x1
#define _UEP11_EPINEN11_SIZE                                0x1
#define _UEP11_EPINEN11_LENGTH                              0x1
#define _UEP11_EPINEN11_MASK                                0x2
#define _UEP11_EPOUTEN11_POSN                               0x2
#define _UEP11_EPOUTEN11_POSITION                           0x2
#define _UEP11_EPOUTEN11_SIZE                               0x1
#define _UEP11_EPOUTEN11_LENGTH                             0x1
#define _UEP11_EPOUTEN11_MASK                               0x4
#define _UEP11_EPCONDIS11_POSN                              0x3
#define _UEP11_EPCONDIS11_POSITION                          0x3
#define _UEP11_EPCONDIS11_SIZE                              0x1
#define _UEP11_EPCONDIS11_LENGTH                            0x1
#define _UEP11_EPCONDIS11_MASK                              0x8
#define _UEP11_EPHSHK11_POSN                                0x4
#define _UEP11_EPHSHK11_POSITION                            0x4
#define _UEP11_EPHSHK11_SIZE                                0x1
#define _UEP11_EPHSHK11_LENGTH                              0x1
#define _UEP11_EPHSHK11_MASK                                0x10

// Register: UEP12
#define UEP12 UEP12
extern volatile unsigned char           UEP12               __at(0xE0B);
#ifndef _LIB_BUILD
asm("UEP12 equ 0E0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL12              :1;
        unsigned EPINEN12               :1;
        unsigned EPOUTEN12              :1;
        unsigned EPCONDIS12             :1;
        unsigned EPHSHK12               :1;
    };
} UEP12bits_t;
extern volatile UEP12bits_t UEP12bits __at(0xE0B);
// bitfield macros
#define _UEP12_EPSTALL_POSN                                 0x0
#define _UEP12_EPSTALL_POSITION                             0x0
#define _UEP12_EPSTALL_SIZE                                 0x1
#define _UEP12_EPSTALL_LENGTH                               0x1
#define _UEP12_EPSTALL_MASK                                 0x1
#define _UEP12_EPINEN_POSN                                  0x1
#define _UEP12_EPINEN_POSITION                              0x1
#define _UEP12_EPINEN_SIZE                                  0x1
#define _UEP12_EPINEN_LENGTH                                0x1
#define _UEP12_EPINEN_MASK                                  0x2
#define _UEP12_EPOUTEN_POSN                                 0x2
#define _UEP12_EPOUTEN_POSITION                             0x2
#define _UEP12_EPOUTEN_SIZE                                 0x1
#define _UEP12_EPOUTEN_LENGTH                               0x1
#define _UEP12_EPOUTEN_MASK                                 0x4
#define _UEP12_EPCONDIS_POSN                                0x3
#define _UEP12_EPCONDIS_POSITION                            0x3
#define _UEP12_EPCONDIS_SIZE                                0x1
#define _UEP12_EPCONDIS_LENGTH                              0x1
#define _UEP12_EPCONDIS_MASK                                0x8
#define _UEP12_EPHSHK_POSN                                  0x4
#define _UEP12_EPHSHK_POSITION                              0x4
#define _UEP12_EPHSHK_SIZE                                  0x1
#define _UEP12_EPHSHK_LENGTH                                0x1
#define _UEP12_EPHSHK_MASK                                  0x10
#define _UEP12_EPSTALL12_POSN                               0x0
#define _UEP12_EPSTALL12_POSITION                           0x0
#define _UEP12_EPSTALL12_SIZE                               0x1
#define _UEP12_EPSTALL12_LENGTH                             0x1
#define _UEP12_EPSTALL12_MASK                               0x1
#define _UEP12_EPINEN12_POSN                                0x1
#define _UEP12_EPINEN12_POSITION                            0x1
#define _UEP12_EPINEN12_SIZE                                0x1
#define _UEP12_EPINEN12_LENGTH                              0x1
#define _UEP12_EPINEN12_MASK                                0x2
#define _UEP12_EPOUTEN12_POSN                               0x2
#define _UEP12_EPOUTEN12_POSITION                           0x2
#define _UEP12_EPOUTEN12_SIZE                               0x1
#define _UEP12_EPOUTEN12_LENGTH                             0x1
#define _UEP12_EPOUTEN12_MASK                               0x4
#define _UEP12_EPCONDIS12_POSN                              0x3
#define _UEP12_EPCONDIS12_POSITION                          0x3
#define _UEP12_EPCONDIS12_SIZE                              0x1
#define _UEP12_EPCONDIS12_LENGTH                            0x1
#define _UEP12_EPCONDIS12_MASK                              0x8
#define _UEP12_EPHSHK12_POSN                                0x4
#define _UEP12_EPHSHK12_POSITION                            0x4
#define _UEP12_EPHSHK12_SIZE                                0x1
#define _UEP12_EPHSHK12_LENGTH                              0x1
#define _UEP12_EPHSHK12_MASK                                0x10

// Register: UEP13
#define UEP13 UEP13
extern volatile unsigned char           UEP13               __at(0xE0C);
#ifndef _LIB_BUILD
asm("UEP13 equ 0E0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL13              :1;
        unsigned EPINEN13               :1;
        unsigned EPOUTEN13              :1;
        unsigned EPCONDIS13             :1;
        unsigned EPHSHK13               :1;
    };
} UEP13bits_t;
extern volatile UEP13bits_t UEP13bits __at(0xE0C);
// bitfield macros
#define _UEP13_EPSTALL_POSN                                 0x0
#define _UEP13_EPSTALL_POSITION                             0x0
#define _UEP13_EPSTALL_SIZE                                 0x1
#define _UEP13_EPSTALL_LENGTH                               0x1
#define _UEP13_EPSTALL_MASK                                 0x1
#define _UEP13_EPINEN_POSN                                  0x1
#define _UEP13_EPINEN_POSITION                              0x1
#define _UEP13_EPINEN_SIZE                                  0x1
#define _UEP13_EPINEN_LENGTH                                0x1
#define _UEP13_EPINEN_MASK                                  0x2
#define _UEP13_EPOUTEN_POSN                                 0x2
#define _UEP13_EPOUTEN_POSITION                             0x2
#define _UEP13_EPOUTEN_SIZE                                 0x1
#define _UEP13_EPOUTEN_LENGTH                               0x1
#define _UEP13_EPOUTEN_MASK                                 0x4
#define _UEP13_EPCONDIS_POSN                                0x3
#define _UEP13_EPCONDIS_POSITION                            0x3
#define _UEP13_EPCONDIS_SIZE                                0x1
#define _UEP13_EPCONDIS_LENGTH                              0x1
#define _UEP13_EPCONDIS_MASK                                0x8
#define _UEP13_EPHSHK_POSN                                  0x4
#define _UEP13_EPHSHK_POSITION                              0x4
#define _UEP13_EPHSHK_SIZE                                  0x1
#define _UEP13_EPHSHK_LENGTH                                0x1
#define _UEP13_EPHSHK_MASK                                  0x10
#define _UEP13_EPSTALL13_POSN                               0x0
#define _UEP13_EPSTALL13_POSITION                           0x0
#define _UEP13_EPSTALL13_SIZE                               0x1
#define _UEP13_EPSTALL13_LENGTH                             0x1
#define _UEP13_EPSTALL13_MASK                               0x1
#define _UEP13_EPINEN13_POSN                                0x1
#define _UEP13_EPINEN13_POSITION                            0x1
#define _UEP13_EPINEN13_SIZE                                0x1
#define _UEP13_EPINEN13_LENGTH                              0x1
#define _UEP13_EPINEN13_MASK                                0x2
#define _UEP13_EPOUTEN13_POSN                               0x2
#define _UEP13_EPOUTEN13_POSITION                           0x2
#define _UEP13_EPOUTEN13_SIZE                               0x1
#define _UEP13_EPOUTEN13_LENGTH                             0x1
#define _UEP13_EPOUTEN13_MASK                               0x4
#define _UEP13_EPCONDIS13_POSN                              0x3
#define _UEP13_EPCONDIS13_POSITION                          0x3
#define _UEP13_EPCONDIS13_SIZE                              0x1
#define _UEP13_EPCONDIS13_LENGTH                            0x1
#define _UEP13_EPCONDIS13_MASK                              0x8
#define _UEP13_EPHSHK13_POSN                                0x4
#define _UEP13_EPHSHK13_POSITION                            0x4
#define _UEP13_EPHSHK13_SIZE                                0x1
#define _UEP13_EPHSHK13_LENGTH                              0x1
#define _UEP13_EPHSHK13_MASK                                0x10

// Register: UEP14
#define UEP14 UEP14
extern volatile unsigned char           UEP14               __at(0xE0D);
#ifndef _LIB_BUILD
asm("UEP14 equ 0E0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL14              :1;
        unsigned EPINEN14               :1;
        unsigned EPOUTEN14              :1;
        unsigned EPCONDIS14             :1;
        unsigned EPHSHK14               :1;
    };
} UEP14bits_t;
extern volatile UEP14bits_t UEP14bits __at(0xE0D);
// bitfield macros
#define _UEP14_EPSTALL_POSN                                 0x0
#define _UEP14_EPSTALL_POSITION                             0x0
#define _UEP14_EPSTALL_SIZE                                 0x1
#define _UEP14_EPSTALL_LENGTH                               0x1
#define _UEP14_EPSTALL_MASK                                 0x1
#define _UEP14_EPINEN_POSN                                  0x1
#define _UEP14_EPINEN_POSITION                              0x1
#define _UEP14_EPINEN_SIZE                                  0x1
#define _UEP14_EPINEN_LENGTH                                0x1
#define _UEP14_EPINEN_MASK                                  0x2
#define _UEP14_EPOUTEN_POSN                                 0x2
#define _UEP14_EPOUTEN_POSITION                             0x2
#define _UEP14_EPOUTEN_SIZE                                 0x1
#define _UEP14_EPOUTEN_LENGTH                               0x1
#define _UEP14_EPOUTEN_MASK                                 0x4
#define _UEP14_EPCONDIS_POSN                                0x3
#define _UEP14_EPCONDIS_POSITION                            0x3
#define _UEP14_EPCONDIS_SIZE                                0x1
#define _UEP14_EPCONDIS_LENGTH                              0x1
#define _UEP14_EPCONDIS_MASK                                0x8
#define _UEP14_EPHSHK_POSN                                  0x4
#define _UEP14_EPHSHK_POSITION                              0x4
#define _UEP14_EPHSHK_SIZE                                  0x1
#define _UEP14_EPHSHK_LENGTH                                0x1
#define _UEP14_EPHSHK_MASK                                  0x10
#define _UEP14_EPSTALL14_POSN                               0x0
#define _UEP14_EPSTALL14_POSITION                           0x0
#define _UEP14_EPSTALL14_SIZE                               0x1
#define _UEP14_EPSTALL14_LENGTH                             0x1
#define _UEP14_EPSTALL14_MASK                               0x1
#define _UEP14_EPINEN14_POSN                                0x1
#define _UEP14_EPINEN14_POSITION                            0x1
#define _UEP14_EPINEN14_SIZE                                0x1
#define _UEP14_EPINEN14_LENGTH                              0x1
#define _UEP14_EPINEN14_MASK                                0x2
#define _UEP14_EPOUTEN14_POSN                               0x2
#define _UEP14_EPOUTEN14_POSITION                           0x2
#define _UEP14_EPOUTEN14_SIZE                               0x1
#define _UEP14_EPOUTEN14_LENGTH                             0x1
#define _UEP14_EPOUTEN14_MASK                               0x4
#define _UEP14_EPCONDIS14_POSN                              0x3
#define _UEP14_EPCONDIS14_POSITION                          0x3
#define _UEP14_EPCONDIS14_SIZE                              0x1
#define _UEP14_EPCONDIS14_LENGTH                            0x1
#define _UEP14_EPCONDIS14_MASK                              0x8
#define _UEP14_EPHSHK14_POSN                                0x4
#define _UEP14_EPHSHK14_POSITION                            0x4
#define _UEP14_EPHSHK14_SIZE                                0x1
#define _UEP14_EPHSHK14_LENGTH                              0x1
#define _UEP14_EPHSHK14_MASK                                0x10

// Register: UEP15
#define UEP15 UEP15
extern volatile unsigned char           UEP15               __at(0xE0E);
#ifndef _LIB_BUILD
asm("UEP15 equ 0E0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EPSTALL                :1;
        unsigned EPINEN                 :1;
        unsigned EPOUTEN                :1;
        unsigned EPCONDIS               :1;
        unsigned EPHSHK                 :1;
    };
    struct {
        unsigned EPSTALL15              :1;
        unsigned EPINEN15               :1;
        unsigned EPOUTEN15              :1;
        unsigned EPCONDIS15             :1;
        unsigned EPHSHK15               :1;
    };
} UEP15bits_t;
extern volatile UEP15bits_t UEP15bits __at(0xE0E);
// bitfield macros
#define _UEP15_EPSTALL_POSN                                 0x0
#define _UEP15_EPSTALL_POSITION                             0x0
#define _UEP15_EPSTALL_SIZE                                 0x1
#define _UEP15_EPSTALL_LENGTH                               0x1
#define _UEP15_EPSTALL_MASK                                 0x1
#define _UEP15_EPINEN_POSN                                  0x1
#define _UEP15_EPINEN_POSITION                              0x1
#define _UEP15_EPINEN_SIZE                                  0x1
#define _UEP15_EPINEN_LENGTH                                0x1
#define _UEP15_EPINEN_MASK                                  0x2
#define _UEP15_EPOUTEN_POSN                                 0x2
#define _UEP15_EPOUTEN_POSITION                             0x2
#define _UEP15_EPOUTEN_SIZE                                 0x1
#define _UEP15_EPOUTEN_LENGTH                               0x1
#define _UEP15_EPOUTEN_MASK                                 0x4
#define _UEP15_EPCONDIS_POSN                                0x3
#define _UEP15_EPCONDIS_POSITION                            0x3
#define _UEP15_EPCONDIS_SIZE                                0x1
#define _UEP15_EPCONDIS_LENGTH                              0x1
#define _UEP15_EPCONDIS_MASK                                0x8
#define _UEP15_EPHSHK_POSN                                  0x4
#define _UEP15_EPHSHK_POSITION                              0x4
#define _UEP15_EPHSHK_SIZE                                  0x1
#define _UEP15_EPHSHK_LENGTH                                0x1
#define _UEP15_EPHSHK_MASK                                  0x10
#define _UEP15_EPSTALL15_POSN                               0x0
#define _UEP15_EPSTALL15_POSITION                           0x0
#define _UEP15_EPSTALL15_SIZE                               0x1
#define _UEP15_EPSTALL15_LENGTH                             0x1
#define _UEP15_EPSTALL15_MASK                               0x1
#define _UEP15_EPINEN15_POSN                                0x1
#define _UEP15_EPINEN15_POSITION                            0x1
#define _UEP15_EPINEN15_SIZE                                0x1
#define _UEP15_EPINEN15_LENGTH                              0x1
#define _UEP15_EPINEN15_MASK                                0x2
#define _UEP15_EPOUTEN15_POSN                               0x2
#define _UEP15_EPOUTEN15_POSITION                           0x2
#define _UEP15_EPOUTEN15_SIZE                               0x1
#define _UEP15_EPOUTEN15_LENGTH                             0x1
#define _UEP15_EPOUTEN15_MASK                               0x4
#define _UEP15_EPCONDIS15_POSN                              0x3
#define _UEP15_EPCONDIS15_POSITION                          0x3
#define _UEP15_EPCONDIS15_SIZE                              0x1
#define _UEP15_EPCONDIS15_LENGTH                            0x1
#define _UEP15_EPCONDIS15_MASK                              0x8
#define _UEP15_EPHSHK15_POSN                                0x4
#define _UEP15_EPHSHK15_POSITION                            0x4
#define _UEP15_EPHSHK15_SIZE                                0x1
#define _UEP15_EPHSHK15_LENGTH                              0x1
#define _UEP15_EPHSHK15_MASK                                0x10

// Register: UEIE
#define UEIE UEIE
extern volatile unsigned char           UEIE                __at(0xE0F);
#ifndef _LIB_BUILD
asm("UEIE equ 0E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIDEE                  :1;
        unsigned CRC5EE                 :1;
        unsigned CRC16EE                :1;
        unsigned DFN8EE                 :1;
        unsigned BTOEE                  :1;
        unsigned                        :2;
        unsigned BTSEE                  :1;
    };
} UEIEbits_t;
extern volatile UEIEbits_t UEIEbits __at(0xE0F);
// bitfield macros
#define _UEIE_PIDEE_POSN                                    0x0
#define _UEIE_PIDEE_POSITION                                0x0
#define _UEIE_PIDEE_SIZE                                    0x1
#define _UEIE_PIDEE_LENGTH                                  0x1
#define _UEIE_PIDEE_MASK                                    0x1
#define _UEIE_CRC5EE_POSN                                   0x1
#define _UEIE_CRC5EE_POSITION                               0x1
#define _UEIE_CRC5EE_SIZE                                   0x1
#define _UEIE_CRC5EE_LENGTH                                 0x1
#define _UEIE_CRC5EE_MASK                                   0x2
#define _UEIE_CRC16EE_POSN                                  0x2
#define _UEIE_CRC16EE_POSITION                              0x2
#define _UEIE_CRC16EE_SIZE                                  0x1
#define _UEIE_CRC16EE_LENGTH                                0x1
#define _UEIE_CRC16EE_MASK                                  0x4
#define _UEIE_DFN8EE_POSN                                   0x3
#define _UEIE_DFN8EE_POSITION                               0x3
#define _UEIE_DFN8EE_SIZE                                   0x1
#define _UEIE_DFN8EE_LENGTH                                 0x1
#define _UEIE_DFN8EE_MASK                                   0x8
#define _UEIE_BTOEE_POSN                                    0x4
#define _UEIE_BTOEE_POSITION                                0x4
#define _UEIE_BTOEE_SIZE                                    0x1
#define _UEIE_BTOEE_LENGTH                                  0x1
#define _UEIE_BTOEE_MASK                                    0x10
#define _UEIE_BTSEE_POSN                                    0x7
#define _UEIE_BTSEE_POSITION                                0x7
#define _UEIE_BTSEE_SIZE                                    0x1
#define _UEIE_BTSEE_LENGTH                                  0x1
#define _UEIE_BTSEE_MASK                                    0x80

// Register: UIE
#define UIE UIE
extern volatile unsigned char           UIE                 __at(0xE10);
#ifndef _LIB_BUILD
asm("UIE equ 0E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned URSTIE                 :1;
        unsigned UERRIE                 :1;
        unsigned ACTVIE                 :1;
        unsigned TRNIE                  :1;
        unsigned IDLEIE                 :1;
        unsigned STALLIE                :1;
        unsigned SOFIE                  :1;
    };
} UIEbits_t;
extern volatile UIEbits_t UIEbits __at(0xE10);
// bitfield macros
#define _UIE_URSTIE_POSN                                    0x0
#define _UIE_URSTIE_POSITION                                0x0
#define _UIE_URSTIE_SIZE                                    0x1
#define _UIE_URSTIE_LENGTH                                  0x1
#define _UIE_URSTIE_MASK                                    0x1
#define _UIE_UERRIE_POSN                                    0x1
#define _UIE_UERRIE_POSITION                                0x1
#define _UIE_UERRIE_SIZE                                    0x1
#define _UIE_UERRIE_LENGTH                                  0x1
#define _UIE_UERRIE_MASK                                    0x2
#define _UIE_ACTVIE_POSN                                    0x2
#define _UIE_ACTVIE_POSITION                                0x2
#define _UIE_ACTVIE_SIZE                                    0x1
#define _UIE_ACTVIE_LENGTH                                  0x1
#define _UIE_ACTVIE_MASK                                    0x4
#define _UIE_TRNIE_POSN                                     0x3
#define _UIE_TRNIE_POSITION                                 0x3
#define _UIE_TRNIE_SIZE                                     0x1
#define _UIE_TRNIE_LENGTH                                   0x1
#define _UIE_TRNIE_MASK                                     0x8
#define _UIE_IDLEIE_POSN                                    0x4
#define _UIE_IDLEIE_POSITION                                0x4
#define _UIE_IDLEIE_SIZE                                    0x1
#define _UIE_IDLEIE_LENGTH                                  0x1
#define _UIE_IDLEIE_MASK                                    0x10
#define _UIE_STALLIE_POSN                                   0x5
#define _UIE_STALLIE_POSITION                               0x5
#define _UIE_STALLIE_SIZE                                   0x1
#define _UIE_STALLIE_LENGTH                                 0x1
#define _UIE_STALLIE_MASK                                   0x20
#define _UIE_SOFIE_POSN                                     0x6
#define _UIE_SOFIE_POSITION                                 0x6
#define _UIE_SOFIE_SIZE                                     0x1
#define _UIE_SOFIE_LENGTH                                   0x1
#define _UIE_SOFIE_MASK                                     0x40

// Register: UCFG
#define UCFG UCFG
extern volatile unsigned char           UCFG                __at(0xE11);
#ifndef _LIB_BUILD
asm("UCFG equ 0E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPB0                   :1;
        unsigned PPB1                   :1;
        unsigned FSEN                   :1;
        unsigned UTRDIS                 :1;
        unsigned UPUEN                  :1;
        unsigned                        :1;
        unsigned UOEMON                 :1;
        unsigned UTEYE                  :1;
    };
    struct {
        unsigned UPP0                   :1;
        unsigned UPP1                   :1;
    };
} UCFGbits_t;
extern volatile UCFGbits_t UCFGbits __at(0xE11);
// bitfield macros
#define _UCFG_PPB0_POSN                                     0x0
#define _UCFG_PPB0_POSITION                                 0x0
#define _UCFG_PPB0_SIZE                                     0x1
#define _UCFG_PPB0_LENGTH                                   0x1
#define _UCFG_PPB0_MASK                                     0x1
#define _UCFG_PPB1_POSN                                     0x1
#define _UCFG_PPB1_POSITION                                 0x1
#define _UCFG_PPB1_SIZE                                     0x1
#define _UCFG_PPB1_LENGTH                                   0x1
#define _UCFG_PPB1_MASK                                     0x2
#define _UCFG_FSEN_POSN                                     0x2
#define _UCFG_FSEN_POSITION                                 0x2
#define _UCFG_FSEN_SIZE                                     0x1
#define _UCFG_FSEN_LENGTH                                   0x1
#define _UCFG_FSEN_MASK                                     0x4
#define _UCFG_UTRDIS_POSN                                   0x3
#define _UCFG_UTRDIS_POSITION                               0x3
#define _UCFG_UTRDIS_SIZE                                   0x1
#define _UCFG_UTRDIS_LENGTH                                 0x1
#define _UCFG_UTRDIS_MASK                                   0x8
#define _UCFG_UPUEN_POSN                                    0x4
#define _UCFG_UPUEN_POSITION                                0x4
#define _UCFG_UPUEN_SIZE                                    0x1
#define _UCFG_UPUEN_LENGTH                                  0x1
#define _UCFG_UPUEN_MASK                                    0x10
#define _UCFG_UOEMON_POSN                                   0x6
#define _UCFG_UOEMON_POSITION                               0x6
#define _UCFG_UOEMON_SIZE                                   0x1
#define _UCFG_UOEMON_LENGTH                                 0x1
#define _UCFG_UOEMON_MASK                                   0x40
#define _UCFG_UTEYE_POSN                                    0x7
#define _UCFG_UTEYE_POSITION                                0x7
#define _UCFG_UTEYE_SIZE                                    0x1
#define _UCFG_UTEYE_LENGTH                                  0x1
#define _UCFG_UTEYE_MASK                                    0x80
#define _UCFG_UPP0_POSN                                     0x0
#define _UCFG_UPP0_POSITION                                 0x0
#define _UCFG_UPP0_SIZE                                     0x1
#define _UCFG_UPP0_LENGTH                                   0x1
#define _UCFG_UPP0_MASK                                     0x1
#define _UCFG_UPP1_POSN                                     0x1
#define _UCFG_UPP1_POSITION                                 0x1
#define _UCFG_UPP1_SIZE                                     0x1
#define _UCFG_UPP1_LENGTH                                   0x1
#define _UCFG_UPP1_MASK                                     0x2

// Register: RPOR0_1
#define RPOR0_1 RPOR0_1
extern volatile unsigned char           RPOR0_1             __at(0xE12);
#ifndef _LIB_BUILD
asm("RPOR0_1 equ 0E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO0R                  :4;
        unsigned RPO1R                  :4;
    };
    struct {
        unsigned RPO0R0                 :1;
        unsigned RPO0R1                 :1;
        unsigned RPO0R2                 :1;
        unsigned RPO0R3                 :1;
        unsigned RPO1R0                 :1;
        unsigned RPO1R1                 :1;
        unsigned RPO1R2                 :1;
        unsigned RPO1R3                 :1;
    };
} RPOR0_1bits_t;
extern volatile RPOR0_1bits_t RPOR0_1bits __at(0xE12);
// bitfield macros
#define _RPOR0_1_RPO0R_POSN                                 0x0
#define _RPOR0_1_RPO0R_POSITION                             0x0
#define _RPOR0_1_RPO0R_SIZE                                 0x4
#define _RPOR0_1_RPO0R_LENGTH                               0x4
#define _RPOR0_1_RPO0R_MASK                                 0xF
#define _RPOR0_1_RPO1R_POSN                                 0x4
#define _RPOR0_1_RPO1R_POSITION                             0x4
#define _RPOR0_1_RPO1R_SIZE                                 0x4
#define _RPOR0_1_RPO1R_LENGTH                               0x4
#define _RPOR0_1_RPO1R_MASK                                 0xF0
#define _RPOR0_1_RPO0R0_POSN                                0x0
#define _RPOR0_1_RPO0R0_POSITION                            0x0
#define _RPOR0_1_RPO0R0_SIZE                                0x1
#define _RPOR0_1_RPO0R0_LENGTH                              0x1
#define _RPOR0_1_RPO0R0_MASK                                0x1
#define _RPOR0_1_RPO0R1_POSN                                0x1
#define _RPOR0_1_RPO0R1_POSITION                            0x1
#define _RPOR0_1_RPO0R1_SIZE                                0x1
#define _RPOR0_1_RPO0R1_LENGTH                              0x1
#define _RPOR0_1_RPO0R1_MASK                                0x2
#define _RPOR0_1_RPO0R2_POSN                                0x2
#define _RPOR0_1_RPO0R2_POSITION                            0x2
#define _RPOR0_1_RPO0R2_SIZE                                0x1
#define _RPOR0_1_RPO0R2_LENGTH                              0x1
#define _RPOR0_1_RPO0R2_MASK                                0x4
#define _RPOR0_1_RPO0R3_POSN                                0x3
#define _RPOR0_1_RPO0R3_POSITION                            0x3
#define _RPOR0_1_RPO0R3_SIZE                                0x1
#define _RPOR0_1_RPO0R3_LENGTH                              0x1
#define _RPOR0_1_RPO0R3_MASK                                0x8
#define _RPOR0_1_RPO1R0_POSN                                0x4
#define _RPOR0_1_RPO1R0_POSITION                            0x4
#define _RPOR0_1_RPO1R0_SIZE                                0x1
#define _RPOR0_1_RPO1R0_LENGTH                              0x1
#define _RPOR0_1_RPO1R0_MASK                                0x10
#define _RPOR0_1_RPO1R1_POSN                                0x5
#define _RPOR0_1_RPO1R1_POSITION                            0x5
#define _RPOR0_1_RPO1R1_SIZE                                0x1
#define _RPOR0_1_RPO1R1_LENGTH                              0x1
#define _RPOR0_1_RPO1R1_MASK                                0x20
#define _RPOR0_1_RPO1R2_POSN                                0x6
#define _RPOR0_1_RPO1R2_POSITION                            0x6
#define _RPOR0_1_RPO1R2_SIZE                                0x1
#define _RPOR0_1_RPO1R2_LENGTH                              0x1
#define _RPOR0_1_RPO1R2_MASK                                0x40
#define _RPOR0_1_RPO1R3_POSN                                0x7
#define _RPOR0_1_RPO1R3_POSITION                            0x7
#define _RPOR0_1_RPO1R3_SIZE                                0x1
#define _RPOR0_1_RPO1R3_LENGTH                              0x1
#define _RPOR0_1_RPO1R3_MASK                                0x80

// Register: RPOR2_3
#define RPOR2_3 RPOR2_3
extern volatile unsigned char           RPOR2_3             __at(0xE13);
#ifndef _LIB_BUILD
asm("RPOR2_3 equ 0E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO2R                  :4;
        unsigned RPO3R                  :4;
    };
    struct {
        unsigned RPO2R0                 :1;
        unsigned RPO2R1                 :1;
        unsigned RPO2R2                 :1;
        unsigned RPO2R3                 :1;
        unsigned RPO3R0                 :1;
        unsigned RPO3R1                 :1;
        unsigned RPO3R2                 :1;
        unsigned RPO3R3                 :1;
    };
} RPOR2_3bits_t;
extern volatile RPOR2_3bits_t RPOR2_3bits __at(0xE13);
// bitfield macros
#define _RPOR2_3_RPO2R_POSN                                 0x0
#define _RPOR2_3_RPO2R_POSITION                             0x0
#define _RPOR2_3_RPO2R_SIZE                                 0x4
#define _RPOR2_3_RPO2R_LENGTH                               0x4
#define _RPOR2_3_RPO2R_MASK                                 0xF
#define _RPOR2_3_RPO3R_POSN                                 0x4
#define _RPOR2_3_RPO3R_POSITION                             0x4
#define _RPOR2_3_RPO3R_SIZE                                 0x4
#define _RPOR2_3_RPO3R_LENGTH                               0x4
#define _RPOR2_3_RPO3R_MASK                                 0xF0
#define _RPOR2_3_RPO2R0_POSN                                0x0
#define _RPOR2_3_RPO2R0_POSITION                            0x0
#define _RPOR2_3_RPO2R0_SIZE                                0x1
#define _RPOR2_3_RPO2R0_LENGTH                              0x1
#define _RPOR2_3_RPO2R0_MASK                                0x1
#define _RPOR2_3_RPO2R1_POSN                                0x1
#define _RPOR2_3_RPO2R1_POSITION                            0x1
#define _RPOR2_3_RPO2R1_SIZE                                0x1
#define _RPOR2_3_RPO2R1_LENGTH                              0x1
#define _RPOR2_3_RPO2R1_MASK                                0x2
#define _RPOR2_3_RPO2R2_POSN                                0x2
#define _RPOR2_3_RPO2R2_POSITION                            0x2
#define _RPOR2_3_RPO2R2_SIZE                                0x1
#define _RPOR2_3_RPO2R2_LENGTH                              0x1
#define _RPOR2_3_RPO2R2_MASK                                0x4
#define _RPOR2_3_RPO2R3_POSN                                0x3
#define _RPOR2_3_RPO2R3_POSITION                            0x3
#define _RPOR2_3_RPO2R3_SIZE                                0x1
#define _RPOR2_3_RPO2R3_LENGTH                              0x1
#define _RPOR2_3_RPO2R3_MASK                                0x8
#define _RPOR2_3_RPO3R0_POSN                                0x4
#define _RPOR2_3_RPO3R0_POSITION                            0x4
#define _RPOR2_3_RPO3R0_SIZE                                0x1
#define _RPOR2_3_RPO3R0_LENGTH                              0x1
#define _RPOR2_3_RPO3R0_MASK                                0x10
#define _RPOR2_3_RPO3R1_POSN                                0x5
#define _RPOR2_3_RPO3R1_POSITION                            0x5
#define _RPOR2_3_RPO3R1_SIZE                                0x1
#define _RPOR2_3_RPO3R1_LENGTH                              0x1
#define _RPOR2_3_RPO3R1_MASK                                0x20
#define _RPOR2_3_RPO3R2_POSN                                0x6
#define _RPOR2_3_RPO3R2_POSITION                            0x6
#define _RPOR2_3_RPO3R2_SIZE                                0x1
#define _RPOR2_3_RPO3R2_LENGTH                              0x1
#define _RPOR2_3_RPO3R2_MASK                                0x40
#define _RPOR2_3_RPO3R3_POSN                                0x7
#define _RPOR2_3_RPO3R3_POSITION                            0x7
#define _RPOR2_3_RPO3R3_SIZE                                0x1
#define _RPOR2_3_RPO3R3_LENGTH                              0x1
#define _RPOR2_3_RPO3R3_MASK                                0x80

// Register: RPOR4_5
#define RPOR4_5 RPOR4_5
extern volatile unsigned char           RPOR4_5             __at(0xE14);
#ifndef _LIB_BUILD
asm("RPOR4_5 equ 0E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO4R                  :4;
        unsigned RPO5R                  :4;
    };
    struct {
        unsigned RPO4R0                 :1;
        unsigned RPO4R1                 :1;
        unsigned RPO4R2                 :1;
        unsigned RPO4R3                 :1;
        unsigned RPO5R0                 :1;
        unsigned RPO5R1                 :1;
        unsigned RPO5R2                 :1;
        unsigned RPO5R3                 :1;
    };
} RPOR4_5bits_t;
extern volatile RPOR4_5bits_t RPOR4_5bits __at(0xE14);
// bitfield macros
#define _RPOR4_5_RPO4R_POSN                                 0x0
#define _RPOR4_5_RPO4R_POSITION                             0x0
#define _RPOR4_5_RPO4R_SIZE                                 0x4
#define _RPOR4_5_RPO4R_LENGTH                               0x4
#define _RPOR4_5_RPO4R_MASK                                 0xF
#define _RPOR4_5_RPO5R_POSN                                 0x4
#define _RPOR4_5_RPO5R_POSITION                             0x4
#define _RPOR4_5_RPO5R_SIZE                                 0x4
#define _RPOR4_5_RPO5R_LENGTH                               0x4
#define _RPOR4_5_RPO5R_MASK                                 0xF0
#define _RPOR4_5_RPO4R0_POSN                                0x0
#define _RPOR4_5_RPO4R0_POSITION                            0x0
#define _RPOR4_5_RPO4R0_SIZE                                0x1
#define _RPOR4_5_RPO4R0_LENGTH                              0x1
#define _RPOR4_5_RPO4R0_MASK                                0x1
#define _RPOR4_5_RPO4R1_POSN                                0x1
#define _RPOR4_5_RPO4R1_POSITION                            0x1
#define _RPOR4_5_RPO4R1_SIZE                                0x1
#define _RPOR4_5_RPO4R1_LENGTH                              0x1
#define _RPOR4_5_RPO4R1_MASK                                0x2
#define _RPOR4_5_RPO4R2_POSN                                0x2
#define _RPOR4_5_RPO4R2_POSITION                            0x2
#define _RPOR4_5_RPO4R2_SIZE                                0x1
#define _RPOR4_5_RPO4R2_LENGTH                              0x1
#define _RPOR4_5_RPO4R2_MASK                                0x4
#define _RPOR4_5_RPO4R3_POSN                                0x3
#define _RPOR4_5_RPO4R3_POSITION                            0x3
#define _RPOR4_5_RPO4R3_SIZE                                0x1
#define _RPOR4_5_RPO4R3_LENGTH                              0x1
#define _RPOR4_5_RPO4R3_MASK                                0x8
#define _RPOR4_5_RPO5R0_POSN                                0x4
#define _RPOR4_5_RPO5R0_POSITION                            0x4
#define _RPOR4_5_RPO5R0_SIZE                                0x1
#define _RPOR4_5_RPO5R0_LENGTH                              0x1
#define _RPOR4_5_RPO5R0_MASK                                0x10
#define _RPOR4_5_RPO5R1_POSN                                0x5
#define _RPOR4_5_RPO5R1_POSITION                            0x5
#define _RPOR4_5_RPO5R1_SIZE                                0x1
#define _RPOR4_5_RPO5R1_LENGTH                              0x1
#define _RPOR4_5_RPO5R1_MASK                                0x20
#define _RPOR4_5_RPO5R2_POSN                                0x6
#define _RPOR4_5_RPO5R2_POSITION                            0x6
#define _RPOR4_5_RPO5R2_SIZE                                0x1
#define _RPOR4_5_RPO5R2_LENGTH                              0x1
#define _RPOR4_5_RPO5R2_MASK                                0x40
#define _RPOR4_5_RPO5R3_POSN                                0x7
#define _RPOR4_5_RPO5R3_POSITION                            0x7
#define _RPOR4_5_RPO5R3_SIZE                                0x1
#define _RPOR4_5_RPO5R3_LENGTH                              0x1
#define _RPOR4_5_RPO5R3_MASK                                0x80

// Register: RPOR6_7
#define RPOR6_7 RPOR6_7
extern volatile unsigned char           RPOR6_7             __at(0xE15);
#ifndef _LIB_BUILD
asm("RPOR6_7 equ 0E15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO6R                  :4;
        unsigned RPO7R                  :4;
    };
    struct {
        unsigned RPO6R0                 :1;
        unsigned RPO6R1                 :1;
        unsigned RPO6R2                 :1;
        unsigned RPO6R3                 :1;
        unsigned RPO7R0                 :1;
        unsigned RPO7R1                 :1;
        unsigned RPO7R2                 :1;
        unsigned RPO7R3                 :1;
    };
} RPOR6_7bits_t;
extern volatile RPOR6_7bits_t RPOR6_7bits __at(0xE15);
// bitfield macros
#define _RPOR6_7_RPO6R_POSN                                 0x0
#define _RPOR6_7_RPO6R_POSITION                             0x0
#define _RPOR6_7_RPO6R_SIZE                                 0x4
#define _RPOR6_7_RPO6R_LENGTH                               0x4
#define _RPOR6_7_RPO6R_MASK                                 0xF
#define _RPOR6_7_RPO7R_POSN                                 0x4
#define _RPOR6_7_RPO7R_POSITION                             0x4
#define _RPOR6_7_RPO7R_SIZE                                 0x4
#define _RPOR6_7_RPO7R_LENGTH                               0x4
#define _RPOR6_7_RPO7R_MASK                                 0xF0
#define _RPOR6_7_RPO6R0_POSN                                0x0
#define _RPOR6_7_RPO6R0_POSITION                            0x0
#define _RPOR6_7_RPO6R0_SIZE                                0x1
#define _RPOR6_7_RPO6R0_LENGTH                              0x1
#define _RPOR6_7_RPO6R0_MASK                                0x1
#define _RPOR6_7_RPO6R1_POSN                                0x1
#define _RPOR6_7_RPO6R1_POSITION                            0x1
#define _RPOR6_7_RPO6R1_SIZE                                0x1
#define _RPOR6_7_RPO6R1_LENGTH                              0x1
#define _RPOR6_7_RPO6R1_MASK                                0x2
#define _RPOR6_7_RPO6R2_POSN                                0x2
#define _RPOR6_7_RPO6R2_POSITION                            0x2
#define _RPOR6_7_RPO6R2_SIZE                                0x1
#define _RPOR6_7_RPO6R2_LENGTH                              0x1
#define _RPOR6_7_RPO6R2_MASK                                0x4
#define _RPOR6_7_RPO6R3_POSN                                0x3
#define _RPOR6_7_RPO6R3_POSITION                            0x3
#define _RPOR6_7_RPO6R3_SIZE                                0x1
#define _RPOR6_7_RPO6R3_LENGTH                              0x1
#define _RPOR6_7_RPO6R3_MASK                                0x8
#define _RPOR6_7_RPO7R0_POSN                                0x4
#define _RPOR6_7_RPO7R0_POSITION                            0x4
#define _RPOR6_7_RPO7R0_SIZE                                0x1
#define _RPOR6_7_RPO7R0_LENGTH                              0x1
#define _RPOR6_7_RPO7R0_MASK                                0x10
#define _RPOR6_7_RPO7R1_POSN                                0x5
#define _RPOR6_7_RPO7R1_POSITION                            0x5
#define _RPOR6_7_RPO7R1_SIZE                                0x1
#define _RPOR6_7_RPO7R1_LENGTH                              0x1
#define _RPOR6_7_RPO7R1_MASK                                0x20
#define _RPOR6_7_RPO7R2_POSN                                0x6
#define _RPOR6_7_RPO7R2_POSITION                            0x6
#define _RPOR6_7_RPO7R2_SIZE                                0x1
#define _RPOR6_7_RPO7R2_LENGTH                              0x1
#define _RPOR6_7_RPO7R2_MASK                                0x40
#define _RPOR6_7_RPO7R3_POSN                                0x7
#define _RPOR6_7_RPO7R3_POSITION                            0x7
#define _RPOR6_7_RPO7R3_SIZE                                0x1
#define _RPOR6_7_RPO7R3_LENGTH                              0x1
#define _RPOR6_7_RPO7R3_MASK                                0x80

// Register: RPOR8_9
#define RPOR8_9 RPOR8_9
extern volatile unsigned char           RPOR8_9             __at(0xE16);
#ifndef _LIB_BUILD
asm("RPOR8_9 equ 0E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO8R                  :4;
        unsigned RPO9R                  :4;
    };
    struct {
        unsigned RPO8R0                 :1;
        unsigned RPO8R1                 :1;
        unsigned RPO8R2                 :1;
        unsigned RPO8R3                 :1;
        unsigned RPO9R0                 :1;
        unsigned RPO9R1                 :1;
        unsigned RPO9R2                 :1;
        unsigned RPO9R3                 :1;
    };
} RPOR8_9bits_t;
extern volatile RPOR8_9bits_t RPOR8_9bits __at(0xE16);
// bitfield macros
#define _RPOR8_9_RPO8R_POSN                                 0x0
#define _RPOR8_9_RPO8R_POSITION                             0x0
#define _RPOR8_9_RPO8R_SIZE                                 0x4
#define _RPOR8_9_RPO8R_LENGTH                               0x4
#define _RPOR8_9_RPO8R_MASK                                 0xF
#define _RPOR8_9_RPO9R_POSN                                 0x4
#define _RPOR8_9_RPO9R_POSITION                             0x4
#define _RPOR8_9_RPO9R_SIZE                                 0x4
#define _RPOR8_9_RPO9R_LENGTH                               0x4
#define _RPOR8_9_RPO9R_MASK                                 0xF0
#define _RPOR8_9_RPO8R0_POSN                                0x0
#define _RPOR8_9_RPO8R0_POSITION                            0x0
#define _RPOR8_9_RPO8R0_SIZE                                0x1
#define _RPOR8_9_RPO8R0_LENGTH                              0x1
#define _RPOR8_9_RPO8R0_MASK                                0x1
#define _RPOR8_9_RPO8R1_POSN                                0x1
#define _RPOR8_9_RPO8R1_POSITION                            0x1
#define _RPOR8_9_RPO8R1_SIZE                                0x1
#define _RPOR8_9_RPO8R1_LENGTH                              0x1
#define _RPOR8_9_RPO8R1_MASK                                0x2
#define _RPOR8_9_RPO8R2_POSN                                0x2
#define _RPOR8_9_RPO8R2_POSITION                            0x2
#define _RPOR8_9_RPO8R2_SIZE                                0x1
#define _RPOR8_9_RPO8R2_LENGTH                              0x1
#define _RPOR8_9_RPO8R2_MASK                                0x4
#define _RPOR8_9_RPO8R3_POSN                                0x3
#define _RPOR8_9_RPO8R3_POSITION                            0x3
#define _RPOR8_9_RPO8R3_SIZE                                0x1
#define _RPOR8_9_RPO8R3_LENGTH                              0x1
#define _RPOR8_9_RPO8R3_MASK                                0x8
#define _RPOR8_9_RPO9R0_POSN                                0x4
#define _RPOR8_9_RPO9R0_POSITION                            0x4
#define _RPOR8_9_RPO9R0_SIZE                                0x1
#define _RPOR8_9_RPO9R0_LENGTH                              0x1
#define _RPOR8_9_RPO9R0_MASK                                0x10
#define _RPOR8_9_RPO9R1_POSN                                0x5
#define _RPOR8_9_RPO9R1_POSITION                            0x5
#define _RPOR8_9_RPO9R1_SIZE                                0x1
#define _RPOR8_9_RPO9R1_LENGTH                              0x1
#define _RPOR8_9_RPO9R1_MASK                                0x20
#define _RPOR8_9_RPO9R2_POSN                                0x6
#define _RPOR8_9_RPO9R2_POSITION                            0x6
#define _RPOR8_9_RPO9R2_SIZE                                0x1
#define _RPOR8_9_RPO9R2_LENGTH                              0x1
#define _RPOR8_9_RPO9R2_MASK                                0x40
#define _RPOR8_9_RPO9R3_POSN                                0x7
#define _RPOR8_9_RPO9R3_POSITION                            0x7
#define _RPOR8_9_RPO9R3_SIZE                                0x1
#define _RPOR8_9_RPO9R3_LENGTH                              0x1
#define _RPOR8_9_RPO9R3_MASK                                0x80

// Register: RPOR10_11
#define RPOR10_11 RPOR10_11
extern volatile unsigned char           RPOR10_11           __at(0xE17);
#ifndef _LIB_BUILD
asm("RPOR10_11 equ 0E17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO10R                 :4;
        unsigned RPO11R                 :4;
    };
    struct {
        unsigned RPO10R0                :1;
        unsigned RPO10R1                :1;
        unsigned RPO10R2                :1;
        unsigned RPO10R3                :1;
        unsigned RPO11R0                :1;
        unsigned RPO11R1                :1;
        unsigned RPO11R2                :1;
        unsigned RPO11R3                :1;
    };
} RPOR10_11bits_t;
extern volatile RPOR10_11bits_t RPOR10_11bits __at(0xE17);
// bitfield macros
#define _RPOR10_11_RPO10R_POSN                              0x0
#define _RPOR10_11_RPO10R_POSITION                          0x0
#define _RPOR10_11_RPO10R_SIZE                              0x4
#define _RPOR10_11_RPO10R_LENGTH                            0x4
#define _RPOR10_11_RPO10R_MASK                              0xF
#define _RPOR10_11_RPO11R_POSN                              0x4
#define _RPOR10_11_RPO11R_POSITION                          0x4
#define _RPOR10_11_RPO11R_SIZE                              0x4
#define _RPOR10_11_RPO11R_LENGTH                            0x4
#define _RPOR10_11_RPO11R_MASK                              0xF0
#define _RPOR10_11_RPO10R0_POSN                             0x0
#define _RPOR10_11_RPO10R0_POSITION                         0x0
#define _RPOR10_11_RPO10R0_SIZE                             0x1
#define _RPOR10_11_RPO10R0_LENGTH                           0x1
#define _RPOR10_11_RPO10R0_MASK                             0x1
#define _RPOR10_11_RPO10R1_POSN                             0x1
#define _RPOR10_11_RPO10R1_POSITION                         0x1
#define _RPOR10_11_RPO10R1_SIZE                             0x1
#define _RPOR10_11_RPO10R1_LENGTH                           0x1
#define _RPOR10_11_RPO10R1_MASK                             0x2
#define _RPOR10_11_RPO10R2_POSN                             0x2
#define _RPOR10_11_RPO10R2_POSITION                         0x2
#define _RPOR10_11_RPO10R2_SIZE                             0x1
#define _RPOR10_11_RPO10R2_LENGTH                           0x1
#define _RPOR10_11_RPO10R2_MASK                             0x4
#define _RPOR10_11_RPO10R3_POSN                             0x3
#define _RPOR10_11_RPO10R3_POSITION                         0x3
#define _RPOR10_11_RPO10R3_SIZE                             0x1
#define _RPOR10_11_RPO10R3_LENGTH                           0x1
#define _RPOR10_11_RPO10R3_MASK                             0x8
#define _RPOR10_11_RPO11R0_POSN                             0x4
#define _RPOR10_11_RPO11R0_POSITION                         0x4
#define _RPOR10_11_RPO11R0_SIZE                             0x1
#define _RPOR10_11_RPO11R0_LENGTH                           0x1
#define _RPOR10_11_RPO11R0_MASK                             0x10
#define _RPOR10_11_RPO11R1_POSN                             0x5
#define _RPOR10_11_RPO11R1_POSITION                         0x5
#define _RPOR10_11_RPO11R1_SIZE                             0x1
#define _RPOR10_11_RPO11R1_LENGTH                           0x1
#define _RPOR10_11_RPO11R1_MASK                             0x20
#define _RPOR10_11_RPO11R2_POSN                             0x6
#define _RPOR10_11_RPO11R2_POSITION                         0x6
#define _RPOR10_11_RPO11R2_SIZE                             0x1
#define _RPOR10_11_RPO11R2_LENGTH                           0x1
#define _RPOR10_11_RPO11R2_MASK                             0x40
#define _RPOR10_11_RPO11R3_POSN                             0x7
#define _RPOR10_11_RPO11R3_POSITION                         0x7
#define _RPOR10_11_RPO11R3_SIZE                             0x1
#define _RPOR10_11_RPO11R3_LENGTH                           0x1
#define _RPOR10_11_RPO11R3_MASK                             0x80

// Register: RPOR12_13
#define RPOR12_13 RPOR12_13
extern volatile unsigned char           RPOR12_13           __at(0xE18);
#ifndef _LIB_BUILD
asm("RPOR12_13 equ 0E18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO12R                 :4;
        unsigned RPO13R                 :4;
    };
    struct {
        unsigned RPO12R0                :1;
        unsigned RPO12R1                :1;
        unsigned RPO12R2                :1;
        unsigned RPO12R3                :1;
        unsigned RPO13R0                :1;
        unsigned RPO13R1                :1;
        unsigned RPO13R2                :1;
        unsigned RPO13R3                :1;
    };
} RPOR12_13bits_t;
extern volatile RPOR12_13bits_t RPOR12_13bits __at(0xE18);
// bitfield macros
#define _RPOR12_13_RPO12R_POSN                              0x0
#define _RPOR12_13_RPO12R_POSITION                          0x0
#define _RPOR12_13_RPO12R_SIZE                              0x4
#define _RPOR12_13_RPO12R_LENGTH                            0x4
#define _RPOR12_13_RPO12R_MASK                              0xF
#define _RPOR12_13_RPO13R_POSN                              0x4
#define _RPOR12_13_RPO13R_POSITION                          0x4
#define _RPOR12_13_RPO13R_SIZE                              0x4
#define _RPOR12_13_RPO13R_LENGTH                            0x4
#define _RPOR12_13_RPO13R_MASK                              0xF0
#define _RPOR12_13_RPO12R0_POSN                             0x0
#define _RPOR12_13_RPO12R0_POSITION                         0x0
#define _RPOR12_13_RPO12R0_SIZE                             0x1
#define _RPOR12_13_RPO12R0_LENGTH                           0x1
#define _RPOR12_13_RPO12R0_MASK                             0x1
#define _RPOR12_13_RPO12R1_POSN                             0x1
#define _RPOR12_13_RPO12R1_POSITION                         0x1
#define _RPOR12_13_RPO12R1_SIZE                             0x1
#define _RPOR12_13_RPO12R1_LENGTH                           0x1
#define _RPOR12_13_RPO12R1_MASK                             0x2
#define _RPOR12_13_RPO12R2_POSN                             0x2
#define _RPOR12_13_RPO12R2_POSITION                         0x2
#define _RPOR12_13_RPO12R2_SIZE                             0x1
#define _RPOR12_13_RPO12R2_LENGTH                           0x1
#define _RPOR12_13_RPO12R2_MASK                             0x4
#define _RPOR12_13_RPO12R3_POSN                             0x3
#define _RPOR12_13_RPO12R3_POSITION                         0x3
#define _RPOR12_13_RPO12R3_SIZE                             0x1
#define _RPOR12_13_RPO12R3_LENGTH                           0x1
#define _RPOR12_13_RPO12R3_MASK                             0x8
#define _RPOR12_13_RPO13R0_POSN                             0x4
#define _RPOR12_13_RPO13R0_POSITION                         0x4
#define _RPOR12_13_RPO13R0_SIZE                             0x1
#define _RPOR12_13_RPO13R0_LENGTH                           0x1
#define _RPOR12_13_RPO13R0_MASK                             0x10
#define _RPOR12_13_RPO13R1_POSN                             0x5
#define _RPOR12_13_RPO13R1_POSITION                         0x5
#define _RPOR12_13_RPO13R1_SIZE                             0x1
#define _RPOR12_13_RPO13R1_LENGTH                           0x1
#define _RPOR12_13_RPO13R1_MASK                             0x20
#define _RPOR12_13_RPO13R2_POSN                             0x6
#define _RPOR12_13_RPO13R2_POSITION                         0x6
#define _RPOR12_13_RPO13R2_SIZE                             0x1
#define _RPOR12_13_RPO13R2_LENGTH                           0x1
#define _RPOR12_13_RPO13R2_MASK                             0x40
#define _RPOR12_13_RPO13R3_POSN                             0x7
#define _RPOR12_13_RPO13R3_POSITION                         0x7
#define _RPOR12_13_RPO13R3_SIZE                             0x1
#define _RPOR12_13_RPO13R3_LENGTH                           0x1
#define _RPOR12_13_RPO13R3_MASK                             0x80

// Register: RPOR14_15
#define RPOR14_15 RPOR14_15
extern volatile unsigned char           RPOR14_15           __at(0xE19);
#ifndef _LIB_BUILD
asm("RPOR14_15 equ 0E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO14R                 :4;
        unsigned RPO15R                 :4;
    };
    struct {
        unsigned RPO14R0                :1;
        unsigned RPO14R1                :1;
        unsigned RPO14R2                :1;
        unsigned RPO14R3                :1;
        unsigned RPO15R0                :1;
        unsigned RPO15R1                :1;
        unsigned RPO15R2                :1;
        unsigned RPO15R3                :1;
    };
} RPOR14_15bits_t;
extern volatile RPOR14_15bits_t RPOR14_15bits __at(0xE19);
// bitfield macros
#define _RPOR14_15_RPO14R_POSN                              0x0
#define _RPOR14_15_RPO14R_POSITION                          0x0
#define _RPOR14_15_RPO14R_SIZE                              0x4
#define _RPOR14_15_RPO14R_LENGTH                            0x4
#define _RPOR14_15_RPO14R_MASK                              0xF
#define _RPOR14_15_RPO15R_POSN                              0x4
#define _RPOR14_15_RPO15R_POSITION                          0x4
#define _RPOR14_15_RPO15R_SIZE                              0x4
#define _RPOR14_15_RPO15R_LENGTH                            0x4
#define _RPOR14_15_RPO15R_MASK                              0xF0
#define _RPOR14_15_RPO14R0_POSN                             0x0
#define _RPOR14_15_RPO14R0_POSITION                         0x0
#define _RPOR14_15_RPO14R0_SIZE                             0x1
#define _RPOR14_15_RPO14R0_LENGTH                           0x1
#define _RPOR14_15_RPO14R0_MASK                             0x1
#define _RPOR14_15_RPO14R1_POSN                             0x1
#define _RPOR14_15_RPO14R1_POSITION                         0x1
#define _RPOR14_15_RPO14R1_SIZE                             0x1
#define _RPOR14_15_RPO14R1_LENGTH                           0x1
#define _RPOR14_15_RPO14R1_MASK                             0x2
#define _RPOR14_15_RPO14R2_POSN                             0x2
#define _RPOR14_15_RPO14R2_POSITION                         0x2
#define _RPOR14_15_RPO14R2_SIZE                             0x1
#define _RPOR14_15_RPO14R2_LENGTH                           0x1
#define _RPOR14_15_RPO14R2_MASK                             0x4
#define _RPOR14_15_RPO14R3_POSN                             0x3
#define _RPOR14_15_RPO14R3_POSITION                         0x3
#define _RPOR14_15_RPO14R3_SIZE                             0x1
#define _RPOR14_15_RPO14R3_LENGTH                           0x1
#define _RPOR14_15_RPO14R3_MASK                             0x8
#define _RPOR14_15_RPO15R0_POSN                             0x4
#define _RPOR14_15_RPO15R0_POSITION                         0x4
#define _RPOR14_15_RPO15R0_SIZE                             0x1
#define _RPOR14_15_RPO15R0_LENGTH                           0x1
#define _RPOR14_15_RPO15R0_MASK                             0x10
#define _RPOR14_15_RPO15R1_POSN                             0x5
#define _RPOR14_15_RPO15R1_POSITION                         0x5
#define _RPOR14_15_RPO15R1_SIZE                             0x1
#define _RPOR14_15_RPO15R1_LENGTH                           0x1
#define _RPOR14_15_RPO15R1_MASK                             0x20
#define _RPOR14_15_RPO15R2_POSN                             0x6
#define _RPOR14_15_RPO15R2_POSITION                         0x6
#define _RPOR14_15_RPO15R2_SIZE                             0x1
#define _RPOR14_15_RPO15R2_LENGTH                           0x1
#define _RPOR14_15_RPO15R2_MASK                             0x40
#define _RPOR14_15_RPO15R3_POSN                             0x7
#define _RPOR14_15_RPO15R3_POSITION                         0x7
#define _RPOR14_15_RPO15R3_SIZE                             0x1
#define _RPOR14_15_RPO15R3_LENGTH                           0x1
#define _RPOR14_15_RPO15R3_MASK                             0x80

// Register: RPOR16_17
#define RPOR16_17 RPOR16_17
extern volatile unsigned char           RPOR16_17           __at(0xE1A);
#ifndef _LIB_BUILD
asm("RPOR16_17 equ 0E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO16R                 :4;
        unsigned RPO17R                 :4;
    };
    struct {
        unsigned RPO16R0                :1;
        unsigned RPO16R1                :1;
        unsigned RPO16R2                :1;
        unsigned RPO16R3                :1;
        unsigned RPO17R0                :1;
        unsigned RPO17R1                :1;
        unsigned RPO17R2                :1;
        unsigned RPO17R3                :1;
    };
} RPOR16_17bits_t;
extern volatile RPOR16_17bits_t RPOR16_17bits __at(0xE1A);
// bitfield macros
#define _RPOR16_17_RPO16R_POSN                              0x0
#define _RPOR16_17_RPO16R_POSITION                          0x0
#define _RPOR16_17_RPO16R_SIZE                              0x4
#define _RPOR16_17_RPO16R_LENGTH                            0x4
#define _RPOR16_17_RPO16R_MASK                              0xF
#define _RPOR16_17_RPO17R_POSN                              0x4
#define _RPOR16_17_RPO17R_POSITION                          0x4
#define _RPOR16_17_RPO17R_SIZE                              0x4
#define _RPOR16_17_RPO17R_LENGTH                            0x4
#define _RPOR16_17_RPO17R_MASK                              0xF0
#define _RPOR16_17_RPO16R0_POSN                             0x0
#define _RPOR16_17_RPO16R0_POSITION                         0x0
#define _RPOR16_17_RPO16R0_SIZE                             0x1
#define _RPOR16_17_RPO16R0_LENGTH                           0x1
#define _RPOR16_17_RPO16R0_MASK                             0x1
#define _RPOR16_17_RPO16R1_POSN                             0x1
#define _RPOR16_17_RPO16R1_POSITION                         0x1
#define _RPOR16_17_RPO16R1_SIZE                             0x1
#define _RPOR16_17_RPO16R1_LENGTH                           0x1
#define _RPOR16_17_RPO16R1_MASK                             0x2
#define _RPOR16_17_RPO16R2_POSN                             0x2
#define _RPOR16_17_RPO16R2_POSITION                         0x2
#define _RPOR16_17_RPO16R2_SIZE                             0x1
#define _RPOR16_17_RPO16R2_LENGTH                           0x1
#define _RPOR16_17_RPO16R2_MASK                             0x4
#define _RPOR16_17_RPO16R3_POSN                             0x3
#define _RPOR16_17_RPO16R3_POSITION                         0x3
#define _RPOR16_17_RPO16R3_SIZE                             0x1
#define _RPOR16_17_RPO16R3_LENGTH                           0x1
#define _RPOR16_17_RPO16R3_MASK                             0x8
#define _RPOR16_17_RPO17R0_POSN                             0x4
#define _RPOR16_17_RPO17R0_POSITION                         0x4
#define _RPOR16_17_RPO17R0_SIZE                             0x1
#define _RPOR16_17_RPO17R0_LENGTH                           0x1
#define _RPOR16_17_RPO17R0_MASK                             0x10
#define _RPOR16_17_RPO17R1_POSN                             0x5
#define _RPOR16_17_RPO17R1_POSITION                         0x5
#define _RPOR16_17_RPO17R1_SIZE                             0x1
#define _RPOR16_17_RPO17R1_LENGTH                           0x1
#define _RPOR16_17_RPO17R1_MASK                             0x20
#define _RPOR16_17_RPO17R2_POSN                             0x6
#define _RPOR16_17_RPO17R2_POSITION                         0x6
#define _RPOR16_17_RPO17R2_SIZE                             0x1
#define _RPOR16_17_RPO17R2_LENGTH                           0x1
#define _RPOR16_17_RPO17R2_MASK                             0x40
#define _RPOR16_17_RPO17R3_POSN                             0x7
#define _RPOR16_17_RPO17R3_POSITION                         0x7
#define _RPOR16_17_RPO17R3_SIZE                             0x1
#define _RPOR16_17_RPO17R3_LENGTH                           0x1
#define _RPOR16_17_RPO17R3_MASK                             0x80

// Register: RPOR18_19
#define RPOR18_19 RPOR18_19
extern volatile unsigned char           RPOR18_19           __at(0xE1B);
#ifndef _LIB_BUILD
asm("RPOR18_19 equ 0E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO18R                 :4;
        unsigned RPO19R                 :4;
    };
    struct {
        unsigned RPO18R0                :1;
        unsigned RPO18R1                :1;
        unsigned RPO18R2                :1;
        unsigned RPO18R3                :1;
        unsigned RPO19R0                :1;
        unsigned RPO19R1                :1;
        unsigned RPO19R2                :1;
        unsigned RPO19R3                :1;
    };
} RPOR18_19bits_t;
extern volatile RPOR18_19bits_t RPOR18_19bits __at(0xE1B);
// bitfield macros
#define _RPOR18_19_RPO18R_POSN                              0x0
#define _RPOR18_19_RPO18R_POSITION                          0x0
#define _RPOR18_19_RPO18R_SIZE                              0x4
#define _RPOR18_19_RPO18R_LENGTH                            0x4
#define _RPOR18_19_RPO18R_MASK                              0xF
#define _RPOR18_19_RPO19R_POSN                              0x4
#define _RPOR18_19_RPO19R_POSITION                          0x4
#define _RPOR18_19_RPO19R_SIZE                              0x4
#define _RPOR18_19_RPO19R_LENGTH                            0x4
#define _RPOR18_19_RPO19R_MASK                              0xF0
#define _RPOR18_19_RPO18R0_POSN                             0x0
#define _RPOR18_19_RPO18R0_POSITION                         0x0
#define _RPOR18_19_RPO18R0_SIZE                             0x1
#define _RPOR18_19_RPO18R0_LENGTH                           0x1
#define _RPOR18_19_RPO18R0_MASK                             0x1
#define _RPOR18_19_RPO18R1_POSN                             0x1
#define _RPOR18_19_RPO18R1_POSITION                         0x1
#define _RPOR18_19_RPO18R1_SIZE                             0x1
#define _RPOR18_19_RPO18R1_LENGTH                           0x1
#define _RPOR18_19_RPO18R1_MASK                             0x2
#define _RPOR18_19_RPO18R2_POSN                             0x2
#define _RPOR18_19_RPO18R2_POSITION                         0x2
#define _RPOR18_19_RPO18R2_SIZE                             0x1
#define _RPOR18_19_RPO18R2_LENGTH                           0x1
#define _RPOR18_19_RPO18R2_MASK                             0x4
#define _RPOR18_19_RPO18R3_POSN                             0x3
#define _RPOR18_19_RPO18R3_POSITION                         0x3
#define _RPOR18_19_RPO18R3_SIZE                             0x1
#define _RPOR18_19_RPO18R3_LENGTH                           0x1
#define _RPOR18_19_RPO18R3_MASK                             0x8
#define _RPOR18_19_RPO19R0_POSN                             0x4
#define _RPOR18_19_RPO19R0_POSITION                         0x4
#define _RPOR18_19_RPO19R0_SIZE                             0x1
#define _RPOR18_19_RPO19R0_LENGTH                           0x1
#define _RPOR18_19_RPO19R0_MASK                             0x10
#define _RPOR18_19_RPO19R1_POSN                             0x5
#define _RPOR18_19_RPO19R1_POSITION                         0x5
#define _RPOR18_19_RPO19R1_SIZE                             0x1
#define _RPOR18_19_RPO19R1_LENGTH                           0x1
#define _RPOR18_19_RPO19R1_MASK                             0x20
#define _RPOR18_19_RPO19R2_POSN                             0x6
#define _RPOR18_19_RPO19R2_POSITION                         0x6
#define _RPOR18_19_RPO19R2_SIZE                             0x1
#define _RPOR18_19_RPO19R2_LENGTH                           0x1
#define _RPOR18_19_RPO19R2_MASK                             0x40
#define _RPOR18_19_RPO19R3_POSN                             0x7
#define _RPOR18_19_RPO19R3_POSITION                         0x7
#define _RPOR18_19_RPO19R3_SIZE                             0x1
#define _RPOR18_19_RPO19R3_LENGTH                           0x1
#define _RPOR18_19_RPO19R3_MASK                             0x80

// Register: RPOR20_21
#define RPOR20_21 RPOR20_21
extern volatile unsigned char           RPOR20_21           __at(0xE1C);
#ifndef _LIB_BUILD
asm("RPOR20_21 equ 0E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO20R                 :4;
        unsigned RPO21R                 :4;
    };
    struct {
        unsigned RPO20R0                :1;
        unsigned RPO20R1                :1;
        unsigned RPO20R2                :1;
        unsigned RPO20R3                :1;
        unsigned RPO21R0                :1;
        unsigned RPO21R1                :1;
        unsigned RPO21R2                :1;
        unsigned RPO21R3                :1;
    };
} RPOR20_21bits_t;
extern volatile RPOR20_21bits_t RPOR20_21bits __at(0xE1C);
// bitfield macros
#define _RPOR20_21_RPO20R_POSN                              0x0
#define _RPOR20_21_RPO20R_POSITION                          0x0
#define _RPOR20_21_RPO20R_SIZE                              0x4
#define _RPOR20_21_RPO20R_LENGTH                            0x4
#define _RPOR20_21_RPO20R_MASK                              0xF
#define _RPOR20_21_RPO21R_POSN                              0x4
#define _RPOR20_21_RPO21R_POSITION                          0x4
#define _RPOR20_21_RPO21R_SIZE                              0x4
#define _RPOR20_21_RPO21R_LENGTH                            0x4
#define _RPOR20_21_RPO21R_MASK                              0xF0
#define _RPOR20_21_RPO20R0_POSN                             0x0
#define _RPOR20_21_RPO20R0_POSITION                         0x0
#define _RPOR20_21_RPO20R0_SIZE                             0x1
#define _RPOR20_21_RPO20R0_LENGTH                           0x1
#define _RPOR20_21_RPO20R0_MASK                             0x1
#define _RPOR20_21_RPO20R1_POSN                             0x1
#define _RPOR20_21_RPO20R1_POSITION                         0x1
#define _RPOR20_21_RPO20R1_SIZE                             0x1
#define _RPOR20_21_RPO20R1_LENGTH                           0x1
#define _RPOR20_21_RPO20R1_MASK                             0x2
#define _RPOR20_21_RPO20R2_POSN                             0x2
#define _RPOR20_21_RPO20R2_POSITION                         0x2
#define _RPOR20_21_RPO20R2_SIZE                             0x1
#define _RPOR20_21_RPO20R2_LENGTH                           0x1
#define _RPOR20_21_RPO20R2_MASK                             0x4
#define _RPOR20_21_RPO20R3_POSN                             0x3
#define _RPOR20_21_RPO20R3_POSITION                         0x3
#define _RPOR20_21_RPO20R3_SIZE                             0x1
#define _RPOR20_21_RPO20R3_LENGTH                           0x1
#define _RPOR20_21_RPO20R3_MASK                             0x8
#define _RPOR20_21_RPO21R0_POSN                             0x4
#define _RPOR20_21_RPO21R0_POSITION                         0x4
#define _RPOR20_21_RPO21R0_SIZE                             0x1
#define _RPOR20_21_RPO21R0_LENGTH                           0x1
#define _RPOR20_21_RPO21R0_MASK                             0x10
#define _RPOR20_21_RPO21R1_POSN                             0x5
#define _RPOR20_21_RPO21R1_POSITION                         0x5
#define _RPOR20_21_RPO21R1_SIZE                             0x1
#define _RPOR20_21_RPO21R1_LENGTH                           0x1
#define _RPOR20_21_RPO21R1_MASK                             0x20
#define _RPOR20_21_RPO21R2_POSN                             0x6
#define _RPOR20_21_RPO21R2_POSITION                         0x6
#define _RPOR20_21_RPO21R2_SIZE                             0x1
#define _RPOR20_21_RPO21R2_LENGTH                           0x1
#define _RPOR20_21_RPO21R2_MASK                             0x40
#define _RPOR20_21_RPO21R3_POSN                             0x7
#define _RPOR20_21_RPO21R3_POSITION                         0x7
#define _RPOR20_21_RPO21R3_SIZE                             0x1
#define _RPOR20_21_RPO21R3_LENGTH                           0x1
#define _RPOR20_21_RPO21R3_MASK                             0x80

// Register: RPOR22_23
#define RPOR22_23 RPOR22_23
extern volatile unsigned char           RPOR22_23           __at(0xE1D);
#ifndef _LIB_BUILD
asm("RPOR22_23 equ 0E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO22R                 :4;
        unsigned RPO23R                 :4;
    };
    struct {
        unsigned RPO22R0                :1;
        unsigned RPO22R1                :1;
        unsigned RPO22R2                :1;
        unsigned RPO22R3                :1;
        unsigned RPO23R0                :1;
        unsigned RPO23R1                :1;
        unsigned RPO23R2                :1;
        unsigned RPO23R3                :1;
    };
} RPOR22_23bits_t;
extern volatile RPOR22_23bits_t RPOR22_23bits __at(0xE1D);
// bitfield macros
#define _RPOR22_23_RPO22R_POSN                              0x0
#define _RPOR22_23_RPO22R_POSITION                          0x0
#define _RPOR22_23_RPO22R_SIZE                              0x4
#define _RPOR22_23_RPO22R_LENGTH                            0x4
#define _RPOR22_23_RPO22R_MASK                              0xF
#define _RPOR22_23_RPO23R_POSN                              0x4
#define _RPOR22_23_RPO23R_POSITION                          0x4
#define _RPOR22_23_RPO23R_SIZE                              0x4
#define _RPOR22_23_RPO23R_LENGTH                            0x4
#define _RPOR22_23_RPO23R_MASK                              0xF0
#define _RPOR22_23_RPO22R0_POSN                             0x0
#define _RPOR22_23_RPO22R0_POSITION                         0x0
#define _RPOR22_23_RPO22R0_SIZE                             0x1
#define _RPOR22_23_RPO22R0_LENGTH                           0x1
#define _RPOR22_23_RPO22R0_MASK                             0x1
#define _RPOR22_23_RPO22R1_POSN                             0x1
#define _RPOR22_23_RPO22R1_POSITION                         0x1
#define _RPOR22_23_RPO22R1_SIZE                             0x1
#define _RPOR22_23_RPO22R1_LENGTH                           0x1
#define _RPOR22_23_RPO22R1_MASK                             0x2
#define _RPOR22_23_RPO22R2_POSN                             0x2
#define _RPOR22_23_RPO22R2_POSITION                         0x2
#define _RPOR22_23_RPO22R2_SIZE                             0x1
#define _RPOR22_23_RPO22R2_LENGTH                           0x1
#define _RPOR22_23_RPO22R2_MASK                             0x4
#define _RPOR22_23_RPO22R3_POSN                             0x3
#define _RPOR22_23_RPO22R3_POSITION                         0x3
#define _RPOR22_23_RPO22R3_SIZE                             0x1
#define _RPOR22_23_RPO22R3_LENGTH                           0x1
#define _RPOR22_23_RPO22R3_MASK                             0x8
#define _RPOR22_23_RPO23R0_POSN                             0x4
#define _RPOR22_23_RPO23R0_POSITION                         0x4
#define _RPOR22_23_RPO23R0_SIZE                             0x1
#define _RPOR22_23_RPO23R0_LENGTH                           0x1
#define _RPOR22_23_RPO23R0_MASK                             0x10
#define _RPOR22_23_RPO23R1_POSN                             0x5
#define _RPOR22_23_RPO23R1_POSITION                         0x5
#define _RPOR22_23_RPO23R1_SIZE                             0x1
#define _RPOR22_23_RPO23R1_LENGTH                           0x1
#define _RPOR22_23_RPO23R1_MASK                             0x20
#define _RPOR22_23_RPO23R2_POSN                             0x6
#define _RPOR22_23_RPO23R2_POSITION                         0x6
#define _RPOR22_23_RPO23R2_SIZE                             0x1
#define _RPOR22_23_RPO23R2_LENGTH                           0x1
#define _RPOR22_23_RPO23R2_MASK                             0x40
#define _RPOR22_23_RPO23R3_POSN                             0x7
#define _RPOR22_23_RPO23R3_POSITION                         0x7
#define _RPOR22_23_RPO23R3_SIZE                             0x1
#define _RPOR22_23_RPO23R3_LENGTH                           0x1
#define _RPOR22_23_RPO23R3_MASK                             0x80

// Register: RPOR24_25
#define RPOR24_25 RPOR24_25
extern volatile unsigned char           RPOR24_25           __at(0xE1E);
#ifndef _LIB_BUILD
asm("RPOR24_25 equ 0E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO24R                 :4;
        unsigned RPO25R                 :4;
    };
    struct {
        unsigned RPO24R0                :1;
        unsigned RPO24R1                :1;
        unsigned RPO24R2                :1;
        unsigned RPO24R3                :1;
        unsigned RPO25R0                :1;
        unsigned RPO25R1                :1;
        unsigned RPO25R2                :1;
        unsigned RPO25R3                :1;
    };
} RPOR24_25bits_t;
extern volatile RPOR24_25bits_t RPOR24_25bits __at(0xE1E);
// bitfield macros
#define _RPOR24_25_RPO24R_POSN                              0x0
#define _RPOR24_25_RPO24R_POSITION                          0x0
#define _RPOR24_25_RPO24R_SIZE                              0x4
#define _RPOR24_25_RPO24R_LENGTH                            0x4
#define _RPOR24_25_RPO24R_MASK                              0xF
#define _RPOR24_25_RPO25R_POSN                              0x4
#define _RPOR24_25_RPO25R_POSITION                          0x4
#define _RPOR24_25_RPO25R_SIZE                              0x4
#define _RPOR24_25_RPO25R_LENGTH                            0x4
#define _RPOR24_25_RPO25R_MASK                              0xF0
#define _RPOR24_25_RPO24R0_POSN                             0x0
#define _RPOR24_25_RPO24R0_POSITION                         0x0
#define _RPOR24_25_RPO24R0_SIZE                             0x1
#define _RPOR24_25_RPO24R0_LENGTH                           0x1
#define _RPOR24_25_RPO24R0_MASK                             0x1
#define _RPOR24_25_RPO24R1_POSN                             0x1
#define _RPOR24_25_RPO24R1_POSITION                         0x1
#define _RPOR24_25_RPO24R1_SIZE                             0x1
#define _RPOR24_25_RPO24R1_LENGTH                           0x1
#define _RPOR24_25_RPO24R1_MASK                             0x2
#define _RPOR24_25_RPO24R2_POSN                             0x2
#define _RPOR24_25_RPO24R2_POSITION                         0x2
#define _RPOR24_25_RPO24R2_SIZE                             0x1
#define _RPOR24_25_RPO24R2_LENGTH                           0x1
#define _RPOR24_25_RPO24R2_MASK                             0x4
#define _RPOR24_25_RPO24R3_POSN                             0x3
#define _RPOR24_25_RPO24R3_POSITION                         0x3
#define _RPOR24_25_RPO24R3_SIZE                             0x1
#define _RPOR24_25_RPO24R3_LENGTH                           0x1
#define _RPOR24_25_RPO24R3_MASK                             0x8
#define _RPOR24_25_RPO25R0_POSN                             0x4
#define _RPOR24_25_RPO25R0_POSITION                         0x4
#define _RPOR24_25_RPO25R0_SIZE                             0x1
#define _RPOR24_25_RPO25R0_LENGTH                           0x1
#define _RPOR24_25_RPO25R0_MASK                             0x10
#define _RPOR24_25_RPO25R1_POSN                             0x5
#define _RPOR24_25_RPO25R1_POSITION                         0x5
#define _RPOR24_25_RPO25R1_SIZE                             0x1
#define _RPOR24_25_RPO25R1_LENGTH                           0x1
#define _RPOR24_25_RPO25R1_MASK                             0x20
#define _RPOR24_25_RPO25R2_POSN                             0x6
#define _RPOR24_25_RPO25R2_POSITION                         0x6
#define _RPOR24_25_RPO25R2_SIZE                             0x1
#define _RPOR24_25_RPO25R2_LENGTH                           0x1
#define _RPOR24_25_RPO25R2_MASK                             0x40
#define _RPOR24_25_RPO25R3_POSN                             0x7
#define _RPOR24_25_RPO25R3_POSITION                         0x7
#define _RPOR24_25_RPO25R3_SIZE                             0x1
#define _RPOR24_25_RPO25R3_LENGTH                           0x1
#define _RPOR24_25_RPO25R3_MASK                             0x80

// Register: RPOR26_27
#define RPOR26_27 RPOR26_27
extern volatile unsigned char           RPOR26_27           __at(0xE1F);
#ifndef _LIB_BUILD
asm("RPOR26_27 equ 0E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO26R                 :4;
        unsigned RPO27R                 :4;
    };
    struct {
        unsigned RPO26R0                :1;
        unsigned RPO26R1                :1;
        unsigned RPO26R2                :1;
        unsigned RPO26R3                :1;
        unsigned RPO27R0                :1;
        unsigned RPO27R1                :1;
        unsigned RPO27R2                :1;
        unsigned RPO27R3                :1;
    };
} RPOR26_27bits_t;
extern volatile RPOR26_27bits_t RPOR26_27bits __at(0xE1F);
// bitfield macros
#define _RPOR26_27_RPO26R_POSN                              0x0
#define _RPOR26_27_RPO26R_POSITION                          0x0
#define _RPOR26_27_RPO26R_SIZE                              0x4
#define _RPOR26_27_RPO26R_LENGTH                            0x4
#define _RPOR26_27_RPO26R_MASK                              0xF
#define _RPOR26_27_RPO27R_POSN                              0x4
#define _RPOR26_27_RPO27R_POSITION                          0x4
#define _RPOR26_27_RPO27R_SIZE                              0x4
#define _RPOR26_27_RPO27R_LENGTH                            0x4
#define _RPOR26_27_RPO27R_MASK                              0xF0
#define _RPOR26_27_RPO26R0_POSN                             0x0
#define _RPOR26_27_RPO26R0_POSITION                         0x0
#define _RPOR26_27_RPO26R0_SIZE                             0x1
#define _RPOR26_27_RPO26R0_LENGTH                           0x1
#define _RPOR26_27_RPO26R0_MASK                             0x1
#define _RPOR26_27_RPO26R1_POSN                             0x1
#define _RPOR26_27_RPO26R1_POSITION                         0x1
#define _RPOR26_27_RPO26R1_SIZE                             0x1
#define _RPOR26_27_RPO26R1_LENGTH                           0x1
#define _RPOR26_27_RPO26R1_MASK                             0x2
#define _RPOR26_27_RPO26R2_POSN                             0x2
#define _RPOR26_27_RPO26R2_POSITION                         0x2
#define _RPOR26_27_RPO26R2_SIZE                             0x1
#define _RPOR26_27_RPO26R2_LENGTH                           0x1
#define _RPOR26_27_RPO26R2_MASK                             0x4
#define _RPOR26_27_RPO26R3_POSN                             0x3
#define _RPOR26_27_RPO26R3_POSITION                         0x3
#define _RPOR26_27_RPO26R3_SIZE                             0x1
#define _RPOR26_27_RPO26R3_LENGTH                           0x1
#define _RPOR26_27_RPO26R3_MASK                             0x8
#define _RPOR26_27_RPO27R0_POSN                             0x4
#define _RPOR26_27_RPO27R0_POSITION                         0x4
#define _RPOR26_27_RPO27R0_SIZE                             0x1
#define _RPOR26_27_RPO27R0_LENGTH                           0x1
#define _RPOR26_27_RPO27R0_MASK                             0x10
#define _RPOR26_27_RPO27R1_POSN                             0x5
#define _RPOR26_27_RPO27R1_POSITION                         0x5
#define _RPOR26_27_RPO27R1_SIZE                             0x1
#define _RPOR26_27_RPO27R1_LENGTH                           0x1
#define _RPOR26_27_RPO27R1_MASK                             0x20
#define _RPOR26_27_RPO27R2_POSN                             0x6
#define _RPOR26_27_RPO27R2_POSITION                         0x6
#define _RPOR26_27_RPO27R2_SIZE                             0x1
#define _RPOR26_27_RPO27R2_LENGTH                           0x1
#define _RPOR26_27_RPO27R2_MASK                             0x40
#define _RPOR26_27_RPO27R3_POSN                             0x7
#define _RPOR26_27_RPO27R3_POSITION                         0x7
#define _RPOR26_27_RPO27R3_SIZE                             0x1
#define _RPOR26_27_RPO27R3_LENGTH                           0x1
#define _RPOR26_27_RPO27R3_MASK                             0x80

// Register: RPOR28_29
#define RPOR28_29 RPOR28_29
extern volatile unsigned char           RPOR28_29           __at(0xE20);
#ifndef _LIB_BUILD
asm("RPOR28_29 equ 0E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO28R                 :4;
        unsigned RPO29R                 :4;
    };
    struct {
        unsigned RPO28R0                :1;
        unsigned RPO28R1                :1;
        unsigned RPO28R2                :1;
        unsigned RPO28R3                :1;
        unsigned RPO29R0                :1;
        unsigned RPO29R1                :1;
        unsigned RPO29R2                :1;
        unsigned RPO29R3                :1;
    };
} RPOR28_29bits_t;
extern volatile RPOR28_29bits_t RPOR28_29bits __at(0xE20);
// bitfield macros
#define _RPOR28_29_RPO28R_POSN                              0x0
#define _RPOR28_29_RPO28R_POSITION                          0x0
#define _RPOR28_29_RPO28R_SIZE                              0x4
#define _RPOR28_29_RPO28R_LENGTH                            0x4
#define _RPOR28_29_RPO28R_MASK                              0xF
#define _RPOR28_29_RPO29R_POSN                              0x4
#define _RPOR28_29_RPO29R_POSITION                          0x4
#define _RPOR28_29_RPO29R_SIZE                              0x4
#define _RPOR28_29_RPO29R_LENGTH                            0x4
#define _RPOR28_29_RPO29R_MASK                              0xF0
#define _RPOR28_29_RPO28R0_POSN                             0x0
#define _RPOR28_29_RPO28R0_POSITION                         0x0
#define _RPOR28_29_RPO28R0_SIZE                             0x1
#define _RPOR28_29_RPO28R0_LENGTH                           0x1
#define _RPOR28_29_RPO28R0_MASK                             0x1
#define _RPOR28_29_RPO28R1_POSN                             0x1
#define _RPOR28_29_RPO28R1_POSITION                         0x1
#define _RPOR28_29_RPO28R1_SIZE                             0x1
#define _RPOR28_29_RPO28R1_LENGTH                           0x1
#define _RPOR28_29_RPO28R1_MASK                             0x2
#define _RPOR28_29_RPO28R2_POSN                             0x2
#define _RPOR28_29_RPO28R2_POSITION                         0x2
#define _RPOR28_29_RPO28R2_SIZE                             0x1
#define _RPOR28_29_RPO28R2_LENGTH                           0x1
#define _RPOR28_29_RPO28R2_MASK                             0x4
#define _RPOR28_29_RPO28R3_POSN                             0x3
#define _RPOR28_29_RPO28R3_POSITION                         0x3
#define _RPOR28_29_RPO28R3_SIZE                             0x1
#define _RPOR28_29_RPO28R3_LENGTH                           0x1
#define _RPOR28_29_RPO28R3_MASK                             0x8
#define _RPOR28_29_RPO29R0_POSN                             0x4
#define _RPOR28_29_RPO29R0_POSITION                         0x4
#define _RPOR28_29_RPO29R0_SIZE                             0x1
#define _RPOR28_29_RPO29R0_LENGTH                           0x1
#define _RPOR28_29_RPO29R0_MASK                             0x10
#define _RPOR28_29_RPO29R1_POSN                             0x5
#define _RPOR28_29_RPO29R1_POSITION                         0x5
#define _RPOR28_29_RPO29R1_SIZE                             0x1
#define _RPOR28_29_RPO29R1_LENGTH                           0x1
#define _RPOR28_29_RPO29R1_MASK                             0x20
#define _RPOR28_29_RPO29R2_POSN                             0x6
#define _RPOR28_29_RPO29R2_POSITION                         0x6
#define _RPOR28_29_RPO29R2_SIZE                             0x1
#define _RPOR28_29_RPO29R2_LENGTH                           0x1
#define _RPOR28_29_RPO29R2_MASK                             0x40
#define _RPOR28_29_RPO29R3_POSN                             0x7
#define _RPOR28_29_RPO29R3_POSITION                         0x7
#define _RPOR28_29_RPO29R3_SIZE                             0x1
#define _RPOR28_29_RPO29R3_LENGTH                           0x1
#define _RPOR28_29_RPO29R3_MASK                             0x80

// Register: RPOR30_31
#define RPOR30_31 RPOR30_31
extern volatile unsigned char           RPOR30_31           __at(0xE21);
#ifndef _LIB_BUILD
asm("RPOR30_31 equ 0E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO30R                 :4;
        unsigned RPO31R                 :4;
    };
    struct {
        unsigned RPO30R0                :1;
        unsigned RPO30R1                :1;
        unsigned RPO30R2                :1;
        unsigned RPO30R3                :1;
        unsigned RPO31R0                :1;
        unsigned RPO31R1                :1;
        unsigned RPO31R2                :1;
        unsigned RPO31R3                :1;
    };
} RPOR30_31bits_t;
extern volatile RPOR30_31bits_t RPOR30_31bits __at(0xE21);
// bitfield macros
#define _RPOR30_31_RPO30R_POSN                              0x0
#define _RPOR30_31_RPO30R_POSITION                          0x0
#define _RPOR30_31_RPO30R_SIZE                              0x4
#define _RPOR30_31_RPO30R_LENGTH                            0x4
#define _RPOR30_31_RPO30R_MASK                              0xF
#define _RPOR30_31_RPO31R_POSN                              0x4
#define _RPOR30_31_RPO31R_POSITION                          0x4
#define _RPOR30_31_RPO31R_SIZE                              0x4
#define _RPOR30_31_RPO31R_LENGTH                            0x4
#define _RPOR30_31_RPO31R_MASK                              0xF0
#define _RPOR30_31_RPO30R0_POSN                             0x0
#define _RPOR30_31_RPO30R0_POSITION                         0x0
#define _RPOR30_31_RPO30R0_SIZE                             0x1
#define _RPOR30_31_RPO30R0_LENGTH                           0x1
#define _RPOR30_31_RPO30R0_MASK                             0x1
#define _RPOR30_31_RPO30R1_POSN                             0x1
#define _RPOR30_31_RPO30R1_POSITION                         0x1
#define _RPOR30_31_RPO30R1_SIZE                             0x1
#define _RPOR30_31_RPO30R1_LENGTH                           0x1
#define _RPOR30_31_RPO30R1_MASK                             0x2
#define _RPOR30_31_RPO30R2_POSN                             0x2
#define _RPOR30_31_RPO30R2_POSITION                         0x2
#define _RPOR30_31_RPO30R2_SIZE                             0x1
#define _RPOR30_31_RPO30R2_LENGTH                           0x1
#define _RPOR30_31_RPO30R2_MASK                             0x4
#define _RPOR30_31_RPO30R3_POSN                             0x3
#define _RPOR30_31_RPO30R3_POSITION                         0x3
#define _RPOR30_31_RPO30R3_SIZE                             0x1
#define _RPOR30_31_RPO30R3_LENGTH                           0x1
#define _RPOR30_31_RPO30R3_MASK                             0x8
#define _RPOR30_31_RPO31R0_POSN                             0x4
#define _RPOR30_31_RPO31R0_POSITION                         0x4
#define _RPOR30_31_RPO31R0_SIZE                             0x1
#define _RPOR30_31_RPO31R0_LENGTH                           0x1
#define _RPOR30_31_RPO31R0_MASK                             0x10
#define _RPOR30_31_RPO31R1_POSN                             0x5
#define _RPOR30_31_RPO31R1_POSITION                         0x5
#define _RPOR30_31_RPO31R1_SIZE                             0x1
#define _RPOR30_31_RPO31R1_LENGTH                           0x1
#define _RPOR30_31_RPO31R1_MASK                             0x20
#define _RPOR30_31_RPO31R2_POSN                             0x6
#define _RPOR30_31_RPO31R2_POSITION                         0x6
#define _RPOR30_31_RPO31R2_SIZE                             0x1
#define _RPOR30_31_RPO31R2_LENGTH                           0x1
#define _RPOR30_31_RPO31R2_MASK                             0x40
#define _RPOR30_31_RPO31R3_POSN                             0x7
#define _RPOR30_31_RPO31R3_POSITION                         0x7
#define _RPOR30_31_RPO31R3_SIZE                             0x1
#define _RPOR30_31_RPO31R3_LENGTH                           0x1
#define _RPOR30_31_RPO31R3_MASK                             0x80

// Register: RPOR32_33
#define RPOR32_33 RPOR32_33
extern volatile unsigned char           RPOR32_33           __at(0xE22);
#ifndef _LIB_BUILD
asm("RPOR32_33 equ 0E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO32R                 :4;
        unsigned RPO33R                 :4;
    };
    struct {
        unsigned RPO32R0                :1;
        unsigned RPO32R1                :1;
        unsigned RPO32R2                :1;
        unsigned RPO32R3                :1;
        unsigned RPO33R0                :1;
        unsigned RPO33R1                :1;
        unsigned RPO33R2                :1;
        unsigned RPO33R3                :1;
    };
} RPOR32_33bits_t;
extern volatile RPOR32_33bits_t RPOR32_33bits __at(0xE22);
// bitfield macros
#define _RPOR32_33_RPO32R_POSN                              0x0
#define _RPOR32_33_RPO32R_POSITION                          0x0
#define _RPOR32_33_RPO32R_SIZE                              0x4
#define _RPOR32_33_RPO32R_LENGTH                            0x4
#define _RPOR32_33_RPO32R_MASK                              0xF
#define _RPOR32_33_RPO33R_POSN                              0x4
#define _RPOR32_33_RPO33R_POSITION                          0x4
#define _RPOR32_33_RPO33R_SIZE                              0x4
#define _RPOR32_33_RPO33R_LENGTH                            0x4
#define _RPOR32_33_RPO33R_MASK                              0xF0
#define _RPOR32_33_RPO32R0_POSN                             0x0
#define _RPOR32_33_RPO32R0_POSITION                         0x0
#define _RPOR32_33_RPO32R0_SIZE                             0x1
#define _RPOR32_33_RPO32R0_LENGTH                           0x1
#define _RPOR32_33_RPO32R0_MASK                             0x1
#define _RPOR32_33_RPO32R1_POSN                             0x1
#define _RPOR32_33_RPO32R1_POSITION                         0x1
#define _RPOR32_33_RPO32R1_SIZE                             0x1
#define _RPOR32_33_RPO32R1_LENGTH                           0x1
#define _RPOR32_33_RPO32R1_MASK                             0x2
#define _RPOR32_33_RPO32R2_POSN                             0x2
#define _RPOR32_33_RPO32R2_POSITION                         0x2
#define _RPOR32_33_RPO32R2_SIZE                             0x1
#define _RPOR32_33_RPO32R2_LENGTH                           0x1
#define _RPOR32_33_RPO32R2_MASK                             0x4
#define _RPOR32_33_RPO32R3_POSN                             0x3
#define _RPOR32_33_RPO32R3_POSITION                         0x3
#define _RPOR32_33_RPO32R3_SIZE                             0x1
#define _RPOR32_33_RPO32R3_LENGTH                           0x1
#define _RPOR32_33_RPO32R3_MASK                             0x8
#define _RPOR32_33_RPO33R0_POSN                             0x4
#define _RPOR32_33_RPO33R0_POSITION                         0x4
#define _RPOR32_33_RPO33R0_SIZE                             0x1
#define _RPOR32_33_RPO33R0_LENGTH                           0x1
#define _RPOR32_33_RPO33R0_MASK                             0x10
#define _RPOR32_33_RPO33R1_POSN                             0x5
#define _RPOR32_33_RPO33R1_POSITION                         0x5
#define _RPOR32_33_RPO33R1_SIZE                             0x1
#define _RPOR32_33_RPO33R1_LENGTH                           0x1
#define _RPOR32_33_RPO33R1_MASK                             0x20
#define _RPOR32_33_RPO33R2_POSN                             0x6
#define _RPOR32_33_RPO33R2_POSITION                         0x6
#define _RPOR32_33_RPO33R2_SIZE                             0x1
#define _RPOR32_33_RPO33R2_LENGTH                           0x1
#define _RPOR32_33_RPO33R2_MASK                             0x40
#define _RPOR32_33_RPO33R3_POSN                             0x7
#define _RPOR32_33_RPO33R3_POSITION                         0x7
#define _RPOR32_33_RPO33R3_SIZE                             0x1
#define _RPOR32_33_RPO33R3_LENGTH                           0x1
#define _RPOR32_33_RPO33R3_MASK                             0x80

// Register: RPOR34_35
#define RPOR34_35 RPOR34_35
extern volatile unsigned char           RPOR34_35           __at(0xE23);
#ifndef _LIB_BUILD
asm("RPOR34_35 equ 0E23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO34R                 :4;
        unsigned RPO35R                 :4;
    };
    struct {
        unsigned RPO34R0                :1;
        unsigned RPO34R1                :1;
        unsigned RPO34R2                :1;
        unsigned RPO34R3                :1;
        unsigned RPO35R0                :1;
        unsigned RPO35R1                :1;
        unsigned RPO35R2                :1;
        unsigned RPO35R3                :1;
    };
} RPOR34_35bits_t;
extern volatile RPOR34_35bits_t RPOR34_35bits __at(0xE23);
// bitfield macros
#define _RPOR34_35_RPO34R_POSN                              0x0
#define _RPOR34_35_RPO34R_POSITION                          0x0
#define _RPOR34_35_RPO34R_SIZE                              0x4
#define _RPOR34_35_RPO34R_LENGTH                            0x4
#define _RPOR34_35_RPO34R_MASK                              0xF
#define _RPOR34_35_RPO35R_POSN                              0x4
#define _RPOR34_35_RPO35R_POSITION                          0x4
#define _RPOR34_35_RPO35R_SIZE                              0x4
#define _RPOR34_35_RPO35R_LENGTH                            0x4
#define _RPOR34_35_RPO35R_MASK                              0xF0
#define _RPOR34_35_RPO34R0_POSN                             0x0
#define _RPOR34_35_RPO34R0_POSITION                         0x0
#define _RPOR34_35_RPO34R0_SIZE                             0x1
#define _RPOR34_35_RPO34R0_LENGTH                           0x1
#define _RPOR34_35_RPO34R0_MASK                             0x1
#define _RPOR34_35_RPO34R1_POSN                             0x1
#define _RPOR34_35_RPO34R1_POSITION                         0x1
#define _RPOR34_35_RPO34R1_SIZE                             0x1
#define _RPOR34_35_RPO34R1_LENGTH                           0x1
#define _RPOR34_35_RPO34R1_MASK                             0x2
#define _RPOR34_35_RPO34R2_POSN                             0x2
#define _RPOR34_35_RPO34R2_POSITION                         0x2
#define _RPOR34_35_RPO34R2_SIZE                             0x1
#define _RPOR34_35_RPO34R2_LENGTH                           0x1
#define _RPOR34_35_RPO34R2_MASK                             0x4
#define _RPOR34_35_RPO34R3_POSN                             0x3
#define _RPOR34_35_RPO34R3_POSITION                         0x3
#define _RPOR34_35_RPO34R3_SIZE                             0x1
#define _RPOR34_35_RPO34R3_LENGTH                           0x1
#define _RPOR34_35_RPO34R3_MASK                             0x8
#define _RPOR34_35_RPO35R0_POSN                             0x4
#define _RPOR34_35_RPO35R0_POSITION                         0x4
#define _RPOR34_35_RPO35R0_SIZE                             0x1
#define _RPOR34_35_RPO35R0_LENGTH                           0x1
#define _RPOR34_35_RPO35R0_MASK                             0x10
#define _RPOR34_35_RPO35R1_POSN                             0x5
#define _RPOR34_35_RPO35R1_POSITION                         0x5
#define _RPOR34_35_RPO35R1_SIZE                             0x1
#define _RPOR34_35_RPO35R1_LENGTH                           0x1
#define _RPOR34_35_RPO35R1_MASK                             0x20
#define _RPOR34_35_RPO35R2_POSN                             0x6
#define _RPOR34_35_RPO35R2_POSITION                         0x6
#define _RPOR34_35_RPO35R2_SIZE                             0x1
#define _RPOR34_35_RPO35R2_LENGTH                           0x1
#define _RPOR34_35_RPO35R2_MASK                             0x40
#define _RPOR34_35_RPO35R3_POSN                             0x7
#define _RPOR34_35_RPO35R3_POSITION                         0x7
#define _RPOR34_35_RPO35R3_SIZE                             0x1
#define _RPOR34_35_RPO35R3_LENGTH                           0x1
#define _RPOR34_35_RPO35R3_MASK                             0x80

// Register: RPOR36_37
#define RPOR36_37 RPOR36_37
extern volatile unsigned char           RPOR36_37           __at(0xE24);
#ifndef _LIB_BUILD
asm("RPOR36_37 equ 0E24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO36R                 :4;
        unsigned RPO37R                 :4;
    };
    struct {
        unsigned RPO36R0                :1;
        unsigned RPO36R1                :1;
        unsigned RPO36R2                :1;
        unsigned RPO36R3                :1;
        unsigned RPO37R0                :1;
        unsigned RPO37R1                :1;
        unsigned RPO37R2                :1;
        unsigned RPO37R3                :1;
    };
} RPOR36_37bits_t;
extern volatile RPOR36_37bits_t RPOR36_37bits __at(0xE24);
// bitfield macros
#define _RPOR36_37_RPO36R_POSN                              0x0
#define _RPOR36_37_RPO36R_POSITION                          0x0
#define _RPOR36_37_RPO36R_SIZE                              0x4
#define _RPOR36_37_RPO36R_LENGTH                            0x4
#define _RPOR36_37_RPO36R_MASK                              0xF
#define _RPOR36_37_RPO37R_POSN                              0x4
#define _RPOR36_37_RPO37R_POSITION                          0x4
#define _RPOR36_37_RPO37R_SIZE                              0x4
#define _RPOR36_37_RPO37R_LENGTH                            0x4
#define _RPOR36_37_RPO37R_MASK                              0xF0
#define _RPOR36_37_RPO36R0_POSN                             0x0
#define _RPOR36_37_RPO36R0_POSITION                         0x0
#define _RPOR36_37_RPO36R0_SIZE                             0x1
#define _RPOR36_37_RPO36R0_LENGTH                           0x1
#define _RPOR36_37_RPO36R0_MASK                             0x1
#define _RPOR36_37_RPO36R1_POSN                             0x1
#define _RPOR36_37_RPO36R1_POSITION                         0x1
#define _RPOR36_37_RPO36R1_SIZE                             0x1
#define _RPOR36_37_RPO36R1_LENGTH                           0x1
#define _RPOR36_37_RPO36R1_MASK                             0x2
#define _RPOR36_37_RPO36R2_POSN                             0x2
#define _RPOR36_37_RPO36R2_POSITION                         0x2
#define _RPOR36_37_RPO36R2_SIZE                             0x1
#define _RPOR36_37_RPO36R2_LENGTH                           0x1
#define _RPOR36_37_RPO36R2_MASK                             0x4
#define _RPOR36_37_RPO36R3_POSN                             0x3
#define _RPOR36_37_RPO36R3_POSITION                         0x3
#define _RPOR36_37_RPO36R3_SIZE                             0x1
#define _RPOR36_37_RPO36R3_LENGTH                           0x1
#define _RPOR36_37_RPO36R3_MASK                             0x8
#define _RPOR36_37_RPO37R0_POSN                             0x4
#define _RPOR36_37_RPO37R0_POSITION                         0x4
#define _RPOR36_37_RPO37R0_SIZE                             0x1
#define _RPOR36_37_RPO37R0_LENGTH                           0x1
#define _RPOR36_37_RPO37R0_MASK                             0x10
#define _RPOR36_37_RPO37R1_POSN                             0x5
#define _RPOR36_37_RPO37R1_POSITION                         0x5
#define _RPOR36_37_RPO37R1_SIZE                             0x1
#define _RPOR36_37_RPO37R1_LENGTH                           0x1
#define _RPOR36_37_RPO37R1_MASK                             0x20
#define _RPOR36_37_RPO37R2_POSN                             0x6
#define _RPOR36_37_RPO37R2_POSITION                         0x6
#define _RPOR36_37_RPO37R2_SIZE                             0x1
#define _RPOR36_37_RPO37R2_LENGTH                           0x1
#define _RPOR36_37_RPO37R2_MASK                             0x40
#define _RPOR36_37_RPO37R3_POSN                             0x7
#define _RPOR36_37_RPO37R3_POSITION                         0x7
#define _RPOR36_37_RPO37R3_SIZE                             0x1
#define _RPOR36_37_RPO37R3_LENGTH                           0x1
#define _RPOR36_37_RPO37R3_MASK                             0x80

// Register: RPOR38_39
#define RPOR38_39 RPOR38_39
extern volatile unsigned char           RPOR38_39           __at(0xE25);
#ifndef _LIB_BUILD
asm("RPOR38_39 equ 0E25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO38R                 :4;
        unsigned RPO39R                 :4;
    };
    struct {
        unsigned RPO38R0                :1;
        unsigned RPO38R1                :1;
        unsigned RPO38R2                :1;
        unsigned RPO38R3                :1;
        unsigned RPO39R0                :1;
        unsigned RPO39R1                :1;
        unsigned RPO39R2                :1;
        unsigned RPO39R3                :1;
    };
} RPOR38_39bits_t;
extern volatile RPOR38_39bits_t RPOR38_39bits __at(0xE25);
// bitfield macros
#define _RPOR38_39_RPO38R_POSN                              0x0
#define _RPOR38_39_RPO38R_POSITION                          0x0
#define _RPOR38_39_RPO38R_SIZE                              0x4
#define _RPOR38_39_RPO38R_LENGTH                            0x4
#define _RPOR38_39_RPO38R_MASK                              0xF
#define _RPOR38_39_RPO39R_POSN                              0x4
#define _RPOR38_39_RPO39R_POSITION                          0x4
#define _RPOR38_39_RPO39R_SIZE                              0x4
#define _RPOR38_39_RPO39R_LENGTH                            0x4
#define _RPOR38_39_RPO39R_MASK                              0xF0
#define _RPOR38_39_RPO38R0_POSN                             0x0
#define _RPOR38_39_RPO38R0_POSITION                         0x0
#define _RPOR38_39_RPO38R0_SIZE                             0x1
#define _RPOR38_39_RPO38R0_LENGTH                           0x1
#define _RPOR38_39_RPO38R0_MASK                             0x1
#define _RPOR38_39_RPO38R1_POSN                             0x1
#define _RPOR38_39_RPO38R1_POSITION                         0x1
#define _RPOR38_39_RPO38R1_SIZE                             0x1
#define _RPOR38_39_RPO38R1_LENGTH                           0x1
#define _RPOR38_39_RPO38R1_MASK                             0x2
#define _RPOR38_39_RPO38R2_POSN                             0x2
#define _RPOR38_39_RPO38R2_POSITION                         0x2
#define _RPOR38_39_RPO38R2_SIZE                             0x1
#define _RPOR38_39_RPO38R2_LENGTH                           0x1
#define _RPOR38_39_RPO38R2_MASK                             0x4
#define _RPOR38_39_RPO38R3_POSN                             0x3
#define _RPOR38_39_RPO38R3_POSITION                         0x3
#define _RPOR38_39_RPO38R3_SIZE                             0x1
#define _RPOR38_39_RPO38R3_LENGTH                           0x1
#define _RPOR38_39_RPO38R3_MASK                             0x8
#define _RPOR38_39_RPO39R0_POSN                             0x4
#define _RPOR38_39_RPO39R0_POSITION                         0x4
#define _RPOR38_39_RPO39R0_SIZE                             0x1
#define _RPOR38_39_RPO39R0_LENGTH                           0x1
#define _RPOR38_39_RPO39R0_MASK                             0x10
#define _RPOR38_39_RPO39R1_POSN                             0x5
#define _RPOR38_39_RPO39R1_POSITION                         0x5
#define _RPOR38_39_RPO39R1_SIZE                             0x1
#define _RPOR38_39_RPO39R1_LENGTH                           0x1
#define _RPOR38_39_RPO39R1_MASK                             0x20
#define _RPOR38_39_RPO39R2_POSN                             0x6
#define _RPOR38_39_RPO39R2_POSITION                         0x6
#define _RPOR38_39_RPO39R2_SIZE                             0x1
#define _RPOR38_39_RPO39R2_LENGTH                           0x1
#define _RPOR38_39_RPO39R2_MASK                             0x40
#define _RPOR38_39_RPO39R3_POSN                             0x7
#define _RPOR38_39_RPO39R3_POSITION                         0x7
#define _RPOR38_39_RPO39R3_SIZE                             0x1
#define _RPOR38_39_RPO39R3_LENGTH                           0x1
#define _RPOR38_39_RPO39R3_MASK                             0x80

// Register: RPOR40_41
#define RPOR40_41 RPOR40_41
extern volatile unsigned char           RPOR40_41           __at(0xE26);
#ifndef _LIB_BUILD
asm("RPOR40_41 equ 0E26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO40R                 :4;
        unsigned RPO41R                 :4;
    };
    struct {
        unsigned RPO40R0                :1;
        unsigned RPO40R1                :1;
        unsigned RPO40R2                :1;
        unsigned RPO40R3                :1;
        unsigned RPO41R0                :1;
        unsigned RPO41R1                :1;
        unsigned RPO41R2                :1;
        unsigned RPO41R3                :1;
    };
} RPOR40_41bits_t;
extern volatile RPOR40_41bits_t RPOR40_41bits __at(0xE26);
// bitfield macros
#define _RPOR40_41_RPO40R_POSN                              0x0
#define _RPOR40_41_RPO40R_POSITION                          0x0
#define _RPOR40_41_RPO40R_SIZE                              0x4
#define _RPOR40_41_RPO40R_LENGTH                            0x4
#define _RPOR40_41_RPO40R_MASK                              0xF
#define _RPOR40_41_RPO41R_POSN                              0x4
#define _RPOR40_41_RPO41R_POSITION                          0x4
#define _RPOR40_41_RPO41R_SIZE                              0x4
#define _RPOR40_41_RPO41R_LENGTH                            0x4
#define _RPOR40_41_RPO41R_MASK                              0xF0
#define _RPOR40_41_RPO40R0_POSN                             0x0
#define _RPOR40_41_RPO40R0_POSITION                         0x0
#define _RPOR40_41_RPO40R0_SIZE                             0x1
#define _RPOR40_41_RPO40R0_LENGTH                           0x1
#define _RPOR40_41_RPO40R0_MASK                             0x1
#define _RPOR40_41_RPO40R1_POSN                             0x1
#define _RPOR40_41_RPO40R1_POSITION                         0x1
#define _RPOR40_41_RPO40R1_SIZE                             0x1
#define _RPOR40_41_RPO40R1_LENGTH                           0x1
#define _RPOR40_41_RPO40R1_MASK                             0x2
#define _RPOR40_41_RPO40R2_POSN                             0x2
#define _RPOR40_41_RPO40R2_POSITION                         0x2
#define _RPOR40_41_RPO40R2_SIZE                             0x1
#define _RPOR40_41_RPO40R2_LENGTH                           0x1
#define _RPOR40_41_RPO40R2_MASK                             0x4
#define _RPOR40_41_RPO40R3_POSN                             0x3
#define _RPOR40_41_RPO40R3_POSITION                         0x3
#define _RPOR40_41_RPO40R3_SIZE                             0x1
#define _RPOR40_41_RPO40R3_LENGTH                           0x1
#define _RPOR40_41_RPO40R3_MASK                             0x8
#define _RPOR40_41_RPO41R0_POSN                             0x4
#define _RPOR40_41_RPO41R0_POSITION                         0x4
#define _RPOR40_41_RPO41R0_SIZE                             0x1
#define _RPOR40_41_RPO41R0_LENGTH                           0x1
#define _RPOR40_41_RPO41R0_MASK                             0x10
#define _RPOR40_41_RPO41R1_POSN                             0x5
#define _RPOR40_41_RPO41R1_POSITION                         0x5
#define _RPOR40_41_RPO41R1_SIZE                             0x1
#define _RPOR40_41_RPO41R1_LENGTH                           0x1
#define _RPOR40_41_RPO41R1_MASK                             0x20
#define _RPOR40_41_RPO41R2_POSN                             0x6
#define _RPOR40_41_RPO41R2_POSITION                         0x6
#define _RPOR40_41_RPO41R2_SIZE                             0x1
#define _RPOR40_41_RPO41R2_LENGTH                           0x1
#define _RPOR40_41_RPO41R2_MASK                             0x40
#define _RPOR40_41_RPO41R3_POSN                             0x7
#define _RPOR40_41_RPO41R3_POSITION                         0x7
#define _RPOR40_41_RPO41R3_SIZE                             0x1
#define _RPOR40_41_RPO41R3_LENGTH                           0x1
#define _RPOR40_41_RPO41R3_MASK                             0x80

// Register: RPOR42_43
#define RPOR42_43 RPOR42_43
extern volatile unsigned char           RPOR42_43           __at(0xE27);
#ifndef _LIB_BUILD
asm("RPOR42_43 equ 0E27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO42R                 :4;
        unsigned RPO43R                 :4;
    };
    struct {
        unsigned RPO42R0                :1;
        unsigned RPO42R1                :1;
        unsigned RPO42R2                :1;
        unsigned RPO42R3                :1;
        unsigned RPO43R0                :1;
        unsigned RPO43R1                :1;
        unsigned RPO43R2                :1;
        unsigned RPO43R3                :1;
    };
} RPOR42_43bits_t;
extern volatile RPOR42_43bits_t RPOR42_43bits __at(0xE27);
// bitfield macros
#define _RPOR42_43_RPO42R_POSN                              0x0
#define _RPOR42_43_RPO42R_POSITION                          0x0
#define _RPOR42_43_RPO42R_SIZE                              0x4
#define _RPOR42_43_RPO42R_LENGTH                            0x4
#define _RPOR42_43_RPO42R_MASK                              0xF
#define _RPOR42_43_RPO43R_POSN                              0x4
#define _RPOR42_43_RPO43R_POSITION                          0x4
#define _RPOR42_43_RPO43R_SIZE                              0x4
#define _RPOR42_43_RPO43R_LENGTH                            0x4
#define _RPOR42_43_RPO43R_MASK                              0xF0
#define _RPOR42_43_RPO42R0_POSN                             0x0
#define _RPOR42_43_RPO42R0_POSITION                         0x0
#define _RPOR42_43_RPO42R0_SIZE                             0x1
#define _RPOR42_43_RPO42R0_LENGTH                           0x1
#define _RPOR42_43_RPO42R0_MASK                             0x1
#define _RPOR42_43_RPO42R1_POSN                             0x1
#define _RPOR42_43_RPO42R1_POSITION                         0x1
#define _RPOR42_43_RPO42R1_SIZE                             0x1
#define _RPOR42_43_RPO42R1_LENGTH                           0x1
#define _RPOR42_43_RPO42R1_MASK                             0x2
#define _RPOR42_43_RPO42R2_POSN                             0x2
#define _RPOR42_43_RPO42R2_POSITION                         0x2
#define _RPOR42_43_RPO42R2_SIZE                             0x1
#define _RPOR42_43_RPO42R2_LENGTH                           0x1
#define _RPOR42_43_RPO42R2_MASK                             0x4
#define _RPOR42_43_RPO42R3_POSN                             0x3
#define _RPOR42_43_RPO42R3_POSITION                         0x3
#define _RPOR42_43_RPO42R3_SIZE                             0x1
#define _RPOR42_43_RPO42R3_LENGTH                           0x1
#define _RPOR42_43_RPO42R3_MASK                             0x8
#define _RPOR42_43_RPO43R0_POSN                             0x4
#define _RPOR42_43_RPO43R0_POSITION                         0x4
#define _RPOR42_43_RPO43R0_SIZE                             0x1
#define _RPOR42_43_RPO43R0_LENGTH                           0x1
#define _RPOR42_43_RPO43R0_MASK                             0x10
#define _RPOR42_43_RPO43R1_POSN                             0x5
#define _RPOR42_43_RPO43R1_POSITION                         0x5
#define _RPOR42_43_RPO43R1_SIZE                             0x1
#define _RPOR42_43_RPO43R1_LENGTH                           0x1
#define _RPOR42_43_RPO43R1_MASK                             0x20
#define _RPOR42_43_RPO43R2_POSN                             0x6
#define _RPOR42_43_RPO43R2_POSITION                         0x6
#define _RPOR42_43_RPO43R2_SIZE                             0x1
#define _RPOR42_43_RPO43R2_LENGTH                           0x1
#define _RPOR42_43_RPO43R2_MASK                             0x40
#define _RPOR42_43_RPO43R3_POSN                             0x7
#define _RPOR42_43_RPO43R3_POSITION                         0x7
#define _RPOR42_43_RPO43R3_SIZE                             0x1
#define _RPOR42_43_RPO43R3_LENGTH                           0x1
#define _RPOR42_43_RPO43R3_MASK                             0x80

// Register: RPOR44_45
#define RPOR44_45 RPOR44_45
extern volatile unsigned char           RPOR44_45           __at(0xE28);
#ifndef _LIB_BUILD
asm("RPOR44_45 equ 0E28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO44R                 :4;
        unsigned RPO45R                 :4;
    };
    struct {
        unsigned RPO44R0                :1;
        unsigned RPO44R1                :1;
        unsigned RPO44R2                :1;
        unsigned RPO44R3                :1;
        unsigned RPO45R0                :1;
        unsigned RPO45R1                :1;
        unsigned RPO45R2                :1;
        unsigned RPO45R3                :1;
    };
} RPOR44_45bits_t;
extern volatile RPOR44_45bits_t RPOR44_45bits __at(0xE28);
// bitfield macros
#define _RPOR44_45_RPO44R_POSN                              0x0
#define _RPOR44_45_RPO44R_POSITION                          0x0
#define _RPOR44_45_RPO44R_SIZE                              0x4
#define _RPOR44_45_RPO44R_LENGTH                            0x4
#define _RPOR44_45_RPO44R_MASK                              0xF
#define _RPOR44_45_RPO45R_POSN                              0x4
#define _RPOR44_45_RPO45R_POSITION                          0x4
#define _RPOR44_45_RPO45R_SIZE                              0x4
#define _RPOR44_45_RPO45R_LENGTH                            0x4
#define _RPOR44_45_RPO45R_MASK                              0xF0
#define _RPOR44_45_RPO44R0_POSN                             0x0
#define _RPOR44_45_RPO44R0_POSITION                         0x0
#define _RPOR44_45_RPO44R0_SIZE                             0x1
#define _RPOR44_45_RPO44R0_LENGTH                           0x1
#define _RPOR44_45_RPO44R0_MASK                             0x1
#define _RPOR44_45_RPO44R1_POSN                             0x1
#define _RPOR44_45_RPO44R1_POSITION                         0x1
#define _RPOR44_45_RPO44R1_SIZE                             0x1
#define _RPOR44_45_RPO44R1_LENGTH                           0x1
#define _RPOR44_45_RPO44R1_MASK                             0x2
#define _RPOR44_45_RPO44R2_POSN                             0x2
#define _RPOR44_45_RPO44R2_POSITION                         0x2
#define _RPOR44_45_RPO44R2_SIZE                             0x1
#define _RPOR44_45_RPO44R2_LENGTH                           0x1
#define _RPOR44_45_RPO44R2_MASK                             0x4
#define _RPOR44_45_RPO44R3_POSN                             0x3
#define _RPOR44_45_RPO44R3_POSITION                         0x3
#define _RPOR44_45_RPO44R3_SIZE                             0x1
#define _RPOR44_45_RPO44R3_LENGTH                           0x1
#define _RPOR44_45_RPO44R3_MASK                             0x8
#define _RPOR44_45_RPO45R0_POSN                             0x4
#define _RPOR44_45_RPO45R0_POSITION                         0x4
#define _RPOR44_45_RPO45R0_SIZE                             0x1
#define _RPOR44_45_RPO45R0_LENGTH                           0x1
#define _RPOR44_45_RPO45R0_MASK                             0x10
#define _RPOR44_45_RPO45R1_POSN                             0x5
#define _RPOR44_45_RPO45R1_POSITION                         0x5
#define _RPOR44_45_RPO45R1_SIZE                             0x1
#define _RPOR44_45_RPO45R1_LENGTH                           0x1
#define _RPOR44_45_RPO45R1_MASK                             0x20
#define _RPOR44_45_RPO45R2_POSN                             0x6
#define _RPOR44_45_RPO45R2_POSITION                         0x6
#define _RPOR44_45_RPO45R2_SIZE                             0x1
#define _RPOR44_45_RPO45R2_LENGTH                           0x1
#define _RPOR44_45_RPO45R2_MASK                             0x40
#define _RPOR44_45_RPO45R3_POSN                             0x7
#define _RPOR44_45_RPO45R3_POSITION                         0x7
#define _RPOR44_45_RPO45R3_SIZE                             0x1
#define _RPOR44_45_RPO45R3_LENGTH                           0x1
#define _RPOR44_45_RPO45R3_MASK                             0x80

// Register: RPOR46
#define RPOR46 RPOR46
extern volatile unsigned char           RPOR46              __at(0xE29);
#ifndef _LIB_BUILD
asm("RPOR46 equ 0E29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPO46R                 :4;
    };
    struct {
        unsigned RPO46R0                :1;
        unsigned RPO46R1                :1;
        unsigned RPO46R2                :1;
        unsigned RPO46R3                :1;
    };
} RPOR46bits_t;
extern volatile RPOR46bits_t RPOR46bits __at(0xE29);
// bitfield macros
#define _RPOR46_RPO46R_POSN                                 0x0
#define _RPOR46_RPO46R_POSITION                             0x0
#define _RPOR46_RPO46R_SIZE                                 0x4
#define _RPOR46_RPO46R_LENGTH                               0x4
#define _RPOR46_RPO46R_MASK                                 0xF
#define _RPOR46_RPO46R0_POSN                                0x0
#define _RPOR46_RPO46R0_POSITION                            0x0
#define _RPOR46_RPO46R0_SIZE                                0x1
#define _RPOR46_RPO46R0_LENGTH                              0x1
#define _RPOR46_RPO46R0_MASK                                0x1
#define _RPOR46_RPO46R1_POSN                                0x1
#define _RPOR46_RPO46R1_POSITION                            0x1
#define _RPOR46_RPO46R1_SIZE                                0x1
#define _RPOR46_RPO46R1_LENGTH                              0x1
#define _RPOR46_RPO46R1_MASK                                0x2
#define _RPOR46_RPO46R2_POSN                                0x2
#define _RPOR46_RPO46R2_POSITION                            0x2
#define _RPOR46_RPO46R2_SIZE                                0x1
#define _RPOR46_RPO46R2_LENGTH                              0x1
#define _RPOR46_RPO46R2_MASK                                0x4
#define _RPOR46_RPO46R3_POSN                                0x3
#define _RPOR46_RPO46R3_POSITION                            0x3
#define _RPOR46_RPO46R3_SIZE                                0x1
#define _RPOR46_RPO46R3_LENGTH                              0x1
#define _RPOR46_RPO46R3_MASK                                0x8

// Register: RPINR0_1
#define RPINR0_1 RPINR0_1
extern volatile unsigned char           RPINR0_1            __at(0xE2A);
#ifndef _LIB_BUILD
asm("RPINR0_1 equ 0E2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXR                  :4;
        unsigned U1TXR                  :4;
    };
    struct {
        unsigned U1RXR0                 :1;
        unsigned U1RXR1                 :1;
        unsigned U1RXR2                 :1;
        unsigned U1RXR3                 :1;
        unsigned U1TXR0                 :1;
        unsigned U1TXR1                 :1;
        unsigned U1TXR2                 :1;
        unsigned U1TXR3                 :1;
    };
} RPINR0_1bits_t;
extern volatile RPINR0_1bits_t RPINR0_1bits __at(0xE2A);
// bitfield macros
#define _RPINR0_1_U1RXR_POSN                                0x0
#define _RPINR0_1_U1RXR_POSITION                            0x0
#define _RPINR0_1_U1RXR_SIZE                                0x4
#define _RPINR0_1_U1RXR_LENGTH                              0x4
#define _RPINR0_1_U1RXR_MASK                                0xF
#define _RPINR0_1_U1TXR_POSN                                0x4
#define _RPINR0_1_U1TXR_POSITION                            0x4
#define _RPINR0_1_U1TXR_SIZE                                0x4
#define _RPINR0_1_U1TXR_LENGTH                              0x4
#define _RPINR0_1_U1TXR_MASK                                0xF0
#define _RPINR0_1_U1RXR0_POSN                               0x0
#define _RPINR0_1_U1RXR0_POSITION                           0x0
#define _RPINR0_1_U1RXR0_SIZE                               0x1
#define _RPINR0_1_U1RXR0_LENGTH                             0x1
#define _RPINR0_1_U1RXR0_MASK                               0x1
#define _RPINR0_1_U1RXR1_POSN                               0x1
#define _RPINR0_1_U1RXR1_POSITION                           0x1
#define _RPINR0_1_U1RXR1_SIZE                               0x1
#define _RPINR0_1_U1RXR1_LENGTH                             0x1
#define _RPINR0_1_U1RXR1_MASK                               0x2
#define _RPINR0_1_U1RXR2_POSN                               0x2
#define _RPINR0_1_U1RXR2_POSITION                           0x2
#define _RPINR0_1_U1RXR2_SIZE                               0x1
#define _RPINR0_1_U1RXR2_LENGTH                             0x1
#define _RPINR0_1_U1RXR2_MASK                               0x4
#define _RPINR0_1_U1RXR3_POSN                               0x3
#define _RPINR0_1_U1RXR3_POSITION                           0x3
#define _RPINR0_1_U1RXR3_SIZE                               0x1
#define _RPINR0_1_U1RXR3_LENGTH                             0x1
#define _RPINR0_1_U1RXR3_MASK                               0x8
#define _RPINR0_1_U1TXR0_POSN                               0x4
#define _RPINR0_1_U1TXR0_POSITION                           0x4
#define _RPINR0_1_U1TXR0_SIZE                               0x1
#define _RPINR0_1_U1TXR0_LENGTH                             0x1
#define _RPINR0_1_U1TXR0_MASK                               0x10
#define _RPINR0_1_U1TXR1_POSN                               0x5
#define _RPINR0_1_U1TXR1_POSITION                           0x5
#define _RPINR0_1_U1TXR1_SIZE                               0x1
#define _RPINR0_1_U1TXR1_LENGTH                             0x1
#define _RPINR0_1_U1TXR1_MASK                               0x20
#define _RPINR0_1_U1TXR2_POSN                               0x6
#define _RPINR0_1_U1TXR2_POSITION                           0x6
#define _RPINR0_1_U1TXR2_SIZE                               0x1
#define _RPINR0_1_U1TXR2_LENGTH                             0x1
#define _RPINR0_1_U1TXR2_MASK                               0x40
#define _RPINR0_1_U1TXR3_POSN                               0x7
#define _RPINR0_1_U1TXR3_POSITION                           0x7
#define _RPINR0_1_U1TXR3_SIZE                               0x1
#define _RPINR0_1_U1TXR3_LENGTH                             0x1
#define _RPINR0_1_U1TXR3_MASK                               0x80

// Register: RPINR2_3
#define RPINR2_3 RPINR2_3
extern volatile unsigned char           RPINR2_3            __at(0xE2B);
#ifndef _LIB_BUILD
asm("RPINR2_3 equ 0E2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2RXR                  :4;
        unsigned U2TXR                  :4;
    };
    struct {
        unsigned U2RXR0                 :1;
        unsigned U2RXR1                 :1;
        unsigned U2RXR2                 :1;
        unsigned U2RXR3                 :1;
        unsigned U2TXR0                 :1;
        unsigned U2TXR1                 :1;
        unsigned U2TXR2                 :1;
        unsigned U2TXR3                 :1;
    };
} RPINR2_3bits_t;
extern volatile RPINR2_3bits_t RPINR2_3bits __at(0xE2B);
// bitfield macros
#define _RPINR2_3_U2RXR_POSN                                0x0
#define _RPINR2_3_U2RXR_POSITION                            0x0
#define _RPINR2_3_U2RXR_SIZE                                0x4
#define _RPINR2_3_U2RXR_LENGTH                              0x4
#define _RPINR2_3_U2RXR_MASK                                0xF
#define _RPINR2_3_U2TXR_POSN                                0x4
#define _RPINR2_3_U2TXR_POSITION                            0x4
#define _RPINR2_3_U2TXR_SIZE                                0x4
#define _RPINR2_3_U2TXR_LENGTH                              0x4
#define _RPINR2_3_U2TXR_MASK                                0xF0
#define _RPINR2_3_U2RXR0_POSN                               0x0
#define _RPINR2_3_U2RXR0_POSITION                           0x0
#define _RPINR2_3_U2RXR0_SIZE                               0x1
#define _RPINR2_3_U2RXR0_LENGTH                             0x1
#define _RPINR2_3_U2RXR0_MASK                               0x1
#define _RPINR2_3_U2RXR1_POSN                               0x1
#define _RPINR2_3_U2RXR1_POSITION                           0x1
#define _RPINR2_3_U2RXR1_SIZE                               0x1
#define _RPINR2_3_U2RXR1_LENGTH                             0x1
#define _RPINR2_3_U2RXR1_MASK                               0x2
#define _RPINR2_3_U2RXR2_POSN                               0x2
#define _RPINR2_3_U2RXR2_POSITION                           0x2
#define _RPINR2_3_U2RXR2_SIZE                               0x1
#define _RPINR2_3_U2RXR2_LENGTH                             0x1
#define _RPINR2_3_U2RXR2_MASK                               0x4
#define _RPINR2_3_U2RXR3_POSN                               0x3
#define _RPINR2_3_U2RXR3_POSITION                           0x3
#define _RPINR2_3_U2RXR3_SIZE                               0x1
#define _RPINR2_3_U2RXR3_LENGTH                             0x1
#define _RPINR2_3_U2RXR3_MASK                               0x8
#define _RPINR2_3_U2TXR0_POSN                               0x4
#define _RPINR2_3_U2TXR0_POSITION                           0x4
#define _RPINR2_3_U2TXR0_SIZE                               0x1
#define _RPINR2_3_U2TXR0_LENGTH                             0x1
#define _RPINR2_3_U2TXR0_MASK                               0x10
#define _RPINR2_3_U2TXR1_POSN                               0x5
#define _RPINR2_3_U2TXR1_POSITION                           0x5
#define _RPINR2_3_U2TXR1_SIZE                               0x1
#define _RPINR2_3_U2TXR1_LENGTH                             0x1
#define _RPINR2_3_U2TXR1_MASK                               0x20
#define _RPINR2_3_U2TXR2_POSN                               0x6
#define _RPINR2_3_U2TXR2_POSITION                           0x6
#define _RPINR2_3_U2TXR2_SIZE                               0x1
#define _RPINR2_3_U2TXR2_LENGTH                             0x1
#define _RPINR2_3_U2TXR2_MASK                               0x40
#define _RPINR2_3_U2TXR3_POSN                               0x7
#define _RPINR2_3_U2TXR3_POSITION                           0x7
#define _RPINR2_3_U2TXR3_SIZE                               0x1
#define _RPINR2_3_U2TXR3_LENGTH                             0x1
#define _RPINR2_3_U2TXR3_MASK                               0x80

// Register: RPINR4_5
#define RPINR4_5 RPINR4_5
extern volatile unsigned char           RPINR4_5            __at(0xE2C);
#ifndef _LIB_BUILD
asm("RPINR4_5 equ 0E2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U3RXR                  :4;
        unsigned U3TXR                  :4;
    };
    struct {
        unsigned U3RXR0                 :1;
        unsigned U3RXR1                 :1;
        unsigned U3RXR2                 :1;
        unsigned U3RXR3                 :1;
        unsigned U3TXR0                 :1;
        unsigned U3TXR1                 :1;
        unsigned U3TXR2                 :1;
        unsigned U3TXR3                 :1;
    };
} RPINR4_5bits_t;
extern volatile RPINR4_5bits_t RPINR4_5bits __at(0xE2C);
// bitfield macros
#define _RPINR4_5_U3RXR_POSN                                0x0
#define _RPINR4_5_U3RXR_POSITION                            0x0
#define _RPINR4_5_U3RXR_SIZE                                0x4
#define _RPINR4_5_U3RXR_LENGTH                              0x4
#define _RPINR4_5_U3RXR_MASK                                0xF
#define _RPINR4_5_U3TXR_POSN                                0x4
#define _RPINR4_5_U3TXR_POSITION                            0x4
#define _RPINR4_5_U3TXR_SIZE                                0x4
#define _RPINR4_5_U3TXR_LENGTH                              0x4
#define _RPINR4_5_U3TXR_MASK                                0xF0
#define _RPINR4_5_U3RXR0_POSN                               0x0
#define _RPINR4_5_U3RXR0_POSITION                           0x0
#define _RPINR4_5_U3RXR0_SIZE                               0x1
#define _RPINR4_5_U3RXR0_LENGTH                             0x1
#define _RPINR4_5_U3RXR0_MASK                               0x1
#define _RPINR4_5_U3RXR1_POSN                               0x1
#define _RPINR4_5_U3RXR1_POSITION                           0x1
#define _RPINR4_5_U3RXR1_SIZE                               0x1
#define _RPINR4_5_U3RXR1_LENGTH                             0x1
#define _RPINR4_5_U3RXR1_MASK                               0x2
#define _RPINR4_5_U3RXR2_POSN                               0x2
#define _RPINR4_5_U3RXR2_POSITION                           0x2
#define _RPINR4_5_U3RXR2_SIZE                               0x1
#define _RPINR4_5_U3RXR2_LENGTH                             0x1
#define _RPINR4_5_U3RXR2_MASK                               0x4
#define _RPINR4_5_U3RXR3_POSN                               0x3
#define _RPINR4_5_U3RXR3_POSITION                           0x3
#define _RPINR4_5_U3RXR3_SIZE                               0x1
#define _RPINR4_5_U3RXR3_LENGTH                             0x1
#define _RPINR4_5_U3RXR3_MASK                               0x8
#define _RPINR4_5_U3TXR0_POSN                               0x4
#define _RPINR4_5_U3TXR0_POSITION                           0x4
#define _RPINR4_5_U3TXR0_SIZE                               0x1
#define _RPINR4_5_U3TXR0_LENGTH                             0x1
#define _RPINR4_5_U3TXR0_MASK                               0x10
#define _RPINR4_5_U3TXR1_POSN                               0x5
#define _RPINR4_5_U3TXR1_POSITION                           0x5
#define _RPINR4_5_U3TXR1_SIZE                               0x1
#define _RPINR4_5_U3TXR1_LENGTH                             0x1
#define _RPINR4_5_U3TXR1_MASK                               0x20
#define _RPINR4_5_U3TXR2_POSN                               0x6
#define _RPINR4_5_U3TXR2_POSITION                           0x6
#define _RPINR4_5_U3TXR2_SIZE                               0x1
#define _RPINR4_5_U3TXR2_LENGTH                             0x1
#define _RPINR4_5_U3TXR2_MASK                               0x40
#define _RPINR4_5_U3TXR3_POSN                               0x7
#define _RPINR4_5_U3TXR3_POSITION                           0x7
#define _RPINR4_5_U3TXR3_SIZE                               0x1
#define _RPINR4_5_U3TXR3_LENGTH                             0x1
#define _RPINR4_5_U3TXR3_MASK                               0x80

// Register: RPINR6_7
#define RPINR6_7 RPINR6_7
extern volatile unsigned char           RPINR6_7            __at(0xE2D);
#ifndef _LIB_BUILD
asm("RPINR6_7 equ 0E2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U4RXR                  :4;
        unsigned U4TXR                  :4;
    };
    struct {
        unsigned U4RXR0                 :1;
        unsigned U4RXR1                 :1;
        unsigned U4RXR2                 :1;
        unsigned U4RXR3                 :1;
        unsigned U4TXR0                 :1;
        unsigned U4TXR1                 :1;
        unsigned U4TXR2                 :1;
        unsigned U4TXR3                 :1;
    };
} RPINR6_7bits_t;
extern volatile RPINR6_7bits_t RPINR6_7bits __at(0xE2D);
// bitfield macros
#define _RPINR6_7_U4RXR_POSN                                0x0
#define _RPINR6_7_U4RXR_POSITION                            0x0
#define _RPINR6_7_U4RXR_SIZE                                0x4
#define _RPINR6_7_U4RXR_LENGTH                              0x4
#define _RPINR6_7_U4RXR_MASK                                0xF
#define _RPINR6_7_U4TXR_POSN                                0x4
#define _RPINR6_7_U4TXR_POSITION                            0x4
#define _RPINR6_7_U4TXR_SIZE                                0x4
#define _RPINR6_7_U4TXR_LENGTH                              0x4
#define _RPINR6_7_U4TXR_MASK                                0xF0
#define _RPINR6_7_U4RXR0_POSN                               0x0
#define _RPINR6_7_U4RXR0_POSITION                           0x0
#define _RPINR6_7_U4RXR0_SIZE                               0x1
#define _RPINR6_7_U4RXR0_LENGTH                             0x1
#define _RPINR6_7_U4RXR0_MASK                               0x1
#define _RPINR6_7_U4RXR1_POSN                               0x1
#define _RPINR6_7_U4RXR1_POSITION                           0x1
#define _RPINR6_7_U4RXR1_SIZE                               0x1
#define _RPINR6_7_U4RXR1_LENGTH                             0x1
#define _RPINR6_7_U4RXR1_MASK                               0x2
#define _RPINR6_7_U4RXR2_POSN                               0x2
#define _RPINR6_7_U4RXR2_POSITION                           0x2
#define _RPINR6_7_U4RXR2_SIZE                               0x1
#define _RPINR6_7_U4RXR2_LENGTH                             0x1
#define _RPINR6_7_U4RXR2_MASK                               0x4
#define _RPINR6_7_U4RXR3_POSN                               0x3
#define _RPINR6_7_U4RXR3_POSITION                           0x3
#define _RPINR6_7_U4RXR3_SIZE                               0x1
#define _RPINR6_7_U4RXR3_LENGTH                             0x1
#define _RPINR6_7_U4RXR3_MASK                               0x8
#define _RPINR6_7_U4TXR0_POSN                               0x4
#define _RPINR6_7_U4TXR0_POSITION                           0x4
#define _RPINR6_7_U4TXR0_SIZE                               0x1
#define _RPINR6_7_U4TXR0_LENGTH                             0x1
#define _RPINR6_7_U4TXR0_MASK                               0x10
#define _RPINR6_7_U4TXR1_POSN                               0x5
#define _RPINR6_7_U4TXR1_POSITION                           0x5
#define _RPINR6_7_U4TXR1_SIZE                               0x1
#define _RPINR6_7_U4TXR1_LENGTH                             0x1
#define _RPINR6_7_U4TXR1_MASK                               0x20
#define _RPINR6_7_U4TXR2_POSN                               0x6
#define _RPINR6_7_U4TXR2_POSITION                           0x6
#define _RPINR6_7_U4TXR2_SIZE                               0x1
#define _RPINR6_7_U4TXR2_LENGTH                             0x1
#define _RPINR6_7_U4TXR2_MASK                               0x40
#define _RPINR6_7_U4TXR3_POSN                               0x7
#define _RPINR6_7_U4TXR3_POSITION                           0x7
#define _RPINR6_7_U4TXR3_SIZE                               0x1
#define _RPINR6_7_U4TXR3_LENGTH                             0x1
#define _RPINR6_7_U4TXR3_MASK                               0x80

// Register: RPINR8_9
#define RPINR8_9 RPINR8_9
extern volatile unsigned char           RPINR8_9            __at(0xE2E);
#ifndef _LIB_BUILD
asm("RPINR8_9 equ 0E2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCK1R                  :4;
        unsigned SDI1R                  :4;
    };
    struct {
        unsigned SCK1R0                 :1;
        unsigned SCK1R1                 :1;
        unsigned SCK1R2                 :1;
        unsigned SCK1R3                 :1;
        unsigned SDI1R0                 :1;
        unsigned SDI1R1                 :1;
        unsigned SDI1R2                 :1;
        unsigned SDI1R3                 :1;
    };
} RPINR8_9bits_t;
extern volatile RPINR8_9bits_t RPINR8_9bits __at(0xE2E);
// bitfield macros
#define _RPINR8_9_SCK1R_POSN                                0x0
#define _RPINR8_9_SCK1R_POSITION                            0x0
#define _RPINR8_9_SCK1R_SIZE                                0x4
#define _RPINR8_9_SCK1R_LENGTH                              0x4
#define _RPINR8_9_SCK1R_MASK                                0xF
#define _RPINR8_9_SDI1R_POSN                                0x4
#define _RPINR8_9_SDI1R_POSITION                            0x4
#define _RPINR8_9_SDI1R_SIZE                                0x4
#define _RPINR8_9_SDI1R_LENGTH                              0x4
#define _RPINR8_9_SDI1R_MASK                                0xF0
#define _RPINR8_9_SCK1R0_POSN                               0x0
#define _RPINR8_9_SCK1R0_POSITION                           0x0
#define _RPINR8_9_SCK1R0_SIZE                               0x1
#define _RPINR8_9_SCK1R0_LENGTH                             0x1
#define _RPINR8_9_SCK1R0_MASK                               0x1
#define _RPINR8_9_SCK1R1_POSN                               0x1
#define _RPINR8_9_SCK1R1_POSITION                           0x1
#define _RPINR8_9_SCK1R1_SIZE                               0x1
#define _RPINR8_9_SCK1R1_LENGTH                             0x1
#define _RPINR8_9_SCK1R1_MASK                               0x2
#define _RPINR8_9_SCK1R2_POSN                               0x2
#define _RPINR8_9_SCK1R2_POSITION                           0x2
#define _RPINR8_9_SCK1R2_SIZE                               0x1
#define _RPINR8_9_SCK1R2_LENGTH                             0x1
#define _RPINR8_9_SCK1R2_MASK                               0x4
#define _RPINR8_9_SCK1R3_POSN                               0x3
#define _RPINR8_9_SCK1R3_POSITION                           0x3
#define _RPINR8_9_SCK1R3_SIZE                               0x1
#define _RPINR8_9_SCK1R3_LENGTH                             0x1
#define _RPINR8_9_SCK1R3_MASK                               0x8
#define _RPINR8_9_SDI1R0_POSN                               0x4
#define _RPINR8_9_SDI1R0_POSITION                           0x4
#define _RPINR8_9_SDI1R0_SIZE                               0x1
#define _RPINR8_9_SDI1R0_LENGTH                             0x1
#define _RPINR8_9_SDI1R0_MASK                               0x10
#define _RPINR8_9_SDI1R1_POSN                               0x5
#define _RPINR8_9_SDI1R1_POSITION                           0x5
#define _RPINR8_9_SDI1R1_SIZE                               0x1
#define _RPINR8_9_SDI1R1_LENGTH                             0x1
#define _RPINR8_9_SDI1R1_MASK                               0x20
#define _RPINR8_9_SDI1R2_POSN                               0x6
#define _RPINR8_9_SDI1R2_POSITION                           0x6
#define _RPINR8_9_SDI1R2_SIZE                               0x1
#define _RPINR8_9_SDI1R2_LENGTH                             0x1
#define _RPINR8_9_SDI1R2_MASK                               0x40
#define _RPINR8_9_SDI1R3_POSN                               0x7
#define _RPINR8_9_SDI1R3_POSITION                           0x7
#define _RPINR8_9_SDI1R3_SIZE                               0x1
#define _RPINR8_9_SDI1R3_LENGTH                             0x1
#define _RPINR8_9_SDI1R3_MASK                               0x80

// Register: RPINR10_11
#define RPINR10_11 RPINR10_11
extern volatile unsigned char           RPINR10_11          __at(0xE2F);
#ifndef _LIB_BUILD
asm("RPINR10_11 equ 0E2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SS1R                   :4;
        unsigned SCK2R                  :4;
    };
    struct {
        unsigned SS1R0                  :1;
        unsigned SS1R1                  :1;
        unsigned SS1R2                  :1;
        unsigned SS1R3                  :1;
        unsigned SCK2R0                 :1;
        unsigned SCK2R1                 :1;
        unsigned SCK2R2                 :1;
        unsigned SCK2R3                 :1;
    };
} RPINR10_11bits_t;
extern volatile RPINR10_11bits_t RPINR10_11bits __at(0xE2F);
// bitfield macros
#define _RPINR10_11_SS1R_POSN                               0x0
#define _RPINR10_11_SS1R_POSITION                           0x0
#define _RPINR10_11_SS1R_SIZE                               0x4
#define _RPINR10_11_SS1R_LENGTH                             0x4
#define _RPINR10_11_SS1R_MASK                               0xF
#define _RPINR10_11_SCK2R_POSN                              0x4
#define _RPINR10_11_SCK2R_POSITION                          0x4
#define _RPINR10_11_SCK2R_SIZE                              0x4
#define _RPINR10_11_SCK2R_LENGTH                            0x4
#define _RPINR10_11_SCK2R_MASK                              0xF0
#define _RPINR10_11_SS1R0_POSN                              0x0
#define _RPINR10_11_SS1R0_POSITION                          0x0
#define _RPINR10_11_SS1R0_SIZE                              0x1
#define _RPINR10_11_SS1R0_LENGTH                            0x1
#define _RPINR10_11_SS1R0_MASK                              0x1
#define _RPINR10_11_SS1R1_POSN                              0x1
#define _RPINR10_11_SS1R1_POSITION                          0x1
#define _RPINR10_11_SS1R1_SIZE                              0x1
#define _RPINR10_11_SS1R1_LENGTH                            0x1
#define _RPINR10_11_SS1R1_MASK                              0x2
#define _RPINR10_11_SS1R2_POSN                              0x2
#define _RPINR10_11_SS1R2_POSITION                          0x2
#define _RPINR10_11_SS1R2_SIZE                              0x1
#define _RPINR10_11_SS1R2_LENGTH                            0x1
#define _RPINR10_11_SS1R2_MASK                              0x4
#define _RPINR10_11_SS1R3_POSN                              0x3
#define _RPINR10_11_SS1R3_POSITION                          0x3
#define _RPINR10_11_SS1R3_SIZE                              0x1
#define _RPINR10_11_SS1R3_LENGTH                            0x1
#define _RPINR10_11_SS1R3_MASK                              0x8
#define _RPINR10_11_SCK2R0_POSN                             0x4
#define _RPINR10_11_SCK2R0_POSITION                         0x4
#define _RPINR10_11_SCK2R0_SIZE                             0x1
#define _RPINR10_11_SCK2R0_LENGTH                           0x1
#define _RPINR10_11_SCK2R0_MASK                             0x10
#define _RPINR10_11_SCK2R1_POSN                             0x5
#define _RPINR10_11_SCK2R1_POSITION                         0x5
#define _RPINR10_11_SCK2R1_SIZE                             0x1
#define _RPINR10_11_SCK2R1_LENGTH                           0x1
#define _RPINR10_11_SCK2R1_MASK                             0x20
#define _RPINR10_11_SCK2R2_POSN                             0x6
#define _RPINR10_11_SCK2R2_POSITION                         0x6
#define _RPINR10_11_SCK2R2_SIZE                             0x1
#define _RPINR10_11_SCK2R2_LENGTH                           0x1
#define _RPINR10_11_SCK2R2_MASK                             0x40
#define _RPINR10_11_SCK2R3_POSN                             0x7
#define _RPINR10_11_SCK2R3_POSITION                         0x7
#define _RPINR10_11_SCK2R3_SIZE                             0x1
#define _RPINR10_11_SCK2R3_LENGTH                           0x1
#define _RPINR10_11_SCK2R3_MASK                             0x80

// Register: RPINR12_13
#define RPINR12_13 RPINR12_13
extern volatile unsigned char           RPINR12_13          __at(0xE30);
#ifndef _LIB_BUILD
asm("RPINR12_13 equ 0E30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SDI2R                  :4;
        unsigned SS2R                   :4;
    };
    struct {
        unsigned SDI2R0                 :1;
        unsigned SDI2R1                 :1;
        unsigned SDI2R2                 :1;
        unsigned SDI2R3                 :1;
        unsigned SS2R0                  :1;
        unsigned SS2R1                  :1;
        unsigned SS2R2                  :1;
        unsigned SS2R3                  :1;
    };
} RPINR12_13bits_t;
extern volatile RPINR12_13bits_t RPINR12_13bits __at(0xE30);
// bitfield macros
#define _RPINR12_13_SDI2R_POSN                              0x0
#define _RPINR12_13_SDI2R_POSITION                          0x0
#define _RPINR12_13_SDI2R_SIZE                              0x4
#define _RPINR12_13_SDI2R_LENGTH                            0x4
#define _RPINR12_13_SDI2R_MASK                              0xF
#define _RPINR12_13_SS2R_POSN                               0x4
#define _RPINR12_13_SS2R_POSITION                           0x4
#define _RPINR12_13_SS2R_SIZE                               0x4
#define _RPINR12_13_SS2R_LENGTH                             0x4
#define _RPINR12_13_SS2R_MASK                               0xF0
#define _RPINR12_13_SDI2R0_POSN                             0x0
#define _RPINR12_13_SDI2R0_POSITION                         0x0
#define _RPINR12_13_SDI2R0_SIZE                             0x1
#define _RPINR12_13_SDI2R0_LENGTH                           0x1
#define _RPINR12_13_SDI2R0_MASK                             0x1
#define _RPINR12_13_SDI2R1_POSN                             0x1
#define _RPINR12_13_SDI2R1_POSITION                         0x1
#define _RPINR12_13_SDI2R1_SIZE                             0x1
#define _RPINR12_13_SDI2R1_LENGTH                           0x1
#define _RPINR12_13_SDI2R1_MASK                             0x2
#define _RPINR12_13_SDI2R2_POSN                             0x2
#define _RPINR12_13_SDI2R2_POSITION                         0x2
#define _RPINR12_13_SDI2R2_SIZE                             0x1
#define _RPINR12_13_SDI2R2_LENGTH                           0x1
#define _RPINR12_13_SDI2R2_MASK                             0x4
#define _RPINR12_13_SDI2R3_POSN                             0x3
#define _RPINR12_13_SDI2R3_POSITION                         0x3
#define _RPINR12_13_SDI2R3_SIZE                             0x1
#define _RPINR12_13_SDI2R3_LENGTH                           0x1
#define _RPINR12_13_SDI2R3_MASK                             0x8
#define _RPINR12_13_SS2R0_POSN                              0x4
#define _RPINR12_13_SS2R0_POSITION                          0x4
#define _RPINR12_13_SS2R0_SIZE                              0x1
#define _RPINR12_13_SS2R0_LENGTH                            0x1
#define _RPINR12_13_SS2R0_MASK                              0x10
#define _RPINR12_13_SS2R1_POSN                              0x5
#define _RPINR12_13_SS2R1_POSITION                          0x5
#define _RPINR12_13_SS2R1_SIZE                              0x1
#define _RPINR12_13_SS2R1_LENGTH                            0x1
#define _RPINR12_13_SS2R1_MASK                              0x20
#define _RPINR12_13_SS2R2_POSN                              0x6
#define _RPINR12_13_SS2R2_POSITION                          0x6
#define _RPINR12_13_SS2R2_SIZE                              0x1
#define _RPINR12_13_SS2R2_LENGTH                            0x1
#define _RPINR12_13_SS2R2_MASK                              0x40
#define _RPINR12_13_SS2R3_POSN                              0x7
#define _RPINR12_13_SS2R3_POSITION                          0x7
#define _RPINR12_13_SS2R3_SIZE                              0x1
#define _RPINR12_13_SS2R3_LENGTH                            0x1
#define _RPINR12_13_SS2R3_MASK                              0x80

// Register: RPINR14_15
#define RPINR14_15 RPINR14_15
extern volatile unsigned char           RPINR14_15          __at(0xE31);
#ifndef _LIB_BUILD
asm("RPINR14_15 equ 0E31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLT0R                  :4;
        unsigned ECCP1R                 :4;
    };
    struct {
        unsigned FLT0R0                 :1;
        unsigned FLT0R1                 :1;
        unsigned FLT0R2                 :1;
        unsigned FLT0R3                 :1;
        unsigned ECCP1R0                :1;
        unsigned ECCP1R1                :1;
        unsigned ECCP1R2                :1;
        unsigned ECCP1R3                :1;
    };
} RPINR14_15bits_t;
extern volatile RPINR14_15bits_t RPINR14_15bits __at(0xE31);
// bitfield macros
#define _RPINR14_15_FLT0R_POSN                              0x0
#define _RPINR14_15_FLT0R_POSITION                          0x0
#define _RPINR14_15_FLT0R_SIZE                              0x4
#define _RPINR14_15_FLT0R_LENGTH                            0x4
#define _RPINR14_15_FLT0R_MASK                              0xF
#define _RPINR14_15_ECCP1R_POSN                             0x4
#define _RPINR14_15_ECCP1R_POSITION                         0x4
#define _RPINR14_15_ECCP1R_SIZE                             0x4
#define _RPINR14_15_ECCP1R_LENGTH                           0x4
#define _RPINR14_15_ECCP1R_MASK                             0xF0
#define _RPINR14_15_FLT0R0_POSN                             0x0
#define _RPINR14_15_FLT0R0_POSITION                         0x0
#define _RPINR14_15_FLT0R0_SIZE                             0x1
#define _RPINR14_15_FLT0R0_LENGTH                           0x1
#define _RPINR14_15_FLT0R0_MASK                             0x1
#define _RPINR14_15_FLT0R1_POSN                             0x1
#define _RPINR14_15_FLT0R1_POSITION                         0x1
#define _RPINR14_15_FLT0R1_SIZE                             0x1
#define _RPINR14_15_FLT0R1_LENGTH                           0x1
#define _RPINR14_15_FLT0R1_MASK                             0x2
#define _RPINR14_15_FLT0R2_POSN                             0x2
#define _RPINR14_15_FLT0R2_POSITION                         0x2
#define _RPINR14_15_FLT0R2_SIZE                             0x1
#define _RPINR14_15_FLT0R2_LENGTH                           0x1
#define _RPINR14_15_FLT0R2_MASK                             0x4
#define _RPINR14_15_FLT0R3_POSN                             0x3
#define _RPINR14_15_FLT0R3_POSITION                         0x3
#define _RPINR14_15_FLT0R3_SIZE                             0x1
#define _RPINR14_15_FLT0R3_LENGTH                           0x1
#define _RPINR14_15_FLT0R3_MASK                             0x8
#define _RPINR14_15_ECCP1R0_POSN                            0x4
#define _RPINR14_15_ECCP1R0_POSITION                        0x4
#define _RPINR14_15_ECCP1R0_SIZE                            0x1
#define _RPINR14_15_ECCP1R0_LENGTH                          0x1
#define _RPINR14_15_ECCP1R0_MASK                            0x10
#define _RPINR14_15_ECCP1R1_POSN                            0x5
#define _RPINR14_15_ECCP1R1_POSITION                        0x5
#define _RPINR14_15_ECCP1R1_SIZE                            0x1
#define _RPINR14_15_ECCP1R1_LENGTH                          0x1
#define _RPINR14_15_ECCP1R1_MASK                            0x20
#define _RPINR14_15_ECCP1R2_POSN                            0x6
#define _RPINR14_15_ECCP1R2_POSITION                        0x6
#define _RPINR14_15_ECCP1R2_SIZE                            0x1
#define _RPINR14_15_ECCP1R2_LENGTH                          0x1
#define _RPINR14_15_ECCP1R2_MASK                            0x40
#define _RPINR14_15_ECCP1R3_POSN                            0x7
#define _RPINR14_15_ECCP1R3_POSITION                        0x7
#define _RPINR14_15_ECCP1R3_SIZE                            0x1
#define _RPINR14_15_ECCP1R3_LENGTH                          0x1
#define _RPINR14_15_ECCP1R3_MASK                            0x80

// Register: RPINR16_17
#define RPINR16_17 RPINR16_17
extern volatile unsigned char           RPINR16_17          __at(0xE32);
#ifndef _LIB_BUILD
asm("RPINR16_17 equ 0E32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ECCP2R                 :4;
        unsigned ECCP3R                 :4;
    };
    struct {
        unsigned ECCP2R0                :1;
        unsigned ECCP2R1                :1;
        unsigned ECCP2R2                :1;
        unsigned ECCP2R3                :1;
        unsigned ECCP3R0                :1;
        unsigned ECCP3R1                :1;
        unsigned ECCP3R2                :1;
        unsigned ECCP3R3                :1;
    };
} RPINR16_17bits_t;
extern volatile RPINR16_17bits_t RPINR16_17bits __at(0xE32);
// bitfield macros
#define _RPINR16_17_ECCP2R_POSN                             0x0
#define _RPINR16_17_ECCP2R_POSITION                         0x0
#define _RPINR16_17_ECCP2R_SIZE                             0x4
#define _RPINR16_17_ECCP2R_LENGTH                           0x4
#define _RPINR16_17_ECCP2R_MASK                             0xF
#define _RPINR16_17_ECCP3R_POSN                             0x4
#define _RPINR16_17_ECCP3R_POSITION                         0x4
#define _RPINR16_17_ECCP3R_SIZE                             0x4
#define _RPINR16_17_ECCP3R_LENGTH                           0x4
#define _RPINR16_17_ECCP3R_MASK                             0xF0
#define _RPINR16_17_ECCP2R0_POSN                            0x0
#define _RPINR16_17_ECCP2R0_POSITION                        0x0
#define _RPINR16_17_ECCP2R0_SIZE                            0x1
#define _RPINR16_17_ECCP2R0_LENGTH                          0x1
#define _RPINR16_17_ECCP2R0_MASK                            0x1
#define _RPINR16_17_ECCP2R1_POSN                            0x1
#define _RPINR16_17_ECCP2R1_POSITION                        0x1
#define _RPINR16_17_ECCP2R1_SIZE                            0x1
#define _RPINR16_17_ECCP2R1_LENGTH                          0x1
#define _RPINR16_17_ECCP2R1_MASK                            0x2
#define _RPINR16_17_ECCP2R2_POSN                            0x2
#define _RPINR16_17_ECCP2R2_POSITION                        0x2
#define _RPINR16_17_ECCP2R2_SIZE                            0x1
#define _RPINR16_17_ECCP2R2_LENGTH                          0x1
#define _RPINR16_17_ECCP2R2_MASK                            0x4
#define _RPINR16_17_ECCP2R3_POSN                            0x3
#define _RPINR16_17_ECCP2R3_POSITION                        0x3
#define _RPINR16_17_ECCP2R3_SIZE                            0x1
#define _RPINR16_17_ECCP2R3_LENGTH                          0x1
#define _RPINR16_17_ECCP2R3_MASK                            0x8
#define _RPINR16_17_ECCP3R0_POSN                            0x4
#define _RPINR16_17_ECCP3R0_POSITION                        0x4
#define _RPINR16_17_ECCP3R0_SIZE                            0x1
#define _RPINR16_17_ECCP3R0_LENGTH                          0x1
#define _RPINR16_17_ECCP3R0_MASK                            0x10
#define _RPINR16_17_ECCP3R1_POSN                            0x5
#define _RPINR16_17_ECCP3R1_POSITION                        0x5
#define _RPINR16_17_ECCP3R1_SIZE                            0x1
#define _RPINR16_17_ECCP3R1_LENGTH                          0x1
#define _RPINR16_17_ECCP3R1_MASK                            0x20
#define _RPINR16_17_ECCP3R2_POSN                            0x6
#define _RPINR16_17_ECCP3R2_POSITION                        0x6
#define _RPINR16_17_ECCP3R2_SIZE                            0x1
#define _RPINR16_17_ECCP3R2_LENGTH                          0x1
#define _RPINR16_17_ECCP3R2_MASK                            0x40
#define _RPINR16_17_ECCP3R3_POSN                            0x7
#define _RPINR16_17_ECCP3R3_POSITION                        0x7
#define _RPINR16_17_ECCP3R3_SIZE                            0x1
#define _RPINR16_17_ECCP3R3_LENGTH                          0x1
#define _RPINR16_17_ECCP3R3_MASK                            0x80

// Register: RPINR18_19
#define RPINR18_19 RPINR18_19
extern volatile unsigned char           RPINR18_19          __at(0xE33);
#ifndef _LIB_BUILD
asm("RPINR18_19 equ 0E33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOC0R                  :4;
        unsigned IOC1R                  :4;
    };
    struct {
        unsigned IOC0R0                 :1;
        unsigned IOC0R1                 :1;
        unsigned IOC0R2                 :1;
        unsigned IOC0R3                 :1;
        unsigned IOC1R0                 :1;
        unsigned IOC1R1                 :1;
        unsigned IOC1R2                 :1;
        unsigned IOC1R3                 :1;
    };
} RPINR18_19bits_t;
extern volatile RPINR18_19bits_t RPINR18_19bits __at(0xE33);
// bitfield macros
#define _RPINR18_19_IOC0R_POSN                              0x0
#define _RPINR18_19_IOC0R_POSITION                          0x0
#define _RPINR18_19_IOC0R_SIZE                              0x4
#define _RPINR18_19_IOC0R_LENGTH                            0x4
#define _RPINR18_19_IOC0R_MASK                              0xF
#define _RPINR18_19_IOC1R_POSN                              0x4
#define _RPINR18_19_IOC1R_POSITION                          0x4
#define _RPINR18_19_IOC1R_SIZE                              0x4
#define _RPINR18_19_IOC1R_LENGTH                            0x4
#define _RPINR18_19_IOC1R_MASK                              0xF0
#define _RPINR18_19_IOC0R0_POSN                             0x0
#define _RPINR18_19_IOC0R0_POSITION                         0x0
#define _RPINR18_19_IOC0R0_SIZE                             0x1
#define _RPINR18_19_IOC0R0_LENGTH                           0x1
#define _RPINR18_19_IOC0R0_MASK                             0x1
#define _RPINR18_19_IOC0R1_POSN                             0x1
#define _RPINR18_19_IOC0R1_POSITION                         0x1
#define _RPINR18_19_IOC0R1_SIZE                             0x1
#define _RPINR18_19_IOC0R1_LENGTH                           0x1
#define _RPINR18_19_IOC0R1_MASK                             0x2
#define _RPINR18_19_IOC0R2_POSN                             0x2
#define _RPINR18_19_IOC0R2_POSITION                         0x2
#define _RPINR18_19_IOC0R2_SIZE                             0x1
#define _RPINR18_19_IOC0R2_LENGTH                           0x1
#define _RPINR18_19_IOC0R2_MASK                             0x4
#define _RPINR18_19_IOC0R3_POSN                             0x3
#define _RPINR18_19_IOC0R3_POSITION                         0x3
#define _RPINR18_19_IOC0R3_SIZE                             0x1
#define _RPINR18_19_IOC0R3_LENGTH                           0x1
#define _RPINR18_19_IOC0R3_MASK                             0x8
#define _RPINR18_19_IOC1R0_POSN                             0x4
#define _RPINR18_19_IOC1R0_POSITION                         0x4
#define _RPINR18_19_IOC1R0_SIZE                             0x1
#define _RPINR18_19_IOC1R0_LENGTH                           0x1
#define _RPINR18_19_IOC1R0_MASK                             0x10
#define _RPINR18_19_IOC1R1_POSN                             0x5
#define _RPINR18_19_IOC1R1_POSITION                         0x5
#define _RPINR18_19_IOC1R1_SIZE                             0x1
#define _RPINR18_19_IOC1R1_LENGTH                           0x1
#define _RPINR18_19_IOC1R1_MASK                             0x20
#define _RPINR18_19_IOC1R2_POSN                             0x6
#define _RPINR18_19_IOC1R2_POSITION                         0x6
#define _RPINR18_19_IOC1R2_SIZE                             0x1
#define _RPINR18_19_IOC1R2_LENGTH                           0x1
#define _RPINR18_19_IOC1R2_MASK                             0x40
#define _RPINR18_19_IOC1R3_POSN                             0x7
#define _RPINR18_19_IOC1R3_POSITION                         0x7
#define _RPINR18_19_IOC1R3_SIZE                             0x1
#define _RPINR18_19_IOC1R3_LENGTH                           0x1
#define _RPINR18_19_IOC1R3_MASK                             0x80

// Register: RPINR20_21
#define RPINR20_21 RPINR20_21
extern volatile unsigned char           RPINR20_21          __at(0xE34);
#ifndef _LIB_BUILD
asm("RPINR20_21 equ 0E34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOC2R                  :4;
        unsigned IOC3R                  :4;
    };
    struct {
        unsigned IOC2R0                 :1;
        unsigned IOC2R1                 :1;
        unsigned IOC2R2                 :1;
        unsigned IOC2R3                 :1;
        unsigned IOC3R0                 :1;
        unsigned IOC3R1                 :1;
        unsigned IOC3R2                 :1;
        unsigned IOC3R3                 :1;
    };
} RPINR20_21bits_t;
extern volatile RPINR20_21bits_t RPINR20_21bits __at(0xE34);
// bitfield macros
#define _RPINR20_21_IOC2R_POSN                              0x0
#define _RPINR20_21_IOC2R_POSITION                          0x0
#define _RPINR20_21_IOC2R_SIZE                              0x4
#define _RPINR20_21_IOC2R_LENGTH                            0x4
#define _RPINR20_21_IOC2R_MASK                              0xF
#define _RPINR20_21_IOC3R_POSN                              0x4
#define _RPINR20_21_IOC3R_POSITION                          0x4
#define _RPINR20_21_IOC3R_SIZE                              0x4
#define _RPINR20_21_IOC3R_LENGTH                            0x4
#define _RPINR20_21_IOC3R_MASK                              0xF0
#define _RPINR20_21_IOC2R0_POSN                             0x0
#define _RPINR20_21_IOC2R0_POSITION                         0x0
#define _RPINR20_21_IOC2R0_SIZE                             0x1
#define _RPINR20_21_IOC2R0_LENGTH                           0x1
#define _RPINR20_21_IOC2R0_MASK                             0x1
#define _RPINR20_21_IOC2R1_POSN                             0x1
#define _RPINR20_21_IOC2R1_POSITION                         0x1
#define _RPINR20_21_IOC2R1_SIZE                             0x1
#define _RPINR20_21_IOC2R1_LENGTH                           0x1
#define _RPINR20_21_IOC2R1_MASK                             0x2
#define _RPINR20_21_IOC2R2_POSN                             0x2
#define _RPINR20_21_IOC2R2_POSITION                         0x2
#define _RPINR20_21_IOC2R2_SIZE                             0x1
#define _RPINR20_21_IOC2R2_LENGTH                           0x1
#define _RPINR20_21_IOC2R2_MASK                             0x4
#define _RPINR20_21_IOC2R3_POSN                             0x3
#define _RPINR20_21_IOC2R3_POSITION                         0x3
#define _RPINR20_21_IOC2R3_SIZE                             0x1
#define _RPINR20_21_IOC2R3_LENGTH                           0x1
#define _RPINR20_21_IOC2R3_MASK                             0x8
#define _RPINR20_21_IOC3R0_POSN                             0x4
#define _RPINR20_21_IOC3R0_POSITION                         0x4
#define _RPINR20_21_IOC3R0_SIZE                             0x1
#define _RPINR20_21_IOC3R0_LENGTH                           0x1
#define _RPINR20_21_IOC3R0_MASK                             0x10
#define _RPINR20_21_IOC3R1_POSN                             0x5
#define _RPINR20_21_IOC3R1_POSITION                         0x5
#define _RPINR20_21_IOC3R1_SIZE                             0x1
#define _RPINR20_21_IOC3R1_LENGTH                           0x1
#define _RPINR20_21_IOC3R1_MASK                             0x20
#define _RPINR20_21_IOC3R2_POSN                             0x6
#define _RPINR20_21_IOC3R2_POSITION                         0x6
#define _RPINR20_21_IOC3R2_SIZE                             0x1
#define _RPINR20_21_IOC3R2_LENGTH                           0x1
#define _RPINR20_21_IOC3R2_MASK                             0x40
#define _RPINR20_21_IOC3R3_POSN                             0x7
#define _RPINR20_21_IOC3R3_POSITION                         0x7
#define _RPINR20_21_IOC3R3_SIZE                             0x1
#define _RPINR20_21_IOC3R3_LENGTH                           0x1
#define _RPINR20_21_IOC3R3_MASK                             0x80

// Register: RPINR22_23
#define RPINR22_23 RPINR22_23
extern volatile unsigned char           RPINR22_23          __at(0xE35);
#ifndef _LIB_BUILD
asm("RPINR22_23 equ 0E35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOC4R                  :4;
        unsigned IOC5R                  :4;
    };
    struct {
        unsigned IOC4R0                 :1;
        unsigned IOC4R1                 :1;
        unsigned IOC4R2                 :1;
        unsigned IOC4R3                 :1;
        unsigned IOC5R0                 :1;
        unsigned IOC5R1                 :1;
        unsigned IOC5R2                 :1;
        unsigned IOC5R3                 :1;
    };
} RPINR22_23bits_t;
extern volatile RPINR22_23bits_t RPINR22_23bits __at(0xE35);
// bitfield macros
#define _RPINR22_23_IOC4R_POSN                              0x0
#define _RPINR22_23_IOC4R_POSITION                          0x0
#define _RPINR22_23_IOC4R_SIZE                              0x4
#define _RPINR22_23_IOC4R_LENGTH                            0x4
#define _RPINR22_23_IOC4R_MASK                              0xF
#define _RPINR22_23_IOC5R_POSN                              0x4
#define _RPINR22_23_IOC5R_POSITION                          0x4
#define _RPINR22_23_IOC5R_SIZE                              0x4
#define _RPINR22_23_IOC5R_LENGTH                            0x4
#define _RPINR22_23_IOC5R_MASK                              0xF0
#define _RPINR22_23_IOC4R0_POSN                             0x0
#define _RPINR22_23_IOC4R0_POSITION                         0x0
#define _RPINR22_23_IOC4R0_SIZE                             0x1
#define _RPINR22_23_IOC4R0_LENGTH                           0x1
#define _RPINR22_23_IOC4R0_MASK                             0x1
#define _RPINR22_23_IOC4R1_POSN                             0x1
#define _RPINR22_23_IOC4R1_POSITION                         0x1
#define _RPINR22_23_IOC4R1_SIZE                             0x1
#define _RPINR22_23_IOC4R1_LENGTH                           0x1
#define _RPINR22_23_IOC4R1_MASK                             0x2
#define _RPINR22_23_IOC4R2_POSN                             0x2
#define _RPINR22_23_IOC4R2_POSITION                         0x2
#define _RPINR22_23_IOC4R2_SIZE                             0x1
#define _RPINR22_23_IOC4R2_LENGTH                           0x1
#define _RPINR22_23_IOC4R2_MASK                             0x4
#define _RPINR22_23_IOC4R3_POSN                             0x3
#define _RPINR22_23_IOC4R3_POSITION                         0x3
#define _RPINR22_23_IOC4R3_SIZE                             0x1
#define _RPINR22_23_IOC4R3_LENGTH                           0x1
#define _RPINR22_23_IOC4R3_MASK                             0x8
#define _RPINR22_23_IOC5R0_POSN                             0x4
#define _RPINR22_23_IOC5R0_POSITION                         0x4
#define _RPINR22_23_IOC5R0_SIZE                             0x1
#define _RPINR22_23_IOC5R0_LENGTH                           0x1
#define _RPINR22_23_IOC5R0_MASK                             0x10
#define _RPINR22_23_IOC5R1_POSN                             0x5
#define _RPINR22_23_IOC5R1_POSITION                         0x5
#define _RPINR22_23_IOC5R1_SIZE                             0x1
#define _RPINR22_23_IOC5R1_LENGTH                           0x1
#define _RPINR22_23_IOC5R1_MASK                             0x20
#define _RPINR22_23_IOC5R2_POSN                             0x6
#define _RPINR22_23_IOC5R2_POSITION                         0x6
#define _RPINR22_23_IOC5R2_SIZE                             0x1
#define _RPINR22_23_IOC5R2_LENGTH                           0x1
#define _RPINR22_23_IOC5R2_MASK                             0x40
#define _RPINR22_23_IOC5R3_POSN                             0x7
#define _RPINR22_23_IOC5R3_POSITION                         0x7
#define _RPINR22_23_IOC5R3_SIZE                             0x1
#define _RPINR22_23_IOC5R3_LENGTH                           0x1
#define _RPINR22_23_IOC5R3_MASK                             0x80

// Register: RPINR24_25
#define RPINR24_25 RPINR24_25
extern volatile unsigned char           RPINR24_25          __at(0xE36);
#ifndef _LIB_BUILD
asm("RPINR24_25 equ 0E36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOC6R                  :4;
        unsigned IOC7R                  :4;
    };
    struct {
        unsigned IOC6R0                 :1;
        unsigned IOC6R1                 :1;
        unsigned IOC6R2                 :1;
        unsigned IOC6R3                 :1;
        unsigned IOC7R0                 :1;
        unsigned IOC7R1                 :1;
        unsigned IOC7R2                 :1;
        unsigned IOC7R3                 :1;
    };
} RPINR24_25bits_t;
extern volatile RPINR24_25bits_t RPINR24_25bits __at(0xE36);
// bitfield macros
#define _RPINR24_25_IOC6R_POSN                              0x0
#define _RPINR24_25_IOC6R_POSITION                          0x0
#define _RPINR24_25_IOC6R_SIZE                              0x4
#define _RPINR24_25_IOC6R_LENGTH                            0x4
#define _RPINR24_25_IOC6R_MASK                              0xF
#define _RPINR24_25_IOC7R_POSN                              0x4
#define _RPINR24_25_IOC7R_POSITION                          0x4
#define _RPINR24_25_IOC7R_SIZE                              0x4
#define _RPINR24_25_IOC7R_LENGTH                            0x4
#define _RPINR24_25_IOC7R_MASK                              0xF0
#define _RPINR24_25_IOC6R0_POSN                             0x0
#define _RPINR24_25_IOC6R0_POSITION                         0x0
#define _RPINR24_25_IOC6R0_SIZE                             0x1
#define _RPINR24_25_IOC6R0_LENGTH                           0x1
#define _RPINR24_25_IOC6R0_MASK                             0x1
#define _RPINR24_25_IOC6R1_POSN                             0x1
#define _RPINR24_25_IOC6R1_POSITION                         0x1
#define _RPINR24_25_IOC6R1_SIZE                             0x1
#define _RPINR24_25_IOC6R1_LENGTH                           0x1
#define _RPINR24_25_IOC6R1_MASK                             0x2
#define _RPINR24_25_IOC6R2_POSN                             0x2
#define _RPINR24_25_IOC6R2_POSITION                         0x2
#define _RPINR24_25_IOC6R2_SIZE                             0x1
#define _RPINR24_25_IOC6R2_LENGTH                           0x1
#define _RPINR24_25_IOC6R2_MASK                             0x4
#define _RPINR24_25_IOC6R3_POSN                             0x3
#define _RPINR24_25_IOC6R3_POSITION                         0x3
#define _RPINR24_25_IOC6R3_SIZE                             0x1
#define _RPINR24_25_IOC6R3_LENGTH                           0x1
#define _RPINR24_25_IOC6R3_MASK                             0x8
#define _RPINR24_25_IOC7R0_POSN                             0x4
#define _RPINR24_25_IOC7R0_POSITION                         0x4
#define _RPINR24_25_IOC7R0_SIZE                             0x1
#define _RPINR24_25_IOC7R0_LENGTH                           0x1
#define _RPINR24_25_IOC7R0_MASK                             0x10
#define _RPINR24_25_IOC7R1_POSN                             0x5
#define _RPINR24_25_IOC7R1_POSITION                         0x5
#define _RPINR24_25_IOC7R1_SIZE                             0x1
#define _RPINR24_25_IOC7R1_LENGTH                           0x1
#define _RPINR24_25_IOC7R1_MASK                             0x20
#define _RPINR24_25_IOC7R2_POSN                             0x6
#define _RPINR24_25_IOC7R2_POSITION                         0x6
#define _RPINR24_25_IOC7R2_SIZE                             0x1
#define _RPINR24_25_IOC7R2_LENGTH                           0x1
#define _RPINR24_25_IOC7R2_MASK                             0x40
#define _RPINR24_25_IOC7R3_POSN                             0x7
#define _RPINR24_25_IOC7R3_POSITION                         0x7
#define _RPINR24_25_IOC7R3_SIZE                             0x1
#define _RPINR24_25_IOC7R3_LENGTH                           0x1
#define _RPINR24_25_IOC7R3_MASK                             0x80

// Register: RPINR26_27
#define RPINR26_27 RPINR26_27
extern volatile unsigned char           RPINR26_27          __at(0xE37);
#ifndef _LIB_BUILD
asm("RPINR26_27 equ 0E37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1R                  :4;
        unsigned INT2R                  :4;
    };
    struct {
        unsigned INT1R0                 :1;
        unsigned INT1R1                 :1;
        unsigned INT1R2                 :1;
        unsigned INT1R3                 :1;
        unsigned INT2R0                 :1;
        unsigned INT2R1                 :1;
        unsigned INT2R2                 :1;
        unsigned INT2R3                 :1;
    };
} RPINR26_27bits_t;
extern volatile RPINR26_27bits_t RPINR26_27bits __at(0xE37);
// bitfield macros
#define _RPINR26_27_INT1R_POSN                              0x0
#define _RPINR26_27_INT1R_POSITION                          0x0
#define _RPINR26_27_INT1R_SIZE                              0x4
#define _RPINR26_27_INT1R_LENGTH                            0x4
#define _RPINR26_27_INT1R_MASK                              0xF
#define _RPINR26_27_INT2R_POSN                              0x4
#define _RPINR26_27_INT2R_POSITION                          0x4
#define _RPINR26_27_INT2R_SIZE                              0x4
#define _RPINR26_27_INT2R_LENGTH                            0x4
#define _RPINR26_27_INT2R_MASK                              0xF0
#define _RPINR26_27_INT1R0_POSN                             0x0
#define _RPINR26_27_INT1R0_POSITION                         0x0
#define _RPINR26_27_INT1R0_SIZE                             0x1
#define _RPINR26_27_INT1R0_LENGTH                           0x1
#define _RPINR26_27_INT1R0_MASK                             0x1
#define _RPINR26_27_INT1R1_POSN                             0x1
#define _RPINR26_27_INT1R1_POSITION                         0x1
#define _RPINR26_27_INT1R1_SIZE                             0x1
#define _RPINR26_27_INT1R1_LENGTH                           0x1
#define _RPINR26_27_INT1R1_MASK                             0x2
#define _RPINR26_27_INT1R2_POSN                             0x2
#define _RPINR26_27_INT1R2_POSITION                         0x2
#define _RPINR26_27_INT1R2_SIZE                             0x1
#define _RPINR26_27_INT1R2_LENGTH                           0x1
#define _RPINR26_27_INT1R2_MASK                             0x4
#define _RPINR26_27_INT1R3_POSN                             0x3
#define _RPINR26_27_INT1R3_POSITION                         0x3
#define _RPINR26_27_INT1R3_SIZE                             0x1
#define _RPINR26_27_INT1R3_LENGTH                           0x1
#define _RPINR26_27_INT1R3_MASK                             0x8
#define _RPINR26_27_INT2R0_POSN                             0x4
#define _RPINR26_27_INT2R0_POSITION                         0x4
#define _RPINR26_27_INT2R0_SIZE                             0x1
#define _RPINR26_27_INT2R0_LENGTH                           0x1
#define _RPINR26_27_INT2R0_MASK                             0x10
#define _RPINR26_27_INT2R1_POSN                             0x5
#define _RPINR26_27_INT2R1_POSITION                         0x5
#define _RPINR26_27_INT2R1_SIZE                             0x1
#define _RPINR26_27_INT2R1_LENGTH                           0x1
#define _RPINR26_27_INT2R1_MASK                             0x20
#define _RPINR26_27_INT2R2_POSN                             0x6
#define _RPINR26_27_INT2R2_POSITION                         0x6
#define _RPINR26_27_INT2R2_SIZE                             0x1
#define _RPINR26_27_INT2R2_LENGTH                           0x1
#define _RPINR26_27_INT2R2_MASK                             0x40
#define _RPINR26_27_INT2R3_POSN                             0x7
#define _RPINR26_27_INT2R3_POSITION                         0x7
#define _RPINR26_27_INT2R3_SIZE                             0x1
#define _RPINR26_27_INT2R3_LENGTH                           0x1
#define _RPINR26_27_INT2R3_MASK                             0x80

// Register: RPINR28_29
#define RPINR28_29 RPINR28_29
extern volatile unsigned char           RPINR28_29          __at(0xE38);
#ifndef _LIB_BUILD
asm("RPINR28_29 equ 0E38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT3R                  :4;
        unsigned MDMINR                 :4;
    };
    struct {
        unsigned INT3R0                 :1;
        unsigned INT3R1                 :1;
        unsigned INT3R2                 :1;
        unsigned INT3R3                 :1;
        unsigned MDMINR0                :1;
        unsigned MDMINR1                :1;
        unsigned MDMINR2                :1;
        unsigned MDMINR3                :1;
    };
} RPINR28_29bits_t;
extern volatile RPINR28_29bits_t RPINR28_29bits __at(0xE38);
// bitfield macros
#define _RPINR28_29_INT3R_POSN                              0x0
#define _RPINR28_29_INT3R_POSITION                          0x0
#define _RPINR28_29_INT3R_SIZE                              0x4
#define _RPINR28_29_INT3R_LENGTH                            0x4
#define _RPINR28_29_INT3R_MASK                              0xF
#define _RPINR28_29_MDMINR_POSN                             0x4
#define _RPINR28_29_MDMINR_POSITION                         0x4
#define _RPINR28_29_MDMINR_SIZE                             0x4
#define _RPINR28_29_MDMINR_LENGTH                           0x4
#define _RPINR28_29_MDMINR_MASK                             0xF0
#define _RPINR28_29_INT3R0_POSN                             0x0
#define _RPINR28_29_INT3R0_POSITION                         0x0
#define _RPINR28_29_INT3R0_SIZE                             0x1
#define _RPINR28_29_INT3R0_LENGTH                           0x1
#define _RPINR28_29_INT3R0_MASK                             0x1
#define _RPINR28_29_INT3R1_POSN                             0x1
#define _RPINR28_29_INT3R1_POSITION                         0x1
#define _RPINR28_29_INT3R1_SIZE                             0x1
#define _RPINR28_29_INT3R1_LENGTH                           0x1
#define _RPINR28_29_INT3R1_MASK                             0x2
#define _RPINR28_29_INT3R2_POSN                             0x2
#define _RPINR28_29_INT3R2_POSITION                         0x2
#define _RPINR28_29_INT3R2_SIZE                             0x1
#define _RPINR28_29_INT3R2_LENGTH                           0x1
#define _RPINR28_29_INT3R2_MASK                             0x4
#define _RPINR28_29_INT3R3_POSN                             0x3
#define _RPINR28_29_INT3R3_POSITION                         0x3
#define _RPINR28_29_INT3R3_SIZE                             0x1
#define _RPINR28_29_INT3R3_LENGTH                           0x1
#define _RPINR28_29_INT3R3_MASK                             0x8
#define _RPINR28_29_MDMINR0_POSN                            0x4
#define _RPINR28_29_MDMINR0_POSITION                        0x4
#define _RPINR28_29_MDMINR0_SIZE                            0x1
#define _RPINR28_29_MDMINR0_LENGTH                          0x1
#define _RPINR28_29_MDMINR0_MASK                            0x10
#define _RPINR28_29_MDMINR1_POSN                            0x5
#define _RPINR28_29_MDMINR1_POSITION                        0x5
#define _RPINR28_29_MDMINR1_SIZE                            0x1
#define _RPINR28_29_MDMINR1_LENGTH                          0x1
#define _RPINR28_29_MDMINR1_MASK                            0x20
#define _RPINR28_29_MDMINR2_POSN                            0x6
#define _RPINR28_29_MDMINR2_POSITION                        0x6
#define _RPINR28_29_MDMINR2_SIZE                            0x1
#define _RPINR28_29_MDMINR2_LENGTH                          0x1
#define _RPINR28_29_MDMINR2_MASK                            0x40
#define _RPINR28_29_MDMINR3_POSN                            0x7
#define _RPINR28_29_MDMINR3_POSITION                        0x7
#define _RPINR28_29_MDMINR3_SIZE                            0x1
#define _RPINR28_29_MDMINR3_LENGTH                          0x1
#define _RPINR28_29_MDMINR3_MASK                            0x80

// Register: RPINR30_31
#define RPINR30_31 RPINR30_31
extern volatile unsigned char           RPINR30_31          __at(0xE39);
#ifndef _LIB_BUILD
asm("RPINR30_31 equ 0E39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCIN1R                :4;
        unsigned MDCIN2R                :4;
    };
    struct {
        unsigned MDCIN1R0               :1;
        unsigned MDCIN1R1               :1;
        unsigned MDCIN1R2               :1;
        unsigned MDCIN1R3               :1;
        unsigned MDCIN2R0               :1;
        unsigned MDCIN2R1               :1;
        unsigned MDCIN2R2               :1;
        unsigned MDCIN2R3               :1;
    };
} RPINR30_31bits_t;
extern volatile RPINR30_31bits_t RPINR30_31bits __at(0xE39);
// bitfield macros
#define _RPINR30_31_MDCIN1R_POSN                            0x0
#define _RPINR30_31_MDCIN1R_POSITION                        0x0
#define _RPINR30_31_MDCIN1R_SIZE                            0x4
#define _RPINR30_31_MDCIN1R_LENGTH                          0x4
#define _RPINR30_31_MDCIN1R_MASK                            0xF
#define _RPINR30_31_MDCIN2R_POSN                            0x4
#define _RPINR30_31_MDCIN2R_POSITION                        0x4
#define _RPINR30_31_MDCIN2R_SIZE                            0x4
#define _RPINR30_31_MDCIN2R_LENGTH                          0x4
#define _RPINR30_31_MDCIN2R_MASK                            0xF0
#define _RPINR30_31_MDCIN1R0_POSN                           0x0
#define _RPINR30_31_MDCIN1R0_POSITION                       0x0
#define _RPINR30_31_MDCIN1R0_SIZE                           0x1
#define _RPINR30_31_MDCIN1R0_LENGTH                         0x1
#define _RPINR30_31_MDCIN1R0_MASK                           0x1
#define _RPINR30_31_MDCIN1R1_POSN                           0x1
#define _RPINR30_31_MDCIN1R1_POSITION                       0x1
#define _RPINR30_31_MDCIN1R1_SIZE                           0x1
#define _RPINR30_31_MDCIN1R1_LENGTH                         0x1
#define _RPINR30_31_MDCIN1R1_MASK                           0x2
#define _RPINR30_31_MDCIN1R2_POSN                           0x2
#define _RPINR30_31_MDCIN1R2_POSITION                       0x2
#define _RPINR30_31_MDCIN1R2_SIZE                           0x1
#define _RPINR30_31_MDCIN1R2_LENGTH                         0x1
#define _RPINR30_31_MDCIN1R2_MASK                           0x4
#define _RPINR30_31_MDCIN1R3_POSN                           0x3
#define _RPINR30_31_MDCIN1R3_POSITION                       0x3
#define _RPINR30_31_MDCIN1R3_SIZE                           0x1
#define _RPINR30_31_MDCIN1R3_LENGTH                         0x1
#define _RPINR30_31_MDCIN1R3_MASK                           0x8
#define _RPINR30_31_MDCIN2R0_POSN                           0x4
#define _RPINR30_31_MDCIN2R0_POSITION                       0x4
#define _RPINR30_31_MDCIN2R0_SIZE                           0x1
#define _RPINR30_31_MDCIN2R0_LENGTH                         0x1
#define _RPINR30_31_MDCIN2R0_MASK                           0x10
#define _RPINR30_31_MDCIN2R1_POSN                           0x5
#define _RPINR30_31_MDCIN2R1_POSITION                       0x5
#define _RPINR30_31_MDCIN2R1_SIZE                           0x1
#define _RPINR30_31_MDCIN2R1_LENGTH                         0x1
#define _RPINR30_31_MDCIN2R1_MASK                           0x20
#define _RPINR30_31_MDCIN2R2_POSN                           0x6
#define _RPINR30_31_MDCIN2R2_POSITION                       0x6
#define _RPINR30_31_MDCIN2R2_SIZE                           0x1
#define _RPINR30_31_MDCIN2R2_LENGTH                         0x1
#define _RPINR30_31_MDCIN2R2_MASK                           0x40
#define _RPINR30_31_MDCIN2R3_POSN                           0x7
#define _RPINR30_31_MDCIN2R3_POSITION                       0x7
#define _RPINR30_31_MDCIN2R3_SIZE                           0x1
#define _RPINR30_31_MDCIN2R3_LENGTH                         0x1
#define _RPINR30_31_MDCIN2R3_MASK                           0x80

// Register: RPINR32_33
#define RPINR32_33 RPINR32_33
extern volatile unsigned char           RPINR32_33          __at(0xE3A);
#ifndef _LIB_BUILD
asm("RPINR32_33 equ 0E3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4R                  :4;
        unsigned CCP5R                  :4;
    };
    struct {
        unsigned CCP4R0                 :1;
        unsigned CCP4R1                 :1;
        unsigned CCP4R2                 :1;
        unsigned CCP4R3                 :1;
        unsigned CCP5R0                 :1;
        unsigned CCP5R1                 :1;
        unsigned CCP5R2                 :1;
        unsigned CCP5R3                 :1;
    };
} RPINR32_33bits_t;
extern volatile RPINR32_33bits_t RPINR32_33bits __at(0xE3A);
// bitfield macros
#define _RPINR32_33_CCP4R_POSN                              0x0
#define _RPINR32_33_CCP4R_POSITION                          0x0
#define _RPINR32_33_CCP4R_SIZE                              0x4
#define _RPINR32_33_CCP4R_LENGTH                            0x4
#define _RPINR32_33_CCP4R_MASK                              0xF
#define _RPINR32_33_CCP5R_POSN                              0x4
#define _RPINR32_33_CCP5R_POSITION                          0x4
#define _RPINR32_33_CCP5R_SIZE                              0x4
#define _RPINR32_33_CCP5R_LENGTH                            0x4
#define _RPINR32_33_CCP5R_MASK                              0xF0
#define _RPINR32_33_CCP4R0_POSN                             0x0
#define _RPINR32_33_CCP4R0_POSITION                         0x0
#define _RPINR32_33_CCP4R0_SIZE                             0x1
#define _RPINR32_33_CCP4R0_LENGTH                           0x1
#define _RPINR32_33_CCP4R0_MASK                             0x1
#define _RPINR32_33_CCP4R1_POSN                             0x1
#define _RPINR32_33_CCP4R1_POSITION                         0x1
#define _RPINR32_33_CCP4R1_SIZE                             0x1
#define _RPINR32_33_CCP4R1_LENGTH                           0x1
#define _RPINR32_33_CCP4R1_MASK                             0x2
#define _RPINR32_33_CCP4R2_POSN                             0x2
#define _RPINR32_33_CCP4R2_POSITION                         0x2
#define _RPINR32_33_CCP4R2_SIZE                             0x1
#define _RPINR32_33_CCP4R2_LENGTH                           0x1
#define _RPINR32_33_CCP4R2_MASK                             0x4
#define _RPINR32_33_CCP4R3_POSN                             0x3
#define _RPINR32_33_CCP4R3_POSITION                         0x3
#define _RPINR32_33_CCP4R3_SIZE                             0x1
#define _RPINR32_33_CCP4R3_LENGTH                           0x1
#define _RPINR32_33_CCP4R3_MASK                             0x8
#define _RPINR32_33_CCP5R0_POSN                             0x4
#define _RPINR32_33_CCP5R0_POSITION                         0x4
#define _RPINR32_33_CCP5R0_SIZE                             0x1
#define _RPINR32_33_CCP5R0_LENGTH                           0x1
#define _RPINR32_33_CCP5R0_MASK                             0x10
#define _RPINR32_33_CCP5R1_POSN                             0x5
#define _RPINR32_33_CCP5R1_POSITION                         0x5
#define _RPINR32_33_CCP5R1_SIZE                             0x1
#define _RPINR32_33_CCP5R1_LENGTH                           0x1
#define _RPINR32_33_CCP5R1_MASK                             0x20
#define _RPINR32_33_CCP5R2_POSN                             0x6
#define _RPINR32_33_CCP5R2_POSITION                         0x6
#define _RPINR32_33_CCP5R2_SIZE                             0x1
#define _RPINR32_33_CCP5R2_LENGTH                           0x1
#define _RPINR32_33_CCP5R2_MASK                             0x40
#define _RPINR32_33_CCP5R3_POSN                             0x7
#define _RPINR32_33_CCP5R3_POSITION                         0x7
#define _RPINR32_33_CCP5R3_SIZE                             0x1
#define _RPINR32_33_CCP5R3_LENGTH                           0x1
#define _RPINR32_33_CCP5R3_MASK                             0x80

// Register: RPINR34_35
#define RPINR34_35 RPINR34_35
extern volatile unsigned char           RPINR34_35          __at(0xE3B);
#ifndef _LIB_BUILD
asm("RPINR34_35 equ 0E3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP6R                  :4;
        unsigned CCP7R                  :4;
    };
    struct {
        unsigned CCP6R0                 :1;
        unsigned CCP6R1                 :1;
        unsigned CCP6R2                 :1;
        unsigned CCP6R3                 :1;
        unsigned CCP7R0                 :1;
        unsigned CCP7R1                 :1;
        unsigned CCP7R2                 :1;
        unsigned CCP7R3                 :1;
    };
} RPINR34_35bits_t;
extern volatile RPINR34_35bits_t RPINR34_35bits __at(0xE3B);
// bitfield macros
#define _RPINR34_35_CCP6R_POSN                              0x0
#define _RPINR34_35_CCP6R_POSITION                          0x0
#define _RPINR34_35_CCP6R_SIZE                              0x4
#define _RPINR34_35_CCP6R_LENGTH                            0x4
#define _RPINR34_35_CCP6R_MASK                              0xF
#define _RPINR34_35_CCP7R_POSN                              0x4
#define _RPINR34_35_CCP7R_POSITION                          0x4
#define _RPINR34_35_CCP7R_SIZE                              0x4
#define _RPINR34_35_CCP7R_LENGTH                            0x4
#define _RPINR34_35_CCP7R_MASK                              0xF0
#define _RPINR34_35_CCP6R0_POSN                             0x0
#define _RPINR34_35_CCP6R0_POSITION                         0x0
#define _RPINR34_35_CCP6R0_SIZE                             0x1
#define _RPINR34_35_CCP6R0_LENGTH                           0x1
#define _RPINR34_35_CCP6R0_MASK                             0x1
#define _RPINR34_35_CCP6R1_POSN                             0x1
#define _RPINR34_35_CCP6R1_POSITION                         0x1
#define _RPINR34_35_CCP6R1_SIZE                             0x1
#define _RPINR34_35_CCP6R1_LENGTH                           0x1
#define _RPINR34_35_CCP6R1_MASK                             0x2
#define _RPINR34_35_CCP6R2_POSN                             0x2
#define _RPINR34_35_CCP6R2_POSITION                         0x2
#define _RPINR34_35_CCP6R2_SIZE                             0x1
#define _RPINR34_35_CCP6R2_LENGTH                           0x1
#define _RPINR34_35_CCP6R2_MASK                             0x4
#define _RPINR34_35_CCP6R3_POSN                             0x3
#define _RPINR34_35_CCP6R3_POSITION                         0x3
#define _RPINR34_35_CCP6R3_SIZE                             0x1
#define _RPINR34_35_CCP6R3_LENGTH                           0x1
#define _RPINR34_35_CCP6R3_MASK                             0x8
#define _RPINR34_35_CCP7R0_POSN                             0x4
#define _RPINR34_35_CCP7R0_POSITION                         0x4
#define _RPINR34_35_CCP7R0_SIZE                             0x1
#define _RPINR34_35_CCP7R0_LENGTH                           0x1
#define _RPINR34_35_CCP7R0_MASK                             0x10
#define _RPINR34_35_CCP7R1_POSN                             0x5
#define _RPINR34_35_CCP7R1_POSITION                         0x5
#define _RPINR34_35_CCP7R1_SIZE                             0x1
#define _RPINR34_35_CCP7R1_LENGTH                           0x1
#define _RPINR34_35_CCP7R1_MASK                             0x20
#define _RPINR34_35_CCP7R2_POSN                             0x6
#define _RPINR34_35_CCP7R2_POSITION                         0x6
#define _RPINR34_35_CCP7R2_SIZE                             0x1
#define _RPINR34_35_CCP7R2_LENGTH                           0x1
#define _RPINR34_35_CCP7R2_MASK                             0x40
#define _RPINR34_35_CCP7R3_POSN                             0x7
#define _RPINR34_35_CCP7R3_POSITION                         0x7
#define _RPINR34_35_CCP7R3_SIZE                             0x1
#define _RPINR34_35_CCP7R3_LENGTH                           0x1
#define _RPINR34_35_CCP7R3_MASK                             0x80

// Register: RPINR36_37
#define RPINR36_37 RPINR36_37
extern volatile unsigned char           RPINR36_37          __at(0xE3C);
#ifndef _LIB_BUILD
asm("RPINR36_37 equ 0E3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP8R                  :4;
        unsigned CCP9R                  :4;
    };
    struct {
        unsigned CCP8R0                 :1;
        unsigned CCP8R1                 :1;
        unsigned CCP8R2                 :1;
        unsigned CCP8R3                 :1;
        unsigned CCP9R0                 :1;
        unsigned CCP9R1                 :1;
        unsigned CCP9R2                 :1;
        unsigned CCP9R3                 :1;
    };
} RPINR36_37bits_t;
extern volatile RPINR36_37bits_t RPINR36_37bits __at(0xE3C);
// bitfield macros
#define _RPINR36_37_CCP8R_POSN                              0x0
#define _RPINR36_37_CCP8R_POSITION                          0x0
#define _RPINR36_37_CCP8R_SIZE                              0x4
#define _RPINR36_37_CCP8R_LENGTH                            0x4
#define _RPINR36_37_CCP8R_MASK                              0xF
#define _RPINR36_37_CCP9R_POSN                              0x4
#define _RPINR36_37_CCP9R_POSITION                          0x4
#define _RPINR36_37_CCP9R_SIZE                              0x4
#define _RPINR36_37_CCP9R_LENGTH                            0x4
#define _RPINR36_37_CCP9R_MASK                              0xF0
#define _RPINR36_37_CCP8R0_POSN                             0x0
#define _RPINR36_37_CCP8R0_POSITION                         0x0
#define _RPINR36_37_CCP8R0_SIZE                             0x1
#define _RPINR36_37_CCP8R0_LENGTH                           0x1
#define _RPINR36_37_CCP8R0_MASK                             0x1
#define _RPINR36_37_CCP8R1_POSN                             0x1
#define _RPINR36_37_CCP8R1_POSITION                         0x1
#define _RPINR36_37_CCP8R1_SIZE                             0x1
#define _RPINR36_37_CCP8R1_LENGTH                           0x1
#define _RPINR36_37_CCP8R1_MASK                             0x2
#define _RPINR36_37_CCP8R2_POSN                             0x2
#define _RPINR36_37_CCP8R2_POSITION                         0x2
#define _RPINR36_37_CCP8R2_SIZE                             0x1
#define _RPINR36_37_CCP8R2_LENGTH                           0x1
#define _RPINR36_37_CCP8R2_MASK                             0x4
#define _RPINR36_37_CCP8R3_POSN                             0x3
#define _RPINR36_37_CCP8R3_POSITION                         0x3
#define _RPINR36_37_CCP8R3_SIZE                             0x1
#define _RPINR36_37_CCP8R3_LENGTH                           0x1
#define _RPINR36_37_CCP8R3_MASK                             0x8
#define _RPINR36_37_CCP9R0_POSN                             0x4
#define _RPINR36_37_CCP9R0_POSITION                         0x4
#define _RPINR36_37_CCP9R0_SIZE                             0x1
#define _RPINR36_37_CCP9R0_LENGTH                           0x1
#define _RPINR36_37_CCP9R0_MASK                             0x10
#define _RPINR36_37_CCP9R1_POSN                             0x5
#define _RPINR36_37_CCP9R1_POSITION                         0x5
#define _RPINR36_37_CCP9R1_SIZE                             0x1
#define _RPINR36_37_CCP9R1_LENGTH                           0x1
#define _RPINR36_37_CCP9R1_MASK                             0x20
#define _RPINR36_37_CCP9R2_POSN                             0x6
#define _RPINR36_37_CCP9R2_POSITION                         0x6
#define _RPINR36_37_CCP9R2_SIZE                             0x1
#define _RPINR36_37_CCP9R2_LENGTH                           0x1
#define _RPINR36_37_CCP9R2_MASK                             0x40
#define _RPINR36_37_CCP9R3_POSN                             0x7
#define _RPINR36_37_CCP9R3_POSITION                         0x7
#define _RPINR36_37_CCP9R3_SIZE                             0x1
#define _RPINR36_37_CCP9R3_LENGTH                           0x1
#define _RPINR36_37_CCP9R3_MASK                             0x80

// Register: RPINR38_39
#define RPINR38_39 RPINR38_39
extern volatile unsigned char           RPINR38_39          __at(0xE3D);
#ifndef _LIB_BUILD
asm("RPINR38_39 equ 0E3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP10R                 :4;
        unsigned T0CKIR                 :4;
    };
    struct {
        unsigned CCP10R0                :1;
        unsigned CCP10R1                :1;
        unsigned CCP10R2                :1;
        unsigned CCP10R3                :1;
        unsigned T0CKIR0                :1;
        unsigned T0CKIR1                :1;
        unsigned T0CKIR2                :1;
        unsigned T0CKIR3                :1;
    };
} RPINR38_39bits_t;
extern volatile RPINR38_39bits_t RPINR38_39bits __at(0xE3D);
// bitfield macros
#define _RPINR38_39_CCP10R_POSN                             0x0
#define _RPINR38_39_CCP10R_POSITION                         0x0
#define _RPINR38_39_CCP10R_SIZE                             0x4
#define _RPINR38_39_CCP10R_LENGTH                           0x4
#define _RPINR38_39_CCP10R_MASK                             0xF
#define _RPINR38_39_T0CKIR_POSN                             0x4
#define _RPINR38_39_T0CKIR_POSITION                         0x4
#define _RPINR38_39_T0CKIR_SIZE                             0x4
#define _RPINR38_39_T0CKIR_LENGTH                           0x4
#define _RPINR38_39_T0CKIR_MASK                             0xF0
#define _RPINR38_39_CCP10R0_POSN                            0x0
#define _RPINR38_39_CCP10R0_POSITION                        0x0
#define _RPINR38_39_CCP10R0_SIZE                            0x1
#define _RPINR38_39_CCP10R0_LENGTH                          0x1
#define _RPINR38_39_CCP10R0_MASK                            0x1
#define _RPINR38_39_CCP10R1_POSN                            0x1
#define _RPINR38_39_CCP10R1_POSITION                        0x1
#define _RPINR38_39_CCP10R1_SIZE                            0x1
#define _RPINR38_39_CCP10R1_LENGTH                          0x1
#define _RPINR38_39_CCP10R1_MASK                            0x2
#define _RPINR38_39_CCP10R2_POSN                            0x2
#define _RPINR38_39_CCP10R2_POSITION                        0x2
#define _RPINR38_39_CCP10R2_SIZE                            0x1
#define _RPINR38_39_CCP10R2_LENGTH                          0x1
#define _RPINR38_39_CCP10R2_MASK                            0x4
#define _RPINR38_39_CCP10R3_POSN                            0x3
#define _RPINR38_39_CCP10R3_POSITION                        0x3
#define _RPINR38_39_CCP10R3_SIZE                            0x1
#define _RPINR38_39_CCP10R3_LENGTH                          0x1
#define _RPINR38_39_CCP10R3_MASK                            0x8
#define _RPINR38_39_T0CKIR0_POSN                            0x4
#define _RPINR38_39_T0CKIR0_POSITION                        0x4
#define _RPINR38_39_T0CKIR0_SIZE                            0x1
#define _RPINR38_39_T0CKIR0_LENGTH                          0x1
#define _RPINR38_39_T0CKIR0_MASK                            0x10
#define _RPINR38_39_T0CKIR1_POSN                            0x5
#define _RPINR38_39_T0CKIR1_POSITION                        0x5
#define _RPINR38_39_T0CKIR1_SIZE                            0x1
#define _RPINR38_39_T0CKIR1_LENGTH                          0x1
#define _RPINR38_39_T0CKIR1_MASK                            0x20
#define _RPINR38_39_T0CKIR2_POSN                            0x6
#define _RPINR38_39_T0CKIR2_POSITION                        0x6
#define _RPINR38_39_T0CKIR2_SIZE                            0x1
#define _RPINR38_39_T0CKIR2_LENGTH                          0x1
#define _RPINR38_39_T0CKIR2_MASK                            0x40
#define _RPINR38_39_T0CKIR3_POSN                            0x7
#define _RPINR38_39_T0CKIR3_POSITION                        0x7
#define _RPINR38_39_T0CKIR3_SIZE                            0x1
#define _RPINR38_39_T0CKIR3_LENGTH                          0x1
#define _RPINR38_39_T0CKIR3_MASK                            0x80

// Register: RPINR40_41
#define RPINR40_41 RPINR40_41
extern volatile unsigned char           RPINR40_41          __at(0xE3E);
#ifndef _LIB_BUILD
asm("RPINR40_41 equ 0E3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GR                   :4;
        unsigned T1CKIR                 :4;
    };
    struct {
        unsigned T1GR0                  :1;
        unsigned T1GR1                  :1;
        unsigned T1GR2                  :1;
        unsigned T1GR3                  :1;
        unsigned T1CKIR0                :1;
        unsigned T1CKIR1                :1;
        unsigned T1CKIR2                :1;
        unsigned T1CKIR3                :1;
    };
} RPINR40_41bits_t;
extern volatile RPINR40_41bits_t RPINR40_41bits __at(0xE3E);
// bitfield macros
#define _RPINR40_41_T1GR_POSN                               0x0
#define _RPINR40_41_T1GR_POSITION                           0x0
#define _RPINR40_41_T1GR_SIZE                               0x4
#define _RPINR40_41_T1GR_LENGTH                             0x4
#define _RPINR40_41_T1GR_MASK                               0xF
#define _RPINR40_41_T1CKIR_POSN                             0x4
#define _RPINR40_41_T1CKIR_POSITION                         0x4
#define _RPINR40_41_T1CKIR_SIZE                             0x4
#define _RPINR40_41_T1CKIR_LENGTH                           0x4
#define _RPINR40_41_T1CKIR_MASK                             0xF0
#define _RPINR40_41_T1GR0_POSN                              0x0
#define _RPINR40_41_T1GR0_POSITION                          0x0
#define _RPINR40_41_T1GR0_SIZE                              0x1
#define _RPINR40_41_T1GR0_LENGTH                            0x1
#define _RPINR40_41_T1GR0_MASK                              0x1
#define _RPINR40_41_T1GR1_POSN                              0x1
#define _RPINR40_41_T1GR1_POSITION                          0x1
#define _RPINR40_41_T1GR1_SIZE                              0x1
#define _RPINR40_41_T1GR1_LENGTH                            0x1
#define _RPINR40_41_T1GR1_MASK                              0x2
#define _RPINR40_41_T1GR2_POSN                              0x2
#define _RPINR40_41_T1GR2_POSITION                          0x2
#define _RPINR40_41_T1GR2_SIZE                              0x1
#define _RPINR40_41_T1GR2_LENGTH                            0x1
#define _RPINR40_41_T1GR2_MASK                              0x4
#define _RPINR40_41_T1GR3_POSN                              0x3
#define _RPINR40_41_T1GR3_POSITION                          0x3
#define _RPINR40_41_T1GR3_SIZE                              0x1
#define _RPINR40_41_T1GR3_LENGTH                            0x1
#define _RPINR40_41_T1GR3_MASK                              0x8
#define _RPINR40_41_T1CKIR0_POSN                            0x4
#define _RPINR40_41_T1CKIR0_POSITION                        0x4
#define _RPINR40_41_T1CKIR0_SIZE                            0x1
#define _RPINR40_41_T1CKIR0_LENGTH                          0x1
#define _RPINR40_41_T1CKIR0_MASK                            0x10
#define _RPINR40_41_T1CKIR1_POSN                            0x5
#define _RPINR40_41_T1CKIR1_POSITION                        0x5
#define _RPINR40_41_T1CKIR1_SIZE                            0x1
#define _RPINR40_41_T1CKIR1_LENGTH                          0x1
#define _RPINR40_41_T1CKIR1_MASK                            0x20
#define _RPINR40_41_T1CKIR2_POSN                            0x6
#define _RPINR40_41_T1CKIR2_POSITION                        0x6
#define _RPINR40_41_T1CKIR2_SIZE                            0x1
#define _RPINR40_41_T1CKIR2_LENGTH                          0x1
#define _RPINR40_41_T1CKIR2_MASK                            0x40
#define _RPINR40_41_T1CKIR3_POSN                            0x7
#define _RPINR40_41_T1CKIR3_POSITION                        0x7
#define _RPINR40_41_T1CKIR3_SIZE                            0x1
#define _RPINR40_41_T1CKIR3_LENGTH                          0x1
#define _RPINR40_41_T1CKIR3_MASK                            0x80

// Register: RPINR42_43
#define RPINR42_43 RPINR42_43
extern volatile unsigned char           RPINR42_43          __at(0xE3F);
#ifndef _LIB_BUILD
asm("RPINR42_43 equ 0E3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GR                   :4;
        unsigned T3CKIR                 :4;
    };
    struct {
        unsigned T3GR0                  :1;
        unsigned T3GR1                  :1;
        unsigned T3GR2                  :1;
        unsigned T3GR3                  :1;
        unsigned T3CKIR0                :1;
        unsigned T3CKIR1                :1;
        unsigned T3CKIR2                :1;
        unsigned T3CKIR3                :1;
    };
} RPINR42_43bits_t;
extern volatile RPINR42_43bits_t RPINR42_43bits __at(0xE3F);
// bitfield macros
#define _RPINR42_43_T3GR_POSN                               0x0
#define _RPINR42_43_T3GR_POSITION                           0x0
#define _RPINR42_43_T3GR_SIZE                               0x4
#define _RPINR42_43_T3GR_LENGTH                             0x4
#define _RPINR42_43_T3GR_MASK                               0xF
#define _RPINR42_43_T3CKIR_POSN                             0x4
#define _RPINR42_43_T3CKIR_POSITION                         0x4
#define _RPINR42_43_T3CKIR_SIZE                             0x4
#define _RPINR42_43_T3CKIR_LENGTH                           0x4
#define _RPINR42_43_T3CKIR_MASK                             0xF0
#define _RPINR42_43_T3GR0_POSN                              0x0
#define _RPINR42_43_T3GR0_POSITION                          0x0
#define _RPINR42_43_T3GR0_SIZE                              0x1
#define _RPINR42_43_T3GR0_LENGTH                            0x1
#define _RPINR42_43_T3GR0_MASK                              0x1
#define _RPINR42_43_T3GR1_POSN                              0x1
#define _RPINR42_43_T3GR1_POSITION                          0x1
#define _RPINR42_43_T3GR1_SIZE                              0x1
#define _RPINR42_43_T3GR1_LENGTH                            0x1
#define _RPINR42_43_T3GR1_MASK                              0x2
#define _RPINR42_43_T3GR2_POSN                              0x2
#define _RPINR42_43_T3GR2_POSITION                          0x2
#define _RPINR42_43_T3GR2_SIZE                              0x1
#define _RPINR42_43_T3GR2_LENGTH                            0x1
#define _RPINR42_43_T3GR2_MASK                              0x4
#define _RPINR42_43_T3GR3_POSN                              0x3
#define _RPINR42_43_T3GR3_POSITION                          0x3
#define _RPINR42_43_T3GR3_SIZE                              0x1
#define _RPINR42_43_T3GR3_LENGTH                            0x1
#define _RPINR42_43_T3GR3_MASK                              0x8
#define _RPINR42_43_T3CKIR0_POSN                            0x4
#define _RPINR42_43_T3CKIR0_POSITION                        0x4
#define _RPINR42_43_T3CKIR0_SIZE                            0x1
#define _RPINR42_43_T3CKIR0_LENGTH                          0x1
#define _RPINR42_43_T3CKIR0_MASK                            0x10
#define _RPINR42_43_T3CKIR1_POSN                            0x5
#define _RPINR42_43_T3CKIR1_POSITION                        0x5
#define _RPINR42_43_T3CKIR1_SIZE                            0x1
#define _RPINR42_43_T3CKIR1_LENGTH                          0x1
#define _RPINR42_43_T3CKIR1_MASK                            0x20
#define _RPINR42_43_T3CKIR2_POSN                            0x6
#define _RPINR42_43_T3CKIR2_POSITION                        0x6
#define _RPINR42_43_T3CKIR2_SIZE                            0x1
#define _RPINR42_43_T3CKIR2_LENGTH                          0x1
#define _RPINR42_43_T3CKIR2_MASK                            0x40
#define _RPINR42_43_T3CKIR3_POSN                            0x7
#define _RPINR42_43_T3CKIR3_POSITION                        0x7
#define _RPINR42_43_T3CKIR3_SIZE                            0x1
#define _RPINR42_43_T3CKIR3_LENGTH                          0x1
#define _RPINR42_43_T3CKIR3_MASK                            0x80

// Register: RPINR44_45
#define RPINR44_45 RPINR44_45
extern volatile unsigned char           RPINR44_45          __at(0xE40);
#ifndef _LIB_BUILD
asm("RPINR44_45 equ 0E40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5GR                   :4;
        unsigned T5CKIR                 :4;
    };
    struct {
        unsigned T5GR0                  :1;
        unsigned T5GR1                  :1;
        unsigned T5GR2                  :1;
        unsigned T5GR3                  :1;
        unsigned T5CKIR0                :1;
        unsigned T5CKIR1                :1;
        unsigned T5CKIR2                :1;
        unsigned T5CKIR3                :1;
    };
} RPINR44_45bits_t;
extern volatile RPINR44_45bits_t RPINR44_45bits __at(0xE40);
// bitfield macros
#define _RPINR44_45_T5GR_POSN                               0x0
#define _RPINR44_45_T5GR_POSITION                           0x0
#define _RPINR44_45_T5GR_SIZE                               0x4
#define _RPINR44_45_T5GR_LENGTH                             0x4
#define _RPINR44_45_T5GR_MASK                               0xF
#define _RPINR44_45_T5CKIR_POSN                             0x4
#define _RPINR44_45_T5CKIR_POSITION                         0x4
#define _RPINR44_45_T5CKIR_SIZE                             0x4
#define _RPINR44_45_T5CKIR_LENGTH                           0x4
#define _RPINR44_45_T5CKIR_MASK                             0xF0
#define _RPINR44_45_T5GR0_POSN                              0x0
#define _RPINR44_45_T5GR0_POSITION                          0x0
#define _RPINR44_45_T5GR0_SIZE                              0x1
#define _RPINR44_45_T5GR0_LENGTH                            0x1
#define _RPINR44_45_T5GR0_MASK                              0x1
#define _RPINR44_45_T5GR1_POSN                              0x1
#define _RPINR44_45_T5GR1_POSITION                          0x1
#define _RPINR44_45_T5GR1_SIZE                              0x1
#define _RPINR44_45_T5GR1_LENGTH                            0x1
#define _RPINR44_45_T5GR1_MASK                              0x2
#define _RPINR44_45_T5GR2_POSN                              0x2
#define _RPINR44_45_T5GR2_POSITION                          0x2
#define _RPINR44_45_T5GR2_SIZE                              0x1
#define _RPINR44_45_T5GR2_LENGTH                            0x1
#define _RPINR44_45_T5GR2_MASK                              0x4
#define _RPINR44_45_T5GR3_POSN                              0x3
#define _RPINR44_45_T5GR3_POSITION                          0x3
#define _RPINR44_45_T5GR3_SIZE                              0x1
#define _RPINR44_45_T5GR3_LENGTH                            0x1
#define _RPINR44_45_T5GR3_MASK                              0x8
#define _RPINR44_45_T5CKIR0_POSN                            0x4
#define _RPINR44_45_T5CKIR0_POSITION                        0x4
#define _RPINR44_45_T5CKIR0_SIZE                            0x1
#define _RPINR44_45_T5CKIR0_LENGTH                          0x1
#define _RPINR44_45_T5CKIR0_MASK                            0x10
#define _RPINR44_45_T5CKIR1_POSN                            0x5
#define _RPINR44_45_T5CKIR1_POSITION                        0x5
#define _RPINR44_45_T5CKIR1_SIZE                            0x1
#define _RPINR44_45_T5CKIR1_LENGTH                          0x1
#define _RPINR44_45_T5CKIR1_MASK                            0x20
#define _RPINR44_45_T5CKIR2_POSN                            0x6
#define _RPINR44_45_T5CKIR2_POSITION                        0x6
#define _RPINR44_45_T5CKIR2_SIZE                            0x1
#define _RPINR44_45_T5CKIR2_LENGTH                          0x1
#define _RPINR44_45_T5CKIR2_MASK                            0x40
#define _RPINR44_45_T5CKIR3_POSN                            0x7
#define _RPINR44_45_T5CKIR3_POSITION                        0x7
#define _RPINR44_45_T5CKIR3_SIZE                            0x1
#define _RPINR44_45_T5CKIR3_LENGTH                          0x1
#define _RPINR44_45_T5CKIR3_MASK                            0x80

// Register: RPINR46_47
#define RPINR46_47 RPINR46_47
extern volatile unsigned char           RPINR46_47          __at(0xE41);
#ifndef _LIB_BUILD
asm("RPINR46_47 equ 0E41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PBIO0R                 :4;
        unsigned PBIO1R                 :4;
    };
    struct {
        unsigned PBIO0R0                :1;
        unsigned PBIO0R1                :1;
        unsigned PBIO0R2                :1;
        unsigned PBIO0R3                :1;
        unsigned PBIO1R0                :1;
        unsigned PBIO1R1                :1;
        unsigned PBIO1R2                :1;
        unsigned PBIO1R3                :1;
    };
} RPINR46_47bits_t;
extern volatile RPINR46_47bits_t RPINR46_47bits __at(0xE41);
// bitfield macros
#define _RPINR46_47_PBIO0R_POSN                             0x0
#define _RPINR46_47_PBIO0R_POSITION                         0x0
#define _RPINR46_47_PBIO0R_SIZE                             0x4
#define _RPINR46_47_PBIO0R_LENGTH                           0x4
#define _RPINR46_47_PBIO0R_MASK                             0xF
#define _RPINR46_47_PBIO1R_POSN                             0x4
#define _RPINR46_47_PBIO1R_POSITION                         0x4
#define _RPINR46_47_PBIO1R_SIZE                             0x4
#define _RPINR46_47_PBIO1R_LENGTH                           0x4
#define _RPINR46_47_PBIO1R_MASK                             0xF0
#define _RPINR46_47_PBIO0R0_POSN                            0x0
#define _RPINR46_47_PBIO0R0_POSITION                        0x0
#define _RPINR46_47_PBIO0R0_SIZE                            0x1
#define _RPINR46_47_PBIO0R0_LENGTH                          0x1
#define _RPINR46_47_PBIO0R0_MASK                            0x1
#define _RPINR46_47_PBIO0R1_POSN                            0x1
#define _RPINR46_47_PBIO0R1_POSITION                        0x1
#define _RPINR46_47_PBIO0R1_SIZE                            0x1
#define _RPINR46_47_PBIO0R1_LENGTH                          0x1
#define _RPINR46_47_PBIO0R1_MASK                            0x2
#define _RPINR46_47_PBIO0R2_POSN                            0x2
#define _RPINR46_47_PBIO0R2_POSITION                        0x2
#define _RPINR46_47_PBIO0R2_SIZE                            0x1
#define _RPINR46_47_PBIO0R2_LENGTH                          0x1
#define _RPINR46_47_PBIO0R2_MASK                            0x4
#define _RPINR46_47_PBIO0R3_POSN                            0x3
#define _RPINR46_47_PBIO0R3_POSITION                        0x3
#define _RPINR46_47_PBIO0R3_SIZE                            0x1
#define _RPINR46_47_PBIO0R3_LENGTH                          0x1
#define _RPINR46_47_PBIO0R3_MASK                            0x8
#define _RPINR46_47_PBIO1R0_POSN                            0x4
#define _RPINR46_47_PBIO1R0_POSITION                        0x4
#define _RPINR46_47_PBIO1R0_SIZE                            0x1
#define _RPINR46_47_PBIO1R0_LENGTH                          0x1
#define _RPINR46_47_PBIO1R0_MASK                            0x10
#define _RPINR46_47_PBIO1R1_POSN                            0x5
#define _RPINR46_47_PBIO1R1_POSITION                        0x5
#define _RPINR46_47_PBIO1R1_SIZE                            0x1
#define _RPINR46_47_PBIO1R1_LENGTH                          0x1
#define _RPINR46_47_PBIO1R1_MASK                            0x20
#define _RPINR46_47_PBIO1R2_POSN                            0x6
#define _RPINR46_47_PBIO1R2_POSITION                        0x6
#define _RPINR46_47_PBIO1R2_SIZE                            0x1
#define _RPINR46_47_PBIO1R2_LENGTH                          0x1
#define _RPINR46_47_PBIO1R2_MASK                            0x40
#define _RPINR46_47_PBIO1R3_POSN                            0x7
#define _RPINR46_47_PBIO1R3_POSITION                        0x7
#define _RPINR46_47_PBIO1R3_SIZE                            0x1
#define _RPINR46_47_PBIO1R3_LENGTH                          0x1
#define _RPINR46_47_PBIO1R3_MASK                            0x80

// Register: RPINR48_49
#define RPINR48_49 RPINR48_49
extern volatile unsigned char           RPINR48_49          __at(0xE42);
#ifndef _LIB_BUILD
asm("RPINR48_49 equ 0E42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PBIO2R                 :4;
        unsigned PBIO3R                 :4;
    };
    struct {
        unsigned PBIO2R0                :1;
        unsigned PBIO2R1                :1;
        unsigned PBIO2R2                :1;
        unsigned PBIO2R3                :1;
        unsigned PBIO3R0                :1;
        unsigned PBIO3R1                :1;
        unsigned PBIO3R2                :1;
        unsigned PBIO3R3                :1;
    };
} RPINR48_49bits_t;
extern volatile RPINR48_49bits_t RPINR48_49bits __at(0xE42);
// bitfield macros
#define _RPINR48_49_PBIO2R_POSN                             0x0
#define _RPINR48_49_PBIO2R_POSITION                         0x0
#define _RPINR48_49_PBIO2R_SIZE                             0x4
#define _RPINR48_49_PBIO2R_LENGTH                           0x4
#define _RPINR48_49_PBIO2R_MASK                             0xF
#define _RPINR48_49_PBIO3R_POSN                             0x4
#define _RPINR48_49_PBIO3R_POSITION                         0x4
#define _RPINR48_49_PBIO3R_SIZE                             0x4
#define _RPINR48_49_PBIO3R_LENGTH                           0x4
#define _RPINR48_49_PBIO3R_MASK                             0xF0
#define _RPINR48_49_PBIO2R0_POSN                            0x0
#define _RPINR48_49_PBIO2R0_POSITION                        0x0
#define _RPINR48_49_PBIO2R0_SIZE                            0x1
#define _RPINR48_49_PBIO2R0_LENGTH                          0x1
#define _RPINR48_49_PBIO2R0_MASK                            0x1
#define _RPINR48_49_PBIO2R1_POSN                            0x1
#define _RPINR48_49_PBIO2R1_POSITION                        0x1
#define _RPINR48_49_PBIO2R1_SIZE                            0x1
#define _RPINR48_49_PBIO2R1_LENGTH                          0x1
#define _RPINR48_49_PBIO2R1_MASK                            0x2
#define _RPINR48_49_PBIO2R2_POSN                            0x2
#define _RPINR48_49_PBIO2R2_POSITION                        0x2
#define _RPINR48_49_PBIO2R2_SIZE                            0x1
#define _RPINR48_49_PBIO2R2_LENGTH                          0x1
#define _RPINR48_49_PBIO2R2_MASK                            0x4
#define _RPINR48_49_PBIO2R3_POSN                            0x3
#define _RPINR48_49_PBIO2R3_POSITION                        0x3
#define _RPINR48_49_PBIO2R3_SIZE                            0x1
#define _RPINR48_49_PBIO2R3_LENGTH                          0x1
#define _RPINR48_49_PBIO2R3_MASK                            0x8
#define _RPINR48_49_PBIO3R0_POSN                            0x4
#define _RPINR48_49_PBIO3R0_POSITION                        0x4
#define _RPINR48_49_PBIO3R0_SIZE                            0x1
#define _RPINR48_49_PBIO3R0_LENGTH                          0x1
#define _RPINR48_49_PBIO3R0_MASK                            0x10
#define _RPINR48_49_PBIO3R1_POSN                            0x5
#define _RPINR48_49_PBIO3R1_POSITION                        0x5
#define _RPINR48_49_PBIO3R1_SIZE                            0x1
#define _RPINR48_49_PBIO3R1_LENGTH                          0x1
#define _RPINR48_49_PBIO3R1_MASK                            0x20
#define _RPINR48_49_PBIO3R2_POSN                            0x6
#define _RPINR48_49_PBIO3R2_POSITION                        0x6
#define _RPINR48_49_PBIO3R2_SIZE                            0x1
#define _RPINR48_49_PBIO3R2_LENGTH                          0x1
#define _RPINR48_49_PBIO3R2_MASK                            0x40
#define _RPINR48_49_PBIO3R3_POSN                            0x7
#define _RPINR48_49_PBIO3R3_POSITION                        0x7
#define _RPINR48_49_PBIO3R3_SIZE                            0x1
#define _RPINR48_49_PBIO3R3_LENGTH                          0x1
#define _RPINR48_49_PBIO3R3_MASK                            0x80

// Register: RPINR50_51
#define RPINR50_51 RPINR50_51
extern volatile unsigned char           RPINR50_51          __at(0xE43);
#ifndef _LIB_BUILD
asm("RPINR50_51 equ 0E43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PBIO4R                 :4;
        unsigned PBIO5R                 :4;
    };
    struct {
        unsigned PBIO4R0                :1;
        unsigned PBIO4R1                :1;
        unsigned PBIO4R2                :1;
        unsigned PBIO4R3                :1;
        unsigned PBIO5R0                :1;
        unsigned PBIO5R1                :1;
        unsigned PBIO5R2                :1;
        unsigned PBIO5R3                :1;
    };
} RPINR50_51bits_t;
extern volatile RPINR50_51bits_t RPINR50_51bits __at(0xE43);
// bitfield macros
#define _RPINR50_51_PBIO4R_POSN                             0x0
#define _RPINR50_51_PBIO4R_POSITION                         0x0
#define _RPINR50_51_PBIO4R_SIZE                             0x4
#define _RPINR50_51_PBIO4R_LENGTH                           0x4
#define _RPINR50_51_PBIO4R_MASK                             0xF
#define _RPINR50_51_PBIO5R_POSN                             0x4
#define _RPINR50_51_PBIO5R_POSITION                         0x4
#define _RPINR50_51_PBIO5R_SIZE                             0x4
#define _RPINR50_51_PBIO5R_LENGTH                           0x4
#define _RPINR50_51_PBIO5R_MASK                             0xF0
#define _RPINR50_51_PBIO4R0_POSN                            0x0
#define _RPINR50_51_PBIO4R0_POSITION                        0x0
#define _RPINR50_51_PBIO4R0_SIZE                            0x1
#define _RPINR50_51_PBIO4R0_LENGTH                          0x1
#define _RPINR50_51_PBIO4R0_MASK                            0x1
#define _RPINR50_51_PBIO4R1_POSN                            0x1
#define _RPINR50_51_PBIO4R1_POSITION                        0x1
#define _RPINR50_51_PBIO4R1_SIZE                            0x1
#define _RPINR50_51_PBIO4R1_LENGTH                          0x1
#define _RPINR50_51_PBIO4R1_MASK                            0x2
#define _RPINR50_51_PBIO4R2_POSN                            0x2
#define _RPINR50_51_PBIO4R2_POSITION                        0x2
#define _RPINR50_51_PBIO4R2_SIZE                            0x1
#define _RPINR50_51_PBIO4R2_LENGTH                          0x1
#define _RPINR50_51_PBIO4R2_MASK                            0x4
#define _RPINR50_51_PBIO4R3_POSN                            0x3
#define _RPINR50_51_PBIO4R3_POSITION                        0x3
#define _RPINR50_51_PBIO4R3_SIZE                            0x1
#define _RPINR50_51_PBIO4R3_LENGTH                          0x1
#define _RPINR50_51_PBIO4R3_MASK                            0x8
#define _RPINR50_51_PBIO5R0_POSN                            0x4
#define _RPINR50_51_PBIO5R0_POSITION                        0x4
#define _RPINR50_51_PBIO5R0_SIZE                            0x1
#define _RPINR50_51_PBIO5R0_LENGTH                          0x1
#define _RPINR50_51_PBIO5R0_MASK                            0x10
#define _RPINR50_51_PBIO5R1_POSN                            0x5
#define _RPINR50_51_PBIO5R1_POSITION                        0x5
#define _RPINR50_51_PBIO5R1_SIZE                            0x1
#define _RPINR50_51_PBIO5R1_LENGTH                          0x1
#define _RPINR50_51_PBIO5R1_MASK                            0x20
#define _RPINR50_51_PBIO5R2_POSN                            0x6
#define _RPINR50_51_PBIO5R2_POSITION                        0x6
#define _RPINR50_51_PBIO5R2_SIZE                            0x1
#define _RPINR50_51_PBIO5R2_LENGTH                          0x1
#define _RPINR50_51_PBIO5R2_MASK                            0x40
#define _RPINR50_51_PBIO5R3_POSN                            0x7
#define _RPINR50_51_PBIO5R3_POSITION                        0x7
#define _RPINR50_51_PBIO5R3_SIZE                            0x1
#define _RPINR50_51_PBIO5R3_LENGTH                          0x1
#define _RPINR50_51_PBIO5R3_MASK                            0x80

// Register: RPINR52_53
#define RPINR52_53 RPINR52_53
extern volatile unsigned char           RPINR52_53          __at(0xE44);
#ifndef _LIB_BUILD
asm("RPINR52_53 equ 0E44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PBIO6R                 :4;
        unsigned PBIO7R                 :4;
    };
    struct {
        unsigned PBIO6R0                :1;
        unsigned PBIO6R1                :1;
        unsigned PBIO6R2                :1;
        unsigned PBIO6R3                :1;
        unsigned PBIO7R0                :1;
        unsigned PBIO7R1                :1;
        unsigned PBIO7R2                :1;
        unsigned PBIO7R3                :1;
    };
} RPINR52_53bits_t;
extern volatile RPINR52_53bits_t RPINR52_53bits __at(0xE44);
// bitfield macros
#define _RPINR52_53_PBIO6R_POSN                             0x0
#define _RPINR52_53_PBIO6R_POSITION                         0x0
#define _RPINR52_53_PBIO6R_SIZE                             0x4
#define _RPINR52_53_PBIO6R_LENGTH                           0x4
#define _RPINR52_53_PBIO6R_MASK                             0xF
#define _RPINR52_53_PBIO7R_POSN                             0x4
#define _RPINR52_53_PBIO7R_POSITION                         0x4
#define _RPINR52_53_PBIO7R_SIZE                             0x4
#define _RPINR52_53_PBIO7R_LENGTH                           0x4
#define _RPINR52_53_PBIO7R_MASK                             0xF0
#define _RPINR52_53_PBIO6R0_POSN                            0x0
#define _RPINR52_53_PBIO6R0_POSITION                        0x0
#define _RPINR52_53_PBIO6R0_SIZE                            0x1
#define _RPINR52_53_PBIO6R0_LENGTH                          0x1
#define _RPINR52_53_PBIO6R0_MASK                            0x1
#define _RPINR52_53_PBIO6R1_POSN                            0x1
#define _RPINR52_53_PBIO6R1_POSITION                        0x1
#define _RPINR52_53_PBIO6R1_SIZE                            0x1
#define _RPINR52_53_PBIO6R1_LENGTH                          0x1
#define _RPINR52_53_PBIO6R1_MASK                            0x2
#define _RPINR52_53_PBIO6R2_POSN                            0x2
#define _RPINR52_53_PBIO6R2_POSITION                        0x2
#define _RPINR52_53_PBIO6R2_SIZE                            0x1
#define _RPINR52_53_PBIO6R2_LENGTH                          0x1
#define _RPINR52_53_PBIO6R2_MASK                            0x4
#define _RPINR52_53_PBIO6R3_POSN                            0x3
#define _RPINR52_53_PBIO6R3_POSITION                        0x3
#define _RPINR52_53_PBIO6R3_SIZE                            0x1
#define _RPINR52_53_PBIO6R3_LENGTH                          0x1
#define _RPINR52_53_PBIO6R3_MASK                            0x8
#define _RPINR52_53_PBIO7R0_POSN                            0x4
#define _RPINR52_53_PBIO7R0_POSITION                        0x4
#define _RPINR52_53_PBIO7R0_SIZE                            0x1
#define _RPINR52_53_PBIO7R0_LENGTH                          0x1
#define _RPINR52_53_PBIO7R0_MASK                            0x10
#define _RPINR52_53_PBIO7R1_POSN                            0x5
#define _RPINR52_53_PBIO7R1_POSITION                        0x5
#define _RPINR52_53_PBIO7R1_SIZE                            0x1
#define _RPINR52_53_PBIO7R1_LENGTH                          0x1
#define _RPINR52_53_PBIO7R1_MASK                            0x20
#define _RPINR52_53_PBIO7R2_POSN                            0x6
#define _RPINR52_53_PBIO7R2_POSITION                        0x6
#define _RPINR52_53_PBIO7R2_SIZE                            0x1
#define _RPINR52_53_PBIO7R2_LENGTH                          0x1
#define _RPINR52_53_PBIO7R2_MASK                            0x40
#define _RPINR52_53_PBIO7R3_POSN                            0x7
#define _RPINR52_53_PBIO7R3_POSITION                        0x7
#define _RPINR52_53_PBIO7R3_SIZE                            0x1
#define _RPINR52_53_PBIO7R3_LENGTH                          0x1
#define _RPINR52_53_PBIO7R3_MASK                            0x80

// Register: ANCON3
#define ANCON3 ANCON3
extern volatile unsigned char           ANCON3              __at(0xE45);
#ifndef _LIB_BUILD
asm("ANCON3 equ 0E45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSEL16                :1;
        unsigned ANSEL17                :1;
        unsigned ANSEL18                :1;
        unsigned ANSEL19                :1;
        unsigned ANSEL20                :1;
        unsigned ANSEL21                :1;
        unsigned ANSEL22                :1;
        unsigned ANSEL23                :1;
    };
} ANCON3bits_t;
extern volatile ANCON3bits_t ANCON3bits __at(0xE45);
// bitfield macros
#define _ANCON3_ANSEL16_POSN                                0x0
#define _ANCON3_ANSEL16_POSITION                            0x0
#define _ANCON3_ANSEL16_SIZE                                0x1
#define _ANCON3_ANSEL16_LENGTH                              0x1
#define _ANCON3_ANSEL16_MASK                                0x1
#define _ANCON3_ANSEL17_POSN                                0x1
#define _ANCON3_ANSEL17_POSITION                            0x1
#define _ANCON3_ANSEL17_SIZE                                0x1
#define _ANCON3_ANSEL17_LENGTH                              0x1
#define _ANCON3_ANSEL17_MASK                                0x2
#define _ANCON3_ANSEL18_POSN                                0x2
#define _ANCON3_ANSEL18_POSITION                            0x2
#define _ANCON3_ANSEL18_SIZE                                0x1
#define _ANCON3_ANSEL18_LENGTH                              0x1
#define _ANCON3_ANSEL18_MASK                                0x4
#define _ANCON3_ANSEL19_POSN                                0x3
#define _ANCON3_ANSEL19_POSITION                            0x3
#define _ANCON3_ANSEL19_SIZE                                0x1
#define _ANCON3_ANSEL19_LENGTH                              0x1
#define _ANCON3_ANSEL19_MASK                                0x8
#define _ANCON3_ANSEL20_POSN                                0x4
#define _ANCON3_ANSEL20_POSITION                            0x4
#define _ANCON3_ANSEL20_SIZE                                0x1
#define _ANCON3_ANSEL20_LENGTH                              0x1
#define _ANCON3_ANSEL20_MASK                                0x10
#define _ANCON3_ANSEL21_POSN                                0x5
#define _ANCON3_ANSEL21_POSITION                            0x5
#define _ANCON3_ANSEL21_SIZE                                0x1
#define _ANCON3_ANSEL21_LENGTH                              0x1
#define _ANCON3_ANSEL21_MASK                                0x20
#define _ANCON3_ANSEL22_POSN                                0x6
#define _ANCON3_ANSEL22_POSITION                            0x6
#define _ANCON3_ANSEL22_SIZE                                0x1
#define _ANCON3_ANSEL22_LENGTH                              0x1
#define _ANCON3_ANSEL22_MASK                                0x40
#define _ANCON3_ANSEL23_POSN                                0x7
#define _ANCON3_ANSEL23_POSITION                            0x7
#define _ANCON3_ANSEL23_SIZE                                0x1
#define _ANCON3_ANSEL23_LENGTH                              0x1
#define _ANCON3_ANSEL23_MASK                                0x80

// Register: ANCON2
#define ANCON2 ANCON2
extern volatile unsigned char           ANCON2              __at(0xE46);
#ifndef _LIB_BUILD
asm("ANCON2 equ 0E46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSEL8                 :1;
        unsigned ANSEL9                 :1;
        unsigned ANSEL10                :1;
        unsigned ANSEL11                :1;
        unsigned ANSEL12                :1;
        unsigned ANSEL13                :1;
        unsigned ANSEL14                :1;
        unsigned ANSEL15                :1;
    };
    struct {
        unsigned PCFG16                 :1;
        unsigned PCFG17                 :1;
        unsigned PCFG18                 :1;
        unsigned PCFG19                 :1;
        unsigned PCFG20                 :1;
        unsigned PCFG21                 :1;
        unsigned PCFG22                 :1;
        unsigned PCFG23                 :1;
    };
} ANCON2bits_t;
extern volatile ANCON2bits_t ANCON2bits __at(0xE46);
// bitfield macros
#define _ANCON2_ANSEL8_POSN                                 0x0
#define _ANCON2_ANSEL8_POSITION                             0x0
#define _ANCON2_ANSEL8_SIZE                                 0x1
#define _ANCON2_ANSEL8_LENGTH                               0x1
#define _ANCON2_ANSEL8_MASK                                 0x1
#define _ANCON2_ANSEL9_POSN                                 0x1
#define _ANCON2_ANSEL9_POSITION                             0x1
#define _ANCON2_ANSEL9_SIZE                                 0x1
#define _ANCON2_ANSEL9_LENGTH                               0x1
#define _ANCON2_ANSEL9_MASK                                 0x2
#define _ANCON2_ANSEL10_POSN                                0x2
#define _ANCON2_ANSEL10_POSITION                            0x2
#define _ANCON2_ANSEL10_SIZE                                0x1
#define _ANCON2_ANSEL10_LENGTH                              0x1
#define _ANCON2_ANSEL10_MASK                                0x4
#define _ANCON2_ANSEL11_POSN                                0x3
#define _ANCON2_ANSEL11_POSITION                            0x3
#define _ANCON2_ANSEL11_SIZE                                0x1
#define _ANCON2_ANSEL11_LENGTH                              0x1
#define _ANCON2_ANSEL11_MASK                                0x8
#define _ANCON2_ANSEL12_POSN                                0x4
#define _ANCON2_ANSEL12_POSITION                            0x4
#define _ANCON2_ANSEL12_SIZE                                0x1
#define _ANCON2_ANSEL12_LENGTH                              0x1
#define _ANCON2_ANSEL12_MASK                                0x10
#define _ANCON2_ANSEL13_POSN                                0x5
#define _ANCON2_ANSEL13_POSITION                            0x5
#define _ANCON2_ANSEL13_SIZE                                0x1
#define _ANCON2_ANSEL13_LENGTH                              0x1
#define _ANCON2_ANSEL13_MASK                                0x20
#define _ANCON2_ANSEL14_POSN                                0x6
#define _ANCON2_ANSEL14_POSITION                            0x6
#define _ANCON2_ANSEL14_SIZE                                0x1
#define _ANCON2_ANSEL14_LENGTH                              0x1
#define _ANCON2_ANSEL14_MASK                                0x40
#define _ANCON2_ANSEL15_POSN                                0x7
#define _ANCON2_ANSEL15_POSITION                            0x7
#define _ANCON2_ANSEL15_SIZE                                0x1
#define _ANCON2_ANSEL15_LENGTH                              0x1
#define _ANCON2_ANSEL15_MASK                                0x80
#define _ANCON2_PCFG16_POSN                                 0x0
#define _ANCON2_PCFG16_POSITION                             0x0
#define _ANCON2_PCFG16_SIZE                                 0x1
#define _ANCON2_PCFG16_LENGTH                               0x1
#define _ANCON2_PCFG16_MASK                                 0x1
#define _ANCON2_PCFG17_POSN                                 0x1
#define _ANCON2_PCFG17_POSITION                             0x1
#define _ANCON2_PCFG17_SIZE                                 0x1
#define _ANCON2_PCFG17_LENGTH                               0x1
#define _ANCON2_PCFG17_MASK                                 0x2
#define _ANCON2_PCFG18_POSN                                 0x2
#define _ANCON2_PCFG18_POSITION                             0x2
#define _ANCON2_PCFG18_SIZE                                 0x1
#define _ANCON2_PCFG18_LENGTH                               0x1
#define _ANCON2_PCFG18_MASK                                 0x4
#define _ANCON2_PCFG19_POSN                                 0x3
#define _ANCON2_PCFG19_POSITION                             0x3
#define _ANCON2_PCFG19_SIZE                                 0x1
#define _ANCON2_PCFG19_LENGTH                               0x1
#define _ANCON2_PCFG19_MASK                                 0x8
#define _ANCON2_PCFG20_POSN                                 0x4
#define _ANCON2_PCFG20_POSITION                             0x4
#define _ANCON2_PCFG20_SIZE                                 0x1
#define _ANCON2_PCFG20_LENGTH                               0x1
#define _ANCON2_PCFG20_MASK                                 0x10
#define _ANCON2_PCFG21_POSN                                 0x5
#define _ANCON2_PCFG21_POSITION                             0x5
#define _ANCON2_PCFG21_SIZE                                 0x1
#define _ANCON2_PCFG21_LENGTH                               0x1
#define _ANCON2_PCFG21_MASK                                 0x20
#define _ANCON2_PCFG22_POSN                                 0x6
#define _ANCON2_PCFG22_POSITION                             0x6
#define _ANCON2_PCFG22_SIZE                                 0x1
#define _ANCON2_PCFG22_LENGTH                               0x1
#define _ANCON2_PCFG22_MASK                                 0x40
#define _ANCON2_PCFG23_POSN                                 0x7
#define _ANCON2_PCFG23_POSITION                             0x7
#define _ANCON2_PCFG23_SIZE                                 0x1
#define _ANCON2_PCFG23_LENGTH                               0x1
#define _ANCON2_PCFG23_MASK                                 0x80

// Register: ANCON1
#define ANCON1 ANCON1
extern volatile unsigned char           ANCON1              __at(0xE47);
#ifndef _LIB_BUILD
asm("ANCON1 equ 0E47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSEL0                 :1;
        unsigned ANSEL1                 :1;
        unsigned ANSEL2                 :1;
        unsigned ANSEL3                 :1;
        unsigned ANSEL4                 :1;
        unsigned ANSEL5                 :1;
        unsigned ANSEL6                 :1;
        unsigned ANSEL7                 :1;
    };
    struct {
        unsigned PCFG8                  :1;
        unsigned PCFG9                  :1;
        unsigned PCFG10                 :1;
        unsigned PCFG11                 :1;
        unsigned PCFG12                 :1;
        unsigned PCFG13                 :1;
        unsigned PCFG14                 :1;
        unsigned PCFG15                 :1;
    };
} ANCON1bits_t;
extern volatile ANCON1bits_t ANCON1bits __at(0xE47);
// bitfield macros
#define _ANCON1_ANSEL0_POSN                                 0x0
#define _ANCON1_ANSEL0_POSITION                             0x0
#define _ANCON1_ANSEL0_SIZE                                 0x1
#define _ANCON1_ANSEL0_LENGTH                               0x1
#define _ANCON1_ANSEL0_MASK                                 0x1
#define _ANCON1_ANSEL1_POSN                                 0x1
#define _ANCON1_ANSEL1_POSITION                             0x1
#define _ANCON1_ANSEL1_SIZE                                 0x1
#define _ANCON1_ANSEL1_LENGTH                               0x1
#define _ANCON1_ANSEL1_MASK                                 0x2
#define _ANCON1_ANSEL2_POSN                                 0x2
#define _ANCON1_ANSEL2_POSITION                             0x2
#define _ANCON1_ANSEL2_SIZE                                 0x1
#define _ANCON1_ANSEL2_LENGTH                               0x1
#define _ANCON1_ANSEL2_MASK                                 0x4
#define _ANCON1_ANSEL3_POSN                                 0x3
#define _ANCON1_ANSEL3_POSITION                             0x3
#define _ANCON1_ANSEL3_SIZE                                 0x1
#define _ANCON1_ANSEL3_LENGTH                               0x1
#define _ANCON1_ANSEL3_MASK                                 0x8
#define _ANCON1_ANSEL4_POSN                                 0x4
#define _ANCON1_ANSEL4_POSITION                             0x4
#define _ANCON1_ANSEL4_SIZE                                 0x1
#define _ANCON1_ANSEL4_LENGTH                               0x1
#define _ANCON1_ANSEL4_MASK                                 0x10
#define _ANCON1_ANSEL5_POSN                                 0x5
#define _ANCON1_ANSEL5_POSITION                             0x5
#define _ANCON1_ANSEL5_SIZE                                 0x1
#define _ANCON1_ANSEL5_LENGTH                               0x1
#define _ANCON1_ANSEL5_MASK                                 0x20
#define _ANCON1_ANSEL6_POSN                                 0x6
#define _ANCON1_ANSEL6_POSITION                             0x6
#define _ANCON1_ANSEL6_SIZE                                 0x1
#define _ANCON1_ANSEL6_LENGTH                               0x1
#define _ANCON1_ANSEL6_MASK                                 0x40
#define _ANCON1_ANSEL7_POSN                                 0x7
#define _ANCON1_ANSEL7_POSITION                             0x7
#define _ANCON1_ANSEL7_SIZE                                 0x1
#define _ANCON1_ANSEL7_LENGTH                               0x1
#define _ANCON1_ANSEL7_MASK                                 0x80
#define _ANCON1_PCFG8_POSN                                  0x0
#define _ANCON1_PCFG8_POSITION                              0x0
#define _ANCON1_PCFG8_SIZE                                  0x1
#define _ANCON1_PCFG8_LENGTH                                0x1
#define _ANCON1_PCFG8_MASK                                  0x1
#define _ANCON1_PCFG9_POSN                                  0x1
#define _ANCON1_PCFG9_POSITION                              0x1
#define _ANCON1_PCFG9_SIZE                                  0x1
#define _ANCON1_PCFG9_LENGTH                                0x1
#define _ANCON1_PCFG9_MASK                                  0x2
#define _ANCON1_PCFG10_POSN                                 0x2
#define _ANCON1_PCFG10_POSITION                             0x2
#define _ANCON1_PCFG10_SIZE                                 0x1
#define _ANCON1_PCFG10_LENGTH                               0x1
#define _ANCON1_PCFG10_MASK                                 0x4
#define _ANCON1_PCFG11_POSN                                 0x3
#define _ANCON1_PCFG11_POSITION                             0x3
#define _ANCON1_PCFG11_SIZE                                 0x1
#define _ANCON1_PCFG11_LENGTH                               0x1
#define _ANCON1_PCFG11_MASK                                 0x8
#define _ANCON1_PCFG12_POSN                                 0x4
#define _ANCON1_PCFG12_POSITION                             0x4
#define _ANCON1_PCFG12_SIZE                                 0x1
#define _ANCON1_PCFG12_LENGTH                               0x1
#define _ANCON1_PCFG12_MASK                                 0x10
#define _ANCON1_PCFG13_POSN                                 0x5
#define _ANCON1_PCFG13_POSITION                             0x5
#define _ANCON1_PCFG13_SIZE                                 0x1
#define _ANCON1_PCFG13_LENGTH                               0x1
#define _ANCON1_PCFG13_MASK                                 0x20
#define _ANCON1_PCFG14_POSN                                 0x6
#define _ANCON1_PCFG14_POSITION                             0x6
#define _ANCON1_PCFG14_SIZE                                 0x1
#define _ANCON1_PCFG14_LENGTH                               0x1
#define _ANCON1_PCFG14_MASK                                 0x40
#define _ANCON1_PCFG15_POSN                                 0x7
#define _ANCON1_PCFG15_POSITION                             0x7
#define _ANCON1_PCFG15_SIZE                                 0x1
#define _ANCON1_PCFG15_LENGTH                               0x1
#define _ANCON1_PCFG15_MASK                                 0x80

// Register: ADCBUF1
#define ADCBUF1 ADCBUF1
extern volatile unsigned short          ADCBUF1             __at(0xE48);
#ifndef _LIB_BUILD
asm("ADCBUF1 equ 0E48h");
#endif

// Register: ADCBUF1L
#define ADCBUF1L ADCBUF1L
extern volatile unsigned char           ADCBUF1L            __at(0xE48);
#ifndef _LIB_BUILD
asm("ADCBUF1L equ 0E48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF1L               :8;
    };
} ADCBUF1Lbits_t;
extern volatile ADCBUF1Lbits_t ADCBUF1Lbits __at(0xE48);
// bitfield macros
#define _ADCBUF1L_ADCBUF1L_POSN                             0x0
#define _ADCBUF1L_ADCBUF1L_POSITION                         0x0
#define _ADCBUF1L_ADCBUF1L_SIZE                             0x8
#define _ADCBUF1L_ADCBUF1L_LENGTH                           0x8
#define _ADCBUF1L_ADCBUF1L_MASK                             0xFF

// Register: ADCBUF1H
#define ADCBUF1H ADCBUF1H
extern volatile unsigned char           ADCBUF1H            __at(0xE49);
#ifndef _LIB_BUILD
asm("ADCBUF1H equ 0E49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF1H               :8;
    };
} ADCBUF1Hbits_t;
extern volatile ADCBUF1Hbits_t ADCBUF1Hbits __at(0xE49);
// bitfield macros
#define _ADCBUF1H_ADCBUF1H_POSN                             0x0
#define _ADCBUF1H_ADCBUF1H_POSITION                         0x0
#define _ADCBUF1H_ADCBUF1H_SIZE                             0x8
#define _ADCBUF1H_ADCBUF1H_LENGTH                           0x8
#define _ADCBUF1H_ADCBUF1H_MASK                             0xFF

// Register: ADCBUF2
#define ADCBUF2 ADCBUF2
extern volatile unsigned short          ADCBUF2             __at(0xE4A);
#ifndef _LIB_BUILD
asm("ADCBUF2 equ 0E4Ah");
#endif

// Register: ADCBUF2L
#define ADCBUF2L ADCBUF2L
extern volatile unsigned char           ADCBUF2L            __at(0xE4A);
#ifndef _LIB_BUILD
asm("ADCBUF2L equ 0E4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF2L               :8;
    };
} ADCBUF2Lbits_t;
extern volatile ADCBUF2Lbits_t ADCBUF2Lbits __at(0xE4A);
// bitfield macros
#define _ADCBUF2L_ADCBUF2L_POSN                             0x0
#define _ADCBUF2L_ADCBUF2L_POSITION                         0x0
#define _ADCBUF2L_ADCBUF2L_SIZE                             0x8
#define _ADCBUF2L_ADCBUF2L_LENGTH                           0x8
#define _ADCBUF2L_ADCBUF2L_MASK                             0xFF

// Register: ADCBUF2H
#define ADCBUF2H ADCBUF2H
extern volatile unsigned char           ADCBUF2H            __at(0xE4B);
#ifndef _LIB_BUILD
asm("ADCBUF2H equ 0E4Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF2H               :8;
    };
} ADCBUF2Hbits_t;
extern volatile ADCBUF2Hbits_t ADCBUF2Hbits __at(0xE4B);
// bitfield macros
#define _ADCBUF2H_ADCBUF2H_POSN                             0x0
#define _ADCBUF2H_ADCBUF2H_POSITION                         0x0
#define _ADCBUF2H_ADCBUF2H_SIZE                             0x8
#define _ADCBUF2H_ADCBUF2H_LENGTH                           0x8
#define _ADCBUF2H_ADCBUF2H_MASK                             0xFF

// Register: ADCBUF3
#define ADCBUF3 ADCBUF3
extern volatile unsigned short          ADCBUF3             __at(0xE4C);
#ifndef _LIB_BUILD
asm("ADCBUF3 equ 0E4Ch");
#endif

// Register: ADCBUF3L
#define ADCBUF3L ADCBUF3L
extern volatile unsigned char           ADCBUF3L            __at(0xE4C);
#ifndef _LIB_BUILD
asm("ADCBUF3L equ 0E4Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF3L               :8;
    };
} ADCBUF3Lbits_t;
extern volatile ADCBUF3Lbits_t ADCBUF3Lbits __at(0xE4C);
// bitfield macros
#define _ADCBUF3L_ADCBUF3L_POSN                             0x0
#define _ADCBUF3L_ADCBUF3L_POSITION                         0x0
#define _ADCBUF3L_ADCBUF3L_SIZE                             0x8
#define _ADCBUF3L_ADCBUF3L_LENGTH                           0x8
#define _ADCBUF3L_ADCBUF3L_MASK                             0xFF

// Register: ADCBUF3H
#define ADCBUF3H ADCBUF3H
extern volatile unsigned char           ADCBUF3H            __at(0xE4D);
#ifndef _LIB_BUILD
asm("ADCBUF3H equ 0E4Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF3H               :8;
    };
} ADCBUF3Hbits_t;
extern volatile ADCBUF3Hbits_t ADCBUF3Hbits __at(0xE4D);
// bitfield macros
#define _ADCBUF3H_ADCBUF3H_POSN                             0x0
#define _ADCBUF3H_ADCBUF3H_POSITION                         0x0
#define _ADCBUF3H_ADCBUF3H_SIZE                             0x8
#define _ADCBUF3H_ADCBUF3H_LENGTH                           0x8
#define _ADCBUF3H_ADCBUF3H_MASK                             0xFF

// Register: ADCBUF4
#define ADCBUF4 ADCBUF4
extern volatile unsigned short          ADCBUF4             __at(0xE4E);
#ifndef _LIB_BUILD
asm("ADCBUF4 equ 0E4Eh");
#endif

// Register: ADCBUF4L
#define ADCBUF4L ADCBUF4L
extern volatile unsigned char           ADCBUF4L            __at(0xE4E);
#ifndef _LIB_BUILD
asm("ADCBUF4L equ 0E4Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF4L               :8;
    };
} ADCBUF4Lbits_t;
extern volatile ADCBUF4Lbits_t ADCBUF4Lbits __at(0xE4E);
// bitfield macros
#define _ADCBUF4L_ADCBUF4L_POSN                             0x0
#define _ADCBUF4L_ADCBUF4L_POSITION                         0x0
#define _ADCBUF4L_ADCBUF4L_SIZE                             0x8
#define _ADCBUF4L_ADCBUF4L_LENGTH                           0x8
#define _ADCBUF4L_ADCBUF4L_MASK                             0xFF

// Register: ADCBUF4H
#define ADCBUF4H ADCBUF4H
extern volatile unsigned char           ADCBUF4H            __at(0xE4F);
#ifndef _LIB_BUILD
asm("ADCBUF4H equ 0E4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF4H               :8;
    };
} ADCBUF4Hbits_t;
extern volatile ADCBUF4Hbits_t ADCBUF4Hbits __at(0xE4F);
// bitfield macros
#define _ADCBUF4H_ADCBUF4H_POSN                             0x0
#define _ADCBUF4H_ADCBUF4H_POSITION                         0x0
#define _ADCBUF4H_ADCBUF4H_SIZE                             0x8
#define _ADCBUF4H_ADCBUF4H_LENGTH                           0x8
#define _ADCBUF4H_ADCBUF4H_MASK                             0xFF

// Register: ADCBUF5
#define ADCBUF5 ADCBUF5
extern volatile unsigned short          ADCBUF5             __at(0xE50);
#ifndef _LIB_BUILD
asm("ADCBUF5 equ 0E50h");
#endif

// Register: ADCBUF5L
#define ADCBUF5L ADCBUF5L
extern volatile unsigned char           ADCBUF5L            __at(0xE50);
#ifndef _LIB_BUILD
asm("ADCBUF5L equ 0E50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF5L               :8;
    };
} ADCBUF5Lbits_t;
extern volatile ADCBUF5Lbits_t ADCBUF5Lbits __at(0xE50);
// bitfield macros
#define _ADCBUF5L_ADCBUF5L_POSN                             0x0
#define _ADCBUF5L_ADCBUF5L_POSITION                         0x0
#define _ADCBUF5L_ADCBUF5L_SIZE                             0x8
#define _ADCBUF5L_ADCBUF5L_LENGTH                           0x8
#define _ADCBUF5L_ADCBUF5L_MASK                             0xFF

// Register: ADCBUF5H
#define ADCBUF5H ADCBUF5H
extern volatile unsigned char           ADCBUF5H            __at(0xE51);
#ifndef _LIB_BUILD
asm("ADCBUF5H equ 0E51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF5H               :8;
    };
} ADCBUF5Hbits_t;
extern volatile ADCBUF5Hbits_t ADCBUF5Hbits __at(0xE51);
// bitfield macros
#define _ADCBUF5H_ADCBUF5H_POSN                             0x0
#define _ADCBUF5H_ADCBUF5H_POSITION                         0x0
#define _ADCBUF5H_ADCBUF5H_SIZE                             0x8
#define _ADCBUF5H_ADCBUF5H_LENGTH                           0x8
#define _ADCBUF5H_ADCBUF5H_MASK                             0xFF

// Register: ADCBUF6
#define ADCBUF6 ADCBUF6
extern volatile unsigned short          ADCBUF6             __at(0xE52);
#ifndef _LIB_BUILD
asm("ADCBUF6 equ 0E52h");
#endif

// Register: ADCBUF6L
#define ADCBUF6L ADCBUF6L
extern volatile unsigned char           ADCBUF6L            __at(0xE52);
#ifndef _LIB_BUILD
asm("ADCBUF6L equ 0E52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF6L               :8;
    };
} ADCBUF6Lbits_t;
extern volatile ADCBUF6Lbits_t ADCBUF6Lbits __at(0xE52);
// bitfield macros
#define _ADCBUF6L_ADCBUF6L_POSN                             0x0
#define _ADCBUF6L_ADCBUF6L_POSITION                         0x0
#define _ADCBUF6L_ADCBUF6L_SIZE                             0x8
#define _ADCBUF6L_ADCBUF6L_LENGTH                           0x8
#define _ADCBUF6L_ADCBUF6L_MASK                             0xFF

// Register: ADCBUF6H
#define ADCBUF6H ADCBUF6H
extern volatile unsigned char           ADCBUF6H            __at(0xE53);
#ifndef _LIB_BUILD
asm("ADCBUF6H equ 0E53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF6H               :8;
    };
} ADCBUF6Hbits_t;
extern volatile ADCBUF6Hbits_t ADCBUF6Hbits __at(0xE53);
// bitfield macros
#define _ADCBUF6H_ADCBUF6H_POSN                             0x0
#define _ADCBUF6H_ADCBUF6H_POSITION                         0x0
#define _ADCBUF6H_ADCBUF6H_SIZE                             0x8
#define _ADCBUF6H_ADCBUF6H_LENGTH                           0x8
#define _ADCBUF6H_ADCBUF6H_MASK                             0xFF

// Register: ADCBUF7
#define ADCBUF7 ADCBUF7
extern volatile unsigned short          ADCBUF7             __at(0xE54);
#ifndef _LIB_BUILD
asm("ADCBUF7 equ 0E54h");
#endif

// Register: ADCBUF7L
#define ADCBUF7L ADCBUF7L
extern volatile unsigned char           ADCBUF7L            __at(0xE54);
#ifndef _LIB_BUILD
asm("ADCBUF7L equ 0E54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF7L               :8;
    };
} ADCBUF7Lbits_t;
extern volatile ADCBUF7Lbits_t ADCBUF7Lbits __at(0xE54);
// bitfield macros
#define _ADCBUF7L_ADCBUF7L_POSN                             0x0
#define _ADCBUF7L_ADCBUF7L_POSITION                         0x0
#define _ADCBUF7L_ADCBUF7L_SIZE                             0x8
#define _ADCBUF7L_ADCBUF7L_LENGTH                           0x8
#define _ADCBUF7L_ADCBUF7L_MASK                             0xFF

// Register: ADCBUF7H
#define ADCBUF7H ADCBUF7H
extern volatile unsigned char           ADCBUF7H            __at(0xE55);
#ifndef _LIB_BUILD
asm("ADCBUF7H equ 0E55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF7H               :8;
    };
} ADCBUF7Hbits_t;
extern volatile ADCBUF7Hbits_t ADCBUF7Hbits __at(0xE55);
// bitfield macros
#define _ADCBUF7H_ADCBUF7H_POSN                             0x0
#define _ADCBUF7H_ADCBUF7H_POSITION                         0x0
#define _ADCBUF7H_ADCBUF7H_SIZE                             0x8
#define _ADCBUF7H_ADCBUF7H_LENGTH                           0x8
#define _ADCBUF7H_ADCBUF7H_MASK                             0xFF

// Register: ADCBUF8
#define ADCBUF8 ADCBUF8
extern volatile unsigned short          ADCBUF8             __at(0xE56);
#ifndef _LIB_BUILD
asm("ADCBUF8 equ 0E56h");
#endif

// Register: ADCBUF8L
#define ADCBUF8L ADCBUF8L
extern volatile unsigned char           ADCBUF8L            __at(0xE56);
#ifndef _LIB_BUILD
asm("ADCBUF8L equ 0E56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF8L               :8;
    };
} ADCBUF8Lbits_t;
extern volatile ADCBUF8Lbits_t ADCBUF8Lbits __at(0xE56);
// bitfield macros
#define _ADCBUF8L_ADCBUF8L_POSN                             0x0
#define _ADCBUF8L_ADCBUF8L_POSITION                         0x0
#define _ADCBUF8L_ADCBUF8L_SIZE                             0x8
#define _ADCBUF8L_ADCBUF8L_LENGTH                           0x8
#define _ADCBUF8L_ADCBUF8L_MASK                             0xFF

// Register: ADCBUF8H
#define ADCBUF8H ADCBUF8H
extern volatile unsigned char           ADCBUF8H            __at(0xE57);
#ifndef _LIB_BUILD
asm("ADCBUF8H equ 0E57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF8H               :8;
    };
} ADCBUF8Hbits_t;
extern volatile ADCBUF8Hbits_t ADCBUF8Hbits __at(0xE57);
// bitfield macros
#define _ADCBUF8H_ADCBUF8H_POSN                             0x0
#define _ADCBUF8H_ADCBUF8H_POSITION                         0x0
#define _ADCBUF8H_ADCBUF8H_SIZE                             0x8
#define _ADCBUF8H_ADCBUF8H_LENGTH                           0x8
#define _ADCBUF8H_ADCBUF8H_MASK                             0xFF

// Register: ADCBUF9
#define ADCBUF9 ADCBUF9
extern volatile unsigned short          ADCBUF9             __at(0xE58);
#ifndef _LIB_BUILD
asm("ADCBUF9 equ 0E58h");
#endif

// Register: ADCBUF9L
#define ADCBUF9L ADCBUF9L
extern volatile unsigned char           ADCBUF9L            __at(0xE58);
#ifndef _LIB_BUILD
asm("ADCBUF9L equ 0E58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF9L               :8;
    };
} ADCBUF9Lbits_t;
extern volatile ADCBUF9Lbits_t ADCBUF9Lbits __at(0xE58);
// bitfield macros
#define _ADCBUF9L_ADCBUF9L_POSN                             0x0
#define _ADCBUF9L_ADCBUF9L_POSITION                         0x0
#define _ADCBUF9L_ADCBUF9L_SIZE                             0x8
#define _ADCBUF9L_ADCBUF9L_LENGTH                           0x8
#define _ADCBUF9L_ADCBUF9L_MASK                             0xFF

// Register: ADCBUF9H
#define ADCBUF9H ADCBUF9H
extern volatile unsigned char           ADCBUF9H            __at(0xE59);
#ifndef _LIB_BUILD
asm("ADCBUF9H equ 0E59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF9H               :8;
    };
} ADCBUF9Hbits_t;
extern volatile ADCBUF9Hbits_t ADCBUF9Hbits __at(0xE59);
// bitfield macros
#define _ADCBUF9H_ADCBUF9H_POSN                             0x0
#define _ADCBUF9H_ADCBUF9H_POSITION                         0x0
#define _ADCBUF9H_ADCBUF9H_SIZE                             0x8
#define _ADCBUF9H_ADCBUF9H_LENGTH                           0x8
#define _ADCBUF9H_ADCBUF9H_MASK                             0xFF

// Register: ADCBUF10
#define ADCBUF10 ADCBUF10
extern volatile unsigned short          ADCBUF10            __at(0xE5A);
#ifndef _LIB_BUILD
asm("ADCBUF10 equ 0E5Ah");
#endif

// Register: ADCBUF10L
#define ADCBUF10L ADCBUF10L
extern volatile unsigned char           ADCBUF10L           __at(0xE5A);
#ifndef _LIB_BUILD
asm("ADCBUF10L equ 0E5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF10L              :8;
    };
} ADCBUF10Lbits_t;
extern volatile ADCBUF10Lbits_t ADCBUF10Lbits __at(0xE5A);
// bitfield macros
#define _ADCBUF10L_ADCBUF10L_POSN                           0x0
#define _ADCBUF10L_ADCBUF10L_POSITION                       0x0
#define _ADCBUF10L_ADCBUF10L_SIZE                           0x8
#define _ADCBUF10L_ADCBUF10L_LENGTH                         0x8
#define _ADCBUF10L_ADCBUF10L_MASK                           0xFF

// Register: ADCBUF10H
#define ADCBUF10H ADCBUF10H
extern volatile unsigned char           ADCBUF10H           __at(0xE5B);
#ifndef _LIB_BUILD
asm("ADCBUF10H equ 0E5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF10H              :8;
    };
} ADCBUF10Hbits_t;
extern volatile ADCBUF10Hbits_t ADCBUF10Hbits __at(0xE5B);
// bitfield macros
#define _ADCBUF10H_ADCBUF10H_POSN                           0x0
#define _ADCBUF10H_ADCBUF10H_POSITION                       0x0
#define _ADCBUF10H_ADCBUF10H_SIZE                           0x8
#define _ADCBUF10H_ADCBUF10H_LENGTH                         0x8
#define _ADCBUF10H_ADCBUF10H_MASK                           0xFF

// Register: ADCBUF11
#define ADCBUF11 ADCBUF11
extern volatile unsigned short          ADCBUF11            __at(0xE5C);
#ifndef _LIB_BUILD
asm("ADCBUF11 equ 0E5Ch");
#endif

// Register: ADCBUF11L
#define ADCBUF11L ADCBUF11L
extern volatile unsigned char           ADCBUF11L           __at(0xE5C);
#ifndef _LIB_BUILD
asm("ADCBUF11L equ 0E5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF11L              :8;
    };
} ADCBUF11Lbits_t;
extern volatile ADCBUF11Lbits_t ADCBUF11Lbits __at(0xE5C);
// bitfield macros
#define _ADCBUF11L_ADCBUF11L_POSN                           0x0
#define _ADCBUF11L_ADCBUF11L_POSITION                       0x0
#define _ADCBUF11L_ADCBUF11L_SIZE                           0x8
#define _ADCBUF11L_ADCBUF11L_LENGTH                         0x8
#define _ADCBUF11L_ADCBUF11L_MASK                           0xFF

// Register: ADCBUF11H
#define ADCBUF11H ADCBUF11H
extern volatile unsigned char           ADCBUF11H           __at(0xE5D);
#ifndef _LIB_BUILD
asm("ADCBUF11H equ 0E5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF11H              :8;
    };
} ADCBUF11Hbits_t;
extern volatile ADCBUF11Hbits_t ADCBUF11Hbits __at(0xE5D);
// bitfield macros
#define _ADCBUF11H_ADCBUF11H_POSN                           0x0
#define _ADCBUF11H_ADCBUF11H_POSITION                       0x0
#define _ADCBUF11H_ADCBUF11H_SIZE                           0x8
#define _ADCBUF11H_ADCBUF11H_LENGTH                         0x8
#define _ADCBUF11H_ADCBUF11H_MASK                           0xFF

// Register: ADCBUF12
#define ADCBUF12 ADCBUF12
extern volatile unsigned short          ADCBUF12            __at(0xE5E);
#ifndef _LIB_BUILD
asm("ADCBUF12 equ 0E5Eh");
#endif

// Register: ADCBUF12L
#define ADCBUF12L ADCBUF12L
extern volatile unsigned char           ADCBUF12L           __at(0xE5E);
#ifndef _LIB_BUILD
asm("ADCBUF12L equ 0E5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF12L              :8;
    };
} ADCBUF12Lbits_t;
extern volatile ADCBUF12Lbits_t ADCBUF12Lbits __at(0xE5E);
// bitfield macros
#define _ADCBUF12L_ADCBUF12L_POSN                           0x0
#define _ADCBUF12L_ADCBUF12L_POSITION                       0x0
#define _ADCBUF12L_ADCBUF12L_SIZE                           0x8
#define _ADCBUF12L_ADCBUF12L_LENGTH                         0x8
#define _ADCBUF12L_ADCBUF12L_MASK                           0xFF

// Register: ADCBUF12H
#define ADCBUF12H ADCBUF12H
extern volatile unsigned char           ADCBUF12H           __at(0xE5F);
#ifndef _LIB_BUILD
asm("ADCBUF12H equ 0E5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF12H              :8;
    };
} ADCBUF12Hbits_t;
extern volatile ADCBUF12Hbits_t ADCBUF12Hbits __at(0xE5F);
// bitfield macros
#define _ADCBUF12H_ADCBUF12H_POSN                           0x0
#define _ADCBUF12H_ADCBUF12H_POSITION                       0x0
#define _ADCBUF12H_ADCBUF12H_SIZE                           0x8
#define _ADCBUF12H_ADCBUF12H_LENGTH                         0x8
#define _ADCBUF12H_ADCBUF12H_MASK                           0xFF

// Register: ADCBUF13
#define ADCBUF13 ADCBUF13
extern volatile unsigned short          ADCBUF13            __at(0xE60);
#ifndef _LIB_BUILD
asm("ADCBUF13 equ 0E60h");
#endif

// Register: ADCBUF13L
#define ADCBUF13L ADCBUF13L
extern volatile unsigned char           ADCBUF13L           __at(0xE60);
#ifndef _LIB_BUILD
asm("ADCBUF13L equ 0E60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF13L              :8;
    };
} ADCBUF13Lbits_t;
extern volatile ADCBUF13Lbits_t ADCBUF13Lbits __at(0xE60);
// bitfield macros
#define _ADCBUF13L_ADCBUF13L_POSN                           0x0
#define _ADCBUF13L_ADCBUF13L_POSITION                       0x0
#define _ADCBUF13L_ADCBUF13L_SIZE                           0x8
#define _ADCBUF13L_ADCBUF13L_LENGTH                         0x8
#define _ADCBUF13L_ADCBUF13L_MASK                           0xFF

// Register: ADCBUF13H
#define ADCBUF13H ADCBUF13H
extern volatile unsigned char           ADCBUF13H           __at(0xE61);
#ifndef _LIB_BUILD
asm("ADCBUF13H equ 0E61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF13H              :8;
    };
} ADCBUF13Hbits_t;
extern volatile ADCBUF13Hbits_t ADCBUF13Hbits __at(0xE61);
// bitfield macros
#define _ADCBUF13H_ADCBUF13H_POSN                           0x0
#define _ADCBUF13H_ADCBUF13H_POSITION                       0x0
#define _ADCBUF13H_ADCBUF13H_SIZE                           0x8
#define _ADCBUF13H_ADCBUF13H_LENGTH                         0x8
#define _ADCBUF13H_ADCBUF13H_MASK                           0xFF

// Register: ADCBUF14
#define ADCBUF14 ADCBUF14
extern volatile unsigned short          ADCBUF14            __at(0xE62);
#ifndef _LIB_BUILD
asm("ADCBUF14 equ 0E62h");
#endif

// Register: ADCBUF14L
#define ADCBUF14L ADCBUF14L
extern volatile unsigned char           ADCBUF14L           __at(0xE62);
#ifndef _LIB_BUILD
asm("ADCBUF14L equ 0E62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF14L              :8;
    };
} ADCBUF14Lbits_t;
extern volatile ADCBUF14Lbits_t ADCBUF14Lbits __at(0xE62);
// bitfield macros
#define _ADCBUF14L_ADCBUF14L_POSN                           0x0
#define _ADCBUF14L_ADCBUF14L_POSITION                       0x0
#define _ADCBUF14L_ADCBUF14L_SIZE                           0x8
#define _ADCBUF14L_ADCBUF14L_LENGTH                         0x8
#define _ADCBUF14L_ADCBUF14L_MASK                           0xFF

// Register: ADCBUF14H
#define ADCBUF14H ADCBUF14H
extern volatile unsigned char           ADCBUF14H           __at(0xE63);
#ifndef _LIB_BUILD
asm("ADCBUF14H equ 0E63h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF14H              :8;
    };
} ADCBUF14Hbits_t;
extern volatile ADCBUF14Hbits_t ADCBUF14Hbits __at(0xE63);
// bitfield macros
#define _ADCBUF14H_ADCBUF14H_POSN                           0x0
#define _ADCBUF14H_ADCBUF14H_POSITION                       0x0
#define _ADCBUF14H_ADCBUF14H_SIZE                           0x8
#define _ADCBUF14H_ADCBUF14H_LENGTH                         0x8
#define _ADCBUF14H_ADCBUF14H_MASK                           0xFF

// Register: ADCBUF15
#define ADCBUF15 ADCBUF15
extern volatile unsigned short          ADCBUF15            __at(0xE64);
#ifndef _LIB_BUILD
asm("ADCBUF15 equ 0E64h");
#endif

// Register: ADCBUF15L
#define ADCBUF15L ADCBUF15L
extern volatile unsigned char           ADCBUF15L           __at(0xE64);
#ifndef _LIB_BUILD
asm("ADCBUF15L equ 0E64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF15L              :8;
    };
} ADCBUF15Lbits_t;
extern volatile ADCBUF15Lbits_t ADCBUF15Lbits __at(0xE64);
// bitfield macros
#define _ADCBUF15L_ADCBUF15L_POSN                           0x0
#define _ADCBUF15L_ADCBUF15L_POSITION                       0x0
#define _ADCBUF15L_ADCBUF15L_SIZE                           0x8
#define _ADCBUF15L_ADCBUF15L_LENGTH                         0x8
#define _ADCBUF15L_ADCBUF15L_MASK                           0xFF

// Register: ADCBUF15H
#define ADCBUF15H ADCBUF15H
extern volatile unsigned char           ADCBUF15H           __at(0xE65);
#ifndef _LIB_BUILD
asm("ADCBUF15H equ 0E65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF15H              :8;
    };
} ADCBUF15Hbits_t;
extern volatile ADCBUF15Hbits_t ADCBUF15Hbits __at(0xE65);
// bitfield macros
#define _ADCBUF15H_ADCBUF15H_POSN                           0x0
#define _ADCBUF15H_ADCBUF15H_POSITION                       0x0
#define _ADCBUF15H_ADCBUF15H_SIZE                           0x8
#define _ADCBUF15H_ADCBUF15H_LENGTH                         0x8
#define _ADCBUF15H_ADCBUF15H_MASK                           0xFF

// Register: ADCBUF16
#define ADCBUF16 ADCBUF16
extern volatile unsigned short          ADCBUF16            __at(0xE66);
#ifndef _LIB_BUILD
asm("ADCBUF16 equ 0E66h");
#endif

// Register: ADCBUF16L
#define ADCBUF16L ADCBUF16L
extern volatile unsigned char           ADCBUF16L           __at(0xE66);
#ifndef _LIB_BUILD
asm("ADCBUF16L equ 0E66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF16L              :8;
    };
} ADCBUF16Lbits_t;
extern volatile ADCBUF16Lbits_t ADCBUF16Lbits __at(0xE66);
// bitfield macros
#define _ADCBUF16L_ADCBUF16L_POSN                           0x0
#define _ADCBUF16L_ADCBUF16L_POSITION                       0x0
#define _ADCBUF16L_ADCBUF16L_SIZE                           0x8
#define _ADCBUF16L_ADCBUF16L_LENGTH                         0x8
#define _ADCBUF16L_ADCBUF16L_MASK                           0xFF

// Register: ADCBUF16H
#define ADCBUF16H ADCBUF16H
extern volatile unsigned char           ADCBUF16H           __at(0xE67);
#ifndef _LIB_BUILD
asm("ADCBUF16H equ 0E67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF16H              :8;
    };
} ADCBUF16Hbits_t;
extern volatile ADCBUF16Hbits_t ADCBUF16Hbits __at(0xE67);
// bitfield macros
#define _ADCBUF16H_ADCBUF16H_POSN                           0x0
#define _ADCBUF16H_ADCBUF16H_POSITION                       0x0
#define _ADCBUF16H_ADCBUF16H_SIZE                           0x8
#define _ADCBUF16H_ADCBUF16H_LENGTH                         0x8
#define _ADCBUF16H_ADCBUF16H_MASK                           0xFF

// Register: ADCBUF17
#define ADCBUF17 ADCBUF17
extern volatile unsigned short          ADCBUF17            __at(0xE68);
#ifndef _LIB_BUILD
asm("ADCBUF17 equ 0E68h");
#endif

// Register: ADCBUF17L
#define ADCBUF17L ADCBUF17L
extern volatile unsigned char           ADCBUF17L           __at(0xE68);
#ifndef _LIB_BUILD
asm("ADCBUF17L equ 0E68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF17L              :8;
    };
} ADCBUF17Lbits_t;
extern volatile ADCBUF17Lbits_t ADCBUF17Lbits __at(0xE68);
// bitfield macros
#define _ADCBUF17L_ADCBUF17L_POSN                           0x0
#define _ADCBUF17L_ADCBUF17L_POSITION                       0x0
#define _ADCBUF17L_ADCBUF17L_SIZE                           0x8
#define _ADCBUF17L_ADCBUF17L_LENGTH                         0x8
#define _ADCBUF17L_ADCBUF17L_MASK                           0xFF

// Register: ADCBUF17H
#define ADCBUF17H ADCBUF17H
extern volatile unsigned char           ADCBUF17H           __at(0xE69);
#ifndef _LIB_BUILD
asm("ADCBUF17H equ 0E69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF17H              :8;
    };
} ADCBUF17Hbits_t;
extern volatile ADCBUF17Hbits_t ADCBUF17Hbits __at(0xE69);
// bitfield macros
#define _ADCBUF17H_ADCBUF17H_POSN                           0x0
#define _ADCBUF17H_ADCBUF17H_POSITION                       0x0
#define _ADCBUF17H_ADCBUF17H_SIZE                           0x8
#define _ADCBUF17H_ADCBUF17H_LENGTH                         0x8
#define _ADCBUF17H_ADCBUF17H_MASK                           0xFF

// Register: ADCBUF18
#define ADCBUF18 ADCBUF18
extern volatile unsigned short          ADCBUF18            __at(0xE6A);
#ifndef _LIB_BUILD
asm("ADCBUF18 equ 0E6Ah");
#endif

// Register: ADCBUF18L
#define ADCBUF18L ADCBUF18L
extern volatile unsigned char           ADCBUF18L           __at(0xE6A);
#ifndef _LIB_BUILD
asm("ADCBUF18L equ 0E6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF18L              :8;
    };
} ADCBUF18Lbits_t;
extern volatile ADCBUF18Lbits_t ADCBUF18Lbits __at(0xE6A);
// bitfield macros
#define _ADCBUF18L_ADCBUF18L_POSN                           0x0
#define _ADCBUF18L_ADCBUF18L_POSITION                       0x0
#define _ADCBUF18L_ADCBUF18L_SIZE                           0x8
#define _ADCBUF18L_ADCBUF18L_LENGTH                         0x8
#define _ADCBUF18L_ADCBUF18L_MASK                           0xFF

// Register: ADCBUF18H
#define ADCBUF18H ADCBUF18H
extern volatile unsigned char           ADCBUF18H           __at(0xE6B);
#ifndef _LIB_BUILD
asm("ADCBUF18H equ 0E6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF18H              :8;
    };
} ADCBUF18Hbits_t;
extern volatile ADCBUF18Hbits_t ADCBUF18Hbits __at(0xE6B);
// bitfield macros
#define _ADCBUF18H_ADCBUF18H_POSN                           0x0
#define _ADCBUF18H_ADCBUF18H_POSITION                       0x0
#define _ADCBUF18H_ADCBUF18H_SIZE                           0x8
#define _ADCBUF18H_ADCBUF18H_LENGTH                         0x8
#define _ADCBUF18H_ADCBUF18H_MASK                           0xFF

// Register: ADCBUF19
#define ADCBUF19 ADCBUF19
extern volatile unsigned short          ADCBUF19            __at(0xE6C);
#ifndef _LIB_BUILD
asm("ADCBUF19 equ 0E6Ch");
#endif

// Register: ADCBUF19L
#define ADCBUF19L ADCBUF19L
extern volatile unsigned char           ADCBUF19L           __at(0xE6C);
#ifndef _LIB_BUILD
asm("ADCBUF19L equ 0E6Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF19L              :8;
    };
} ADCBUF19Lbits_t;
extern volatile ADCBUF19Lbits_t ADCBUF19Lbits __at(0xE6C);
// bitfield macros
#define _ADCBUF19L_ADCBUF19L_POSN                           0x0
#define _ADCBUF19L_ADCBUF19L_POSITION                       0x0
#define _ADCBUF19L_ADCBUF19L_SIZE                           0x8
#define _ADCBUF19L_ADCBUF19L_LENGTH                         0x8
#define _ADCBUF19L_ADCBUF19L_MASK                           0xFF

// Register: ADCBUF19H
#define ADCBUF19H ADCBUF19H
extern volatile unsigned char           ADCBUF19H           __at(0xE6D);
#ifndef _LIB_BUILD
asm("ADCBUF19H equ 0E6Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF19H              :8;
    };
} ADCBUF19Hbits_t;
extern volatile ADCBUF19Hbits_t ADCBUF19Hbits __at(0xE6D);
// bitfield macros
#define _ADCBUF19H_ADCBUF19H_POSN                           0x0
#define _ADCBUF19H_ADCBUF19H_POSITION                       0x0
#define _ADCBUF19H_ADCBUF19H_SIZE                           0x8
#define _ADCBUF19H_ADCBUF19H_LENGTH                         0x8
#define _ADCBUF19H_ADCBUF19H_MASK                           0xFF

// Register: ADCBUF20
#define ADCBUF20 ADCBUF20
extern volatile unsigned short          ADCBUF20            __at(0xE6E);
#ifndef _LIB_BUILD
asm("ADCBUF20 equ 0E6Eh");
#endif

// Register: ADCBUF20L
#define ADCBUF20L ADCBUF20L
extern volatile unsigned char           ADCBUF20L           __at(0xE6E);
#ifndef _LIB_BUILD
asm("ADCBUF20L equ 0E6Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF20L              :8;
    };
} ADCBUF20Lbits_t;
extern volatile ADCBUF20Lbits_t ADCBUF20Lbits __at(0xE6E);
// bitfield macros
#define _ADCBUF20L_ADCBUF20L_POSN                           0x0
#define _ADCBUF20L_ADCBUF20L_POSITION                       0x0
#define _ADCBUF20L_ADCBUF20L_SIZE                           0x8
#define _ADCBUF20L_ADCBUF20L_LENGTH                         0x8
#define _ADCBUF20L_ADCBUF20L_MASK                           0xFF

// Register: ADCBUF20H
#define ADCBUF20H ADCBUF20H
extern volatile unsigned char           ADCBUF20H           __at(0xE6F);
#ifndef _LIB_BUILD
asm("ADCBUF20H equ 0E6Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF20H              :8;
    };
} ADCBUF20Hbits_t;
extern volatile ADCBUF20Hbits_t ADCBUF20Hbits __at(0xE6F);
// bitfield macros
#define _ADCBUF20H_ADCBUF20H_POSN                           0x0
#define _ADCBUF20H_ADCBUF20H_POSITION                       0x0
#define _ADCBUF20H_ADCBUF20H_SIZE                           0x8
#define _ADCBUF20H_ADCBUF20H_LENGTH                         0x8
#define _ADCBUF20H_ADCBUF20H_MASK                           0xFF

// Register: ADCBUF21
#define ADCBUF21 ADCBUF21
extern volatile unsigned short          ADCBUF21            __at(0xE70);
#ifndef _LIB_BUILD
asm("ADCBUF21 equ 0E70h");
#endif

// Register: ADCBUF21L
#define ADCBUF21L ADCBUF21L
extern volatile unsigned char           ADCBUF21L           __at(0xE70);
#ifndef _LIB_BUILD
asm("ADCBUF21L equ 0E70h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF21L              :8;
    };
} ADCBUF21Lbits_t;
extern volatile ADCBUF21Lbits_t ADCBUF21Lbits __at(0xE70);
// bitfield macros
#define _ADCBUF21L_ADCBUF21L_POSN                           0x0
#define _ADCBUF21L_ADCBUF21L_POSITION                       0x0
#define _ADCBUF21L_ADCBUF21L_SIZE                           0x8
#define _ADCBUF21L_ADCBUF21L_LENGTH                         0x8
#define _ADCBUF21L_ADCBUF21L_MASK                           0xFF

// Register: ADCBUF21H
#define ADCBUF21H ADCBUF21H
extern volatile unsigned char           ADCBUF21H           __at(0xE71);
#ifndef _LIB_BUILD
asm("ADCBUF21H equ 0E71h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF21H              :8;
    };
} ADCBUF21Hbits_t;
extern volatile ADCBUF21Hbits_t ADCBUF21Hbits __at(0xE71);
// bitfield macros
#define _ADCBUF21H_ADCBUF21H_POSN                           0x0
#define _ADCBUF21H_ADCBUF21H_POSITION                       0x0
#define _ADCBUF21H_ADCBUF21H_SIZE                           0x8
#define _ADCBUF21H_ADCBUF21H_LENGTH                         0x8
#define _ADCBUF21H_ADCBUF21H_MASK                           0xFF

// Register: ADCBUF22
#define ADCBUF22 ADCBUF22
extern volatile unsigned short          ADCBUF22            __at(0xE72);
#ifndef _LIB_BUILD
asm("ADCBUF22 equ 0E72h");
#endif

// Register: ADCBUF22L
#define ADCBUF22L ADCBUF22L
extern volatile unsigned char           ADCBUF22L           __at(0xE72);
#ifndef _LIB_BUILD
asm("ADCBUF22L equ 0E72h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF22L              :8;
    };
} ADCBUF22Lbits_t;
extern volatile ADCBUF22Lbits_t ADCBUF22Lbits __at(0xE72);
// bitfield macros
#define _ADCBUF22L_ADCBUF22L_POSN                           0x0
#define _ADCBUF22L_ADCBUF22L_POSITION                       0x0
#define _ADCBUF22L_ADCBUF22L_SIZE                           0x8
#define _ADCBUF22L_ADCBUF22L_LENGTH                         0x8
#define _ADCBUF22L_ADCBUF22L_MASK                           0xFF

// Register: ADCBUF22H
#define ADCBUF22H ADCBUF22H
extern volatile unsigned char           ADCBUF22H           __at(0xE73);
#ifndef _LIB_BUILD
asm("ADCBUF22H equ 0E73h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF22H              :8;
    };
} ADCBUF22Hbits_t;
extern volatile ADCBUF22Hbits_t ADCBUF22Hbits __at(0xE73);
// bitfield macros
#define _ADCBUF22H_ADCBUF22H_POSN                           0x0
#define _ADCBUF22H_ADCBUF22H_POSITION                       0x0
#define _ADCBUF22H_ADCBUF22H_SIZE                           0x8
#define _ADCBUF22H_ADCBUF22H_LENGTH                         0x8
#define _ADCBUF22H_ADCBUF22H_MASK                           0xFF

// Register: ADCBUF23
#define ADCBUF23 ADCBUF23
extern volatile unsigned short          ADCBUF23            __at(0xE74);
#ifndef _LIB_BUILD
asm("ADCBUF23 equ 0E74h");
#endif

// Register: ADCBUF23L
#define ADCBUF23L ADCBUF23L
extern volatile unsigned char           ADCBUF23L           __at(0xE74);
#ifndef _LIB_BUILD
asm("ADCBUF23L equ 0E74h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF23L              :8;
    };
} ADCBUF23Lbits_t;
extern volatile ADCBUF23Lbits_t ADCBUF23Lbits __at(0xE74);
// bitfield macros
#define _ADCBUF23L_ADCBUF23L_POSN                           0x0
#define _ADCBUF23L_ADCBUF23L_POSITION                       0x0
#define _ADCBUF23L_ADCBUF23L_SIZE                           0x8
#define _ADCBUF23L_ADCBUF23L_LENGTH                         0x8
#define _ADCBUF23L_ADCBUF23L_MASK                           0xFF

// Register: ADCBUF23H
#define ADCBUF23H ADCBUF23H
extern volatile unsigned char           ADCBUF23H           __at(0xE75);
#ifndef _LIB_BUILD
asm("ADCBUF23H equ 0E75h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF23H              :8;
    };
} ADCBUF23Hbits_t;
extern volatile ADCBUF23Hbits_t ADCBUF23Hbits __at(0xE75);
// bitfield macros
#define _ADCBUF23H_ADCBUF23H_POSN                           0x0
#define _ADCBUF23H_ADCBUF23H_POSITION                       0x0
#define _ADCBUF23H_ADCBUF23H_SIZE                           0x8
#define _ADCBUF23H_ADCBUF23H_LENGTH                         0x8
#define _ADCBUF23H_ADCBUF23H_MASK                           0xFF

// Register: ADCBUF24
#define ADCBUF24 ADCBUF24
extern volatile unsigned short          ADCBUF24            __at(0xE76);
#ifndef _LIB_BUILD
asm("ADCBUF24 equ 0E76h");
#endif

// Register: ADCBUF24L
#define ADCBUF24L ADCBUF24L
extern volatile unsigned char           ADCBUF24L           __at(0xE76);
#ifndef _LIB_BUILD
asm("ADCBUF24L equ 0E76h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF24L              :8;
    };
} ADCBUF24Lbits_t;
extern volatile ADCBUF24Lbits_t ADCBUF24Lbits __at(0xE76);
// bitfield macros
#define _ADCBUF24L_ADCBUF24L_POSN                           0x0
#define _ADCBUF24L_ADCBUF24L_POSITION                       0x0
#define _ADCBUF24L_ADCBUF24L_SIZE                           0x8
#define _ADCBUF24L_ADCBUF24L_LENGTH                         0x8
#define _ADCBUF24L_ADCBUF24L_MASK                           0xFF

// Register: ADCBUF24H
#define ADCBUF24H ADCBUF24H
extern volatile unsigned char           ADCBUF24H           __at(0xE77);
#ifndef _LIB_BUILD
asm("ADCBUF24H equ 0E77h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF24H              :8;
    };
} ADCBUF24Hbits_t;
extern volatile ADCBUF24Hbits_t ADCBUF24Hbits __at(0xE77);
// bitfield macros
#define _ADCBUF24H_ADCBUF24H_POSN                           0x0
#define _ADCBUF24H_ADCBUF24H_POSITION                       0x0
#define _ADCBUF24H_ADCBUF24H_SIZE                           0x8
#define _ADCBUF24H_ADCBUF24H_LENGTH                         0x8
#define _ADCBUF24H_ADCBUF24H_MASK                           0xFF

// Register: ADCBUF25
#define ADCBUF25 ADCBUF25
extern volatile unsigned short          ADCBUF25            __at(0xE78);
#ifndef _LIB_BUILD
asm("ADCBUF25 equ 0E78h");
#endif

// Register: ADCBUF25L
#define ADCBUF25L ADCBUF25L
extern volatile unsigned char           ADCBUF25L           __at(0xE78);
#ifndef _LIB_BUILD
asm("ADCBUF25L equ 0E78h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF25L              :8;
    };
} ADCBUF25Lbits_t;
extern volatile ADCBUF25Lbits_t ADCBUF25Lbits __at(0xE78);
// bitfield macros
#define _ADCBUF25L_ADCBUF25L_POSN                           0x0
#define _ADCBUF25L_ADCBUF25L_POSITION                       0x0
#define _ADCBUF25L_ADCBUF25L_SIZE                           0x8
#define _ADCBUF25L_ADCBUF25L_LENGTH                         0x8
#define _ADCBUF25L_ADCBUF25L_MASK                           0xFF

// Register: ADCBUF25H
#define ADCBUF25H ADCBUF25H
extern volatile unsigned char           ADCBUF25H           __at(0xE79);
#ifndef _LIB_BUILD
asm("ADCBUF25H equ 0E79h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF25H              :8;
    };
} ADCBUF25Hbits_t;
extern volatile ADCBUF25Hbits_t ADCBUF25Hbits __at(0xE79);
// bitfield macros
#define _ADCBUF25H_ADCBUF25H_POSN                           0x0
#define _ADCBUF25H_ADCBUF25H_POSITION                       0x0
#define _ADCBUF25H_ADCBUF25H_SIZE                           0x8
#define _ADCBUF25H_ADCBUF25H_LENGTH                         0x8
#define _ADCBUF25H_ADCBUF25H_MASK                           0xFF

// Register: ADCTMUEN0L
#define ADCTMUEN0L ADCTMUEN0L
extern volatile unsigned char           ADCTMUEN0L          __at(0xE7A);
#ifndef _LIB_BUILD
asm("ADCTMUEN0L equ 0E7Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTMUEN                 :8;
    };
    struct {
        unsigned CTMUEN0                :1;
        unsigned CTMUEN1                :1;
        unsigned CTMUEN2                :1;
        unsigned CTMUEN3                :1;
        unsigned CTMUEN4                :1;
        unsigned CTMUEN5                :1;
        unsigned CTMUEN6                :1;
        unsigned CTMUEN7                :1;
    };
} ADCTMUEN0Lbits_t;
extern volatile ADCTMUEN0Lbits_t ADCTMUEN0Lbits __at(0xE7A);
// bitfield macros
#define _ADCTMUEN0L_CTMUEN_POSN                             0x0
#define _ADCTMUEN0L_CTMUEN_POSITION                         0x0
#define _ADCTMUEN0L_CTMUEN_SIZE                             0x8
#define _ADCTMUEN0L_CTMUEN_LENGTH                           0x8
#define _ADCTMUEN0L_CTMUEN_MASK                             0xFF
#define _ADCTMUEN0L_CTMUEN0_POSN                            0x0
#define _ADCTMUEN0L_CTMUEN0_POSITION                        0x0
#define _ADCTMUEN0L_CTMUEN0_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN0_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN0_MASK                            0x1
#define _ADCTMUEN0L_CTMUEN1_POSN                            0x1
#define _ADCTMUEN0L_CTMUEN1_POSITION                        0x1
#define _ADCTMUEN0L_CTMUEN1_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN1_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN1_MASK                            0x2
#define _ADCTMUEN0L_CTMUEN2_POSN                            0x2
#define _ADCTMUEN0L_CTMUEN2_POSITION                        0x2
#define _ADCTMUEN0L_CTMUEN2_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN2_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN2_MASK                            0x4
#define _ADCTMUEN0L_CTMUEN3_POSN                            0x3
#define _ADCTMUEN0L_CTMUEN3_POSITION                        0x3
#define _ADCTMUEN0L_CTMUEN3_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN3_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN3_MASK                            0x8
#define _ADCTMUEN0L_CTMUEN4_POSN                            0x4
#define _ADCTMUEN0L_CTMUEN4_POSITION                        0x4
#define _ADCTMUEN0L_CTMUEN4_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN4_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN4_MASK                            0x10
#define _ADCTMUEN0L_CTMUEN5_POSN                            0x5
#define _ADCTMUEN0L_CTMUEN5_POSITION                        0x5
#define _ADCTMUEN0L_CTMUEN5_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN5_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN5_MASK                            0x20
#define _ADCTMUEN0L_CTMUEN6_POSN                            0x6
#define _ADCTMUEN0L_CTMUEN6_POSITION                        0x6
#define _ADCTMUEN0L_CTMUEN6_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN6_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN6_MASK                            0x40
#define _ADCTMUEN0L_CTMUEN7_POSN                            0x7
#define _ADCTMUEN0L_CTMUEN7_POSITION                        0x7
#define _ADCTMUEN0L_CTMUEN7_SIZE                            0x1
#define _ADCTMUEN0L_CTMUEN7_LENGTH                          0x1
#define _ADCTMUEN0L_CTMUEN7_MASK                            0x80

// Register: ADCTMUEN0H
#define ADCTMUEN0H ADCTMUEN0H
extern volatile unsigned char           ADCTMUEN0H          __at(0xE7B);
#ifndef _LIB_BUILD
asm("ADCTMUEN0H equ 0E7Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTMUEN                 :8;
    };
    struct {
        unsigned CTMUEN8                :1;
        unsigned CTMUEN9                :1;
        unsigned CTMUEN10               :1;
        unsigned CTMUEN11               :1;
        unsigned CTMUEN12               :1;
        unsigned CTMUEN13               :1;
        unsigned CTMUEN14               :1;
        unsigned CTMUEN15               :1;
    };
} ADCTMUEN0Hbits_t;
extern volatile ADCTMUEN0Hbits_t ADCTMUEN0Hbits __at(0xE7B);
// bitfield macros
#define _ADCTMUEN0H_CTMUEN_POSN                             0x0
#define _ADCTMUEN0H_CTMUEN_POSITION                         0x0
#define _ADCTMUEN0H_CTMUEN_SIZE                             0x8
#define _ADCTMUEN0H_CTMUEN_LENGTH                           0x8
#define _ADCTMUEN0H_CTMUEN_MASK                             0xFF
#define _ADCTMUEN0H_CTMUEN8_POSN                            0x0
#define _ADCTMUEN0H_CTMUEN8_POSITION                        0x0
#define _ADCTMUEN0H_CTMUEN8_SIZE                            0x1
#define _ADCTMUEN0H_CTMUEN8_LENGTH                          0x1
#define _ADCTMUEN0H_CTMUEN8_MASK                            0x1
#define _ADCTMUEN0H_CTMUEN9_POSN                            0x1
#define _ADCTMUEN0H_CTMUEN9_POSITION                        0x1
#define _ADCTMUEN0H_CTMUEN9_SIZE                            0x1
#define _ADCTMUEN0H_CTMUEN9_LENGTH                          0x1
#define _ADCTMUEN0H_CTMUEN9_MASK                            0x2
#define _ADCTMUEN0H_CTMUEN10_POSN                           0x2
#define _ADCTMUEN0H_CTMUEN10_POSITION                       0x2
#define _ADCTMUEN0H_CTMUEN10_SIZE                           0x1
#define _ADCTMUEN0H_CTMUEN10_LENGTH                         0x1
#define _ADCTMUEN0H_CTMUEN10_MASK                           0x4
#define _ADCTMUEN0H_CTMUEN11_POSN                           0x3
#define _ADCTMUEN0H_CTMUEN11_POSITION                       0x3
#define _ADCTMUEN0H_CTMUEN11_SIZE                           0x1
#define _ADCTMUEN0H_CTMUEN11_LENGTH                         0x1
#define _ADCTMUEN0H_CTMUEN11_MASK                           0x8
#define _ADCTMUEN0H_CTMUEN12_POSN                           0x4
#define _ADCTMUEN0H_CTMUEN12_POSITION                       0x4
#define _ADCTMUEN0H_CTMUEN12_SIZE                           0x1
#define _ADCTMUEN0H_CTMUEN12_LENGTH                         0x1
#define _ADCTMUEN0H_CTMUEN12_MASK                           0x10
#define _ADCTMUEN0H_CTMUEN13_POSN                           0x5
#define _ADCTMUEN0H_CTMUEN13_POSITION                       0x5
#define _ADCTMUEN0H_CTMUEN13_SIZE                           0x1
#define _ADCTMUEN0H_CTMUEN13_LENGTH                         0x1
#define _ADCTMUEN0H_CTMUEN13_MASK                           0x20
#define _ADCTMUEN0H_CTMUEN14_POSN                           0x6
#define _ADCTMUEN0H_CTMUEN14_POSITION                       0x6
#define _ADCTMUEN0H_CTMUEN14_SIZE                           0x1
#define _ADCTMUEN0H_CTMUEN14_LENGTH                         0x1
#define _ADCTMUEN0H_CTMUEN14_MASK                           0x40
#define _ADCTMUEN0H_CTMUEN15_POSN                           0x7
#define _ADCTMUEN0H_CTMUEN15_POSITION                       0x7
#define _ADCTMUEN0H_CTMUEN15_SIZE                           0x1
#define _ADCTMUEN0H_CTMUEN15_LENGTH                         0x1
#define _ADCTMUEN0H_CTMUEN15_MASK                           0x80

// Register: ADCTMUEN1L
#define ADCTMUEN1L ADCTMUEN1L
extern volatile unsigned char           ADCTMUEN1L          __at(0xE7C);
#ifndef _LIB_BUILD
asm("ADCTMUEN1L equ 0E7Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTMUEN                 :8;
    };
    struct {
        unsigned CTUMEN16               :1;
        unsigned CTUMEN17               :1;
        unsigned CTUMEN18               :1;
        unsigned CTUMEN19               :1;
        unsigned CTMUEN20               :1;
        unsigned CTMUEN21               :1;
        unsigned CTMUEN22               :1;
        unsigned CTMUEN23               :1;
    };
} ADCTMUEN1Lbits_t;
extern volatile ADCTMUEN1Lbits_t ADCTMUEN1Lbits __at(0xE7C);
// bitfield macros
#define _ADCTMUEN1L_CTMUEN_POSN                             0x0
#define _ADCTMUEN1L_CTMUEN_POSITION                         0x0
#define _ADCTMUEN1L_CTMUEN_SIZE                             0x8
#define _ADCTMUEN1L_CTMUEN_LENGTH                           0x8
#define _ADCTMUEN1L_CTMUEN_MASK                             0xFF
#define _ADCTMUEN1L_CTUMEN16_POSN                           0x0
#define _ADCTMUEN1L_CTUMEN16_POSITION                       0x0
#define _ADCTMUEN1L_CTUMEN16_SIZE                           0x1
#define _ADCTMUEN1L_CTUMEN16_LENGTH                         0x1
#define _ADCTMUEN1L_CTUMEN16_MASK                           0x1
#define _ADCTMUEN1L_CTUMEN17_POSN                           0x1
#define _ADCTMUEN1L_CTUMEN17_POSITION                       0x1
#define _ADCTMUEN1L_CTUMEN17_SIZE                           0x1
#define _ADCTMUEN1L_CTUMEN17_LENGTH                         0x1
#define _ADCTMUEN1L_CTUMEN17_MASK                           0x2
#define _ADCTMUEN1L_CTUMEN18_POSN                           0x2
#define _ADCTMUEN1L_CTUMEN18_POSITION                       0x2
#define _ADCTMUEN1L_CTUMEN18_SIZE                           0x1
#define _ADCTMUEN1L_CTUMEN18_LENGTH                         0x1
#define _ADCTMUEN1L_CTUMEN18_MASK                           0x4
#define _ADCTMUEN1L_CTUMEN19_POSN                           0x3
#define _ADCTMUEN1L_CTUMEN19_POSITION                       0x3
#define _ADCTMUEN1L_CTUMEN19_SIZE                           0x1
#define _ADCTMUEN1L_CTUMEN19_LENGTH                         0x1
#define _ADCTMUEN1L_CTUMEN19_MASK                           0x8
#define _ADCTMUEN1L_CTMUEN20_POSN                           0x4
#define _ADCTMUEN1L_CTMUEN20_POSITION                       0x4
#define _ADCTMUEN1L_CTMUEN20_SIZE                           0x1
#define _ADCTMUEN1L_CTMUEN20_LENGTH                         0x1
#define _ADCTMUEN1L_CTMUEN20_MASK                           0x10
#define _ADCTMUEN1L_CTMUEN21_POSN                           0x5
#define _ADCTMUEN1L_CTMUEN21_POSITION                       0x5
#define _ADCTMUEN1L_CTMUEN21_SIZE                           0x1
#define _ADCTMUEN1L_CTMUEN21_LENGTH                         0x1
#define _ADCTMUEN1L_CTMUEN21_MASK                           0x20
#define _ADCTMUEN1L_CTMUEN22_POSN                           0x6
#define _ADCTMUEN1L_CTMUEN22_POSITION                       0x6
#define _ADCTMUEN1L_CTMUEN22_SIZE                           0x1
#define _ADCTMUEN1L_CTMUEN22_LENGTH                         0x1
#define _ADCTMUEN1L_CTMUEN22_MASK                           0x40
#define _ADCTMUEN1L_CTMUEN23_POSN                           0x7
#define _ADCTMUEN1L_CTMUEN23_POSITION                       0x7
#define _ADCTMUEN1L_CTMUEN23_SIZE                           0x1
#define _ADCTMUEN1L_CTMUEN23_LENGTH                         0x1
#define _ADCTMUEN1L_CTMUEN23_MASK                           0x80

// Register: ADCTMUEN1H
#define ADCTMUEN1H ADCTMUEN1H
extern volatile unsigned char           ADCTMUEN1H          __at(0xE7D);
#ifndef _LIB_BUILD
asm("ADCTMUEN1H equ 0E7Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTMUEN                 :8;
    };
    struct {
        unsigned CTUMEN24               :1;
        unsigned CTUMEN25               :1;
        unsigned CTUMEN26               :1;
        unsigned CTUMEN27               :1;
        unsigned CTUMEN28               :1;
        unsigned CTUMEN29               :1;
        unsigned CTMUEN30               :1;
    };
} ADCTMUEN1Hbits_t;
extern volatile ADCTMUEN1Hbits_t ADCTMUEN1Hbits __at(0xE7D);
// bitfield macros
#define _ADCTMUEN1H_CTMUEN_POSN                             0x0
#define _ADCTMUEN1H_CTMUEN_POSITION                         0x0
#define _ADCTMUEN1H_CTMUEN_SIZE                             0x8
#define _ADCTMUEN1H_CTMUEN_LENGTH                           0x8
#define _ADCTMUEN1H_CTMUEN_MASK                             0xFF
#define _ADCTMUEN1H_CTUMEN24_POSN                           0x0
#define _ADCTMUEN1H_CTUMEN24_POSITION                       0x0
#define _ADCTMUEN1H_CTUMEN24_SIZE                           0x1
#define _ADCTMUEN1H_CTUMEN24_LENGTH                         0x1
#define _ADCTMUEN1H_CTUMEN24_MASK                           0x1
#define _ADCTMUEN1H_CTUMEN25_POSN                           0x1
#define _ADCTMUEN1H_CTUMEN25_POSITION                       0x1
#define _ADCTMUEN1H_CTUMEN25_SIZE                           0x1
#define _ADCTMUEN1H_CTUMEN25_LENGTH                         0x1
#define _ADCTMUEN1H_CTUMEN25_MASK                           0x2
#define _ADCTMUEN1H_CTUMEN26_POSN                           0x2
#define _ADCTMUEN1H_CTUMEN26_POSITION                       0x2
#define _ADCTMUEN1H_CTUMEN26_SIZE                           0x1
#define _ADCTMUEN1H_CTUMEN26_LENGTH                         0x1
#define _ADCTMUEN1H_CTUMEN26_MASK                           0x4
#define _ADCTMUEN1H_CTUMEN27_POSN                           0x3
#define _ADCTMUEN1H_CTUMEN27_POSITION                       0x3
#define _ADCTMUEN1H_CTUMEN27_SIZE                           0x1
#define _ADCTMUEN1H_CTUMEN27_LENGTH                         0x1
#define _ADCTMUEN1H_CTUMEN27_MASK                           0x8
#define _ADCTMUEN1H_CTUMEN28_POSN                           0x4
#define _ADCTMUEN1H_CTUMEN28_POSITION                       0x4
#define _ADCTMUEN1H_CTUMEN28_SIZE                           0x1
#define _ADCTMUEN1H_CTUMEN28_LENGTH                         0x1
#define _ADCTMUEN1H_CTUMEN28_MASK                           0x10
#define _ADCTMUEN1H_CTUMEN29_POSN                           0x5
#define _ADCTMUEN1H_CTUMEN29_POSITION                       0x5
#define _ADCTMUEN1H_CTUMEN29_SIZE                           0x1
#define _ADCTMUEN1H_CTUMEN29_LENGTH                         0x1
#define _ADCTMUEN1H_CTUMEN29_MASK                           0x20
#define _ADCTMUEN1H_CTMUEN30_POSN                           0x6
#define _ADCTMUEN1H_CTMUEN30_POSITION                       0x6
#define _ADCTMUEN1H_CTMUEN30_SIZE                           0x1
#define _ADCTMUEN1H_CTMUEN30_LENGTH                         0x1
#define _ADCTMUEN1H_CTMUEN30_MASK                           0x40

// Register: ADCHIT0L
#define ADCHIT0L ADCHIT0L
extern volatile unsigned char           ADCHIT0L            __at(0xE7E);
#ifndef _LIB_BUILD
asm("ADCHIT0L equ 0E7Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CHH                    :8;
    };
    struct {
        unsigned CHH0                   :1;
        unsigned CHH1                   :1;
        unsigned CHH2                   :1;
        unsigned CHH3                   :1;
        unsigned CHH4                   :1;
        unsigned CHH5                   :1;
        unsigned CHH6                   :1;
        unsigned CHH7                   :1;
    };
} ADCHIT0Lbits_t;
extern volatile ADCHIT0Lbits_t ADCHIT0Lbits __at(0xE7E);
// bitfield macros
#define _ADCHIT0L_CHH_POSN                                  0x0
#define _ADCHIT0L_CHH_POSITION                              0x0
#define _ADCHIT0L_CHH_SIZE                                  0x8
#define _ADCHIT0L_CHH_LENGTH                                0x8
#define _ADCHIT0L_CHH_MASK                                  0xFF
#define _ADCHIT0L_CHH0_POSN                                 0x0
#define _ADCHIT0L_CHH0_POSITION                             0x0
#define _ADCHIT0L_CHH0_SIZE                                 0x1
#define _ADCHIT0L_CHH0_LENGTH                               0x1
#define _ADCHIT0L_CHH0_MASK                                 0x1
#define _ADCHIT0L_CHH1_POSN                                 0x1
#define _ADCHIT0L_CHH1_POSITION                             0x1
#define _ADCHIT0L_CHH1_SIZE                                 0x1
#define _ADCHIT0L_CHH1_LENGTH                               0x1
#define _ADCHIT0L_CHH1_MASK                                 0x2
#define _ADCHIT0L_CHH2_POSN                                 0x2
#define _ADCHIT0L_CHH2_POSITION                             0x2
#define _ADCHIT0L_CHH2_SIZE                                 0x1
#define _ADCHIT0L_CHH2_LENGTH                               0x1
#define _ADCHIT0L_CHH2_MASK                                 0x4
#define _ADCHIT0L_CHH3_POSN                                 0x3
#define _ADCHIT0L_CHH3_POSITION                             0x3
#define _ADCHIT0L_CHH3_SIZE                                 0x1
#define _ADCHIT0L_CHH3_LENGTH                               0x1
#define _ADCHIT0L_CHH3_MASK                                 0x8
#define _ADCHIT0L_CHH4_POSN                                 0x4
#define _ADCHIT0L_CHH4_POSITION                             0x4
#define _ADCHIT0L_CHH4_SIZE                                 0x1
#define _ADCHIT0L_CHH4_LENGTH                               0x1
#define _ADCHIT0L_CHH4_MASK                                 0x10
#define _ADCHIT0L_CHH5_POSN                                 0x5
#define _ADCHIT0L_CHH5_POSITION                             0x5
#define _ADCHIT0L_CHH5_SIZE                                 0x1
#define _ADCHIT0L_CHH5_LENGTH                               0x1
#define _ADCHIT0L_CHH5_MASK                                 0x20
#define _ADCHIT0L_CHH6_POSN                                 0x6
#define _ADCHIT0L_CHH6_POSITION                             0x6
#define _ADCHIT0L_CHH6_SIZE                                 0x1
#define _ADCHIT0L_CHH6_LENGTH                               0x1
#define _ADCHIT0L_CHH6_MASK                                 0x40
#define _ADCHIT0L_CHH7_POSN                                 0x7
#define _ADCHIT0L_CHH7_POSITION                             0x7
#define _ADCHIT0L_CHH7_SIZE                                 0x1
#define _ADCHIT0L_CHH7_LENGTH                               0x1
#define _ADCHIT0L_CHH7_MASK                                 0x80

// Register: ADCHIT0H
#define ADCHIT0H ADCHIT0H
extern volatile unsigned char           ADCHIT0H            __at(0xE7F);
#ifndef _LIB_BUILD
asm("ADCHIT0H equ 0E7Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CHH                    :8;
    };
    struct {
        unsigned CHH8                   :1;
        unsigned CHH9                   :1;
        unsigned CHH10                  :1;
        unsigned CHH11                  :1;
        unsigned CHH12                  :1;
        unsigned CHH13                  :1;
        unsigned CHH14                  :1;
        unsigned CHH15                  :1;
    };
} ADCHIT0Hbits_t;
extern volatile ADCHIT0Hbits_t ADCHIT0Hbits __at(0xE7F);
// bitfield macros
#define _ADCHIT0H_CHH_POSN                                  0x0
#define _ADCHIT0H_CHH_POSITION                              0x0
#define _ADCHIT0H_CHH_SIZE                                  0x8
#define _ADCHIT0H_CHH_LENGTH                                0x8
#define _ADCHIT0H_CHH_MASK                                  0xFF
#define _ADCHIT0H_CHH8_POSN                                 0x0
#define _ADCHIT0H_CHH8_POSITION                             0x0
#define _ADCHIT0H_CHH8_SIZE                                 0x1
#define _ADCHIT0H_CHH8_LENGTH                               0x1
#define _ADCHIT0H_CHH8_MASK                                 0x1
#define _ADCHIT0H_CHH9_POSN                                 0x1
#define _ADCHIT0H_CHH9_POSITION                             0x1
#define _ADCHIT0H_CHH9_SIZE                                 0x1
#define _ADCHIT0H_CHH9_LENGTH                               0x1
#define _ADCHIT0H_CHH9_MASK                                 0x2
#define _ADCHIT0H_CHH10_POSN                                0x2
#define _ADCHIT0H_CHH10_POSITION                            0x2
#define _ADCHIT0H_CHH10_SIZE                                0x1
#define _ADCHIT0H_CHH10_LENGTH                              0x1
#define _ADCHIT0H_CHH10_MASK                                0x4
#define _ADCHIT0H_CHH11_POSN                                0x3
#define _ADCHIT0H_CHH11_POSITION                            0x3
#define _ADCHIT0H_CHH11_SIZE                                0x1
#define _ADCHIT0H_CHH11_LENGTH                              0x1
#define _ADCHIT0H_CHH11_MASK                                0x8
#define _ADCHIT0H_CHH12_POSN                                0x4
#define _ADCHIT0H_CHH12_POSITION                            0x4
#define _ADCHIT0H_CHH12_SIZE                                0x1
#define _ADCHIT0H_CHH12_LENGTH                              0x1
#define _ADCHIT0H_CHH12_MASK                                0x10
#define _ADCHIT0H_CHH13_POSN                                0x5
#define _ADCHIT0H_CHH13_POSITION                            0x5
#define _ADCHIT0H_CHH13_SIZE                                0x1
#define _ADCHIT0H_CHH13_LENGTH                              0x1
#define _ADCHIT0H_CHH13_MASK                                0x20
#define _ADCHIT0H_CHH14_POSN                                0x6
#define _ADCHIT0H_CHH14_POSITION                            0x6
#define _ADCHIT0H_CHH14_SIZE                                0x1
#define _ADCHIT0H_CHH14_LENGTH                              0x1
#define _ADCHIT0H_CHH14_MASK                                0x40
#define _ADCHIT0H_CHH15_POSN                                0x7
#define _ADCHIT0H_CHH15_POSITION                            0x7
#define _ADCHIT0H_CHH15_SIZE                                0x1
#define _ADCHIT0H_CHH15_LENGTH                              0x1
#define _ADCHIT0H_CHH15_MASK                                0x80

// Register: ADCHIT1L
#define ADCHIT1L ADCHIT1L
extern volatile unsigned char           ADCHIT1L            __at(0xE80);
#ifndef _LIB_BUILD
asm("ADCHIT1L equ 0E80h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CHH                    :8;
    };
    struct {
        unsigned CHH16                  :1;
        unsigned CHH17                  :1;
        unsigned CHH18                  :1;
        unsigned CHH19                  :1;
        unsigned CHH20                  :1;
        unsigned CHH21                  :1;
        unsigned CHH22                  :1;
        unsigned CHH23                  :1;
    };
} ADCHIT1Lbits_t;
extern volatile ADCHIT1Lbits_t ADCHIT1Lbits __at(0xE80);
// bitfield macros
#define _ADCHIT1L_CHH_POSN                                  0x0
#define _ADCHIT1L_CHH_POSITION                              0x0
#define _ADCHIT1L_CHH_SIZE                                  0x8
#define _ADCHIT1L_CHH_LENGTH                                0x8
#define _ADCHIT1L_CHH_MASK                                  0xFF
#define _ADCHIT1L_CHH16_POSN                                0x0
#define _ADCHIT1L_CHH16_POSITION                            0x0
#define _ADCHIT1L_CHH16_SIZE                                0x1
#define _ADCHIT1L_CHH16_LENGTH                              0x1
#define _ADCHIT1L_CHH16_MASK                                0x1
#define _ADCHIT1L_CHH17_POSN                                0x1
#define _ADCHIT1L_CHH17_POSITION                            0x1
#define _ADCHIT1L_CHH17_SIZE                                0x1
#define _ADCHIT1L_CHH17_LENGTH                              0x1
#define _ADCHIT1L_CHH17_MASK                                0x2
#define _ADCHIT1L_CHH18_POSN                                0x2
#define _ADCHIT1L_CHH18_POSITION                            0x2
#define _ADCHIT1L_CHH18_SIZE                                0x1
#define _ADCHIT1L_CHH18_LENGTH                              0x1
#define _ADCHIT1L_CHH18_MASK                                0x4
#define _ADCHIT1L_CHH19_POSN                                0x3
#define _ADCHIT1L_CHH19_POSITION                            0x3
#define _ADCHIT1L_CHH19_SIZE                                0x1
#define _ADCHIT1L_CHH19_LENGTH                              0x1
#define _ADCHIT1L_CHH19_MASK                                0x8
#define _ADCHIT1L_CHH20_POSN                                0x4
#define _ADCHIT1L_CHH20_POSITION                            0x4
#define _ADCHIT1L_CHH20_SIZE                                0x1
#define _ADCHIT1L_CHH20_LENGTH                              0x1
#define _ADCHIT1L_CHH20_MASK                                0x10
#define _ADCHIT1L_CHH21_POSN                                0x5
#define _ADCHIT1L_CHH21_POSITION                            0x5
#define _ADCHIT1L_CHH21_SIZE                                0x1
#define _ADCHIT1L_CHH21_LENGTH                              0x1
#define _ADCHIT1L_CHH21_MASK                                0x20
#define _ADCHIT1L_CHH22_POSN                                0x6
#define _ADCHIT1L_CHH22_POSITION                            0x6
#define _ADCHIT1L_CHH22_SIZE                                0x1
#define _ADCHIT1L_CHH22_LENGTH                              0x1
#define _ADCHIT1L_CHH22_MASK                                0x40
#define _ADCHIT1L_CHH23_POSN                                0x7
#define _ADCHIT1L_CHH23_POSITION                            0x7
#define _ADCHIT1L_CHH23_SIZE                                0x1
#define _ADCHIT1L_CHH23_LENGTH                              0x1
#define _ADCHIT1L_CHH23_MASK                                0x80

// Register: ADCHIT1H
#define ADCHIT1H ADCHIT1H
extern volatile unsigned char           ADCHIT1H            __at(0xE81);
#ifndef _LIB_BUILD
asm("ADCHIT1H equ 0E81h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CHH                    :8;
    };
    struct {
        unsigned CHH24                  :1;
        unsigned CHH25                  :1;
        unsigned CHH26                  :1;
        unsigned CHH27                  :1;
        unsigned CHH28                  :1;
        unsigned CHH29                  :1;
        unsigned CHH30                  :1;
    };
} ADCHIT1Hbits_t;
extern volatile ADCHIT1Hbits_t ADCHIT1Hbits __at(0xE81);
// bitfield macros
#define _ADCHIT1H_CHH_POSN                                  0x0
#define _ADCHIT1H_CHH_POSITION                              0x0
#define _ADCHIT1H_CHH_SIZE                                  0x8
#define _ADCHIT1H_CHH_LENGTH                                0x8
#define _ADCHIT1H_CHH_MASK                                  0xFF
#define _ADCHIT1H_CHH24_POSN                                0x0
#define _ADCHIT1H_CHH24_POSITION                            0x0
#define _ADCHIT1H_CHH24_SIZE                                0x1
#define _ADCHIT1H_CHH24_LENGTH                              0x1
#define _ADCHIT1H_CHH24_MASK                                0x1
#define _ADCHIT1H_CHH25_POSN                                0x1
#define _ADCHIT1H_CHH25_POSITION                            0x1
#define _ADCHIT1H_CHH25_SIZE                                0x1
#define _ADCHIT1H_CHH25_LENGTH                              0x1
#define _ADCHIT1H_CHH25_MASK                                0x2
#define _ADCHIT1H_CHH26_POSN                                0x2
#define _ADCHIT1H_CHH26_POSITION                            0x2
#define _ADCHIT1H_CHH26_SIZE                                0x1
#define _ADCHIT1H_CHH26_LENGTH                              0x1
#define _ADCHIT1H_CHH26_MASK                                0x4
#define _ADCHIT1H_CHH27_POSN                                0x3
#define _ADCHIT1H_CHH27_POSITION                            0x3
#define _ADCHIT1H_CHH27_SIZE                                0x1
#define _ADCHIT1H_CHH27_LENGTH                              0x1
#define _ADCHIT1H_CHH27_MASK                                0x8
#define _ADCHIT1H_CHH28_POSN                                0x4
#define _ADCHIT1H_CHH28_POSITION                            0x4
#define _ADCHIT1H_CHH28_SIZE                                0x1
#define _ADCHIT1H_CHH28_LENGTH                              0x1
#define _ADCHIT1H_CHH28_MASK                                0x10
#define _ADCHIT1H_CHH29_POSN                                0x5
#define _ADCHIT1H_CHH29_POSITION                            0x5
#define _ADCHIT1H_CHH29_SIZE                                0x1
#define _ADCHIT1H_CHH29_LENGTH                              0x1
#define _ADCHIT1H_CHH29_MASK                                0x20
#define _ADCHIT1H_CHH30_POSN                                0x6
#define _ADCHIT1H_CHH30_POSITION                            0x6
#define _ADCHIT1H_CHH30_SIZE                                0x1
#define _ADCHIT1H_CHH30_LENGTH                              0x1
#define _ADCHIT1H_CHH30_MASK                                0x40

// Register: ADCSS0L
#define ADCSS0L ADCSS0L
extern volatile unsigned char           ADCSS0L             __at(0xE82);
#ifndef _LIB_BUILD
asm("ADCSS0L equ 0E82h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSS                    :8;
    };
    struct {
        unsigned CSS0                   :1;
        unsigned CSS1                   :1;
        unsigned CSS2                   :1;
        unsigned CSS3                   :1;
        unsigned CSS4                   :1;
        unsigned CSS5                   :1;
        unsigned CSS6                   :1;
        unsigned CSS7                   :1;
    };
} ADCSS0Lbits_t;
extern volatile ADCSS0Lbits_t ADCSS0Lbits __at(0xE82);
// bitfield macros
#define _ADCSS0L_CSS_POSN                                   0x0
#define _ADCSS0L_CSS_POSITION                               0x0
#define _ADCSS0L_CSS_SIZE                                   0x8
#define _ADCSS0L_CSS_LENGTH                                 0x8
#define _ADCSS0L_CSS_MASK                                   0xFF
#define _ADCSS0L_CSS0_POSN                                  0x0
#define _ADCSS0L_CSS0_POSITION                              0x0
#define _ADCSS0L_CSS0_SIZE                                  0x1
#define _ADCSS0L_CSS0_LENGTH                                0x1
#define _ADCSS0L_CSS0_MASK                                  0x1
#define _ADCSS0L_CSS1_POSN                                  0x1
#define _ADCSS0L_CSS1_POSITION                              0x1
#define _ADCSS0L_CSS1_SIZE                                  0x1
#define _ADCSS0L_CSS1_LENGTH                                0x1
#define _ADCSS0L_CSS1_MASK                                  0x2
#define _ADCSS0L_CSS2_POSN                                  0x2
#define _ADCSS0L_CSS2_POSITION                              0x2
#define _ADCSS0L_CSS2_SIZE                                  0x1
#define _ADCSS0L_CSS2_LENGTH                                0x1
#define _ADCSS0L_CSS2_MASK                                  0x4
#define _ADCSS0L_CSS3_POSN                                  0x3
#define _ADCSS0L_CSS3_POSITION                              0x3
#define _ADCSS0L_CSS3_SIZE                                  0x1
#define _ADCSS0L_CSS3_LENGTH                                0x1
#define _ADCSS0L_CSS3_MASK                                  0x8
#define _ADCSS0L_CSS4_POSN                                  0x4
#define _ADCSS0L_CSS4_POSITION                              0x4
#define _ADCSS0L_CSS4_SIZE                                  0x1
#define _ADCSS0L_CSS4_LENGTH                                0x1
#define _ADCSS0L_CSS4_MASK                                  0x10
#define _ADCSS0L_CSS5_POSN                                  0x5
#define _ADCSS0L_CSS5_POSITION                              0x5
#define _ADCSS0L_CSS5_SIZE                                  0x1
#define _ADCSS0L_CSS5_LENGTH                                0x1
#define _ADCSS0L_CSS5_MASK                                  0x20
#define _ADCSS0L_CSS6_POSN                                  0x6
#define _ADCSS0L_CSS6_POSITION                              0x6
#define _ADCSS0L_CSS6_SIZE                                  0x1
#define _ADCSS0L_CSS6_LENGTH                                0x1
#define _ADCSS0L_CSS6_MASK                                  0x40
#define _ADCSS0L_CSS7_POSN                                  0x7
#define _ADCSS0L_CSS7_POSITION                              0x7
#define _ADCSS0L_CSS7_SIZE                                  0x1
#define _ADCSS0L_CSS7_LENGTH                                0x1
#define _ADCSS0L_CSS7_MASK                                  0x80

// Register: ADCSS0H
#define ADCSS0H ADCSS0H
extern volatile unsigned char           ADCSS0H             __at(0xE83);
#ifndef _LIB_BUILD
asm("ADCSS0H equ 0E83h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSS                    :8;
    };
    struct {
        unsigned CSS8                   :1;
        unsigned CSS9                   :1;
        unsigned CSS10                  :1;
        unsigned CSS11                  :1;
        unsigned CSS12                  :1;
        unsigned CSS13                  :1;
        unsigned CSS14                  :1;
        unsigned CSS15                  :1;
    };
} ADCSS0Hbits_t;
extern volatile ADCSS0Hbits_t ADCSS0Hbits __at(0xE83);
// bitfield macros
#define _ADCSS0H_CSS_POSN                                   0x0
#define _ADCSS0H_CSS_POSITION                               0x0
#define _ADCSS0H_CSS_SIZE                                   0x8
#define _ADCSS0H_CSS_LENGTH                                 0x8
#define _ADCSS0H_CSS_MASK                                   0xFF
#define _ADCSS0H_CSS8_POSN                                  0x0
#define _ADCSS0H_CSS8_POSITION                              0x0
#define _ADCSS0H_CSS8_SIZE                                  0x1
#define _ADCSS0H_CSS8_LENGTH                                0x1
#define _ADCSS0H_CSS8_MASK                                  0x1
#define _ADCSS0H_CSS9_POSN                                  0x1
#define _ADCSS0H_CSS9_POSITION                              0x1
#define _ADCSS0H_CSS9_SIZE                                  0x1
#define _ADCSS0H_CSS9_LENGTH                                0x1
#define _ADCSS0H_CSS9_MASK                                  0x2
#define _ADCSS0H_CSS10_POSN                                 0x2
#define _ADCSS0H_CSS10_POSITION                             0x2
#define _ADCSS0H_CSS10_SIZE                                 0x1
#define _ADCSS0H_CSS10_LENGTH                               0x1
#define _ADCSS0H_CSS10_MASK                                 0x4
#define _ADCSS0H_CSS11_POSN                                 0x3
#define _ADCSS0H_CSS11_POSITION                             0x3
#define _ADCSS0H_CSS11_SIZE                                 0x1
#define _ADCSS0H_CSS11_LENGTH                               0x1
#define _ADCSS0H_CSS11_MASK                                 0x8
#define _ADCSS0H_CSS12_POSN                                 0x4
#define _ADCSS0H_CSS12_POSITION                             0x4
#define _ADCSS0H_CSS12_SIZE                                 0x1
#define _ADCSS0H_CSS12_LENGTH                               0x1
#define _ADCSS0H_CSS12_MASK                                 0x10
#define _ADCSS0H_CSS13_POSN                                 0x5
#define _ADCSS0H_CSS13_POSITION                             0x5
#define _ADCSS0H_CSS13_SIZE                                 0x1
#define _ADCSS0H_CSS13_LENGTH                               0x1
#define _ADCSS0H_CSS13_MASK                                 0x20
#define _ADCSS0H_CSS14_POSN                                 0x6
#define _ADCSS0H_CSS14_POSITION                             0x6
#define _ADCSS0H_CSS14_SIZE                                 0x1
#define _ADCSS0H_CSS14_LENGTH                               0x1
#define _ADCSS0H_CSS14_MASK                                 0x40
#define _ADCSS0H_CSS15_POSN                                 0x7
#define _ADCSS0H_CSS15_POSITION                             0x7
#define _ADCSS0H_CSS15_SIZE                                 0x1
#define _ADCSS0H_CSS15_LENGTH                               0x1
#define _ADCSS0H_CSS15_MASK                                 0x80

// Register: ADCSS1L
#define ADCSS1L ADCSS1L
extern volatile unsigned char           ADCSS1L             __at(0xE84);
#ifndef _LIB_BUILD
asm("ADCSS1L equ 0E84h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSS                    :8;
    };
    struct {
        unsigned CSS16                  :1;
        unsigned CSS17                  :1;
        unsigned CSS18                  :1;
        unsigned CSS19                  :1;
        unsigned CSS20                  :1;
        unsigned CSS21                  :1;
        unsigned CSS22                  :1;
        unsigned CSS23                  :1;
    };
} ADCSS1Lbits_t;
extern volatile ADCSS1Lbits_t ADCSS1Lbits __at(0xE84);
// bitfield macros
#define _ADCSS1L_CSS_POSN                                   0x0
#define _ADCSS1L_CSS_POSITION                               0x0
#define _ADCSS1L_CSS_SIZE                                   0x8
#define _ADCSS1L_CSS_LENGTH                                 0x8
#define _ADCSS1L_CSS_MASK                                   0xFF
#define _ADCSS1L_CSS16_POSN                                 0x0
#define _ADCSS1L_CSS16_POSITION                             0x0
#define _ADCSS1L_CSS16_SIZE                                 0x1
#define _ADCSS1L_CSS16_LENGTH                               0x1
#define _ADCSS1L_CSS16_MASK                                 0x1
#define _ADCSS1L_CSS17_POSN                                 0x1
#define _ADCSS1L_CSS17_POSITION                             0x1
#define _ADCSS1L_CSS17_SIZE                                 0x1
#define _ADCSS1L_CSS17_LENGTH                               0x1
#define _ADCSS1L_CSS17_MASK                                 0x2
#define _ADCSS1L_CSS18_POSN                                 0x2
#define _ADCSS1L_CSS18_POSITION                             0x2
#define _ADCSS1L_CSS18_SIZE                                 0x1
#define _ADCSS1L_CSS18_LENGTH                               0x1
#define _ADCSS1L_CSS18_MASK                                 0x4
#define _ADCSS1L_CSS19_POSN                                 0x3
#define _ADCSS1L_CSS19_POSITION                             0x3
#define _ADCSS1L_CSS19_SIZE                                 0x1
#define _ADCSS1L_CSS19_LENGTH                               0x1
#define _ADCSS1L_CSS19_MASK                                 0x8
#define _ADCSS1L_CSS20_POSN                                 0x4
#define _ADCSS1L_CSS20_POSITION                             0x4
#define _ADCSS1L_CSS20_SIZE                                 0x1
#define _ADCSS1L_CSS20_LENGTH                               0x1
#define _ADCSS1L_CSS20_MASK                                 0x10
#define _ADCSS1L_CSS21_POSN                                 0x5
#define _ADCSS1L_CSS21_POSITION                             0x5
#define _ADCSS1L_CSS21_SIZE                                 0x1
#define _ADCSS1L_CSS21_LENGTH                               0x1
#define _ADCSS1L_CSS21_MASK                                 0x20
#define _ADCSS1L_CSS22_POSN                                 0x6
#define _ADCSS1L_CSS22_POSITION                             0x6
#define _ADCSS1L_CSS22_SIZE                                 0x1
#define _ADCSS1L_CSS22_LENGTH                               0x1
#define _ADCSS1L_CSS22_MASK                                 0x40
#define _ADCSS1L_CSS23_POSN                                 0x7
#define _ADCSS1L_CSS23_POSITION                             0x7
#define _ADCSS1L_CSS23_SIZE                                 0x1
#define _ADCSS1L_CSS23_LENGTH                               0x1
#define _ADCSS1L_CSS23_MASK                                 0x80

// Register: ADCSS1H
#define ADCSS1H ADCSS1H
extern volatile unsigned char           ADCSS1H             __at(0xE85);
#ifndef _LIB_BUILD
asm("ADCSS1H equ 0E85h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSS                    :8;
    };
    struct {
        unsigned CSS24                  :1;
        unsigned CSS25                  :1;
        unsigned CSS26                  :1;
        unsigned CSS27                  :1;
        unsigned CSS28                  :1;
        unsigned CSS29                  :1;
        unsigned CSS30                  :1;
    };
} ADCSS1Hbits_t;
extern volatile ADCSS1Hbits_t ADCSS1Hbits __at(0xE85);
// bitfield macros
#define _ADCSS1H_CSS_POSN                                   0x0
#define _ADCSS1H_CSS_POSITION                               0x0
#define _ADCSS1H_CSS_SIZE                                   0x8
#define _ADCSS1H_CSS_LENGTH                                 0x8
#define _ADCSS1H_CSS_MASK                                   0xFF
#define _ADCSS1H_CSS24_POSN                                 0x0
#define _ADCSS1H_CSS24_POSITION                             0x0
#define _ADCSS1H_CSS24_SIZE                                 0x1
#define _ADCSS1H_CSS24_LENGTH                               0x1
#define _ADCSS1H_CSS24_MASK                                 0x1
#define _ADCSS1H_CSS25_POSN                                 0x1
#define _ADCSS1H_CSS25_POSITION                             0x1
#define _ADCSS1H_CSS25_SIZE                                 0x1
#define _ADCSS1H_CSS25_LENGTH                               0x1
#define _ADCSS1H_CSS25_MASK                                 0x2
#define _ADCSS1H_CSS26_POSN                                 0x2
#define _ADCSS1H_CSS26_POSITION                             0x2
#define _ADCSS1H_CSS26_SIZE                                 0x1
#define _ADCSS1H_CSS26_LENGTH                               0x1
#define _ADCSS1H_CSS26_MASK                                 0x4
#define _ADCSS1H_CSS27_POSN                                 0x3
#define _ADCSS1H_CSS27_POSITION                             0x3
#define _ADCSS1H_CSS27_SIZE                                 0x1
#define _ADCSS1H_CSS27_LENGTH                               0x1
#define _ADCSS1H_CSS27_MASK                                 0x8
#define _ADCSS1H_CSS28_POSN                                 0x4
#define _ADCSS1H_CSS28_POSITION                             0x4
#define _ADCSS1H_CSS28_SIZE                                 0x1
#define _ADCSS1H_CSS28_LENGTH                               0x1
#define _ADCSS1H_CSS28_MASK                                 0x10
#define _ADCSS1H_CSS29_POSN                                 0x5
#define _ADCSS1H_CSS29_POSITION                             0x5
#define _ADCSS1H_CSS29_SIZE                                 0x1
#define _ADCSS1H_CSS29_LENGTH                               0x1
#define _ADCSS1H_CSS29_MASK                                 0x20
#define _ADCSS1H_CSS30_POSN                                 0x6
#define _ADCSS1H_CSS30_POSITION                             0x6
#define _ADCSS1H_CSS30_SIZE                                 0x1
#define _ADCSS1H_CSS30_LENGTH                               0x1
#define _ADCSS1H_CSS30_MASK                                 0x40

// Register: ADCHS0L
#define ADCHS0L ADCHS0L
extern volatile unsigned char           ADCHS0L             __at(0xE86);
#ifndef _LIB_BUILD
asm("ADCHS0L equ 0E86h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CH0SA                  :5;
        unsigned CH0NA                  :3;
    };
    struct {
        unsigned CH0SA0                 :1;
        unsigned CH0SA1                 :1;
        unsigned CH0SA2                 :1;
        unsigned CH0SA3                 :1;
        unsigned CH0SA4                 :1;
        unsigned CH0NA0                 :1;
        unsigned CH0NA1                 :1;
        unsigned CH0NA2                 :1;
    };
} ADCHS0Lbits_t;
extern volatile ADCHS0Lbits_t ADCHS0Lbits __at(0xE86);
// bitfield macros
#define _ADCHS0L_CH0SA_POSN                                 0x0
#define _ADCHS0L_CH0SA_POSITION                             0x0
#define _ADCHS0L_CH0SA_SIZE                                 0x5
#define _ADCHS0L_CH0SA_LENGTH                               0x5
#define _ADCHS0L_CH0SA_MASK                                 0x1F
#define _ADCHS0L_CH0NA_POSN                                 0x5
#define _ADCHS0L_CH0NA_POSITION                             0x5
#define _ADCHS0L_CH0NA_SIZE                                 0x3
#define _ADCHS0L_CH0NA_LENGTH                               0x3
#define _ADCHS0L_CH0NA_MASK                                 0xE0
#define _ADCHS0L_CH0SA0_POSN                                0x0
#define _ADCHS0L_CH0SA0_POSITION                            0x0
#define _ADCHS0L_CH0SA0_SIZE                                0x1
#define _ADCHS0L_CH0SA0_LENGTH                              0x1
#define _ADCHS0L_CH0SA0_MASK                                0x1
#define _ADCHS0L_CH0SA1_POSN                                0x1
#define _ADCHS0L_CH0SA1_POSITION                            0x1
#define _ADCHS0L_CH0SA1_SIZE                                0x1
#define _ADCHS0L_CH0SA1_LENGTH                              0x1
#define _ADCHS0L_CH0SA1_MASK                                0x2
#define _ADCHS0L_CH0SA2_POSN                                0x2
#define _ADCHS0L_CH0SA2_POSITION                            0x2
#define _ADCHS0L_CH0SA2_SIZE                                0x1
#define _ADCHS0L_CH0SA2_LENGTH                              0x1
#define _ADCHS0L_CH0SA2_MASK                                0x4
#define _ADCHS0L_CH0SA3_POSN                                0x3
#define _ADCHS0L_CH0SA3_POSITION                            0x3
#define _ADCHS0L_CH0SA3_SIZE                                0x1
#define _ADCHS0L_CH0SA3_LENGTH                              0x1
#define _ADCHS0L_CH0SA3_MASK                                0x8
#define _ADCHS0L_CH0SA4_POSN                                0x4
#define _ADCHS0L_CH0SA4_POSITION                            0x4
#define _ADCHS0L_CH0SA4_SIZE                                0x1
#define _ADCHS0L_CH0SA4_LENGTH                              0x1
#define _ADCHS0L_CH0SA4_MASK                                0x10
#define _ADCHS0L_CH0NA0_POSN                                0x5
#define _ADCHS0L_CH0NA0_POSITION                            0x5
#define _ADCHS0L_CH0NA0_SIZE                                0x1
#define _ADCHS0L_CH0NA0_LENGTH                              0x1
#define _ADCHS0L_CH0NA0_MASK                                0x20
#define _ADCHS0L_CH0NA1_POSN                                0x6
#define _ADCHS0L_CH0NA1_POSITION                            0x6
#define _ADCHS0L_CH0NA1_SIZE                                0x1
#define _ADCHS0L_CH0NA1_LENGTH                              0x1
#define _ADCHS0L_CH0NA1_MASK                                0x40
#define _ADCHS0L_CH0NA2_POSN                                0x7
#define _ADCHS0L_CH0NA2_POSITION                            0x7
#define _ADCHS0L_CH0NA2_SIZE                                0x1
#define _ADCHS0L_CH0NA2_LENGTH                              0x1
#define _ADCHS0L_CH0NA2_MASK                                0x80

// Register: ADCHS0H
#define ADCHS0H ADCHS0H
extern volatile unsigned char           ADCHS0H             __at(0xE87);
#ifndef _LIB_BUILD
asm("ADCHS0H equ 0E87h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CH0SB                  :5;
        unsigned CH0NB                  :3;
    };
    struct {
        unsigned CH0SB0                 :1;
        unsigned CH0SB1                 :1;
        unsigned CH0SB2                 :1;
        unsigned CH0SB3                 :1;
        unsigned CH0SB4                 :1;
        unsigned CH0NB0                 :1;
        unsigned CH0NB1                 :1;
        unsigned CH0NB2                 :1;
    };
} ADCHS0Hbits_t;
extern volatile ADCHS0Hbits_t ADCHS0Hbits __at(0xE87);
// bitfield macros
#define _ADCHS0H_CH0SB_POSN                                 0x0
#define _ADCHS0H_CH0SB_POSITION                             0x0
#define _ADCHS0H_CH0SB_SIZE                                 0x5
#define _ADCHS0H_CH0SB_LENGTH                               0x5
#define _ADCHS0H_CH0SB_MASK                                 0x1F
#define _ADCHS0H_CH0NB_POSN                                 0x5
#define _ADCHS0H_CH0NB_POSITION                             0x5
#define _ADCHS0H_CH0NB_SIZE                                 0x3
#define _ADCHS0H_CH0NB_LENGTH                               0x3
#define _ADCHS0H_CH0NB_MASK                                 0xE0
#define _ADCHS0H_CH0SB0_POSN                                0x0
#define _ADCHS0H_CH0SB0_POSITION                            0x0
#define _ADCHS0H_CH0SB0_SIZE                                0x1
#define _ADCHS0H_CH0SB0_LENGTH                              0x1
#define _ADCHS0H_CH0SB0_MASK                                0x1
#define _ADCHS0H_CH0SB1_POSN                                0x1
#define _ADCHS0H_CH0SB1_POSITION                            0x1
#define _ADCHS0H_CH0SB1_SIZE                                0x1
#define _ADCHS0H_CH0SB1_LENGTH                              0x1
#define _ADCHS0H_CH0SB1_MASK                                0x2
#define _ADCHS0H_CH0SB2_POSN                                0x2
#define _ADCHS0H_CH0SB2_POSITION                            0x2
#define _ADCHS0H_CH0SB2_SIZE                                0x1
#define _ADCHS0H_CH0SB2_LENGTH                              0x1
#define _ADCHS0H_CH0SB2_MASK                                0x4
#define _ADCHS0H_CH0SB3_POSN                                0x3
#define _ADCHS0H_CH0SB3_POSITION                            0x3
#define _ADCHS0H_CH0SB3_SIZE                                0x1
#define _ADCHS0H_CH0SB3_LENGTH                              0x1
#define _ADCHS0H_CH0SB3_MASK                                0x8
#define _ADCHS0H_CH0SB4_POSN                                0x4
#define _ADCHS0H_CH0SB4_POSITION                            0x4
#define _ADCHS0H_CH0SB4_SIZE                                0x1
#define _ADCHS0H_CH0SB4_LENGTH                              0x1
#define _ADCHS0H_CH0SB4_MASK                                0x10
#define _ADCHS0H_CH0NB0_POSN                                0x5
#define _ADCHS0H_CH0NB0_POSITION                            0x5
#define _ADCHS0H_CH0NB0_SIZE                                0x1
#define _ADCHS0H_CH0NB0_LENGTH                              0x1
#define _ADCHS0H_CH0NB0_MASK                                0x20
#define _ADCHS0H_CH0NB1_POSN                                0x6
#define _ADCHS0H_CH0NB1_POSITION                            0x6
#define _ADCHS0H_CH0NB1_SIZE                                0x1
#define _ADCHS0H_CH0NB1_LENGTH                              0x1
#define _ADCHS0H_CH0NB1_MASK                                0x40
#define _ADCHS0H_CH0NB2_POSN                                0x7
#define _ADCHS0H_CH0NB2_POSITION                            0x7
#define _ADCHS0H_CH0NB2_SIZE                                0x1
#define _ADCHS0H_CH0NB2_LENGTH                              0x1
#define _ADCHS0H_CH0NB2_MASK                                0x80

// Register: ADCON5L
#define ADCON5L ADCON5L
extern volatile unsigned char           ADCON5L             __at(0xE88);
#ifndef _LIB_BUILD
asm("ADCON5L equ 0E88h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CM                     :2;
        unsigned WM                     :2;
    };
    struct {
        unsigned CM0                    :1;
        unsigned CM1                    :1;
        unsigned WM0                    :1;
        unsigned WM1                    :1;
    };
} ADCON5Lbits_t;
extern volatile ADCON5Lbits_t ADCON5Lbits __at(0xE88);
// bitfield macros
#define _ADCON5L_CM_POSN                                    0x0
#define _ADCON5L_CM_POSITION                                0x0
#define _ADCON5L_CM_SIZE                                    0x2
#define _ADCON5L_CM_LENGTH                                  0x2
#define _ADCON5L_CM_MASK                                    0x3
#define _ADCON5L_WM_POSN                                    0x2
#define _ADCON5L_WM_POSITION                                0x2
#define _ADCON5L_WM_SIZE                                    0x2
#define _ADCON5L_WM_LENGTH                                  0x2
#define _ADCON5L_WM_MASK                                    0xC
#define _ADCON5L_CM0_POSN                                   0x0
#define _ADCON5L_CM0_POSITION                               0x0
#define _ADCON5L_CM0_SIZE                                   0x1
#define _ADCON5L_CM0_LENGTH                                 0x1
#define _ADCON5L_CM0_MASK                                   0x1
#define _ADCON5L_CM1_POSN                                   0x1
#define _ADCON5L_CM1_POSITION                               0x1
#define _ADCON5L_CM1_SIZE                                   0x1
#define _ADCON5L_CM1_LENGTH                                 0x1
#define _ADCON5L_CM1_MASK                                   0x2
#define _ADCON5L_WM0_POSN                                   0x2
#define _ADCON5L_WM0_POSITION                               0x2
#define _ADCON5L_WM0_SIZE                                   0x1
#define _ADCON5L_WM0_LENGTH                                 0x1
#define _ADCON5L_WM0_MASK                                   0x4
#define _ADCON5L_WM1_POSN                                   0x3
#define _ADCON5L_WM1_POSITION                               0x3
#define _ADCON5L_WM1_SIZE                                   0x1
#define _ADCON5L_WM1_LENGTH                                 0x1
#define _ADCON5L_WM1_MASK                                   0x8

// Register: ADCON5H
#define ADCON5H ADCON5H
extern volatile unsigned char           ADCON5H             __at(0xE89);
#ifndef _LIB_BUILD
asm("ADCON5H equ 0E89h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ASINTMD                :2;
        unsigned                        :3;
        unsigned CTMUREQ                :1;
        unsigned LPENA                  :1;
        unsigned ASENA                  :1;
    };
    struct {
        unsigned ASINTMD0               :1;
        unsigned ASINTMD1               :1;
    };
} ADCON5Hbits_t;
extern volatile ADCON5Hbits_t ADCON5Hbits __at(0xE89);
// bitfield macros
#define _ADCON5H_ASINTMD_POSN                               0x0
#define _ADCON5H_ASINTMD_POSITION                           0x0
#define _ADCON5H_ASINTMD_SIZE                               0x2
#define _ADCON5H_ASINTMD_LENGTH                             0x2
#define _ADCON5H_ASINTMD_MASK                               0x3
#define _ADCON5H_CTMUREQ_POSN                               0x5
#define _ADCON5H_CTMUREQ_POSITION                           0x5
#define _ADCON5H_CTMUREQ_SIZE                               0x1
#define _ADCON5H_CTMUREQ_LENGTH                             0x1
#define _ADCON5H_CTMUREQ_MASK                               0x20
#define _ADCON5H_LPENA_POSN                                 0x6
#define _ADCON5H_LPENA_POSITION                             0x6
#define _ADCON5H_LPENA_SIZE                                 0x1
#define _ADCON5H_LPENA_LENGTH                               0x1
#define _ADCON5H_LPENA_MASK                                 0x40
#define _ADCON5H_ASENA_POSN                                 0x7
#define _ADCON5H_ASENA_POSITION                             0x7
#define _ADCON5H_ASENA_SIZE                                 0x1
#define _ADCON5H_ASENA_LENGTH                               0x1
#define _ADCON5H_ASENA_MASK                                 0x80
#define _ADCON5H_ASINTMD0_POSN                              0x0
#define _ADCON5H_ASINTMD0_POSITION                          0x0
#define _ADCON5H_ASINTMD0_SIZE                              0x1
#define _ADCON5H_ASINTMD0_LENGTH                            0x1
#define _ADCON5H_ASINTMD0_MASK                              0x1
#define _ADCON5H_ASINTMD1_POSN                              0x1
#define _ADCON5H_ASINTMD1_POSITION                          0x1
#define _ADCON5H_ASINTMD1_SIZE                              0x1
#define _ADCON5H_ASINTMD1_LENGTH                            0x1
#define _ADCON5H_ASINTMD1_MASK                              0x2

// Register: ADCON3L
#define ADCON3L ADCON3L
extern volatile unsigned char           ADCON3L             __at(0xE8A);
#ifndef _LIB_BUILD
asm("ADCON3L equ 0E8Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCS                   :8;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
        unsigned ADCS6                  :1;
        unsigned ADCS7                  :1;
    };
} ADCON3Lbits_t;
extern volatile ADCON3Lbits_t ADCON3Lbits __at(0xE8A);
// bitfield macros
#define _ADCON3L_ADCS_POSN                                  0x0
#define _ADCON3L_ADCS_POSITION                              0x0
#define _ADCON3L_ADCS_SIZE                                  0x8
#define _ADCON3L_ADCS_LENGTH                                0x8
#define _ADCON3L_ADCS_MASK                                  0xFF
#define _ADCON3L_ADCS0_POSN                                 0x0
#define _ADCON3L_ADCS0_POSITION                             0x0
#define _ADCON3L_ADCS0_SIZE                                 0x1
#define _ADCON3L_ADCS0_LENGTH                               0x1
#define _ADCON3L_ADCS0_MASK                                 0x1
#define _ADCON3L_ADCS1_POSN                                 0x1
#define _ADCON3L_ADCS1_POSITION                             0x1
#define _ADCON3L_ADCS1_SIZE                                 0x1
#define _ADCON3L_ADCS1_LENGTH                               0x1
#define _ADCON3L_ADCS1_MASK                                 0x2
#define _ADCON3L_ADCS2_POSN                                 0x2
#define _ADCON3L_ADCS2_POSITION                             0x2
#define _ADCON3L_ADCS2_SIZE                                 0x1
#define _ADCON3L_ADCS2_LENGTH                               0x1
#define _ADCON3L_ADCS2_MASK                                 0x4
#define _ADCON3L_ADCS3_POSN                                 0x3
#define _ADCON3L_ADCS3_POSITION                             0x3
#define _ADCON3L_ADCS3_SIZE                                 0x1
#define _ADCON3L_ADCS3_LENGTH                               0x1
#define _ADCON3L_ADCS3_MASK                                 0x8
#define _ADCON3L_ADCS4_POSN                                 0x4
#define _ADCON3L_ADCS4_POSITION                             0x4
#define _ADCON3L_ADCS4_SIZE                                 0x1
#define _ADCON3L_ADCS4_LENGTH                               0x1
#define _ADCON3L_ADCS4_MASK                                 0x10
#define _ADCON3L_ADCS5_POSN                                 0x5
#define _ADCON3L_ADCS5_POSITION                             0x5
#define _ADCON3L_ADCS5_SIZE                                 0x1
#define _ADCON3L_ADCS5_LENGTH                               0x1
#define _ADCON3L_ADCS5_MASK                                 0x20
#define _ADCON3L_ADCS6_POSN                                 0x6
#define _ADCON3L_ADCS6_POSITION                             0x6
#define _ADCON3L_ADCS6_SIZE                                 0x1
#define _ADCON3L_ADCS6_LENGTH                               0x1
#define _ADCON3L_ADCS6_MASK                                 0x40
#define _ADCON3L_ADCS7_POSN                                 0x7
#define _ADCON3L_ADCS7_POSITION                             0x7
#define _ADCON3L_ADCS7_SIZE                                 0x1
#define _ADCON3L_ADCS7_LENGTH                               0x1
#define _ADCON3L_ADCS7_MASK                                 0x80

// Register: ADCON3H
#define ADCON3H ADCON3H
extern volatile unsigned char           ADCON3H             __at(0xE8B);
#ifndef _LIB_BUILD
asm("ADCON3H equ 0E8Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SAMC                   :5;
        unsigned PUMPEN                 :1;
        unsigned EXTSAM                 :1;
        unsigned ADRC                   :1;
    };
    struct {
        unsigned SAMC0                  :1;
        unsigned SAMC1                  :1;
        unsigned SAMC2                  :1;
        unsigned SAMC3                  :1;
        unsigned SAMC4                  :1;
    };
} ADCON3Hbits_t;
extern volatile ADCON3Hbits_t ADCON3Hbits __at(0xE8B);
// bitfield macros
#define _ADCON3H_SAMC_POSN                                  0x0
#define _ADCON3H_SAMC_POSITION                              0x0
#define _ADCON3H_SAMC_SIZE                                  0x5
#define _ADCON3H_SAMC_LENGTH                                0x5
#define _ADCON3H_SAMC_MASK                                  0x1F
#define _ADCON3H_PUMPEN_POSN                                0x5
#define _ADCON3H_PUMPEN_POSITION                            0x5
#define _ADCON3H_PUMPEN_SIZE                                0x1
#define _ADCON3H_PUMPEN_LENGTH                              0x1
#define _ADCON3H_PUMPEN_MASK                                0x20
#define _ADCON3H_EXTSAM_POSN                                0x6
#define _ADCON3H_EXTSAM_POSITION                            0x6
#define _ADCON3H_EXTSAM_SIZE                                0x1
#define _ADCON3H_EXTSAM_LENGTH                              0x1
#define _ADCON3H_EXTSAM_MASK                                0x40
#define _ADCON3H_ADRC_POSN                                  0x7
#define _ADCON3H_ADRC_POSITION                              0x7
#define _ADCON3H_ADRC_SIZE                                  0x1
#define _ADCON3H_ADRC_LENGTH                                0x1
#define _ADCON3H_ADRC_MASK                                  0x80
#define _ADCON3H_SAMC0_POSN                                 0x0
#define _ADCON3H_SAMC0_POSITION                             0x0
#define _ADCON3H_SAMC0_SIZE                                 0x1
#define _ADCON3H_SAMC0_LENGTH                               0x1
#define _ADCON3H_SAMC0_MASK                                 0x1
#define _ADCON3H_SAMC1_POSN                                 0x1
#define _ADCON3H_SAMC1_POSITION                             0x1
#define _ADCON3H_SAMC1_SIZE                                 0x1
#define _ADCON3H_SAMC1_LENGTH                               0x1
#define _ADCON3H_SAMC1_MASK                                 0x2
#define _ADCON3H_SAMC2_POSN                                 0x2
#define _ADCON3H_SAMC2_POSITION                             0x2
#define _ADCON3H_SAMC2_SIZE                                 0x1
#define _ADCON3H_SAMC2_LENGTH                               0x1
#define _ADCON3H_SAMC2_MASK                                 0x4
#define _ADCON3H_SAMC3_POSN                                 0x3
#define _ADCON3H_SAMC3_POSITION                             0x3
#define _ADCON3H_SAMC3_SIZE                                 0x1
#define _ADCON3H_SAMC3_LENGTH                               0x1
#define _ADCON3H_SAMC3_MASK                                 0x8
#define _ADCON3H_SAMC4_POSN                                 0x4
#define _ADCON3H_SAMC4_POSITION                             0x4
#define _ADCON3H_SAMC4_SIZE                                 0x1
#define _ADCON3H_SAMC4_LENGTH                               0x1
#define _ADCON3H_SAMC4_MASK                                 0x10

// Register: ADCON2L
#define ADCON2L ADCON2L
extern volatile unsigned char           ADCON2L             __at(0xE8C);
#ifndef _LIB_BUILD
asm("ADCON2L equ 0E8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALTS                   :1;
        unsigned BUFM                   :1;
        unsigned SMPI                   :5;
        unsigned BUFS                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned SMPI0                  :1;
        unsigned SMPI1                  :1;
        unsigned SMPI2                  :1;
        unsigned SMPI3                  :1;
        unsigned SMPI4                  :1;
    };
} ADCON2Lbits_t;
extern volatile ADCON2Lbits_t ADCON2Lbits __at(0xE8C);
// bitfield macros
#define _ADCON2L_ALTS_POSN                                  0x0
#define _ADCON2L_ALTS_POSITION                              0x0
#define _ADCON2L_ALTS_SIZE                                  0x1
#define _ADCON2L_ALTS_LENGTH                                0x1
#define _ADCON2L_ALTS_MASK                                  0x1
#define _ADCON2L_BUFM_POSN                                  0x1
#define _ADCON2L_BUFM_POSITION                              0x1
#define _ADCON2L_BUFM_SIZE                                  0x1
#define _ADCON2L_BUFM_LENGTH                                0x1
#define _ADCON2L_BUFM_MASK                                  0x2
#define _ADCON2L_SMPI_POSN                                  0x2
#define _ADCON2L_SMPI_POSITION                              0x2
#define _ADCON2L_SMPI_SIZE                                  0x5
#define _ADCON2L_SMPI_LENGTH                                0x5
#define _ADCON2L_SMPI_MASK                                  0x7C
#define _ADCON2L_BUFS_POSN                                  0x7
#define _ADCON2L_BUFS_POSITION                              0x7
#define _ADCON2L_BUFS_SIZE                                  0x1
#define _ADCON2L_BUFS_LENGTH                                0x1
#define _ADCON2L_BUFS_MASK                                  0x80
#define _ADCON2L_SMPI0_POSN                                 0x2
#define _ADCON2L_SMPI0_POSITION                             0x2
#define _ADCON2L_SMPI0_SIZE                                 0x1
#define _ADCON2L_SMPI0_LENGTH                               0x1
#define _ADCON2L_SMPI0_MASK                                 0x4
#define _ADCON2L_SMPI1_POSN                                 0x3
#define _ADCON2L_SMPI1_POSITION                             0x3
#define _ADCON2L_SMPI1_SIZE                                 0x1
#define _ADCON2L_SMPI1_LENGTH                               0x1
#define _ADCON2L_SMPI1_MASK                                 0x8
#define _ADCON2L_SMPI2_POSN                                 0x4
#define _ADCON2L_SMPI2_POSITION                             0x4
#define _ADCON2L_SMPI2_SIZE                                 0x1
#define _ADCON2L_SMPI2_LENGTH                               0x1
#define _ADCON2L_SMPI2_MASK                                 0x10
#define _ADCON2L_SMPI3_POSN                                 0x5
#define _ADCON2L_SMPI3_POSITION                             0x5
#define _ADCON2L_SMPI3_SIZE                                 0x1
#define _ADCON2L_SMPI3_LENGTH                               0x1
#define _ADCON2L_SMPI3_MASK                                 0x20
#define _ADCON2L_SMPI4_POSN                                 0x6
#define _ADCON2L_SMPI4_POSITION                             0x6
#define _ADCON2L_SMPI4_SIZE                                 0x1
#define _ADCON2L_SMPI4_LENGTH                               0x1
#define _ADCON2L_SMPI4_MASK                                 0x40

// Register: ADCON2H
#define ADCON2H ADCON2H
extern volatile unsigned char           ADCON2H             __at(0xE8D);
#ifndef _LIB_BUILD
asm("ADCON2H equ 0E8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned CSCNA                  :1;
        unsigned BUFREGEN               :1;
        unsigned OFFCAL                 :1;
        unsigned NVCFG0                 :1;
        unsigned PVCFG                  :2;
    };
    struct {
        unsigned                        :6;
        unsigned PVCFG0                 :1;
        unsigned PVCFG1                 :1;
    };
} ADCON2Hbits_t;
extern volatile ADCON2Hbits_t ADCON2Hbits __at(0xE8D);
// bitfield macros
#define _ADCON2H_CSCNA_POSN                                 0x2
#define _ADCON2H_CSCNA_POSITION                             0x2
#define _ADCON2H_CSCNA_SIZE                                 0x1
#define _ADCON2H_CSCNA_LENGTH                               0x1
#define _ADCON2H_CSCNA_MASK                                 0x4
#define _ADCON2H_BUFREGEN_POSN                              0x3
#define _ADCON2H_BUFREGEN_POSITION                          0x3
#define _ADCON2H_BUFREGEN_SIZE                              0x1
#define _ADCON2H_BUFREGEN_LENGTH                            0x1
#define _ADCON2H_BUFREGEN_MASK                              0x8
#define _ADCON2H_OFFCAL_POSN                                0x4
#define _ADCON2H_OFFCAL_POSITION                            0x4
#define _ADCON2H_OFFCAL_SIZE                                0x1
#define _ADCON2H_OFFCAL_LENGTH                              0x1
#define _ADCON2H_OFFCAL_MASK                                0x10
#define _ADCON2H_NVCFG0_POSN                                0x5
#define _ADCON2H_NVCFG0_POSITION                            0x5
#define _ADCON2H_NVCFG0_SIZE                                0x1
#define _ADCON2H_NVCFG0_LENGTH                              0x1
#define _ADCON2H_NVCFG0_MASK                                0x20
#define _ADCON2H_PVCFG_POSN                                 0x6
#define _ADCON2H_PVCFG_POSITION                             0x6
#define _ADCON2H_PVCFG_SIZE                                 0x2
#define _ADCON2H_PVCFG_LENGTH                               0x2
#define _ADCON2H_PVCFG_MASK                                 0xC0
#define _ADCON2H_PVCFG0_POSN                                0x6
#define _ADCON2H_PVCFG0_POSITION                            0x6
#define _ADCON2H_PVCFG0_SIZE                                0x1
#define _ADCON2H_PVCFG0_LENGTH                              0x1
#define _ADCON2H_PVCFG0_MASK                                0x40
#define _ADCON2H_PVCFG1_POSN                                0x7
#define _ADCON2H_PVCFG1_POSITION                            0x7
#define _ADCON2H_PVCFG1_SIZE                                0x1
#define _ADCON2H_PVCFG1_LENGTH                              0x1
#define _ADCON2H_PVCFG1_MASK                                0x80

// Register: LCDDATA0
#define LCDDATA0 LCDDATA0
extern volatile unsigned char           LCDDATA0            __at(0xE8E);
#ifndef _LIB_BUILD
asm("LCDDATA0 equ 0E8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C0                  :1;
        unsigned S01C0                  :1;
        unsigned S02C0                  :1;
        unsigned S03C0                  :1;
        unsigned S04C0                  :1;
        unsigned S05C0                  :1;
        unsigned S06C0                  :1;
        unsigned S07C0                  :1;
    };
} LCDDATA0bits_t;
extern volatile LCDDATA0bits_t LCDDATA0bits __at(0xE8E);
// bitfield macros
#define _LCDDATA0_S00C0_POSN                                0x0
#define _LCDDATA0_S00C0_POSITION                            0x0
#define _LCDDATA0_S00C0_SIZE                                0x1
#define _LCDDATA0_S00C0_LENGTH                              0x1
#define _LCDDATA0_S00C0_MASK                                0x1
#define _LCDDATA0_S01C0_POSN                                0x1
#define _LCDDATA0_S01C0_POSITION                            0x1
#define _LCDDATA0_S01C0_SIZE                                0x1
#define _LCDDATA0_S01C0_LENGTH                              0x1
#define _LCDDATA0_S01C0_MASK                                0x2
#define _LCDDATA0_S02C0_POSN                                0x2
#define _LCDDATA0_S02C0_POSITION                            0x2
#define _LCDDATA0_S02C0_SIZE                                0x1
#define _LCDDATA0_S02C0_LENGTH                              0x1
#define _LCDDATA0_S02C0_MASK                                0x4
#define _LCDDATA0_S03C0_POSN                                0x3
#define _LCDDATA0_S03C0_POSITION                            0x3
#define _LCDDATA0_S03C0_SIZE                                0x1
#define _LCDDATA0_S03C0_LENGTH                              0x1
#define _LCDDATA0_S03C0_MASK                                0x8
#define _LCDDATA0_S04C0_POSN                                0x4
#define _LCDDATA0_S04C0_POSITION                            0x4
#define _LCDDATA0_S04C0_SIZE                                0x1
#define _LCDDATA0_S04C0_LENGTH                              0x1
#define _LCDDATA0_S04C0_MASK                                0x10
#define _LCDDATA0_S05C0_POSN                                0x5
#define _LCDDATA0_S05C0_POSITION                            0x5
#define _LCDDATA0_S05C0_SIZE                                0x1
#define _LCDDATA0_S05C0_LENGTH                              0x1
#define _LCDDATA0_S05C0_MASK                                0x20
#define _LCDDATA0_S06C0_POSN                                0x6
#define _LCDDATA0_S06C0_POSITION                            0x6
#define _LCDDATA0_S06C0_SIZE                                0x1
#define _LCDDATA0_S06C0_LENGTH                              0x1
#define _LCDDATA0_S06C0_MASK                                0x40
#define _LCDDATA0_S07C0_POSN                                0x7
#define _LCDDATA0_S07C0_POSITION                            0x7
#define _LCDDATA0_S07C0_SIZE                                0x1
#define _LCDDATA0_S07C0_LENGTH                              0x1
#define _LCDDATA0_S07C0_MASK                                0x80

// Register: LCDDATA1
#define LCDDATA1 LCDDATA1
extern volatile unsigned char           LCDDATA1            __at(0xE8F);
#ifndef _LIB_BUILD
asm("LCDDATA1 equ 0E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C0                  :1;
        unsigned S09C0                  :1;
        unsigned S10C0                  :1;
        unsigned S11C0                  :1;
        unsigned S12C0                  :1;
        unsigned S13C0                  :1;
        unsigned S14C0                  :1;
        unsigned S15C0                  :1;
    };
} LCDDATA1bits_t;
extern volatile LCDDATA1bits_t LCDDATA1bits __at(0xE8F);
// bitfield macros
#define _LCDDATA1_S08C0_POSN                                0x0
#define _LCDDATA1_S08C0_POSITION                            0x0
#define _LCDDATA1_S08C0_SIZE                                0x1
#define _LCDDATA1_S08C0_LENGTH                              0x1
#define _LCDDATA1_S08C0_MASK                                0x1
#define _LCDDATA1_S09C0_POSN                                0x1
#define _LCDDATA1_S09C0_POSITION                            0x1
#define _LCDDATA1_S09C0_SIZE                                0x1
#define _LCDDATA1_S09C0_LENGTH                              0x1
#define _LCDDATA1_S09C0_MASK                                0x2
#define _LCDDATA1_S10C0_POSN                                0x2
#define _LCDDATA1_S10C0_POSITION                            0x2
#define _LCDDATA1_S10C0_SIZE                                0x1
#define _LCDDATA1_S10C0_LENGTH                              0x1
#define _LCDDATA1_S10C0_MASK                                0x4
#define _LCDDATA1_S11C0_POSN                                0x3
#define _LCDDATA1_S11C0_POSITION                            0x3
#define _LCDDATA1_S11C0_SIZE                                0x1
#define _LCDDATA1_S11C0_LENGTH                              0x1
#define _LCDDATA1_S11C0_MASK                                0x8
#define _LCDDATA1_S12C0_POSN                                0x4
#define _LCDDATA1_S12C0_POSITION                            0x4
#define _LCDDATA1_S12C0_SIZE                                0x1
#define _LCDDATA1_S12C0_LENGTH                              0x1
#define _LCDDATA1_S12C0_MASK                                0x10
#define _LCDDATA1_S13C0_POSN                                0x5
#define _LCDDATA1_S13C0_POSITION                            0x5
#define _LCDDATA1_S13C0_SIZE                                0x1
#define _LCDDATA1_S13C0_LENGTH                              0x1
#define _LCDDATA1_S13C0_MASK                                0x20
#define _LCDDATA1_S14C0_POSN                                0x6
#define _LCDDATA1_S14C0_POSITION                            0x6
#define _LCDDATA1_S14C0_SIZE                                0x1
#define _LCDDATA1_S14C0_LENGTH                              0x1
#define _LCDDATA1_S14C0_MASK                                0x40
#define _LCDDATA1_S15C0_POSN                                0x7
#define _LCDDATA1_S15C0_POSITION                            0x7
#define _LCDDATA1_S15C0_SIZE                                0x1
#define _LCDDATA1_S15C0_LENGTH                              0x1
#define _LCDDATA1_S15C0_MASK                                0x80

// Register: LCDDATA2
#define LCDDATA2 LCDDATA2
extern volatile unsigned char           LCDDATA2            __at(0xE90);
#ifndef _LIB_BUILD
asm("LCDDATA2 equ 0E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C0                  :1;
        unsigned S17C0                  :1;
        unsigned S18C0                  :1;
        unsigned S19C0                  :1;
        unsigned S20C0                  :1;
        unsigned S21C0                  :1;
        unsigned S22C0                  :1;
        unsigned S23C0                  :1;
    };
} LCDDATA2bits_t;
extern volatile LCDDATA2bits_t LCDDATA2bits __at(0xE90);
// bitfield macros
#define _LCDDATA2_S16C0_POSN                                0x0
#define _LCDDATA2_S16C0_POSITION                            0x0
#define _LCDDATA2_S16C0_SIZE                                0x1
#define _LCDDATA2_S16C0_LENGTH                              0x1
#define _LCDDATA2_S16C0_MASK                                0x1
#define _LCDDATA2_S17C0_POSN                                0x1
#define _LCDDATA2_S17C0_POSITION                            0x1
#define _LCDDATA2_S17C0_SIZE                                0x1
#define _LCDDATA2_S17C0_LENGTH                              0x1
#define _LCDDATA2_S17C0_MASK                                0x2
#define _LCDDATA2_S18C0_POSN                                0x2
#define _LCDDATA2_S18C0_POSITION                            0x2
#define _LCDDATA2_S18C0_SIZE                                0x1
#define _LCDDATA2_S18C0_LENGTH                              0x1
#define _LCDDATA2_S18C0_MASK                                0x4
#define _LCDDATA2_S19C0_POSN                                0x3
#define _LCDDATA2_S19C0_POSITION                            0x3
#define _LCDDATA2_S19C0_SIZE                                0x1
#define _LCDDATA2_S19C0_LENGTH                              0x1
#define _LCDDATA2_S19C0_MASK                                0x8
#define _LCDDATA2_S20C0_POSN                                0x4
#define _LCDDATA2_S20C0_POSITION                            0x4
#define _LCDDATA2_S20C0_SIZE                                0x1
#define _LCDDATA2_S20C0_LENGTH                              0x1
#define _LCDDATA2_S20C0_MASK                                0x10
#define _LCDDATA2_S21C0_POSN                                0x5
#define _LCDDATA2_S21C0_POSITION                            0x5
#define _LCDDATA2_S21C0_SIZE                                0x1
#define _LCDDATA2_S21C0_LENGTH                              0x1
#define _LCDDATA2_S21C0_MASK                                0x20
#define _LCDDATA2_S22C0_POSN                                0x6
#define _LCDDATA2_S22C0_POSITION                            0x6
#define _LCDDATA2_S22C0_SIZE                                0x1
#define _LCDDATA2_S22C0_LENGTH                              0x1
#define _LCDDATA2_S22C0_MASK                                0x40
#define _LCDDATA2_S23C0_POSN                                0x7
#define _LCDDATA2_S23C0_POSITION                            0x7
#define _LCDDATA2_S23C0_SIZE                                0x1
#define _LCDDATA2_S23C0_LENGTH                              0x1
#define _LCDDATA2_S23C0_MASK                                0x80

// Register: LCDDATA3
#define LCDDATA3 LCDDATA3
extern volatile unsigned char           LCDDATA3            __at(0xE91);
#ifndef _LIB_BUILD
asm("LCDDATA3 equ 0E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C0                  :1;
        unsigned S25C0                  :1;
        unsigned S26C0                  :1;
        unsigned S27C0                  :1;
        unsigned S28C0                  :1;
        unsigned S29C0                  :1;
        unsigned S30C0                  :1;
        unsigned S31C0                  :1;
    };
} LCDDATA3bits_t;
extern volatile LCDDATA3bits_t LCDDATA3bits __at(0xE91);
// bitfield macros
#define _LCDDATA3_S24C0_POSN                                0x0
#define _LCDDATA3_S24C0_POSITION                            0x0
#define _LCDDATA3_S24C0_SIZE                                0x1
#define _LCDDATA3_S24C0_LENGTH                              0x1
#define _LCDDATA3_S24C0_MASK                                0x1
#define _LCDDATA3_S25C0_POSN                                0x1
#define _LCDDATA3_S25C0_POSITION                            0x1
#define _LCDDATA3_S25C0_SIZE                                0x1
#define _LCDDATA3_S25C0_LENGTH                              0x1
#define _LCDDATA3_S25C0_MASK                                0x2
#define _LCDDATA3_S26C0_POSN                                0x2
#define _LCDDATA3_S26C0_POSITION                            0x2
#define _LCDDATA3_S26C0_SIZE                                0x1
#define _LCDDATA3_S26C0_LENGTH                              0x1
#define _LCDDATA3_S26C0_MASK                                0x4
#define _LCDDATA3_S27C0_POSN                                0x3
#define _LCDDATA3_S27C0_POSITION                            0x3
#define _LCDDATA3_S27C0_SIZE                                0x1
#define _LCDDATA3_S27C0_LENGTH                              0x1
#define _LCDDATA3_S27C0_MASK                                0x8
#define _LCDDATA3_S28C0_POSN                                0x4
#define _LCDDATA3_S28C0_POSITION                            0x4
#define _LCDDATA3_S28C0_SIZE                                0x1
#define _LCDDATA3_S28C0_LENGTH                              0x1
#define _LCDDATA3_S28C0_MASK                                0x10
#define _LCDDATA3_S29C0_POSN                                0x5
#define _LCDDATA3_S29C0_POSITION                            0x5
#define _LCDDATA3_S29C0_SIZE                                0x1
#define _LCDDATA3_S29C0_LENGTH                              0x1
#define _LCDDATA3_S29C0_MASK                                0x20
#define _LCDDATA3_S30C0_POSN                                0x6
#define _LCDDATA3_S30C0_POSITION                            0x6
#define _LCDDATA3_S30C0_SIZE                                0x1
#define _LCDDATA3_S30C0_LENGTH                              0x1
#define _LCDDATA3_S30C0_MASK                                0x40
#define _LCDDATA3_S31C0_POSN                                0x7
#define _LCDDATA3_S31C0_POSITION                            0x7
#define _LCDDATA3_S31C0_SIZE                                0x1
#define _LCDDATA3_S31C0_LENGTH                              0x1
#define _LCDDATA3_S31C0_MASK                                0x80

// Register: LCDDATA4
#define LCDDATA4 LCDDATA4
extern volatile unsigned char           LCDDATA4            __at(0xE92);
#ifndef _LIB_BUILD
asm("LCDDATA4 equ 0E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C0                  :1;
        unsigned S33C0                  :1;
        unsigned S34C0                  :1;
        unsigned S35C0                  :1;
        unsigned S36C0                  :1;
        unsigned S37C0                  :1;
        unsigned S38C0                  :1;
        unsigned S39C0                  :1;
    };
} LCDDATA4bits_t;
extern volatile LCDDATA4bits_t LCDDATA4bits __at(0xE92);
// bitfield macros
#define _LCDDATA4_S32C0_POSN                                0x0
#define _LCDDATA4_S32C0_POSITION                            0x0
#define _LCDDATA4_S32C0_SIZE                                0x1
#define _LCDDATA4_S32C0_LENGTH                              0x1
#define _LCDDATA4_S32C0_MASK                                0x1
#define _LCDDATA4_S33C0_POSN                                0x1
#define _LCDDATA4_S33C0_POSITION                            0x1
#define _LCDDATA4_S33C0_SIZE                                0x1
#define _LCDDATA4_S33C0_LENGTH                              0x1
#define _LCDDATA4_S33C0_MASK                                0x2
#define _LCDDATA4_S34C0_POSN                                0x2
#define _LCDDATA4_S34C0_POSITION                            0x2
#define _LCDDATA4_S34C0_SIZE                                0x1
#define _LCDDATA4_S34C0_LENGTH                              0x1
#define _LCDDATA4_S34C0_MASK                                0x4
#define _LCDDATA4_S35C0_POSN                                0x3
#define _LCDDATA4_S35C0_POSITION                            0x3
#define _LCDDATA4_S35C0_SIZE                                0x1
#define _LCDDATA4_S35C0_LENGTH                              0x1
#define _LCDDATA4_S35C0_MASK                                0x8
#define _LCDDATA4_S36C0_POSN                                0x4
#define _LCDDATA4_S36C0_POSITION                            0x4
#define _LCDDATA4_S36C0_SIZE                                0x1
#define _LCDDATA4_S36C0_LENGTH                              0x1
#define _LCDDATA4_S36C0_MASK                                0x10
#define _LCDDATA4_S37C0_POSN                                0x5
#define _LCDDATA4_S37C0_POSITION                            0x5
#define _LCDDATA4_S37C0_SIZE                                0x1
#define _LCDDATA4_S37C0_LENGTH                              0x1
#define _LCDDATA4_S37C0_MASK                                0x20
#define _LCDDATA4_S38C0_POSN                                0x6
#define _LCDDATA4_S38C0_POSITION                            0x6
#define _LCDDATA4_S38C0_SIZE                                0x1
#define _LCDDATA4_S38C0_LENGTH                              0x1
#define _LCDDATA4_S38C0_MASK                                0x40
#define _LCDDATA4_S39C0_POSN                                0x7
#define _LCDDATA4_S39C0_POSITION                            0x7
#define _LCDDATA4_S39C0_SIZE                                0x1
#define _LCDDATA4_S39C0_LENGTH                              0x1
#define _LCDDATA4_S39C0_MASK                                0x80

// Register: LCDDATA5
#define LCDDATA5 LCDDATA5
extern volatile unsigned char           LCDDATA5            __at(0xE93);
#ifndef _LIB_BUILD
asm("LCDDATA5 equ 0E93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C0                  :1;
        unsigned S41C0                  :1;
        unsigned S42C0                  :1;
        unsigned S43C0                  :1;
        unsigned S44C0                  :1;
        unsigned S45C0                  :1;
        unsigned S46C0                  :1;
        unsigned S47C0                  :1;
    };
    struct {
        unsigned S40C15                 :1;
    };
} LCDDATA5bits_t;
extern volatile LCDDATA5bits_t LCDDATA5bits __at(0xE93);
// bitfield macros
#define _LCDDATA5_S40C0_POSN                                0x0
#define _LCDDATA5_S40C0_POSITION                            0x0
#define _LCDDATA5_S40C0_SIZE                                0x1
#define _LCDDATA5_S40C0_LENGTH                              0x1
#define _LCDDATA5_S40C0_MASK                                0x1
#define _LCDDATA5_S41C0_POSN                                0x1
#define _LCDDATA5_S41C0_POSITION                            0x1
#define _LCDDATA5_S41C0_SIZE                                0x1
#define _LCDDATA5_S41C0_LENGTH                              0x1
#define _LCDDATA5_S41C0_MASK                                0x2
#define _LCDDATA5_S42C0_POSN                                0x2
#define _LCDDATA5_S42C0_POSITION                            0x2
#define _LCDDATA5_S42C0_SIZE                                0x1
#define _LCDDATA5_S42C0_LENGTH                              0x1
#define _LCDDATA5_S42C0_MASK                                0x4
#define _LCDDATA5_S43C0_POSN                                0x3
#define _LCDDATA5_S43C0_POSITION                            0x3
#define _LCDDATA5_S43C0_SIZE                                0x1
#define _LCDDATA5_S43C0_LENGTH                              0x1
#define _LCDDATA5_S43C0_MASK                                0x8
#define _LCDDATA5_S44C0_POSN                                0x4
#define _LCDDATA5_S44C0_POSITION                            0x4
#define _LCDDATA5_S44C0_SIZE                                0x1
#define _LCDDATA5_S44C0_LENGTH                              0x1
#define _LCDDATA5_S44C0_MASK                                0x10
#define _LCDDATA5_S45C0_POSN                                0x5
#define _LCDDATA5_S45C0_POSITION                            0x5
#define _LCDDATA5_S45C0_SIZE                                0x1
#define _LCDDATA5_S45C0_LENGTH                              0x1
#define _LCDDATA5_S45C0_MASK                                0x20
#define _LCDDATA5_S46C0_POSN                                0x6
#define _LCDDATA5_S46C0_POSITION                            0x6
#define _LCDDATA5_S46C0_SIZE                                0x1
#define _LCDDATA5_S46C0_LENGTH                              0x1
#define _LCDDATA5_S46C0_MASK                                0x40
#define _LCDDATA5_S47C0_POSN                                0x7
#define _LCDDATA5_S47C0_POSITION                            0x7
#define _LCDDATA5_S47C0_SIZE                                0x1
#define _LCDDATA5_S47C0_LENGTH                              0x1
#define _LCDDATA5_S47C0_MASK                                0x80
#define _LCDDATA5_S40C15_POSN                               0x0
#define _LCDDATA5_S40C15_POSITION                           0x0
#define _LCDDATA5_S40C15_SIZE                               0x1
#define _LCDDATA5_S40C15_LENGTH                             0x1
#define _LCDDATA5_S40C15_MASK                               0x1

// Register: LCDDATA6
#define LCDDATA6 LCDDATA6
extern volatile unsigned char           LCDDATA6            __at(0xE94);
#ifndef _LIB_BUILD
asm("LCDDATA6 equ 0E94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C0                  :1;
        unsigned S49C0                  :1;
        unsigned S50C0                  :1;
        unsigned S51C0                  :1;
        unsigned S52C0                  :1;
        unsigned S53C0                  :1;
        unsigned S54C0                  :1;
        unsigned S55C0                  :1;
    };
} LCDDATA6bits_t;
extern volatile LCDDATA6bits_t LCDDATA6bits __at(0xE94);
// bitfield macros
#define _LCDDATA6_S48C0_POSN                                0x0
#define _LCDDATA6_S48C0_POSITION                            0x0
#define _LCDDATA6_S48C0_SIZE                                0x1
#define _LCDDATA6_S48C0_LENGTH                              0x1
#define _LCDDATA6_S48C0_MASK                                0x1
#define _LCDDATA6_S49C0_POSN                                0x1
#define _LCDDATA6_S49C0_POSITION                            0x1
#define _LCDDATA6_S49C0_SIZE                                0x1
#define _LCDDATA6_S49C0_LENGTH                              0x1
#define _LCDDATA6_S49C0_MASK                                0x2
#define _LCDDATA6_S50C0_POSN                                0x2
#define _LCDDATA6_S50C0_POSITION                            0x2
#define _LCDDATA6_S50C0_SIZE                                0x1
#define _LCDDATA6_S50C0_LENGTH                              0x1
#define _LCDDATA6_S50C0_MASK                                0x4
#define _LCDDATA6_S51C0_POSN                                0x3
#define _LCDDATA6_S51C0_POSITION                            0x3
#define _LCDDATA6_S51C0_SIZE                                0x1
#define _LCDDATA6_S51C0_LENGTH                              0x1
#define _LCDDATA6_S51C0_MASK                                0x8
#define _LCDDATA6_S52C0_POSN                                0x4
#define _LCDDATA6_S52C0_POSITION                            0x4
#define _LCDDATA6_S52C0_SIZE                                0x1
#define _LCDDATA6_S52C0_LENGTH                              0x1
#define _LCDDATA6_S52C0_MASK                                0x10
#define _LCDDATA6_S53C0_POSN                                0x5
#define _LCDDATA6_S53C0_POSITION                            0x5
#define _LCDDATA6_S53C0_SIZE                                0x1
#define _LCDDATA6_S53C0_LENGTH                              0x1
#define _LCDDATA6_S53C0_MASK                                0x20
#define _LCDDATA6_S54C0_POSN                                0x6
#define _LCDDATA6_S54C0_POSITION                            0x6
#define _LCDDATA6_S54C0_SIZE                                0x1
#define _LCDDATA6_S54C0_LENGTH                              0x1
#define _LCDDATA6_S54C0_MASK                                0x40
#define _LCDDATA6_S55C0_POSN                                0x7
#define _LCDDATA6_S55C0_POSITION                            0x7
#define _LCDDATA6_S55C0_SIZE                                0x1
#define _LCDDATA6_S55C0_LENGTH                              0x1
#define _LCDDATA6_S55C0_MASK                                0x80

// Register: LCDDATA7
#define LCDDATA7 LCDDATA7
extern volatile unsigned char           LCDDATA7            __at(0xE95);
#ifndef _LIB_BUILD
asm("LCDDATA7 equ 0E95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C0                  :1;
        unsigned S57C0                  :1;
        unsigned S58C0                  :1;
        unsigned S59C0                  :1;
        unsigned S60C0                  :1;
        unsigned S61C0                  :1;
        unsigned S62C0                  :1;
        unsigned S63C0                  :1;
    };
} LCDDATA7bits_t;
extern volatile LCDDATA7bits_t LCDDATA7bits __at(0xE95);
// bitfield macros
#define _LCDDATA7_S56C0_POSN                                0x0
#define _LCDDATA7_S56C0_POSITION                            0x0
#define _LCDDATA7_S56C0_SIZE                                0x1
#define _LCDDATA7_S56C0_LENGTH                              0x1
#define _LCDDATA7_S56C0_MASK                                0x1
#define _LCDDATA7_S57C0_POSN                                0x1
#define _LCDDATA7_S57C0_POSITION                            0x1
#define _LCDDATA7_S57C0_SIZE                                0x1
#define _LCDDATA7_S57C0_LENGTH                              0x1
#define _LCDDATA7_S57C0_MASK                                0x2
#define _LCDDATA7_S58C0_POSN                                0x2
#define _LCDDATA7_S58C0_POSITION                            0x2
#define _LCDDATA7_S58C0_SIZE                                0x1
#define _LCDDATA7_S58C0_LENGTH                              0x1
#define _LCDDATA7_S58C0_MASK                                0x4
#define _LCDDATA7_S59C0_POSN                                0x3
#define _LCDDATA7_S59C0_POSITION                            0x3
#define _LCDDATA7_S59C0_SIZE                                0x1
#define _LCDDATA7_S59C0_LENGTH                              0x1
#define _LCDDATA7_S59C0_MASK                                0x8
#define _LCDDATA7_S60C0_POSN                                0x4
#define _LCDDATA7_S60C0_POSITION                            0x4
#define _LCDDATA7_S60C0_SIZE                                0x1
#define _LCDDATA7_S60C0_LENGTH                              0x1
#define _LCDDATA7_S60C0_MASK                                0x10
#define _LCDDATA7_S61C0_POSN                                0x5
#define _LCDDATA7_S61C0_POSITION                            0x5
#define _LCDDATA7_S61C0_SIZE                                0x1
#define _LCDDATA7_S61C0_LENGTH                              0x1
#define _LCDDATA7_S61C0_MASK                                0x20
#define _LCDDATA7_S62C0_POSN                                0x6
#define _LCDDATA7_S62C0_POSITION                            0x6
#define _LCDDATA7_S62C0_SIZE                                0x1
#define _LCDDATA7_S62C0_LENGTH                              0x1
#define _LCDDATA7_S62C0_MASK                                0x40
#define _LCDDATA7_S63C0_POSN                                0x7
#define _LCDDATA7_S63C0_POSITION                            0x7
#define _LCDDATA7_S63C0_SIZE                                0x1
#define _LCDDATA7_S63C0_LENGTH                              0x1
#define _LCDDATA7_S63C0_MASK                                0x80

// Register: LCDDATA8
#define LCDDATA8 LCDDATA8
extern volatile unsigned char           LCDDATA8            __at(0xE96);
#ifndef _LIB_BUILD
asm("LCDDATA8 equ 0E96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C1                  :1;
        unsigned S01C1                  :1;
        unsigned S02C1                  :1;
        unsigned S03C1                  :1;
        unsigned S04C1                  :1;
        unsigned S05C1                  :1;
        unsigned S06C1                  :1;
        unsigned S07C1                  :1;
    };
} LCDDATA8bits_t;
extern volatile LCDDATA8bits_t LCDDATA8bits __at(0xE96);
// bitfield macros
#define _LCDDATA8_S00C1_POSN                                0x0
#define _LCDDATA8_S00C1_POSITION                            0x0
#define _LCDDATA8_S00C1_SIZE                                0x1
#define _LCDDATA8_S00C1_LENGTH                              0x1
#define _LCDDATA8_S00C1_MASK                                0x1
#define _LCDDATA8_S01C1_POSN                                0x1
#define _LCDDATA8_S01C1_POSITION                            0x1
#define _LCDDATA8_S01C1_SIZE                                0x1
#define _LCDDATA8_S01C1_LENGTH                              0x1
#define _LCDDATA8_S01C1_MASK                                0x2
#define _LCDDATA8_S02C1_POSN                                0x2
#define _LCDDATA8_S02C1_POSITION                            0x2
#define _LCDDATA8_S02C1_SIZE                                0x1
#define _LCDDATA8_S02C1_LENGTH                              0x1
#define _LCDDATA8_S02C1_MASK                                0x4
#define _LCDDATA8_S03C1_POSN                                0x3
#define _LCDDATA8_S03C1_POSITION                            0x3
#define _LCDDATA8_S03C1_SIZE                                0x1
#define _LCDDATA8_S03C1_LENGTH                              0x1
#define _LCDDATA8_S03C1_MASK                                0x8
#define _LCDDATA8_S04C1_POSN                                0x4
#define _LCDDATA8_S04C1_POSITION                            0x4
#define _LCDDATA8_S04C1_SIZE                                0x1
#define _LCDDATA8_S04C1_LENGTH                              0x1
#define _LCDDATA8_S04C1_MASK                                0x10
#define _LCDDATA8_S05C1_POSN                                0x5
#define _LCDDATA8_S05C1_POSITION                            0x5
#define _LCDDATA8_S05C1_SIZE                                0x1
#define _LCDDATA8_S05C1_LENGTH                              0x1
#define _LCDDATA8_S05C1_MASK                                0x20
#define _LCDDATA8_S06C1_POSN                                0x6
#define _LCDDATA8_S06C1_POSITION                            0x6
#define _LCDDATA8_S06C1_SIZE                                0x1
#define _LCDDATA8_S06C1_LENGTH                              0x1
#define _LCDDATA8_S06C1_MASK                                0x40
#define _LCDDATA8_S07C1_POSN                                0x7
#define _LCDDATA8_S07C1_POSITION                            0x7
#define _LCDDATA8_S07C1_SIZE                                0x1
#define _LCDDATA8_S07C1_LENGTH                              0x1
#define _LCDDATA8_S07C1_MASK                                0x80

// Register: LCDDATA9
#define LCDDATA9 LCDDATA9
extern volatile unsigned char           LCDDATA9            __at(0xE97);
#ifndef _LIB_BUILD
asm("LCDDATA9 equ 0E97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C1                  :1;
        unsigned S09C1                  :1;
        unsigned S10C1                  :1;
        unsigned S11C1                  :1;
        unsigned S12C1                  :1;
        unsigned S13C1                  :1;
        unsigned S14C1                  :1;
        unsigned S15C1                  :1;
    };
} LCDDATA9bits_t;
extern volatile LCDDATA9bits_t LCDDATA9bits __at(0xE97);
// bitfield macros
#define _LCDDATA9_S08C1_POSN                                0x0
#define _LCDDATA9_S08C1_POSITION                            0x0
#define _LCDDATA9_S08C1_SIZE                                0x1
#define _LCDDATA9_S08C1_LENGTH                              0x1
#define _LCDDATA9_S08C1_MASK                                0x1
#define _LCDDATA9_S09C1_POSN                                0x1
#define _LCDDATA9_S09C1_POSITION                            0x1
#define _LCDDATA9_S09C1_SIZE                                0x1
#define _LCDDATA9_S09C1_LENGTH                              0x1
#define _LCDDATA9_S09C1_MASK                                0x2
#define _LCDDATA9_S10C1_POSN                                0x2
#define _LCDDATA9_S10C1_POSITION                            0x2
#define _LCDDATA9_S10C1_SIZE                                0x1
#define _LCDDATA9_S10C1_LENGTH                              0x1
#define _LCDDATA9_S10C1_MASK                                0x4
#define _LCDDATA9_S11C1_POSN                                0x3
#define _LCDDATA9_S11C1_POSITION                            0x3
#define _LCDDATA9_S11C1_SIZE                                0x1
#define _LCDDATA9_S11C1_LENGTH                              0x1
#define _LCDDATA9_S11C1_MASK                                0x8
#define _LCDDATA9_S12C1_POSN                                0x4
#define _LCDDATA9_S12C1_POSITION                            0x4
#define _LCDDATA9_S12C1_SIZE                                0x1
#define _LCDDATA9_S12C1_LENGTH                              0x1
#define _LCDDATA9_S12C1_MASK                                0x10
#define _LCDDATA9_S13C1_POSN                                0x5
#define _LCDDATA9_S13C1_POSITION                            0x5
#define _LCDDATA9_S13C1_SIZE                                0x1
#define _LCDDATA9_S13C1_LENGTH                              0x1
#define _LCDDATA9_S13C1_MASK                                0x20
#define _LCDDATA9_S14C1_POSN                                0x6
#define _LCDDATA9_S14C1_POSITION                            0x6
#define _LCDDATA9_S14C1_SIZE                                0x1
#define _LCDDATA9_S14C1_LENGTH                              0x1
#define _LCDDATA9_S14C1_MASK                                0x40
#define _LCDDATA9_S15C1_POSN                                0x7
#define _LCDDATA9_S15C1_POSITION                            0x7
#define _LCDDATA9_S15C1_SIZE                                0x1
#define _LCDDATA9_S15C1_LENGTH                              0x1
#define _LCDDATA9_S15C1_MASK                                0x80

// Register: LCDDATA10
#define LCDDATA10 LCDDATA10
extern volatile unsigned char           LCDDATA10           __at(0xE98);
#ifndef _LIB_BUILD
asm("LCDDATA10 equ 0E98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C1                  :1;
        unsigned S17C1                  :1;
        unsigned S18C1                  :1;
        unsigned S19C1                  :1;
        unsigned S20C1                  :1;
        unsigned S21C1                  :1;
        unsigned S22C1                  :1;
        unsigned S23C1                  :1;
    };
} LCDDATA10bits_t;
extern volatile LCDDATA10bits_t LCDDATA10bits __at(0xE98);
// bitfield macros
#define _LCDDATA10_S16C1_POSN                               0x0
#define _LCDDATA10_S16C1_POSITION                           0x0
#define _LCDDATA10_S16C1_SIZE                               0x1
#define _LCDDATA10_S16C1_LENGTH                             0x1
#define _LCDDATA10_S16C1_MASK                               0x1
#define _LCDDATA10_S17C1_POSN                               0x1
#define _LCDDATA10_S17C1_POSITION                           0x1
#define _LCDDATA10_S17C1_SIZE                               0x1
#define _LCDDATA10_S17C1_LENGTH                             0x1
#define _LCDDATA10_S17C1_MASK                               0x2
#define _LCDDATA10_S18C1_POSN                               0x2
#define _LCDDATA10_S18C1_POSITION                           0x2
#define _LCDDATA10_S18C1_SIZE                               0x1
#define _LCDDATA10_S18C1_LENGTH                             0x1
#define _LCDDATA10_S18C1_MASK                               0x4
#define _LCDDATA10_S19C1_POSN                               0x3
#define _LCDDATA10_S19C1_POSITION                           0x3
#define _LCDDATA10_S19C1_SIZE                               0x1
#define _LCDDATA10_S19C1_LENGTH                             0x1
#define _LCDDATA10_S19C1_MASK                               0x8
#define _LCDDATA10_S20C1_POSN                               0x4
#define _LCDDATA10_S20C1_POSITION                           0x4
#define _LCDDATA10_S20C1_SIZE                               0x1
#define _LCDDATA10_S20C1_LENGTH                             0x1
#define _LCDDATA10_S20C1_MASK                               0x10
#define _LCDDATA10_S21C1_POSN                               0x5
#define _LCDDATA10_S21C1_POSITION                           0x5
#define _LCDDATA10_S21C1_SIZE                               0x1
#define _LCDDATA10_S21C1_LENGTH                             0x1
#define _LCDDATA10_S21C1_MASK                               0x20
#define _LCDDATA10_S22C1_POSN                               0x6
#define _LCDDATA10_S22C1_POSITION                           0x6
#define _LCDDATA10_S22C1_SIZE                               0x1
#define _LCDDATA10_S22C1_LENGTH                             0x1
#define _LCDDATA10_S22C1_MASK                               0x40
#define _LCDDATA10_S23C1_POSN                               0x7
#define _LCDDATA10_S23C1_POSITION                           0x7
#define _LCDDATA10_S23C1_SIZE                               0x1
#define _LCDDATA10_S23C1_LENGTH                             0x1
#define _LCDDATA10_S23C1_MASK                               0x80

// Register: LCDDATA11
#define LCDDATA11 LCDDATA11
extern volatile unsigned char           LCDDATA11           __at(0xE99);
#ifndef _LIB_BUILD
asm("LCDDATA11 equ 0E99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C1                  :1;
        unsigned S25C1                  :1;
        unsigned S26C1                  :1;
        unsigned S27C1                  :1;
        unsigned S28C1                  :1;
        unsigned S29C1                  :1;
        unsigned S30C1                  :1;
        unsigned S31C1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
} LCDDATA11bits_t;
extern volatile LCDDATA11bits_t LCDDATA11bits __at(0xE99);
// bitfield macros
#define _LCDDATA11_S24C1_POSN                               0x0
#define _LCDDATA11_S24C1_POSITION                           0x0
#define _LCDDATA11_S24C1_SIZE                               0x1
#define _LCDDATA11_S24C1_LENGTH                             0x1
#define _LCDDATA11_S24C1_MASK                               0x1
#define _LCDDATA11_S25C1_POSN                               0x1
#define _LCDDATA11_S25C1_POSITION                           0x1
#define _LCDDATA11_S25C1_SIZE                               0x1
#define _LCDDATA11_S25C1_LENGTH                             0x1
#define _LCDDATA11_S25C1_MASK                               0x2
#define _LCDDATA11_S26C1_POSN                               0x2
#define _LCDDATA11_S26C1_POSITION                           0x2
#define _LCDDATA11_S26C1_SIZE                               0x1
#define _LCDDATA11_S26C1_LENGTH                             0x1
#define _LCDDATA11_S26C1_MASK                               0x4
#define _LCDDATA11_S27C1_POSN                               0x3
#define _LCDDATA11_S27C1_POSITION                           0x3
#define _LCDDATA11_S27C1_SIZE                               0x1
#define _LCDDATA11_S27C1_LENGTH                             0x1
#define _LCDDATA11_S27C1_MASK                               0x8
#define _LCDDATA11_S28C1_POSN                               0x4
#define _LCDDATA11_S28C1_POSITION                           0x4
#define _LCDDATA11_S28C1_SIZE                               0x1
#define _LCDDATA11_S28C1_LENGTH                             0x1
#define _LCDDATA11_S28C1_MASK                               0x10
#define _LCDDATA11_S29C1_POSN                               0x5
#define _LCDDATA11_S29C1_POSITION                           0x5
#define _LCDDATA11_S29C1_SIZE                               0x1
#define _LCDDATA11_S29C1_LENGTH                             0x1
#define _LCDDATA11_S29C1_MASK                               0x20
#define _LCDDATA11_S30C1_POSN                               0x6
#define _LCDDATA11_S30C1_POSITION                           0x6
#define _LCDDATA11_S30C1_SIZE                               0x1
#define _LCDDATA11_S30C1_LENGTH                             0x1
#define _LCDDATA11_S30C1_MASK                               0x40
#define _LCDDATA11_S31C1_POSN                               0x7
#define _LCDDATA11_S31C1_POSITION                           0x7
#define _LCDDATA11_S31C1_SIZE                               0x1
#define _LCDDATA11_S31C1_LENGTH                             0x1
#define _LCDDATA11_S31C1_MASK                               0x80
#define _LCDDATA11_ADMSK1_POSN                              0x1
#define _LCDDATA11_ADMSK1_POSITION                          0x1
#define _LCDDATA11_ADMSK1_SIZE                              0x1
#define _LCDDATA11_ADMSK1_LENGTH                            0x1
#define _LCDDATA11_ADMSK1_MASK                              0x2
#define _LCDDATA11_ADMSK2_POSN                              0x2
#define _LCDDATA11_ADMSK2_POSITION                          0x2
#define _LCDDATA11_ADMSK2_SIZE                              0x1
#define _LCDDATA11_ADMSK2_LENGTH                            0x1
#define _LCDDATA11_ADMSK2_MASK                              0x4
#define _LCDDATA11_ADMSK3_POSN                              0x3
#define _LCDDATA11_ADMSK3_POSITION                          0x3
#define _LCDDATA11_ADMSK3_SIZE                              0x1
#define _LCDDATA11_ADMSK3_LENGTH                            0x1
#define _LCDDATA11_ADMSK3_MASK                              0x8
#define _LCDDATA11_ADMSK4_POSN                              0x4
#define _LCDDATA11_ADMSK4_POSITION                          0x4
#define _LCDDATA11_ADMSK4_SIZE                              0x1
#define _LCDDATA11_ADMSK4_LENGTH                            0x1
#define _LCDDATA11_ADMSK4_MASK                              0x10
#define _LCDDATA11_ADMSK5_POSN                              0x5
#define _LCDDATA11_ADMSK5_POSITION                          0x5
#define _LCDDATA11_ADMSK5_SIZE                              0x1
#define _LCDDATA11_ADMSK5_LENGTH                            0x1
#define _LCDDATA11_ADMSK5_MASK                              0x20

// Register: LCDDATA12
#define LCDDATA12 LCDDATA12
extern volatile unsigned char           LCDDATA12           __at(0xE9A);
#ifndef _LIB_BUILD
asm("LCDDATA12 equ 0E9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C1                  :1;
        unsigned S33C1                  :1;
        unsigned S34C1                  :1;
        unsigned S35C1                  :1;
        unsigned S36C1                  :1;
        unsigned S37C1                  :1;
        unsigned S38C1                  :1;
        unsigned S39C1                  :1;
    };
    struct {
        unsigned SSPM012                :1;
        unsigned SSPM112                :1;
        unsigned SSPM212                :1;
        unsigned SSPM312                :1;
    };
} LCDDATA12bits_t;
extern volatile LCDDATA12bits_t LCDDATA12bits __at(0xE9A);
// bitfield macros
#define _LCDDATA12_S32C1_POSN                               0x0
#define _LCDDATA12_S32C1_POSITION                           0x0
#define _LCDDATA12_S32C1_SIZE                               0x1
#define _LCDDATA12_S32C1_LENGTH                             0x1
#define _LCDDATA12_S32C1_MASK                               0x1
#define _LCDDATA12_S33C1_POSN                               0x1
#define _LCDDATA12_S33C1_POSITION                           0x1
#define _LCDDATA12_S33C1_SIZE                               0x1
#define _LCDDATA12_S33C1_LENGTH                             0x1
#define _LCDDATA12_S33C1_MASK                               0x2
#define _LCDDATA12_S34C1_POSN                               0x2
#define _LCDDATA12_S34C1_POSITION                           0x2
#define _LCDDATA12_S34C1_SIZE                               0x1
#define _LCDDATA12_S34C1_LENGTH                             0x1
#define _LCDDATA12_S34C1_MASK                               0x4
#define _LCDDATA12_S35C1_POSN                               0x3
#define _LCDDATA12_S35C1_POSITION                           0x3
#define _LCDDATA12_S35C1_SIZE                               0x1
#define _LCDDATA12_S35C1_LENGTH                             0x1
#define _LCDDATA12_S35C1_MASK                               0x8
#define _LCDDATA12_S36C1_POSN                               0x4
#define _LCDDATA12_S36C1_POSITION                           0x4
#define _LCDDATA12_S36C1_SIZE                               0x1
#define _LCDDATA12_S36C1_LENGTH                             0x1
#define _LCDDATA12_S36C1_MASK                               0x10
#define _LCDDATA12_S37C1_POSN                               0x5
#define _LCDDATA12_S37C1_POSITION                           0x5
#define _LCDDATA12_S37C1_SIZE                               0x1
#define _LCDDATA12_S37C1_LENGTH                             0x1
#define _LCDDATA12_S37C1_MASK                               0x20
#define _LCDDATA12_S38C1_POSN                               0x6
#define _LCDDATA12_S38C1_POSITION                           0x6
#define _LCDDATA12_S38C1_SIZE                               0x1
#define _LCDDATA12_S38C1_LENGTH                             0x1
#define _LCDDATA12_S38C1_MASK                               0x40
#define _LCDDATA12_S39C1_POSN                               0x7
#define _LCDDATA12_S39C1_POSITION                           0x7
#define _LCDDATA12_S39C1_SIZE                               0x1
#define _LCDDATA12_S39C1_LENGTH                             0x1
#define _LCDDATA12_S39C1_MASK                               0x80
#define _LCDDATA12_SSPM012_POSN                             0x0
#define _LCDDATA12_SSPM012_POSITION                         0x0
#define _LCDDATA12_SSPM012_SIZE                             0x1
#define _LCDDATA12_SSPM012_LENGTH                           0x1
#define _LCDDATA12_SSPM012_MASK                             0x1
#define _LCDDATA12_SSPM112_POSN                             0x1
#define _LCDDATA12_SSPM112_POSITION                         0x1
#define _LCDDATA12_SSPM112_SIZE                             0x1
#define _LCDDATA12_SSPM112_LENGTH                           0x1
#define _LCDDATA12_SSPM112_MASK                             0x2
#define _LCDDATA12_SSPM212_POSN                             0x2
#define _LCDDATA12_SSPM212_POSITION                         0x2
#define _LCDDATA12_SSPM212_SIZE                             0x1
#define _LCDDATA12_SSPM212_LENGTH                           0x1
#define _LCDDATA12_SSPM212_MASK                             0x4
#define _LCDDATA12_SSPM312_POSN                             0x3
#define _LCDDATA12_SSPM312_POSITION                         0x3
#define _LCDDATA12_SSPM312_SIZE                             0x1
#define _LCDDATA12_SSPM312_LENGTH                           0x1
#define _LCDDATA12_SSPM312_MASK                             0x8

// Register: LCDDATA13
#define LCDDATA13 LCDDATA13
extern volatile unsigned char           LCDDATA13           __at(0xE9B);
#ifndef _LIB_BUILD
asm("LCDDATA13 equ 0E9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C1                  :1;
        unsigned S41C1                  :1;
        unsigned S42C1                  :1;
        unsigned S43C1                  :1;
        unsigned S44C1                  :1;
        unsigned S45C1                  :1;
        unsigned S46C1                  :1;
        unsigned S47C1                  :1;
    };
} LCDDATA13bits_t;
extern volatile LCDDATA13bits_t LCDDATA13bits __at(0xE9B);
// bitfield macros
#define _LCDDATA13_S40C1_POSN                               0x0
#define _LCDDATA13_S40C1_POSITION                           0x0
#define _LCDDATA13_S40C1_SIZE                               0x1
#define _LCDDATA13_S40C1_LENGTH                             0x1
#define _LCDDATA13_S40C1_MASK                               0x1
#define _LCDDATA13_S41C1_POSN                               0x1
#define _LCDDATA13_S41C1_POSITION                           0x1
#define _LCDDATA13_S41C1_SIZE                               0x1
#define _LCDDATA13_S41C1_LENGTH                             0x1
#define _LCDDATA13_S41C1_MASK                               0x2
#define _LCDDATA13_S42C1_POSN                               0x2
#define _LCDDATA13_S42C1_POSITION                           0x2
#define _LCDDATA13_S42C1_SIZE                               0x1
#define _LCDDATA13_S42C1_LENGTH                             0x1
#define _LCDDATA13_S42C1_MASK                               0x4
#define _LCDDATA13_S43C1_POSN                               0x3
#define _LCDDATA13_S43C1_POSITION                           0x3
#define _LCDDATA13_S43C1_SIZE                               0x1
#define _LCDDATA13_S43C1_LENGTH                             0x1
#define _LCDDATA13_S43C1_MASK                               0x8
#define _LCDDATA13_S44C1_POSN                               0x4
#define _LCDDATA13_S44C1_POSITION                           0x4
#define _LCDDATA13_S44C1_SIZE                               0x1
#define _LCDDATA13_S44C1_LENGTH                             0x1
#define _LCDDATA13_S44C1_MASK                               0x10
#define _LCDDATA13_S45C1_POSN                               0x5
#define _LCDDATA13_S45C1_POSITION                           0x5
#define _LCDDATA13_S45C1_SIZE                               0x1
#define _LCDDATA13_S45C1_LENGTH                             0x1
#define _LCDDATA13_S45C1_MASK                               0x20
#define _LCDDATA13_S46C1_POSN                               0x6
#define _LCDDATA13_S46C1_POSITION                           0x6
#define _LCDDATA13_S46C1_SIZE                               0x1
#define _LCDDATA13_S46C1_LENGTH                             0x1
#define _LCDDATA13_S46C1_MASK                               0x40
#define _LCDDATA13_S47C1_POSN                               0x7
#define _LCDDATA13_S47C1_POSITION                           0x7
#define _LCDDATA13_S47C1_SIZE                               0x1
#define _LCDDATA13_S47C1_LENGTH                             0x1
#define _LCDDATA13_S47C1_MASK                               0x80

// Register: LCDDATA14
#define LCDDATA14 LCDDATA14
extern volatile unsigned char           LCDDATA14           __at(0xE9C);
#ifndef _LIB_BUILD
asm("LCDDATA14 equ 0E9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C1                  :1;
        unsigned S49C1                  :1;
        unsigned S50C1                  :1;
        unsigned S51C1                  :1;
        unsigned S52C1                  :1;
        unsigned S53C1                  :1;
        unsigned S54C1                  :1;
        unsigned S55C1                  :1;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} LCDDATA14bits_t;
extern volatile LCDDATA14bits_t LCDDATA14bits __at(0xE9C);
// bitfield macros
#define _LCDDATA14_S48C1_POSN                               0x0
#define _LCDDATA14_S48C1_POSITION                           0x0
#define _LCDDATA14_S48C1_SIZE                               0x1
#define _LCDDATA14_S48C1_LENGTH                             0x1
#define _LCDDATA14_S48C1_MASK                               0x1
#define _LCDDATA14_S49C1_POSN                               0x1
#define _LCDDATA14_S49C1_POSITION                           0x1
#define _LCDDATA14_S49C1_SIZE                               0x1
#define _LCDDATA14_S49C1_LENGTH                             0x1
#define _LCDDATA14_S49C1_MASK                               0x2
#define _LCDDATA14_S50C1_POSN                               0x2
#define _LCDDATA14_S50C1_POSITION                           0x2
#define _LCDDATA14_S50C1_SIZE                               0x1
#define _LCDDATA14_S50C1_LENGTH                             0x1
#define _LCDDATA14_S50C1_MASK                               0x4
#define _LCDDATA14_S51C1_POSN                               0x3
#define _LCDDATA14_S51C1_POSITION                           0x3
#define _LCDDATA14_S51C1_SIZE                               0x1
#define _LCDDATA14_S51C1_LENGTH                             0x1
#define _LCDDATA14_S51C1_MASK                               0x8
#define _LCDDATA14_S52C1_POSN                               0x4
#define _LCDDATA14_S52C1_POSITION                           0x4
#define _LCDDATA14_S52C1_SIZE                               0x1
#define _LCDDATA14_S52C1_LENGTH                             0x1
#define _LCDDATA14_S52C1_MASK                               0x10
#define _LCDDATA14_S53C1_POSN                               0x5
#define _LCDDATA14_S53C1_POSITION                           0x5
#define _LCDDATA14_S53C1_SIZE                               0x1
#define _LCDDATA14_S53C1_LENGTH                             0x1
#define _LCDDATA14_S53C1_MASK                               0x20
#define _LCDDATA14_S54C1_POSN                               0x6
#define _LCDDATA14_S54C1_POSITION                           0x6
#define _LCDDATA14_S54C1_SIZE                               0x1
#define _LCDDATA14_S54C1_LENGTH                             0x1
#define _LCDDATA14_S54C1_MASK                               0x40
#define _LCDDATA14_S55C1_POSN                               0x7
#define _LCDDATA14_S55C1_POSITION                           0x7
#define _LCDDATA14_S55C1_SIZE                               0x1
#define _LCDDATA14_S55C1_LENGTH                             0x1
#define _LCDDATA14_S55C1_MASK                               0x80
#define _LCDDATA14_MSK0_POSN                                0x0
#define _LCDDATA14_MSK0_POSITION                            0x0
#define _LCDDATA14_MSK0_SIZE                                0x1
#define _LCDDATA14_MSK0_LENGTH                              0x1
#define _LCDDATA14_MSK0_MASK                                0x1
#define _LCDDATA14_MSK1_POSN                                0x1
#define _LCDDATA14_MSK1_POSITION                            0x1
#define _LCDDATA14_MSK1_SIZE                                0x1
#define _LCDDATA14_MSK1_LENGTH                              0x1
#define _LCDDATA14_MSK1_MASK                                0x2
#define _LCDDATA14_MSK2_POSN                                0x2
#define _LCDDATA14_MSK2_POSITION                            0x2
#define _LCDDATA14_MSK2_SIZE                                0x1
#define _LCDDATA14_MSK2_LENGTH                              0x1
#define _LCDDATA14_MSK2_MASK                                0x4
#define _LCDDATA14_MSK3_POSN                                0x3
#define _LCDDATA14_MSK3_POSITION                            0x3
#define _LCDDATA14_MSK3_SIZE                                0x1
#define _LCDDATA14_MSK3_LENGTH                              0x1
#define _LCDDATA14_MSK3_MASK                                0x8
#define _LCDDATA14_MSK4_POSN                                0x4
#define _LCDDATA14_MSK4_POSITION                            0x4
#define _LCDDATA14_MSK4_SIZE                                0x1
#define _LCDDATA14_MSK4_LENGTH                              0x1
#define _LCDDATA14_MSK4_MASK                                0x10
#define _LCDDATA14_MSK5_POSN                                0x5
#define _LCDDATA14_MSK5_POSITION                            0x5
#define _LCDDATA14_MSK5_SIZE                                0x1
#define _LCDDATA14_MSK5_LENGTH                              0x1
#define _LCDDATA14_MSK5_MASK                                0x20
#define _LCDDATA14_MSK6_POSN                                0x6
#define _LCDDATA14_MSK6_POSITION                            0x6
#define _LCDDATA14_MSK6_SIZE                                0x1
#define _LCDDATA14_MSK6_LENGTH                              0x1
#define _LCDDATA14_MSK6_MASK                                0x40
#define _LCDDATA14_MSK7_POSN                                0x7
#define _LCDDATA14_MSK7_POSITION                            0x7
#define _LCDDATA14_MSK7_SIZE                                0x1
#define _LCDDATA14_MSK7_LENGTH                              0x1
#define _LCDDATA14_MSK7_MASK                                0x80

// Register: LCDDATA15
#define LCDDATA15 LCDDATA15
extern volatile unsigned char           LCDDATA15           __at(0xE9D);
#ifndef _LIB_BUILD
asm("LCDDATA15 equ 0E9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C1                  :1;
        unsigned S57C1                  :1;
        unsigned S58C1                  :1;
        unsigned S59C1                  :1;
        unsigned S60C1                  :1;
        unsigned S61C1                  :1;
        unsigned S62C1                  :1;
        unsigned S63C1                  :1;
    };
} LCDDATA15bits_t;
extern volatile LCDDATA15bits_t LCDDATA15bits __at(0xE9D);
// bitfield macros
#define _LCDDATA15_S56C1_POSN                               0x0
#define _LCDDATA15_S56C1_POSITION                           0x0
#define _LCDDATA15_S56C1_SIZE                               0x1
#define _LCDDATA15_S56C1_LENGTH                             0x1
#define _LCDDATA15_S56C1_MASK                               0x1
#define _LCDDATA15_S57C1_POSN                               0x1
#define _LCDDATA15_S57C1_POSITION                           0x1
#define _LCDDATA15_S57C1_SIZE                               0x1
#define _LCDDATA15_S57C1_LENGTH                             0x1
#define _LCDDATA15_S57C1_MASK                               0x2
#define _LCDDATA15_S58C1_POSN                               0x2
#define _LCDDATA15_S58C1_POSITION                           0x2
#define _LCDDATA15_S58C1_SIZE                               0x1
#define _LCDDATA15_S58C1_LENGTH                             0x1
#define _LCDDATA15_S58C1_MASK                               0x4
#define _LCDDATA15_S59C1_POSN                               0x3
#define _LCDDATA15_S59C1_POSITION                           0x3
#define _LCDDATA15_S59C1_SIZE                               0x1
#define _LCDDATA15_S59C1_LENGTH                             0x1
#define _LCDDATA15_S59C1_MASK                               0x8
#define _LCDDATA15_S60C1_POSN                               0x4
#define _LCDDATA15_S60C1_POSITION                           0x4
#define _LCDDATA15_S60C1_SIZE                               0x1
#define _LCDDATA15_S60C1_LENGTH                             0x1
#define _LCDDATA15_S60C1_MASK                               0x10
#define _LCDDATA15_S61C1_POSN                               0x5
#define _LCDDATA15_S61C1_POSITION                           0x5
#define _LCDDATA15_S61C1_SIZE                               0x1
#define _LCDDATA15_S61C1_LENGTH                             0x1
#define _LCDDATA15_S61C1_MASK                               0x20
#define _LCDDATA15_S62C1_POSN                               0x6
#define _LCDDATA15_S62C1_POSITION                           0x6
#define _LCDDATA15_S62C1_SIZE                               0x1
#define _LCDDATA15_S62C1_LENGTH                             0x1
#define _LCDDATA15_S62C1_MASK                               0x40
#define _LCDDATA15_S63C1_POSN                               0x7
#define _LCDDATA15_S63C1_POSITION                           0x7
#define _LCDDATA15_S63C1_SIZE                               0x1
#define _LCDDATA15_S63C1_LENGTH                             0x1
#define _LCDDATA15_S63C1_MASK                               0x80

// Register: LCDDATA16
#define LCDDATA16 LCDDATA16
extern volatile unsigned char           LCDDATA16           __at(0xE9E);
#ifndef _LIB_BUILD
asm("LCDDATA16 equ 0E9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C2                  :1;
        unsigned S01C2                  :1;
        unsigned S02C2                  :1;
        unsigned S03C2                  :1;
        unsigned S04C2                  :1;
        unsigned S05C2                  :1;
        unsigned S06C2                  :1;
        unsigned S07C2                  :1;
    };
    struct {
        unsigned T4CKPS016              :1;
        unsigned T4CKPS116              :1;
        unsigned                        :1;
        unsigned T4OUTPS016             :1;
        unsigned T4OUTPS116             :1;
        unsigned T4OUTPS216             :1;
        unsigned T4OUTPS316             :1;
    };
} LCDDATA16bits_t;
extern volatile LCDDATA16bits_t LCDDATA16bits __at(0xE9E);
// bitfield macros
#define _LCDDATA16_S00C2_POSN                               0x0
#define _LCDDATA16_S00C2_POSITION                           0x0
#define _LCDDATA16_S00C2_SIZE                               0x1
#define _LCDDATA16_S00C2_LENGTH                             0x1
#define _LCDDATA16_S00C2_MASK                               0x1
#define _LCDDATA16_S01C2_POSN                               0x1
#define _LCDDATA16_S01C2_POSITION                           0x1
#define _LCDDATA16_S01C2_SIZE                               0x1
#define _LCDDATA16_S01C2_LENGTH                             0x1
#define _LCDDATA16_S01C2_MASK                               0x2
#define _LCDDATA16_S02C2_POSN                               0x2
#define _LCDDATA16_S02C2_POSITION                           0x2
#define _LCDDATA16_S02C2_SIZE                               0x1
#define _LCDDATA16_S02C2_LENGTH                             0x1
#define _LCDDATA16_S02C2_MASK                               0x4
#define _LCDDATA16_S03C2_POSN                               0x3
#define _LCDDATA16_S03C2_POSITION                           0x3
#define _LCDDATA16_S03C2_SIZE                               0x1
#define _LCDDATA16_S03C2_LENGTH                             0x1
#define _LCDDATA16_S03C2_MASK                               0x8
#define _LCDDATA16_S04C2_POSN                               0x4
#define _LCDDATA16_S04C2_POSITION                           0x4
#define _LCDDATA16_S04C2_SIZE                               0x1
#define _LCDDATA16_S04C2_LENGTH                             0x1
#define _LCDDATA16_S04C2_MASK                               0x10
#define _LCDDATA16_S05C2_POSN                               0x5
#define _LCDDATA16_S05C2_POSITION                           0x5
#define _LCDDATA16_S05C2_SIZE                               0x1
#define _LCDDATA16_S05C2_LENGTH                             0x1
#define _LCDDATA16_S05C2_MASK                               0x20
#define _LCDDATA16_S06C2_POSN                               0x6
#define _LCDDATA16_S06C2_POSITION                           0x6
#define _LCDDATA16_S06C2_SIZE                               0x1
#define _LCDDATA16_S06C2_LENGTH                             0x1
#define _LCDDATA16_S06C2_MASK                               0x40
#define _LCDDATA16_S07C2_POSN                               0x7
#define _LCDDATA16_S07C2_POSITION                           0x7
#define _LCDDATA16_S07C2_SIZE                               0x1
#define _LCDDATA16_S07C2_LENGTH                             0x1
#define _LCDDATA16_S07C2_MASK                               0x80
#define _LCDDATA16_T4CKPS016_POSN                           0x0
#define _LCDDATA16_T4CKPS016_POSITION                       0x0
#define _LCDDATA16_T4CKPS016_SIZE                           0x1
#define _LCDDATA16_T4CKPS016_LENGTH                         0x1
#define _LCDDATA16_T4CKPS016_MASK                           0x1
#define _LCDDATA16_T4CKPS116_POSN                           0x1
#define _LCDDATA16_T4CKPS116_POSITION                       0x1
#define _LCDDATA16_T4CKPS116_SIZE                           0x1
#define _LCDDATA16_T4CKPS116_LENGTH                         0x1
#define _LCDDATA16_T4CKPS116_MASK                           0x2
#define _LCDDATA16_T4OUTPS016_POSN                          0x3
#define _LCDDATA16_T4OUTPS016_POSITION                      0x3
#define _LCDDATA16_T4OUTPS016_SIZE                          0x1
#define _LCDDATA16_T4OUTPS016_LENGTH                        0x1
#define _LCDDATA16_T4OUTPS016_MASK                          0x8
#define _LCDDATA16_T4OUTPS116_POSN                          0x4
#define _LCDDATA16_T4OUTPS116_POSITION                      0x4
#define _LCDDATA16_T4OUTPS116_SIZE                          0x1
#define _LCDDATA16_T4OUTPS116_LENGTH                        0x1
#define _LCDDATA16_T4OUTPS116_MASK                          0x10
#define _LCDDATA16_T4OUTPS216_POSN                          0x5
#define _LCDDATA16_T4OUTPS216_POSITION                      0x5
#define _LCDDATA16_T4OUTPS216_SIZE                          0x1
#define _LCDDATA16_T4OUTPS216_LENGTH                        0x1
#define _LCDDATA16_T4OUTPS216_MASK                          0x20
#define _LCDDATA16_T4OUTPS316_POSN                          0x6
#define _LCDDATA16_T4OUTPS316_POSITION                      0x6
#define _LCDDATA16_T4OUTPS316_SIZE                          0x1
#define _LCDDATA16_T4OUTPS316_LENGTH                        0x1
#define _LCDDATA16_T4OUTPS316_MASK                          0x40

// Register: LCDDATA17
#define LCDDATA17 LCDDATA17
extern volatile unsigned char           LCDDATA17           __at(0xE9F);
#ifndef _LIB_BUILD
asm("LCDDATA17 equ 0E9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C2                  :1;
        unsigned S09C2                  :1;
        unsigned S10C2                  :1;
        unsigned S11C2                  :1;
        unsigned S12C2                  :1;
        unsigned S13C2                  :1;
        unsigned S14C2                  :1;
        unsigned S15C2                  :1;
    };
} LCDDATA17bits_t;
extern volatile LCDDATA17bits_t LCDDATA17bits __at(0xE9F);
// bitfield macros
#define _LCDDATA17_S08C2_POSN                               0x0
#define _LCDDATA17_S08C2_POSITION                           0x0
#define _LCDDATA17_S08C2_SIZE                               0x1
#define _LCDDATA17_S08C2_LENGTH                             0x1
#define _LCDDATA17_S08C2_MASK                               0x1
#define _LCDDATA17_S09C2_POSN                               0x1
#define _LCDDATA17_S09C2_POSITION                           0x1
#define _LCDDATA17_S09C2_SIZE                               0x1
#define _LCDDATA17_S09C2_LENGTH                             0x1
#define _LCDDATA17_S09C2_MASK                               0x2
#define _LCDDATA17_S10C2_POSN                               0x2
#define _LCDDATA17_S10C2_POSITION                           0x2
#define _LCDDATA17_S10C2_SIZE                               0x1
#define _LCDDATA17_S10C2_LENGTH                             0x1
#define _LCDDATA17_S10C2_MASK                               0x4
#define _LCDDATA17_S11C2_POSN                               0x3
#define _LCDDATA17_S11C2_POSITION                           0x3
#define _LCDDATA17_S11C2_SIZE                               0x1
#define _LCDDATA17_S11C2_LENGTH                             0x1
#define _LCDDATA17_S11C2_MASK                               0x8
#define _LCDDATA17_S12C2_POSN                               0x4
#define _LCDDATA17_S12C2_POSITION                           0x4
#define _LCDDATA17_S12C2_SIZE                               0x1
#define _LCDDATA17_S12C2_LENGTH                             0x1
#define _LCDDATA17_S12C2_MASK                               0x10
#define _LCDDATA17_S13C2_POSN                               0x5
#define _LCDDATA17_S13C2_POSITION                           0x5
#define _LCDDATA17_S13C2_SIZE                               0x1
#define _LCDDATA17_S13C2_LENGTH                             0x1
#define _LCDDATA17_S13C2_MASK                               0x20
#define _LCDDATA17_S14C2_POSN                               0x6
#define _LCDDATA17_S14C2_POSITION                           0x6
#define _LCDDATA17_S14C2_SIZE                               0x1
#define _LCDDATA17_S14C2_LENGTH                             0x1
#define _LCDDATA17_S14C2_MASK                               0x40
#define _LCDDATA17_S15C2_POSN                               0x7
#define _LCDDATA17_S15C2_POSITION                           0x7
#define _LCDDATA17_S15C2_SIZE                               0x1
#define _LCDDATA17_S15C2_LENGTH                             0x1
#define _LCDDATA17_S15C2_MASK                               0x80

// Register: LCDDATA18
#define LCDDATA18 LCDDATA18
extern volatile unsigned char           LCDDATA18           __at(0xEA0);
#ifndef _LIB_BUILD
asm("LCDDATA18 equ 0EA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C2                  :1;
        unsigned S17C2                  :1;
        unsigned S18C2                  :1;
        unsigned S19C2                  :1;
        unsigned S20C2                  :1;
        unsigned S21C2                  :1;
        unsigned S22C2                  :1;
        unsigned S23C2                  :1;
    };
} LCDDATA18bits_t;
extern volatile LCDDATA18bits_t LCDDATA18bits __at(0xEA0);
// bitfield macros
#define _LCDDATA18_S16C2_POSN                               0x0
#define _LCDDATA18_S16C2_POSITION                           0x0
#define _LCDDATA18_S16C2_SIZE                               0x1
#define _LCDDATA18_S16C2_LENGTH                             0x1
#define _LCDDATA18_S16C2_MASK                               0x1
#define _LCDDATA18_S17C2_POSN                               0x1
#define _LCDDATA18_S17C2_POSITION                           0x1
#define _LCDDATA18_S17C2_SIZE                               0x1
#define _LCDDATA18_S17C2_LENGTH                             0x1
#define _LCDDATA18_S17C2_MASK                               0x2
#define _LCDDATA18_S18C2_POSN                               0x2
#define _LCDDATA18_S18C2_POSITION                           0x2
#define _LCDDATA18_S18C2_SIZE                               0x1
#define _LCDDATA18_S18C2_LENGTH                             0x1
#define _LCDDATA18_S18C2_MASK                               0x4
#define _LCDDATA18_S19C2_POSN                               0x3
#define _LCDDATA18_S19C2_POSITION                           0x3
#define _LCDDATA18_S19C2_SIZE                               0x1
#define _LCDDATA18_S19C2_LENGTH                             0x1
#define _LCDDATA18_S19C2_MASK                               0x8
#define _LCDDATA18_S20C2_POSN                               0x4
#define _LCDDATA18_S20C2_POSITION                           0x4
#define _LCDDATA18_S20C2_SIZE                               0x1
#define _LCDDATA18_S20C2_LENGTH                             0x1
#define _LCDDATA18_S20C2_MASK                               0x10
#define _LCDDATA18_S21C2_POSN                               0x5
#define _LCDDATA18_S21C2_POSITION                           0x5
#define _LCDDATA18_S21C2_SIZE                               0x1
#define _LCDDATA18_S21C2_LENGTH                             0x1
#define _LCDDATA18_S21C2_MASK                               0x20
#define _LCDDATA18_S22C2_POSN                               0x6
#define _LCDDATA18_S22C2_POSITION                           0x6
#define _LCDDATA18_S22C2_SIZE                               0x1
#define _LCDDATA18_S22C2_LENGTH                             0x1
#define _LCDDATA18_S22C2_MASK                               0x40
#define _LCDDATA18_S23C2_POSN                               0x7
#define _LCDDATA18_S23C2_POSITION                           0x7
#define _LCDDATA18_S23C2_SIZE                               0x1
#define _LCDDATA18_S23C2_LENGTH                             0x1
#define _LCDDATA18_S23C2_MASK                               0x80

// Register: LCDDATA19
#define LCDDATA19 LCDDATA19
extern volatile unsigned char           LCDDATA19           __at(0xEA1);
#ifndef _LIB_BUILD
asm("LCDDATA19 equ 0EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C2                  :1;
        unsigned S25C2                  :1;
        unsigned S26C2                  :1;
        unsigned S27C2                  :1;
        unsigned S28C2                  :1;
        unsigned S29C2                  :1;
        unsigned S30C2                  :1;
        unsigned S31C2                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned T3CKPS019              :1;
        unsigned T3CKPS119              :1;
        unsigned TMR3CS019              :1;
        unsigned TMR3CS119              :1;
    };
} LCDDATA19bits_t;
extern volatile LCDDATA19bits_t LCDDATA19bits __at(0xEA1);
// bitfield macros
#define _LCDDATA19_S24C2_POSN                               0x0
#define _LCDDATA19_S24C2_POSITION                           0x0
#define _LCDDATA19_S24C2_SIZE                               0x1
#define _LCDDATA19_S24C2_LENGTH                             0x1
#define _LCDDATA19_S24C2_MASK                               0x1
#define _LCDDATA19_S25C2_POSN                               0x1
#define _LCDDATA19_S25C2_POSITION                           0x1
#define _LCDDATA19_S25C2_SIZE                               0x1
#define _LCDDATA19_S25C2_LENGTH                             0x1
#define _LCDDATA19_S25C2_MASK                               0x2
#define _LCDDATA19_S26C2_POSN                               0x2
#define _LCDDATA19_S26C2_POSITION                           0x2
#define _LCDDATA19_S26C2_SIZE                               0x1
#define _LCDDATA19_S26C2_LENGTH                             0x1
#define _LCDDATA19_S26C2_MASK                               0x4
#define _LCDDATA19_S27C2_POSN                               0x3
#define _LCDDATA19_S27C2_POSITION                           0x3
#define _LCDDATA19_S27C2_SIZE                               0x1
#define _LCDDATA19_S27C2_LENGTH                             0x1
#define _LCDDATA19_S27C2_MASK                               0x8
#define _LCDDATA19_S28C2_POSN                               0x4
#define _LCDDATA19_S28C2_POSITION                           0x4
#define _LCDDATA19_S28C2_SIZE                               0x1
#define _LCDDATA19_S28C2_LENGTH                             0x1
#define _LCDDATA19_S28C2_MASK                               0x10
#define _LCDDATA19_S29C2_POSN                               0x5
#define _LCDDATA19_S29C2_POSITION                           0x5
#define _LCDDATA19_S29C2_SIZE                               0x1
#define _LCDDATA19_S29C2_LENGTH                             0x1
#define _LCDDATA19_S29C2_MASK                               0x20
#define _LCDDATA19_S30C2_POSN                               0x6
#define _LCDDATA19_S30C2_POSITION                           0x6
#define _LCDDATA19_S30C2_SIZE                               0x1
#define _LCDDATA19_S30C2_LENGTH                             0x1
#define _LCDDATA19_S30C2_MASK                               0x40
#define _LCDDATA19_S31C2_POSN                               0x7
#define _LCDDATA19_S31C2_POSITION                           0x7
#define _LCDDATA19_S31C2_SIZE                               0x1
#define _LCDDATA19_S31C2_LENGTH                             0x1
#define _LCDDATA19_S31C2_MASK                               0x80
#define _LCDDATA19_T3CKPS019_POSN                           0x4
#define _LCDDATA19_T3CKPS019_POSITION                       0x4
#define _LCDDATA19_T3CKPS019_SIZE                           0x1
#define _LCDDATA19_T3CKPS019_LENGTH                         0x1
#define _LCDDATA19_T3CKPS019_MASK                           0x10
#define _LCDDATA19_T3CKPS119_POSN                           0x5
#define _LCDDATA19_T3CKPS119_POSITION                       0x5
#define _LCDDATA19_T3CKPS119_SIZE                           0x1
#define _LCDDATA19_T3CKPS119_LENGTH                         0x1
#define _LCDDATA19_T3CKPS119_MASK                           0x20
#define _LCDDATA19_TMR3CS019_POSN                           0x6
#define _LCDDATA19_TMR3CS019_POSITION                       0x6
#define _LCDDATA19_TMR3CS019_SIZE                           0x1
#define _LCDDATA19_TMR3CS019_LENGTH                         0x1
#define _LCDDATA19_TMR3CS019_MASK                           0x40
#define _LCDDATA19_TMR3CS119_POSN                           0x7
#define _LCDDATA19_TMR3CS119_POSITION                       0x7
#define _LCDDATA19_TMR3CS119_SIZE                           0x1
#define _LCDDATA19_TMR3CS119_LENGTH                         0x1
#define _LCDDATA19_TMR3CS119_MASK                           0x80

// Register: LCDDATA20
#define LCDDATA20 LCDDATA20
extern volatile unsigned char           LCDDATA20           __at(0xEA2);
#ifndef _LIB_BUILD
asm("LCDDATA20 equ 0EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C2                  :1;
        unsigned S33C2                  :1;
        unsigned S34C2                  :1;
        unsigned S35C2                  :1;
        unsigned S36C2                  :1;
        unsigned S37C2                  :1;
        unsigned S38C2                  :1;
        unsigned S39C2                  :1;
    };
} LCDDATA20bits_t;
extern volatile LCDDATA20bits_t LCDDATA20bits __at(0xEA2);
// bitfield macros
#define _LCDDATA20_S32C2_POSN                               0x0
#define _LCDDATA20_S32C2_POSITION                           0x0
#define _LCDDATA20_S32C2_SIZE                               0x1
#define _LCDDATA20_S32C2_LENGTH                             0x1
#define _LCDDATA20_S32C2_MASK                               0x1
#define _LCDDATA20_S33C2_POSN                               0x1
#define _LCDDATA20_S33C2_POSITION                           0x1
#define _LCDDATA20_S33C2_SIZE                               0x1
#define _LCDDATA20_S33C2_LENGTH                             0x1
#define _LCDDATA20_S33C2_MASK                               0x2
#define _LCDDATA20_S34C2_POSN                               0x2
#define _LCDDATA20_S34C2_POSITION                           0x2
#define _LCDDATA20_S34C2_SIZE                               0x1
#define _LCDDATA20_S34C2_LENGTH                             0x1
#define _LCDDATA20_S34C2_MASK                               0x4
#define _LCDDATA20_S35C2_POSN                               0x3
#define _LCDDATA20_S35C2_POSITION                           0x3
#define _LCDDATA20_S35C2_SIZE                               0x1
#define _LCDDATA20_S35C2_LENGTH                             0x1
#define _LCDDATA20_S35C2_MASK                               0x8
#define _LCDDATA20_S36C2_POSN                               0x4
#define _LCDDATA20_S36C2_POSITION                           0x4
#define _LCDDATA20_S36C2_SIZE                               0x1
#define _LCDDATA20_S36C2_LENGTH                             0x1
#define _LCDDATA20_S36C2_MASK                               0x10
#define _LCDDATA20_S37C2_POSN                               0x5
#define _LCDDATA20_S37C2_POSITION                           0x5
#define _LCDDATA20_S37C2_SIZE                               0x1
#define _LCDDATA20_S37C2_LENGTH                             0x1
#define _LCDDATA20_S37C2_MASK                               0x20
#define _LCDDATA20_S38C2_POSN                               0x6
#define _LCDDATA20_S38C2_POSITION                           0x6
#define _LCDDATA20_S38C2_SIZE                               0x1
#define _LCDDATA20_S38C2_LENGTH                             0x1
#define _LCDDATA20_S38C2_MASK                               0x40
#define _LCDDATA20_S39C2_POSN                               0x7
#define _LCDDATA20_S39C2_POSITION                           0x7
#define _LCDDATA20_S39C2_SIZE                               0x1
#define _LCDDATA20_S39C2_LENGTH                             0x1
#define _LCDDATA20_S39C2_MASK                               0x80

// Register: LCDDATA21
#define LCDDATA21 LCDDATA21
extern volatile unsigned char           LCDDATA21           __at(0xEA3);
#ifndef _LIB_BUILD
asm("LCDDATA21 equ 0EA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C2                  :1;
        unsigned S41C2                  :1;
        unsigned S42C2                  :1;
        unsigned S43C2                  :1;
        unsigned S44C2                  :1;
        unsigned S45C2                  :1;
        unsigned S46C2                  :1;
        unsigned S47C2                  :1;
    };
} LCDDATA21bits_t;
extern volatile LCDDATA21bits_t LCDDATA21bits __at(0xEA3);
// bitfield macros
#define _LCDDATA21_S40C2_POSN                               0x0
#define _LCDDATA21_S40C2_POSITION                           0x0
#define _LCDDATA21_S40C2_SIZE                               0x1
#define _LCDDATA21_S40C2_LENGTH                             0x1
#define _LCDDATA21_S40C2_MASK                               0x1
#define _LCDDATA21_S41C2_POSN                               0x1
#define _LCDDATA21_S41C2_POSITION                           0x1
#define _LCDDATA21_S41C2_SIZE                               0x1
#define _LCDDATA21_S41C2_LENGTH                             0x1
#define _LCDDATA21_S41C2_MASK                               0x2
#define _LCDDATA21_S42C2_POSN                               0x2
#define _LCDDATA21_S42C2_POSITION                           0x2
#define _LCDDATA21_S42C2_SIZE                               0x1
#define _LCDDATA21_S42C2_LENGTH                             0x1
#define _LCDDATA21_S42C2_MASK                               0x4
#define _LCDDATA21_S43C2_POSN                               0x3
#define _LCDDATA21_S43C2_POSITION                           0x3
#define _LCDDATA21_S43C2_SIZE                               0x1
#define _LCDDATA21_S43C2_LENGTH                             0x1
#define _LCDDATA21_S43C2_MASK                               0x8
#define _LCDDATA21_S44C2_POSN                               0x4
#define _LCDDATA21_S44C2_POSITION                           0x4
#define _LCDDATA21_S44C2_SIZE                               0x1
#define _LCDDATA21_S44C2_LENGTH                             0x1
#define _LCDDATA21_S44C2_MASK                               0x10
#define _LCDDATA21_S45C2_POSN                               0x5
#define _LCDDATA21_S45C2_POSITION                           0x5
#define _LCDDATA21_S45C2_SIZE                               0x1
#define _LCDDATA21_S45C2_LENGTH                             0x1
#define _LCDDATA21_S45C2_MASK                               0x20
#define _LCDDATA21_S46C2_POSN                               0x6
#define _LCDDATA21_S46C2_POSITION                           0x6
#define _LCDDATA21_S46C2_SIZE                               0x1
#define _LCDDATA21_S46C2_LENGTH                             0x1
#define _LCDDATA21_S46C2_MASK                               0x40
#define _LCDDATA21_S47C2_POSN                               0x7
#define _LCDDATA21_S47C2_POSITION                           0x7
#define _LCDDATA21_S47C2_SIZE                               0x1
#define _LCDDATA21_S47C2_LENGTH                             0x1
#define _LCDDATA21_S47C2_MASK                               0x80

// Register: LCDDATA22
#define LCDDATA22 LCDDATA22
extern volatile unsigned char           LCDDATA22           __at(0xEA4);
#ifndef _LIB_BUILD
asm("LCDDATA22 equ 0EA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C2                  :1;
        unsigned S49C2                  :1;
        unsigned S50C2                  :1;
        unsigned S51C2                  :1;
        unsigned S52C2                  :1;
        unsigned S53C2                  :1;
        unsigned S54C2                  :1;
        unsigned S55C2                  :1;
    };
} LCDDATA22bits_t;
extern volatile LCDDATA22bits_t LCDDATA22bits __at(0xEA4);
// bitfield macros
#define _LCDDATA22_S48C2_POSN                               0x0
#define _LCDDATA22_S48C2_POSITION                           0x0
#define _LCDDATA22_S48C2_SIZE                               0x1
#define _LCDDATA22_S48C2_LENGTH                             0x1
#define _LCDDATA22_S48C2_MASK                               0x1
#define _LCDDATA22_S49C2_POSN                               0x1
#define _LCDDATA22_S49C2_POSITION                           0x1
#define _LCDDATA22_S49C2_SIZE                               0x1
#define _LCDDATA22_S49C2_LENGTH                             0x1
#define _LCDDATA22_S49C2_MASK                               0x2
#define _LCDDATA22_S50C2_POSN                               0x2
#define _LCDDATA22_S50C2_POSITION                           0x2
#define _LCDDATA22_S50C2_SIZE                               0x1
#define _LCDDATA22_S50C2_LENGTH                             0x1
#define _LCDDATA22_S50C2_MASK                               0x4
#define _LCDDATA22_S51C2_POSN                               0x3
#define _LCDDATA22_S51C2_POSITION                           0x3
#define _LCDDATA22_S51C2_SIZE                               0x1
#define _LCDDATA22_S51C2_LENGTH                             0x1
#define _LCDDATA22_S51C2_MASK                               0x8
#define _LCDDATA22_S52C2_POSN                               0x4
#define _LCDDATA22_S52C2_POSITION                           0x4
#define _LCDDATA22_S52C2_SIZE                               0x1
#define _LCDDATA22_S52C2_LENGTH                             0x1
#define _LCDDATA22_S52C2_MASK                               0x10
#define _LCDDATA22_S53C2_POSN                               0x5
#define _LCDDATA22_S53C2_POSITION                           0x5
#define _LCDDATA22_S53C2_SIZE                               0x1
#define _LCDDATA22_S53C2_LENGTH                             0x1
#define _LCDDATA22_S53C2_MASK                               0x20
#define _LCDDATA22_S54C2_POSN                               0x6
#define _LCDDATA22_S54C2_POSITION                           0x6
#define _LCDDATA22_S54C2_SIZE                               0x1
#define _LCDDATA22_S54C2_LENGTH                             0x1
#define _LCDDATA22_S54C2_MASK                               0x40
#define _LCDDATA22_S55C2_POSN                               0x7
#define _LCDDATA22_S55C2_POSITION                           0x7
#define _LCDDATA22_S55C2_SIZE                               0x1
#define _LCDDATA22_S55C2_LENGTH                             0x1
#define _LCDDATA22_S55C2_MASK                               0x80

// Register: LCDDATA23
#define LCDDATA23 LCDDATA23
extern volatile unsigned char           LCDDATA23           __at(0xEA5);
#ifndef _LIB_BUILD
asm("LCDDATA23 equ 0EA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C2                  :1;
        unsigned S57C2                  :1;
        unsigned S58C2                  :1;
        unsigned S59C2                  :1;
        unsigned S60C2                  :1;
        unsigned S61C2                  :1;
        unsigned S62C2                  :1;
        unsigned S63C2                  :1;
    };
} LCDDATA23bits_t;
extern volatile LCDDATA23bits_t LCDDATA23bits __at(0xEA5);
// bitfield macros
#define _LCDDATA23_S56C2_POSN                               0x0
#define _LCDDATA23_S56C2_POSITION                           0x0
#define _LCDDATA23_S56C2_SIZE                               0x1
#define _LCDDATA23_S56C2_LENGTH                             0x1
#define _LCDDATA23_S56C2_MASK                               0x1
#define _LCDDATA23_S57C2_POSN                               0x1
#define _LCDDATA23_S57C2_POSITION                           0x1
#define _LCDDATA23_S57C2_SIZE                               0x1
#define _LCDDATA23_S57C2_LENGTH                             0x1
#define _LCDDATA23_S57C2_MASK                               0x2
#define _LCDDATA23_S58C2_POSN                               0x2
#define _LCDDATA23_S58C2_POSITION                           0x2
#define _LCDDATA23_S58C2_SIZE                               0x1
#define _LCDDATA23_S58C2_LENGTH                             0x1
#define _LCDDATA23_S58C2_MASK                               0x4
#define _LCDDATA23_S59C2_POSN                               0x3
#define _LCDDATA23_S59C2_POSITION                           0x3
#define _LCDDATA23_S59C2_SIZE                               0x1
#define _LCDDATA23_S59C2_LENGTH                             0x1
#define _LCDDATA23_S59C2_MASK                               0x8
#define _LCDDATA23_S60C2_POSN                               0x4
#define _LCDDATA23_S60C2_POSITION                           0x4
#define _LCDDATA23_S60C2_SIZE                               0x1
#define _LCDDATA23_S60C2_LENGTH                             0x1
#define _LCDDATA23_S60C2_MASK                               0x10
#define _LCDDATA23_S61C2_POSN                               0x5
#define _LCDDATA23_S61C2_POSITION                           0x5
#define _LCDDATA23_S61C2_SIZE                               0x1
#define _LCDDATA23_S61C2_LENGTH                             0x1
#define _LCDDATA23_S61C2_MASK                               0x20
#define _LCDDATA23_S62C2_POSN                               0x6
#define _LCDDATA23_S62C2_POSITION                           0x6
#define _LCDDATA23_S62C2_SIZE                               0x1
#define _LCDDATA23_S62C2_LENGTH                             0x1
#define _LCDDATA23_S62C2_MASK                               0x40
#define _LCDDATA23_S63C2_POSN                               0x7
#define _LCDDATA23_S63C2_POSITION                           0x7
#define _LCDDATA23_S63C2_SIZE                               0x1
#define _LCDDATA23_S63C2_LENGTH                             0x1
#define _LCDDATA23_S63C2_MASK                               0x80

// Register: LCDDATA24
#define LCDDATA24 LCDDATA24
extern volatile unsigned char           LCDDATA24           __at(0xEA6);
#ifndef _LIB_BUILD
asm("LCDDATA24 equ 0EA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C3                  :1;
        unsigned S01C3                  :1;
        unsigned S02C3                  :1;
        unsigned S03C3                  :1;
        unsigned S04C3                  :1;
        unsigned S05C3                  :1;
        unsigned S06C3                  :1;
        unsigned S07C3                  :1;
    };
} LCDDATA24bits_t;
extern volatile LCDDATA24bits_t LCDDATA24bits __at(0xEA6);
// bitfield macros
#define _LCDDATA24_S00C3_POSN                               0x0
#define _LCDDATA24_S00C3_POSITION                           0x0
#define _LCDDATA24_S00C3_SIZE                               0x1
#define _LCDDATA24_S00C3_LENGTH                             0x1
#define _LCDDATA24_S00C3_MASK                               0x1
#define _LCDDATA24_S01C3_POSN                               0x1
#define _LCDDATA24_S01C3_POSITION                           0x1
#define _LCDDATA24_S01C3_SIZE                               0x1
#define _LCDDATA24_S01C3_LENGTH                             0x1
#define _LCDDATA24_S01C3_MASK                               0x2
#define _LCDDATA24_S02C3_POSN                               0x2
#define _LCDDATA24_S02C3_POSITION                           0x2
#define _LCDDATA24_S02C3_SIZE                               0x1
#define _LCDDATA24_S02C3_LENGTH                             0x1
#define _LCDDATA24_S02C3_MASK                               0x4
#define _LCDDATA24_S03C3_POSN                               0x3
#define _LCDDATA24_S03C3_POSITION                           0x3
#define _LCDDATA24_S03C3_SIZE                               0x1
#define _LCDDATA24_S03C3_LENGTH                             0x1
#define _LCDDATA24_S03C3_MASK                               0x8
#define _LCDDATA24_S04C3_POSN                               0x4
#define _LCDDATA24_S04C3_POSITION                           0x4
#define _LCDDATA24_S04C3_SIZE                               0x1
#define _LCDDATA24_S04C3_LENGTH                             0x1
#define _LCDDATA24_S04C3_MASK                               0x10
#define _LCDDATA24_S05C3_POSN                               0x5
#define _LCDDATA24_S05C3_POSITION                           0x5
#define _LCDDATA24_S05C3_SIZE                               0x1
#define _LCDDATA24_S05C3_LENGTH                             0x1
#define _LCDDATA24_S05C3_MASK                               0x20
#define _LCDDATA24_S06C3_POSN                               0x6
#define _LCDDATA24_S06C3_POSITION                           0x6
#define _LCDDATA24_S06C3_SIZE                               0x1
#define _LCDDATA24_S06C3_LENGTH                             0x1
#define _LCDDATA24_S06C3_MASK                               0x40
#define _LCDDATA24_S07C3_POSN                               0x7
#define _LCDDATA24_S07C3_POSITION                           0x7
#define _LCDDATA24_S07C3_SIZE                               0x1
#define _LCDDATA24_S07C3_LENGTH                             0x1
#define _LCDDATA24_S07C3_MASK                               0x80

// Register: LCDDATA25
#define LCDDATA25 LCDDATA25
extern volatile unsigned char           LCDDATA25           __at(0xEA7);
#ifndef _LIB_BUILD
asm("LCDDATA25 equ 0EA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C3                  :1;
        unsigned S09C3                  :1;
        unsigned S10C3                  :1;
        unsigned S11C3                  :1;
        unsigned S12C3                  :1;
        unsigned S13C3                  :1;
        unsigned S14C3                  :1;
        unsigned S15C3                  :1;
    };
} LCDDATA25bits_t;
extern volatile LCDDATA25bits_t LCDDATA25bits __at(0xEA7);
// bitfield macros
#define _LCDDATA25_S08C3_POSN                               0x0
#define _LCDDATA25_S08C3_POSITION                           0x0
#define _LCDDATA25_S08C3_SIZE                               0x1
#define _LCDDATA25_S08C3_LENGTH                             0x1
#define _LCDDATA25_S08C3_MASK                               0x1
#define _LCDDATA25_S09C3_POSN                               0x1
#define _LCDDATA25_S09C3_POSITION                           0x1
#define _LCDDATA25_S09C3_SIZE                               0x1
#define _LCDDATA25_S09C3_LENGTH                             0x1
#define _LCDDATA25_S09C3_MASK                               0x2
#define _LCDDATA25_S10C3_POSN                               0x2
#define _LCDDATA25_S10C3_POSITION                           0x2
#define _LCDDATA25_S10C3_SIZE                               0x1
#define _LCDDATA25_S10C3_LENGTH                             0x1
#define _LCDDATA25_S10C3_MASK                               0x4
#define _LCDDATA25_S11C3_POSN                               0x3
#define _LCDDATA25_S11C3_POSITION                           0x3
#define _LCDDATA25_S11C3_SIZE                               0x1
#define _LCDDATA25_S11C3_LENGTH                             0x1
#define _LCDDATA25_S11C3_MASK                               0x8
#define _LCDDATA25_S12C3_POSN                               0x4
#define _LCDDATA25_S12C3_POSITION                           0x4
#define _LCDDATA25_S12C3_SIZE                               0x1
#define _LCDDATA25_S12C3_LENGTH                             0x1
#define _LCDDATA25_S12C3_MASK                               0x10
#define _LCDDATA25_S13C3_POSN                               0x5
#define _LCDDATA25_S13C3_POSITION                           0x5
#define _LCDDATA25_S13C3_SIZE                               0x1
#define _LCDDATA25_S13C3_LENGTH                             0x1
#define _LCDDATA25_S13C3_MASK                               0x20
#define _LCDDATA25_S14C3_POSN                               0x6
#define _LCDDATA25_S14C3_POSITION                           0x6
#define _LCDDATA25_S14C3_SIZE                               0x1
#define _LCDDATA25_S14C3_LENGTH                             0x1
#define _LCDDATA25_S14C3_MASK                               0x40
#define _LCDDATA25_S15C3_POSN                               0x7
#define _LCDDATA25_S15C3_POSITION                           0x7
#define _LCDDATA25_S15C3_SIZE                               0x1
#define _LCDDATA25_S15C3_LENGTH                             0x1
#define _LCDDATA25_S15C3_MASK                               0x80

// Register: LCDDATA26
#define LCDDATA26 LCDDATA26
extern volatile unsigned char           LCDDATA26           __at(0xEA8);
#ifndef _LIB_BUILD
asm("LCDDATA26 equ 0EA8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C3                  :1;
        unsigned S17C3                  :1;
        unsigned S18C3                  :1;
        unsigned S19C3                  :1;
        unsigned S20C3                  :1;
        unsigned S21C3                  :1;
        unsigned S22C3                  :1;
        unsigned S23C3                  :1;
    };
} LCDDATA26bits_t;
extern volatile LCDDATA26bits_t LCDDATA26bits __at(0xEA8);
// bitfield macros
#define _LCDDATA26_S16C3_POSN                               0x0
#define _LCDDATA26_S16C3_POSITION                           0x0
#define _LCDDATA26_S16C3_SIZE                               0x1
#define _LCDDATA26_S16C3_LENGTH                             0x1
#define _LCDDATA26_S16C3_MASK                               0x1
#define _LCDDATA26_S17C3_POSN                               0x1
#define _LCDDATA26_S17C3_POSITION                           0x1
#define _LCDDATA26_S17C3_SIZE                               0x1
#define _LCDDATA26_S17C3_LENGTH                             0x1
#define _LCDDATA26_S17C3_MASK                               0x2
#define _LCDDATA26_S18C3_POSN                               0x2
#define _LCDDATA26_S18C3_POSITION                           0x2
#define _LCDDATA26_S18C3_SIZE                               0x1
#define _LCDDATA26_S18C3_LENGTH                             0x1
#define _LCDDATA26_S18C3_MASK                               0x4
#define _LCDDATA26_S19C3_POSN                               0x3
#define _LCDDATA26_S19C3_POSITION                           0x3
#define _LCDDATA26_S19C3_SIZE                               0x1
#define _LCDDATA26_S19C3_LENGTH                             0x1
#define _LCDDATA26_S19C3_MASK                               0x8
#define _LCDDATA26_S20C3_POSN                               0x4
#define _LCDDATA26_S20C3_POSITION                           0x4
#define _LCDDATA26_S20C3_SIZE                               0x1
#define _LCDDATA26_S20C3_LENGTH                             0x1
#define _LCDDATA26_S20C3_MASK                               0x10
#define _LCDDATA26_S21C3_POSN                               0x5
#define _LCDDATA26_S21C3_POSITION                           0x5
#define _LCDDATA26_S21C3_SIZE                               0x1
#define _LCDDATA26_S21C3_LENGTH                             0x1
#define _LCDDATA26_S21C3_MASK                               0x20
#define _LCDDATA26_S22C3_POSN                               0x6
#define _LCDDATA26_S22C3_POSITION                           0x6
#define _LCDDATA26_S22C3_SIZE                               0x1
#define _LCDDATA26_S22C3_LENGTH                             0x1
#define _LCDDATA26_S22C3_MASK                               0x40
#define _LCDDATA26_S23C3_POSN                               0x7
#define _LCDDATA26_S23C3_POSITION                           0x7
#define _LCDDATA26_S23C3_SIZE                               0x1
#define _LCDDATA26_S23C3_LENGTH                             0x1
#define _LCDDATA26_S23C3_MASK                               0x80

// Register: LCDDATA27
#define LCDDATA27 LCDDATA27
extern volatile unsigned char           LCDDATA27           __at(0xEA9);
#ifndef _LIB_BUILD
asm("LCDDATA27 equ 0EA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C3                  :1;
        unsigned S25C3                  :1;
        unsigned S26C3                  :1;
        unsigned S27C3                  :1;
        unsigned S28C3                  :1;
        unsigned S29C3                  :1;
        unsigned S30C3                  :1;
        unsigned S31C3                  :1;
    };
} LCDDATA27bits_t;
extern volatile LCDDATA27bits_t LCDDATA27bits __at(0xEA9);
// bitfield macros
#define _LCDDATA27_S24C3_POSN                               0x0
#define _LCDDATA27_S24C3_POSITION                           0x0
#define _LCDDATA27_S24C3_SIZE                               0x1
#define _LCDDATA27_S24C3_LENGTH                             0x1
#define _LCDDATA27_S24C3_MASK                               0x1
#define _LCDDATA27_S25C3_POSN                               0x1
#define _LCDDATA27_S25C3_POSITION                           0x1
#define _LCDDATA27_S25C3_SIZE                               0x1
#define _LCDDATA27_S25C3_LENGTH                             0x1
#define _LCDDATA27_S25C3_MASK                               0x2
#define _LCDDATA27_S26C3_POSN                               0x2
#define _LCDDATA27_S26C3_POSITION                           0x2
#define _LCDDATA27_S26C3_SIZE                               0x1
#define _LCDDATA27_S26C3_LENGTH                             0x1
#define _LCDDATA27_S26C3_MASK                               0x4
#define _LCDDATA27_S27C3_POSN                               0x3
#define _LCDDATA27_S27C3_POSITION                           0x3
#define _LCDDATA27_S27C3_SIZE                               0x1
#define _LCDDATA27_S27C3_LENGTH                             0x1
#define _LCDDATA27_S27C3_MASK                               0x8
#define _LCDDATA27_S28C3_POSN                               0x4
#define _LCDDATA27_S28C3_POSITION                           0x4
#define _LCDDATA27_S28C3_SIZE                               0x1
#define _LCDDATA27_S28C3_LENGTH                             0x1
#define _LCDDATA27_S28C3_MASK                               0x10
#define _LCDDATA27_S29C3_POSN                               0x5
#define _LCDDATA27_S29C3_POSITION                           0x5
#define _LCDDATA27_S29C3_SIZE                               0x1
#define _LCDDATA27_S29C3_LENGTH                             0x1
#define _LCDDATA27_S29C3_MASK                               0x20
#define _LCDDATA27_S30C3_POSN                               0x6
#define _LCDDATA27_S30C3_POSITION                           0x6
#define _LCDDATA27_S30C3_SIZE                               0x1
#define _LCDDATA27_S30C3_LENGTH                             0x1
#define _LCDDATA27_S30C3_MASK                               0x40
#define _LCDDATA27_S31C3_POSN                               0x7
#define _LCDDATA27_S31C3_POSITION                           0x7
#define _LCDDATA27_S31C3_SIZE                               0x1
#define _LCDDATA27_S31C3_LENGTH                             0x1
#define _LCDDATA27_S31C3_MASK                               0x80

// Register: LCDDATA28
#define LCDDATA28 LCDDATA28
extern volatile unsigned char           LCDDATA28           __at(0xEAA);
#ifndef _LIB_BUILD
asm("LCDDATA28 equ 0EAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C3                  :1;
        unsigned S33C3                  :1;
        unsigned S34C3                  :1;
        unsigned S35C3                  :1;
        unsigned S36C3                  :1;
        unsigned S37C3                  :1;
        unsigned S38C3                  :1;
        unsigned S39C3                  :1;
    };
} LCDDATA28bits_t;
extern volatile LCDDATA28bits_t LCDDATA28bits __at(0xEAA);
// bitfield macros
#define _LCDDATA28_S32C3_POSN                               0x0
#define _LCDDATA28_S32C3_POSITION                           0x0
#define _LCDDATA28_S32C3_SIZE                               0x1
#define _LCDDATA28_S32C3_LENGTH                             0x1
#define _LCDDATA28_S32C3_MASK                               0x1
#define _LCDDATA28_S33C3_POSN                               0x1
#define _LCDDATA28_S33C3_POSITION                           0x1
#define _LCDDATA28_S33C3_SIZE                               0x1
#define _LCDDATA28_S33C3_LENGTH                             0x1
#define _LCDDATA28_S33C3_MASK                               0x2
#define _LCDDATA28_S34C3_POSN                               0x2
#define _LCDDATA28_S34C3_POSITION                           0x2
#define _LCDDATA28_S34C3_SIZE                               0x1
#define _LCDDATA28_S34C3_LENGTH                             0x1
#define _LCDDATA28_S34C3_MASK                               0x4
#define _LCDDATA28_S35C3_POSN                               0x3
#define _LCDDATA28_S35C3_POSITION                           0x3
#define _LCDDATA28_S35C3_SIZE                               0x1
#define _LCDDATA28_S35C3_LENGTH                             0x1
#define _LCDDATA28_S35C3_MASK                               0x8
#define _LCDDATA28_S36C3_POSN                               0x4
#define _LCDDATA28_S36C3_POSITION                           0x4
#define _LCDDATA28_S36C3_SIZE                               0x1
#define _LCDDATA28_S36C3_LENGTH                             0x1
#define _LCDDATA28_S36C3_MASK                               0x10
#define _LCDDATA28_S37C3_POSN                               0x5
#define _LCDDATA28_S37C3_POSITION                           0x5
#define _LCDDATA28_S37C3_SIZE                               0x1
#define _LCDDATA28_S37C3_LENGTH                             0x1
#define _LCDDATA28_S37C3_MASK                               0x20
#define _LCDDATA28_S38C3_POSN                               0x6
#define _LCDDATA28_S38C3_POSITION                           0x6
#define _LCDDATA28_S38C3_SIZE                               0x1
#define _LCDDATA28_S38C3_LENGTH                             0x1
#define _LCDDATA28_S38C3_MASK                               0x40
#define _LCDDATA28_S39C3_POSN                               0x7
#define _LCDDATA28_S39C3_POSITION                           0x7
#define _LCDDATA28_S39C3_SIZE                               0x1
#define _LCDDATA28_S39C3_LENGTH                             0x1
#define _LCDDATA28_S39C3_MASK                               0x80

// Register: LCDDATA29
#define LCDDATA29 LCDDATA29
extern volatile unsigned char           LCDDATA29           __at(0xEAB);
#ifndef _LIB_BUILD
asm("LCDDATA29 equ 0EABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C3                  :1;
        unsigned S41C3                  :1;
        unsigned S42C3                  :1;
        unsigned S43C3                  :1;
        unsigned S44C3                  :1;
        unsigned S45C3                  :1;
        unsigned S46C3                  :1;
        unsigned S47C3                  :1;
    };
} LCDDATA29bits_t;
extern volatile LCDDATA29bits_t LCDDATA29bits __at(0xEAB);
// bitfield macros
#define _LCDDATA29_S40C3_POSN                               0x0
#define _LCDDATA29_S40C3_POSITION                           0x0
#define _LCDDATA29_S40C3_SIZE                               0x1
#define _LCDDATA29_S40C3_LENGTH                             0x1
#define _LCDDATA29_S40C3_MASK                               0x1
#define _LCDDATA29_S41C3_POSN                               0x1
#define _LCDDATA29_S41C3_POSITION                           0x1
#define _LCDDATA29_S41C3_SIZE                               0x1
#define _LCDDATA29_S41C3_LENGTH                             0x1
#define _LCDDATA29_S41C3_MASK                               0x2
#define _LCDDATA29_S42C3_POSN                               0x2
#define _LCDDATA29_S42C3_POSITION                           0x2
#define _LCDDATA29_S42C3_SIZE                               0x1
#define _LCDDATA29_S42C3_LENGTH                             0x1
#define _LCDDATA29_S42C3_MASK                               0x4
#define _LCDDATA29_S43C3_POSN                               0x3
#define _LCDDATA29_S43C3_POSITION                           0x3
#define _LCDDATA29_S43C3_SIZE                               0x1
#define _LCDDATA29_S43C3_LENGTH                             0x1
#define _LCDDATA29_S43C3_MASK                               0x8
#define _LCDDATA29_S44C3_POSN                               0x4
#define _LCDDATA29_S44C3_POSITION                           0x4
#define _LCDDATA29_S44C3_SIZE                               0x1
#define _LCDDATA29_S44C3_LENGTH                             0x1
#define _LCDDATA29_S44C3_MASK                               0x10
#define _LCDDATA29_S45C3_POSN                               0x5
#define _LCDDATA29_S45C3_POSITION                           0x5
#define _LCDDATA29_S45C3_SIZE                               0x1
#define _LCDDATA29_S45C3_LENGTH                             0x1
#define _LCDDATA29_S45C3_MASK                               0x20
#define _LCDDATA29_S46C3_POSN                               0x6
#define _LCDDATA29_S46C3_POSITION                           0x6
#define _LCDDATA29_S46C3_SIZE                               0x1
#define _LCDDATA29_S46C3_LENGTH                             0x1
#define _LCDDATA29_S46C3_MASK                               0x40
#define _LCDDATA29_S47C3_POSN                               0x7
#define _LCDDATA29_S47C3_POSITION                           0x7
#define _LCDDATA29_S47C3_SIZE                               0x1
#define _LCDDATA29_S47C3_LENGTH                             0x1
#define _LCDDATA29_S47C3_MASK                               0x80

// Register: LCDDATA30
#define LCDDATA30 LCDDATA30
extern volatile unsigned char           LCDDATA30           __at(0xEAC);
#ifndef _LIB_BUILD
asm("LCDDATA30 equ 0EACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C3                  :1;
        unsigned S49C3                  :1;
        unsigned S50C3                  :1;
        unsigned S51C3                  :1;
        unsigned S52C3                  :1;
        unsigned S53C3                  :1;
        unsigned S54C3                  :1;
        unsigned S55C3                  :1;
    };
} LCDDATA30bits_t;
extern volatile LCDDATA30bits_t LCDDATA30bits __at(0xEAC);
// bitfield macros
#define _LCDDATA30_S48C3_POSN                               0x0
#define _LCDDATA30_S48C3_POSITION                           0x0
#define _LCDDATA30_S48C3_SIZE                               0x1
#define _LCDDATA30_S48C3_LENGTH                             0x1
#define _LCDDATA30_S48C3_MASK                               0x1
#define _LCDDATA30_S49C3_POSN                               0x1
#define _LCDDATA30_S49C3_POSITION                           0x1
#define _LCDDATA30_S49C3_SIZE                               0x1
#define _LCDDATA30_S49C3_LENGTH                             0x1
#define _LCDDATA30_S49C3_MASK                               0x2
#define _LCDDATA30_S50C3_POSN                               0x2
#define _LCDDATA30_S50C3_POSITION                           0x2
#define _LCDDATA30_S50C3_SIZE                               0x1
#define _LCDDATA30_S50C3_LENGTH                             0x1
#define _LCDDATA30_S50C3_MASK                               0x4
#define _LCDDATA30_S51C3_POSN                               0x3
#define _LCDDATA30_S51C3_POSITION                           0x3
#define _LCDDATA30_S51C3_SIZE                               0x1
#define _LCDDATA30_S51C3_LENGTH                             0x1
#define _LCDDATA30_S51C3_MASK                               0x8
#define _LCDDATA30_S52C3_POSN                               0x4
#define _LCDDATA30_S52C3_POSITION                           0x4
#define _LCDDATA30_S52C3_SIZE                               0x1
#define _LCDDATA30_S52C3_LENGTH                             0x1
#define _LCDDATA30_S52C3_MASK                               0x10
#define _LCDDATA30_S53C3_POSN                               0x5
#define _LCDDATA30_S53C3_POSITION                           0x5
#define _LCDDATA30_S53C3_SIZE                               0x1
#define _LCDDATA30_S53C3_LENGTH                             0x1
#define _LCDDATA30_S53C3_MASK                               0x20
#define _LCDDATA30_S54C3_POSN                               0x6
#define _LCDDATA30_S54C3_POSITION                           0x6
#define _LCDDATA30_S54C3_SIZE                               0x1
#define _LCDDATA30_S54C3_LENGTH                             0x1
#define _LCDDATA30_S54C3_MASK                               0x40
#define _LCDDATA30_S55C3_POSN                               0x7
#define _LCDDATA30_S55C3_POSITION                           0x7
#define _LCDDATA30_S55C3_SIZE                               0x1
#define _LCDDATA30_S55C3_LENGTH                             0x1
#define _LCDDATA30_S55C3_MASK                               0x80

// Register: LCDDATA31
#define LCDDATA31 LCDDATA31
extern volatile unsigned char           LCDDATA31           __at(0xEAD);
#ifndef _LIB_BUILD
asm("LCDDATA31 equ 0EADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C3                  :1;
        unsigned S57C3                  :1;
        unsigned S58C3                  :1;
        unsigned S59C3                  :1;
        unsigned S60C3                  :1;
        unsigned S61C3                  :1;
        unsigned S62C3                  :1;
        unsigned S63C3                  :1;
    };
} LCDDATA31bits_t;
extern volatile LCDDATA31bits_t LCDDATA31bits __at(0xEAD);
// bitfield macros
#define _LCDDATA31_S56C3_POSN                               0x0
#define _LCDDATA31_S56C3_POSITION                           0x0
#define _LCDDATA31_S56C3_SIZE                               0x1
#define _LCDDATA31_S56C3_LENGTH                             0x1
#define _LCDDATA31_S56C3_MASK                               0x1
#define _LCDDATA31_S57C3_POSN                               0x1
#define _LCDDATA31_S57C3_POSITION                           0x1
#define _LCDDATA31_S57C3_SIZE                               0x1
#define _LCDDATA31_S57C3_LENGTH                             0x1
#define _LCDDATA31_S57C3_MASK                               0x2
#define _LCDDATA31_S58C3_POSN                               0x2
#define _LCDDATA31_S58C3_POSITION                           0x2
#define _LCDDATA31_S58C3_SIZE                               0x1
#define _LCDDATA31_S58C3_LENGTH                             0x1
#define _LCDDATA31_S58C3_MASK                               0x4
#define _LCDDATA31_S59C3_POSN                               0x3
#define _LCDDATA31_S59C3_POSITION                           0x3
#define _LCDDATA31_S59C3_SIZE                               0x1
#define _LCDDATA31_S59C3_LENGTH                             0x1
#define _LCDDATA31_S59C3_MASK                               0x8
#define _LCDDATA31_S60C3_POSN                               0x4
#define _LCDDATA31_S60C3_POSITION                           0x4
#define _LCDDATA31_S60C3_SIZE                               0x1
#define _LCDDATA31_S60C3_LENGTH                             0x1
#define _LCDDATA31_S60C3_MASK                               0x10
#define _LCDDATA31_S61C3_POSN                               0x5
#define _LCDDATA31_S61C3_POSITION                           0x5
#define _LCDDATA31_S61C3_SIZE                               0x1
#define _LCDDATA31_S61C3_LENGTH                             0x1
#define _LCDDATA31_S61C3_MASK                               0x20
#define _LCDDATA31_S62C3_POSN                               0x6
#define _LCDDATA31_S62C3_POSITION                           0x6
#define _LCDDATA31_S62C3_SIZE                               0x1
#define _LCDDATA31_S62C3_LENGTH                             0x1
#define _LCDDATA31_S62C3_MASK                               0x40
#define _LCDDATA31_S63C3_POSN                               0x7
#define _LCDDATA31_S63C3_POSITION                           0x7
#define _LCDDATA31_S63C3_SIZE                               0x1
#define _LCDDATA31_S63C3_LENGTH                             0x1
#define _LCDDATA31_S63C3_MASK                               0x80

// Register: LCDDATA32
#define LCDDATA32 LCDDATA32
extern volatile unsigned char           LCDDATA32           __at(0xEAE);
#ifndef _LIB_BUILD
asm("LCDDATA32 equ 0EAEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C4                  :1;
        unsigned S01C4                  :1;
        unsigned S02C4                  :1;
        unsigned S03C4                  :1;
        unsigned S04C4                  :1;
        unsigned S05C4                  :1;
        unsigned S06C4                  :1;
        unsigned S07C4                  :1;
    };
} LCDDATA32bits_t;
extern volatile LCDDATA32bits_t LCDDATA32bits __at(0xEAE);
// bitfield macros
#define _LCDDATA32_S00C4_POSN                               0x0
#define _LCDDATA32_S00C4_POSITION                           0x0
#define _LCDDATA32_S00C4_SIZE                               0x1
#define _LCDDATA32_S00C4_LENGTH                             0x1
#define _LCDDATA32_S00C4_MASK                               0x1
#define _LCDDATA32_S01C4_POSN                               0x1
#define _LCDDATA32_S01C4_POSITION                           0x1
#define _LCDDATA32_S01C4_SIZE                               0x1
#define _LCDDATA32_S01C4_LENGTH                             0x1
#define _LCDDATA32_S01C4_MASK                               0x2
#define _LCDDATA32_S02C4_POSN                               0x2
#define _LCDDATA32_S02C4_POSITION                           0x2
#define _LCDDATA32_S02C4_SIZE                               0x1
#define _LCDDATA32_S02C4_LENGTH                             0x1
#define _LCDDATA32_S02C4_MASK                               0x4
#define _LCDDATA32_S03C4_POSN                               0x3
#define _LCDDATA32_S03C4_POSITION                           0x3
#define _LCDDATA32_S03C4_SIZE                               0x1
#define _LCDDATA32_S03C4_LENGTH                             0x1
#define _LCDDATA32_S03C4_MASK                               0x8
#define _LCDDATA32_S04C4_POSN                               0x4
#define _LCDDATA32_S04C4_POSITION                           0x4
#define _LCDDATA32_S04C4_SIZE                               0x1
#define _LCDDATA32_S04C4_LENGTH                             0x1
#define _LCDDATA32_S04C4_MASK                               0x10
#define _LCDDATA32_S05C4_POSN                               0x5
#define _LCDDATA32_S05C4_POSITION                           0x5
#define _LCDDATA32_S05C4_SIZE                               0x1
#define _LCDDATA32_S05C4_LENGTH                             0x1
#define _LCDDATA32_S05C4_MASK                               0x20
#define _LCDDATA32_S06C4_POSN                               0x6
#define _LCDDATA32_S06C4_POSITION                           0x6
#define _LCDDATA32_S06C4_SIZE                               0x1
#define _LCDDATA32_S06C4_LENGTH                             0x1
#define _LCDDATA32_S06C4_MASK                               0x40
#define _LCDDATA32_S07C4_POSN                               0x7
#define _LCDDATA32_S07C4_POSITION                           0x7
#define _LCDDATA32_S07C4_SIZE                               0x1
#define _LCDDATA32_S07C4_LENGTH                             0x1
#define _LCDDATA32_S07C4_MASK                               0x80

// Register: LCDDATA33
#define LCDDATA33 LCDDATA33
extern volatile unsigned char           LCDDATA33           __at(0xEAF);
#ifndef _LIB_BUILD
asm("LCDDATA33 equ 0EAFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C4                  :1;
        unsigned S09C4                  :1;
        unsigned S10C4                  :1;
        unsigned S11C4                  :1;
        unsigned S12C4                  :1;
        unsigned S13C4                  :1;
        unsigned S14C4                  :1;
        unsigned S15C4                  :1;
    };
} LCDDATA33bits_t;
extern volatile LCDDATA33bits_t LCDDATA33bits __at(0xEAF);
// bitfield macros
#define _LCDDATA33_S08C4_POSN                               0x0
#define _LCDDATA33_S08C4_POSITION                           0x0
#define _LCDDATA33_S08C4_SIZE                               0x1
#define _LCDDATA33_S08C4_LENGTH                             0x1
#define _LCDDATA33_S08C4_MASK                               0x1
#define _LCDDATA33_S09C4_POSN                               0x1
#define _LCDDATA33_S09C4_POSITION                           0x1
#define _LCDDATA33_S09C4_SIZE                               0x1
#define _LCDDATA33_S09C4_LENGTH                             0x1
#define _LCDDATA33_S09C4_MASK                               0x2
#define _LCDDATA33_S10C4_POSN                               0x2
#define _LCDDATA33_S10C4_POSITION                           0x2
#define _LCDDATA33_S10C4_SIZE                               0x1
#define _LCDDATA33_S10C4_LENGTH                             0x1
#define _LCDDATA33_S10C4_MASK                               0x4
#define _LCDDATA33_S11C4_POSN                               0x3
#define _LCDDATA33_S11C4_POSITION                           0x3
#define _LCDDATA33_S11C4_SIZE                               0x1
#define _LCDDATA33_S11C4_LENGTH                             0x1
#define _LCDDATA33_S11C4_MASK                               0x8
#define _LCDDATA33_S12C4_POSN                               0x4
#define _LCDDATA33_S12C4_POSITION                           0x4
#define _LCDDATA33_S12C4_SIZE                               0x1
#define _LCDDATA33_S12C4_LENGTH                             0x1
#define _LCDDATA33_S12C4_MASK                               0x10
#define _LCDDATA33_S13C4_POSN                               0x5
#define _LCDDATA33_S13C4_POSITION                           0x5
#define _LCDDATA33_S13C4_SIZE                               0x1
#define _LCDDATA33_S13C4_LENGTH                             0x1
#define _LCDDATA33_S13C4_MASK                               0x20
#define _LCDDATA33_S14C4_POSN                               0x6
#define _LCDDATA33_S14C4_POSITION                           0x6
#define _LCDDATA33_S14C4_SIZE                               0x1
#define _LCDDATA33_S14C4_LENGTH                             0x1
#define _LCDDATA33_S14C4_MASK                               0x40
#define _LCDDATA33_S15C4_POSN                               0x7
#define _LCDDATA33_S15C4_POSITION                           0x7
#define _LCDDATA33_S15C4_SIZE                               0x1
#define _LCDDATA33_S15C4_LENGTH                             0x1
#define _LCDDATA33_S15C4_MASK                               0x80

// Register: LCDDATA34
#define LCDDATA34 LCDDATA34
extern volatile unsigned char           LCDDATA34           __at(0xEB0);
#ifndef _LIB_BUILD
asm("LCDDATA34 equ 0EB0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C4                  :1;
        unsigned S17C4                  :1;
        unsigned S18C4                  :1;
        unsigned S19C4                  :1;
        unsigned S20C4                  :1;
        unsigned S21C4                  :1;
        unsigned S22C4                  :1;
        unsigned S23C4                  :1;
    };
} LCDDATA34bits_t;
extern volatile LCDDATA34bits_t LCDDATA34bits __at(0xEB0);
// bitfield macros
#define _LCDDATA34_S16C4_POSN                               0x0
#define _LCDDATA34_S16C4_POSITION                           0x0
#define _LCDDATA34_S16C4_SIZE                               0x1
#define _LCDDATA34_S16C4_LENGTH                             0x1
#define _LCDDATA34_S16C4_MASK                               0x1
#define _LCDDATA34_S17C4_POSN                               0x1
#define _LCDDATA34_S17C4_POSITION                           0x1
#define _LCDDATA34_S17C4_SIZE                               0x1
#define _LCDDATA34_S17C4_LENGTH                             0x1
#define _LCDDATA34_S17C4_MASK                               0x2
#define _LCDDATA34_S18C4_POSN                               0x2
#define _LCDDATA34_S18C4_POSITION                           0x2
#define _LCDDATA34_S18C4_SIZE                               0x1
#define _LCDDATA34_S18C4_LENGTH                             0x1
#define _LCDDATA34_S18C4_MASK                               0x4
#define _LCDDATA34_S19C4_POSN                               0x3
#define _LCDDATA34_S19C4_POSITION                           0x3
#define _LCDDATA34_S19C4_SIZE                               0x1
#define _LCDDATA34_S19C4_LENGTH                             0x1
#define _LCDDATA34_S19C4_MASK                               0x8
#define _LCDDATA34_S20C4_POSN                               0x4
#define _LCDDATA34_S20C4_POSITION                           0x4
#define _LCDDATA34_S20C4_SIZE                               0x1
#define _LCDDATA34_S20C4_LENGTH                             0x1
#define _LCDDATA34_S20C4_MASK                               0x10
#define _LCDDATA34_S21C4_POSN                               0x5
#define _LCDDATA34_S21C4_POSITION                           0x5
#define _LCDDATA34_S21C4_SIZE                               0x1
#define _LCDDATA34_S21C4_LENGTH                             0x1
#define _LCDDATA34_S21C4_MASK                               0x20
#define _LCDDATA34_S22C4_POSN                               0x6
#define _LCDDATA34_S22C4_POSITION                           0x6
#define _LCDDATA34_S22C4_SIZE                               0x1
#define _LCDDATA34_S22C4_LENGTH                             0x1
#define _LCDDATA34_S22C4_MASK                               0x40
#define _LCDDATA34_S23C4_POSN                               0x7
#define _LCDDATA34_S23C4_POSITION                           0x7
#define _LCDDATA34_S23C4_SIZE                               0x1
#define _LCDDATA34_S23C4_LENGTH                             0x1
#define _LCDDATA34_S23C4_MASK                               0x80

// Register: LCDDATA35
#define LCDDATA35 LCDDATA35
extern volatile unsigned char           LCDDATA35           __at(0xEB1);
#ifndef _LIB_BUILD
asm("LCDDATA35 equ 0EB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C4                  :1;
        unsigned S25C4                  :1;
        unsigned S26C4                  :1;
        unsigned S27C4                  :1;
        unsigned S28C4                  :1;
        unsigned S29C4                  :1;
        unsigned S30C4                  :1;
        unsigned S31C4                  :1;
    };
} LCDDATA35bits_t;
extern volatile LCDDATA35bits_t LCDDATA35bits __at(0xEB1);
// bitfield macros
#define _LCDDATA35_S24C4_POSN                               0x0
#define _LCDDATA35_S24C4_POSITION                           0x0
#define _LCDDATA35_S24C4_SIZE                               0x1
#define _LCDDATA35_S24C4_LENGTH                             0x1
#define _LCDDATA35_S24C4_MASK                               0x1
#define _LCDDATA35_S25C4_POSN                               0x1
#define _LCDDATA35_S25C4_POSITION                           0x1
#define _LCDDATA35_S25C4_SIZE                               0x1
#define _LCDDATA35_S25C4_LENGTH                             0x1
#define _LCDDATA35_S25C4_MASK                               0x2
#define _LCDDATA35_S26C4_POSN                               0x2
#define _LCDDATA35_S26C4_POSITION                           0x2
#define _LCDDATA35_S26C4_SIZE                               0x1
#define _LCDDATA35_S26C4_LENGTH                             0x1
#define _LCDDATA35_S26C4_MASK                               0x4
#define _LCDDATA35_S27C4_POSN                               0x3
#define _LCDDATA35_S27C4_POSITION                           0x3
#define _LCDDATA35_S27C4_SIZE                               0x1
#define _LCDDATA35_S27C4_LENGTH                             0x1
#define _LCDDATA35_S27C4_MASK                               0x8
#define _LCDDATA35_S28C4_POSN                               0x4
#define _LCDDATA35_S28C4_POSITION                           0x4
#define _LCDDATA35_S28C4_SIZE                               0x1
#define _LCDDATA35_S28C4_LENGTH                             0x1
#define _LCDDATA35_S28C4_MASK                               0x10
#define _LCDDATA35_S29C4_POSN                               0x5
#define _LCDDATA35_S29C4_POSITION                           0x5
#define _LCDDATA35_S29C4_SIZE                               0x1
#define _LCDDATA35_S29C4_LENGTH                             0x1
#define _LCDDATA35_S29C4_MASK                               0x20
#define _LCDDATA35_S30C4_POSN                               0x6
#define _LCDDATA35_S30C4_POSITION                           0x6
#define _LCDDATA35_S30C4_SIZE                               0x1
#define _LCDDATA35_S30C4_LENGTH                             0x1
#define _LCDDATA35_S30C4_MASK                               0x40
#define _LCDDATA35_S31C4_POSN                               0x7
#define _LCDDATA35_S31C4_POSITION                           0x7
#define _LCDDATA35_S31C4_SIZE                               0x1
#define _LCDDATA35_S31C4_LENGTH                             0x1
#define _LCDDATA35_S31C4_MASK                               0x80

// Register: LCDDATA36
#define LCDDATA36 LCDDATA36
extern volatile unsigned char           LCDDATA36           __at(0xEB2);
#ifndef _LIB_BUILD
asm("LCDDATA36 equ 0EB2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C4                  :1;
        unsigned S33C4                  :1;
        unsigned S34C4                  :1;
        unsigned S35C4                  :1;
        unsigned S36C4                  :1;
        unsigned S37C4                  :1;
        unsigned S38C4                  :1;
        unsigned S39C4                  :1;
    };
} LCDDATA36bits_t;
extern volatile LCDDATA36bits_t LCDDATA36bits __at(0xEB2);
// bitfield macros
#define _LCDDATA36_S32C4_POSN                               0x0
#define _LCDDATA36_S32C4_POSITION                           0x0
#define _LCDDATA36_S32C4_SIZE                               0x1
#define _LCDDATA36_S32C4_LENGTH                             0x1
#define _LCDDATA36_S32C4_MASK                               0x1
#define _LCDDATA36_S33C4_POSN                               0x1
#define _LCDDATA36_S33C4_POSITION                           0x1
#define _LCDDATA36_S33C4_SIZE                               0x1
#define _LCDDATA36_S33C4_LENGTH                             0x1
#define _LCDDATA36_S33C4_MASK                               0x2
#define _LCDDATA36_S34C4_POSN                               0x2
#define _LCDDATA36_S34C4_POSITION                           0x2
#define _LCDDATA36_S34C4_SIZE                               0x1
#define _LCDDATA36_S34C4_LENGTH                             0x1
#define _LCDDATA36_S34C4_MASK                               0x4
#define _LCDDATA36_S35C4_POSN                               0x3
#define _LCDDATA36_S35C4_POSITION                           0x3
#define _LCDDATA36_S35C4_SIZE                               0x1
#define _LCDDATA36_S35C4_LENGTH                             0x1
#define _LCDDATA36_S35C4_MASK                               0x8
#define _LCDDATA36_S36C4_POSN                               0x4
#define _LCDDATA36_S36C4_POSITION                           0x4
#define _LCDDATA36_S36C4_SIZE                               0x1
#define _LCDDATA36_S36C4_LENGTH                             0x1
#define _LCDDATA36_S36C4_MASK                               0x10
#define _LCDDATA36_S37C4_POSN                               0x5
#define _LCDDATA36_S37C4_POSITION                           0x5
#define _LCDDATA36_S37C4_SIZE                               0x1
#define _LCDDATA36_S37C4_LENGTH                             0x1
#define _LCDDATA36_S37C4_MASK                               0x20
#define _LCDDATA36_S38C4_POSN                               0x6
#define _LCDDATA36_S38C4_POSITION                           0x6
#define _LCDDATA36_S38C4_SIZE                               0x1
#define _LCDDATA36_S38C4_LENGTH                             0x1
#define _LCDDATA36_S38C4_MASK                               0x40
#define _LCDDATA36_S39C4_POSN                               0x7
#define _LCDDATA36_S39C4_POSITION                           0x7
#define _LCDDATA36_S39C4_SIZE                               0x1
#define _LCDDATA36_S39C4_LENGTH                             0x1
#define _LCDDATA36_S39C4_MASK                               0x80

// Register: LCDDATA37
#define LCDDATA37 LCDDATA37
extern volatile unsigned char           LCDDATA37           __at(0xEB3);
#ifndef _LIB_BUILD
asm("LCDDATA37 equ 0EB3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C4                  :1;
        unsigned S41C4                  :1;
        unsigned S42C4                  :1;
        unsigned S43C4                  :1;
        unsigned S44C4                  :1;
        unsigned S45C4                  :1;
        unsigned S46C4                  :1;
        unsigned S47C4                  :1;
    };
} LCDDATA37bits_t;
extern volatile LCDDATA37bits_t LCDDATA37bits __at(0xEB3);
// bitfield macros
#define _LCDDATA37_S40C4_POSN                               0x0
#define _LCDDATA37_S40C4_POSITION                           0x0
#define _LCDDATA37_S40C4_SIZE                               0x1
#define _LCDDATA37_S40C4_LENGTH                             0x1
#define _LCDDATA37_S40C4_MASK                               0x1
#define _LCDDATA37_S41C4_POSN                               0x1
#define _LCDDATA37_S41C4_POSITION                           0x1
#define _LCDDATA37_S41C4_SIZE                               0x1
#define _LCDDATA37_S41C4_LENGTH                             0x1
#define _LCDDATA37_S41C4_MASK                               0x2
#define _LCDDATA37_S42C4_POSN                               0x2
#define _LCDDATA37_S42C4_POSITION                           0x2
#define _LCDDATA37_S42C4_SIZE                               0x1
#define _LCDDATA37_S42C4_LENGTH                             0x1
#define _LCDDATA37_S42C4_MASK                               0x4
#define _LCDDATA37_S43C4_POSN                               0x3
#define _LCDDATA37_S43C4_POSITION                           0x3
#define _LCDDATA37_S43C4_SIZE                               0x1
#define _LCDDATA37_S43C4_LENGTH                             0x1
#define _LCDDATA37_S43C4_MASK                               0x8
#define _LCDDATA37_S44C4_POSN                               0x4
#define _LCDDATA37_S44C4_POSITION                           0x4
#define _LCDDATA37_S44C4_SIZE                               0x1
#define _LCDDATA37_S44C4_LENGTH                             0x1
#define _LCDDATA37_S44C4_MASK                               0x10
#define _LCDDATA37_S45C4_POSN                               0x5
#define _LCDDATA37_S45C4_POSITION                           0x5
#define _LCDDATA37_S45C4_SIZE                               0x1
#define _LCDDATA37_S45C4_LENGTH                             0x1
#define _LCDDATA37_S45C4_MASK                               0x20
#define _LCDDATA37_S46C4_POSN                               0x6
#define _LCDDATA37_S46C4_POSITION                           0x6
#define _LCDDATA37_S46C4_SIZE                               0x1
#define _LCDDATA37_S46C4_LENGTH                             0x1
#define _LCDDATA37_S46C4_MASK                               0x40
#define _LCDDATA37_S47C4_POSN                               0x7
#define _LCDDATA37_S47C4_POSITION                           0x7
#define _LCDDATA37_S47C4_SIZE                               0x1
#define _LCDDATA37_S47C4_LENGTH                             0x1
#define _LCDDATA37_S47C4_MASK                               0x80

// Register: LCDDATA38
#define LCDDATA38 LCDDATA38
extern volatile unsigned char           LCDDATA38           __at(0xEB4);
#ifndef _LIB_BUILD
asm("LCDDATA38 equ 0EB4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C4                  :1;
        unsigned S49C4                  :1;
        unsigned S50C4                  :1;
        unsigned S51C4                  :1;
        unsigned S52C4                  :1;
        unsigned S53C4                  :1;
        unsigned S54C4                  :1;
        unsigned S55C4                  :1;
    };
} LCDDATA38bits_t;
extern volatile LCDDATA38bits_t LCDDATA38bits __at(0xEB4);
// bitfield macros
#define _LCDDATA38_S48C4_POSN                               0x0
#define _LCDDATA38_S48C4_POSITION                           0x0
#define _LCDDATA38_S48C4_SIZE                               0x1
#define _LCDDATA38_S48C4_LENGTH                             0x1
#define _LCDDATA38_S48C4_MASK                               0x1
#define _LCDDATA38_S49C4_POSN                               0x1
#define _LCDDATA38_S49C4_POSITION                           0x1
#define _LCDDATA38_S49C4_SIZE                               0x1
#define _LCDDATA38_S49C4_LENGTH                             0x1
#define _LCDDATA38_S49C4_MASK                               0x2
#define _LCDDATA38_S50C4_POSN                               0x2
#define _LCDDATA38_S50C4_POSITION                           0x2
#define _LCDDATA38_S50C4_SIZE                               0x1
#define _LCDDATA38_S50C4_LENGTH                             0x1
#define _LCDDATA38_S50C4_MASK                               0x4
#define _LCDDATA38_S51C4_POSN                               0x3
#define _LCDDATA38_S51C4_POSITION                           0x3
#define _LCDDATA38_S51C4_SIZE                               0x1
#define _LCDDATA38_S51C4_LENGTH                             0x1
#define _LCDDATA38_S51C4_MASK                               0x8
#define _LCDDATA38_S52C4_POSN                               0x4
#define _LCDDATA38_S52C4_POSITION                           0x4
#define _LCDDATA38_S52C4_SIZE                               0x1
#define _LCDDATA38_S52C4_LENGTH                             0x1
#define _LCDDATA38_S52C4_MASK                               0x10
#define _LCDDATA38_S53C4_POSN                               0x5
#define _LCDDATA38_S53C4_POSITION                           0x5
#define _LCDDATA38_S53C4_SIZE                               0x1
#define _LCDDATA38_S53C4_LENGTH                             0x1
#define _LCDDATA38_S53C4_MASK                               0x20
#define _LCDDATA38_S54C4_POSN                               0x6
#define _LCDDATA38_S54C4_POSITION                           0x6
#define _LCDDATA38_S54C4_SIZE                               0x1
#define _LCDDATA38_S54C4_LENGTH                             0x1
#define _LCDDATA38_S54C4_MASK                               0x40
#define _LCDDATA38_S55C4_POSN                               0x7
#define _LCDDATA38_S55C4_POSITION                           0x7
#define _LCDDATA38_S55C4_SIZE                               0x1
#define _LCDDATA38_S55C4_LENGTH                             0x1
#define _LCDDATA38_S55C4_MASK                               0x80

// Register: LCDDATA39
#define LCDDATA39 LCDDATA39
extern volatile unsigned char           LCDDATA39           __at(0xEB5);
#ifndef _LIB_BUILD
asm("LCDDATA39 equ 0EB5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C4                  :1;
        unsigned S57C4                  :1;
        unsigned S58C4                  :1;
        unsigned S59C4                  :1;
        unsigned S60C4                  :1;
        unsigned S61C4                  :1;
        unsigned S62C4                  :1;
        unsigned S63C4                  :1;
    };
} LCDDATA39bits_t;
extern volatile LCDDATA39bits_t LCDDATA39bits __at(0xEB5);
// bitfield macros
#define _LCDDATA39_S56C4_POSN                               0x0
#define _LCDDATA39_S56C4_POSITION                           0x0
#define _LCDDATA39_S56C4_SIZE                               0x1
#define _LCDDATA39_S56C4_LENGTH                             0x1
#define _LCDDATA39_S56C4_MASK                               0x1
#define _LCDDATA39_S57C4_POSN                               0x1
#define _LCDDATA39_S57C4_POSITION                           0x1
#define _LCDDATA39_S57C4_SIZE                               0x1
#define _LCDDATA39_S57C4_LENGTH                             0x1
#define _LCDDATA39_S57C4_MASK                               0x2
#define _LCDDATA39_S58C4_POSN                               0x2
#define _LCDDATA39_S58C4_POSITION                           0x2
#define _LCDDATA39_S58C4_SIZE                               0x1
#define _LCDDATA39_S58C4_LENGTH                             0x1
#define _LCDDATA39_S58C4_MASK                               0x4
#define _LCDDATA39_S59C4_POSN                               0x3
#define _LCDDATA39_S59C4_POSITION                           0x3
#define _LCDDATA39_S59C4_SIZE                               0x1
#define _LCDDATA39_S59C4_LENGTH                             0x1
#define _LCDDATA39_S59C4_MASK                               0x8
#define _LCDDATA39_S60C4_POSN                               0x4
#define _LCDDATA39_S60C4_POSITION                           0x4
#define _LCDDATA39_S60C4_SIZE                               0x1
#define _LCDDATA39_S60C4_LENGTH                             0x1
#define _LCDDATA39_S60C4_MASK                               0x10
#define _LCDDATA39_S61C4_POSN                               0x5
#define _LCDDATA39_S61C4_POSITION                           0x5
#define _LCDDATA39_S61C4_SIZE                               0x1
#define _LCDDATA39_S61C4_LENGTH                             0x1
#define _LCDDATA39_S61C4_MASK                               0x20
#define _LCDDATA39_S62C4_POSN                               0x6
#define _LCDDATA39_S62C4_POSITION                           0x6
#define _LCDDATA39_S62C4_SIZE                               0x1
#define _LCDDATA39_S62C4_LENGTH                             0x1
#define _LCDDATA39_S62C4_MASK                               0x40
#define _LCDDATA39_S63C4_POSN                               0x7
#define _LCDDATA39_S63C4_POSITION                           0x7
#define _LCDDATA39_S63C4_SIZE                               0x1
#define _LCDDATA39_S63C4_LENGTH                             0x1
#define _LCDDATA39_S63C4_MASK                               0x80

// Register: LCDDATA40
#define LCDDATA40 LCDDATA40
extern volatile unsigned char           LCDDATA40           __at(0xEB6);
#ifndef _LIB_BUILD
asm("LCDDATA40 equ 0EB6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C5                  :1;
        unsigned S01C5                  :1;
        unsigned S02C5                  :1;
        unsigned S03C5                  :1;
        unsigned S04C5                  :1;
        unsigned S05C5                  :1;
        unsigned S06C5                  :1;
        unsigned S07C5                  :1;
    };
} LCDDATA40bits_t;
extern volatile LCDDATA40bits_t LCDDATA40bits __at(0xEB6);
// bitfield macros
#define _LCDDATA40_S00C5_POSN                               0x0
#define _LCDDATA40_S00C5_POSITION                           0x0
#define _LCDDATA40_S00C5_SIZE                               0x1
#define _LCDDATA40_S00C5_LENGTH                             0x1
#define _LCDDATA40_S00C5_MASK                               0x1
#define _LCDDATA40_S01C5_POSN                               0x1
#define _LCDDATA40_S01C5_POSITION                           0x1
#define _LCDDATA40_S01C5_SIZE                               0x1
#define _LCDDATA40_S01C5_LENGTH                             0x1
#define _LCDDATA40_S01C5_MASK                               0x2
#define _LCDDATA40_S02C5_POSN                               0x2
#define _LCDDATA40_S02C5_POSITION                           0x2
#define _LCDDATA40_S02C5_SIZE                               0x1
#define _LCDDATA40_S02C5_LENGTH                             0x1
#define _LCDDATA40_S02C5_MASK                               0x4
#define _LCDDATA40_S03C5_POSN                               0x3
#define _LCDDATA40_S03C5_POSITION                           0x3
#define _LCDDATA40_S03C5_SIZE                               0x1
#define _LCDDATA40_S03C5_LENGTH                             0x1
#define _LCDDATA40_S03C5_MASK                               0x8
#define _LCDDATA40_S04C5_POSN                               0x4
#define _LCDDATA40_S04C5_POSITION                           0x4
#define _LCDDATA40_S04C5_SIZE                               0x1
#define _LCDDATA40_S04C5_LENGTH                             0x1
#define _LCDDATA40_S04C5_MASK                               0x10
#define _LCDDATA40_S05C5_POSN                               0x5
#define _LCDDATA40_S05C5_POSITION                           0x5
#define _LCDDATA40_S05C5_SIZE                               0x1
#define _LCDDATA40_S05C5_LENGTH                             0x1
#define _LCDDATA40_S05C5_MASK                               0x20
#define _LCDDATA40_S06C5_POSN                               0x6
#define _LCDDATA40_S06C5_POSITION                           0x6
#define _LCDDATA40_S06C5_SIZE                               0x1
#define _LCDDATA40_S06C5_LENGTH                             0x1
#define _LCDDATA40_S06C5_MASK                               0x40
#define _LCDDATA40_S07C5_POSN                               0x7
#define _LCDDATA40_S07C5_POSITION                           0x7
#define _LCDDATA40_S07C5_SIZE                               0x1
#define _LCDDATA40_S07C5_LENGTH                             0x1
#define _LCDDATA40_S07C5_MASK                               0x80

// Register: LCDDATA41
#define LCDDATA41 LCDDATA41
extern volatile unsigned char           LCDDATA41           __at(0xEB7);
#ifndef _LIB_BUILD
asm("LCDDATA41 equ 0EB7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C5                  :1;
        unsigned S09C5                  :1;
        unsigned S10C5                  :1;
        unsigned S11C5                  :1;
        unsigned S12C5                  :1;
        unsigned S13C5                  :1;
        unsigned S14C5                  :1;
        unsigned S15C5                  :1;
    };
} LCDDATA41bits_t;
extern volatile LCDDATA41bits_t LCDDATA41bits __at(0xEB7);
// bitfield macros
#define _LCDDATA41_S08C5_POSN                               0x0
#define _LCDDATA41_S08C5_POSITION                           0x0
#define _LCDDATA41_S08C5_SIZE                               0x1
#define _LCDDATA41_S08C5_LENGTH                             0x1
#define _LCDDATA41_S08C5_MASK                               0x1
#define _LCDDATA41_S09C5_POSN                               0x1
#define _LCDDATA41_S09C5_POSITION                           0x1
#define _LCDDATA41_S09C5_SIZE                               0x1
#define _LCDDATA41_S09C5_LENGTH                             0x1
#define _LCDDATA41_S09C5_MASK                               0x2
#define _LCDDATA41_S10C5_POSN                               0x2
#define _LCDDATA41_S10C5_POSITION                           0x2
#define _LCDDATA41_S10C5_SIZE                               0x1
#define _LCDDATA41_S10C5_LENGTH                             0x1
#define _LCDDATA41_S10C5_MASK                               0x4
#define _LCDDATA41_S11C5_POSN                               0x3
#define _LCDDATA41_S11C5_POSITION                           0x3
#define _LCDDATA41_S11C5_SIZE                               0x1
#define _LCDDATA41_S11C5_LENGTH                             0x1
#define _LCDDATA41_S11C5_MASK                               0x8
#define _LCDDATA41_S12C5_POSN                               0x4
#define _LCDDATA41_S12C5_POSITION                           0x4
#define _LCDDATA41_S12C5_SIZE                               0x1
#define _LCDDATA41_S12C5_LENGTH                             0x1
#define _LCDDATA41_S12C5_MASK                               0x10
#define _LCDDATA41_S13C5_POSN                               0x5
#define _LCDDATA41_S13C5_POSITION                           0x5
#define _LCDDATA41_S13C5_SIZE                               0x1
#define _LCDDATA41_S13C5_LENGTH                             0x1
#define _LCDDATA41_S13C5_MASK                               0x20
#define _LCDDATA41_S14C5_POSN                               0x6
#define _LCDDATA41_S14C5_POSITION                           0x6
#define _LCDDATA41_S14C5_SIZE                               0x1
#define _LCDDATA41_S14C5_LENGTH                             0x1
#define _LCDDATA41_S14C5_MASK                               0x40
#define _LCDDATA41_S15C5_POSN                               0x7
#define _LCDDATA41_S15C5_POSITION                           0x7
#define _LCDDATA41_S15C5_SIZE                               0x1
#define _LCDDATA41_S15C5_LENGTH                             0x1
#define _LCDDATA41_S15C5_MASK                               0x80

// Register: LCDDATA42
#define LCDDATA42 LCDDATA42
extern volatile unsigned char           LCDDATA42           __at(0xEB8);
#ifndef _LIB_BUILD
asm("LCDDATA42 equ 0EB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C5                  :1;
        unsigned S17C5                  :1;
        unsigned S18C5                  :1;
        unsigned S19C5                  :1;
        unsigned S20C5                  :1;
        unsigned S21C5                  :1;
        unsigned S22C5                  :1;
        unsigned S23C5                  :1;
    };
} LCDDATA42bits_t;
extern volatile LCDDATA42bits_t LCDDATA42bits __at(0xEB8);
// bitfield macros
#define _LCDDATA42_S16C5_POSN                               0x0
#define _LCDDATA42_S16C5_POSITION                           0x0
#define _LCDDATA42_S16C5_SIZE                               0x1
#define _LCDDATA42_S16C5_LENGTH                             0x1
#define _LCDDATA42_S16C5_MASK                               0x1
#define _LCDDATA42_S17C5_POSN                               0x1
#define _LCDDATA42_S17C5_POSITION                           0x1
#define _LCDDATA42_S17C5_SIZE                               0x1
#define _LCDDATA42_S17C5_LENGTH                             0x1
#define _LCDDATA42_S17C5_MASK                               0x2
#define _LCDDATA42_S18C5_POSN                               0x2
#define _LCDDATA42_S18C5_POSITION                           0x2
#define _LCDDATA42_S18C5_SIZE                               0x1
#define _LCDDATA42_S18C5_LENGTH                             0x1
#define _LCDDATA42_S18C5_MASK                               0x4
#define _LCDDATA42_S19C5_POSN                               0x3
#define _LCDDATA42_S19C5_POSITION                           0x3
#define _LCDDATA42_S19C5_SIZE                               0x1
#define _LCDDATA42_S19C5_LENGTH                             0x1
#define _LCDDATA42_S19C5_MASK                               0x8
#define _LCDDATA42_S20C5_POSN                               0x4
#define _LCDDATA42_S20C5_POSITION                           0x4
#define _LCDDATA42_S20C5_SIZE                               0x1
#define _LCDDATA42_S20C5_LENGTH                             0x1
#define _LCDDATA42_S20C5_MASK                               0x10
#define _LCDDATA42_S21C5_POSN                               0x5
#define _LCDDATA42_S21C5_POSITION                           0x5
#define _LCDDATA42_S21C5_SIZE                               0x1
#define _LCDDATA42_S21C5_LENGTH                             0x1
#define _LCDDATA42_S21C5_MASK                               0x20
#define _LCDDATA42_S22C5_POSN                               0x6
#define _LCDDATA42_S22C5_POSITION                           0x6
#define _LCDDATA42_S22C5_SIZE                               0x1
#define _LCDDATA42_S22C5_LENGTH                             0x1
#define _LCDDATA42_S22C5_MASK                               0x40
#define _LCDDATA42_S23C5_POSN                               0x7
#define _LCDDATA42_S23C5_POSITION                           0x7
#define _LCDDATA42_S23C5_SIZE                               0x1
#define _LCDDATA42_S23C5_LENGTH                             0x1
#define _LCDDATA42_S23C5_MASK                               0x80

// Register: LCDDATA43
#define LCDDATA43 LCDDATA43
extern volatile unsigned char           LCDDATA43           __at(0xEB9);
#ifndef _LIB_BUILD
asm("LCDDATA43 equ 0EB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C5                  :1;
        unsigned S25C5                  :1;
        unsigned S26C5                  :1;
        unsigned S27C5                  :1;
        unsigned S28C5                  :1;
        unsigned S29C5                  :1;
        unsigned S30C5                  :1;
        unsigned S31C5                  :1;
    };
} LCDDATA43bits_t;
extern volatile LCDDATA43bits_t LCDDATA43bits __at(0xEB9);
// bitfield macros
#define _LCDDATA43_S24C5_POSN                               0x0
#define _LCDDATA43_S24C5_POSITION                           0x0
#define _LCDDATA43_S24C5_SIZE                               0x1
#define _LCDDATA43_S24C5_LENGTH                             0x1
#define _LCDDATA43_S24C5_MASK                               0x1
#define _LCDDATA43_S25C5_POSN                               0x1
#define _LCDDATA43_S25C5_POSITION                           0x1
#define _LCDDATA43_S25C5_SIZE                               0x1
#define _LCDDATA43_S25C5_LENGTH                             0x1
#define _LCDDATA43_S25C5_MASK                               0x2
#define _LCDDATA43_S26C5_POSN                               0x2
#define _LCDDATA43_S26C5_POSITION                           0x2
#define _LCDDATA43_S26C5_SIZE                               0x1
#define _LCDDATA43_S26C5_LENGTH                             0x1
#define _LCDDATA43_S26C5_MASK                               0x4
#define _LCDDATA43_S27C5_POSN                               0x3
#define _LCDDATA43_S27C5_POSITION                           0x3
#define _LCDDATA43_S27C5_SIZE                               0x1
#define _LCDDATA43_S27C5_LENGTH                             0x1
#define _LCDDATA43_S27C5_MASK                               0x8
#define _LCDDATA43_S28C5_POSN                               0x4
#define _LCDDATA43_S28C5_POSITION                           0x4
#define _LCDDATA43_S28C5_SIZE                               0x1
#define _LCDDATA43_S28C5_LENGTH                             0x1
#define _LCDDATA43_S28C5_MASK                               0x10
#define _LCDDATA43_S29C5_POSN                               0x5
#define _LCDDATA43_S29C5_POSITION                           0x5
#define _LCDDATA43_S29C5_SIZE                               0x1
#define _LCDDATA43_S29C5_LENGTH                             0x1
#define _LCDDATA43_S29C5_MASK                               0x20
#define _LCDDATA43_S30C5_POSN                               0x6
#define _LCDDATA43_S30C5_POSITION                           0x6
#define _LCDDATA43_S30C5_SIZE                               0x1
#define _LCDDATA43_S30C5_LENGTH                             0x1
#define _LCDDATA43_S30C5_MASK                               0x40
#define _LCDDATA43_S31C5_POSN                               0x7
#define _LCDDATA43_S31C5_POSITION                           0x7
#define _LCDDATA43_S31C5_SIZE                               0x1
#define _LCDDATA43_S31C5_LENGTH                             0x1
#define _LCDDATA43_S31C5_MASK                               0x80

// Register: LCDDATA44
#define LCDDATA44 LCDDATA44
extern volatile unsigned char           LCDDATA44           __at(0xEBA);
#ifndef _LIB_BUILD
asm("LCDDATA44 equ 0EBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C5                  :1;
        unsigned S33C5                  :1;
        unsigned S34C5                  :1;
        unsigned S35C5                  :1;
        unsigned S36C5                  :1;
        unsigned S37C5                  :1;
        unsigned S38C5                  :1;
        unsigned S39C5                  :1;
    };
} LCDDATA44bits_t;
extern volatile LCDDATA44bits_t LCDDATA44bits __at(0xEBA);
// bitfield macros
#define _LCDDATA44_S32C5_POSN                               0x0
#define _LCDDATA44_S32C5_POSITION                           0x0
#define _LCDDATA44_S32C5_SIZE                               0x1
#define _LCDDATA44_S32C5_LENGTH                             0x1
#define _LCDDATA44_S32C5_MASK                               0x1
#define _LCDDATA44_S33C5_POSN                               0x1
#define _LCDDATA44_S33C5_POSITION                           0x1
#define _LCDDATA44_S33C5_SIZE                               0x1
#define _LCDDATA44_S33C5_LENGTH                             0x1
#define _LCDDATA44_S33C5_MASK                               0x2
#define _LCDDATA44_S34C5_POSN                               0x2
#define _LCDDATA44_S34C5_POSITION                           0x2
#define _LCDDATA44_S34C5_SIZE                               0x1
#define _LCDDATA44_S34C5_LENGTH                             0x1
#define _LCDDATA44_S34C5_MASK                               0x4
#define _LCDDATA44_S35C5_POSN                               0x3
#define _LCDDATA44_S35C5_POSITION                           0x3
#define _LCDDATA44_S35C5_SIZE                               0x1
#define _LCDDATA44_S35C5_LENGTH                             0x1
#define _LCDDATA44_S35C5_MASK                               0x8
#define _LCDDATA44_S36C5_POSN                               0x4
#define _LCDDATA44_S36C5_POSITION                           0x4
#define _LCDDATA44_S36C5_SIZE                               0x1
#define _LCDDATA44_S36C5_LENGTH                             0x1
#define _LCDDATA44_S36C5_MASK                               0x10
#define _LCDDATA44_S37C5_POSN                               0x5
#define _LCDDATA44_S37C5_POSITION                           0x5
#define _LCDDATA44_S37C5_SIZE                               0x1
#define _LCDDATA44_S37C5_LENGTH                             0x1
#define _LCDDATA44_S37C5_MASK                               0x20
#define _LCDDATA44_S38C5_POSN                               0x6
#define _LCDDATA44_S38C5_POSITION                           0x6
#define _LCDDATA44_S38C5_SIZE                               0x1
#define _LCDDATA44_S38C5_LENGTH                             0x1
#define _LCDDATA44_S38C5_MASK                               0x40
#define _LCDDATA44_S39C5_POSN                               0x7
#define _LCDDATA44_S39C5_POSITION                           0x7
#define _LCDDATA44_S39C5_SIZE                               0x1
#define _LCDDATA44_S39C5_LENGTH                             0x1
#define _LCDDATA44_S39C5_MASK                               0x80

// Register: LCDDATA45
#define LCDDATA45 LCDDATA45
extern volatile unsigned char           LCDDATA45           __at(0xEBB);
#ifndef _LIB_BUILD
asm("LCDDATA45 equ 0EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C5                  :1;
        unsigned S41C5                  :1;
        unsigned S42C5                  :1;
        unsigned S43C5                  :1;
        unsigned S44C5                  :1;
        unsigned S45C5                  :1;
        unsigned S46C5                  :1;
        unsigned S47C5                  :1;
    };
} LCDDATA45bits_t;
extern volatile LCDDATA45bits_t LCDDATA45bits __at(0xEBB);
// bitfield macros
#define _LCDDATA45_S40C5_POSN                               0x0
#define _LCDDATA45_S40C5_POSITION                           0x0
#define _LCDDATA45_S40C5_SIZE                               0x1
#define _LCDDATA45_S40C5_LENGTH                             0x1
#define _LCDDATA45_S40C5_MASK                               0x1
#define _LCDDATA45_S41C5_POSN                               0x1
#define _LCDDATA45_S41C5_POSITION                           0x1
#define _LCDDATA45_S41C5_SIZE                               0x1
#define _LCDDATA45_S41C5_LENGTH                             0x1
#define _LCDDATA45_S41C5_MASK                               0x2
#define _LCDDATA45_S42C5_POSN                               0x2
#define _LCDDATA45_S42C5_POSITION                           0x2
#define _LCDDATA45_S42C5_SIZE                               0x1
#define _LCDDATA45_S42C5_LENGTH                             0x1
#define _LCDDATA45_S42C5_MASK                               0x4
#define _LCDDATA45_S43C5_POSN                               0x3
#define _LCDDATA45_S43C5_POSITION                           0x3
#define _LCDDATA45_S43C5_SIZE                               0x1
#define _LCDDATA45_S43C5_LENGTH                             0x1
#define _LCDDATA45_S43C5_MASK                               0x8
#define _LCDDATA45_S44C5_POSN                               0x4
#define _LCDDATA45_S44C5_POSITION                           0x4
#define _LCDDATA45_S44C5_SIZE                               0x1
#define _LCDDATA45_S44C5_LENGTH                             0x1
#define _LCDDATA45_S44C5_MASK                               0x10
#define _LCDDATA45_S45C5_POSN                               0x5
#define _LCDDATA45_S45C5_POSITION                           0x5
#define _LCDDATA45_S45C5_SIZE                               0x1
#define _LCDDATA45_S45C5_LENGTH                             0x1
#define _LCDDATA45_S45C5_MASK                               0x20
#define _LCDDATA45_S46C5_POSN                               0x6
#define _LCDDATA45_S46C5_POSITION                           0x6
#define _LCDDATA45_S46C5_SIZE                               0x1
#define _LCDDATA45_S46C5_LENGTH                             0x1
#define _LCDDATA45_S46C5_MASK                               0x40
#define _LCDDATA45_S47C5_POSN                               0x7
#define _LCDDATA45_S47C5_POSITION                           0x7
#define _LCDDATA45_S47C5_SIZE                               0x1
#define _LCDDATA45_S47C5_LENGTH                             0x1
#define _LCDDATA45_S47C5_MASK                               0x80

// Register: LCDDATA46
#define LCDDATA46 LCDDATA46
extern volatile unsigned char           LCDDATA46           __at(0xEBC);
#ifndef _LIB_BUILD
asm("LCDDATA46 equ 0EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C5                  :1;
        unsigned S49C5                  :1;
        unsigned S50C5                  :1;
        unsigned S51C5                  :1;
        unsigned S52C5                  :1;
        unsigned S53C5                  :1;
        unsigned S54C5                  :1;
        unsigned S55C5                  :1;
    };
} LCDDATA46bits_t;
extern volatile LCDDATA46bits_t LCDDATA46bits __at(0xEBC);
// bitfield macros
#define _LCDDATA46_S48C5_POSN                               0x0
#define _LCDDATA46_S48C5_POSITION                           0x0
#define _LCDDATA46_S48C5_SIZE                               0x1
#define _LCDDATA46_S48C5_LENGTH                             0x1
#define _LCDDATA46_S48C5_MASK                               0x1
#define _LCDDATA46_S49C5_POSN                               0x1
#define _LCDDATA46_S49C5_POSITION                           0x1
#define _LCDDATA46_S49C5_SIZE                               0x1
#define _LCDDATA46_S49C5_LENGTH                             0x1
#define _LCDDATA46_S49C5_MASK                               0x2
#define _LCDDATA46_S50C5_POSN                               0x2
#define _LCDDATA46_S50C5_POSITION                           0x2
#define _LCDDATA46_S50C5_SIZE                               0x1
#define _LCDDATA46_S50C5_LENGTH                             0x1
#define _LCDDATA46_S50C5_MASK                               0x4
#define _LCDDATA46_S51C5_POSN                               0x3
#define _LCDDATA46_S51C5_POSITION                           0x3
#define _LCDDATA46_S51C5_SIZE                               0x1
#define _LCDDATA46_S51C5_LENGTH                             0x1
#define _LCDDATA46_S51C5_MASK                               0x8
#define _LCDDATA46_S52C5_POSN                               0x4
#define _LCDDATA46_S52C5_POSITION                           0x4
#define _LCDDATA46_S52C5_SIZE                               0x1
#define _LCDDATA46_S52C5_LENGTH                             0x1
#define _LCDDATA46_S52C5_MASK                               0x10
#define _LCDDATA46_S53C5_POSN                               0x5
#define _LCDDATA46_S53C5_POSITION                           0x5
#define _LCDDATA46_S53C5_SIZE                               0x1
#define _LCDDATA46_S53C5_LENGTH                             0x1
#define _LCDDATA46_S53C5_MASK                               0x20
#define _LCDDATA46_S54C5_POSN                               0x6
#define _LCDDATA46_S54C5_POSITION                           0x6
#define _LCDDATA46_S54C5_SIZE                               0x1
#define _LCDDATA46_S54C5_LENGTH                             0x1
#define _LCDDATA46_S54C5_MASK                               0x40
#define _LCDDATA46_S55C5_POSN                               0x7
#define _LCDDATA46_S55C5_POSITION                           0x7
#define _LCDDATA46_S55C5_SIZE                               0x1
#define _LCDDATA46_S55C5_LENGTH                             0x1
#define _LCDDATA46_S55C5_MASK                               0x80

// Register: LCDDATA47
#define LCDDATA47 LCDDATA47
extern volatile unsigned char           LCDDATA47           __at(0xEBD);
#ifndef _LIB_BUILD
asm("LCDDATA47 equ 0EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C5                  :1;
        unsigned S57C5                  :1;
        unsigned S58C5                  :1;
        unsigned S59C5                  :1;
        unsigned S60C5                  :1;
        unsigned S61C5                  :1;
        unsigned S62C5                  :1;
        unsigned S63C5                  :1;
    };
} LCDDATA47bits_t;
extern volatile LCDDATA47bits_t LCDDATA47bits __at(0xEBD);
// bitfield macros
#define _LCDDATA47_S56C5_POSN                               0x0
#define _LCDDATA47_S56C5_POSITION                           0x0
#define _LCDDATA47_S56C5_SIZE                               0x1
#define _LCDDATA47_S56C5_LENGTH                             0x1
#define _LCDDATA47_S56C5_MASK                               0x1
#define _LCDDATA47_S57C5_POSN                               0x1
#define _LCDDATA47_S57C5_POSITION                           0x1
#define _LCDDATA47_S57C5_SIZE                               0x1
#define _LCDDATA47_S57C5_LENGTH                             0x1
#define _LCDDATA47_S57C5_MASK                               0x2
#define _LCDDATA47_S58C5_POSN                               0x2
#define _LCDDATA47_S58C5_POSITION                           0x2
#define _LCDDATA47_S58C5_SIZE                               0x1
#define _LCDDATA47_S58C5_LENGTH                             0x1
#define _LCDDATA47_S58C5_MASK                               0x4
#define _LCDDATA47_S59C5_POSN                               0x3
#define _LCDDATA47_S59C5_POSITION                           0x3
#define _LCDDATA47_S59C5_SIZE                               0x1
#define _LCDDATA47_S59C5_LENGTH                             0x1
#define _LCDDATA47_S59C5_MASK                               0x8
#define _LCDDATA47_S60C5_POSN                               0x4
#define _LCDDATA47_S60C5_POSITION                           0x4
#define _LCDDATA47_S60C5_SIZE                               0x1
#define _LCDDATA47_S60C5_LENGTH                             0x1
#define _LCDDATA47_S60C5_MASK                               0x10
#define _LCDDATA47_S61C5_POSN                               0x5
#define _LCDDATA47_S61C5_POSITION                           0x5
#define _LCDDATA47_S61C5_SIZE                               0x1
#define _LCDDATA47_S61C5_LENGTH                             0x1
#define _LCDDATA47_S61C5_MASK                               0x20
#define _LCDDATA47_S62C5_POSN                               0x6
#define _LCDDATA47_S62C5_POSITION                           0x6
#define _LCDDATA47_S62C5_SIZE                               0x1
#define _LCDDATA47_S62C5_LENGTH                             0x1
#define _LCDDATA47_S62C5_MASK                               0x40
#define _LCDDATA47_S63C5_POSN                               0x7
#define _LCDDATA47_S63C5_POSITION                           0x7
#define _LCDDATA47_S63C5_SIZE                               0x1
#define _LCDDATA47_S63C5_LENGTH                             0x1
#define _LCDDATA47_S63C5_MASK                               0x80

// Register: LCDDATA48
#define LCDDATA48 LCDDATA48
extern volatile unsigned char           LCDDATA48           __at(0xEBE);
#ifndef _LIB_BUILD
asm("LCDDATA48 equ 0EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C6                  :1;
        unsigned S01C6                  :1;
        unsigned S02C6                  :1;
        unsigned S03C6                  :1;
        unsigned S04C6                  :1;
        unsigned S05C6                  :1;
        unsigned S06C6                  :1;
        unsigned S07C6                  :1;
    };
} LCDDATA48bits_t;
extern volatile LCDDATA48bits_t LCDDATA48bits __at(0xEBE);
// bitfield macros
#define _LCDDATA48_S00C6_POSN                               0x0
#define _LCDDATA48_S00C6_POSITION                           0x0
#define _LCDDATA48_S00C6_SIZE                               0x1
#define _LCDDATA48_S00C6_LENGTH                             0x1
#define _LCDDATA48_S00C6_MASK                               0x1
#define _LCDDATA48_S01C6_POSN                               0x1
#define _LCDDATA48_S01C6_POSITION                           0x1
#define _LCDDATA48_S01C6_SIZE                               0x1
#define _LCDDATA48_S01C6_LENGTH                             0x1
#define _LCDDATA48_S01C6_MASK                               0x2
#define _LCDDATA48_S02C6_POSN                               0x2
#define _LCDDATA48_S02C6_POSITION                           0x2
#define _LCDDATA48_S02C6_SIZE                               0x1
#define _LCDDATA48_S02C6_LENGTH                             0x1
#define _LCDDATA48_S02C6_MASK                               0x4
#define _LCDDATA48_S03C6_POSN                               0x3
#define _LCDDATA48_S03C6_POSITION                           0x3
#define _LCDDATA48_S03C6_SIZE                               0x1
#define _LCDDATA48_S03C6_LENGTH                             0x1
#define _LCDDATA48_S03C6_MASK                               0x8
#define _LCDDATA48_S04C6_POSN                               0x4
#define _LCDDATA48_S04C6_POSITION                           0x4
#define _LCDDATA48_S04C6_SIZE                               0x1
#define _LCDDATA48_S04C6_LENGTH                             0x1
#define _LCDDATA48_S04C6_MASK                               0x10
#define _LCDDATA48_S05C6_POSN                               0x5
#define _LCDDATA48_S05C6_POSITION                           0x5
#define _LCDDATA48_S05C6_SIZE                               0x1
#define _LCDDATA48_S05C6_LENGTH                             0x1
#define _LCDDATA48_S05C6_MASK                               0x20
#define _LCDDATA48_S06C6_POSN                               0x6
#define _LCDDATA48_S06C6_POSITION                           0x6
#define _LCDDATA48_S06C6_SIZE                               0x1
#define _LCDDATA48_S06C6_LENGTH                             0x1
#define _LCDDATA48_S06C6_MASK                               0x40
#define _LCDDATA48_S07C6_POSN                               0x7
#define _LCDDATA48_S07C6_POSITION                           0x7
#define _LCDDATA48_S07C6_SIZE                               0x1
#define _LCDDATA48_S07C6_LENGTH                             0x1
#define _LCDDATA48_S07C6_MASK                               0x80

// Register: LCDDATA49
#define LCDDATA49 LCDDATA49
extern volatile unsigned char           LCDDATA49           __at(0xEBF);
#ifndef _LIB_BUILD
asm("LCDDATA49 equ 0EBFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C6                  :1;
        unsigned S09C6                  :1;
        unsigned S10C6                  :1;
        unsigned S11C6                  :1;
        unsigned S12C6                  :1;
        unsigned S13C6                  :1;
        unsigned S14C6                  :1;
        unsigned S15C6                  :1;
    };
} LCDDATA49bits_t;
extern volatile LCDDATA49bits_t LCDDATA49bits __at(0xEBF);
// bitfield macros
#define _LCDDATA49_S08C6_POSN                               0x0
#define _LCDDATA49_S08C6_POSITION                           0x0
#define _LCDDATA49_S08C6_SIZE                               0x1
#define _LCDDATA49_S08C6_LENGTH                             0x1
#define _LCDDATA49_S08C6_MASK                               0x1
#define _LCDDATA49_S09C6_POSN                               0x1
#define _LCDDATA49_S09C6_POSITION                           0x1
#define _LCDDATA49_S09C6_SIZE                               0x1
#define _LCDDATA49_S09C6_LENGTH                             0x1
#define _LCDDATA49_S09C6_MASK                               0x2
#define _LCDDATA49_S10C6_POSN                               0x2
#define _LCDDATA49_S10C6_POSITION                           0x2
#define _LCDDATA49_S10C6_SIZE                               0x1
#define _LCDDATA49_S10C6_LENGTH                             0x1
#define _LCDDATA49_S10C6_MASK                               0x4
#define _LCDDATA49_S11C6_POSN                               0x3
#define _LCDDATA49_S11C6_POSITION                           0x3
#define _LCDDATA49_S11C6_SIZE                               0x1
#define _LCDDATA49_S11C6_LENGTH                             0x1
#define _LCDDATA49_S11C6_MASK                               0x8
#define _LCDDATA49_S12C6_POSN                               0x4
#define _LCDDATA49_S12C6_POSITION                           0x4
#define _LCDDATA49_S12C6_SIZE                               0x1
#define _LCDDATA49_S12C6_LENGTH                             0x1
#define _LCDDATA49_S12C6_MASK                               0x10
#define _LCDDATA49_S13C6_POSN                               0x5
#define _LCDDATA49_S13C6_POSITION                           0x5
#define _LCDDATA49_S13C6_SIZE                               0x1
#define _LCDDATA49_S13C6_LENGTH                             0x1
#define _LCDDATA49_S13C6_MASK                               0x20
#define _LCDDATA49_S14C6_POSN                               0x6
#define _LCDDATA49_S14C6_POSITION                           0x6
#define _LCDDATA49_S14C6_SIZE                               0x1
#define _LCDDATA49_S14C6_LENGTH                             0x1
#define _LCDDATA49_S14C6_MASK                               0x40
#define _LCDDATA49_S15C6_POSN                               0x7
#define _LCDDATA49_S15C6_POSITION                           0x7
#define _LCDDATA49_S15C6_SIZE                               0x1
#define _LCDDATA49_S15C6_LENGTH                             0x1
#define _LCDDATA49_S15C6_MASK                               0x80

// Register: LCDDATA50
#define LCDDATA50 LCDDATA50
extern volatile unsigned char           LCDDATA50           __at(0xEC0);
#ifndef _LIB_BUILD
asm("LCDDATA50 equ 0EC0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C6                  :1;
        unsigned S17C6                  :1;
        unsigned S18C6                  :1;
        unsigned S19C6                  :1;
        unsigned S20C6                  :1;
        unsigned S21C6                  :1;
        unsigned S22C6                  :1;
        unsigned S23C6                  :1;
    };
} LCDDATA50bits_t;
extern volatile LCDDATA50bits_t LCDDATA50bits __at(0xEC0);
// bitfield macros
#define _LCDDATA50_S16C6_POSN                               0x0
#define _LCDDATA50_S16C6_POSITION                           0x0
#define _LCDDATA50_S16C6_SIZE                               0x1
#define _LCDDATA50_S16C6_LENGTH                             0x1
#define _LCDDATA50_S16C6_MASK                               0x1
#define _LCDDATA50_S17C6_POSN                               0x1
#define _LCDDATA50_S17C6_POSITION                           0x1
#define _LCDDATA50_S17C6_SIZE                               0x1
#define _LCDDATA50_S17C6_LENGTH                             0x1
#define _LCDDATA50_S17C6_MASK                               0x2
#define _LCDDATA50_S18C6_POSN                               0x2
#define _LCDDATA50_S18C6_POSITION                           0x2
#define _LCDDATA50_S18C6_SIZE                               0x1
#define _LCDDATA50_S18C6_LENGTH                             0x1
#define _LCDDATA50_S18C6_MASK                               0x4
#define _LCDDATA50_S19C6_POSN                               0x3
#define _LCDDATA50_S19C6_POSITION                           0x3
#define _LCDDATA50_S19C6_SIZE                               0x1
#define _LCDDATA50_S19C6_LENGTH                             0x1
#define _LCDDATA50_S19C6_MASK                               0x8
#define _LCDDATA50_S20C6_POSN                               0x4
#define _LCDDATA50_S20C6_POSITION                           0x4
#define _LCDDATA50_S20C6_SIZE                               0x1
#define _LCDDATA50_S20C6_LENGTH                             0x1
#define _LCDDATA50_S20C6_MASK                               0x10
#define _LCDDATA50_S21C6_POSN                               0x5
#define _LCDDATA50_S21C6_POSITION                           0x5
#define _LCDDATA50_S21C6_SIZE                               0x1
#define _LCDDATA50_S21C6_LENGTH                             0x1
#define _LCDDATA50_S21C6_MASK                               0x20
#define _LCDDATA50_S22C6_POSN                               0x6
#define _LCDDATA50_S22C6_POSITION                           0x6
#define _LCDDATA50_S22C6_SIZE                               0x1
#define _LCDDATA50_S22C6_LENGTH                             0x1
#define _LCDDATA50_S22C6_MASK                               0x40
#define _LCDDATA50_S23C6_POSN                               0x7
#define _LCDDATA50_S23C6_POSITION                           0x7
#define _LCDDATA50_S23C6_SIZE                               0x1
#define _LCDDATA50_S23C6_LENGTH                             0x1
#define _LCDDATA50_S23C6_MASK                               0x80

// Register: LCDDATA51
#define LCDDATA51 LCDDATA51
extern volatile unsigned char           LCDDATA51           __at(0xEC1);
#ifndef _LIB_BUILD
asm("LCDDATA51 equ 0EC1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C6                  :1;
        unsigned S25C6                  :1;
        unsigned S26C6                  :1;
        unsigned S27C6                  :1;
        unsigned S28C6                  :1;
        unsigned S29C6                  :1;
        unsigned S30C6                  :1;
        unsigned S31C6                  :1;
    };
} LCDDATA51bits_t;
extern volatile LCDDATA51bits_t LCDDATA51bits __at(0xEC1);
// bitfield macros
#define _LCDDATA51_S24C6_POSN                               0x0
#define _LCDDATA51_S24C6_POSITION                           0x0
#define _LCDDATA51_S24C6_SIZE                               0x1
#define _LCDDATA51_S24C6_LENGTH                             0x1
#define _LCDDATA51_S24C6_MASK                               0x1
#define _LCDDATA51_S25C6_POSN                               0x1
#define _LCDDATA51_S25C6_POSITION                           0x1
#define _LCDDATA51_S25C6_SIZE                               0x1
#define _LCDDATA51_S25C6_LENGTH                             0x1
#define _LCDDATA51_S25C6_MASK                               0x2
#define _LCDDATA51_S26C6_POSN                               0x2
#define _LCDDATA51_S26C6_POSITION                           0x2
#define _LCDDATA51_S26C6_SIZE                               0x1
#define _LCDDATA51_S26C6_LENGTH                             0x1
#define _LCDDATA51_S26C6_MASK                               0x4
#define _LCDDATA51_S27C6_POSN                               0x3
#define _LCDDATA51_S27C6_POSITION                           0x3
#define _LCDDATA51_S27C6_SIZE                               0x1
#define _LCDDATA51_S27C6_LENGTH                             0x1
#define _LCDDATA51_S27C6_MASK                               0x8
#define _LCDDATA51_S28C6_POSN                               0x4
#define _LCDDATA51_S28C6_POSITION                           0x4
#define _LCDDATA51_S28C6_SIZE                               0x1
#define _LCDDATA51_S28C6_LENGTH                             0x1
#define _LCDDATA51_S28C6_MASK                               0x10
#define _LCDDATA51_S29C6_POSN                               0x5
#define _LCDDATA51_S29C6_POSITION                           0x5
#define _LCDDATA51_S29C6_SIZE                               0x1
#define _LCDDATA51_S29C6_LENGTH                             0x1
#define _LCDDATA51_S29C6_MASK                               0x20
#define _LCDDATA51_S30C6_POSN                               0x6
#define _LCDDATA51_S30C6_POSITION                           0x6
#define _LCDDATA51_S30C6_SIZE                               0x1
#define _LCDDATA51_S30C6_LENGTH                             0x1
#define _LCDDATA51_S30C6_MASK                               0x40
#define _LCDDATA51_S31C6_POSN                               0x7
#define _LCDDATA51_S31C6_POSITION                           0x7
#define _LCDDATA51_S31C6_SIZE                               0x1
#define _LCDDATA51_S31C6_LENGTH                             0x1
#define _LCDDATA51_S31C6_MASK                               0x80

// Register: LCDDATA52
#define LCDDATA52 LCDDATA52
extern volatile unsigned char           LCDDATA52           __at(0xEC2);
#ifndef _LIB_BUILD
asm("LCDDATA52 equ 0EC2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C6                  :1;
        unsigned S33C6                  :1;
        unsigned S34C6                  :1;
        unsigned S35C6                  :1;
        unsigned S36C6                  :1;
        unsigned S37C6                  :1;
        unsigned S38C6                  :1;
        unsigned S39C6                  :1;
    };
} LCDDATA52bits_t;
extern volatile LCDDATA52bits_t LCDDATA52bits __at(0xEC2);
// bitfield macros
#define _LCDDATA52_S32C6_POSN                               0x0
#define _LCDDATA52_S32C6_POSITION                           0x0
#define _LCDDATA52_S32C6_SIZE                               0x1
#define _LCDDATA52_S32C6_LENGTH                             0x1
#define _LCDDATA52_S32C6_MASK                               0x1
#define _LCDDATA52_S33C6_POSN                               0x1
#define _LCDDATA52_S33C6_POSITION                           0x1
#define _LCDDATA52_S33C6_SIZE                               0x1
#define _LCDDATA52_S33C6_LENGTH                             0x1
#define _LCDDATA52_S33C6_MASK                               0x2
#define _LCDDATA52_S34C6_POSN                               0x2
#define _LCDDATA52_S34C6_POSITION                           0x2
#define _LCDDATA52_S34C6_SIZE                               0x1
#define _LCDDATA52_S34C6_LENGTH                             0x1
#define _LCDDATA52_S34C6_MASK                               0x4
#define _LCDDATA52_S35C6_POSN                               0x3
#define _LCDDATA52_S35C6_POSITION                           0x3
#define _LCDDATA52_S35C6_SIZE                               0x1
#define _LCDDATA52_S35C6_LENGTH                             0x1
#define _LCDDATA52_S35C6_MASK                               0x8
#define _LCDDATA52_S36C6_POSN                               0x4
#define _LCDDATA52_S36C6_POSITION                           0x4
#define _LCDDATA52_S36C6_SIZE                               0x1
#define _LCDDATA52_S36C6_LENGTH                             0x1
#define _LCDDATA52_S36C6_MASK                               0x10
#define _LCDDATA52_S37C6_POSN                               0x5
#define _LCDDATA52_S37C6_POSITION                           0x5
#define _LCDDATA52_S37C6_SIZE                               0x1
#define _LCDDATA52_S37C6_LENGTH                             0x1
#define _LCDDATA52_S37C6_MASK                               0x20
#define _LCDDATA52_S38C6_POSN                               0x6
#define _LCDDATA52_S38C6_POSITION                           0x6
#define _LCDDATA52_S38C6_SIZE                               0x1
#define _LCDDATA52_S38C6_LENGTH                             0x1
#define _LCDDATA52_S38C6_MASK                               0x40
#define _LCDDATA52_S39C6_POSN                               0x7
#define _LCDDATA52_S39C6_POSITION                           0x7
#define _LCDDATA52_S39C6_SIZE                               0x1
#define _LCDDATA52_S39C6_LENGTH                             0x1
#define _LCDDATA52_S39C6_MASK                               0x80

// Register: LCDDATA53
#define LCDDATA53 LCDDATA53
extern volatile unsigned char           LCDDATA53           __at(0xEC3);
#ifndef _LIB_BUILD
asm("LCDDATA53 equ 0EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C6                  :1;
        unsigned S41C6                  :1;
        unsigned S42C6                  :1;
        unsigned S43C6                  :1;
        unsigned S44C6                  :1;
        unsigned S45C6                  :1;
        unsigned S46C6                  :1;
        unsigned S47C6                  :1;
    };
} LCDDATA53bits_t;
extern volatile LCDDATA53bits_t LCDDATA53bits __at(0xEC3);
// bitfield macros
#define _LCDDATA53_S40C6_POSN                               0x0
#define _LCDDATA53_S40C6_POSITION                           0x0
#define _LCDDATA53_S40C6_SIZE                               0x1
#define _LCDDATA53_S40C6_LENGTH                             0x1
#define _LCDDATA53_S40C6_MASK                               0x1
#define _LCDDATA53_S41C6_POSN                               0x1
#define _LCDDATA53_S41C6_POSITION                           0x1
#define _LCDDATA53_S41C6_SIZE                               0x1
#define _LCDDATA53_S41C6_LENGTH                             0x1
#define _LCDDATA53_S41C6_MASK                               0x2
#define _LCDDATA53_S42C6_POSN                               0x2
#define _LCDDATA53_S42C6_POSITION                           0x2
#define _LCDDATA53_S42C6_SIZE                               0x1
#define _LCDDATA53_S42C6_LENGTH                             0x1
#define _LCDDATA53_S42C6_MASK                               0x4
#define _LCDDATA53_S43C6_POSN                               0x3
#define _LCDDATA53_S43C6_POSITION                           0x3
#define _LCDDATA53_S43C6_SIZE                               0x1
#define _LCDDATA53_S43C6_LENGTH                             0x1
#define _LCDDATA53_S43C6_MASK                               0x8
#define _LCDDATA53_S44C6_POSN                               0x4
#define _LCDDATA53_S44C6_POSITION                           0x4
#define _LCDDATA53_S44C6_SIZE                               0x1
#define _LCDDATA53_S44C6_LENGTH                             0x1
#define _LCDDATA53_S44C6_MASK                               0x10
#define _LCDDATA53_S45C6_POSN                               0x5
#define _LCDDATA53_S45C6_POSITION                           0x5
#define _LCDDATA53_S45C6_SIZE                               0x1
#define _LCDDATA53_S45C6_LENGTH                             0x1
#define _LCDDATA53_S45C6_MASK                               0x20
#define _LCDDATA53_S46C6_POSN                               0x6
#define _LCDDATA53_S46C6_POSITION                           0x6
#define _LCDDATA53_S46C6_SIZE                               0x1
#define _LCDDATA53_S46C6_LENGTH                             0x1
#define _LCDDATA53_S46C6_MASK                               0x40
#define _LCDDATA53_S47C6_POSN                               0x7
#define _LCDDATA53_S47C6_POSITION                           0x7
#define _LCDDATA53_S47C6_SIZE                               0x1
#define _LCDDATA53_S47C6_LENGTH                             0x1
#define _LCDDATA53_S47C6_MASK                               0x80

// Register: LCDDATA54
#define LCDDATA54 LCDDATA54
extern volatile unsigned char           LCDDATA54           __at(0xEC4);
#ifndef _LIB_BUILD
asm("LCDDATA54 equ 0EC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C6                  :1;
        unsigned S49C6                  :1;
        unsigned S50C6                  :1;
        unsigned S51C6                  :1;
        unsigned S52C6                  :1;
        unsigned S53C6                  :1;
        unsigned S54C6                  :1;
        unsigned S55C6                  :1;
    };
} LCDDATA54bits_t;
extern volatile LCDDATA54bits_t LCDDATA54bits __at(0xEC4);
// bitfield macros
#define _LCDDATA54_S48C6_POSN                               0x0
#define _LCDDATA54_S48C6_POSITION                           0x0
#define _LCDDATA54_S48C6_SIZE                               0x1
#define _LCDDATA54_S48C6_LENGTH                             0x1
#define _LCDDATA54_S48C6_MASK                               0x1
#define _LCDDATA54_S49C6_POSN                               0x1
#define _LCDDATA54_S49C6_POSITION                           0x1
#define _LCDDATA54_S49C6_SIZE                               0x1
#define _LCDDATA54_S49C6_LENGTH                             0x1
#define _LCDDATA54_S49C6_MASK                               0x2
#define _LCDDATA54_S50C6_POSN                               0x2
#define _LCDDATA54_S50C6_POSITION                           0x2
#define _LCDDATA54_S50C6_SIZE                               0x1
#define _LCDDATA54_S50C6_LENGTH                             0x1
#define _LCDDATA54_S50C6_MASK                               0x4
#define _LCDDATA54_S51C6_POSN                               0x3
#define _LCDDATA54_S51C6_POSITION                           0x3
#define _LCDDATA54_S51C6_SIZE                               0x1
#define _LCDDATA54_S51C6_LENGTH                             0x1
#define _LCDDATA54_S51C6_MASK                               0x8
#define _LCDDATA54_S52C6_POSN                               0x4
#define _LCDDATA54_S52C6_POSITION                           0x4
#define _LCDDATA54_S52C6_SIZE                               0x1
#define _LCDDATA54_S52C6_LENGTH                             0x1
#define _LCDDATA54_S52C6_MASK                               0x10
#define _LCDDATA54_S53C6_POSN                               0x5
#define _LCDDATA54_S53C6_POSITION                           0x5
#define _LCDDATA54_S53C6_SIZE                               0x1
#define _LCDDATA54_S53C6_LENGTH                             0x1
#define _LCDDATA54_S53C6_MASK                               0x20
#define _LCDDATA54_S54C6_POSN                               0x6
#define _LCDDATA54_S54C6_POSITION                           0x6
#define _LCDDATA54_S54C6_SIZE                               0x1
#define _LCDDATA54_S54C6_LENGTH                             0x1
#define _LCDDATA54_S54C6_MASK                               0x40
#define _LCDDATA54_S55C6_POSN                               0x7
#define _LCDDATA54_S55C6_POSITION                           0x7
#define _LCDDATA54_S55C6_SIZE                               0x1
#define _LCDDATA54_S55C6_LENGTH                             0x1
#define _LCDDATA54_S55C6_MASK                               0x80

// Register: LCDDATA55
#define LCDDATA55 LCDDATA55
extern volatile unsigned char           LCDDATA55           __at(0xEC5);
#ifndef _LIB_BUILD
asm("LCDDATA55 equ 0EC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C6                  :1;
        unsigned S57C6                  :1;
        unsigned S58C6                  :1;
        unsigned S59C6                  :1;
        unsigned S60C6                  :1;
        unsigned S61C6                  :1;
        unsigned S62C6                  :1;
        unsigned S63C6                  :1;
    };
} LCDDATA55bits_t;
extern volatile LCDDATA55bits_t LCDDATA55bits __at(0xEC5);
// bitfield macros
#define _LCDDATA55_S56C6_POSN                               0x0
#define _LCDDATA55_S56C6_POSITION                           0x0
#define _LCDDATA55_S56C6_SIZE                               0x1
#define _LCDDATA55_S56C6_LENGTH                             0x1
#define _LCDDATA55_S56C6_MASK                               0x1
#define _LCDDATA55_S57C6_POSN                               0x1
#define _LCDDATA55_S57C6_POSITION                           0x1
#define _LCDDATA55_S57C6_SIZE                               0x1
#define _LCDDATA55_S57C6_LENGTH                             0x1
#define _LCDDATA55_S57C6_MASK                               0x2
#define _LCDDATA55_S58C6_POSN                               0x2
#define _LCDDATA55_S58C6_POSITION                           0x2
#define _LCDDATA55_S58C6_SIZE                               0x1
#define _LCDDATA55_S58C6_LENGTH                             0x1
#define _LCDDATA55_S58C6_MASK                               0x4
#define _LCDDATA55_S59C6_POSN                               0x3
#define _LCDDATA55_S59C6_POSITION                           0x3
#define _LCDDATA55_S59C6_SIZE                               0x1
#define _LCDDATA55_S59C6_LENGTH                             0x1
#define _LCDDATA55_S59C6_MASK                               0x8
#define _LCDDATA55_S60C6_POSN                               0x4
#define _LCDDATA55_S60C6_POSITION                           0x4
#define _LCDDATA55_S60C6_SIZE                               0x1
#define _LCDDATA55_S60C6_LENGTH                             0x1
#define _LCDDATA55_S60C6_MASK                               0x10
#define _LCDDATA55_S61C6_POSN                               0x5
#define _LCDDATA55_S61C6_POSITION                           0x5
#define _LCDDATA55_S61C6_SIZE                               0x1
#define _LCDDATA55_S61C6_LENGTH                             0x1
#define _LCDDATA55_S61C6_MASK                               0x20
#define _LCDDATA55_S62C6_POSN                               0x6
#define _LCDDATA55_S62C6_POSITION                           0x6
#define _LCDDATA55_S62C6_SIZE                               0x1
#define _LCDDATA55_S62C6_LENGTH                             0x1
#define _LCDDATA55_S62C6_MASK                               0x40
#define _LCDDATA55_S63C6_POSN                               0x7
#define _LCDDATA55_S63C6_POSITION                           0x7
#define _LCDDATA55_S63C6_SIZE                               0x1
#define _LCDDATA55_S63C6_LENGTH                             0x1
#define _LCDDATA55_S63C6_MASK                               0x80

// Register: LCDDATA56
#define LCDDATA56 LCDDATA56
extern volatile unsigned char           LCDDATA56           __at(0xEC6);
#ifndef _LIB_BUILD
asm("LCDDATA56 equ 0EC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C7                  :1;
        unsigned S01C7                  :1;
        unsigned S02C7                  :1;
        unsigned S03C7                  :1;
        unsigned S04C7                  :1;
        unsigned S05C7                  :1;
        unsigned S06C7                  :1;
        unsigned S07C7                  :1;
    };
} LCDDATA56bits_t;
extern volatile LCDDATA56bits_t LCDDATA56bits __at(0xEC6);
// bitfield macros
#define _LCDDATA56_S00C7_POSN                               0x0
#define _LCDDATA56_S00C7_POSITION                           0x0
#define _LCDDATA56_S00C7_SIZE                               0x1
#define _LCDDATA56_S00C7_LENGTH                             0x1
#define _LCDDATA56_S00C7_MASK                               0x1
#define _LCDDATA56_S01C7_POSN                               0x1
#define _LCDDATA56_S01C7_POSITION                           0x1
#define _LCDDATA56_S01C7_SIZE                               0x1
#define _LCDDATA56_S01C7_LENGTH                             0x1
#define _LCDDATA56_S01C7_MASK                               0x2
#define _LCDDATA56_S02C7_POSN                               0x2
#define _LCDDATA56_S02C7_POSITION                           0x2
#define _LCDDATA56_S02C7_SIZE                               0x1
#define _LCDDATA56_S02C7_LENGTH                             0x1
#define _LCDDATA56_S02C7_MASK                               0x4
#define _LCDDATA56_S03C7_POSN                               0x3
#define _LCDDATA56_S03C7_POSITION                           0x3
#define _LCDDATA56_S03C7_SIZE                               0x1
#define _LCDDATA56_S03C7_LENGTH                             0x1
#define _LCDDATA56_S03C7_MASK                               0x8
#define _LCDDATA56_S04C7_POSN                               0x4
#define _LCDDATA56_S04C7_POSITION                           0x4
#define _LCDDATA56_S04C7_SIZE                               0x1
#define _LCDDATA56_S04C7_LENGTH                             0x1
#define _LCDDATA56_S04C7_MASK                               0x10
#define _LCDDATA56_S05C7_POSN                               0x5
#define _LCDDATA56_S05C7_POSITION                           0x5
#define _LCDDATA56_S05C7_SIZE                               0x1
#define _LCDDATA56_S05C7_LENGTH                             0x1
#define _LCDDATA56_S05C7_MASK                               0x20
#define _LCDDATA56_S06C7_POSN                               0x6
#define _LCDDATA56_S06C7_POSITION                           0x6
#define _LCDDATA56_S06C7_SIZE                               0x1
#define _LCDDATA56_S06C7_LENGTH                             0x1
#define _LCDDATA56_S06C7_MASK                               0x40
#define _LCDDATA56_S07C7_POSN                               0x7
#define _LCDDATA56_S07C7_POSITION                           0x7
#define _LCDDATA56_S07C7_SIZE                               0x1
#define _LCDDATA56_S07C7_LENGTH                             0x1
#define _LCDDATA56_S07C7_MASK                               0x80

// Register: LCDDATA57
#define LCDDATA57 LCDDATA57
extern volatile unsigned char           LCDDATA57           __at(0xEC7);
#ifndef _LIB_BUILD
asm("LCDDATA57 equ 0EC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C7                  :1;
        unsigned S09C7                  :1;
        unsigned S10C7                  :1;
        unsigned S11C7                  :1;
        unsigned S12C7                  :1;
        unsigned S13C7                  :1;
        unsigned S14C7                  :1;
        unsigned S15C7                  :1;
    };
} LCDDATA57bits_t;
extern volatile LCDDATA57bits_t LCDDATA57bits __at(0xEC7);
// bitfield macros
#define _LCDDATA57_S08C7_POSN                               0x0
#define _LCDDATA57_S08C7_POSITION                           0x0
#define _LCDDATA57_S08C7_SIZE                               0x1
#define _LCDDATA57_S08C7_LENGTH                             0x1
#define _LCDDATA57_S08C7_MASK                               0x1
#define _LCDDATA57_S09C7_POSN                               0x1
#define _LCDDATA57_S09C7_POSITION                           0x1
#define _LCDDATA57_S09C7_SIZE                               0x1
#define _LCDDATA57_S09C7_LENGTH                             0x1
#define _LCDDATA57_S09C7_MASK                               0x2
#define _LCDDATA57_S10C7_POSN                               0x2
#define _LCDDATA57_S10C7_POSITION                           0x2
#define _LCDDATA57_S10C7_SIZE                               0x1
#define _LCDDATA57_S10C7_LENGTH                             0x1
#define _LCDDATA57_S10C7_MASK                               0x4
#define _LCDDATA57_S11C7_POSN                               0x3
#define _LCDDATA57_S11C7_POSITION                           0x3
#define _LCDDATA57_S11C7_SIZE                               0x1
#define _LCDDATA57_S11C7_LENGTH                             0x1
#define _LCDDATA57_S11C7_MASK                               0x8
#define _LCDDATA57_S12C7_POSN                               0x4
#define _LCDDATA57_S12C7_POSITION                           0x4
#define _LCDDATA57_S12C7_SIZE                               0x1
#define _LCDDATA57_S12C7_LENGTH                             0x1
#define _LCDDATA57_S12C7_MASK                               0x10
#define _LCDDATA57_S13C7_POSN                               0x5
#define _LCDDATA57_S13C7_POSITION                           0x5
#define _LCDDATA57_S13C7_SIZE                               0x1
#define _LCDDATA57_S13C7_LENGTH                             0x1
#define _LCDDATA57_S13C7_MASK                               0x20
#define _LCDDATA57_S14C7_POSN                               0x6
#define _LCDDATA57_S14C7_POSITION                           0x6
#define _LCDDATA57_S14C7_SIZE                               0x1
#define _LCDDATA57_S14C7_LENGTH                             0x1
#define _LCDDATA57_S14C7_MASK                               0x40
#define _LCDDATA57_S15C7_POSN                               0x7
#define _LCDDATA57_S15C7_POSITION                           0x7
#define _LCDDATA57_S15C7_SIZE                               0x1
#define _LCDDATA57_S15C7_LENGTH                             0x1
#define _LCDDATA57_S15C7_MASK                               0x80

// Register: LCDDATA58
#define LCDDATA58 LCDDATA58
extern volatile unsigned char           LCDDATA58           __at(0xEC8);
#ifndef _LIB_BUILD
asm("LCDDATA58 equ 0EC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C7                  :1;
        unsigned S17C7                  :1;
        unsigned S18C7                  :1;
        unsigned S19C7                  :1;
        unsigned S20C7                  :1;
        unsigned S21C7                  :1;
        unsigned S22C7                  :1;
        unsigned S23C7                  :1;
    };
} LCDDATA58bits_t;
extern volatile LCDDATA58bits_t LCDDATA58bits __at(0xEC8);
// bitfield macros
#define _LCDDATA58_S16C7_POSN                               0x0
#define _LCDDATA58_S16C7_POSITION                           0x0
#define _LCDDATA58_S16C7_SIZE                               0x1
#define _LCDDATA58_S16C7_LENGTH                             0x1
#define _LCDDATA58_S16C7_MASK                               0x1
#define _LCDDATA58_S17C7_POSN                               0x1
#define _LCDDATA58_S17C7_POSITION                           0x1
#define _LCDDATA58_S17C7_SIZE                               0x1
#define _LCDDATA58_S17C7_LENGTH                             0x1
#define _LCDDATA58_S17C7_MASK                               0x2
#define _LCDDATA58_S18C7_POSN                               0x2
#define _LCDDATA58_S18C7_POSITION                           0x2
#define _LCDDATA58_S18C7_SIZE                               0x1
#define _LCDDATA58_S18C7_LENGTH                             0x1
#define _LCDDATA58_S18C7_MASK                               0x4
#define _LCDDATA58_S19C7_POSN                               0x3
#define _LCDDATA58_S19C7_POSITION                           0x3
#define _LCDDATA58_S19C7_SIZE                               0x1
#define _LCDDATA58_S19C7_LENGTH                             0x1
#define _LCDDATA58_S19C7_MASK                               0x8
#define _LCDDATA58_S20C7_POSN                               0x4
#define _LCDDATA58_S20C7_POSITION                           0x4
#define _LCDDATA58_S20C7_SIZE                               0x1
#define _LCDDATA58_S20C7_LENGTH                             0x1
#define _LCDDATA58_S20C7_MASK                               0x10
#define _LCDDATA58_S21C7_POSN                               0x5
#define _LCDDATA58_S21C7_POSITION                           0x5
#define _LCDDATA58_S21C7_SIZE                               0x1
#define _LCDDATA58_S21C7_LENGTH                             0x1
#define _LCDDATA58_S21C7_MASK                               0x20
#define _LCDDATA58_S22C7_POSN                               0x6
#define _LCDDATA58_S22C7_POSITION                           0x6
#define _LCDDATA58_S22C7_SIZE                               0x1
#define _LCDDATA58_S22C7_LENGTH                             0x1
#define _LCDDATA58_S22C7_MASK                               0x40
#define _LCDDATA58_S23C7_POSN                               0x7
#define _LCDDATA58_S23C7_POSITION                           0x7
#define _LCDDATA58_S23C7_SIZE                               0x1
#define _LCDDATA58_S23C7_LENGTH                             0x1
#define _LCDDATA58_S23C7_MASK                               0x80

// Register: LCDDATA59
#define LCDDATA59 LCDDATA59
extern volatile unsigned char           LCDDATA59           __at(0xEC9);
#ifndef _LIB_BUILD
asm("LCDDATA59 equ 0EC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C7                  :1;
        unsigned S25C7                  :1;
        unsigned S26C7                  :1;
        unsigned S27C7                  :1;
        unsigned S28C7                  :1;
        unsigned S29C7                  :1;
        unsigned S30C7                  :1;
        unsigned S31C7                  :1;
    };
} LCDDATA59bits_t;
extern volatile LCDDATA59bits_t LCDDATA59bits __at(0xEC9);
// bitfield macros
#define _LCDDATA59_S24C7_POSN                               0x0
#define _LCDDATA59_S24C7_POSITION                           0x0
#define _LCDDATA59_S24C7_SIZE                               0x1
#define _LCDDATA59_S24C7_LENGTH                             0x1
#define _LCDDATA59_S24C7_MASK                               0x1
#define _LCDDATA59_S25C7_POSN                               0x1
#define _LCDDATA59_S25C7_POSITION                           0x1
#define _LCDDATA59_S25C7_SIZE                               0x1
#define _LCDDATA59_S25C7_LENGTH                             0x1
#define _LCDDATA59_S25C7_MASK                               0x2
#define _LCDDATA59_S26C7_POSN                               0x2
#define _LCDDATA59_S26C7_POSITION                           0x2
#define _LCDDATA59_S26C7_SIZE                               0x1
#define _LCDDATA59_S26C7_LENGTH                             0x1
#define _LCDDATA59_S26C7_MASK                               0x4
#define _LCDDATA59_S27C7_POSN                               0x3
#define _LCDDATA59_S27C7_POSITION                           0x3
#define _LCDDATA59_S27C7_SIZE                               0x1
#define _LCDDATA59_S27C7_LENGTH                             0x1
#define _LCDDATA59_S27C7_MASK                               0x8
#define _LCDDATA59_S28C7_POSN                               0x4
#define _LCDDATA59_S28C7_POSITION                           0x4
#define _LCDDATA59_S28C7_SIZE                               0x1
#define _LCDDATA59_S28C7_LENGTH                             0x1
#define _LCDDATA59_S28C7_MASK                               0x10
#define _LCDDATA59_S29C7_POSN                               0x5
#define _LCDDATA59_S29C7_POSITION                           0x5
#define _LCDDATA59_S29C7_SIZE                               0x1
#define _LCDDATA59_S29C7_LENGTH                             0x1
#define _LCDDATA59_S29C7_MASK                               0x20
#define _LCDDATA59_S30C7_POSN                               0x6
#define _LCDDATA59_S30C7_POSITION                           0x6
#define _LCDDATA59_S30C7_SIZE                               0x1
#define _LCDDATA59_S30C7_LENGTH                             0x1
#define _LCDDATA59_S30C7_MASK                               0x40
#define _LCDDATA59_S31C7_POSN                               0x7
#define _LCDDATA59_S31C7_POSITION                           0x7
#define _LCDDATA59_S31C7_SIZE                               0x1
#define _LCDDATA59_S31C7_LENGTH                             0x1
#define _LCDDATA59_S31C7_MASK                               0x80

// Register: LCDDATA60
#define LCDDATA60 LCDDATA60
extern volatile unsigned char           LCDDATA60           __at(0xECA);
#ifndef _LIB_BUILD
asm("LCDDATA60 equ 0ECAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C7                  :1;
        unsigned S33C7                  :1;
        unsigned S34C7                  :1;
        unsigned S35C7                  :1;
        unsigned S36C7                  :1;
        unsigned S37C7                  :1;
        unsigned S38C7                  :1;
        unsigned S39C7                  :1;
    };
} LCDDATA60bits_t;
extern volatile LCDDATA60bits_t LCDDATA60bits __at(0xECA);
// bitfield macros
#define _LCDDATA60_S32C7_POSN                               0x0
#define _LCDDATA60_S32C7_POSITION                           0x0
#define _LCDDATA60_S32C7_SIZE                               0x1
#define _LCDDATA60_S32C7_LENGTH                             0x1
#define _LCDDATA60_S32C7_MASK                               0x1
#define _LCDDATA60_S33C7_POSN                               0x1
#define _LCDDATA60_S33C7_POSITION                           0x1
#define _LCDDATA60_S33C7_SIZE                               0x1
#define _LCDDATA60_S33C7_LENGTH                             0x1
#define _LCDDATA60_S33C7_MASK                               0x2
#define _LCDDATA60_S34C7_POSN                               0x2
#define _LCDDATA60_S34C7_POSITION                           0x2
#define _LCDDATA60_S34C7_SIZE                               0x1
#define _LCDDATA60_S34C7_LENGTH                             0x1
#define _LCDDATA60_S34C7_MASK                               0x4
#define _LCDDATA60_S35C7_POSN                               0x3
#define _LCDDATA60_S35C7_POSITION                           0x3
#define _LCDDATA60_S35C7_SIZE                               0x1
#define _LCDDATA60_S35C7_LENGTH                             0x1
#define _LCDDATA60_S35C7_MASK                               0x8
#define _LCDDATA60_S36C7_POSN                               0x4
#define _LCDDATA60_S36C7_POSITION                           0x4
#define _LCDDATA60_S36C7_SIZE                               0x1
#define _LCDDATA60_S36C7_LENGTH                             0x1
#define _LCDDATA60_S36C7_MASK                               0x10
#define _LCDDATA60_S37C7_POSN                               0x5
#define _LCDDATA60_S37C7_POSITION                           0x5
#define _LCDDATA60_S37C7_SIZE                               0x1
#define _LCDDATA60_S37C7_LENGTH                             0x1
#define _LCDDATA60_S37C7_MASK                               0x20
#define _LCDDATA60_S38C7_POSN                               0x6
#define _LCDDATA60_S38C7_POSITION                           0x6
#define _LCDDATA60_S38C7_SIZE                               0x1
#define _LCDDATA60_S38C7_LENGTH                             0x1
#define _LCDDATA60_S38C7_MASK                               0x40
#define _LCDDATA60_S39C7_POSN                               0x7
#define _LCDDATA60_S39C7_POSITION                           0x7
#define _LCDDATA60_S39C7_SIZE                               0x1
#define _LCDDATA60_S39C7_LENGTH                             0x1
#define _LCDDATA60_S39C7_MASK                               0x80

// Register: LCDDATA61
#define LCDDATA61 LCDDATA61
extern volatile unsigned char           LCDDATA61           __at(0xECB);
#ifndef _LIB_BUILD
asm("LCDDATA61 equ 0ECBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C7                  :1;
        unsigned S41C7                  :1;
        unsigned S42C7                  :1;
        unsigned S43C7                  :1;
        unsigned S44C7                  :1;
        unsigned S45C7                  :1;
        unsigned S46C7                  :1;
        unsigned S47C7                  :1;
    };
} LCDDATA61bits_t;
extern volatile LCDDATA61bits_t LCDDATA61bits __at(0xECB);
// bitfield macros
#define _LCDDATA61_S40C7_POSN                               0x0
#define _LCDDATA61_S40C7_POSITION                           0x0
#define _LCDDATA61_S40C7_SIZE                               0x1
#define _LCDDATA61_S40C7_LENGTH                             0x1
#define _LCDDATA61_S40C7_MASK                               0x1
#define _LCDDATA61_S41C7_POSN                               0x1
#define _LCDDATA61_S41C7_POSITION                           0x1
#define _LCDDATA61_S41C7_SIZE                               0x1
#define _LCDDATA61_S41C7_LENGTH                             0x1
#define _LCDDATA61_S41C7_MASK                               0x2
#define _LCDDATA61_S42C7_POSN                               0x2
#define _LCDDATA61_S42C7_POSITION                           0x2
#define _LCDDATA61_S42C7_SIZE                               0x1
#define _LCDDATA61_S42C7_LENGTH                             0x1
#define _LCDDATA61_S42C7_MASK                               0x4
#define _LCDDATA61_S43C7_POSN                               0x3
#define _LCDDATA61_S43C7_POSITION                           0x3
#define _LCDDATA61_S43C7_SIZE                               0x1
#define _LCDDATA61_S43C7_LENGTH                             0x1
#define _LCDDATA61_S43C7_MASK                               0x8
#define _LCDDATA61_S44C7_POSN                               0x4
#define _LCDDATA61_S44C7_POSITION                           0x4
#define _LCDDATA61_S44C7_SIZE                               0x1
#define _LCDDATA61_S44C7_LENGTH                             0x1
#define _LCDDATA61_S44C7_MASK                               0x10
#define _LCDDATA61_S45C7_POSN                               0x5
#define _LCDDATA61_S45C7_POSITION                           0x5
#define _LCDDATA61_S45C7_SIZE                               0x1
#define _LCDDATA61_S45C7_LENGTH                             0x1
#define _LCDDATA61_S45C7_MASK                               0x20
#define _LCDDATA61_S46C7_POSN                               0x6
#define _LCDDATA61_S46C7_POSITION                           0x6
#define _LCDDATA61_S46C7_SIZE                               0x1
#define _LCDDATA61_S46C7_LENGTH                             0x1
#define _LCDDATA61_S46C7_MASK                               0x40
#define _LCDDATA61_S47C7_POSN                               0x7
#define _LCDDATA61_S47C7_POSITION                           0x7
#define _LCDDATA61_S47C7_SIZE                               0x1
#define _LCDDATA61_S47C7_LENGTH                             0x1
#define _LCDDATA61_S47C7_MASK                               0x80

// Register: LCDDATA62
#define LCDDATA62 LCDDATA62
extern volatile unsigned char           LCDDATA62           __at(0xECC);
#ifndef _LIB_BUILD
asm("LCDDATA62 equ 0ECCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S48C7                  :1;
        unsigned S49C7                  :1;
        unsigned S50C7                  :1;
        unsigned S51C7                  :1;
        unsigned S52C7                  :1;
        unsigned S53C7                  :1;
        unsigned S54C7                  :1;
        unsigned S55C7                  :1;
    };
} LCDDATA62bits_t;
extern volatile LCDDATA62bits_t LCDDATA62bits __at(0xECC);
// bitfield macros
#define _LCDDATA62_S48C7_POSN                               0x0
#define _LCDDATA62_S48C7_POSITION                           0x0
#define _LCDDATA62_S48C7_SIZE                               0x1
#define _LCDDATA62_S48C7_LENGTH                             0x1
#define _LCDDATA62_S48C7_MASK                               0x1
#define _LCDDATA62_S49C7_POSN                               0x1
#define _LCDDATA62_S49C7_POSITION                           0x1
#define _LCDDATA62_S49C7_SIZE                               0x1
#define _LCDDATA62_S49C7_LENGTH                             0x1
#define _LCDDATA62_S49C7_MASK                               0x2
#define _LCDDATA62_S50C7_POSN                               0x2
#define _LCDDATA62_S50C7_POSITION                           0x2
#define _LCDDATA62_S50C7_SIZE                               0x1
#define _LCDDATA62_S50C7_LENGTH                             0x1
#define _LCDDATA62_S50C7_MASK                               0x4
#define _LCDDATA62_S51C7_POSN                               0x3
#define _LCDDATA62_S51C7_POSITION                           0x3
#define _LCDDATA62_S51C7_SIZE                               0x1
#define _LCDDATA62_S51C7_LENGTH                             0x1
#define _LCDDATA62_S51C7_MASK                               0x8
#define _LCDDATA62_S52C7_POSN                               0x4
#define _LCDDATA62_S52C7_POSITION                           0x4
#define _LCDDATA62_S52C7_SIZE                               0x1
#define _LCDDATA62_S52C7_LENGTH                             0x1
#define _LCDDATA62_S52C7_MASK                               0x10
#define _LCDDATA62_S53C7_POSN                               0x5
#define _LCDDATA62_S53C7_POSITION                           0x5
#define _LCDDATA62_S53C7_SIZE                               0x1
#define _LCDDATA62_S53C7_LENGTH                             0x1
#define _LCDDATA62_S53C7_MASK                               0x20
#define _LCDDATA62_S54C7_POSN                               0x6
#define _LCDDATA62_S54C7_POSITION                           0x6
#define _LCDDATA62_S54C7_SIZE                               0x1
#define _LCDDATA62_S54C7_LENGTH                             0x1
#define _LCDDATA62_S54C7_MASK                               0x40
#define _LCDDATA62_S55C7_POSN                               0x7
#define _LCDDATA62_S55C7_POSITION                           0x7
#define _LCDDATA62_S55C7_SIZE                               0x1
#define _LCDDATA62_S55C7_LENGTH                             0x1
#define _LCDDATA62_S55C7_MASK                               0x80

// Register: LCDDATA63
#define LCDDATA63 LCDDATA63
extern volatile unsigned char           LCDDATA63           __at(0xECD);
#ifndef _LIB_BUILD
asm("LCDDATA63 equ 0ECDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S56C7                  :1;
        unsigned S57C7                  :1;
        unsigned S58C7                  :1;
        unsigned S59C7                  :1;
        unsigned S60C7                  :1;
        unsigned S61C7                  :1;
        unsigned S62C7                  :1;
        unsigned S63C7                  :1;
    };
} LCDDATA63bits_t;
extern volatile LCDDATA63bits_t LCDDATA63bits __at(0xECD);
// bitfield macros
#define _LCDDATA63_S56C7_POSN                               0x0
#define _LCDDATA63_S56C7_POSITION                           0x0
#define _LCDDATA63_S56C7_SIZE                               0x1
#define _LCDDATA63_S56C7_LENGTH                             0x1
#define _LCDDATA63_S56C7_MASK                               0x1
#define _LCDDATA63_S57C7_POSN                               0x1
#define _LCDDATA63_S57C7_POSITION                           0x1
#define _LCDDATA63_S57C7_SIZE                               0x1
#define _LCDDATA63_S57C7_LENGTH                             0x1
#define _LCDDATA63_S57C7_MASK                               0x2
#define _LCDDATA63_S58C7_POSN                               0x2
#define _LCDDATA63_S58C7_POSITION                           0x2
#define _LCDDATA63_S58C7_SIZE                               0x1
#define _LCDDATA63_S58C7_LENGTH                             0x1
#define _LCDDATA63_S58C7_MASK                               0x4
#define _LCDDATA63_S59C7_POSN                               0x3
#define _LCDDATA63_S59C7_POSITION                           0x3
#define _LCDDATA63_S59C7_SIZE                               0x1
#define _LCDDATA63_S59C7_LENGTH                             0x1
#define _LCDDATA63_S59C7_MASK                               0x8
#define _LCDDATA63_S60C7_POSN                               0x4
#define _LCDDATA63_S60C7_POSITION                           0x4
#define _LCDDATA63_S60C7_SIZE                               0x1
#define _LCDDATA63_S60C7_LENGTH                             0x1
#define _LCDDATA63_S60C7_MASK                               0x10
#define _LCDDATA63_S61C7_POSN                               0x5
#define _LCDDATA63_S61C7_POSITION                           0x5
#define _LCDDATA63_S61C7_SIZE                               0x1
#define _LCDDATA63_S61C7_LENGTH                             0x1
#define _LCDDATA63_S61C7_MASK                               0x20
#define _LCDDATA63_S62C7_POSN                               0x6
#define _LCDDATA63_S62C7_POSITION                           0x6
#define _LCDDATA63_S62C7_SIZE                               0x1
#define _LCDDATA63_S62C7_LENGTH                             0x1
#define _LCDDATA63_S62C7_MASK                               0x40
#define _LCDDATA63_S63C7_POSN                               0x7
#define _LCDDATA63_S63C7_POSITION                           0x7
#define _LCDDATA63_S63C7_SIZE                               0x1
#define _LCDDATA63_S63C7_LENGTH                             0x1
#define _LCDDATA63_S63C7_MASK                               0x80

// Register: LCDSE0
#define LCDSE0 LCDSE0
extern volatile unsigned char           LCDSE0              __at(0xECE);
#ifndef _LIB_BUILD
asm("LCDSE0 equ 0ECEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE00                   :1;
        unsigned SE01                   :1;
        unsigned SE02                   :1;
        unsigned SE03                   :1;
        unsigned SE04                   :1;
        unsigned SE05                   :1;
        unsigned SE06                   :1;
        unsigned SE07                   :1;
    };
} LCDSE0bits_t;
extern volatile LCDSE0bits_t LCDSE0bits __at(0xECE);
// bitfield macros
#define _LCDSE0_SE00_POSN                                   0x0
#define _LCDSE0_SE00_POSITION                               0x0
#define _LCDSE0_SE00_SIZE                                   0x1
#define _LCDSE0_SE00_LENGTH                                 0x1
#define _LCDSE0_SE00_MASK                                   0x1
#define _LCDSE0_SE01_POSN                                   0x1
#define _LCDSE0_SE01_POSITION                               0x1
#define _LCDSE0_SE01_SIZE                                   0x1
#define _LCDSE0_SE01_LENGTH                                 0x1
#define _LCDSE0_SE01_MASK                                   0x2
#define _LCDSE0_SE02_POSN                                   0x2
#define _LCDSE0_SE02_POSITION                               0x2
#define _LCDSE0_SE02_SIZE                                   0x1
#define _LCDSE0_SE02_LENGTH                                 0x1
#define _LCDSE0_SE02_MASK                                   0x4
#define _LCDSE0_SE03_POSN                                   0x3
#define _LCDSE0_SE03_POSITION                               0x3
#define _LCDSE0_SE03_SIZE                                   0x1
#define _LCDSE0_SE03_LENGTH                                 0x1
#define _LCDSE0_SE03_MASK                                   0x8
#define _LCDSE0_SE04_POSN                                   0x4
#define _LCDSE0_SE04_POSITION                               0x4
#define _LCDSE0_SE04_SIZE                                   0x1
#define _LCDSE0_SE04_LENGTH                                 0x1
#define _LCDSE0_SE04_MASK                                   0x10
#define _LCDSE0_SE05_POSN                                   0x5
#define _LCDSE0_SE05_POSITION                               0x5
#define _LCDSE0_SE05_SIZE                                   0x1
#define _LCDSE0_SE05_LENGTH                                 0x1
#define _LCDSE0_SE05_MASK                                   0x20
#define _LCDSE0_SE06_POSN                                   0x6
#define _LCDSE0_SE06_POSITION                               0x6
#define _LCDSE0_SE06_SIZE                                   0x1
#define _LCDSE0_SE06_LENGTH                                 0x1
#define _LCDSE0_SE06_MASK                                   0x40
#define _LCDSE0_SE07_POSN                                   0x7
#define _LCDSE0_SE07_POSITION                               0x7
#define _LCDSE0_SE07_SIZE                                   0x1
#define _LCDSE0_SE07_LENGTH                                 0x1
#define _LCDSE0_SE07_MASK                                   0x80

// Register: LCDSE1
#define LCDSE1 LCDSE1
extern volatile unsigned char           LCDSE1              __at(0xECF);
#ifndef _LIB_BUILD
asm("LCDSE1 equ 0ECFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE08                   :1;
        unsigned SE09                   :1;
        unsigned SE10                   :1;
        unsigned SE11                   :1;
        unsigned SE12                   :1;
        unsigned SE13                   :1;
        unsigned SE14                   :1;
        unsigned SE15                   :1;
    };
} LCDSE1bits_t;
extern volatile LCDSE1bits_t LCDSE1bits __at(0xECF);
// bitfield macros
#define _LCDSE1_SE08_POSN                                   0x0
#define _LCDSE1_SE08_POSITION                               0x0
#define _LCDSE1_SE08_SIZE                                   0x1
#define _LCDSE1_SE08_LENGTH                                 0x1
#define _LCDSE1_SE08_MASK                                   0x1
#define _LCDSE1_SE09_POSN                                   0x1
#define _LCDSE1_SE09_POSITION                               0x1
#define _LCDSE1_SE09_SIZE                                   0x1
#define _LCDSE1_SE09_LENGTH                                 0x1
#define _LCDSE1_SE09_MASK                                   0x2
#define _LCDSE1_SE10_POSN                                   0x2
#define _LCDSE1_SE10_POSITION                               0x2
#define _LCDSE1_SE10_SIZE                                   0x1
#define _LCDSE1_SE10_LENGTH                                 0x1
#define _LCDSE1_SE10_MASK                                   0x4
#define _LCDSE1_SE11_POSN                                   0x3
#define _LCDSE1_SE11_POSITION                               0x3
#define _LCDSE1_SE11_SIZE                                   0x1
#define _LCDSE1_SE11_LENGTH                                 0x1
#define _LCDSE1_SE11_MASK                                   0x8
#define _LCDSE1_SE12_POSN                                   0x4
#define _LCDSE1_SE12_POSITION                               0x4
#define _LCDSE1_SE12_SIZE                                   0x1
#define _LCDSE1_SE12_LENGTH                                 0x1
#define _LCDSE1_SE12_MASK                                   0x10
#define _LCDSE1_SE13_POSN                                   0x5
#define _LCDSE1_SE13_POSITION                               0x5
#define _LCDSE1_SE13_SIZE                                   0x1
#define _LCDSE1_SE13_LENGTH                                 0x1
#define _LCDSE1_SE13_MASK                                   0x20
#define _LCDSE1_SE14_POSN                                   0x6
#define _LCDSE1_SE14_POSITION                               0x6
#define _LCDSE1_SE14_SIZE                                   0x1
#define _LCDSE1_SE14_LENGTH                                 0x1
#define _LCDSE1_SE14_MASK                                   0x40
#define _LCDSE1_SE15_POSN                                   0x7
#define _LCDSE1_SE15_POSITION                               0x7
#define _LCDSE1_SE15_SIZE                                   0x1
#define _LCDSE1_SE15_LENGTH                                 0x1
#define _LCDSE1_SE15_MASK                                   0x80

// Register: LCDSE2
#define LCDSE2 LCDSE2
extern volatile unsigned char           LCDSE2              __at(0xED0);
#ifndef _LIB_BUILD
asm("LCDSE2 equ 0ED0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE16                   :1;
        unsigned SE17                   :1;
        unsigned SE18                   :1;
        unsigned SE19                   :1;
        unsigned SE20                   :1;
        unsigned SE21                   :1;
        unsigned SE22                   :1;
        unsigned SE23                   :1;
    };
} LCDSE2bits_t;
extern volatile LCDSE2bits_t LCDSE2bits __at(0xED0);
// bitfield macros
#define _LCDSE2_SE16_POSN                                   0x0
#define _LCDSE2_SE16_POSITION                               0x0
#define _LCDSE2_SE16_SIZE                                   0x1
#define _LCDSE2_SE16_LENGTH                                 0x1
#define _LCDSE2_SE16_MASK                                   0x1
#define _LCDSE2_SE17_POSN                                   0x1
#define _LCDSE2_SE17_POSITION                               0x1
#define _LCDSE2_SE17_SIZE                                   0x1
#define _LCDSE2_SE17_LENGTH                                 0x1
#define _LCDSE2_SE17_MASK                                   0x2
#define _LCDSE2_SE18_POSN                                   0x2
#define _LCDSE2_SE18_POSITION                               0x2
#define _LCDSE2_SE18_SIZE                                   0x1
#define _LCDSE2_SE18_LENGTH                                 0x1
#define _LCDSE2_SE18_MASK                                   0x4
#define _LCDSE2_SE19_POSN                                   0x3
#define _LCDSE2_SE19_POSITION                               0x3
#define _LCDSE2_SE19_SIZE                                   0x1
#define _LCDSE2_SE19_LENGTH                                 0x1
#define _LCDSE2_SE19_MASK                                   0x8
#define _LCDSE2_SE20_POSN                                   0x4
#define _LCDSE2_SE20_POSITION                               0x4
#define _LCDSE2_SE20_SIZE                                   0x1
#define _LCDSE2_SE20_LENGTH                                 0x1
#define _LCDSE2_SE20_MASK                                   0x10
#define _LCDSE2_SE21_POSN                                   0x5
#define _LCDSE2_SE21_POSITION                               0x5
#define _LCDSE2_SE21_SIZE                                   0x1
#define _LCDSE2_SE21_LENGTH                                 0x1
#define _LCDSE2_SE21_MASK                                   0x20
#define _LCDSE2_SE22_POSN                                   0x6
#define _LCDSE2_SE22_POSITION                               0x6
#define _LCDSE2_SE22_SIZE                                   0x1
#define _LCDSE2_SE22_LENGTH                                 0x1
#define _LCDSE2_SE22_MASK                                   0x40
#define _LCDSE2_SE23_POSN                                   0x7
#define _LCDSE2_SE23_POSITION                               0x7
#define _LCDSE2_SE23_SIZE                                   0x1
#define _LCDSE2_SE23_LENGTH                                 0x1
#define _LCDSE2_SE23_MASK                                   0x80

// Register: LCDSE3
#define LCDSE3 LCDSE3
extern volatile unsigned char           LCDSE3              __at(0xED1);
#ifndef _LIB_BUILD
asm("LCDSE3 equ 0ED1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE24                   :1;
        unsigned SE25                   :1;
        unsigned SE26                   :1;
        unsigned SE27                   :1;
        unsigned SE28                   :1;
        unsigned SE29                   :1;
        unsigned SE30                   :1;
        unsigned SE31                   :1;
    };
} LCDSE3bits_t;
extern volatile LCDSE3bits_t LCDSE3bits __at(0xED1);
// bitfield macros
#define _LCDSE3_SE24_POSN                                   0x0
#define _LCDSE3_SE24_POSITION                               0x0
#define _LCDSE3_SE24_SIZE                                   0x1
#define _LCDSE3_SE24_LENGTH                                 0x1
#define _LCDSE3_SE24_MASK                                   0x1
#define _LCDSE3_SE25_POSN                                   0x1
#define _LCDSE3_SE25_POSITION                               0x1
#define _LCDSE3_SE25_SIZE                                   0x1
#define _LCDSE3_SE25_LENGTH                                 0x1
#define _LCDSE3_SE25_MASK                                   0x2
#define _LCDSE3_SE26_POSN                                   0x2
#define _LCDSE3_SE26_POSITION                               0x2
#define _LCDSE3_SE26_SIZE                                   0x1
#define _LCDSE3_SE26_LENGTH                                 0x1
#define _LCDSE3_SE26_MASK                                   0x4
#define _LCDSE3_SE27_POSN                                   0x3
#define _LCDSE3_SE27_POSITION                               0x3
#define _LCDSE3_SE27_SIZE                                   0x1
#define _LCDSE3_SE27_LENGTH                                 0x1
#define _LCDSE3_SE27_MASK                                   0x8
#define _LCDSE3_SE28_POSN                                   0x4
#define _LCDSE3_SE28_POSITION                               0x4
#define _LCDSE3_SE28_SIZE                                   0x1
#define _LCDSE3_SE28_LENGTH                                 0x1
#define _LCDSE3_SE28_MASK                                   0x10
#define _LCDSE3_SE29_POSN                                   0x5
#define _LCDSE3_SE29_POSITION                               0x5
#define _LCDSE3_SE29_SIZE                                   0x1
#define _LCDSE3_SE29_LENGTH                                 0x1
#define _LCDSE3_SE29_MASK                                   0x20
#define _LCDSE3_SE30_POSN                                   0x6
#define _LCDSE3_SE30_POSITION                               0x6
#define _LCDSE3_SE30_SIZE                                   0x1
#define _LCDSE3_SE30_LENGTH                                 0x1
#define _LCDSE3_SE30_MASK                                   0x40
#define _LCDSE3_SE31_POSN                                   0x7
#define _LCDSE3_SE31_POSITION                               0x7
#define _LCDSE3_SE31_SIZE                                   0x1
#define _LCDSE3_SE31_LENGTH                                 0x1
#define _LCDSE3_SE31_MASK                                   0x80

// Register: LCDSE4
#define LCDSE4 LCDSE4
extern volatile unsigned char           LCDSE4              __at(0xED2);
#ifndef _LIB_BUILD
asm("LCDSE4 equ 0ED2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE32                   :1;
        unsigned SE33                   :1;
        unsigned SE34                   :1;
        unsigned SE35                   :1;
        unsigned SE36                   :1;
        unsigned SE37                   :1;
        unsigned SE38                   :1;
        unsigned SE39                   :1;
    };
} LCDSE4bits_t;
extern volatile LCDSE4bits_t LCDSE4bits __at(0xED2);
// bitfield macros
#define _LCDSE4_SE32_POSN                                   0x0
#define _LCDSE4_SE32_POSITION                               0x0
#define _LCDSE4_SE32_SIZE                                   0x1
#define _LCDSE4_SE32_LENGTH                                 0x1
#define _LCDSE4_SE32_MASK                                   0x1
#define _LCDSE4_SE33_POSN                                   0x1
#define _LCDSE4_SE33_POSITION                               0x1
#define _LCDSE4_SE33_SIZE                                   0x1
#define _LCDSE4_SE33_LENGTH                                 0x1
#define _LCDSE4_SE33_MASK                                   0x2
#define _LCDSE4_SE34_POSN                                   0x2
#define _LCDSE4_SE34_POSITION                               0x2
#define _LCDSE4_SE34_SIZE                                   0x1
#define _LCDSE4_SE34_LENGTH                                 0x1
#define _LCDSE4_SE34_MASK                                   0x4
#define _LCDSE4_SE35_POSN                                   0x3
#define _LCDSE4_SE35_POSITION                               0x3
#define _LCDSE4_SE35_SIZE                                   0x1
#define _LCDSE4_SE35_LENGTH                                 0x1
#define _LCDSE4_SE35_MASK                                   0x8
#define _LCDSE4_SE36_POSN                                   0x4
#define _LCDSE4_SE36_POSITION                               0x4
#define _LCDSE4_SE36_SIZE                                   0x1
#define _LCDSE4_SE36_LENGTH                                 0x1
#define _LCDSE4_SE36_MASK                                   0x10
#define _LCDSE4_SE37_POSN                                   0x5
#define _LCDSE4_SE37_POSITION                               0x5
#define _LCDSE4_SE37_SIZE                                   0x1
#define _LCDSE4_SE37_LENGTH                                 0x1
#define _LCDSE4_SE37_MASK                                   0x20
#define _LCDSE4_SE38_POSN                                   0x6
#define _LCDSE4_SE38_POSITION                               0x6
#define _LCDSE4_SE38_SIZE                                   0x1
#define _LCDSE4_SE38_LENGTH                                 0x1
#define _LCDSE4_SE38_MASK                                   0x40
#define _LCDSE4_SE39_POSN                                   0x7
#define _LCDSE4_SE39_POSITION                               0x7
#define _LCDSE4_SE39_SIZE                                   0x1
#define _LCDSE4_SE39_LENGTH                                 0x1
#define _LCDSE4_SE39_MASK                                   0x80

// Register: LCDSE5
#define LCDSE5 LCDSE5
extern volatile unsigned char           LCDSE5              __at(0xED3);
#ifndef _LIB_BUILD
asm("LCDSE5 equ 0ED3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE40                   :1;
        unsigned SE41                   :1;
        unsigned SE42                   :1;
        unsigned SE43                   :1;
        unsigned SE44                   :1;
        unsigned SE45                   :1;
        unsigned SE46                   :1;
        unsigned SE47                   :1;
    };
} LCDSE5bits_t;
extern volatile LCDSE5bits_t LCDSE5bits __at(0xED3);
// bitfield macros
#define _LCDSE5_SE40_POSN                                   0x0
#define _LCDSE5_SE40_POSITION                               0x0
#define _LCDSE5_SE40_SIZE                                   0x1
#define _LCDSE5_SE40_LENGTH                                 0x1
#define _LCDSE5_SE40_MASK                                   0x1
#define _LCDSE5_SE41_POSN                                   0x1
#define _LCDSE5_SE41_POSITION                               0x1
#define _LCDSE5_SE41_SIZE                                   0x1
#define _LCDSE5_SE41_LENGTH                                 0x1
#define _LCDSE5_SE41_MASK                                   0x2
#define _LCDSE5_SE42_POSN                                   0x2
#define _LCDSE5_SE42_POSITION                               0x2
#define _LCDSE5_SE42_SIZE                                   0x1
#define _LCDSE5_SE42_LENGTH                                 0x1
#define _LCDSE5_SE42_MASK                                   0x4
#define _LCDSE5_SE43_POSN                                   0x3
#define _LCDSE5_SE43_POSITION                               0x3
#define _LCDSE5_SE43_SIZE                                   0x1
#define _LCDSE5_SE43_LENGTH                                 0x1
#define _LCDSE5_SE43_MASK                                   0x8
#define _LCDSE5_SE44_POSN                                   0x4
#define _LCDSE5_SE44_POSITION                               0x4
#define _LCDSE5_SE44_SIZE                                   0x1
#define _LCDSE5_SE44_LENGTH                                 0x1
#define _LCDSE5_SE44_MASK                                   0x10
#define _LCDSE5_SE45_POSN                                   0x5
#define _LCDSE5_SE45_POSITION                               0x5
#define _LCDSE5_SE45_SIZE                                   0x1
#define _LCDSE5_SE45_LENGTH                                 0x1
#define _LCDSE5_SE45_MASK                                   0x20
#define _LCDSE5_SE46_POSN                                   0x6
#define _LCDSE5_SE46_POSITION                               0x6
#define _LCDSE5_SE46_SIZE                                   0x1
#define _LCDSE5_SE46_LENGTH                                 0x1
#define _LCDSE5_SE46_MASK                                   0x40
#define _LCDSE5_SE47_POSN                                   0x7
#define _LCDSE5_SE47_POSITION                               0x7
#define _LCDSE5_SE47_SIZE                                   0x1
#define _LCDSE5_SE47_LENGTH                                 0x1
#define _LCDSE5_SE47_MASK                                   0x80

// Register: LCDSE6
#define LCDSE6 LCDSE6
extern volatile unsigned char           LCDSE6              __at(0xED4);
#ifndef _LIB_BUILD
asm("LCDSE6 equ 0ED4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE48                   :1;
        unsigned SE49                   :1;
        unsigned SE50                   :1;
        unsigned SE51                   :1;
        unsigned SE52                   :1;
        unsigned SE53                   :1;
        unsigned SE54                   :1;
        unsigned SE55                   :1;
    };
} LCDSE6bits_t;
extern volatile LCDSE6bits_t LCDSE6bits __at(0xED4);
// bitfield macros
#define _LCDSE6_SE48_POSN                                   0x0
#define _LCDSE6_SE48_POSITION                               0x0
#define _LCDSE6_SE48_SIZE                                   0x1
#define _LCDSE6_SE48_LENGTH                                 0x1
#define _LCDSE6_SE48_MASK                                   0x1
#define _LCDSE6_SE49_POSN                                   0x1
#define _LCDSE6_SE49_POSITION                               0x1
#define _LCDSE6_SE49_SIZE                                   0x1
#define _LCDSE6_SE49_LENGTH                                 0x1
#define _LCDSE6_SE49_MASK                                   0x2
#define _LCDSE6_SE50_POSN                                   0x2
#define _LCDSE6_SE50_POSITION                               0x2
#define _LCDSE6_SE50_SIZE                                   0x1
#define _LCDSE6_SE50_LENGTH                                 0x1
#define _LCDSE6_SE50_MASK                                   0x4
#define _LCDSE6_SE51_POSN                                   0x3
#define _LCDSE6_SE51_POSITION                               0x3
#define _LCDSE6_SE51_SIZE                                   0x1
#define _LCDSE6_SE51_LENGTH                                 0x1
#define _LCDSE6_SE51_MASK                                   0x8
#define _LCDSE6_SE52_POSN                                   0x4
#define _LCDSE6_SE52_POSITION                               0x4
#define _LCDSE6_SE52_SIZE                                   0x1
#define _LCDSE6_SE52_LENGTH                                 0x1
#define _LCDSE6_SE52_MASK                                   0x10
#define _LCDSE6_SE53_POSN                                   0x5
#define _LCDSE6_SE53_POSITION                               0x5
#define _LCDSE6_SE53_SIZE                                   0x1
#define _LCDSE6_SE53_LENGTH                                 0x1
#define _LCDSE6_SE53_MASK                                   0x20
#define _LCDSE6_SE54_POSN                                   0x6
#define _LCDSE6_SE54_POSITION                               0x6
#define _LCDSE6_SE54_SIZE                                   0x1
#define _LCDSE6_SE54_LENGTH                                 0x1
#define _LCDSE6_SE54_MASK                                   0x40
#define _LCDSE6_SE55_POSN                                   0x7
#define _LCDSE6_SE55_POSITION                               0x7
#define _LCDSE6_SE55_SIZE                                   0x1
#define _LCDSE6_SE55_LENGTH                                 0x1
#define _LCDSE6_SE55_MASK                                   0x80

// Register: LCDSE7
#define LCDSE7 LCDSE7
extern volatile unsigned char           LCDSE7              __at(0xED5);
#ifndef _LIB_BUILD
asm("LCDSE7 equ 0ED5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE56                   :1;
        unsigned SE57                   :1;
        unsigned SE58                   :1;
        unsigned SE59                   :1;
        unsigned SE60                   :1;
        unsigned SE61                   :1;
        unsigned SE62                   :1;
        unsigned SE63                   :1;
    };
} LCDSE7bits_t;
extern volatile LCDSE7bits_t LCDSE7bits __at(0xED5);
// bitfield macros
#define _LCDSE7_SE56_POSN                                   0x0
#define _LCDSE7_SE56_POSITION                               0x0
#define _LCDSE7_SE56_SIZE                                   0x1
#define _LCDSE7_SE56_LENGTH                                 0x1
#define _LCDSE7_SE56_MASK                                   0x1
#define _LCDSE7_SE57_POSN                                   0x1
#define _LCDSE7_SE57_POSITION                               0x1
#define _LCDSE7_SE57_SIZE                                   0x1
#define _LCDSE7_SE57_LENGTH                                 0x1
#define _LCDSE7_SE57_MASK                                   0x2
#define _LCDSE7_SE58_POSN                                   0x2
#define _LCDSE7_SE58_POSITION                               0x2
#define _LCDSE7_SE58_SIZE                                   0x1
#define _LCDSE7_SE58_LENGTH                                 0x1
#define _LCDSE7_SE58_MASK                                   0x4
#define _LCDSE7_SE59_POSN                                   0x3
#define _LCDSE7_SE59_POSITION                               0x3
#define _LCDSE7_SE59_SIZE                                   0x1
#define _LCDSE7_SE59_LENGTH                                 0x1
#define _LCDSE7_SE59_MASK                                   0x8
#define _LCDSE7_SE60_POSN                                   0x4
#define _LCDSE7_SE60_POSITION                               0x4
#define _LCDSE7_SE60_SIZE                                   0x1
#define _LCDSE7_SE60_LENGTH                                 0x1
#define _LCDSE7_SE60_MASK                                   0x10
#define _LCDSE7_SE61_POSN                                   0x5
#define _LCDSE7_SE61_POSITION                               0x5
#define _LCDSE7_SE61_SIZE                                   0x1
#define _LCDSE7_SE61_LENGTH                                 0x1
#define _LCDSE7_SE61_MASK                                   0x20
#define _LCDSE7_SE62_POSN                                   0x6
#define _LCDSE7_SE62_POSITION                               0x6
#define _LCDSE7_SE62_SIZE                                   0x1
#define _LCDSE7_SE62_LENGTH                                 0x1
#define _LCDSE7_SE62_MASK                                   0x40
#define _LCDSE7_SE63_POSN                                   0x7
#define _LCDSE7_SE63_POSITION                               0x7
#define _LCDSE7_SE63_SIZE                                   0x1
#define _LCDSE7_SE63_LENGTH                                 0x1
#define _LCDSE7_SE63_MASK                                   0x80

// Register: LCDRL
#define LCDRL LCDRL
extern volatile unsigned char           LCDRL               __at(0xED6);
#ifndef _LIB_BUILD
asm("LCDRL equ 0ED6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LRLAT                  :3;
        unsigned                        :1;
        unsigned LRLBP                  :2;
        unsigned LRLAP                  :2;
    };
    struct {
        unsigned LRLAT0                 :1;
        unsigned LRLAT1                 :1;
        unsigned LRLAT2                 :1;
        unsigned                        :1;
        unsigned LRLBP0                 :1;
        unsigned LRLBP1                 :1;
        unsigned LRLAP0                 :1;
        unsigned LRLAP1                 :1;
    };
} LCDRLbits_t;
extern volatile LCDRLbits_t LCDRLbits __at(0xED6);
// bitfield macros
#define _LCDRL_LRLAT_POSN                                   0x0
#define _LCDRL_LRLAT_POSITION                               0x0
#define _LCDRL_LRLAT_SIZE                                   0x3
#define _LCDRL_LRLAT_LENGTH                                 0x3
#define _LCDRL_LRLAT_MASK                                   0x7
#define _LCDRL_LRLBP_POSN                                   0x4
#define _LCDRL_LRLBP_POSITION                               0x4
#define _LCDRL_LRLBP_SIZE                                   0x2
#define _LCDRL_LRLBP_LENGTH                                 0x2
#define _LCDRL_LRLBP_MASK                                   0x30
#define _LCDRL_LRLAP_POSN                                   0x6
#define _LCDRL_LRLAP_POSITION                               0x6
#define _LCDRL_LRLAP_SIZE                                   0x2
#define _LCDRL_LRLAP_LENGTH                                 0x2
#define _LCDRL_LRLAP_MASK                                   0xC0
#define _LCDRL_LRLAT0_POSN                                  0x0
#define _LCDRL_LRLAT0_POSITION                              0x0
#define _LCDRL_LRLAT0_SIZE                                  0x1
#define _LCDRL_LRLAT0_LENGTH                                0x1
#define _LCDRL_LRLAT0_MASK                                  0x1
#define _LCDRL_LRLAT1_POSN                                  0x1
#define _LCDRL_LRLAT1_POSITION                              0x1
#define _LCDRL_LRLAT1_SIZE                                  0x1
#define _LCDRL_LRLAT1_LENGTH                                0x1
#define _LCDRL_LRLAT1_MASK                                  0x2
#define _LCDRL_LRLAT2_POSN                                  0x2
#define _LCDRL_LRLAT2_POSITION                              0x2
#define _LCDRL_LRLAT2_SIZE                                  0x1
#define _LCDRL_LRLAT2_LENGTH                                0x1
#define _LCDRL_LRLAT2_MASK                                  0x4
#define _LCDRL_LRLBP0_POSN                                  0x4
#define _LCDRL_LRLBP0_POSITION                              0x4
#define _LCDRL_LRLBP0_SIZE                                  0x1
#define _LCDRL_LRLBP0_LENGTH                                0x1
#define _LCDRL_LRLBP0_MASK                                  0x10
#define _LCDRL_LRLBP1_POSN                                  0x5
#define _LCDRL_LRLBP1_POSITION                              0x5
#define _LCDRL_LRLBP1_SIZE                                  0x1
#define _LCDRL_LRLBP1_LENGTH                                0x1
#define _LCDRL_LRLBP1_MASK                                  0x20
#define _LCDRL_LRLAP0_POSN                                  0x6
#define _LCDRL_LRLAP0_POSITION                              0x6
#define _LCDRL_LRLAP0_SIZE                                  0x1
#define _LCDRL_LRLAP0_LENGTH                                0x1
#define _LCDRL_LRLAP0_MASK                                  0x40
#define _LCDRL_LRLAP1_POSN                                  0x7
#define _LCDRL_LRLAP1_POSITION                              0x7
#define _LCDRL_LRLAP1_SIZE                                  0x1
#define _LCDRL_LRLAP1_LENGTH                                0x1
#define _LCDRL_LRLAP1_MASK                                  0x80

// Register: LCDREF
#define LCDREF LCDREF
extern volatile unsigned char           LCDREF              __at(0xED7);
#ifndef _LIB_BUILD
asm("LCDREF equ 0ED7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VLCD1PE                :1;
        unsigned VLCD2PE                :1;
        unsigned VLCD3PE                :1;
        unsigned LCDCST                 :3;
        unsigned                        :1;
        unsigned LCDIRE                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned LCDCST0                :1;
        unsigned LCDCST1                :1;
        unsigned LCDCST2                :1;
    };
} LCDREFbits_t;
extern volatile LCDREFbits_t LCDREFbits __at(0xED7);
// bitfield macros
#define _LCDREF_VLCD1PE_POSN                                0x0
#define _LCDREF_VLCD1PE_POSITION                            0x0
#define _LCDREF_VLCD1PE_SIZE                                0x1
#define _LCDREF_VLCD1PE_LENGTH                              0x1
#define _LCDREF_VLCD1PE_MASK                                0x1
#define _LCDREF_VLCD2PE_POSN                                0x1
#define _LCDREF_VLCD2PE_POSITION                            0x1
#define _LCDREF_VLCD2PE_SIZE                                0x1
#define _LCDREF_VLCD2PE_LENGTH                              0x1
#define _LCDREF_VLCD2PE_MASK                                0x2
#define _LCDREF_VLCD3PE_POSN                                0x2
#define _LCDREF_VLCD3PE_POSITION                            0x2
#define _LCDREF_VLCD3PE_SIZE                                0x1
#define _LCDREF_VLCD3PE_LENGTH                              0x1
#define _LCDREF_VLCD3PE_MASK                                0x4
#define _LCDREF_LCDCST_POSN                                 0x3
#define _LCDREF_LCDCST_POSITION                             0x3
#define _LCDREF_LCDCST_SIZE                                 0x3
#define _LCDREF_LCDCST_LENGTH                               0x3
#define _LCDREF_LCDCST_MASK                                 0x38
#define _LCDREF_LCDIRE_POSN                                 0x7
#define _LCDREF_LCDIRE_POSITION                             0x7
#define _LCDREF_LCDIRE_SIZE                                 0x1
#define _LCDREF_LCDIRE_LENGTH                               0x1
#define _LCDREF_LCDIRE_MASK                                 0x80
#define _LCDREF_LCDCST0_POSN                                0x3
#define _LCDREF_LCDCST0_POSITION                            0x3
#define _LCDREF_LCDCST0_SIZE                                0x1
#define _LCDREF_LCDCST0_LENGTH                              0x1
#define _LCDREF_LCDCST0_MASK                                0x8
#define _LCDREF_LCDCST1_POSN                                0x4
#define _LCDREF_LCDCST1_POSITION                            0x4
#define _LCDREF_LCDCST1_SIZE                                0x1
#define _LCDREF_LCDCST1_LENGTH                              0x1
#define _LCDREF_LCDCST1_MASK                                0x10
#define _LCDREF_LCDCST2_POSN                                0x5
#define _LCDREF_LCDCST2_POSITION                            0x5
#define _LCDREF_LCDCST2_SIZE                                0x1
#define _LCDREF_LCDCST2_LENGTH                              0x1
#define _LCDREF_LCDCST2_MASK                                0x20

// Register: LCDREG
#define LCDREG LCDREG
extern volatile unsigned char           LCDREG              __at(0xED8);
#ifndef _LIB_BUILD
asm("LCDREG equ 0ED8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKSEL                 :2;
        unsigned MODE13                 :1;
        unsigned BIAS                   :3;
        unsigned                        :1;
        unsigned CPEN                   :1;
    };
    struct {
        unsigned CLKSEL0                :1;
        unsigned CLKSEL1                :1;
        unsigned                        :1;
        unsigned BIAS0                  :1;
        unsigned BIAS1                  :1;
        unsigned BIAS2                  :1;
    };
} LCDREGbits_t;
extern volatile LCDREGbits_t LCDREGbits __at(0xED8);
// bitfield macros
#define _LCDREG_CLKSEL_POSN                                 0x0
#define _LCDREG_CLKSEL_POSITION                             0x0
#define _LCDREG_CLKSEL_SIZE                                 0x2
#define _LCDREG_CLKSEL_LENGTH                               0x2
#define _LCDREG_CLKSEL_MASK                                 0x3
#define _LCDREG_MODE13_POSN                                 0x2
#define _LCDREG_MODE13_POSITION                             0x2
#define _LCDREG_MODE13_SIZE                                 0x1
#define _LCDREG_MODE13_LENGTH                               0x1
#define _LCDREG_MODE13_MASK                                 0x4
#define _LCDREG_BIAS_POSN                                   0x3
#define _LCDREG_BIAS_POSITION                               0x3
#define _LCDREG_BIAS_SIZE                                   0x3
#define _LCDREG_BIAS_LENGTH                                 0x3
#define _LCDREG_BIAS_MASK                                   0x38
#define _LCDREG_CPEN_POSN                                   0x7
#define _LCDREG_CPEN_POSITION                               0x7
#define _LCDREG_CPEN_SIZE                                   0x1
#define _LCDREG_CPEN_LENGTH                                 0x1
#define _LCDREG_CPEN_MASK                                   0x80
#define _LCDREG_CLKSEL0_POSN                                0x0
#define _LCDREG_CLKSEL0_POSITION                            0x0
#define _LCDREG_CLKSEL0_SIZE                                0x1
#define _LCDREG_CLKSEL0_LENGTH                              0x1
#define _LCDREG_CLKSEL0_MASK                                0x1
#define _LCDREG_CLKSEL1_POSN                                0x1
#define _LCDREG_CLKSEL1_POSITION                            0x1
#define _LCDREG_CLKSEL1_SIZE                                0x1
#define _LCDREG_CLKSEL1_LENGTH                              0x1
#define _LCDREG_CLKSEL1_MASK                                0x2
#define _LCDREG_BIAS0_POSN                                  0x3
#define _LCDREG_BIAS0_POSITION                              0x3
#define _LCDREG_BIAS0_SIZE                                  0x1
#define _LCDREG_BIAS0_LENGTH                                0x1
#define _LCDREG_BIAS0_MASK                                  0x8
#define _LCDREG_BIAS1_POSN                                  0x4
#define _LCDREG_BIAS1_POSITION                              0x4
#define _LCDREG_BIAS1_SIZE                                  0x1
#define _LCDREG_BIAS1_LENGTH                                0x1
#define _LCDREG_BIAS1_MASK                                  0x10
#define _LCDREG_BIAS2_POSN                                  0x5
#define _LCDREG_BIAS2_POSITION                              0x5
#define _LCDREG_BIAS2_SIZE                                  0x1
#define _LCDREG_BIAS2_LENGTH                                0x1
#define _LCDREG_BIAS2_MASK                                  0x20

// Register: LCDCON
#define LCDCON LCDCON
extern volatile unsigned char           LCDCON              __at(0xED9);
#ifndef _LIB_BUILD
asm("LCDCON equ 0ED9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LMUX                   :3;
        unsigned CS                     :2;
        unsigned WERR                   :1;
        unsigned SLPEN                  :1;
        unsigned LCDEN                  :1;
    };
    struct {
        unsigned LMUX0                  :1;
        unsigned LMUX1                  :1;
        unsigned LMUX2                  :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
    };
} LCDCONbits_t;
extern volatile LCDCONbits_t LCDCONbits __at(0xED9);
// bitfield macros
#define _LCDCON_LMUX_POSN                                   0x0
#define _LCDCON_LMUX_POSITION                               0x0
#define _LCDCON_LMUX_SIZE                                   0x3
#define _LCDCON_LMUX_LENGTH                                 0x3
#define _LCDCON_LMUX_MASK                                   0x7
#define _LCDCON_CS_POSN                                     0x3
#define _LCDCON_CS_POSITION                                 0x3
#define _LCDCON_CS_SIZE                                     0x2
#define _LCDCON_CS_LENGTH                                   0x2
#define _LCDCON_CS_MASK                                     0x18
#define _LCDCON_WERR_POSN                                   0x5
#define _LCDCON_WERR_POSITION                               0x5
#define _LCDCON_WERR_SIZE                                   0x1
#define _LCDCON_WERR_LENGTH                                 0x1
#define _LCDCON_WERR_MASK                                   0x20
#define _LCDCON_SLPEN_POSN                                  0x6
#define _LCDCON_SLPEN_POSITION                              0x6
#define _LCDCON_SLPEN_SIZE                                  0x1
#define _LCDCON_SLPEN_LENGTH                                0x1
#define _LCDCON_SLPEN_MASK                                  0x40
#define _LCDCON_LCDEN_POSN                                  0x7
#define _LCDCON_LCDEN_POSITION                              0x7
#define _LCDCON_LCDEN_SIZE                                  0x1
#define _LCDCON_LCDEN_LENGTH                                0x1
#define _LCDCON_LCDEN_MASK                                  0x80
#define _LCDCON_LMUX0_POSN                                  0x0
#define _LCDCON_LMUX0_POSITION                              0x0
#define _LCDCON_LMUX0_SIZE                                  0x1
#define _LCDCON_LMUX0_LENGTH                                0x1
#define _LCDCON_LMUX0_MASK                                  0x1
#define _LCDCON_LMUX1_POSN                                  0x1
#define _LCDCON_LMUX1_POSITION                              0x1
#define _LCDCON_LMUX1_SIZE                                  0x1
#define _LCDCON_LMUX1_LENGTH                                0x1
#define _LCDCON_LMUX1_MASK                                  0x2
#define _LCDCON_LMUX2_POSN                                  0x2
#define _LCDCON_LMUX2_POSITION                              0x2
#define _LCDCON_LMUX2_SIZE                                  0x1
#define _LCDCON_LMUX2_LENGTH                                0x1
#define _LCDCON_LMUX2_MASK                                  0x4
#define _LCDCON_CS0_POSN                                    0x3
#define _LCDCON_CS0_POSITION                                0x3
#define _LCDCON_CS0_SIZE                                    0x1
#define _LCDCON_CS0_LENGTH                                  0x1
#define _LCDCON_CS0_MASK                                    0x8
#define _LCDCON_CS1_POSN                                    0x4
#define _LCDCON_CS1_POSITION                                0x4
#define _LCDCON_CS1_SIZE                                    0x1
#define _LCDCON_CS1_LENGTH                                  0x1
#define _LCDCON_CS1_MASK                                    0x10

// Register: LCDPS
#define LCDPS LCDPS
extern volatile unsigned char           LCDPS               __at(0xEDA);
#ifndef _LIB_BUILD
asm("LCDPS equ 0EDAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LP                     :4;
        unsigned WA                     :1;
        unsigned LCDA                   :1;
        unsigned BIASMD                 :1;
        unsigned WFT                    :1;
    };
    struct {
        unsigned LP0                    :1;
        unsigned LP1                    :1;
        unsigned LP2                    :1;
        unsigned LP3                    :1;
    };
} LCDPSbits_t;
extern volatile LCDPSbits_t LCDPSbits __at(0xEDA);
// bitfield macros
#define _LCDPS_LP_POSN                                      0x0
#define _LCDPS_LP_POSITION                                  0x0
#define _LCDPS_LP_SIZE                                      0x4
#define _LCDPS_LP_LENGTH                                    0x4
#define _LCDPS_LP_MASK                                      0xF
#define _LCDPS_WA_POSN                                      0x4
#define _LCDPS_WA_POSITION                                  0x4
#define _LCDPS_WA_SIZE                                      0x1
#define _LCDPS_WA_LENGTH                                    0x1
#define _LCDPS_WA_MASK                                      0x10
#define _LCDPS_LCDA_POSN                                    0x5
#define _LCDPS_LCDA_POSITION                                0x5
#define _LCDPS_LCDA_SIZE                                    0x1
#define _LCDPS_LCDA_LENGTH                                  0x1
#define _LCDPS_LCDA_MASK                                    0x20
#define _LCDPS_BIASMD_POSN                                  0x6
#define _LCDPS_BIASMD_POSITION                              0x6
#define _LCDPS_BIASMD_SIZE                                  0x1
#define _LCDPS_BIASMD_LENGTH                                0x1
#define _LCDPS_BIASMD_MASK                                  0x40
#define _LCDPS_WFT_POSN                                     0x7
#define _LCDPS_WFT_POSITION                                 0x7
#define _LCDPS_WFT_SIZE                                     0x1
#define _LCDPS_WFT_LENGTH                                   0x1
#define _LCDPS_WFT_MASK                                     0x80
#define _LCDPS_LP0_POSN                                     0x0
#define _LCDPS_LP0_POSITION                                 0x0
#define _LCDPS_LP0_SIZE                                     0x1
#define _LCDPS_LP0_LENGTH                                   0x1
#define _LCDPS_LP0_MASK                                     0x1
#define _LCDPS_LP1_POSN                                     0x1
#define _LCDPS_LP1_POSITION                                 0x1
#define _LCDPS_LP1_SIZE                                     0x1
#define _LCDPS_LP1_LENGTH                                   0x1
#define _LCDPS_LP1_MASK                                     0x2
#define _LCDPS_LP2_POSN                                     0x2
#define _LCDPS_LP2_POSITION                                 0x2
#define _LCDPS_LP2_SIZE                                     0x1
#define _LCDPS_LP2_LENGTH                                   0x1
#define _LCDPS_LP2_MASK                                     0x4
#define _LCDPS_LP3_POSN                                     0x3
#define _LCDPS_LP3_POSITION                                 0x3
#define _LCDPS_LP3_SIZE                                     0x1
#define _LCDPS_LP3_LENGTH                                   0x1
#define _LCDPS_LP3_MASK                                     0x8

// Register: REFO2CON3
#define REFO2CON3 REFO2CON3
extern volatile unsigned char           REFO2CON3           __at(0xEDB);
#ifndef _LIB_BUILD
asm("REFO2CON3 equ 0EDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RODIV                  :7;
    };
    struct {
        unsigned RODIV8                 :1;
        unsigned RODIV9                 :1;
        unsigned RODIV10                :1;
        unsigned RODIV11                :1;
        unsigned RODIV12                :1;
        unsigned RODIV13                :1;
        unsigned RODIV14                :1;
    };
} REFO2CON3bits_t;
extern volatile REFO2CON3bits_t REFO2CON3bits __at(0xEDB);
// bitfield macros
#define _REFO2CON3_RODIV_POSN                               0x0
#define _REFO2CON3_RODIV_POSITION                           0x0
#define _REFO2CON3_RODIV_SIZE                               0x7
#define _REFO2CON3_RODIV_LENGTH                             0x7
#define _REFO2CON3_RODIV_MASK                               0x7F
#define _REFO2CON3_RODIV8_POSN                              0x0
#define _REFO2CON3_RODIV8_POSITION                          0x0
#define _REFO2CON3_RODIV8_SIZE                              0x1
#define _REFO2CON3_RODIV8_LENGTH                            0x1
#define _REFO2CON3_RODIV8_MASK                              0x1
#define _REFO2CON3_RODIV9_POSN                              0x1
#define _REFO2CON3_RODIV9_POSITION                          0x1
#define _REFO2CON3_RODIV9_SIZE                              0x1
#define _REFO2CON3_RODIV9_LENGTH                            0x1
#define _REFO2CON3_RODIV9_MASK                              0x2
#define _REFO2CON3_RODIV10_POSN                             0x2
#define _REFO2CON3_RODIV10_POSITION                         0x2
#define _REFO2CON3_RODIV10_SIZE                             0x1
#define _REFO2CON3_RODIV10_LENGTH                           0x1
#define _REFO2CON3_RODIV10_MASK                             0x4
#define _REFO2CON3_RODIV11_POSN                             0x3
#define _REFO2CON3_RODIV11_POSITION                         0x3
#define _REFO2CON3_RODIV11_SIZE                             0x1
#define _REFO2CON3_RODIV11_LENGTH                           0x1
#define _REFO2CON3_RODIV11_MASK                             0x8
#define _REFO2CON3_RODIV12_POSN                             0x4
#define _REFO2CON3_RODIV12_POSITION                         0x4
#define _REFO2CON3_RODIV12_SIZE                             0x1
#define _REFO2CON3_RODIV12_LENGTH                           0x1
#define _REFO2CON3_RODIV12_MASK                             0x10
#define _REFO2CON3_RODIV13_POSN                             0x5
#define _REFO2CON3_RODIV13_POSITION                         0x5
#define _REFO2CON3_RODIV13_SIZE                             0x1
#define _REFO2CON3_RODIV13_LENGTH                           0x1
#define _REFO2CON3_RODIV13_MASK                             0x20
#define _REFO2CON3_RODIV14_POSN                             0x6
#define _REFO2CON3_RODIV14_POSITION                         0x6
#define _REFO2CON3_RODIV14_SIZE                             0x1
#define _REFO2CON3_RODIV14_LENGTH                           0x1
#define _REFO2CON3_RODIV14_MASK                             0x40

// Register: REFO2CON2
#define REFO2CON2 REFO2CON2
extern volatile unsigned char           REFO2CON2           __at(0xEDC);
#ifndef _LIB_BUILD
asm("REFO2CON2 equ 0EDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RODIV                  :8;
    };
    struct {
        unsigned RODIV0                 :1;
        unsigned RODIV1                 :1;
        unsigned RODIV2                 :1;
        unsigned RODIV3                 :1;
        unsigned RODIV4                 :1;
        unsigned RODIV5                 :1;
        unsigned RODIV6                 :1;
        unsigned RODIV7                 :1;
    };
} REFO2CON2bits_t;
extern volatile REFO2CON2bits_t REFO2CON2bits __at(0xEDC);
// bitfield macros
#define _REFO2CON2_RODIV_POSN                               0x0
#define _REFO2CON2_RODIV_POSITION                           0x0
#define _REFO2CON2_RODIV_SIZE                               0x8
#define _REFO2CON2_RODIV_LENGTH                             0x8
#define _REFO2CON2_RODIV_MASK                               0xFF
#define _REFO2CON2_RODIV0_POSN                              0x0
#define _REFO2CON2_RODIV0_POSITION                          0x0
#define _REFO2CON2_RODIV0_SIZE                              0x1
#define _REFO2CON2_RODIV0_LENGTH                            0x1
#define _REFO2CON2_RODIV0_MASK                              0x1
#define _REFO2CON2_RODIV1_POSN                              0x1
#define _REFO2CON2_RODIV1_POSITION                          0x1
#define _REFO2CON2_RODIV1_SIZE                              0x1
#define _REFO2CON2_RODIV1_LENGTH                            0x1
#define _REFO2CON2_RODIV1_MASK                              0x2
#define _REFO2CON2_RODIV2_POSN                              0x2
#define _REFO2CON2_RODIV2_POSITION                          0x2
#define _REFO2CON2_RODIV2_SIZE                              0x1
#define _REFO2CON2_RODIV2_LENGTH                            0x1
#define _REFO2CON2_RODIV2_MASK                              0x4
#define _REFO2CON2_RODIV3_POSN                              0x3
#define _REFO2CON2_RODIV3_POSITION                          0x3
#define _REFO2CON2_RODIV3_SIZE                              0x1
#define _REFO2CON2_RODIV3_LENGTH                            0x1
#define _REFO2CON2_RODIV3_MASK                              0x8
#define _REFO2CON2_RODIV4_POSN                              0x4
#define _REFO2CON2_RODIV4_POSITION                          0x4
#define _REFO2CON2_RODIV4_SIZE                              0x1
#define _REFO2CON2_RODIV4_LENGTH                            0x1
#define _REFO2CON2_RODIV4_MASK                              0x10
#define _REFO2CON2_RODIV5_POSN                              0x5
#define _REFO2CON2_RODIV5_POSITION                          0x5
#define _REFO2CON2_RODIV5_SIZE                              0x1
#define _REFO2CON2_RODIV5_LENGTH                            0x1
#define _REFO2CON2_RODIV5_MASK                              0x20
#define _REFO2CON2_RODIV6_POSN                              0x6
#define _REFO2CON2_RODIV6_POSITION                          0x6
#define _REFO2CON2_RODIV6_SIZE                              0x1
#define _REFO2CON2_RODIV6_LENGTH                            0x1
#define _REFO2CON2_RODIV6_MASK                              0x40
#define _REFO2CON2_RODIV7_POSN                              0x7
#define _REFO2CON2_RODIV7_POSITION                          0x7
#define _REFO2CON2_RODIV7_SIZE                              0x1
#define _REFO2CON2_RODIV7_LENGTH                            0x1
#define _REFO2CON2_RODIV7_MASK                              0x80

// Register: REFO2CON1
#define REFO2CON1 REFO2CON1
extern volatile unsigned char           REFO2CON1           __at(0xEDD);
#ifndef _LIB_BUILD
asm("REFO2CON1 equ 0EDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ROSEL                  :4;
    };
    struct {
        unsigned ROSEL0                 :1;
        unsigned ROSEL1                 :1;
        unsigned ROSEL2                 :1;
        unsigned ROSEL3                 :1;
    };
} REFO2CON1bits_t;
extern volatile REFO2CON1bits_t REFO2CON1bits __at(0xEDD);
// bitfield macros
#define _REFO2CON1_ROSEL_POSN                               0x0
#define _REFO2CON1_ROSEL_POSITION                           0x0
#define _REFO2CON1_ROSEL_SIZE                               0x4
#define _REFO2CON1_ROSEL_LENGTH                             0x4
#define _REFO2CON1_ROSEL_MASK                               0xF
#define _REFO2CON1_ROSEL0_POSN                              0x0
#define _REFO2CON1_ROSEL0_POSITION                          0x0
#define _REFO2CON1_ROSEL0_SIZE                              0x1
#define _REFO2CON1_ROSEL0_LENGTH                            0x1
#define _REFO2CON1_ROSEL0_MASK                              0x1
#define _REFO2CON1_ROSEL1_POSN                              0x1
#define _REFO2CON1_ROSEL1_POSITION                          0x1
#define _REFO2CON1_ROSEL1_SIZE                              0x1
#define _REFO2CON1_ROSEL1_LENGTH                            0x1
#define _REFO2CON1_ROSEL1_MASK                              0x2
#define _REFO2CON1_ROSEL2_POSN                              0x2
#define _REFO2CON1_ROSEL2_POSITION                          0x2
#define _REFO2CON1_ROSEL2_SIZE                              0x1
#define _REFO2CON1_ROSEL2_LENGTH                            0x1
#define _REFO2CON1_ROSEL2_MASK                              0x4
#define _REFO2CON1_ROSEL3_POSN                              0x3
#define _REFO2CON1_ROSEL3_POSITION                          0x3
#define _REFO2CON1_ROSEL3_SIZE                              0x1
#define _REFO2CON1_ROSEL3_LENGTH                            0x1
#define _REFO2CON1_ROSEL3_MASK                              0x8

// Register: REFO2CON
#define REFO2CON REFO2CON
extern volatile unsigned char           REFO2CON            __at(0xEDE);
#ifndef _LIB_BUILD
asm("REFO2CON equ 0EDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACTIVE                 :1;
        unsigned DIVSWEN                :1;
        unsigned                        :1;
        unsigned ROSSLP                 :1;
        unsigned ROOE                   :1;
        unsigned ROSIDL                 :1;
        unsigned                        :1;
        unsigned ROON                   :1;
    };
} REFO2CONbits_t;
extern volatile REFO2CONbits_t REFO2CONbits __at(0xEDE);
// bitfield macros
#define _REFO2CON_ACTIVE_POSN                               0x0
#define _REFO2CON_ACTIVE_POSITION                           0x0
#define _REFO2CON_ACTIVE_SIZE                               0x1
#define _REFO2CON_ACTIVE_LENGTH                             0x1
#define _REFO2CON_ACTIVE_MASK                               0x1
#define _REFO2CON_DIVSWEN_POSN                              0x1
#define _REFO2CON_DIVSWEN_POSITION                          0x1
#define _REFO2CON_DIVSWEN_SIZE                              0x1
#define _REFO2CON_DIVSWEN_LENGTH                            0x1
#define _REFO2CON_DIVSWEN_MASK                              0x2
#define _REFO2CON_ROSSLP_POSN                               0x3
#define _REFO2CON_ROSSLP_POSITION                           0x3
#define _REFO2CON_ROSSLP_SIZE                               0x1
#define _REFO2CON_ROSSLP_LENGTH                             0x1
#define _REFO2CON_ROSSLP_MASK                               0x8
#define _REFO2CON_ROOE_POSN                                 0x4
#define _REFO2CON_ROOE_POSITION                             0x4
#define _REFO2CON_ROOE_SIZE                                 0x1
#define _REFO2CON_ROOE_LENGTH                               0x1
#define _REFO2CON_ROOE_MASK                                 0x10
#define _REFO2CON_ROSIDL_POSN                               0x5
#define _REFO2CON_ROSIDL_POSITION                           0x5
#define _REFO2CON_ROSIDL_SIZE                               0x1
#define _REFO2CON_ROSIDL_LENGTH                             0x1
#define _REFO2CON_ROSIDL_MASK                               0x20
#define _REFO2CON_ROON_POSN                                 0x7
#define _REFO2CON_ROON_POSITION                             0x7
#define _REFO2CON_ROON_SIZE                                 0x1
#define _REFO2CON_ROON_LENGTH                               0x1
#define _REFO2CON_ROON_MASK                                 0x80

// Register: REFO1CON3
#define REFO1CON3 REFO1CON3
extern volatile unsigned char           REFO1CON3           __at(0xEDF);
#ifndef _LIB_BUILD
asm("REFO1CON3 equ 0EDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RODIV                  :7;
    };
    struct {
        unsigned RODIV8                 :1;
        unsigned RODIV9                 :1;
        unsigned RODIV10                :1;
        unsigned RODIV11                :1;
        unsigned RODIV12                :1;
        unsigned RODIV13                :1;
        unsigned RODIV14                :1;
    };
} REFO1CON3bits_t;
extern volatile REFO1CON3bits_t REFO1CON3bits __at(0xEDF);
// bitfield macros
#define _REFO1CON3_RODIV_POSN                               0x0
#define _REFO1CON3_RODIV_POSITION                           0x0
#define _REFO1CON3_RODIV_SIZE                               0x7
#define _REFO1CON3_RODIV_LENGTH                             0x7
#define _REFO1CON3_RODIV_MASK                               0x7F
#define _REFO1CON3_RODIV8_POSN                              0x0
#define _REFO1CON3_RODIV8_POSITION                          0x0
#define _REFO1CON3_RODIV8_SIZE                              0x1
#define _REFO1CON3_RODIV8_LENGTH                            0x1
#define _REFO1CON3_RODIV8_MASK                              0x1
#define _REFO1CON3_RODIV9_POSN                              0x1
#define _REFO1CON3_RODIV9_POSITION                          0x1
#define _REFO1CON3_RODIV9_SIZE                              0x1
#define _REFO1CON3_RODIV9_LENGTH                            0x1
#define _REFO1CON3_RODIV9_MASK                              0x2
#define _REFO1CON3_RODIV10_POSN                             0x2
#define _REFO1CON3_RODIV10_POSITION                         0x2
#define _REFO1CON3_RODIV10_SIZE                             0x1
#define _REFO1CON3_RODIV10_LENGTH                           0x1
#define _REFO1CON3_RODIV10_MASK                             0x4
#define _REFO1CON3_RODIV11_POSN                             0x3
#define _REFO1CON3_RODIV11_POSITION                         0x3
#define _REFO1CON3_RODIV11_SIZE                             0x1
#define _REFO1CON3_RODIV11_LENGTH                           0x1
#define _REFO1CON3_RODIV11_MASK                             0x8
#define _REFO1CON3_RODIV12_POSN                             0x4
#define _REFO1CON3_RODIV12_POSITION                         0x4
#define _REFO1CON3_RODIV12_SIZE                             0x1
#define _REFO1CON3_RODIV12_LENGTH                           0x1
#define _REFO1CON3_RODIV12_MASK                             0x10
#define _REFO1CON3_RODIV13_POSN                             0x5
#define _REFO1CON3_RODIV13_POSITION                         0x5
#define _REFO1CON3_RODIV13_SIZE                             0x1
#define _REFO1CON3_RODIV13_LENGTH                           0x1
#define _REFO1CON3_RODIV13_MASK                             0x20
#define _REFO1CON3_RODIV14_POSN                             0x6
#define _REFO1CON3_RODIV14_POSITION                         0x6
#define _REFO1CON3_RODIV14_SIZE                             0x1
#define _REFO1CON3_RODIV14_LENGTH                           0x1
#define _REFO1CON3_RODIV14_MASK                             0x40

// Register: REFO1CON2
#define REFO1CON2 REFO1CON2
extern volatile unsigned char           REFO1CON2           __at(0xEE0);
#ifndef _LIB_BUILD
asm("REFO1CON2 equ 0EE0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RODIV                  :8;
    };
    struct {
        unsigned RODIV0                 :1;
        unsigned RODIV1                 :1;
        unsigned RODIV2                 :1;
        unsigned RODIV3                 :1;
        unsigned RODIV4                 :1;
        unsigned RODIV5                 :1;
        unsigned RODIV6                 :1;
        unsigned RODIV7                 :1;
    };
} REFO1CON2bits_t;
extern volatile REFO1CON2bits_t REFO1CON2bits __at(0xEE0);
// bitfield macros
#define _REFO1CON2_RODIV_POSN                               0x0
#define _REFO1CON2_RODIV_POSITION                           0x0
#define _REFO1CON2_RODIV_SIZE                               0x8
#define _REFO1CON2_RODIV_LENGTH                             0x8
#define _REFO1CON2_RODIV_MASK                               0xFF
#define _REFO1CON2_RODIV0_POSN                              0x0
#define _REFO1CON2_RODIV0_POSITION                          0x0
#define _REFO1CON2_RODIV0_SIZE                              0x1
#define _REFO1CON2_RODIV0_LENGTH                            0x1
#define _REFO1CON2_RODIV0_MASK                              0x1
#define _REFO1CON2_RODIV1_POSN                              0x1
#define _REFO1CON2_RODIV1_POSITION                          0x1
#define _REFO1CON2_RODIV1_SIZE                              0x1
#define _REFO1CON2_RODIV1_LENGTH                            0x1
#define _REFO1CON2_RODIV1_MASK                              0x2
#define _REFO1CON2_RODIV2_POSN                              0x2
#define _REFO1CON2_RODIV2_POSITION                          0x2
#define _REFO1CON2_RODIV2_SIZE                              0x1
#define _REFO1CON2_RODIV2_LENGTH                            0x1
#define _REFO1CON2_RODIV2_MASK                              0x4
#define _REFO1CON2_RODIV3_POSN                              0x3
#define _REFO1CON2_RODIV3_POSITION                          0x3
#define _REFO1CON2_RODIV3_SIZE                              0x1
#define _REFO1CON2_RODIV3_LENGTH                            0x1
#define _REFO1CON2_RODIV3_MASK                              0x8
#define _REFO1CON2_RODIV4_POSN                              0x4
#define _REFO1CON2_RODIV4_POSITION                          0x4
#define _REFO1CON2_RODIV4_SIZE                              0x1
#define _REFO1CON2_RODIV4_LENGTH                            0x1
#define _REFO1CON2_RODIV4_MASK                              0x10
#define _REFO1CON2_RODIV5_POSN                              0x5
#define _REFO1CON2_RODIV5_POSITION                          0x5
#define _REFO1CON2_RODIV5_SIZE                              0x1
#define _REFO1CON2_RODIV5_LENGTH                            0x1
#define _REFO1CON2_RODIV5_MASK                              0x20
#define _REFO1CON2_RODIV6_POSN                              0x6
#define _REFO1CON2_RODIV6_POSITION                          0x6
#define _REFO1CON2_RODIV6_SIZE                              0x1
#define _REFO1CON2_RODIV6_LENGTH                            0x1
#define _REFO1CON2_RODIV6_MASK                              0x40
#define _REFO1CON2_RODIV7_POSN                              0x7
#define _REFO1CON2_RODIV7_POSITION                          0x7
#define _REFO1CON2_RODIV7_SIZE                              0x1
#define _REFO1CON2_RODIV7_LENGTH                            0x1
#define _REFO1CON2_RODIV7_MASK                              0x80

// Register: REFO1CON1
#define REFO1CON1 REFO1CON1
extern volatile unsigned char           REFO1CON1           __at(0xEE1);
#ifndef _LIB_BUILD
asm("REFO1CON1 equ 0EE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ROSEL                  :4;
    };
    struct {
        unsigned ROSEL0                 :1;
        unsigned ROSEL1                 :1;
        unsigned ROSEL2                 :1;
        unsigned ROSEL3                 :1;
    };
} REFO1CON1bits_t;
extern volatile REFO1CON1bits_t REFO1CON1bits __at(0xEE1);
// bitfield macros
#define _REFO1CON1_ROSEL_POSN                               0x0
#define _REFO1CON1_ROSEL_POSITION                           0x0
#define _REFO1CON1_ROSEL_SIZE                               0x4
#define _REFO1CON1_ROSEL_LENGTH                             0x4
#define _REFO1CON1_ROSEL_MASK                               0xF
#define _REFO1CON1_ROSEL0_POSN                              0x0
#define _REFO1CON1_ROSEL0_POSITION                          0x0
#define _REFO1CON1_ROSEL0_SIZE                              0x1
#define _REFO1CON1_ROSEL0_LENGTH                            0x1
#define _REFO1CON1_ROSEL0_MASK                              0x1
#define _REFO1CON1_ROSEL1_POSN                              0x1
#define _REFO1CON1_ROSEL1_POSITION                          0x1
#define _REFO1CON1_ROSEL1_SIZE                              0x1
#define _REFO1CON1_ROSEL1_LENGTH                            0x1
#define _REFO1CON1_ROSEL1_MASK                              0x2
#define _REFO1CON1_ROSEL2_POSN                              0x2
#define _REFO1CON1_ROSEL2_POSITION                          0x2
#define _REFO1CON1_ROSEL2_SIZE                              0x1
#define _REFO1CON1_ROSEL2_LENGTH                            0x1
#define _REFO1CON1_ROSEL2_MASK                              0x4
#define _REFO1CON1_ROSEL3_POSN                              0x3
#define _REFO1CON1_ROSEL3_POSITION                          0x3
#define _REFO1CON1_ROSEL3_SIZE                              0x1
#define _REFO1CON1_ROSEL3_LENGTH                            0x1
#define _REFO1CON1_ROSEL3_MASK                              0x8

// Register: REFO1CON
#define REFO1CON REFO1CON
extern volatile unsigned char           REFO1CON            __at(0xEE2);
#ifndef _LIB_BUILD
asm("REFO1CON equ 0EE2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACTIVE                 :1;
        unsigned DIVSWEN                :1;
        unsigned                        :1;
        unsigned ROSSLP                 :1;
        unsigned ROOE                   :1;
        unsigned ROSIDL                 :1;
        unsigned                        :1;
        unsigned ROON                   :1;
    };
} REFO1CONbits_t;
extern volatile REFO1CONbits_t REFO1CONbits __at(0xEE2);
// bitfield macros
#define _REFO1CON_ACTIVE_POSN                               0x0
#define _REFO1CON_ACTIVE_POSITION                           0x0
#define _REFO1CON_ACTIVE_SIZE                               0x1
#define _REFO1CON_ACTIVE_LENGTH                             0x1
#define _REFO1CON_ACTIVE_MASK                               0x1
#define _REFO1CON_DIVSWEN_POSN                              0x1
#define _REFO1CON_DIVSWEN_POSITION                          0x1
#define _REFO1CON_DIVSWEN_SIZE                              0x1
#define _REFO1CON_DIVSWEN_LENGTH                            0x1
#define _REFO1CON_DIVSWEN_MASK                              0x2
#define _REFO1CON_ROSSLP_POSN                               0x3
#define _REFO1CON_ROSSLP_POSITION                           0x3
#define _REFO1CON_ROSSLP_SIZE                               0x1
#define _REFO1CON_ROSSLP_LENGTH                             0x1
#define _REFO1CON_ROSSLP_MASK                               0x8
#define _REFO1CON_ROOE_POSN                                 0x4
#define _REFO1CON_ROOE_POSITION                             0x4
#define _REFO1CON_ROOE_SIZE                                 0x1
#define _REFO1CON_ROOE_LENGTH                               0x1
#define _REFO1CON_ROOE_MASK                                 0x10
#define _REFO1CON_ROSIDL_POSN                               0x5
#define _REFO1CON_ROSIDL_POSITION                           0x5
#define _REFO1CON_ROSIDL_SIZE                               0x1
#define _REFO1CON_ROSIDL_LENGTH                             0x1
#define _REFO1CON_ROSIDL_MASK                               0x20
#define _REFO1CON_ROON_POSN                                 0x7
#define _REFO1CON_ROON_POSITION                             0x7
#define _REFO1CON_ROON_SIZE                                 0x1
#define _REFO1CON_ROON_LENGTH                               0x1
#define _REFO1CON_ROON_MASK                                 0x80

// Register: MEMCON
#define MEMCON MEMCON
extern volatile unsigned char           MEMCON              __at(0xEE3);
#ifndef _LIB_BUILD
asm("MEMCON equ 0EE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WM                     :2;
        unsigned                        :2;
        unsigned WAIT                   :2;
        unsigned                        :1;
        unsigned EBDIS                  :1;
    };
    struct {
        unsigned WM0                    :1;
        unsigned WM1                    :1;
        unsigned                        :2;
        unsigned WAIT0                  :1;
        unsigned WAIT1                  :1;
    };
} MEMCONbits_t;
extern volatile MEMCONbits_t MEMCONbits __at(0xEE3);
// bitfield macros
#define _MEMCON_WM_POSN                                     0x0
#define _MEMCON_WM_POSITION                                 0x0
#define _MEMCON_WM_SIZE                                     0x2
#define _MEMCON_WM_LENGTH                                   0x2
#define _MEMCON_WM_MASK                                     0x3
#define _MEMCON_WAIT_POSN                                   0x4
#define _MEMCON_WAIT_POSITION                               0x4
#define _MEMCON_WAIT_SIZE                                   0x2
#define _MEMCON_WAIT_LENGTH                                 0x2
#define _MEMCON_WAIT_MASK                                   0x30
#define _MEMCON_EBDIS_POSN                                  0x7
#define _MEMCON_EBDIS_POSITION                              0x7
#define _MEMCON_EBDIS_SIZE                                  0x1
#define _MEMCON_EBDIS_LENGTH                                0x1
#define _MEMCON_EBDIS_MASK                                  0x80
#define _MEMCON_WM0_POSN                                    0x0
#define _MEMCON_WM0_POSITION                                0x0
#define _MEMCON_WM0_SIZE                                    0x1
#define _MEMCON_WM0_LENGTH                                  0x1
#define _MEMCON_WM0_MASK                                    0x1
#define _MEMCON_WM1_POSN                                    0x1
#define _MEMCON_WM1_POSITION                                0x1
#define _MEMCON_WM1_SIZE                                    0x1
#define _MEMCON_WM1_LENGTH                                  0x1
#define _MEMCON_WM1_MASK                                    0x2
#define _MEMCON_WAIT0_POSN                                  0x4
#define _MEMCON_WAIT0_POSITION                              0x4
#define _MEMCON_WAIT0_SIZE                                  0x1
#define _MEMCON_WAIT0_LENGTH                                0x1
#define _MEMCON_WAIT0_MASK                                  0x10
#define _MEMCON_WAIT1_POSN                                  0x5
#define _MEMCON_WAIT1_POSITION                              0x5
#define _MEMCON_WAIT1_SIZE                                  0x1
#define _MEMCON_WAIT1_LENGTH                                0x1
#define _MEMCON_WAIT1_MASK                                  0x20

// Register: ODCON2
#define ODCON2 ODCON2
extern volatile unsigned char           ODCON2              __at(0xEEA);
#ifndef _LIB_BUILD
asm("ODCON2 equ 0EEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ECCP3OD                :1;
        unsigned CCP4OD                 :1;
        unsigned CCP5OD                 :1;
        unsigned CCP6OD                 :1;
        unsigned CCP7OD                 :1;
        unsigned CCP8OD                 :1;
        unsigned CCP9OD                 :1;
        unsigned CCP10OD                :1;
    };
} ODCON2bits_t;
extern volatile ODCON2bits_t ODCON2bits __at(0xEEA);
// bitfield macros
#define _ODCON2_ECCP3OD_POSN                                0x0
#define _ODCON2_ECCP3OD_POSITION                            0x0
#define _ODCON2_ECCP3OD_SIZE                                0x1
#define _ODCON2_ECCP3OD_LENGTH                              0x1
#define _ODCON2_ECCP3OD_MASK                                0x1
#define _ODCON2_CCP4OD_POSN                                 0x1
#define _ODCON2_CCP4OD_POSITION                             0x1
#define _ODCON2_CCP4OD_SIZE                                 0x1
#define _ODCON2_CCP4OD_LENGTH                               0x1
#define _ODCON2_CCP4OD_MASK                                 0x2
#define _ODCON2_CCP5OD_POSN                                 0x2
#define _ODCON2_CCP5OD_POSITION                             0x2
#define _ODCON2_CCP5OD_SIZE                                 0x1
#define _ODCON2_CCP5OD_LENGTH                               0x1
#define _ODCON2_CCP5OD_MASK                                 0x4
#define _ODCON2_CCP6OD_POSN                                 0x3
#define _ODCON2_CCP6OD_POSITION                             0x3
#define _ODCON2_CCP6OD_SIZE                                 0x1
#define _ODCON2_CCP6OD_LENGTH                               0x1
#define _ODCON2_CCP6OD_MASK                                 0x8
#define _ODCON2_CCP7OD_POSN                                 0x4
#define _ODCON2_CCP7OD_POSITION                             0x4
#define _ODCON2_CCP7OD_SIZE                                 0x1
#define _ODCON2_CCP7OD_LENGTH                               0x1
#define _ODCON2_CCP7OD_MASK                                 0x10
#define _ODCON2_CCP8OD_POSN                                 0x5
#define _ODCON2_CCP8OD_POSITION                             0x5
#define _ODCON2_CCP8OD_SIZE                                 0x1
#define _ODCON2_CCP8OD_LENGTH                               0x1
#define _ODCON2_CCP8OD_MASK                                 0x20
#define _ODCON2_CCP9OD_POSN                                 0x6
#define _ODCON2_CCP9OD_POSITION                             0x6
#define _ODCON2_CCP9OD_SIZE                                 0x1
#define _ODCON2_CCP9OD_LENGTH                               0x1
#define _ODCON2_CCP9OD_MASK                                 0x40
#define _ODCON2_CCP10OD_POSN                                0x7
#define _ODCON2_CCP10OD_POSITION                            0x7
#define _ODCON2_CCP10OD_SIZE                                0x1
#define _ODCON2_CCP10OD_LENGTH                              0x1
#define _ODCON2_CCP10OD_MASK                                0x80

// Register: ODCON1
#define ODCON1 ODCON1
extern volatile unsigned char           ODCON1              __at(0xEEB);
#ifndef _LIB_BUILD
asm("ODCON1 equ 0EEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1OD                 :1;
        unsigned SSP2OD                 :1;
        unsigned USART1OD               :1;
        unsigned USART2OD               :1;
        unsigned USART3OD               :1;
        unsigned USART4OD               :1;
        unsigned ECCP1OD                :1;
        unsigned ECCP2OD                :1;
    };
} ODCON1bits_t;
extern volatile ODCON1bits_t ODCON1bits __at(0xEEB);
// bitfield macros
#define _ODCON1_SSP1OD_POSN                                 0x0
#define _ODCON1_SSP1OD_POSITION                             0x0
#define _ODCON1_SSP1OD_SIZE                                 0x1
#define _ODCON1_SSP1OD_LENGTH                               0x1
#define _ODCON1_SSP1OD_MASK                                 0x1
#define _ODCON1_SSP2OD_POSN                                 0x1
#define _ODCON1_SSP2OD_POSITION                             0x1
#define _ODCON1_SSP2OD_SIZE                                 0x1
#define _ODCON1_SSP2OD_LENGTH                               0x1
#define _ODCON1_SSP2OD_MASK                                 0x2
#define _ODCON1_USART1OD_POSN                               0x2
#define _ODCON1_USART1OD_POSITION                           0x2
#define _ODCON1_USART1OD_SIZE                               0x1
#define _ODCON1_USART1OD_LENGTH                             0x1
#define _ODCON1_USART1OD_MASK                               0x4
#define _ODCON1_USART2OD_POSN                               0x3
#define _ODCON1_USART2OD_POSITION                           0x3
#define _ODCON1_USART2OD_SIZE                               0x1
#define _ODCON1_USART2OD_LENGTH                             0x1
#define _ODCON1_USART2OD_MASK                               0x8
#define _ODCON1_USART3OD_POSN                               0x4
#define _ODCON1_USART3OD_POSITION                           0x4
#define _ODCON1_USART3OD_SIZE                               0x1
#define _ODCON1_USART3OD_LENGTH                             0x1
#define _ODCON1_USART3OD_MASK                               0x10
#define _ODCON1_USART4OD_POSN                               0x5
#define _ODCON1_USART4OD_POSITION                           0x5
#define _ODCON1_USART4OD_SIZE                               0x1
#define _ODCON1_USART4OD_LENGTH                             0x1
#define _ODCON1_USART4OD_MASK                               0x20
#define _ODCON1_ECCP1OD_POSN                                0x6
#define _ODCON1_ECCP1OD_POSITION                            0x6
#define _ODCON1_ECCP1OD_SIZE                                0x1
#define _ODCON1_ECCP1OD_LENGTH                              0x1
#define _ODCON1_ECCP1OD_MASK                                0x40
#define _ODCON1_ECCP2OD_POSN                                0x7
#define _ODCON1_ECCP2OD_POSITION                            0x7
#define _ODCON1_ECCP2OD_SIZE                                0x1
#define _ODCON1_ECCP2OD_LENGTH                              0x1
#define _ODCON1_ECCP2OD_MASK                                0x80

// Register: MDCARL
#define MDCARL MDCARL
extern volatile unsigned char           MDCARL              __at(0xEEC);
#ifndef _LIB_BUILD
asm("MDCARL equ 0EECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCL                   :4;
        unsigned                        :1;
        unsigned MDCLSYNC               :1;
        unsigned MDCLPOL                :1;
        unsigned MDCLODIS               :1;
    };
    struct {
        unsigned MDCL0                  :1;
        unsigned MDCL1                  :1;
        unsigned MDCL2                  :1;
        unsigned MDCL3                  :1;
    };
} MDCARLbits_t;
extern volatile MDCARLbits_t MDCARLbits __at(0xEEC);
// bitfield macros
#define _MDCARL_MDCL_POSN                                   0x0
#define _MDCARL_MDCL_POSITION                               0x0
#define _MDCARL_MDCL_SIZE                                   0x4
#define _MDCARL_MDCL_LENGTH                                 0x4
#define _MDCARL_MDCL_MASK                                   0xF
#define _MDCARL_MDCLSYNC_POSN                               0x5
#define _MDCARL_MDCLSYNC_POSITION                           0x5
#define _MDCARL_MDCLSYNC_SIZE                               0x1
#define _MDCARL_MDCLSYNC_LENGTH                             0x1
#define _MDCARL_MDCLSYNC_MASK                               0x20
#define _MDCARL_MDCLPOL_POSN                                0x6
#define _MDCARL_MDCLPOL_POSITION                            0x6
#define _MDCARL_MDCLPOL_SIZE                                0x1
#define _MDCARL_MDCLPOL_LENGTH                              0x1
#define _MDCARL_MDCLPOL_MASK                                0x40
#define _MDCARL_MDCLODIS_POSN                               0x7
#define _MDCARL_MDCLODIS_POSITION                           0x7
#define _MDCARL_MDCLODIS_SIZE                               0x1
#define _MDCARL_MDCLODIS_LENGTH                             0x1
#define _MDCARL_MDCLODIS_MASK                               0x80
#define _MDCARL_MDCL0_POSN                                  0x0
#define _MDCARL_MDCL0_POSITION                              0x0
#define _MDCARL_MDCL0_SIZE                                  0x1
#define _MDCARL_MDCL0_LENGTH                                0x1
#define _MDCARL_MDCL0_MASK                                  0x1
#define _MDCARL_MDCL1_POSN                                  0x1
#define _MDCARL_MDCL1_POSITION                              0x1
#define _MDCARL_MDCL1_SIZE                                  0x1
#define _MDCARL_MDCL1_LENGTH                                0x1
#define _MDCARL_MDCL1_MASK                                  0x2
#define _MDCARL_MDCL2_POSN                                  0x2
#define _MDCARL_MDCL2_POSITION                              0x2
#define _MDCARL_MDCL2_SIZE                                  0x1
#define _MDCARL_MDCL2_LENGTH                                0x1
#define _MDCARL_MDCL2_MASK                                  0x4
#define _MDCARL_MDCL3_POSN                                  0x3
#define _MDCARL_MDCL3_POSITION                              0x3
#define _MDCARL_MDCL3_SIZE                                  0x1
#define _MDCARL_MDCL3_LENGTH                                0x1
#define _MDCARL_MDCL3_MASK                                  0x8

// Register: MDCARH
#define MDCARH MDCARH
extern volatile unsigned char           MDCARH              __at(0xEED);
#ifndef _LIB_BUILD
asm("MDCARH equ 0EEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCH                   :4;
        unsigned                        :1;
        unsigned MDCHSYNC               :1;
        unsigned MDCHPOL                :1;
        unsigned MDCHODIS               :1;
    };
    struct {
        unsigned MDCH0                  :1;
        unsigned MDCH1                  :1;
        unsigned MDCH2                  :1;
        unsigned MDCH3                  :1;
    };
} MDCARHbits_t;
extern volatile MDCARHbits_t MDCARHbits __at(0xEED);
// bitfield macros
#define _MDCARH_MDCH_POSN                                   0x0
#define _MDCARH_MDCH_POSITION                               0x0
#define _MDCARH_MDCH_SIZE                                   0x4
#define _MDCARH_MDCH_LENGTH                                 0x4
#define _MDCARH_MDCH_MASK                                   0xF
#define _MDCARH_MDCHSYNC_POSN                               0x5
#define _MDCARH_MDCHSYNC_POSITION                           0x5
#define _MDCARH_MDCHSYNC_SIZE                               0x1
#define _MDCARH_MDCHSYNC_LENGTH                             0x1
#define _MDCARH_MDCHSYNC_MASK                               0x20
#define _MDCARH_MDCHPOL_POSN                                0x6
#define _MDCARH_MDCHPOL_POSITION                            0x6
#define _MDCARH_MDCHPOL_SIZE                                0x1
#define _MDCARH_MDCHPOL_LENGTH                              0x1
#define _MDCARH_MDCHPOL_MASK                                0x40
#define _MDCARH_MDCHODIS_POSN                               0x7
#define _MDCARH_MDCHODIS_POSITION                           0x7
#define _MDCARH_MDCHODIS_SIZE                               0x1
#define _MDCARH_MDCHODIS_LENGTH                             0x1
#define _MDCARH_MDCHODIS_MASK                               0x80
#define _MDCARH_MDCH0_POSN                                  0x0
#define _MDCARH_MDCH0_POSITION                              0x0
#define _MDCARH_MDCH0_SIZE                                  0x1
#define _MDCARH_MDCH0_LENGTH                                0x1
#define _MDCARH_MDCH0_MASK                                  0x1
#define _MDCARH_MDCH1_POSN                                  0x1
#define _MDCARH_MDCH1_POSITION                              0x1
#define _MDCARH_MDCH1_SIZE                                  0x1
#define _MDCARH_MDCH1_LENGTH                                0x1
#define _MDCARH_MDCH1_MASK                                  0x2
#define _MDCARH_MDCH2_POSN                                  0x2
#define _MDCARH_MDCH2_POSITION                              0x2
#define _MDCARH_MDCH2_SIZE                                  0x1
#define _MDCARH_MDCH2_LENGTH                                0x1
#define _MDCARH_MDCH2_MASK                                  0x4
#define _MDCARH_MDCH3_POSN                                  0x3
#define _MDCARH_MDCH3_POSITION                              0x3
#define _MDCARH_MDCH3_SIZE                                  0x1
#define _MDCARH_MDCH3_LENGTH                                0x1
#define _MDCARH_MDCH3_MASK                                  0x8

// Register: MDSRC
#define MDSRC MDSRC
extern volatile unsigned char           MDSRC               __at(0xEEE);
#ifndef _LIB_BUILD
asm("MDSRC equ 0EEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDSRC                  :4;
        unsigned                        :3;
        unsigned MDSODIS                :1;
    };
    struct {
        unsigned MDSRC0                 :1;
        unsigned MDSRC1                 :1;
        unsigned MDSRC2                 :1;
        unsigned MDSRC3                 :1;
    };
} MDSRCbits_t;
extern volatile MDSRCbits_t MDSRCbits __at(0xEEE);
// bitfield macros
#define _MDSRC_MDSRC_POSN                                   0x0
#define _MDSRC_MDSRC_POSITION                               0x0
#define _MDSRC_MDSRC_SIZE                                   0x4
#define _MDSRC_MDSRC_LENGTH                                 0x4
#define _MDSRC_MDSRC_MASK                                   0xF
#define _MDSRC_MDSODIS_POSN                                 0x7
#define _MDSRC_MDSODIS_POSITION                             0x7
#define _MDSRC_MDSODIS_SIZE                                 0x1
#define _MDSRC_MDSODIS_LENGTH                               0x1
#define _MDSRC_MDSODIS_MASK                                 0x80
#define _MDSRC_MDSRC0_POSN                                  0x0
#define _MDSRC_MDSRC0_POSITION                              0x0
#define _MDSRC_MDSRC0_SIZE                                  0x1
#define _MDSRC_MDSRC0_LENGTH                                0x1
#define _MDSRC_MDSRC0_MASK                                  0x1
#define _MDSRC_MDSRC1_POSN                                  0x1
#define _MDSRC_MDSRC1_POSITION                              0x1
#define _MDSRC_MDSRC1_SIZE                                  0x1
#define _MDSRC_MDSRC1_LENGTH                                0x1
#define _MDSRC_MDSRC1_MASK                                  0x2
#define _MDSRC_MDSRC2_POSN                                  0x2
#define _MDSRC_MDSRC2_POSITION                              0x2
#define _MDSRC_MDSRC2_SIZE                                  0x1
#define _MDSRC_MDSRC2_LENGTH                                0x1
#define _MDSRC_MDSRC2_MASK                                  0x4
#define _MDSRC_MDSRC3_POSN                                  0x3
#define _MDSRC_MDSRC3_POSITION                              0x3
#define _MDSRC_MDSRC3_SIZE                                  0x1
#define _MDSRC_MDSRC3_LENGTH                                0x1
#define _MDSRC_MDSRC3_MASK                                  0x8

// Register: MDCON
#define MDCON MDCON
extern volatile unsigned char           MDCON               __at(0xEEF);
#ifndef _LIB_BUILD
asm("MDCON equ 0EEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDBIT                  :1;
        unsigned                        :2;
        unsigned MDO                    :1;
        unsigned MDOPOL                 :1;
        unsigned MDSLR                  :1;
        unsigned MDOE                   :1;
        unsigned MDEN                   :1;
    };
} MDCONbits_t;
extern volatile MDCONbits_t MDCONbits __at(0xEEF);
// bitfield macros
#define _MDCON_MDBIT_POSN                                   0x0
#define _MDCON_MDBIT_POSITION                               0x0
#define _MDCON_MDBIT_SIZE                                   0x1
#define _MDCON_MDBIT_LENGTH                                 0x1
#define _MDCON_MDBIT_MASK                                   0x1
#define _MDCON_MDO_POSN                                     0x3
#define _MDCON_MDO_POSITION                                 0x3
#define _MDCON_MDO_SIZE                                     0x1
#define _MDCON_MDO_LENGTH                                   0x1
#define _MDCON_MDO_MASK                                     0x8
#define _MDCON_MDOPOL_POSN                                  0x4
#define _MDCON_MDOPOL_POSITION                              0x4
#define _MDCON_MDOPOL_SIZE                                  0x1
#define _MDCON_MDOPOL_LENGTH                                0x1
#define _MDCON_MDOPOL_MASK                                  0x10
#define _MDCON_MDSLR_POSN                                   0x5
#define _MDCON_MDSLR_POSITION                               0x5
#define _MDCON_MDSLR_SIZE                                   0x1
#define _MDCON_MDSLR_LENGTH                                 0x1
#define _MDCON_MDSLR_MASK                                   0x20
#define _MDCON_MDOE_POSN                                    0x6
#define _MDCON_MDOE_POSITION                                0x6
#define _MDCON_MDOE_SIZE                                    0x1
#define _MDCON_MDOE_LENGTH                                  0x1
#define _MDCON_MDOE_MASK                                    0x40
#define _MDCON_MDEN_POSN                                    0x7
#define _MDCON_MDEN_POSITION                                0x7
#define _MDCON_MDEN_SIZE                                    0x1
#define _MDCON_MDEN_LENGTH                                  0x1
#define _MDCON_MDEN_MASK                                    0x80

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0xEF0);
#ifndef _LIB_BUILD
asm("PMD4 equ 0EF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EMBMD                  :1;
        unsigned                        :1;
        unsigned LVDMD                  :1;
        unsigned IOCMD                  :1;
        unsigned USBMD                  :1;
        unsigned CMP3MD                 :1;
        unsigned CMP2MD                 :1;
        unsigned CMP1MD                 :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0xEF0);
// bitfield macros
#define _PMD4_EMBMD_POSN                                    0x0
#define _PMD4_EMBMD_POSITION                                0x0
#define _PMD4_EMBMD_SIZE                                    0x1
#define _PMD4_EMBMD_LENGTH                                  0x1
#define _PMD4_EMBMD_MASK                                    0x1
#define _PMD4_LVDMD_POSN                                    0x2
#define _PMD4_LVDMD_POSITION                                0x2
#define _PMD4_LVDMD_SIZE                                    0x1
#define _PMD4_LVDMD_LENGTH                                  0x1
#define _PMD4_LVDMD_MASK                                    0x4
#define _PMD4_IOCMD_POSN                                    0x3
#define _PMD4_IOCMD_POSITION                                0x3
#define _PMD4_IOCMD_SIZE                                    0x1
#define _PMD4_IOCMD_LENGTH                                  0x1
#define _PMD4_IOCMD_MASK                                    0x8
#define _PMD4_USBMD_POSN                                    0x4
#define _PMD4_USBMD_POSITION                                0x4
#define _PMD4_USBMD_SIZE                                    0x1
#define _PMD4_USBMD_LENGTH                                  0x1
#define _PMD4_USBMD_MASK                                    0x10
#define _PMD4_CMP3MD_POSN                                   0x5
#define _PMD4_CMP3MD_POSITION                               0x5
#define _PMD4_CMP3MD_SIZE                                   0x1
#define _PMD4_CMP3MD_LENGTH                                 0x1
#define _PMD4_CMP3MD_MASK                                   0x20
#define _PMD4_CMP2MD_POSN                                   0x6
#define _PMD4_CMP2MD_POSITION                               0x6
#define _PMD4_CMP2MD_SIZE                                   0x1
#define _PMD4_CMP2MD_LENGTH                                 0x1
#define _PMD4_CMP2MD_MASK                                   0x40
#define _PMD4_CMP1MD_POSN                                   0x7
#define _PMD4_CMP1MD_POSITION                               0x7
#define _PMD4_CMP1MD_SIZE                                   0x1
#define _PMD4_CMP1MD_LENGTH                                 0x1
#define _PMD4_CMP1MD_MASK                                   0x80

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0xEF1);
#ifndef _LIB_BUILD
asm("PMD3 equ 0EF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned REFO2MD                :1;
        unsigned REFO1MD                :1;
        unsigned PSPMD                  :1;
        unsigned LCDMD                  :1;
        unsigned RTCCMD                 :1;
        unsigned ADCMD                  :1;
        unsigned CTMUMD                 :1;
        unsigned MODMD                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned TXMMD                  :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0xEF1);
// bitfield macros
#define _PMD3_REFO2MD_POSN                                  0x0
#define _PMD3_REFO2MD_POSITION                              0x0
#define _PMD3_REFO2MD_SIZE                                  0x1
#define _PMD3_REFO2MD_LENGTH                                0x1
#define _PMD3_REFO2MD_MASK                                  0x1
#define _PMD3_REFO1MD_POSN                                  0x1
#define _PMD3_REFO1MD_POSITION                              0x1
#define _PMD3_REFO1MD_SIZE                                  0x1
#define _PMD3_REFO1MD_LENGTH                                0x1
#define _PMD3_REFO1MD_MASK                                  0x2
#define _PMD3_PSPMD_POSN                                    0x2
#define _PMD3_PSPMD_POSITION                                0x2
#define _PMD3_PSPMD_SIZE                                    0x1
#define _PMD3_PSPMD_LENGTH                                  0x1
#define _PMD3_PSPMD_MASK                                    0x4
#define _PMD3_LCDMD_POSN                                    0x3
#define _PMD3_LCDMD_POSITION                                0x3
#define _PMD3_LCDMD_SIZE                                    0x1
#define _PMD3_LCDMD_LENGTH                                  0x1
#define _PMD3_LCDMD_MASK                                    0x8
#define _PMD3_RTCCMD_POSN                                   0x4
#define _PMD3_RTCCMD_POSITION                               0x4
#define _PMD3_RTCCMD_SIZE                                   0x1
#define _PMD3_RTCCMD_LENGTH                                 0x1
#define _PMD3_RTCCMD_MASK                                   0x10
#define _PMD3_ADCMD_POSN                                    0x5
#define _PMD3_ADCMD_POSITION                                0x5
#define _PMD3_ADCMD_SIZE                                    0x1
#define _PMD3_ADCMD_LENGTH                                  0x1
#define _PMD3_ADCMD_MASK                                    0x20
#define _PMD3_CTMUMD_POSN                                   0x6
#define _PMD3_CTMUMD_POSITION                               0x6
#define _PMD3_CTMUMD_SIZE                                   0x1
#define _PMD3_CTMUMD_LENGTH                                 0x1
#define _PMD3_CTMUMD_MASK                                   0x40
#define _PMD3_MODMD_POSN                                    0x7
#define _PMD3_MODMD_POSITION                                0x7
#define _PMD3_MODMD_SIZE                                    0x1
#define _PMD3_MODMD_LENGTH                                  0x1
#define _PMD3_MODMD_MASK                                    0x80
#define _PMD3_TXMMD_POSN                                    0x7
#define _PMD3_TXMMD_POSITION                                0x7
#define _PMD3_TXMMD_SIZE                                    0x1
#define _PMD3_TXMMD_LENGTH                                  0x1
#define _PMD3_TXMMD_MASK                                    0x80

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0xEF2);
#ifndef _LIB_BUILD
asm("PMD2 equ 0EF2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR3MD                 :1;
        unsigned TMR4MD                 :1;
        unsigned TMR5MD                 :1;
        unsigned TMR6MD                 :1;
        unsigned TMR8MD                 :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0xEF2);
// bitfield macros
#define _PMD2_TMR0MD_POSN                                   0x0
#define _PMD2_TMR0MD_POSITION                               0x0
#define _PMD2_TMR0MD_SIZE                                   0x1
#define _PMD2_TMR0MD_LENGTH                                 0x1
#define _PMD2_TMR0MD_MASK                                   0x1
#define _PMD2_TMR1MD_POSN                                   0x1
#define _PMD2_TMR1MD_POSITION                               0x1
#define _PMD2_TMR1MD_SIZE                                   0x1
#define _PMD2_TMR1MD_LENGTH                                 0x1
#define _PMD2_TMR1MD_MASK                                   0x2
#define _PMD2_TMR2MD_POSN                                   0x2
#define _PMD2_TMR2MD_POSITION                               0x2
#define _PMD2_TMR2MD_SIZE                                   0x1
#define _PMD2_TMR2MD_LENGTH                                 0x1
#define _PMD2_TMR2MD_MASK                                   0x4
#define _PMD2_TMR3MD_POSN                                   0x3
#define _PMD2_TMR3MD_POSITION                               0x3
#define _PMD2_TMR3MD_SIZE                                   0x1
#define _PMD2_TMR3MD_LENGTH                                 0x1
#define _PMD2_TMR3MD_MASK                                   0x8
#define _PMD2_TMR4MD_POSN                                   0x4
#define _PMD2_TMR4MD_POSITION                               0x4
#define _PMD2_TMR4MD_SIZE                                   0x1
#define _PMD2_TMR4MD_LENGTH                                 0x1
#define _PMD2_TMR4MD_MASK                                   0x10
#define _PMD2_TMR5MD_POSN                                   0x5
#define _PMD2_TMR5MD_POSITION                               0x5
#define _PMD2_TMR5MD_SIZE                                   0x1
#define _PMD2_TMR5MD_LENGTH                                 0x1
#define _PMD2_TMR5MD_MASK                                   0x20
#define _PMD2_TMR6MD_POSN                                   0x6
#define _PMD2_TMR6MD_POSITION                               0x6
#define _PMD2_TMR6MD_SIZE                                   0x1
#define _PMD2_TMR6MD_LENGTH                                 0x1
#define _PMD2_TMR6MD_MASK                                   0x40
#define _PMD2_TMR8MD_POSN                                   0x7
#define _PMD2_TMR8MD_POSITION                               0x7
#define _PMD2_TMR8MD_SIZE                                   0x1
#define _PMD2_TMR8MD_LENGTH                                 0x1
#define _PMD2_TMR8MD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0xEF3);
#ifndef _LIB_BUILD
asm("PMD1 equ 0EF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1MD                 :1;
        unsigned SSP2MD                 :1;
        unsigned UART1MD                :1;
        unsigned UART2MD                :1;
        unsigned UART3MD                :1;
        unsigned UART4MD                :1;
        unsigned ECCP1MD                :1;
        unsigned ECCP2MD                :1;
    };
    struct {
        unsigned EMBMD                  :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0xEF3);
// bitfield macros
#define _PMD1_SSP1MD_POSN                                   0x0
#define _PMD1_SSP1MD_POSITION                               0x0
#define _PMD1_SSP1MD_SIZE                                   0x1
#define _PMD1_SSP1MD_LENGTH                                 0x1
#define _PMD1_SSP1MD_MASK                                   0x1
#define _PMD1_SSP2MD_POSN                                   0x1
#define _PMD1_SSP2MD_POSITION                               0x1
#define _PMD1_SSP2MD_SIZE                                   0x1
#define _PMD1_SSP2MD_LENGTH                                 0x1
#define _PMD1_SSP2MD_MASK                                   0x2
#define _PMD1_UART1MD_POSN                                  0x2
#define _PMD1_UART1MD_POSITION                              0x2
#define _PMD1_UART1MD_SIZE                                  0x1
#define _PMD1_UART1MD_LENGTH                                0x1
#define _PMD1_UART1MD_MASK                                  0x4
#define _PMD1_UART2MD_POSN                                  0x3
#define _PMD1_UART2MD_POSITION                              0x3
#define _PMD1_UART2MD_SIZE                                  0x1
#define _PMD1_UART2MD_LENGTH                                0x1
#define _PMD1_UART2MD_MASK                                  0x8
#define _PMD1_UART3MD_POSN                                  0x4
#define _PMD1_UART3MD_POSITION                              0x4
#define _PMD1_UART3MD_SIZE                                  0x1
#define _PMD1_UART3MD_LENGTH                                0x1
#define _PMD1_UART3MD_MASK                                  0x10
#define _PMD1_UART4MD_POSN                                  0x5
#define _PMD1_UART4MD_POSITION                              0x5
#define _PMD1_UART4MD_SIZE                                  0x1
#define _PMD1_UART4MD_LENGTH                                0x1
#define _PMD1_UART4MD_MASK                                  0x20
#define _PMD1_ECCP1MD_POSN                                  0x6
#define _PMD1_ECCP1MD_POSITION                              0x6
#define _PMD1_ECCP1MD_SIZE                                  0x1
#define _PMD1_ECCP1MD_LENGTH                                0x1
#define _PMD1_ECCP1MD_MASK                                  0x40
#define _PMD1_ECCP2MD_POSN                                  0x7
#define _PMD1_ECCP2MD_POSITION                              0x7
#define _PMD1_ECCP2MD_SIZE                                  0x1
#define _PMD1_ECCP2MD_LENGTH                                0x1
#define _PMD1_ECCP2MD_MASK                                  0x80
#define _PMD1_EMBMD_POSN                                    0x0
#define _PMD1_EMBMD_POSITION                                0x0
#define _PMD1_EMBMD_SIZE                                    0x1
#define _PMD1_EMBMD_LENGTH                                  0x1
#define _PMD1_EMBMD_MASK                                    0x1

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0xEF4);
#ifndef _LIB_BUILD
asm("PMD0 equ 0EF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ECCP3MD                :1;
        unsigned CCP4MD                 :1;
        unsigned CCP5MD                 :1;
        unsigned CCP6MD                 :1;
        unsigned CCP7MD                 :1;
        unsigned CCP8MD                 :1;
        unsigned CCP9MD                 :1;
        unsigned CCP10MD                :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1MD                 :1;
        unsigned SPI2MD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0xEF4);
// bitfield macros
#define _PMD0_ECCP3MD_POSN                                  0x0
#define _PMD0_ECCP3MD_POSITION                              0x0
#define _PMD0_ECCP3MD_SIZE                                  0x1
#define _PMD0_ECCP3MD_LENGTH                                0x1
#define _PMD0_ECCP3MD_MASK                                  0x1
#define _PMD0_CCP4MD_POSN                                   0x1
#define _PMD0_CCP4MD_POSITION                               0x1
#define _PMD0_CCP4MD_SIZE                                   0x1
#define _PMD0_CCP4MD_LENGTH                                 0x1
#define _PMD0_CCP4MD_MASK                                   0x2
#define _PMD0_CCP5MD_POSN                                   0x2
#define _PMD0_CCP5MD_POSITION                               0x2
#define _PMD0_CCP5MD_SIZE                                   0x1
#define _PMD0_CCP5MD_LENGTH                                 0x1
#define _PMD0_CCP5MD_MASK                                   0x4
#define _PMD0_CCP6MD_POSN                                   0x3
#define _PMD0_CCP6MD_POSITION                               0x3
#define _PMD0_CCP6MD_SIZE                                   0x1
#define _PMD0_CCP6MD_LENGTH                                 0x1
#define _PMD0_CCP6MD_MASK                                   0x8
#define _PMD0_CCP7MD_POSN                                   0x4
#define _PMD0_CCP7MD_POSITION                               0x4
#define _PMD0_CCP7MD_SIZE                                   0x1
#define _PMD0_CCP7MD_LENGTH                                 0x1
#define _PMD0_CCP7MD_MASK                                   0x10
#define _PMD0_CCP8MD_POSN                                   0x5
#define _PMD0_CCP8MD_POSITION                               0x5
#define _PMD0_CCP8MD_SIZE                                   0x1
#define _PMD0_CCP8MD_LENGTH                                 0x1
#define _PMD0_CCP8MD_MASK                                   0x20
#define _PMD0_CCP9MD_POSN                                   0x6
#define _PMD0_CCP9MD_POSITION                               0x6
#define _PMD0_CCP9MD_SIZE                                   0x1
#define _PMD0_CCP9MD_LENGTH                                 0x1
#define _PMD0_CCP9MD_MASK                                   0x40
#define _PMD0_CCP10MD_POSN                                  0x7
#define _PMD0_CCP10MD_POSITION                              0x7
#define _PMD0_CCP10MD_SIZE                                  0x1
#define _PMD0_CCP10MD_LENGTH                                0x1
#define _PMD0_CCP10MD_MASK                                  0x80
#define _PMD0_SPI1MD_POSN                                   0x1
#define _PMD0_SPI1MD_POSITION                               0x1
#define _PMD0_SPI1MD_SIZE                                   0x1
#define _PMD0_SPI1MD_LENGTH                                 0x1
#define _PMD0_SPI1MD_MASK                                   0x2
#define _PMD0_SPI2MD_POSN                                   0x2
#define _PMD0_SPI2MD_POSITION                               0x2
#define _PMD0_SPI2MD_SIZE                                   0x1
#define _PMD0_SPI2MD_LENGTH                                 0x1
#define _PMD0_SPI2MD_MASK                                   0x4

// Register: CTMUCON4
#define CTMUCON4 CTMUCON4
extern volatile unsigned char           CTMUCON4            __at(0xEF5);
#ifndef _LIB_BUILD
asm("CTMUCON4 equ 0EF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EDG1STAT               :1;
        unsigned EDG2STAT               :1;
        unsigned EDG1SEL                :4;
        unsigned EDG1POL                :1;
        unsigned EDG1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned EDG1SEL0               :1;
        unsigned EDG1SEL1               :1;
        unsigned EDG1SEL2               :1;
        unsigned EDG1SEL3               :1;
    };
} CTMUCON4bits_t;
extern volatile CTMUCON4bits_t CTMUCON4bits __at(0xEF5);
// bitfield macros
#define _CTMUCON4_EDG1STAT_POSN                             0x0
#define _CTMUCON4_EDG1STAT_POSITION                         0x0
#define _CTMUCON4_EDG1STAT_SIZE                             0x1
#define _CTMUCON4_EDG1STAT_LENGTH                           0x1
#define _CTMUCON4_EDG1STAT_MASK                             0x1
#define _CTMUCON4_EDG2STAT_POSN                             0x1
#define _CTMUCON4_EDG2STAT_POSITION                         0x1
#define _CTMUCON4_EDG2STAT_SIZE                             0x1
#define _CTMUCON4_EDG2STAT_LENGTH                           0x1
#define _CTMUCON4_EDG2STAT_MASK                             0x2
#define _CTMUCON4_EDG1SEL_POSN                              0x2
#define _CTMUCON4_EDG1SEL_POSITION                          0x2
#define _CTMUCON4_EDG1SEL_SIZE                              0x4
#define _CTMUCON4_EDG1SEL_LENGTH                            0x4
#define _CTMUCON4_EDG1SEL_MASK                              0x3C
#define _CTMUCON4_EDG1POL_POSN                              0x6
#define _CTMUCON4_EDG1POL_POSITION                          0x6
#define _CTMUCON4_EDG1POL_SIZE                              0x1
#define _CTMUCON4_EDG1POL_LENGTH                            0x1
#define _CTMUCON4_EDG1POL_MASK                              0x40
#define _CTMUCON4_EDG1EN_POSN                               0x7
#define _CTMUCON4_EDG1EN_POSITION                           0x7
#define _CTMUCON4_EDG1EN_SIZE                               0x1
#define _CTMUCON4_EDG1EN_LENGTH                             0x1
#define _CTMUCON4_EDG1EN_MASK                               0x80
#define _CTMUCON4_EDG1SEL0_POSN                             0x2
#define _CTMUCON4_EDG1SEL0_POSITION                         0x2
#define _CTMUCON4_EDG1SEL0_SIZE                             0x1
#define _CTMUCON4_EDG1SEL0_LENGTH                           0x1
#define _CTMUCON4_EDG1SEL0_MASK                             0x4
#define _CTMUCON4_EDG1SEL1_POSN                             0x3
#define _CTMUCON4_EDG1SEL1_POSITION                         0x3
#define _CTMUCON4_EDG1SEL1_SIZE                             0x1
#define _CTMUCON4_EDG1SEL1_LENGTH                           0x1
#define _CTMUCON4_EDG1SEL1_MASK                             0x8
#define _CTMUCON4_EDG1SEL2_POSN                             0x4
#define _CTMUCON4_EDG1SEL2_POSITION                         0x4
#define _CTMUCON4_EDG1SEL2_SIZE                             0x1
#define _CTMUCON4_EDG1SEL2_LENGTH                           0x1
#define _CTMUCON4_EDG1SEL2_MASK                             0x10
#define _CTMUCON4_EDG1SEL3_POSN                             0x5
#define _CTMUCON4_EDG1SEL3_POSITION                         0x5
#define _CTMUCON4_EDG1SEL3_SIZE                             0x1
#define _CTMUCON4_EDG1SEL3_LENGTH                           0x1
#define _CTMUCON4_EDG1SEL3_MASK                             0x20

// Register: CTMUCON3
#define CTMUCON3 CTMUCON3
extern volatile unsigned char           CTMUCON3            __at(0xEF6);
#ifndef _LIB_BUILD
asm("CTMUCON3 equ 0EF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned EDG2SEL                :4;
        unsigned EDG2POL                :1;
        unsigned EDG2EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned EDG2SEL0               :1;
        unsigned EDG2SEL1               :1;
        unsigned EDG2SEL2               :1;
        unsigned EDG2SEL3               :1;
    };
} CTMUCON3bits_t;
extern volatile CTMUCON3bits_t CTMUCON3bits __at(0xEF6);
// bitfield macros
#define _CTMUCON3_EDG2SEL_POSN                              0x2
#define _CTMUCON3_EDG2SEL_POSITION                          0x2
#define _CTMUCON3_EDG2SEL_SIZE                              0x4
#define _CTMUCON3_EDG2SEL_LENGTH                            0x4
#define _CTMUCON3_EDG2SEL_MASK                              0x3C
#define _CTMUCON3_EDG2POL_POSN                              0x6
#define _CTMUCON3_EDG2POL_POSITION                          0x6
#define _CTMUCON3_EDG2POL_SIZE                              0x1
#define _CTMUCON3_EDG2POL_LENGTH                            0x1
#define _CTMUCON3_EDG2POL_MASK                              0x40
#define _CTMUCON3_EDG2EN_POSN                               0x7
#define _CTMUCON3_EDG2EN_POSITION                           0x7
#define _CTMUCON3_EDG2EN_SIZE                               0x1
#define _CTMUCON3_EDG2EN_LENGTH                             0x1
#define _CTMUCON3_EDG2EN_MASK                               0x80
#define _CTMUCON3_EDG2SEL0_POSN                             0x2
#define _CTMUCON3_EDG2SEL0_POSITION                         0x2
#define _CTMUCON3_EDG2SEL0_SIZE                             0x1
#define _CTMUCON3_EDG2SEL0_LENGTH                           0x1
#define _CTMUCON3_EDG2SEL0_MASK                             0x4
#define _CTMUCON3_EDG2SEL1_POSN                             0x3
#define _CTMUCON3_EDG2SEL1_POSITION                         0x3
#define _CTMUCON3_EDG2SEL1_SIZE                             0x1
#define _CTMUCON3_EDG2SEL1_LENGTH                           0x1
#define _CTMUCON3_EDG2SEL1_MASK                             0x8
#define _CTMUCON3_EDG2SEL2_POSN                             0x4
#define _CTMUCON3_EDG2SEL2_POSITION                         0x4
#define _CTMUCON3_EDG2SEL2_SIZE                             0x1
#define _CTMUCON3_EDG2SEL2_LENGTH                           0x1
#define _CTMUCON3_EDG2SEL2_MASK                             0x10
#define _CTMUCON3_EDG2SEL3_POSN                             0x5
#define _CTMUCON3_EDG2SEL3_POSITION                         0x5
#define _CTMUCON3_EDG2SEL3_SIZE                             0x1
#define _CTMUCON3_EDG2SEL3_LENGTH                           0x1
#define _CTMUCON3_EDG2SEL3_MASK                             0x20

// Register: CTMUCON2
#define CTMUCON2 CTMUCON2
extern volatile unsigned char           CTMUCON2            __at(0xEF7);
#ifndef _LIB_BUILD
asm("CTMUCON2 equ 0EF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IRNG                   :2;
        unsigned ITRIM                  :6;
    };
    struct {
        unsigned IRNG0                  :1;
        unsigned IRNG1                  :1;
        unsigned ITRIM0                 :1;
        unsigned ITRIM1                 :1;
        unsigned ITRIM2                 :1;
        unsigned ITRIM3                 :1;
        unsigned ITRIM4                 :1;
        unsigned ITRIM5                 :1;
    };
} CTMUCON2bits_t;
extern volatile CTMUCON2bits_t CTMUCON2bits __at(0xEF7);
// bitfield macros
#define _CTMUCON2_IRNG_POSN                                 0x0
#define _CTMUCON2_IRNG_POSITION                             0x0
#define _CTMUCON2_IRNG_SIZE                                 0x2
#define _CTMUCON2_IRNG_LENGTH                               0x2
#define _CTMUCON2_IRNG_MASK                                 0x3
#define _CTMUCON2_ITRIM_POSN                                0x2
#define _CTMUCON2_ITRIM_POSITION                            0x2
#define _CTMUCON2_ITRIM_SIZE                                0x6
#define _CTMUCON2_ITRIM_LENGTH                              0x6
#define _CTMUCON2_ITRIM_MASK                                0xFC
#define _CTMUCON2_IRNG0_POSN                                0x0
#define _CTMUCON2_IRNG0_POSITION                            0x0
#define _CTMUCON2_IRNG0_SIZE                                0x1
#define _CTMUCON2_IRNG0_LENGTH                              0x1
#define _CTMUCON2_IRNG0_MASK                                0x1
#define _CTMUCON2_IRNG1_POSN                                0x1
#define _CTMUCON2_IRNG1_POSITION                            0x1
#define _CTMUCON2_IRNG1_SIZE                                0x1
#define _CTMUCON2_IRNG1_LENGTH                              0x1
#define _CTMUCON2_IRNG1_MASK                                0x2
#define _CTMUCON2_ITRIM0_POSN                               0x2
#define _CTMUCON2_ITRIM0_POSITION                           0x2
#define _CTMUCON2_ITRIM0_SIZE                               0x1
#define _CTMUCON2_ITRIM0_LENGTH                             0x1
#define _CTMUCON2_ITRIM0_MASK                               0x4
#define _CTMUCON2_ITRIM1_POSN                               0x3
#define _CTMUCON2_ITRIM1_POSITION                           0x3
#define _CTMUCON2_ITRIM1_SIZE                               0x1
#define _CTMUCON2_ITRIM1_LENGTH                             0x1
#define _CTMUCON2_ITRIM1_MASK                               0x8
#define _CTMUCON2_ITRIM2_POSN                               0x4
#define _CTMUCON2_ITRIM2_POSITION                           0x4
#define _CTMUCON2_ITRIM2_SIZE                               0x1
#define _CTMUCON2_ITRIM2_LENGTH                             0x1
#define _CTMUCON2_ITRIM2_MASK                               0x10
#define _CTMUCON2_ITRIM3_POSN                               0x5
#define _CTMUCON2_ITRIM3_POSITION                           0x5
#define _CTMUCON2_ITRIM3_SIZE                               0x1
#define _CTMUCON2_ITRIM3_LENGTH                             0x1
#define _CTMUCON2_ITRIM3_MASK                               0x20
#define _CTMUCON2_ITRIM4_POSN                               0x6
#define _CTMUCON2_ITRIM4_POSITION                           0x6
#define _CTMUCON2_ITRIM4_SIZE                               0x1
#define _CTMUCON2_ITRIM4_LENGTH                             0x1
#define _CTMUCON2_ITRIM4_MASK                               0x40
#define _CTMUCON2_ITRIM5_POSN                               0x7
#define _CTMUCON2_ITRIM5_POSITION                           0x7
#define _CTMUCON2_ITRIM5_SIZE                               0x1
#define _CTMUCON2_ITRIM5_LENGTH                             0x1
#define _CTMUCON2_ITRIM5_MASK                               0x80

// Register: CTMUCON1
#define CTMUCON1 CTMUCON1
extern volatile unsigned char           CTMUCON1            __at(0xEF8);
#ifndef _LIB_BUILD
asm("CTMUCON1 equ 0EF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTTRIG                 :1;
        unsigned IDISSEN                :1;
        unsigned EDGSEQEN               :1;
        unsigned EDGEN                  :1;
        unsigned TGEN                   :1;
        unsigned CTMUSIDL               :1;
        unsigned                        :1;
        unsigned CTMUEN                 :1;
    };
} CTMUCON1bits_t;
extern volatile CTMUCON1bits_t CTMUCON1bits __at(0xEF8);
// bitfield macros
#define _CTMUCON1_CTTRIG_POSN                               0x0
#define _CTMUCON1_CTTRIG_POSITION                           0x0
#define _CTMUCON1_CTTRIG_SIZE                               0x1
#define _CTMUCON1_CTTRIG_LENGTH                             0x1
#define _CTMUCON1_CTTRIG_MASK                               0x1
#define _CTMUCON1_IDISSEN_POSN                              0x1
#define _CTMUCON1_IDISSEN_POSITION                          0x1
#define _CTMUCON1_IDISSEN_SIZE                              0x1
#define _CTMUCON1_IDISSEN_LENGTH                            0x1
#define _CTMUCON1_IDISSEN_MASK                              0x2
#define _CTMUCON1_EDGSEQEN_POSN                             0x2
#define _CTMUCON1_EDGSEQEN_POSITION                         0x2
#define _CTMUCON1_EDGSEQEN_SIZE                             0x1
#define _CTMUCON1_EDGSEQEN_LENGTH                           0x1
#define _CTMUCON1_EDGSEQEN_MASK                             0x4
#define _CTMUCON1_EDGEN_POSN                                0x3
#define _CTMUCON1_EDGEN_POSITION                            0x3
#define _CTMUCON1_EDGEN_SIZE                                0x1
#define _CTMUCON1_EDGEN_LENGTH                              0x1
#define _CTMUCON1_EDGEN_MASK                                0x8
#define _CTMUCON1_TGEN_POSN                                 0x4
#define _CTMUCON1_TGEN_POSITION                             0x4
#define _CTMUCON1_TGEN_SIZE                                 0x1
#define _CTMUCON1_TGEN_LENGTH                               0x1
#define _CTMUCON1_TGEN_MASK                                 0x10
#define _CTMUCON1_CTMUSIDL_POSN                             0x5
#define _CTMUCON1_CTMUSIDL_POSITION                         0x5
#define _CTMUCON1_CTMUSIDL_SIZE                             0x1
#define _CTMUCON1_CTMUSIDL_LENGTH                           0x1
#define _CTMUCON1_CTMUSIDL_MASK                             0x20
#define _CTMUCON1_CTMUEN_POSN                               0x7
#define _CTMUCON1_CTMUEN_POSITION                           0x7
#define _CTMUCON1_CTMUEN_SIZE                               0x1
#define _CTMUCON1_CTMUEN_LENGTH                             0x1
#define _CTMUCON1_CTMUEN_MASK                               0x80

// Register: TXREG4
#define TXREG4 TXREG4
extern volatile unsigned char           TXREG4              __at(0xEF9);
#ifndef _LIB_BUILD
asm("TXREG4 equ 0EF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXREG4                 :8;
    };
} TXREG4bits_t;
extern volatile TXREG4bits_t TXREG4bits __at(0xEF9);
// bitfield macros
#define _TXREG4_TXREG4_POSN                                 0x0
#define _TXREG4_TXREG4_POSITION                             0x0
#define _TXREG4_TXREG4_SIZE                                 0x8
#define _TXREG4_TXREG4_LENGTH                               0x8
#define _TXREG4_TXREG4_MASK                                 0xFF

// Register: RCREG4
#define RCREG4 RCREG4
extern volatile unsigned char           RCREG4              __at(0xEFA);
#ifndef _LIB_BUILD
asm("RCREG4 equ 0EFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RCREG4                 :8;
    };
} RCREG4bits_t;
extern volatile RCREG4bits_t RCREG4bits __at(0xEFA);
// bitfield macros
#define _RCREG4_RCREG4_POSN                                 0x0
#define _RCREG4_RCREG4_POSITION                             0x0
#define _RCREG4_RCREG4_SIZE                                 0x8
#define _RCREG4_RCREG4_LENGTH                               0x8
#define _RCREG4_RCREG4_MASK                                 0xFF

// Register: SPBRG4
#define SPBRG4 SPBRG4
extern volatile unsigned char           SPBRG4              __at(0xEFB);
#ifndef _LIB_BUILD
asm("SPBRG4 equ 0EFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRG4                 :8;
    };
    struct {
        unsigned BRG0                   :1;
        unsigned BRG1                   :1;
        unsigned BRG2                   :1;
        unsigned BRG3                   :1;
        unsigned BRG4                   :1;
        unsigned BRG5                   :1;
        unsigned BRG6                   :1;
        unsigned BRG7                   :1;
    };
} SPBRG4bits_t;
extern volatile SPBRG4bits_t SPBRG4bits __at(0xEFB);
// bitfield macros
#define _SPBRG4_SPBRG4_POSN                                 0x0
#define _SPBRG4_SPBRG4_POSITION                             0x0
#define _SPBRG4_SPBRG4_SIZE                                 0x8
#define _SPBRG4_SPBRG4_LENGTH                               0x8
#define _SPBRG4_SPBRG4_MASK                                 0xFF
#define _SPBRG4_BRG0_POSN                                   0x0
#define _SPBRG4_BRG0_POSITION                               0x0
#define _SPBRG4_BRG0_SIZE                                   0x1
#define _SPBRG4_BRG0_LENGTH                                 0x1
#define _SPBRG4_BRG0_MASK                                   0x1
#define _SPBRG4_BRG1_POSN                                   0x1
#define _SPBRG4_BRG1_POSITION                               0x1
#define _SPBRG4_BRG1_SIZE                                   0x1
#define _SPBRG4_BRG1_LENGTH                                 0x1
#define _SPBRG4_BRG1_MASK                                   0x2
#define _SPBRG4_BRG2_POSN                                   0x2
#define _SPBRG4_BRG2_POSITION                               0x2
#define _SPBRG4_BRG2_SIZE                                   0x1
#define _SPBRG4_BRG2_LENGTH                                 0x1
#define _SPBRG4_BRG2_MASK                                   0x4
#define _SPBRG4_BRG3_POSN                                   0x3
#define _SPBRG4_BRG3_POSITION                               0x3
#define _SPBRG4_BRG3_SIZE                                   0x1
#define _SPBRG4_BRG3_LENGTH                                 0x1
#define _SPBRG4_BRG3_MASK                                   0x8
#define _SPBRG4_BRG4_POSN                                   0x4
#define _SPBRG4_BRG4_POSITION                               0x4
#define _SPBRG4_BRG4_SIZE                                   0x1
#define _SPBRG4_BRG4_LENGTH                                 0x1
#define _SPBRG4_BRG4_MASK                                   0x10
#define _SPBRG4_BRG5_POSN                                   0x5
#define _SPBRG4_BRG5_POSITION                               0x5
#define _SPBRG4_BRG5_SIZE                                   0x1
#define _SPBRG4_BRG5_LENGTH                                 0x1
#define _SPBRG4_BRG5_MASK                                   0x20
#define _SPBRG4_BRG6_POSN                                   0x6
#define _SPBRG4_BRG6_POSITION                               0x6
#define _SPBRG4_BRG6_SIZE                                   0x1
#define _SPBRG4_BRG6_LENGTH                                 0x1
#define _SPBRG4_BRG6_MASK                                   0x40
#define _SPBRG4_BRG7_POSN                                   0x7
#define _SPBRG4_BRG7_POSITION                               0x7
#define _SPBRG4_BRG7_SIZE                                   0x1
#define _SPBRG4_BRG7_LENGTH                                 0x1
#define _SPBRG4_BRG7_MASK                                   0x80

// Register: SPBRGH4
#define SPBRGH4 SPBRGH4
extern volatile unsigned char           SPBRGH4             __at(0xEFC);
#ifndef _LIB_BUILD
asm("SPBRGH4 equ 0EFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRGH4                :8;
    };
    struct {
        unsigned BRG8                   :1;
        unsigned BRG9                   :1;
        unsigned BRG10                  :1;
        unsigned BRG11                  :1;
        unsigned BRG12                  :1;
        unsigned BRG13                  :1;
        unsigned BRG14                  :1;
        unsigned BRG15                  :1;
    };
} SPBRGH4bits_t;
extern volatile SPBRGH4bits_t SPBRGH4bits __at(0xEFC);
// bitfield macros
#define _SPBRGH4_SPBRGH4_POSN                               0x0
#define _SPBRGH4_SPBRGH4_POSITION                           0x0
#define _SPBRGH4_SPBRGH4_SIZE                               0x8
#define _SPBRGH4_SPBRGH4_LENGTH                             0x8
#define _SPBRGH4_SPBRGH4_MASK                               0xFF
#define _SPBRGH4_BRG8_POSN                                  0x0
#define _SPBRGH4_BRG8_POSITION                              0x0
#define _SPBRGH4_BRG8_SIZE                                  0x1
#define _SPBRGH4_BRG8_LENGTH                                0x1
#define _SPBRGH4_BRG8_MASK                                  0x1
#define _SPBRGH4_BRG9_POSN                                  0x1
#define _SPBRGH4_BRG9_POSITION                              0x1
#define _SPBRGH4_BRG9_SIZE                                  0x1
#define _SPBRGH4_BRG9_LENGTH                                0x1
#define _SPBRGH4_BRG9_MASK                                  0x2
#define _SPBRGH4_BRG10_POSN                                 0x2
#define _SPBRGH4_BRG10_POSITION                             0x2
#define _SPBRGH4_BRG10_SIZE                                 0x1
#define _SPBRGH4_BRG10_LENGTH                               0x1
#define _SPBRGH4_BRG10_MASK                                 0x4
#define _SPBRGH4_BRG11_POSN                                 0x3
#define _SPBRGH4_BRG11_POSITION                             0x3
#define _SPBRGH4_BRG11_SIZE                                 0x1
#define _SPBRGH4_BRG11_LENGTH                               0x1
#define _SPBRGH4_BRG11_MASK                                 0x8
#define _SPBRGH4_BRG12_POSN                                 0x4
#define _SPBRGH4_BRG12_POSITION                             0x4
#define _SPBRGH4_BRG12_SIZE                                 0x1
#define _SPBRGH4_BRG12_LENGTH                               0x1
#define _SPBRGH4_BRG12_MASK                                 0x10
#define _SPBRGH4_BRG13_POSN                                 0x5
#define _SPBRGH4_BRG13_POSITION                             0x5
#define _SPBRGH4_BRG13_SIZE                                 0x1
#define _SPBRGH4_BRG13_LENGTH                               0x1
#define _SPBRGH4_BRG13_MASK                                 0x20
#define _SPBRGH4_BRG14_POSN                                 0x6
#define _SPBRGH4_BRG14_POSITION                             0x6
#define _SPBRGH4_BRG14_SIZE                                 0x1
#define _SPBRGH4_BRG14_LENGTH                               0x1
#define _SPBRGH4_BRG14_MASK                                 0x40
#define _SPBRGH4_BRG15_POSN                                 0x7
#define _SPBRGH4_BRG15_POSITION                             0x7
#define _SPBRGH4_BRG15_SIZE                                 0x1
#define _SPBRGH4_BRG15_LENGTH                               0x1
#define _SPBRGH4_BRG15_MASK                                 0x80

// Register: BAUDCON4
#define BAUDCON4 BAUDCON4
extern volatile unsigned char           BAUDCON4            __at(0xEFD);
#ifndef _LIB_BUILD
asm("BAUDCON4 equ 0EFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned IREN                   :1;
        unsigned BRG16                  :1;
        unsigned TXCKP                  :1;
        unsigned RXDTP                  :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN4                 :1;
        unsigned WUE4                   :1;
        unsigned                        :1;
        unsigned BRG164                 :1;
        unsigned SCKP4                  :1;
        unsigned DTRXP4                 :1;
        unsigned RCIDL4                 :1;
        unsigned ABDOVF4                :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP4                 :1;
        unsigned RXDTP4                 :1;
        unsigned RCMT4                  :1;
    };
} BAUDCON4bits_t;
extern volatile BAUDCON4bits_t BAUDCON4bits __at(0xEFD);
// bitfield macros
#define _BAUDCON4_ABDEN_POSN                                0x0
#define _BAUDCON4_ABDEN_POSITION                            0x0
#define _BAUDCON4_ABDEN_SIZE                                0x1
#define _BAUDCON4_ABDEN_LENGTH                              0x1
#define _BAUDCON4_ABDEN_MASK                                0x1
#define _BAUDCON4_WUE_POSN                                  0x1
#define _BAUDCON4_WUE_POSITION                              0x1
#define _BAUDCON4_WUE_SIZE                                  0x1
#define _BAUDCON4_WUE_LENGTH                                0x1
#define _BAUDCON4_WUE_MASK                                  0x2
#define _BAUDCON4_IREN_POSN                                 0x2
#define _BAUDCON4_IREN_POSITION                             0x2
#define _BAUDCON4_IREN_SIZE                                 0x1
#define _BAUDCON4_IREN_LENGTH                               0x1
#define _BAUDCON4_IREN_MASK                                 0x4
#define _BAUDCON4_BRG16_POSN                                0x3
#define _BAUDCON4_BRG16_POSITION                            0x3
#define _BAUDCON4_BRG16_SIZE                                0x1
#define _BAUDCON4_BRG16_LENGTH                              0x1
#define _BAUDCON4_BRG16_MASK                                0x8
#define _BAUDCON4_TXCKP_POSN                                0x4
#define _BAUDCON4_TXCKP_POSITION                            0x4
#define _BAUDCON4_TXCKP_SIZE                                0x1
#define _BAUDCON4_TXCKP_LENGTH                              0x1
#define _BAUDCON4_TXCKP_MASK                                0x10
#define _BAUDCON4_RXDTP_POSN                                0x5
#define _BAUDCON4_RXDTP_POSITION                            0x5
#define _BAUDCON4_RXDTP_SIZE                                0x1
#define _BAUDCON4_RXDTP_LENGTH                              0x1
#define _BAUDCON4_RXDTP_MASK                                0x20
#define _BAUDCON4_RCIDL_POSN                                0x6
#define _BAUDCON4_RCIDL_POSITION                            0x6
#define _BAUDCON4_RCIDL_SIZE                                0x1
#define _BAUDCON4_RCIDL_LENGTH                              0x1
#define _BAUDCON4_RCIDL_MASK                                0x40
#define _BAUDCON4_ABDOVF_POSN                               0x7
#define _BAUDCON4_ABDOVF_POSITION                           0x7
#define _BAUDCON4_ABDOVF_SIZE                               0x1
#define _BAUDCON4_ABDOVF_LENGTH                             0x1
#define _BAUDCON4_ABDOVF_MASK                               0x80
#define _BAUDCON4_ABDEN4_POSN                               0x0
#define _BAUDCON4_ABDEN4_POSITION                           0x0
#define _BAUDCON4_ABDEN4_SIZE                               0x1
#define _BAUDCON4_ABDEN4_LENGTH                             0x1
#define _BAUDCON4_ABDEN4_MASK                               0x1
#define _BAUDCON4_WUE4_POSN                                 0x1
#define _BAUDCON4_WUE4_POSITION                             0x1
#define _BAUDCON4_WUE4_SIZE                                 0x1
#define _BAUDCON4_WUE4_LENGTH                               0x1
#define _BAUDCON4_WUE4_MASK                                 0x2
#define _BAUDCON4_BRG164_POSN                               0x3
#define _BAUDCON4_BRG164_POSITION                           0x3
#define _BAUDCON4_BRG164_SIZE                               0x1
#define _BAUDCON4_BRG164_LENGTH                             0x1
#define _BAUDCON4_BRG164_MASK                               0x8
#define _BAUDCON4_SCKP4_POSN                                0x4
#define _BAUDCON4_SCKP4_POSITION                            0x4
#define _BAUDCON4_SCKP4_SIZE                                0x1
#define _BAUDCON4_SCKP4_LENGTH                              0x1
#define _BAUDCON4_SCKP4_MASK                                0x10
#define _BAUDCON4_DTRXP4_POSN                               0x5
#define _BAUDCON4_DTRXP4_POSITION                           0x5
#define _BAUDCON4_DTRXP4_SIZE                               0x1
#define _BAUDCON4_DTRXP4_LENGTH                             0x1
#define _BAUDCON4_DTRXP4_MASK                               0x20
#define _BAUDCON4_RCIDL4_POSN                               0x6
#define _BAUDCON4_RCIDL4_POSITION                           0x6
#define _BAUDCON4_RCIDL4_SIZE                               0x1
#define _BAUDCON4_RCIDL4_LENGTH                             0x1
#define _BAUDCON4_RCIDL4_MASK                               0x40
#define _BAUDCON4_ABDOVF4_POSN                              0x7
#define _BAUDCON4_ABDOVF4_POSITION                          0x7
#define _BAUDCON4_ABDOVF4_SIZE                              0x1
#define _BAUDCON4_ABDOVF4_LENGTH                            0x1
#define _BAUDCON4_ABDOVF4_MASK                              0x80
#define _BAUDCON4_TXCKP4_POSN                               0x4
#define _BAUDCON4_TXCKP4_POSITION                           0x4
#define _BAUDCON4_TXCKP4_SIZE                               0x1
#define _BAUDCON4_TXCKP4_LENGTH                             0x1
#define _BAUDCON4_TXCKP4_MASK                               0x10
#define _BAUDCON4_RXDTP4_POSN                               0x5
#define _BAUDCON4_RXDTP4_POSITION                           0x5
#define _BAUDCON4_RXDTP4_SIZE                               0x1
#define _BAUDCON4_RXDTP4_LENGTH                             0x1
#define _BAUDCON4_RXDTP4_MASK                               0x20
#define _BAUDCON4_RCMT4_POSN                                0x6
#define _BAUDCON4_RCMT4_POSITION                            0x6
#define _BAUDCON4_RCMT4_SIZE                                0x1
#define _BAUDCON4_RCMT4_LENGTH                              0x1
#define _BAUDCON4_RCMT4_MASK                                0x40

// Register: TXSTA4
#define TXSTA4 TXSTA4
extern volatile unsigned char           TXSTA4              __at(0xEFE);
#ifndef _LIB_BUILD
asm("TXSTA4 equ 0EFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned TXD84                  :1;
        unsigned                        :5;
        unsigned TX8_94                 :1;
    };
} TXSTA4bits_t;
extern volatile TXSTA4bits_t TXSTA4bits __at(0xEFE);
// bitfield macros
#define _TXSTA4_TX9D_POSN                                   0x0
#define _TXSTA4_TX9D_POSITION                               0x0
#define _TXSTA4_TX9D_SIZE                                   0x1
#define _TXSTA4_TX9D_LENGTH                                 0x1
#define _TXSTA4_TX9D_MASK                                   0x1
#define _TXSTA4_TRMT_POSN                                   0x1
#define _TXSTA4_TRMT_POSITION                               0x1
#define _TXSTA4_TRMT_SIZE                                   0x1
#define _TXSTA4_TRMT_LENGTH                                 0x1
#define _TXSTA4_TRMT_MASK                                   0x2
#define _TXSTA4_BRGH_POSN                                   0x2
#define _TXSTA4_BRGH_POSITION                               0x2
#define _TXSTA4_BRGH_SIZE                                   0x1
#define _TXSTA4_BRGH_LENGTH                                 0x1
#define _TXSTA4_BRGH_MASK                                   0x4
#define _TXSTA4_SENDB_POSN                                  0x3
#define _TXSTA4_SENDB_POSITION                              0x3
#define _TXSTA4_SENDB_SIZE                                  0x1
#define _TXSTA4_SENDB_LENGTH                                0x1
#define _TXSTA4_SENDB_MASK                                  0x8
#define _TXSTA4_SYNC_POSN                                   0x4
#define _TXSTA4_SYNC_POSITION                               0x4
#define _TXSTA4_SYNC_SIZE                                   0x1
#define _TXSTA4_SYNC_LENGTH                                 0x1
#define _TXSTA4_SYNC_MASK                                   0x10
#define _TXSTA4_TXEN_POSN                                   0x5
#define _TXSTA4_TXEN_POSITION                               0x5
#define _TXSTA4_TXEN_SIZE                                   0x1
#define _TXSTA4_TXEN_LENGTH                                 0x1
#define _TXSTA4_TXEN_MASK                                   0x20
#define _TXSTA4_TX9_POSN                                    0x6
#define _TXSTA4_TX9_POSITION                                0x6
#define _TXSTA4_TX9_SIZE                                    0x1
#define _TXSTA4_TX9_LENGTH                                  0x1
#define _TXSTA4_TX9_MASK                                    0x40
#define _TXSTA4_CSRC_POSN                                   0x7
#define _TXSTA4_CSRC_POSITION                               0x7
#define _TXSTA4_CSRC_SIZE                                   0x1
#define _TXSTA4_CSRC_LENGTH                                 0x1
#define _TXSTA4_CSRC_MASK                                   0x80
#define _TXSTA4_TXD84_POSN                                  0x0
#define _TXSTA4_TXD84_POSITION                              0x0
#define _TXSTA4_TXD84_SIZE                                  0x1
#define _TXSTA4_TXD84_LENGTH                                0x1
#define _TXSTA4_TXD84_MASK                                  0x1
#define _TXSTA4_TX8_94_POSN                                 0x6
#define _TXSTA4_TX8_94_POSITION                             0x6
#define _TXSTA4_TX8_94_SIZE                                 0x1
#define _TXSTA4_TX8_94_LENGTH                               0x1
#define _TXSTA4_TX8_94_MASK                                 0x40

// Register: RCSTA4
#define RCSTA4 RCSTA4
extern volatile unsigned char           RCSTA4              __at(0xEFF);
#ifndef _LIB_BUILD
asm("RCSTA4 equ 0EFFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned RCD84                  :1;
        unsigned                        :5;
        unsigned RC8_92                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC94                   :1;
    };
} RCSTA4bits_t;
extern volatile RCSTA4bits_t RCSTA4bits __at(0xEFF);
// bitfield macros
#define _RCSTA4_RX9D_POSN                                   0x0
#define _RCSTA4_RX9D_POSITION                               0x0
#define _RCSTA4_RX9D_SIZE                                   0x1
#define _RCSTA4_RX9D_LENGTH                                 0x1
#define _RCSTA4_RX9D_MASK                                   0x1
#define _RCSTA4_OERR_POSN                                   0x1
#define _RCSTA4_OERR_POSITION                               0x1
#define _RCSTA4_OERR_SIZE                                   0x1
#define _RCSTA4_OERR_LENGTH                                 0x1
#define _RCSTA4_OERR_MASK                                   0x2
#define _RCSTA4_FERR_POSN                                   0x2
#define _RCSTA4_FERR_POSITION                               0x2
#define _RCSTA4_FERR_SIZE                                   0x1
#define _RCSTA4_FERR_LENGTH                                 0x1
#define _RCSTA4_FERR_MASK                                   0x4
#define _RCSTA4_ADDEN_POSN                                  0x3
#define _RCSTA4_ADDEN_POSITION                              0x3
#define _RCSTA4_ADDEN_SIZE                                  0x1
#define _RCSTA4_ADDEN_LENGTH                                0x1
#define _RCSTA4_ADDEN_MASK                                  0x8
#define _RCSTA4_CREN_POSN                                   0x4
#define _RCSTA4_CREN_POSITION                               0x4
#define _RCSTA4_CREN_SIZE                                   0x1
#define _RCSTA4_CREN_LENGTH                                 0x1
#define _RCSTA4_CREN_MASK                                   0x10
#define _RCSTA4_SREN_POSN                                   0x5
#define _RCSTA4_SREN_POSITION                               0x5
#define _RCSTA4_SREN_SIZE                                   0x1
#define _RCSTA4_SREN_LENGTH                                 0x1
#define _RCSTA4_SREN_MASK                                   0x20
#define _RCSTA4_RX9_POSN                                    0x6
#define _RCSTA4_RX9_POSITION                                0x6
#define _RCSTA4_RX9_SIZE                                    0x1
#define _RCSTA4_RX9_LENGTH                                  0x1
#define _RCSTA4_RX9_MASK                                    0x40
#define _RCSTA4_SPEN_POSN                                   0x7
#define _RCSTA4_SPEN_POSITION                               0x7
#define _RCSTA4_SPEN_SIZE                                   0x1
#define _RCSTA4_SPEN_LENGTH                                 0x1
#define _RCSTA4_SPEN_MASK                                   0x80
#define _RCSTA4_RCD84_POSN                                  0x0
#define _RCSTA4_RCD84_POSITION                              0x0
#define _RCSTA4_RCD84_SIZE                                  0x1
#define _RCSTA4_RCD84_LENGTH                                0x1
#define _RCSTA4_RCD84_MASK                                  0x1
#define _RCSTA4_RC8_92_POSN                                 0x6
#define _RCSTA4_RC8_92_POSITION                             0x6
#define _RCSTA4_RC8_92_SIZE                                 0x1
#define _RCSTA4_RC8_92_LENGTH                               0x1
#define _RCSTA4_RC8_92_MASK                                 0x40
#define _RCSTA4_RC94_POSN                                   0x6
#define _RCSTA4_RC94_POSITION                               0x6
#define _RCSTA4_RC94_SIZE                                   0x1
#define _RCSTA4_RC94_LENGTH                                 0x1
#define _RCSTA4_RC94_MASK                                   0x40

// Register: DMACON2
#define DMACON2 DMACON2
extern volatile unsigned char           DMACON2             __at(0xF00);
#ifndef _LIB_BUILD
asm("DMACON2 equ 0F00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTLVL                 :4;
        unsigned DLYCYC                 :4;
    };
    struct {
        unsigned INTLVL0                :1;
        unsigned INTLVL1                :1;
        unsigned INTLVL2                :1;
        unsigned INTLVL3                :1;
        unsigned DLYCYC0                :1;
        unsigned DLYCYC1                :1;
        unsigned DLYCYC2                :1;
        unsigned DLYCYC3                :1;
    };
} DMACON2bits_t;
extern volatile DMACON2bits_t DMACON2bits __at(0xF00);
// bitfield macros
#define _DMACON2_INTLVL_POSN                                0x0
#define _DMACON2_INTLVL_POSITION                            0x0
#define _DMACON2_INTLVL_SIZE                                0x4
#define _DMACON2_INTLVL_LENGTH                              0x4
#define _DMACON2_INTLVL_MASK                                0xF
#define _DMACON2_DLYCYC_POSN                                0x4
#define _DMACON2_DLYCYC_POSITION                            0x4
#define _DMACON2_DLYCYC_SIZE                                0x4
#define _DMACON2_DLYCYC_LENGTH                              0x4
#define _DMACON2_DLYCYC_MASK                                0xF0
#define _DMACON2_INTLVL0_POSN                               0x0
#define _DMACON2_INTLVL0_POSITION                           0x0
#define _DMACON2_INTLVL0_SIZE                               0x1
#define _DMACON2_INTLVL0_LENGTH                             0x1
#define _DMACON2_INTLVL0_MASK                               0x1
#define _DMACON2_INTLVL1_POSN                               0x1
#define _DMACON2_INTLVL1_POSITION                           0x1
#define _DMACON2_INTLVL1_SIZE                               0x1
#define _DMACON2_INTLVL1_LENGTH                             0x1
#define _DMACON2_INTLVL1_MASK                               0x2
#define _DMACON2_INTLVL2_POSN                               0x2
#define _DMACON2_INTLVL2_POSITION                           0x2
#define _DMACON2_INTLVL2_SIZE                               0x1
#define _DMACON2_INTLVL2_LENGTH                             0x1
#define _DMACON2_INTLVL2_MASK                               0x4
#define _DMACON2_INTLVL3_POSN                               0x3
#define _DMACON2_INTLVL3_POSITION                           0x3
#define _DMACON2_INTLVL3_SIZE                               0x1
#define _DMACON2_INTLVL3_LENGTH                             0x1
#define _DMACON2_INTLVL3_MASK                               0x8
#define _DMACON2_DLYCYC0_POSN                               0x4
#define _DMACON2_DLYCYC0_POSITION                           0x4
#define _DMACON2_DLYCYC0_SIZE                               0x1
#define _DMACON2_DLYCYC0_LENGTH                             0x1
#define _DMACON2_DLYCYC0_MASK                               0x10
#define _DMACON2_DLYCYC1_POSN                               0x5
#define _DMACON2_DLYCYC1_POSITION                           0x5
#define _DMACON2_DLYCYC1_SIZE                               0x1
#define _DMACON2_DLYCYC1_LENGTH                             0x1
#define _DMACON2_DLYCYC1_MASK                               0x20
#define _DMACON2_DLYCYC2_POSN                               0x6
#define _DMACON2_DLYCYC2_POSITION                           0x6
#define _DMACON2_DLYCYC2_SIZE                               0x1
#define _DMACON2_DLYCYC2_LENGTH                             0x1
#define _DMACON2_DLYCYC2_MASK                               0x40
#define _DMACON2_DLYCYC3_POSN                               0x7
#define _DMACON2_DLYCYC3_POSITION                           0x7
#define _DMACON2_DLYCYC3_SIZE                               0x1
#define _DMACON2_DLYCYC3_LENGTH                             0x1
#define _DMACON2_DLYCYC3_MASK                               0x80

// Register: ANCFG
#define ANCFG ANCFG
extern volatile unsigned char           ANCFG               __at(0xF01);
#ifndef _LIB_BUILD
asm("ANCFG equ 0F01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VBGEN                  :1;
        unsigned VBG2EN                 :1;
        unsigned VBG6EN                 :1;
    };
} ANCFGbits_t;
extern volatile ANCFGbits_t ANCFGbits __at(0xF01);
// bitfield macros
#define _ANCFG_VBGEN_POSN                                   0x0
#define _ANCFG_VBGEN_POSITION                               0x0
#define _ANCFG_VBGEN_SIZE                                   0x1
#define _ANCFG_VBGEN_LENGTH                                 0x1
#define _ANCFG_VBGEN_MASK                                   0x1
#define _ANCFG_VBG2EN_POSN                                  0x1
#define _ANCFG_VBG2EN_POSITION                              0x1
#define _ANCFG_VBG2EN_SIZE                                  0x1
#define _ANCFG_VBG2EN_LENGTH                                0x1
#define _ANCFG_VBG2EN_MASK                                  0x2
#define _ANCFG_VBG6EN_POSN                                  0x2
#define _ANCFG_VBG6EN_POSITION                              0x2
#define _ANCFG_VBG6EN_SIZE                                  0x1
#define _ANCFG_VBG6EN_LENGTH                                0x1
#define _ANCFG_VBG6EN_MASK                                  0x4

// Register: SSP2ADD
#define SSP2ADD SSP2ADD
extern volatile unsigned char           SSP2ADD             __at(0xF02);
#ifndef _LIB_BUILD
asm("SSP2ADD equ 0F02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK02                  :1;
        unsigned MSK12                  :1;
        unsigned MSK22                  :1;
        unsigned MSK32                  :1;
        unsigned MSK42                  :1;
        unsigned MSK52                  :1;
        unsigned MSK62                  :1;
        unsigned MSK72                  :1;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP2ADDbits_t;
extern volatile SSP2ADDbits_t SSP2ADDbits __at(0xF02);
// bitfield macros
#define _SSP2ADD_SSPADD_POSN                                0x0
#define _SSP2ADD_SSPADD_POSITION                            0x0
#define _SSP2ADD_SSPADD_SIZE                                0x8
#define _SSP2ADD_SSPADD_LENGTH                              0x8
#define _SSP2ADD_SSPADD_MASK                                0xFF
#define _SSP2ADD_MSK02_POSN                                 0x0
#define _SSP2ADD_MSK02_POSITION                             0x0
#define _SSP2ADD_MSK02_SIZE                                 0x1
#define _SSP2ADD_MSK02_LENGTH                               0x1
#define _SSP2ADD_MSK02_MASK                                 0x1
#define _SSP2ADD_MSK12_POSN                                 0x1
#define _SSP2ADD_MSK12_POSITION                             0x1
#define _SSP2ADD_MSK12_SIZE                                 0x1
#define _SSP2ADD_MSK12_LENGTH                               0x1
#define _SSP2ADD_MSK12_MASK                                 0x2
#define _SSP2ADD_MSK22_POSN                                 0x2
#define _SSP2ADD_MSK22_POSITION                             0x2
#define _SSP2ADD_MSK22_SIZE                                 0x1
#define _SSP2ADD_MSK22_LENGTH                               0x1
#define _SSP2ADD_MSK22_MASK                                 0x4
#define _SSP2ADD_MSK32_POSN                                 0x3
#define _SSP2ADD_MSK32_POSITION                             0x3
#define _SSP2ADD_MSK32_SIZE                                 0x1
#define _SSP2ADD_MSK32_LENGTH                               0x1
#define _SSP2ADD_MSK32_MASK                                 0x8
#define _SSP2ADD_MSK42_POSN                                 0x4
#define _SSP2ADD_MSK42_POSITION                             0x4
#define _SSP2ADD_MSK42_SIZE                                 0x1
#define _SSP2ADD_MSK42_LENGTH                               0x1
#define _SSP2ADD_MSK42_MASK                                 0x10
#define _SSP2ADD_MSK52_POSN                                 0x5
#define _SSP2ADD_MSK52_POSITION                             0x5
#define _SSP2ADD_MSK52_SIZE                                 0x1
#define _SSP2ADD_MSK52_LENGTH                               0x1
#define _SSP2ADD_MSK52_MASK                                 0x20
#define _SSP2ADD_MSK62_POSN                                 0x6
#define _SSP2ADD_MSK62_POSITION                             0x6
#define _SSP2ADD_MSK62_SIZE                                 0x1
#define _SSP2ADD_MSK62_LENGTH                               0x1
#define _SSP2ADD_MSK62_MASK                                 0x40
#define _SSP2ADD_MSK72_POSN                                 0x7
#define _SSP2ADD_MSK72_POSITION                             0x7
#define _SSP2ADD_MSK72_SIZE                                 0x1
#define _SSP2ADD_MSK72_LENGTH                               0x1
#define _SSP2ADD_MSK72_MASK                                 0x80
#define _SSP2ADD_MSK0_POSN                                  0x0
#define _SSP2ADD_MSK0_POSITION                              0x0
#define _SSP2ADD_MSK0_SIZE                                  0x1
#define _SSP2ADD_MSK0_LENGTH                                0x1
#define _SSP2ADD_MSK0_MASK                                  0x1
#define _SSP2ADD_MSK1_POSN                                  0x1
#define _SSP2ADD_MSK1_POSITION                              0x1
#define _SSP2ADD_MSK1_SIZE                                  0x1
#define _SSP2ADD_MSK1_LENGTH                                0x1
#define _SSP2ADD_MSK1_MASK                                  0x2
#define _SSP2ADD_MSK2_POSN                                  0x2
#define _SSP2ADD_MSK2_POSITION                              0x2
#define _SSP2ADD_MSK2_SIZE                                  0x1
#define _SSP2ADD_MSK2_LENGTH                                0x1
#define _SSP2ADD_MSK2_MASK                                  0x4
#define _SSP2ADD_MSK3_POSN                                  0x3
#define _SSP2ADD_MSK3_POSITION                              0x3
#define _SSP2ADD_MSK3_SIZE                                  0x1
#define _SSP2ADD_MSK3_LENGTH                                0x1
#define _SSP2ADD_MSK3_MASK                                  0x8
#define _SSP2ADD_MSK4_POSN                                  0x4
#define _SSP2ADD_MSK4_POSITION                              0x4
#define _SSP2ADD_MSK4_SIZE                                  0x1
#define _SSP2ADD_MSK4_LENGTH                                0x1
#define _SSP2ADD_MSK4_MASK                                  0x10
#define _SSP2ADD_MSK5_POSN                                  0x5
#define _SSP2ADD_MSK5_POSITION                              0x5
#define _SSP2ADD_MSK5_SIZE                                  0x1
#define _SSP2ADD_MSK5_LENGTH                                0x1
#define _SSP2ADD_MSK5_MASK                                  0x20
#define _SSP2ADD_MSK6_POSN                                  0x6
#define _SSP2ADD_MSK6_POSITION                              0x6
#define _SSP2ADD_MSK6_SIZE                                  0x1
#define _SSP2ADD_MSK6_LENGTH                                0x1
#define _SSP2ADD_MSK6_MASK                                  0x40
#define _SSP2ADD_MSK7_POSN                                  0x7
#define _SSP2ADD_MSK7_POSITION                              0x7
#define _SSP2ADD_MSK7_SIZE                                  0x1
#define _SSP2ADD_MSK7_LENGTH                                0x1
#define _SSP2ADD_MSK7_MASK                                  0x80

// Register: SSP2BUF
#define SSP2BUF SSP2BUF
extern volatile unsigned char           SSP2BUF             __at(0xF03);
#ifndef _LIB_BUILD
asm("SSP2BUF equ 0F03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP2BUFbits_t;
extern volatile SSP2BUFbits_t SSP2BUFbits __at(0xF03);
// bitfield macros
#define _SSP2BUF_SSPBUF_POSN                                0x0
#define _SSP2BUF_SSPBUF_POSITION                            0x0
#define _SSP2BUF_SSPBUF_SIZE                                0x8
#define _SSP2BUF_SSPBUF_LENGTH                              0x8
#define _SSP2BUF_SSPBUF_MASK                                0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0xF04);
#ifndef _LIB_BUILD
asm("T4CON equ 0F04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4CKPS                 :2;
        unsigned TMR4ON                 :1;
        unsigned T4OUTPS                :4;
    };
    struct {
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned                        :1;
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0xF04);
// bitfield macros
#define _T4CON_T4CKPS_POSN                                  0x0
#define _T4CON_T4CKPS_POSITION                              0x0
#define _T4CON_T4CKPS_SIZE                                  0x2
#define _T4CON_T4CKPS_LENGTH                                0x2
#define _T4CON_T4CKPS_MASK                                  0x3
#define _T4CON_TMR4ON_POSN                                  0x2
#define _T4CON_TMR4ON_POSITION                              0x2
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x4
#define _T4CON_T4OUTPS_POSN                                 0x3
#define _T4CON_T4OUTPS_POSITION                             0x3
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0x78
#define _T4CON_T4CKPS0_POSN                                 0x0
#define _T4CON_T4CKPS0_POSITION                             0x0
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x1
#define _T4CON_T4CKPS1_POSN                                 0x1
#define _T4CON_T4CKPS1_POSITION                             0x1
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x2
#define _T4CON_T4OUTPS0_POSN                                0x3
#define _T4CON_T4OUTPS0_POSITION                            0x3
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x8
#define _T4CON_T4OUTPS1_POSN                                0x4
#define _T4CON_T4OUTPS1_POSITION                            0x4
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x10
#define _T4CON_T4OUTPS2_POSN                                0x5
#define _T4CON_T4OUTPS2_POSITION                            0x5
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x20
#define _T4CON_T4OUTPS3_POSN                                0x6
#define _T4CON_T4OUTPS3_POSITION                            0x6
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x40

// Register: PR4
#define PR4 PR4
extern volatile unsigned char           PR4                 __at(0xF05);
#ifndef _LIB_BUILD
asm("PR4 equ 0F05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0xF05);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: TMR4
#define TMR4 TMR4
extern volatile unsigned char           TMR4                __at(0xF06);
#ifndef _LIB_BUILD
asm("TMR4 equ 0F06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0xF06);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: CCP7CON
#define CCP7CON CCP7CON
extern volatile unsigned char           CCP7CON             __at(0xF07);
#ifndef _LIB_BUILD
asm("CCP7CON equ 0F07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP7M                  :4;
        unsigned DC7B                   :2;
    };
    struct {
        unsigned CCP7M0                 :1;
        unsigned CCP7M1                 :1;
        unsigned CCP7M2                 :1;
        unsigned CCP7M3                 :1;
        unsigned DC7B0                  :1;
        unsigned DC7B1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP7Y                  :1;
        unsigned CCP7X                  :1;
    };
} CCP7CONbits_t;
extern volatile CCP7CONbits_t CCP7CONbits __at(0xF07);
// bitfield macros
#define _CCP7CON_CCP7M_POSN                                 0x0
#define _CCP7CON_CCP7M_POSITION                             0x0
#define _CCP7CON_CCP7M_SIZE                                 0x4
#define _CCP7CON_CCP7M_LENGTH                               0x4
#define _CCP7CON_CCP7M_MASK                                 0xF
#define _CCP7CON_DC7B_POSN                                  0x4
#define _CCP7CON_DC7B_POSITION                              0x4
#define _CCP7CON_DC7B_SIZE                                  0x2
#define _CCP7CON_DC7B_LENGTH                                0x2
#define _CCP7CON_DC7B_MASK                                  0x30
#define _CCP7CON_CCP7M0_POSN                                0x0
#define _CCP7CON_CCP7M0_POSITION                            0x0
#define _CCP7CON_CCP7M0_SIZE                                0x1
#define _CCP7CON_CCP7M0_LENGTH                              0x1
#define _CCP7CON_CCP7M0_MASK                                0x1
#define _CCP7CON_CCP7M1_POSN                                0x1
#define _CCP7CON_CCP7M1_POSITION                            0x1
#define _CCP7CON_CCP7M1_SIZE                                0x1
#define _CCP7CON_CCP7M1_LENGTH                              0x1
#define _CCP7CON_CCP7M1_MASK                                0x2
#define _CCP7CON_CCP7M2_POSN                                0x2
#define _CCP7CON_CCP7M2_POSITION                            0x2
#define _CCP7CON_CCP7M2_SIZE                                0x1
#define _CCP7CON_CCP7M2_LENGTH                              0x1
#define _CCP7CON_CCP7M2_MASK                                0x4
#define _CCP7CON_CCP7M3_POSN                                0x3
#define _CCP7CON_CCP7M3_POSITION                            0x3
#define _CCP7CON_CCP7M3_SIZE                                0x1
#define _CCP7CON_CCP7M3_LENGTH                              0x1
#define _CCP7CON_CCP7M3_MASK                                0x8
#define _CCP7CON_DC7B0_POSN                                 0x4
#define _CCP7CON_DC7B0_POSITION                             0x4
#define _CCP7CON_DC7B0_SIZE                                 0x1
#define _CCP7CON_DC7B0_LENGTH                               0x1
#define _CCP7CON_DC7B0_MASK                                 0x10
#define _CCP7CON_DC7B1_POSN                                 0x5
#define _CCP7CON_DC7B1_POSITION                             0x5
#define _CCP7CON_DC7B1_SIZE                                 0x1
#define _CCP7CON_DC7B1_LENGTH                               0x1
#define _CCP7CON_DC7B1_MASK                                 0x20
#define _CCP7CON_CCP7Y_POSN                                 0x4
#define _CCP7CON_CCP7Y_POSITION                             0x4
#define _CCP7CON_CCP7Y_SIZE                                 0x1
#define _CCP7CON_CCP7Y_LENGTH                               0x1
#define _CCP7CON_CCP7Y_MASK                                 0x10
#define _CCP7CON_CCP7X_POSN                                 0x5
#define _CCP7CON_CCP7X_POSITION                             0x5
#define _CCP7CON_CCP7X_SIZE                                 0x1
#define _CCP7CON_CCP7X_LENGTH                               0x1
#define _CCP7CON_CCP7X_MASK                                 0x20

// Register: CCPR7
#define CCPR7 CCPR7
extern volatile unsigned short          CCPR7               __at(0xF08);
#ifndef _LIB_BUILD
asm("CCPR7 equ 0F08h");
#endif

// Register: CCPR7L
#define CCPR7L CCPR7L
extern volatile unsigned char           CCPR7L              __at(0xF08);
#ifndef _LIB_BUILD
asm("CCPR7L equ 0F08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR7L                 :8;
    };
} CCPR7Lbits_t;
extern volatile CCPR7Lbits_t CCPR7Lbits __at(0xF08);
// bitfield macros
#define _CCPR7L_CCPR7L_POSN                                 0x0
#define _CCPR7L_CCPR7L_POSITION                             0x0
#define _CCPR7L_CCPR7L_SIZE                                 0x8
#define _CCPR7L_CCPR7L_LENGTH                               0x8
#define _CCPR7L_CCPR7L_MASK                                 0xFF

// Register: CCPR7H
#define CCPR7H CCPR7H
extern volatile unsigned char           CCPR7H              __at(0xF09);
#ifndef _LIB_BUILD
asm("CCPR7H equ 0F09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR7H                 :8;
    };
} CCPR7Hbits_t;
extern volatile CCPR7Hbits_t CCPR7Hbits __at(0xF09);
// bitfield macros
#define _CCPR7H_CCPR7H_POSN                                 0x0
#define _CCPR7H_CCPR7H_POSITION                             0x0
#define _CCPR7H_CCPR7H_SIZE                                 0x8
#define _CCPR7H_CCPR7H_LENGTH                               0x8
#define _CCPR7H_CCPR7H_MASK                                 0xFF

// Register: CCP6CON
#define CCP6CON CCP6CON
extern volatile unsigned char           CCP6CON             __at(0xF0A);
#ifndef _LIB_BUILD
asm("CCP6CON equ 0F0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP6M                  :4;
        unsigned DC6B                   :2;
    };
    struct {
        unsigned CCP6M0                 :1;
        unsigned CCP6M1                 :1;
        unsigned CCP6M2                 :1;
        unsigned CCP6M3                 :1;
        unsigned DC6B0                  :1;
        unsigned DC6B1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP6Y                  :1;
        unsigned CCP6X                  :1;
    };
} CCP6CONbits_t;
extern volatile CCP6CONbits_t CCP6CONbits __at(0xF0A);
// bitfield macros
#define _CCP6CON_CCP6M_POSN                                 0x0
#define _CCP6CON_CCP6M_POSITION                             0x0
#define _CCP6CON_CCP6M_SIZE                                 0x4
#define _CCP6CON_CCP6M_LENGTH                               0x4
#define _CCP6CON_CCP6M_MASK                                 0xF
#define _CCP6CON_DC6B_POSN                                  0x4
#define _CCP6CON_DC6B_POSITION                              0x4
#define _CCP6CON_DC6B_SIZE                                  0x2
#define _CCP6CON_DC6B_LENGTH                                0x2
#define _CCP6CON_DC6B_MASK                                  0x30
#define _CCP6CON_CCP6M0_POSN                                0x0
#define _CCP6CON_CCP6M0_POSITION                            0x0
#define _CCP6CON_CCP6M0_SIZE                                0x1
#define _CCP6CON_CCP6M0_LENGTH                              0x1
#define _CCP6CON_CCP6M0_MASK                                0x1
#define _CCP6CON_CCP6M1_POSN                                0x1
#define _CCP6CON_CCP6M1_POSITION                            0x1
#define _CCP6CON_CCP6M1_SIZE                                0x1
#define _CCP6CON_CCP6M1_LENGTH                              0x1
#define _CCP6CON_CCP6M1_MASK                                0x2
#define _CCP6CON_CCP6M2_POSN                                0x2
#define _CCP6CON_CCP6M2_POSITION                            0x2
#define _CCP6CON_CCP6M2_SIZE                                0x1
#define _CCP6CON_CCP6M2_LENGTH                              0x1
#define _CCP6CON_CCP6M2_MASK                                0x4
#define _CCP6CON_CCP6M3_POSN                                0x3
#define _CCP6CON_CCP6M3_POSITION                            0x3
#define _CCP6CON_CCP6M3_SIZE                                0x1
#define _CCP6CON_CCP6M3_LENGTH                              0x1
#define _CCP6CON_CCP6M3_MASK                                0x8
#define _CCP6CON_DC6B0_POSN                                 0x4
#define _CCP6CON_DC6B0_POSITION                             0x4
#define _CCP6CON_DC6B0_SIZE                                 0x1
#define _CCP6CON_DC6B0_LENGTH                               0x1
#define _CCP6CON_DC6B0_MASK                                 0x10
#define _CCP6CON_DC6B1_POSN                                 0x5
#define _CCP6CON_DC6B1_POSITION                             0x5
#define _CCP6CON_DC6B1_SIZE                                 0x1
#define _CCP6CON_DC6B1_LENGTH                               0x1
#define _CCP6CON_DC6B1_MASK                                 0x20
#define _CCP6CON_CCP6Y_POSN                                 0x4
#define _CCP6CON_CCP6Y_POSITION                             0x4
#define _CCP6CON_CCP6Y_SIZE                                 0x1
#define _CCP6CON_CCP6Y_LENGTH                               0x1
#define _CCP6CON_CCP6Y_MASK                                 0x10
#define _CCP6CON_CCP6X_POSN                                 0x5
#define _CCP6CON_CCP6X_POSITION                             0x5
#define _CCP6CON_CCP6X_SIZE                                 0x1
#define _CCP6CON_CCP6X_LENGTH                               0x1
#define _CCP6CON_CCP6X_MASK                                 0x20

// Register: CCPR6
#define CCPR6 CCPR6
extern volatile unsigned short          CCPR6               __at(0xF0B);
#ifndef _LIB_BUILD
asm("CCPR6 equ 0F0Bh");
#endif

// Register: CCPR6L
#define CCPR6L CCPR6L
extern volatile unsigned char           CCPR6L              __at(0xF0B);
#ifndef _LIB_BUILD
asm("CCPR6L equ 0F0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR6L                 :8;
    };
} CCPR6Lbits_t;
extern volatile CCPR6Lbits_t CCPR6Lbits __at(0xF0B);
// bitfield macros
#define _CCPR6L_CCPR6L_POSN                                 0x0
#define _CCPR6L_CCPR6L_POSITION                             0x0
#define _CCPR6L_CCPR6L_SIZE                                 0x8
#define _CCPR6L_CCPR6L_LENGTH                               0x8
#define _CCPR6L_CCPR6L_MASK                                 0xFF

// Register: CCPR6H
#define CCPR6H CCPR6H
extern volatile unsigned char           CCPR6H              __at(0xF0C);
#ifndef _LIB_BUILD
asm("CCPR6H equ 0F0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR6H                 :8;
    };
} CCPR6Hbits_t;
extern volatile CCPR6Hbits_t CCPR6Hbits __at(0xF0C);
// bitfield macros
#define _CCPR6H_CCPR6H_POSN                                 0x0
#define _CCPR6H_CCPR6H_POSITION                             0x0
#define _CCPR6H_CCPR6H_SIZE                                 0x8
#define _CCPR6H_CCPR6H_LENGTH                               0x8
#define _CCPR6H_CCPR6H_MASK                                 0xFF

// Register: CCP5CON
#define CCP5CON CCP5CON
extern volatile unsigned char           CCP5CON             __at(0xF0D);
#ifndef _LIB_BUILD
asm("CCP5CON equ 0F0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP5M                  :4;
        unsigned DC5B                   :2;
    };
    struct {
        unsigned CCP5M0                 :1;
        unsigned CCP5M1                 :1;
        unsigned CCP5M2                 :1;
        unsigned CCP5M3                 :1;
        unsigned DC5B0                  :1;
        unsigned DC5B1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP5Y                  :1;
        unsigned CCP5X                  :1;
    };
} CCP5CONbits_t;
extern volatile CCP5CONbits_t CCP5CONbits __at(0xF0D);
// bitfield macros
#define _CCP5CON_CCP5M_POSN                                 0x0
#define _CCP5CON_CCP5M_POSITION                             0x0
#define _CCP5CON_CCP5M_SIZE                                 0x4
#define _CCP5CON_CCP5M_LENGTH                               0x4
#define _CCP5CON_CCP5M_MASK                                 0xF
#define _CCP5CON_DC5B_POSN                                  0x4
#define _CCP5CON_DC5B_POSITION                              0x4
#define _CCP5CON_DC5B_SIZE                                  0x2
#define _CCP5CON_DC5B_LENGTH                                0x2
#define _CCP5CON_DC5B_MASK                                  0x30
#define _CCP5CON_CCP5M0_POSN                                0x0
#define _CCP5CON_CCP5M0_POSITION                            0x0
#define _CCP5CON_CCP5M0_SIZE                                0x1
#define _CCP5CON_CCP5M0_LENGTH                              0x1
#define _CCP5CON_CCP5M0_MASK                                0x1
#define _CCP5CON_CCP5M1_POSN                                0x1
#define _CCP5CON_CCP5M1_POSITION                            0x1
#define _CCP5CON_CCP5M1_SIZE                                0x1
#define _CCP5CON_CCP5M1_LENGTH                              0x1
#define _CCP5CON_CCP5M1_MASK                                0x2
#define _CCP5CON_CCP5M2_POSN                                0x2
#define _CCP5CON_CCP5M2_POSITION                            0x2
#define _CCP5CON_CCP5M2_SIZE                                0x1
#define _CCP5CON_CCP5M2_LENGTH                              0x1
#define _CCP5CON_CCP5M2_MASK                                0x4
#define _CCP5CON_CCP5M3_POSN                                0x3
#define _CCP5CON_CCP5M3_POSITION                            0x3
#define _CCP5CON_CCP5M3_SIZE                                0x1
#define _CCP5CON_CCP5M3_LENGTH                              0x1
#define _CCP5CON_CCP5M3_MASK                                0x8
#define _CCP5CON_DC5B0_POSN                                 0x4
#define _CCP5CON_DC5B0_POSITION                             0x4
#define _CCP5CON_DC5B0_SIZE                                 0x1
#define _CCP5CON_DC5B0_LENGTH                               0x1
#define _CCP5CON_DC5B0_MASK                                 0x10
#define _CCP5CON_DC5B1_POSN                                 0x5
#define _CCP5CON_DC5B1_POSITION                             0x5
#define _CCP5CON_DC5B1_SIZE                                 0x1
#define _CCP5CON_DC5B1_LENGTH                               0x1
#define _CCP5CON_DC5B1_MASK                                 0x20
#define _CCP5CON_CCP5Y_POSN                                 0x4
#define _CCP5CON_CCP5Y_POSITION                             0x4
#define _CCP5CON_CCP5Y_SIZE                                 0x1
#define _CCP5CON_CCP5Y_LENGTH                               0x1
#define _CCP5CON_CCP5Y_MASK                                 0x10
#define _CCP5CON_CCP5X_POSN                                 0x5
#define _CCP5CON_CCP5X_POSITION                             0x5
#define _CCP5CON_CCP5X_SIZE                                 0x1
#define _CCP5CON_CCP5X_LENGTH                               0x1
#define _CCP5CON_CCP5X_MASK                                 0x20

// Register: CCPR5
#define CCPR5 CCPR5
extern volatile unsigned short          CCPR5               __at(0xF0E);
#ifndef _LIB_BUILD
asm("CCPR5 equ 0F0Eh");
#endif

// Register: CCPR5L
#define CCPR5L CCPR5L
extern volatile unsigned char           CCPR5L              __at(0xF0E);
#ifndef _LIB_BUILD
asm("CCPR5L equ 0F0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR5L                 :8;
    };
} CCPR5Lbits_t;
extern volatile CCPR5Lbits_t CCPR5Lbits __at(0xF0E);
// bitfield macros
#define _CCPR5L_CCPR5L_POSN                                 0x0
#define _CCPR5L_CCPR5L_POSITION                             0x0
#define _CCPR5L_CCPR5L_SIZE                                 0x8
#define _CCPR5L_CCPR5L_LENGTH                               0x8
#define _CCPR5L_CCPR5L_MASK                                 0xFF

// Register: CCPR5H
#define CCPR5H CCPR5H
extern volatile unsigned char           CCPR5H              __at(0xF0F);
#ifndef _LIB_BUILD
asm("CCPR5H equ 0F0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR5H                 :8;
    };
} CCPR5Hbits_t;
extern volatile CCPR5Hbits_t CCPR5Hbits __at(0xF0F);
// bitfield macros
#define _CCPR5H_CCPR5H_POSN                                 0x0
#define _CCPR5H_CCPR5H_POSITION                             0x0
#define _CCPR5H_CCPR5H_SIZE                                 0x8
#define _CCPR5H_CCPR5H_LENGTH                               0x8
#define _CCPR5H_CCPR5H_MASK                                 0xFF

// Register: CCP4CON
#define CCP4CON CCP4CON
extern volatile unsigned char           CCP4CON             __at(0xF10);
#ifndef _LIB_BUILD
asm("CCP4CON equ 0F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4M                  :4;
        unsigned DC4B                   :2;
    };
    struct {
        unsigned CCP4M0                 :1;
        unsigned CCP4M1                 :1;
        unsigned CCP4M2                 :1;
        unsigned CCP4M3                 :1;
        unsigned DC4B0                  :1;
        unsigned DC4B1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP4Y                  :1;
        unsigned CCP4X                  :1;
    };
} CCP4CONbits_t;
extern volatile CCP4CONbits_t CCP4CONbits __at(0xF10);
// bitfield macros
#define _CCP4CON_CCP4M_POSN                                 0x0
#define _CCP4CON_CCP4M_POSITION                             0x0
#define _CCP4CON_CCP4M_SIZE                                 0x4
#define _CCP4CON_CCP4M_LENGTH                               0x4
#define _CCP4CON_CCP4M_MASK                                 0xF
#define _CCP4CON_DC4B_POSN                                  0x4
#define _CCP4CON_DC4B_POSITION                              0x4
#define _CCP4CON_DC4B_SIZE                                  0x2
#define _CCP4CON_DC4B_LENGTH                                0x2
#define _CCP4CON_DC4B_MASK                                  0x30
#define _CCP4CON_CCP4M0_POSN                                0x0
#define _CCP4CON_CCP4M0_POSITION                            0x0
#define _CCP4CON_CCP4M0_SIZE                                0x1
#define _CCP4CON_CCP4M0_LENGTH                              0x1
#define _CCP4CON_CCP4M0_MASK                                0x1
#define _CCP4CON_CCP4M1_POSN                                0x1
#define _CCP4CON_CCP4M1_POSITION                            0x1
#define _CCP4CON_CCP4M1_SIZE                                0x1
#define _CCP4CON_CCP4M1_LENGTH                              0x1
#define _CCP4CON_CCP4M1_MASK                                0x2
#define _CCP4CON_CCP4M2_POSN                                0x2
#define _CCP4CON_CCP4M2_POSITION                            0x2
#define _CCP4CON_CCP4M2_SIZE                                0x1
#define _CCP4CON_CCP4M2_LENGTH                              0x1
#define _CCP4CON_CCP4M2_MASK                                0x4
#define _CCP4CON_CCP4M3_POSN                                0x3
#define _CCP4CON_CCP4M3_POSITION                            0x3
#define _CCP4CON_CCP4M3_SIZE                                0x1
#define _CCP4CON_CCP4M3_LENGTH                              0x1
#define _CCP4CON_CCP4M3_MASK                                0x8
#define _CCP4CON_DC4B0_POSN                                 0x4
#define _CCP4CON_DC4B0_POSITION                             0x4
#define _CCP4CON_DC4B0_SIZE                                 0x1
#define _CCP4CON_DC4B0_LENGTH                               0x1
#define _CCP4CON_DC4B0_MASK                                 0x10
#define _CCP4CON_DC4B1_POSN                                 0x5
#define _CCP4CON_DC4B1_POSITION                             0x5
#define _CCP4CON_DC4B1_SIZE                                 0x1
#define _CCP4CON_DC4B1_LENGTH                               0x1
#define _CCP4CON_DC4B1_MASK                                 0x20
#define _CCP4CON_CCP4Y_POSN                                 0x4
#define _CCP4CON_CCP4Y_POSITION                             0x4
#define _CCP4CON_CCP4Y_SIZE                                 0x1
#define _CCP4CON_CCP4Y_LENGTH                               0x1
#define _CCP4CON_CCP4Y_MASK                                 0x10
#define _CCP4CON_CCP4X_POSN                                 0x5
#define _CCP4CON_CCP4X_POSITION                             0x5
#define _CCP4CON_CCP4X_SIZE                                 0x1
#define _CCP4CON_CCP4X_LENGTH                               0x1
#define _CCP4CON_CCP4X_MASK                                 0x20

// Register: CCPR4
#define CCPR4 CCPR4
extern volatile unsigned short          CCPR4               __at(0xF11);
#ifndef _LIB_BUILD
asm("CCPR4 equ 0F11h");
#endif

// Register: CCPR4L
#define CCPR4L CCPR4L
extern volatile unsigned char           CCPR4L              __at(0xF11);
#ifndef _LIB_BUILD
asm("CCPR4L equ 0F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR4L                 :8;
    };
} CCPR4Lbits_t;
extern volatile CCPR4Lbits_t CCPR4Lbits __at(0xF11);
// bitfield macros
#define _CCPR4L_CCPR4L_POSN                                 0x0
#define _CCPR4L_CCPR4L_POSITION                             0x0
#define _CCPR4L_CCPR4L_SIZE                                 0x8
#define _CCPR4L_CCPR4L_LENGTH                               0x8
#define _CCPR4L_CCPR4L_MASK                                 0xFF

// Register: CCPR4H
#define CCPR4H CCPR4H
extern volatile unsigned char           CCPR4H              __at(0xF12);
#ifndef _LIB_BUILD
asm("CCPR4H equ 0F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR4H                 :8;
    };
} CCPR4Hbits_t;
extern volatile CCPR4Hbits_t CCPR4Hbits __at(0xF12);
// bitfield macros
#define _CCPR4H_CCPR4H_POSN                                 0x0
#define _CCPR4H_CCPR4H_POSITION                             0x0
#define _CCPR4H_CCPR4H_SIZE                                 0x8
#define _CCPR4H_CCPR4H_LENGTH                               0x8
#define _CCPR4H_CCPR4H_MASK                                 0xFF

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0xF13);
#ifndef _LIB_BUILD
asm("T5GCON equ 0F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned T5GGO_NOT_T5DONE       :1;
    };
    struct {
        unsigned T5GSS                  :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nT5DONE          :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned TMR5GE                 :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned                        :1;
        unsigned T5GGO                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T5DONE             :1;
    };
    struct {
        unsigned                        :3;
        unsigned nT5DONE                :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0xF13);
// bitfield macros
#define _T5GCON_T5GGO_NOT_T5DONE_POSN                       0x3
#define _T5GCON_T5GGO_NOT_T5DONE_POSITION                   0x3
#define _T5GCON_T5GGO_NOT_T5DONE_SIZE                       0x1
#define _T5GCON_T5GGO_NOT_T5DONE_LENGTH                     0x1
#define _T5GCON_T5GGO_NOT_T5DONE_MASK                       0x8
#define _T5GCON_T5GSS_POSN                                  0x0
#define _T5GCON_T5GSS_POSITION                              0x0
#define _T5GCON_T5GSS_SIZE                                  0x2
#define _T5GCON_T5GSS_LENGTH                                0x2
#define _T5GCON_T5GSS_MASK                                  0x3
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_nT5DONE_POSN                          0x3
#define _T5GCON_T5GGO_nT5DONE_POSITION                      0x3
#define _T5GCON_T5GGO_nT5DONE_SIZE                          0x1
#define _T5GCON_T5GGO_nT5DONE_LENGTH                        0x1
#define _T5GCON_T5GGO_nT5DONE_MASK                          0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_TMR5GE_POSN                                 0x7
#define _T5GCON_TMR5GE_POSITION                             0x7
#define _T5GCON_TMR5GE_SIZE                                 0x1
#define _T5GCON_TMR5GE_LENGTH                               0x1
#define _T5GCON_TMR5GE_MASK                                 0x80
#define _T5GCON_T5GSS0_POSN                                 0x0
#define _T5GCON_T5GSS0_POSITION                             0x0
#define _T5GCON_T5GSS0_SIZE                                 0x1
#define _T5GCON_T5GSS0_LENGTH                               0x1
#define _T5GCON_T5GSS0_MASK                                 0x1
#define _T5GCON_T5GSS1_POSN                                 0x1
#define _T5GCON_T5GSS1_POSITION                             0x1
#define _T5GCON_T5GSS1_SIZE                                 0x1
#define _T5GCON_T5GSS1_LENGTH                               0x1
#define _T5GCON_T5GSS1_MASK                                 0x2
#define _T5GCON_T5GGO_POSN                                  0x3
#define _T5GCON_T5GGO_POSITION                              0x3
#define _T5GCON_T5GGO_SIZE                                  0x1
#define _T5GCON_T5GGO_LENGTH                                0x1
#define _T5GCON_T5GGO_MASK                                  0x8
#define _T5GCON_NOT_T5DONE_POSN                             0x3
#define _T5GCON_NOT_T5DONE_POSITION                         0x3
#define _T5GCON_NOT_T5DONE_SIZE                             0x1
#define _T5GCON_NOT_T5DONE_LENGTH                           0x1
#define _T5GCON_NOT_T5DONE_MASK                             0x8
#define _T5GCON_nT5DONE_POSN                                0x3
#define _T5GCON_nT5DONE_POSITION                            0x3
#define _T5GCON_nT5DONE_SIZE                                0x1
#define _T5GCON_nT5DONE_LENGTH                              0x1
#define _T5GCON_nT5DONE_MASK                                0x8

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0xF14);
#ifndef _LIB_BUILD
asm("T5CON equ 0F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned NOT_T5SYNC             :1;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned RD16                   :1;
        unsigned nT5SYNC                :1;
        unsigned SOSCEN                 :1;
        unsigned TCKPS                  :2;
        unsigned TMR5CS                 :2;
    };
    struct {
        unsigned                        :4;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
        unsigned TMR5CS0                :1;
        unsigned TMR5CS1                :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
        unsigned                        :1;
        unsigned SOSCEN5                :1;
        unsigned                        :3;
        unsigned T5RD16                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5OSCEN                :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0xF14);
// bitfield macros
#define _T5CON_NOT_T5SYNC_POSN                              0x2
#define _T5CON_NOT_T5SYNC_POSITION                          0x2
#define _T5CON_NOT_T5SYNC_SIZE                              0x1
#define _T5CON_NOT_T5SYNC_LENGTH                            0x1
#define _T5CON_NOT_T5SYNC_MASK                              0x4
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_RD16_POSN                                    0x1
#define _T5CON_RD16_POSITION                                0x1
#define _T5CON_RD16_SIZE                                    0x1
#define _T5CON_RD16_LENGTH                                  0x1
#define _T5CON_RD16_MASK                                    0x2
#define _T5CON_nT5SYNC_POSN                                 0x2
#define _T5CON_nT5SYNC_POSITION                             0x2
#define _T5CON_nT5SYNC_SIZE                                 0x1
#define _T5CON_nT5SYNC_LENGTH                               0x1
#define _T5CON_nT5SYNC_MASK                                 0x4
#define _T5CON_SOSCEN_POSN                                  0x3
#define _T5CON_SOSCEN_POSITION                              0x3
#define _T5CON_SOSCEN_SIZE                                  0x1
#define _T5CON_SOSCEN_LENGTH                                0x1
#define _T5CON_SOSCEN_MASK                                  0x8
#define _T5CON_TCKPS_POSN                                   0x4
#define _T5CON_TCKPS_POSITION                               0x4
#define _T5CON_TCKPS_SIZE                                   0x2
#define _T5CON_TCKPS_LENGTH                                 0x2
#define _T5CON_TCKPS_MASK                                   0x30
#define _T5CON_TMR5CS_POSN                                  0x6
#define _T5CON_TMR5CS_POSITION                              0x6
#define _T5CON_TMR5CS_SIZE                                  0x2
#define _T5CON_TMR5CS_LENGTH                                0x2
#define _T5CON_TMR5CS_MASK                                  0xC0
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_TMR5CS0_POSN                                 0x6
#define _T5CON_TMR5CS0_POSITION                             0x6
#define _T5CON_TMR5CS0_SIZE                                 0x1
#define _T5CON_TMR5CS0_LENGTH                               0x1
#define _T5CON_TMR5CS0_MASK                                 0x40
#define _T5CON_TMR5CS1_POSN                                 0x7
#define _T5CON_TMR5CS1_POSITION                             0x7
#define _T5CON_TMR5CS1_SIZE                                 0x1
#define _T5CON_TMR5CS1_LENGTH                               0x1
#define _T5CON_TMR5CS1_MASK                                 0x80
#define _T5CON_RD165_POSN                                   0x1
#define _T5CON_RD165_POSITION                               0x1
#define _T5CON_RD165_SIZE                                   0x1
#define _T5CON_RD165_LENGTH                                 0x1
#define _T5CON_RD165_MASK                                   0x2
#define _T5CON_SOSCEN5_POSN                                 0x3
#define _T5CON_SOSCEN5_POSITION                             0x3
#define _T5CON_SOSCEN5_SIZE                                 0x1
#define _T5CON_SOSCEN5_LENGTH                               0x1
#define _T5CON_SOSCEN5_MASK                                 0x8
#define _T5CON_T5RD16_POSN                                  0x7
#define _T5CON_T5RD16_POSITION                              0x7
#define _T5CON_T5RD16_SIZE                                  0x1
#define _T5CON_T5RD16_LENGTH                                0x1
#define _T5CON_T5RD16_MASK                                  0x80
#define _T5CON_T5OSCEN_POSN                                 0x3
#define _T5CON_T5OSCEN_POSITION                             0x3
#define _T5CON_T5OSCEN_SIZE                                 0x1
#define _T5CON_T5OSCEN_LENGTH                               0x1
#define _T5CON_T5OSCEN_MASK                                 0x8

// Register: TMR5
#define TMR5 TMR5
extern volatile unsigned short          TMR5                __at(0xF15);
#ifndef _LIB_BUILD
asm("TMR5 equ 0F15h");
#endif

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0xF15);
#ifndef _LIB_BUILD
asm("TMR5L equ 0F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5L                  :8;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0xF15);
// bitfield macros
#define _TMR5L_TMR5L_POSN                                   0x0
#define _TMR5L_TMR5L_POSITION                               0x0
#define _TMR5L_TMR5L_SIZE                                   0x8
#define _TMR5L_TMR5L_LENGTH                                 0x8
#define _TMR5L_TMR5L_MASK                                   0xFF

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0xF16);
#ifndef _LIB_BUILD
asm("TMR5H equ 0F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5H                  :8;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0xF16);
// bitfield macros
#define _TMR5H_TMR5H_POSN                                   0x0
#define _TMR5H_TMR5H_POSITION                               0x0
#define _TMR5H_TMR5H_SIZE                                   0x8
#define _TMR5H_TMR5H_LENGTH                                 0x8
#define _TMR5H_TMR5H_MASK                                   0xFF

// Register: SSP2MSK
#define SSP2MSK SSP2MSK
extern volatile unsigned char           SSP2MSK             __at(0xF17);
#ifndef _LIB_BUILD
asm("SSP2MSK equ 0F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP2MSKbits_t;
extern volatile SSP2MSKbits_t SSP2MSKbits __at(0xF17);
// bitfield macros
#define _SSP2MSK_SSPMSK_POSN                                0x0
#define _SSP2MSK_SSPMSK_POSITION                            0x0
#define _SSP2MSK_SSPMSK_SIZE                                0x8
#define _SSP2MSK_SSPMSK_LENGTH                              0x8
#define _SSP2MSK_SSPMSK_MASK                                0xFF
#define _SSP2MSK_MSK0_POSN                                  0x0
#define _SSP2MSK_MSK0_POSITION                              0x0
#define _SSP2MSK_MSK0_SIZE                                  0x1
#define _SSP2MSK_MSK0_LENGTH                                0x1
#define _SSP2MSK_MSK0_MASK                                  0x1
#define _SSP2MSK_MSK1_POSN                                  0x1
#define _SSP2MSK_MSK1_POSITION                              0x1
#define _SSP2MSK_MSK1_SIZE                                  0x1
#define _SSP2MSK_MSK1_LENGTH                                0x1
#define _SSP2MSK_MSK1_MASK                                  0x2
#define _SSP2MSK_MSK2_POSN                                  0x2
#define _SSP2MSK_MSK2_POSITION                              0x2
#define _SSP2MSK_MSK2_SIZE                                  0x1
#define _SSP2MSK_MSK2_LENGTH                                0x1
#define _SSP2MSK_MSK2_MASK                                  0x4
#define _SSP2MSK_MSK3_POSN                                  0x3
#define _SSP2MSK_MSK3_POSITION                              0x3
#define _SSP2MSK_MSK3_SIZE                                  0x1
#define _SSP2MSK_MSK3_LENGTH                                0x1
#define _SSP2MSK_MSK3_MASK                                  0x8
#define _SSP2MSK_MSK4_POSN                                  0x4
#define _SSP2MSK_MSK4_POSITION                              0x4
#define _SSP2MSK_MSK4_SIZE                                  0x1
#define _SSP2MSK_MSK4_LENGTH                                0x1
#define _SSP2MSK_MSK4_MASK                                  0x10
#define _SSP2MSK_MSK5_POSN                                  0x5
#define _SSP2MSK_MSK5_POSITION                              0x5
#define _SSP2MSK_MSK5_SIZE                                  0x1
#define _SSP2MSK_MSK5_LENGTH                                0x1
#define _SSP2MSK_MSK5_MASK                                  0x20
#define _SSP2MSK_MSK6_POSN                                  0x6
#define _SSP2MSK_MSK6_POSITION                              0x6
#define _SSP2MSK_MSK6_SIZE                                  0x1
#define _SSP2MSK_MSK6_LENGTH                                0x1
#define _SSP2MSK_MSK6_MASK                                  0x40
#define _SSP2MSK_MSK7_POSN                                  0x7
#define _SSP2MSK_MSK7_POSITION                              0x7
#define _SSP2MSK_MSK7_SIZE                                  0x1
#define _SSP2MSK_MSK7_LENGTH                                0x1
#define _SSP2MSK_MSK7_MASK                                  0x80

// Register: SSP2CON2
#define SSP2CON2 SSP2CON2
extern volatile unsigned char           SSP2CON2            __at(0xF18);
#ifndef _LIB_BUILD
asm("SSP2CON2 equ 0F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN2                   :1;
        unsigned ADMSK12                :1;
        unsigned ADMSK22                :1;
        unsigned ADMSK32                :1;
        unsigned ACKEN2                 :1;
        unsigned ACKDT2                 :1;
        unsigned ACKSTAT2               :1;
        unsigned GCEN2                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN2                  :1;
        unsigned PEN2                   :1;
        unsigned RCEN2                  :1;
        unsigned ADMSK42                :1;
        unsigned ADMSK52                :1;
    };
} SSP2CON2bits_t;
extern volatile SSP2CON2bits_t SSP2CON2bits __at(0xF18);
// bitfield macros
#define _SSP2CON2_SEN_POSN                                  0x0
#define _SSP2CON2_SEN_POSITION                              0x0
#define _SSP2CON2_SEN_SIZE                                  0x1
#define _SSP2CON2_SEN_LENGTH                                0x1
#define _SSP2CON2_SEN_MASK                                  0x1
#define _SSP2CON2_RSEN_POSN                                 0x1
#define _SSP2CON2_RSEN_POSITION                             0x1
#define _SSP2CON2_RSEN_SIZE                                 0x1
#define _SSP2CON2_RSEN_LENGTH                               0x1
#define _SSP2CON2_RSEN_MASK                                 0x2
#define _SSP2CON2_PEN_POSN                                  0x2
#define _SSP2CON2_PEN_POSITION                              0x2
#define _SSP2CON2_PEN_SIZE                                  0x1
#define _SSP2CON2_PEN_LENGTH                                0x1
#define _SSP2CON2_PEN_MASK                                  0x4
#define _SSP2CON2_RCEN_POSN                                 0x3
#define _SSP2CON2_RCEN_POSITION                             0x3
#define _SSP2CON2_RCEN_SIZE                                 0x1
#define _SSP2CON2_RCEN_LENGTH                               0x1
#define _SSP2CON2_RCEN_MASK                                 0x8
#define _SSP2CON2_ACKEN_POSN                                0x4
#define _SSP2CON2_ACKEN_POSITION                            0x4
#define _SSP2CON2_ACKEN_SIZE                                0x1
#define _SSP2CON2_ACKEN_LENGTH                              0x1
#define _SSP2CON2_ACKEN_MASK                                0x10
#define _SSP2CON2_ACKDT_POSN                                0x5
#define _SSP2CON2_ACKDT_POSITION                            0x5
#define _SSP2CON2_ACKDT_SIZE                                0x1
#define _SSP2CON2_ACKDT_LENGTH                              0x1
#define _SSP2CON2_ACKDT_MASK                                0x20
#define _SSP2CON2_ACKSTAT_POSN                              0x6
#define _SSP2CON2_ACKSTAT_POSITION                          0x6
#define _SSP2CON2_ACKSTAT_SIZE                              0x1
#define _SSP2CON2_ACKSTAT_LENGTH                            0x1
#define _SSP2CON2_ACKSTAT_MASK                              0x40
#define _SSP2CON2_GCEN_POSN                                 0x7
#define _SSP2CON2_GCEN_POSITION                             0x7
#define _SSP2CON2_GCEN_SIZE                                 0x1
#define _SSP2CON2_GCEN_LENGTH                               0x1
#define _SSP2CON2_GCEN_MASK                                 0x80
#define _SSP2CON2_ADMSK_POSN                                0x1
#define _SSP2CON2_ADMSK_POSITION                            0x1
#define _SSP2CON2_ADMSK_SIZE                                0x5
#define _SSP2CON2_ADMSK_LENGTH                              0x5
#define _SSP2CON2_ADMSK_MASK                                0x3E
#define _SSP2CON2_ADMSK1_POSN                               0x1
#define _SSP2CON2_ADMSK1_POSITION                           0x1
#define _SSP2CON2_ADMSK1_SIZE                               0x1
#define _SSP2CON2_ADMSK1_LENGTH                             0x1
#define _SSP2CON2_ADMSK1_MASK                               0x2
#define _SSP2CON2_ADMSK2_POSN                               0x2
#define _SSP2CON2_ADMSK2_POSITION                           0x2
#define _SSP2CON2_ADMSK2_SIZE                               0x1
#define _SSP2CON2_ADMSK2_LENGTH                             0x1
#define _SSP2CON2_ADMSK2_MASK                               0x4
#define _SSP2CON2_ADMSK3_POSN                               0x3
#define _SSP2CON2_ADMSK3_POSITION                           0x3
#define _SSP2CON2_ADMSK3_SIZE                               0x1
#define _SSP2CON2_ADMSK3_LENGTH                             0x1
#define _SSP2CON2_ADMSK3_MASK                               0x8
#define _SSP2CON2_ADMSK4_POSN                               0x4
#define _SSP2CON2_ADMSK4_POSITION                           0x4
#define _SSP2CON2_ADMSK4_SIZE                               0x1
#define _SSP2CON2_ADMSK4_LENGTH                             0x1
#define _SSP2CON2_ADMSK4_MASK                               0x10
#define _SSP2CON2_ADMSK5_POSN                               0x5
#define _SSP2CON2_ADMSK5_POSITION                           0x5
#define _SSP2CON2_ADMSK5_SIZE                               0x1
#define _SSP2CON2_ADMSK5_LENGTH                             0x1
#define _SSP2CON2_ADMSK5_MASK                               0x20
#define _SSP2CON2_SEN2_POSN                                 0x0
#define _SSP2CON2_SEN2_POSITION                             0x0
#define _SSP2CON2_SEN2_SIZE                                 0x1
#define _SSP2CON2_SEN2_LENGTH                               0x1
#define _SSP2CON2_SEN2_MASK                                 0x1
#define _SSP2CON2_ADMSK12_POSN                              0x1
#define _SSP2CON2_ADMSK12_POSITION                          0x1
#define _SSP2CON2_ADMSK12_SIZE                              0x1
#define _SSP2CON2_ADMSK12_LENGTH                            0x1
#define _SSP2CON2_ADMSK12_MASK                              0x2
#define _SSP2CON2_ADMSK22_POSN                              0x2
#define _SSP2CON2_ADMSK22_POSITION                          0x2
#define _SSP2CON2_ADMSK22_SIZE                              0x1
#define _SSP2CON2_ADMSK22_LENGTH                            0x1
#define _SSP2CON2_ADMSK22_MASK                              0x4
#define _SSP2CON2_ADMSK32_POSN                              0x3
#define _SSP2CON2_ADMSK32_POSITION                          0x3
#define _SSP2CON2_ADMSK32_SIZE                              0x1
#define _SSP2CON2_ADMSK32_LENGTH                            0x1
#define _SSP2CON2_ADMSK32_MASK                              0x8
#define _SSP2CON2_ACKEN2_POSN                               0x4
#define _SSP2CON2_ACKEN2_POSITION                           0x4
#define _SSP2CON2_ACKEN2_SIZE                               0x1
#define _SSP2CON2_ACKEN2_LENGTH                             0x1
#define _SSP2CON2_ACKEN2_MASK                               0x10
#define _SSP2CON2_ACKDT2_POSN                               0x5
#define _SSP2CON2_ACKDT2_POSITION                           0x5
#define _SSP2CON2_ACKDT2_SIZE                               0x1
#define _SSP2CON2_ACKDT2_LENGTH                             0x1
#define _SSP2CON2_ACKDT2_MASK                               0x20
#define _SSP2CON2_ACKSTAT2_POSN                             0x6
#define _SSP2CON2_ACKSTAT2_POSITION                         0x6
#define _SSP2CON2_ACKSTAT2_SIZE                             0x1
#define _SSP2CON2_ACKSTAT2_LENGTH                           0x1
#define _SSP2CON2_ACKSTAT2_MASK                             0x40
#define _SSP2CON2_GCEN2_POSN                                0x7
#define _SSP2CON2_GCEN2_POSITION                            0x7
#define _SSP2CON2_GCEN2_SIZE                                0x1
#define _SSP2CON2_GCEN2_LENGTH                              0x1
#define _SSP2CON2_GCEN2_MASK                                0x80
#define _SSP2CON2_RSEN2_POSN                                0x1
#define _SSP2CON2_RSEN2_POSITION                            0x1
#define _SSP2CON2_RSEN2_SIZE                                0x1
#define _SSP2CON2_RSEN2_LENGTH                              0x1
#define _SSP2CON2_RSEN2_MASK                                0x2
#define _SSP2CON2_PEN2_POSN                                 0x2
#define _SSP2CON2_PEN2_POSITION                             0x2
#define _SSP2CON2_PEN2_SIZE                                 0x1
#define _SSP2CON2_PEN2_LENGTH                               0x1
#define _SSP2CON2_PEN2_MASK                                 0x4
#define _SSP2CON2_RCEN2_POSN                                0x3
#define _SSP2CON2_RCEN2_POSITION                            0x3
#define _SSP2CON2_RCEN2_SIZE                                0x1
#define _SSP2CON2_RCEN2_LENGTH                              0x1
#define _SSP2CON2_RCEN2_MASK                                0x8
#define _SSP2CON2_ADMSK42_POSN                              0x4
#define _SSP2CON2_ADMSK42_POSITION                          0x4
#define _SSP2CON2_ADMSK42_SIZE                              0x1
#define _SSP2CON2_ADMSK42_LENGTH                            0x1
#define _SSP2CON2_ADMSK42_MASK                              0x10
#define _SSP2CON2_ADMSK52_POSN                              0x5
#define _SSP2CON2_ADMSK52_POSITION                          0x5
#define _SSP2CON2_ADMSK52_SIZE                              0x1
#define _SSP2CON2_ADMSK52_LENGTH                            0x1
#define _SSP2CON2_ADMSK52_MASK                              0x20

// Register: SSP2CON1
#define SSP2CON1 SSP2CON1
extern volatile unsigned char           SSP2CON1            __at(0xF19);
#ifndef _LIB_BUILD
asm("SSP2CON1 equ 0F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM02                 :1;
        unsigned SSPM12                 :1;
        unsigned SSPM22                 :1;
        unsigned SSPM32                 :1;
        unsigned CKP2                   :1;
        unsigned SSPEN2                 :1;
        unsigned SSPOV2                 :1;
        unsigned WCOL2                  :1;
    };
} SSP2CON1bits_t;
extern volatile SSP2CON1bits_t SSP2CON1bits __at(0xF19);
// bitfield macros
#define _SSP2CON1_SSPM_POSN                                 0x0
#define _SSP2CON1_SSPM_POSITION                             0x0
#define _SSP2CON1_SSPM_SIZE                                 0x4
#define _SSP2CON1_SSPM_LENGTH                               0x4
#define _SSP2CON1_SSPM_MASK                                 0xF
#define _SSP2CON1_CKP_POSN                                  0x4
#define _SSP2CON1_CKP_POSITION                              0x4
#define _SSP2CON1_CKP_SIZE                                  0x1
#define _SSP2CON1_CKP_LENGTH                                0x1
#define _SSP2CON1_CKP_MASK                                  0x10
#define _SSP2CON1_SSPEN_POSN                                0x5
#define _SSP2CON1_SSPEN_POSITION                            0x5
#define _SSP2CON1_SSPEN_SIZE                                0x1
#define _SSP2CON1_SSPEN_LENGTH                              0x1
#define _SSP2CON1_SSPEN_MASK                                0x20
#define _SSP2CON1_SSPOV_POSN                                0x6
#define _SSP2CON1_SSPOV_POSITION                            0x6
#define _SSP2CON1_SSPOV_SIZE                                0x1
#define _SSP2CON1_SSPOV_LENGTH                              0x1
#define _SSP2CON1_SSPOV_MASK                                0x40
#define _SSP2CON1_WCOL_POSN                                 0x7
#define _SSP2CON1_WCOL_POSITION                             0x7
#define _SSP2CON1_WCOL_SIZE                                 0x1
#define _SSP2CON1_WCOL_LENGTH                               0x1
#define _SSP2CON1_WCOL_MASK                                 0x80
#define _SSP2CON1_SSPM0_POSN                                0x0
#define _SSP2CON1_SSPM0_POSITION                            0x0
#define _SSP2CON1_SSPM0_SIZE                                0x1
#define _SSP2CON1_SSPM0_LENGTH                              0x1
#define _SSP2CON1_SSPM0_MASK                                0x1
#define _SSP2CON1_SSPM1_POSN                                0x1
#define _SSP2CON1_SSPM1_POSITION                            0x1
#define _SSP2CON1_SSPM1_SIZE                                0x1
#define _SSP2CON1_SSPM1_LENGTH                              0x1
#define _SSP2CON1_SSPM1_MASK                                0x2
#define _SSP2CON1_SSPM2_POSN                                0x2
#define _SSP2CON1_SSPM2_POSITION                            0x2
#define _SSP2CON1_SSPM2_SIZE                                0x1
#define _SSP2CON1_SSPM2_LENGTH                              0x1
#define _SSP2CON1_SSPM2_MASK                                0x4
#define _SSP2CON1_SSPM3_POSN                                0x3
#define _SSP2CON1_SSPM3_POSITION                            0x3
#define _SSP2CON1_SSPM3_SIZE                                0x1
#define _SSP2CON1_SSPM3_LENGTH                              0x1
#define _SSP2CON1_SSPM3_MASK                                0x8
#define _SSP2CON1_SSPM02_POSN                               0x0
#define _SSP2CON1_SSPM02_POSITION                           0x0
#define _SSP2CON1_SSPM02_SIZE                               0x1
#define _SSP2CON1_SSPM02_LENGTH                             0x1
#define _SSP2CON1_SSPM02_MASK                               0x1
#define _SSP2CON1_SSPM12_POSN                               0x1
#define _SSP2CON1_SSPM12_POSITION                           0x1
#define _SSP2CON1_SSPM12_SIZE                               0x1
#define _SSP2CON1_SSPM12_LENGTH                             0x1
#define _SSP2CON1_SSPM12_MASK                               0x2
#define _SSP2CON1_SSPM22_POSN                               0x2
#define _SSP2CON1_SSPM22_POSITION                           0x2
#define _SSP2CON1_SSPM22_SIZE                               0x1
#define _SSP2CON1_SSPM22_LENGTH                             0x1
#define _SSP2CON1_SSPM22_MASK                               0x4
#define _SSP2CON1_SSPM32_POSN                               0x3
#define _SSP2CON1_SSPM32_POSITION                           0x3
#define _SSP2CON1_SSPM32_SIZE                               0x1
#define _SSP2CON1_SSPM32_LENGTH                             0x1
#define _SSP2CON1_SSPM32_MASK                               0x8
#define _SSP2CON1_CKP2_POSN                                 0x4
#define _SSP2CON1_CKP2_POSITION                             0x4
#define _SSP2CON1_CKP2_SIZE                                 0x1
#define _SSP2CON1_CKP2_LENGTH                               0x1
#define _SSP2CON1_CKP2_MASK                                 0x10
#define _SSP2CON1_SSPEN2_POSN                               0x5
#define _SSP2CON1_SSPEN2_POSITION                           0x5
#define _SSP2CON1_SSPEN2_SIZE                               0x1
#define _SSP2CON1_SSPEN2_LENGTH                             0x1
#define _SSP2CON1_SSPEN2_MASK                               0x20
#define _SSP2CON1_SSPOV2_POSN                               0x6
#define _SSP2CON1_SSPOV2_POSITION                           0x6
#define _SSP2CON1_SSPOV2_SIZE                               0x1
#define _SSP2CON1_SSPOV2_LENGTH                             0x1
#define _SSP2CON1_SSPOV2_MASK                               0x40
#define _SSP2CON1_WCOL2_POSN                                0x7
#define _SSP2CON1_WCOL2_POSITION                            0x7
#define _SSP2CON1_WCOL2_SIZE                                0x1
#define _SSP2CON1_WCOL2_LENGTH                              0x1
#define _SSP2CON1_WCOL2_MASK                                0x80

// Register: SSP2STAT
#define SSP2STAT SSP2STAT
extern volatile unsigned char           SSP2STAT            __at(0xF1A);
#ifndef _LIB_BUILD
asm("SSP2STAT equ 0F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned R_NOT_W                :1;
    };
    struct {
        unsigned                        :5;
        unsigned D_NOT_A                :1;
    };
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_ADDRESS            :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF2                    :1;
        unsigned UA2                    :1;
        unsigned I2C_READ2              :1;
        unsigned I2C_START2             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA2                    :1;
        unsigned CKE2                   :1;
        unsigned SMP2                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE2            :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS2          :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW2                    :1;
        unsigned START2                 :1;
        unsigned STOP2                  :1;
        unsigned D_A2                   :1;
    };
    struct {
        unsigned                        :5;
        unsigned D_NOT_A2               :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W2                   :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D_nA2                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_NOT_W2               :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW2                  :1;
        unsigned                        :2;
        unsigned I2C_DAT2               :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_W2                 :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_A2                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_WRITE2             :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_ADDRESS2           :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE2                :1;
        unsigned                        :2;
        unsigned nADDRESS2              :1;
    };
    struct {
        unsigned                        :2;
        unsigned R                      :1;
        unsigned                        :2;
        unsigned D                      :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned                        :2;
        unsigned DA                     :1;
    };
} SSP2STATbits_t;
extern volatile SSP2STATbits_t SSP2STATbits __at(0xF1A);
// bitfield macros
#define _SSP2STAT_R_NOT_W_POSN                              0x2
#define _SSP2STAT_R_NOT_W_POSITION                          0x2
#define _SSP2STAT_R_NOT_W_SIZE                              0x1
#define _SSP2STAT_R_NOT_W_LENGTH                            0x1
#define _SSP2STAT_R_NOT_W_MASK                              0x4
#define _SSP2STAT_D_NOT_A_POSN                              0x5
#define _SSP2STAT_D_NOT_A_POSITION                          0x5
#define _SSP2STAT_D_NOT_A_SIZE                              0x1
#define _SSP2STAT_D_NOT_A_LENGTH                            0x1
#define _SSP2STAT_D_NOT_A_MASK                              0x20
#define _SSP2STAT_BF_POSN                                   0x0
#define _SSP2STAT_BF_POSITION                               0x0
#define _SSP2STAT_BF_SIZE                                   0x1
#define _SSP2STAT_BF_LENGTH                                 0x1
#define _SSP2STAT_BF_MASK                                   0x1
#define _SSP2STAT_UA_POSN                                   0x1
#define _SSP2STAT_UA_POSITION                               0x1
#define _SSP2STAT_UA_SIZE                                   0x1
#define _SSP2STAT_UA_LENGTH                                 0x1
#define _SSP2STAT_UA_MASK                                   0x2
#define _SSP2STAT_R_nW_POSN                                 0x2
#define _SSP2STAT_R_nW_POSITION                             0x2
#define _SSP2STAT_R_nW_SIZE                                 0x1
#define _SSP2STAT_R_nW_LENGTH                               0x1
#define _SSP2STAT_R_nW_MASK                                 0x4
#define _SSP2STAT_S_POSN                                    0x3
#define _SSP2STAT_S_POSITION                                0x3
#define _SSP2STAT_S_SIZE                                    0x1
#define _SSP2STAT_S_LENGTH                                  0x1
#define _SSP2STAT_S_MASK                                    0x8
#define _SSP2STAT_P_POSN                                    0x4
#define _SSP2STAT_P_POSITION                                0x4
#define _SSP2STAT_P_SIZE                                    0x1
#define _SSP2STAT_P_LENGTH                                  0x1
#define _SSP2STAT_P_MASK                                    0x10
#define _SSP2STAT_D_nA_POSN                                 0x5
#define _SSP2STAT_D_nA_POSITION                             0x5
#define _SSP2STAT_D_nA_SIZE                                 0x1
#define _SSP2STAT_D_nA_LENGTH                               0x1
#define _SSP2STAT_D_nA_MASK                                 0x20
#define _SSP2STAT_CKE_POSN                                  0x6
#define _SSP2STAT_CKE_POSITION                              0x6
#define _SSP2STAT_CKE_SIZE                                  0x1
#define _SSP2STAT_CKE_LENGTH                                0x1
#define _SSP2STAT_CKE_MASK                                  0x40
#define _SSP2STAT_SMP_POSN                                  0x7
#define _SSP2STAT_SMP_POSITION                              0x7
#define _SSP2STAT_SMP_SIZE                                  0x1
#define _SSP2STAT_SMP_LENGTH                                0x1
#define _SSP2STAT_SMP_MASK                                  0x80
#define _SSP2STAT_R_W_POSN                                  0x2
#define _SSP2STAT_R_W_POSITION                              0x2
#define _SSP2STAT_R_W_SIZE                                  0x1
#define _SSP2STAT_R_W_LENGTH                                0x1
#define _SSP2STAT_R_W_MASK                                  0x4
#define _SSP2STAT_D_A_POSN                                  0x5
#define _SSP2STAT_D_A_POSITION                              0x5
#define _SSP2STAT_D_A_SIZE                                  0x1
#define _SSP2STAT_D_A_LENGTH                                0x1
#define _SSP2STAT_D_A_MASK                                  0x20
#define _SSP2STAT_nW_POSN                                   0x2
#define _SSP2STAT_nW_POSITION                               0x2
#define _SSP2STAT_nW_SIZE                                   0x1
#define _SSP2STAT_nW_LENGTH                                 0x1
#define _SSP2STAT_nW_MASK                                   0x4
#define _SSP2STAT_nA_POSN                                   0x5
#define _SSP2STAT_nA_POSITION                               0x5
#define _SSP2STAT_nA_SIZE                                   0x1
#define _SSP2STAT_nA_LENGTH                                 0x1
#define _SSP2STAT_nA_MASK                                   0x20
#define _SSP2STAT_NOT_WRITE_POSN                            0x2
#define _SSP2STAT_NOT_WRITE_POSITION                        0x2
#define _SSP2STAT_NOT_WRITE_SIZE                            0x1
#define _SSP2STAT_NOT_WRITE_LENGTH                          0x1
#define _SSP2STAT_NOT_WRITE_MASK                            0x4
#define _SSP2STAT_NOT_ADDRESS_POSN                          0x5
#define _SSP2STAT_NOT_ADDRESS_POSITION                      0x5
#define _SSP2STAT_NOT_ADDRESS_SIZE                          0x1
#define _SSP2STAT_NOT_ADDRESS_LENGTH                        0x1
#define _SSP2STAT_NOT_ADDRESS_MASK                          0x20
#define _SSP2STAT_nWRITE_POSN                               0x2
#define _SSP2STAT_nWRITE_POSITION                           0x2
#define _SSP2STAT_nWRITE_SIZE                               0x1
#define _SSP2STAT_nWRITE_LENGTH                             0x1
#define _SSP2STAT_nWRITE_MASK                               0x4
#define _SSP2STAT_nADDRESS_POSN                             0x5
#define _SSP2STAT_nADDRESS_POSITION                         0x5
#define _SSP2STAT_nADDRESS_SIZE                             0x1
#define _SSP2STAT_nADDRESS_LENGTH                           0x1
#define _SSP2STAT_nADDRESS_MASK                             0x20
#define _SSP2STAT_READ_WRITE_POSN                           0x2
#define _SSP2STAT_READ_WRITE_POSITION                       0x2
#define _SSP2STAT_READ_WRITE_SIZE                           0x1
#define _SSP2STAT_READ_WRITE_LENGTH                         0x1
#define _SSP2STAT_READ_WRITE_MASK                           0x4
#define _SSP2STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP2STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP2STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP2STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP2STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP2STAT_I2C_READ_POSN                             0x2
#define _SSP2STAT_I2C_READ_POSITION                         0x2
#define _SSP2STAT_I2C_READ_SIZE                             0x1
#define _SSP2STAT_I2C_READ_LENGTH                           0x1
#define _SSP2STAT_I2C_READ_MASK                             0x4
#define _SSP2STAT_I2C_START_POSN                            0x3
#define _SSP2STAT_I2C_START_POSITION                        0x3
#define _SSP2STAT_I2C_START_SIZE                            0x1
#define _SSP2STAT_I2C_START_LENGTH                          0x1
#define _SSP2STAT_I2C_START_MASK                            0x8
#define _SSP2STAT_I2C_STOP_POSN                             0x4
#define _SSP2STAT_I2C_STOP_POSITION                         0x4
#define _SSP2STAT_I2C_STOP_SIZE                             0x1
#define _SSP2STAT_I2C_STOP_LENGTH                           0x1
#define _SSP2STAT_I2C_STOP_MASK                             0x10
#define _SSP2STAT_I2C_DAT_POSN                              0x5
#define _SSP2STAT_I2C_DAT_POSITION                          0x5
#define _SSP2STAT_I2C_DAT_SIZE                              0x1
#define _SSP2STAT_I2C_DAT_LENGTH                            0x1
#define _SSP2STAT_I2C_DAT_MASK                              0x20
#define _SSP2STAT_BF2_POSN                                  0x0
#define _SSP2STAT_BF2_POSITION                              0x0
#define _SSP2STAT_BF2_SIZE                                  0x1
#define _SSP2STAT_BF2_LENGTH                                0x1
#define _SSP2STAT_BF2_MASK                                  0x1
#define _SSP2STAT_UA2_POSN                                  0x1
#define _SSP2STAT_UA2_POSITION                              0x1
#define _SSP2STAT_UA2_SIZE                                  0x1
#define _SSP2STAT_UA2_LENGTH                                0x1
#define _SSP2STAT_UA2_MASK                                  0x2
#define _SSP2STAT_I2C_READ2_POSN                            0x2
#define _SSP2STAT_I2C_READ2_POSITION                        0x2
#define _SSP2STAT_I2C_READ2_SIZE                            0x1
#define _SSP2STAT_I2C_READ2_LENGTH                          0x1
#define _SSP2STAT_I2C_READ2_MASK                            0x4
#define _SSP2STAT_I2C_START2_POSN                           0x3
#define _SSP2STAT_I2C_START2_POSITION                       0x3
#define _SSP2STAT_I2C_START2_SIZE                           0x1
#define _SSP2STAT_I2C_START2_LENGTH                         0x1
#define _SSP2STAT_I2C_START2_MASK                           0x8
#define _SSP2STAT_I2C_STOP2_POSN                            0x4
#define _SSP2STAT_I2C_STOP2_POSITION                        0x4
#define _SSP2STAT_I2C_STOP2_SIZE                            0x1
#define _SSP2STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP2STAT_I2C_STOP2_MASK                            0x10
#define _SSP2STAT_DA2_POSN                                  0x5
#define _SSP2STAT_DA2_POSITION                              0x5
#define _SSP2STAT_DA2_SIZE                                  0x1
#define _SSP2STAT_DA2_LENGTH                                0x1
#define _SSP2STAT_DA2_MASK                                  0x20
#define _SSP2STAT_CKE2_POSN                                 0x6
#define _SSP2STAT_CKE2_POSITION                             0x6
#define _SSP2STAT_CKE2_SIZE                                 0x1
#define _SSP2STAT_CKE2_LENGTH                               0x1
#define _SSP2STAT_CKE2_MASK                                 0x40
#define _SSP2STAT_SMP2_POSN                                 0x7
#define _SSP2STAT_SMP2_POSITION                             0x7
#define _SSP2STAT_SMP2_SIZE                                 0x1
#define _SSP2STAT_SMP2_LENGTH                               0x1
#define _SSP2STAT_SMP2_MASK                                 0x80
#define _SSP2STAT_READ_WRITE2_POSN                          0x2
#define _SSP2STAT_READ_WRITE2_POSITION                      0x2
#define _SSP2STAT_READ_WRITE2_SIZE                          0x1
#define _SSP2STAT_READ_WRITE2_LENGTH                        0x1
#define _SSP2STAT_READ_WRITE2_MASK                          0x4
#define _SSP2STAT_S2_POSN                                   0x3
#define _SSP2STAT_S2_POSITION                               0x3
#define _SSP2STAT_S2_SIZE                                   0x1
#define _SSP2STAT_S2_LENGTH                                 0x1
#define _SSP2STAT_S2_MASK                                   0x8
#define _SSP2STAT_P2_POSN                                   0x4
#define _SSP2STAT_P2_POSITION                               0x4
#define _SSP2STAT_P2_SIZE                                   0x1
#define _SSP2STAT_P2_LENGTH                                 0x1
#define _SSP2STAT_P2_MASK                                   0x10
#define _SSP2STAT_DATA_ADDRESS2_POSN                        0x5
#define _SSP2STAT_DATA_ADDRESS2_POSITION                    0x5
#define _SSP2STAT_DATA_ADDRESS2_SIZE                        0x1
#define _SSP2STAT_DATA_ADDRESS2_LENGTH                      0x1
#define _SSP2STAT_DATA_ADDRESS2_MASK                        0x20
#define _SSP2STAT_RW2_POSN                                  0x2
#define _SSP2STAT_RW2_POSITION                              0x2
#define _SSP2STAT_RW2_SIZE                                  0x1
#define _SSP2STAT_RW2_LENGTH                                0x1
#define _SSP2STAT_RW2_MASK                                  0x4
#define _SSP2STAT_START2_POSN                               0x3
#define _SSP2STAT_START2_POSITION                           0x3
#define _SSP2STAT_START2_SIZE                               0x1
#define _SSP2STAT_START2_LENGTH                             0x1
#define _SSP2STAT_START2_MASK                               0x8
#define _SSP2STAT_STOP2_POSN                                0x4
#define _SSP2STAT_STOP2_POSITION                            0x4
#define _SSP2STAT_STOP2_SIZE                                0x1
#define _SSP2STAT_STOP2_LENGTH                              0x1
#define _SSP2STAT_STOP2_MASK                                0x10
#define _SSP2STAT_D_A2_POSN                                 0x5
#define _SSP2STAT_D_A2_POSITION                             0x5
#define _SSP2STAT_D_A2_SIZE                                 0x1
#define _SSP2STAT_D_A2_LENGTH                               0x1
#define _SSP2STAT_D_A2_MASK                                 0x20
#define _SSP2STAT_D_NOT_A2_POSN                             0x5
#define _SSP2STAT_D_NOT_A2_POSITION                         0x5
#define _SSP2STAT_D_NOT_A2_SIZE                             0x1
#define _SSP2STAT_D_NOT_A2_LENGTH                           0x1
#define _SSP2STAT_D_NOT_A2_MASK                             0x20
#define _SSP2STAT_R_W2_POSN                                 0x2
#define _SSP2STAT_R_W2_POSITION                             0x2
#define _SSP2STAT_R_W2_SIZE                                 0x1
#define _SSP2STAT_R_W2_LENGTH                               0x1
#define _SSP2STAT_R_W2_MASK                                 0x4
#define _SSP2STAT_START_POSN                                0x3
#define _SSP2STAT_START_POSITION                            0x3
#define _SSP2STAT_START_SIZE                                0x1
#define _SSP2STAT_START_LENGTH                              0x1
#define _SSP2STAT_START_MASK                                0x8
#define _SSP2STAT_STOP_POSN                                 0x4
#define _SSP2STAT_STOP_POSITION                             0x4
#define _SSP2STAT_STOP_SIZE                                 0x1
#define _SSP2STAT_STOP_LENGTH                               0x1
#define _SSP2STAT_STOP_MASK                                 0x10
#define _SSP2STAT_D_nA2_POSN                                0x5
#define _SSP2STAT_D_nA2_POSITION                            0x5
#define _SSP2STAT_D_nA2_SIZE                                0x1
#define _SSP2STAT_D_nA2_LENGTH                              0x1
#define _SSP2STAT_D_nA2_MASK                                0x20
#define _SSP2STAT_R_NOT_W2_POSN                             0x2
#define _SSP2STAT_R_NOT_W2_POSITION                         0x2
#define _SSP2STAT_R_NOT_W2_SIZE                             0x1
#define _SSP2STAT_R_NOT_W2_LENGTH                           0x1
#define _SSP2STAT_R_NOT_W2_MASK                             0x4
#define _SSP2STAT_R_nW2_POSN                                0x2
#define _SSP2STAT_R_nW2_POSITION                            0x2
#define _SSP2STAT_R_nW2_SIZE                                0x1
#define _SSP2STAT_R_nW2_LENGTH                              0x1
#define _SSP2STAT_R_nW2_MASK                                0x4
#define _SSP2STAT_I2C_DAT2_POSN                             0x5
#define _SSP2STAT_I2C_DAT2_POSITION                         0x5
#define _SSP2STAT_I2C_DAT2_SIZE                             0x1
#define _SSP2STAT_I2C_DAT2_LENGTH                           0x1
#define _SSP2STAT_I2C_DAT2_MASK                             0x20
#define _SSP2STAT_NOT_W2_POSN                               0x2
#define _SSP2STAT_NOT_W2_POSITION                           0x2
#define _SSP2STAT_NOT_W2_SIZE                               0x1
#define _SSP2STAT_NOT_W2_LENGTH                             0x1
#define _SSP2STAT_NOT_W2_MASK                               0x4
#define _SSP2STAT_NOT_A2_POSN                               0x5
#define _SSP2STAT_NOT_A2_POSITION                           0x5
#define _SSP2STAT_NOT_A2_SIZE                               0x1
#define _SSP2STAT_NOT_A2_LENGTH                             0x1
#define _SSP2STAT_NOT_A2_MASK                               0x20
#define _SSP2STAT_nW2_POSN                                  0x2
#define _SSP2STAT_nW2_POSITION                              0x2
#define _SSP2STAT_nW2_SIZE                                  0x1
#define _SSP2STAT_nW2_LENGTH                                0x1
#define _SSP2STAT_nW2_MASK                                  0x4
#define _SSP2STAT_nA2_POSN                                  0x5
#define _SSP2STAT_nA2_POSITION                              0x5
#define _SSP2STAT_nA2_SIZE                                  0x1
#define _SSP2STAT_nA2_LENGTH                                0x1
#define _SSP2STAT_nA2_MASK                                  0x20
#define _SSP2STAT_NOT_WRITE2_POSN                           0x2
#define _SSP2STAT_NOT_WRITE2_POSITION                       0x2
#define _SSP2STAT_NOT_WRITE2_SIZE                           0x1
#define _SSP2STAT_NOT_WRITE2_LENGTH                         0x1
#define _SSP2STAT_NOT_WRITE2_MASK                           0x4
#define _SSP2STAT_NOT_ADDRESS2_POSN                         0x5
#define _SSP2STAT_NOT_ADDRESS2_POSITION                     0x5
#define _SSP2STAT_NOT_ADDRESS2_SIZE                         0x1
#define _SSP2STAT_NOT_ADDRESS2_LENGTH                       0x1
#define _SSP2STAT_NOT_ADDRESS2_MASK                         0x20
#define _SSP2STAT_nWRITE2_POSN                              0x2
#define _SSP2STAT_nWRITE2_POSITION                          0x2
#define _SSP2STAT_nWRITE2_SIZE                              0x1
#define _SSP2STAT_nWRITE2_LENGTH                            0x1
#define _SSP2STAT_nWRITE2_MASK                              0x4
#define _SSP2STAT_nADDRESS2_POSN                            0x5
#define _SSP2STAT_nADDRESS2_POSITION                        0x5
#define _SSP2STAT_nADDRESS2_SIZE                            0x1
#define _SSP2STAT_nADDRESS2_LENGTH                          0x1
#define _SSP2STAT_nADDRESS2_MASK                            0x20
#define _SSP2STAT_R_POSN                                    0x2
#define _SSP2STAT_R_POSITION                                0x2
#define _SSP2STAT_R_SIZE                                    0x1
#define _SSP2STAT_R_LENGTH                                  0x1
#define _SSP2STAT_R_MASK                                    0x4
#define _SSP2STAT_D_POSN                                    0x5
#define _SSP2STAT_D_POSITION                                0x5
#define _SSP2STAT_D_SIZE                                    0x1
#define _SSP2STAT_D_LENGTH                                  0x1
#define _SSP2STAT_D_MASK                                    0x20
#define _SSP2STAT_RW_POSN                                   0x2
#define _SSP2STAT_RW_POSITION                               0x2
#define _SSP2STAT_RW_SIZE                                   0x1
#define _SSP2STAT_RW_LENGTH                                 0x1
#define _SSP2STAT_RW_MASK                                   0x4
#define _SSP2STAT_DA_POSN                                   0x5
#define _SSP2STAT_DA_POSITION                               0x5
#define _SSP2STAT_DA_SIZE                                   0x1
#define _SSP2STAT_DA_LENGTH                                 0x1
#define _SSP2STAT_DA_MASK                                   0x20

// Register: PSTR3CON
#define PSTR3CON PSTR3CON
extern volatile unsigned char           PSTR3CON            __at(0xF1B);
#ifndef _LIB_BUILD
asm("PSTR3CON equ 0F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned STRSYNC                :1;
        unsigned                        :1;
        unsigned CMPL                   :2;
    };
    struct {
        unsigned                        :6;
        unsigned CMPL0                  :1;
        unsigned CMPL1                  :1;
    };
    struct {
        unsigned STRA3                  :1;
        unsigned STRB3                  :1;
        unsigned STRC3                  :1;
        unsigned STRD3                  :1;
        unsigned STRSYNC3               :1;
        unsigned                        :1;
        unsigned CMPL03                 :1;
        unsigned CMPL13                 :1;
    };
    struct {
        unsigned P3DC02                 :1;
        unsigned P3DC12                 :1;
        unsigned P3DC22                 :1;
        unsigned P3DC32                 :1;
        unsigned P3DC42                 :1;
        unsigned                        :1;
        unsigned P3DC62                 :1;
    };
    struct {
        unsigned P3DC0CON               :1;
        unsigned P3DC1CON               :1;
        unsigned P3DC2CON               :1;
        unsigned P3DC3CON               :1;
        unsigned P3DC4CON               :1;
        unsigned                        :1;
        unsigned P3DC6CON               :1;
    };
} PSTR3CONbits_t;
extern volatile PSTR3CONbits_t PSTR3CONbits __at(0xF1B);
// bitfield macros
#define _PSTR3CON_STRA_POSN                                 0x0
#define _PSTR3CON_STRA_POSITION                             0x0
#define _PSTR3CON_STRA_SIZE                                 0x1
#define _PSTR3CON_STRA_LENGTH                               0x1
#define _PSTR3CON_STRA_MASK                                 0x1
#define _PSTR3CON_STRB_POSN                                 0x1
#define _PSTR3CON_STRB_POSITION                             0x1
#define _PSTR3CON_STRB_SIZE                                 0x1
#define _PSTR3CON_STRB_LENGTH                               0x1
#define _PSTR3CON_STRB_MASK                                 0x2
#define _PSTR3CON_STRC_POSN                                 0x2
#define _PSTR3CON_STRC_POSITION                             0x2
#define _PSTR3CON_STRC_SIZE                                 0x1
#define _PSTR3CON_STRC_LENGTH                               0x1
#define _PSTR3CON_STRC_MASK                                 0x4
#define _PSTR3CON_STRD_POSN                                 0x3
#define _PSTR3CON_STRD_POSITION                             0x3
#define _PSTR3CON_STRD_SIZE                                 0x1
#define _PSTR3CON_STRD_LENGTH                               0x1
#define _PSTR3CON_STRD_MASK                                 0x8
#define _PSTR3CON_STRSYNC_POSN                              0x4
#define _PSTR3CON_STRSYNC_POSITION                          0x4
#define _PSTR3CON_STRSYNC_SIZE                              0x1
#define _PSTR3CON_STRSYNC_LENGTH                            0x1
#define _PSTR3CON_STRSYNC_MASK                              0x10
#define _PSTR3CON_CMPL_POSN                                 0x6
#define _PSTR3CON_CMPL_POSITION                             0x6
#define _PSTR3CON_CMPL_SIZE                                 0x2
#define _PSTR3CON_CMPL_LENGTH                               0x2
#define _PSTR3CON_CMPL_MASK                                 0xC0
#define _PSTR3CON_CMPL0_POSN                                0x6
#define _PSTR3CON_CMPL0_POSITION                            0x6
#define _PSTR3CON_CMPL0_SIZE                                0x1
#define _PSTR3CON_CMPL0_LENGTH                              0x1
#define _PSTR3CON_CMPL0_MASK                                0x40
#define _PSTR3CON_CMPL1_POSN                                0x7
#define _PSTR3CON_CMPL1_POSITION                            0x7
#define _PSTR3CON_CMPL1_SIZE                                0x1
#define _PSTR3CON_CMPL1_LENGTH                              0x1
#define _PSTR3CON_CMPL1_MASK                                0x80
#define _PSTR3CON_STRA3_POSN                                0x0
#define _PSTR3CON_STRA3_POSITION                            0x0
#define _PSTR3CON_STRA3_SIZE                                0x1
#define _PSTR3CON_STRA3_LENGTH                              0x1
#define _PSTR3CON_STRA3_MASK                                0x1
#define _PSTR3CON_STRB3_POSN                                0x1
#define _PSTR3CON_STRB3_POSITION                            0x1
#define _PSTR3CON_STRB3_SIZE                                0x1
#define _PSTR3CON_STRB3_LENGTH                              0x1
#define _PSTR3CON_STRB3_MASK                                0x2
#define _PSTR3CON_STRC3_POSN                                0x2
#define _PSTR3CON_STRC3_POSITION                            0x2
#define _PSTR3CON_STRC3_SIZE                                0x1
#define _PSTR3CON_STRC3_LENGTH                              0x1
#define _PSTR3CON_STRC3_MASK                                0x4
#define _PSTR3CON_STRD3_POSN                                0x3
#define _PSTR3CON_STRD3_POSITION                            0x3
#define _PSTR3CON_STRD3_SIZE                                0x1
#define _PSTR3CON_STRD3_LENGTH                              0x1
#define _PSTR3CON_STRD3_MASK                                0x8
#define _PSTR3CON_STRSYNC3_POSN                             0x4
#define _PSTR3CON_STRSYNC3_POSITION                         0x4
#define _PSTR3CON_STRSYNC3_SIZE                             0x1
#define _PSTR3CON_STRSYNC3_LENGTH                           0x1
#define _PSTR3CON_STRSYNC3_MASK                             0x10
#define _PSTR3CON_CMPL03_POSN                               0x6
#define _PSTR3CON_CMPL03_POSITION                           0x6
#define _PSTR3CON_CMPL03_SIZE                               0x1
#define _PSTR3CON_CMPL03_LENGTH                             0x1
#define _PSTR3CON_CMPL03_MASK                               0x40
#define _PSTR3CON_CMPL13_POSN                               0x7
#define _PSTR3CON_CMPL13_POSITION                           0x7
#define _PSTR3CON_CMPL13_SIZE                               0x1
#define _PSTR3CON_CMPL13_LENGTH                             0x1
#define _PSTR3CON_CMPL13_MASK                               0x80
#define _PSTR3CON_P3DC02_POSN                               0x0
#define _PSTR3CON_P3DC02_POSITION                           0x0
#define _PSTR3CON_P3DC02_SIZE                               0x1
#define _PSTR3CON_P3DC02_LENGTH                             0x1
#define _PSTR3CON_P3DC02_MASK                               0x1
#define _PSTR3CON_P3DC12_POSN                               0x1
#define _PSTR3CON_P3DC12_POSITION                           0x1
#define _PSTR3CON_P3DC12_SIZE                               0x1
#define _PSTR3CON_P3DC12_LENGTH                             0x1
#define _PSTR3CON_P3DC12_MASK                               0x2
#define _PSTR3CON_P3DC22_POSN                               0x2
#define _PSTR3CON_P3DC22_POSITION                           0x2
#define _PSTR3CON_P3DC22_SIZE                               0x1
#define _PSTR3CON_P3DC22_LENGTH                             0x1
#define _PSTR3CON_P3DC22_MASK                               0x4
#define _PSTR3CON_P3DC32_POSN                               0x3
#define _PSTR3CON_P3DC32_POSITION                           0x3
#define _PSTR3CON_P3DC32_SIZE                               0x1
#define _PSTR3CON_P3DC32_LENGTH                             0x1
#define _PSTR3CON_P3DC32_MASK                               0x8
#define _PSTR3CON_P3DC42_POSN                               0x4
#define _PSTR3CON_P3DC42_POSITION                           0x4
#define _PSTR3CON_P3DC42_SIZE                               0x1
#define _PSTR3CON_P3DC42_LENGTH                             0x1
#define _PSTR3CON_P3DC42_MASK                               0x10
#define _PSTR3CON_P3DC62_POSN                               0x6
#define _PSTR3CON_P3DC62_POSITION                           0x6
#define _PSTR3CON_P3DC62_SIZE                               0x1
#define _PSTR3CON_P3DC62_LENGTH                             0x1
#define _PSTR3CON_P3DC62_MASK                               0x40
#define _PSTR3CON_P3DC0CON_POSN                             0x0
#define _PSTR3CON_P3DC0CON_POSITION                         0x0
#define _PSTR3CON_P3DC0CON_SIZE                             0x1
#define _PSTR3CON_P3DC0CON_LENGTH                           0x1
#define _PSTR3CON_P3DC0CON_MASK                             0x1
#define _PSTR3CON_P3DC1CON_POSN                             0x1
#define _PSTR3CON_P3DC1CON_POSITION                         0x1
#define _PSTR3CON_P3DC1CON_SIZE                             0x1
#define _PSTR3CON_P3DC1CON_LENGTH                           0x1
#define _PSTR3CON_P3DC1CON_MASK                             0x2
#define _PSTR3CON_P3DC2CON_POSN                             0x2
#define _PSTR3CON_P3DC2CON_POSITION                         0x2
#define _PSTR3CON_P3DC2CON_SIZE                             0x1
#define _PSTR3CON_P3DC2CON_LENGTH                           0x1
#define _PSTR3CON_P3DC2CON_MASK                             0x4
#define _PSTR3CON_P3DC3CON_POSN                             0x3
#define _PSTR3CON_P3DC3CON_POSITION                         0x3
#define _PSTR3CON_P3DC3CON_SIZE                             0x1
#define _PSTR3CON_P3DC3CON_LENGTH                           0x1
#define _PSTR3CON_P3DC3CON_MASK                             0x8
#define _PSTR3CON_P3DC4CON_POSN                             0x4
#define _PSTR3CON_P3DC4CON_POSITION                         0x4
#define _PSTR3CON_P3DC4CON_SIZE                             0x1
#define _PSTR3CON_P3DC4CON_LENGTH                           0x1
#define _PSTR3CON_P3DC4CON_MASK                             0x10
#define _PSTR3CON_P3DC6CON_POSN                             0x6
#define _PSTR3CON_P3DC6CON_POSITION                         0x6
#define _PSTR3CON_P3DC6CON_SIZE                             0x1
#define _PSTR3CON_P3DC6CON_LENGTH                           0x1
#define _PSTR3CON_P3DC6CON_MASK                             0x40

// Register: PSTR2CON
#define PSTR2CON PSTR2CON
extern volatile unsigned char           PSTR2CON            __at(0xF1C);
#ifndef _LIB_BUILD
asm("PSTR2CON equ 0F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned STRSYNC                :1;
        unsigned                        :1;
        unsigned CMPL                   :2;
    };
    struct {
        unsigned                        :6;
        unsigned CMPL0                  :1;
        unsigned CMPL1                  :1;
    };
    struct {
        unsigned STRA2                  :1;
        unsigned STRB2                  :1;
        unsigned STRC2                  :1;
        unsigned STRD2                  :1;
        unsigned STRSYNC2               :1;
        unsigned                        :1;
        unsigned CMPL02                 :1;
        unsigned CMPL12                 :1;
    };
    struct {
        unsigned P2DC02                 :1;
        unsigned P2DC12                 :1;
        unsigned P2DC22                 :1;
        unsigned P2DC32                 :1;
        unsigned P2DC42                 :1;
        unsigned                        :1;
        unsigned P2DC62                 :1;
    };
    struct {
        unsigned P2DC0CON               :1;
        unsigned P2DC1CON               :1;
        unsigned P2DC2CON               :1;
        unsigned P2DC3CON               :1;
        unsigned P2DC4CON               :1;
        unsigned                        :1;
        unsigned P2DC6CON               :1;
    };
} PSTR2CONbits_t;
extern volatile PSTR2CONbits_t PSTR2CONbits __at(0xF1C);
// bitfield macros
#define _PSTR2CON_STRA_POSN                                 0x0
#define _PSTR2CON_STRA_POSITION                             0x0
#define _PSTR2CON_STRA_SIZE                                 0x1
#define _PSTR2CON_STRA_LENGTH                               0x1
#define _PSTR2CON_STRA_MASK                                 0x1
#define _PSTR2CON_STRB_POSN                                 0x1
#define _PSTR2CON_STRB_POSITION                             0x1
#define _PSTR2CON_STRB_SIZE                                 0x1
#define _PSTR2CON_STRB_LENGTH                               0x1
#define _PSTR2CON_STRB_MASK                                 0x2
#define _PSTR2CON_STRC_POSN                                 0x2
#define _PSTR2CON_STRC_POSITION                             0x2
#define _PSTR2CON_STRC_SIZE                                 0x1
#define _PSTR2CON_STRC_LENGTH                               0x1
#define _PSTR2CON_STRC_MASK                                 0x4
#define _PSTR2CON_STRD_POSN                                 0x3
#define _PSTR2CON_STRD_POSITION                             0x3
#define _PSTR2CON_STRD_SIZE                                 0x1
#define _PSTR2CON_STRD_LENGTH                               0x1
#define _PSTR2CON_STRD_MASK                                 0x8
#define _PSTR2CON_STRSYNC_POSN                              0x4
#define _PSTR2CON_STRSYNC_POSITION                          0x4
#define _PSTR2CON_STRSYNC_SIZE                              0x1
#define _PSTR2CON_STRSYNC_LENGTH                            0x1
#define _PSTR2CON_STRSYNC_MASK                              0x10
#define _PSTR2CON_CMPL_POSN                                 0x6
#define _PSTR2CON_CMPL_POSITION                             0x6
#define _PSTR2CON_CMPL_SIZE                                 0x2
#define _PSTR2CON_CMPL_LENGTH                               0x2
#define _PSTR2CON_CMPL_MASK                                 0xC0
#define _PSTR2CON_CMPL0_POSN                                0x6
#define _PSTR2CON_CMPL0_POSITION                            0x6
#define _PSTR2CON_CMPL0_SIZE                                0x1
#define _PSTR2CON_CMPL0_LENGTH                              0x1
#define _PSTR2CON_CMPL0_MASK                                0x40
#define _PSTR2CON_CMPL1_POSN                                0x7
#define _PSTR2CON_CMPL1_POSITION                            0x7
#define _PSTR2CON_CMPL1_SIZE                                0x1
#define _PSTR2CON_CMPL1_LENGTH                              0x1
#define _PSTR2CON_CMPL1_MASK                                0x80
#define _PSTR2CON_STRA2_POSN                                0x0
#define _PSTR2CON_STRA2_POSITION                            0x0
#define _PSTR2CON_STRA2_SIZE                                0x1
#define _PSTR2CON_STRA2_LENGTH                              0x1
#define _PSTR2CON_STRA2_MASK                                0x1
#define _PSTR2CON_STRB2_POSN                                0x1
#define _PSTR2CON_STRB2_POSITION                            0x1
#define _PSTR2CON_STRB2_SIZE                                0x1
#define _PSTR2CON_STRB2_LENGTH                              0x1
#define _PSTR2CON_STRB2_MASK                                0x2
#define _PSTR2CON_STRC2_POSN                                0x2
#define _PSTR2CON_STRC2_POSITION                            0x2
#define _PSTR2CON_STRC2_SIZE                                0x1
#define _PSTR2CON_STRC2_LENGTH                              0x1
#define _PSTR2CON_STRC2_MASK                                0x4
#define _PSTR2CON_STRD2_POSN                                0x3
#define _PSTR2CON_STRD2_POSITION                            0x3
#define _PSTR2CON_STRD2_SIZE                                0x1
#define _PSTR2CON_STRD2_LENGTH                              0x1
#define _PSTR2CON_STRD2_MASK                                0x8
#define _PSTR2CON_STRSYNC2_POSN                             0x4
#define _PSTR2CON_STRSYNC2_POSITION                         0x4
#define _PSTR2CON_STRSYNC2_SIZE                             0x1
#define _PSTR2CON_STRSYNC2_LENGTH                           0x1
#define _PSTR2CON_STRSYNC2_MASK                             0x10
#define _PSTR2CON_CMPL02_POSN                               0x6
#define _PSTR2CON_CMPL02_POSITION                           0x6
#define _PSTR2CON_CMPL02_SIZE                               0x1
#define _PSTR2CON_CMPL02_LENGTH                             0x1
#define _PSTR2CON_CMPL02_MASK                               0x40
#define _PSTR2CON_CMPL12_POSN                               0x7
#define _PSTR2CON_CMPL12_POSITION                           0x7
#define _PSTR2CON_CMPL12_SIZE                               0x1
#define _PSTR2CON_CMPL12_LENGTH                             0x1
#define _PSTR2CON_CMPL12_MASK                               0x80
#define _PSTR2CON_P2DC02_POSN                               0x0
#define _PSTR2CON_P2DC02_POSITION                           0x0
#define _PSTR2CON_P2DC02_SIZE                               0x1
#define _PSTR2CON_P2DC02_LENGTH                             0x1
#define _PSTR2CON_P2DC02_MASK                               0x1
#define _PSTR2CON_P2DC12_POSN                               0x1
#define _PSTR2CON_P2DC12_POSITION                           0x1
#define _PSTR2CON_P2DC12_SIZE                               0x1
#define _PSTR2CON_P2DC12_LENGTH                             0x1
#define _PSTR2CON_P2DC12_MASK                               0x2
#define _PSTR2CON_P2DC22_POSN                               0x2
#define _PSTR2CON_P2DC22_POSITION                           0x2
#define _PSTR2CON_P2DC22_SIZE                               0x1
#define _PSTR2CON_P2DC22_LENGTH                             0x1
#define _PSTR2CON_P2DC22_MASK                               0x4
#define _PSTR2CON_P2DC32_POSN                               0x3
#define _PSTR2CON_P2DC32_POSITION                           0x3
#define _PSTR2CON_P2DC32_SIZE                               0x1
#define _PSTR2CON_P2DC32_LENGTH                             0x1
#define _PSTR2CON_P2DC32_MASK                               0x8
#define _PSTR2CON_P2DC42_POSN                               0x4
#define _PSTR2CON_P2DC42_POSITION                           0x4
#define _PSTR2CON_P2DC42_SIZE                               0x1
#define _PSTR2CON_P2DC42_LENGTH                             0x1
#define _PSTR2CON_P2DC42_MASK                               0x10
#define _PSTR2CON_P2DC62_POSN                               0x6
#define _PSTR2CON_P2DC62_POSITION                           0x6
#define _PSTR2CON_P2DC62_SIZE                               0x1
#define _PSTR2CON_P2DC62_LENGTH                             0x1
#define _PSTR2CON_P2DC62_MASK                               0x40
#define _PSTR2CON_P2DC0CON_POSN                             0x0
#define _PSTR2CON_P2DC0CON_POSITION                         0x0
#define _PSTR2CON_P2DC0CON_SIZE                             0x1
#define _PSTR2CON_P2DC0CON_LENGTH                           0x1
#define _PSTR2CON_P2DC0CON_MASK                             0x1
#define _PSTR2CON_P2DC1CON_POSN                             0x1
#define _PSTR2CON_P2DC1CON_POSITION                         0x1
#define _PSTR2CON_P2DC1CON_SIZE                             0x1
#define _PSTR2CON_P2DC1CON_LENGTH                           0x1
#define _PSTR2CON_P2DC1CON_MASK                             0x2
#define _PSTR2CON_P2DC2CON_POSN                             0x2
#define _PSTR2CON_P2DC2CON_POSITION                         0x2
#define _PSTR2CON_P2DC2CON_SIZE                             0x1
#define _PSTR2CON_P2DC2CON_LENGTH                           0x1
#define _PSTR2CON_P2DC2CON_MASK                             0x4
#define _PSTR2CON_P2DC3CON_POSN                             0x3
#define _PSTR2CON_P2DC3CON_POSITION                         0x3
#define _PSTR2CON_P2DC3CON_SIZE                             0x1
#define _PSTR2CON_P2DC3CON_LENGTH                           0x1
#define _PSTR2CON_P2DC3CON_MASK                             0x8
#define _PSTR2CON_P2DC4CON_POSN                             0x4
#define _PSTR2CON_P2DC4CON_POSITION                         0x4
#define _PSTR2CON_P2DC4CON_SIZE                             0x1
#define _PSTR2CON_P2DC4CON_LENGTH                           0x1
#define _PSTR2CON_P2DC4CON_MASK                             0x10
#define _PSTR2CON_P2DC6CON_POSN                             0x6
#define _PSTR2CON_P2DC6CON_POSITION                         0x6
#define _PSTR2CON_P2DC6CON_SIZE                             0x1
#define _PSTR2CON_P2DC6CON_LENGTH                           0x1
#define _PSTR2CON_P2DC6CON_MASK                             0x40

// Register: TXREG2
#define TXREG2 TXREG2
extern volatile unsigned char           TXREG2              __at(0xF1D);
#ifndef _LIB_BUILD
asm("TXREG2 equ 0F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXREG2                 :8;
    };
} TXREG2bits_t;
extern volatile TXREG2bits_t TXREG2bits __at(0xF1D);
// bitfield macros
#define _TXREG2_TXREG2_POSN                                 0x0
#define _TXREG2_TXREG2_POSITION                             0x0
#define _TXREG2_TXREG2_SIZE                                 0x8
#define _TXREG2_TXREG2_LENGTH                               0x8
#define _TXREG2_TXREG2_MASK                                 0xFF

// Register: RCREG2
#define RCREG2 RCREG2
extern volatile unsigned char           RCREG2              __at(0xF1E);
#ifndef _LIB_BUILD
asm("RCREG2 equ 0F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RCREG2                 :8;
    };
} RCREG2bits_t;
extern volatile RCREG2bits_t RCREG2bits __at(0xF1E);
// bitfield macros
#define _RCREG2_RCREG2_POSN                                 0x0
#define _RCREG2_RCREG2_POSITION                             0x0
#define _RCREG2_RCREG2_SIZE                                 0x8
#define _RCREG2_RCREG2_LENGTH                               0x8
#define _RCREG2_RCREG2_MASK                                 0xFF

// Register: SPBRG2
#define SPBRG2 SPBRG2
extern volatile unsigned char           SPBRG2              __at(0xF1F);
#ifndef _LIB_BUILD
asm("SPBRG2 equ 0F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRG2                 :8;
    };
    struct {
        unsigned BRG0                   :1;
        unsigned BRG1                   :1;
        unsigned BRG2                   :1;
        unsigned BRG3                   :1;
        unsigned BRG4                   :1;
        unsigned BRG5                   :1;
        unsigned BRG6                   :1;
        unsigned BRG7                   :1;
    };
} SPBRG2bits_t;
extern volatile SPBRG2bits_t SPBRG2bits __at(0xF1F);
// bitfield macros
#define _SPBRG2_SPBRG2_POSN                                 0x0
#define _SPBRG2_SPBRG2_POSITION                             0x0
#define _SPBRG2_SPBRG2_SIZE                                 0x8
#define _SPBRG2_SPBRG2_LENGTH                               0x8
#define _SPBRG2_SPBRG2_MASK                                 0xFF
#define _SPBRG2_BRG0_POSN                                   0x0
#define _SPBRG2_BRG0_POSITION                               0x0
#define _SPBRG2_BRG0_SIZE                                   0x1
#define _SPBRG2_BRG0_LENGTH                                 0x1
#define _SPBRG2_BRG0_MASK                                   0x1
#define _SPBRG2_BRG1_POSN                                   0x1
#define _SPBRG2_BRG1_POSITION                               0x1
#define _SPBRG2_BRG1_SIZE                                   0x1
#define _SPBRG2_BRG1_LENGTH                                 0x1
#define _SPBRG2_BRG1_MASK                                   0x2
#define _SPBRG2_BRG2_POSN                                   0x2
#define _SPBRG2_BRG2_POSITION                               0x2
#define _SPBRG2_BRG2_SIZE                                   0x1
#define _SPBRG2_BRG2_LENGTH                                 0x1
#define _SPBRG2_BRG2_MASK                                   0x4
#define _SPBRG2_BRG3_POSN                                   0x3
#define _SPBRG2_BRG3_POSITION                               0x3
#define _SPBRG2_BRG3_SIZE                                   0x1
#define _SPBRG2_BRG3_LENGTH                                 0x1
#define _SPBRG2_BRG3_MASK                                   0x8
#define _SPBRG2_BRG4_POSN                                   0x4
#define _SPBRG2_BRG4_POSITION                               0x4
#define _SPBRG2_BRG4_SIZE                                   0x1
#define _SPBRG2_BRG4_LENGTH                                 0x1
#define _SPBRG2_BRG4_MASK                                   0x10
#define _SPBRG2_BRG5_POSN                                   0x5
#define _SPBRG2_BRG5_POSITION                               0x5
#define _SPBRG2_BRG5_SIZE                                   0x1
#define _SPBRG2_BRG5_LENGTH                                 0x1
#define _SPBRG2_BRG5_MASK                                   0x20
#define _SPBRG2_BRG6_POSN                                   0x6
#define _SPBRG2_BRG6_POSITION                               0x6
#define _SPBRG2_BRG6_SIZE                                   0x1
#define _SPBRG2_BRG6_LENGTH                                 0x1
#define _SPBRG2_BRG6_MASK                                   0x40
#define _SPBRG2_BRG7_POSN                                   0x7
#define _SPBRG2_BRG7_POSITION                               0x7
#define _SPBRG2_BRG7_SIZE                                   0x1
#define _SPBRG2_BRG7_LENGTH                                 0x1
#define _SPBRG2_BRG7_MASK                                   0x80

// Register: SPBRGH2
#define SPBRGH2 SPBRGH2
extern volatile unsigned char           SPBRGH2             __at(0xF20);
#ifndef _LIB_BUILD
asm("SPBRGH2 equ 0F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRGH2                :8;
    };
    struct {
        unsigned BRG8                   :1;
        unsigned BRG9                   :1;
        unsigned BRG10                  :1;
        unsigned BRG11                  :1;
        unsigned BRG12                  :1;
        unsigned BRG13                  :1;
        unsigned BRG14                  :1;
        unsigned BRG15                  :1;
    };
} SPBRGH2bits_t;
extern volatile SPBRGH2bits_t SPBRGH2bits __at(0xF20);
// bitfield macros
#define _SPBRGH2_SPBRGH2_POSN                               0x0
#define _SPBRGH2_SPBRGH2_POSITION                           0x0
#define _SPBRGH2_SPBRGH2_SIZE                               0x8
#define _SPBRGH2_SPBRGH2_LENGTH                             0x8
#define _SPBRGH2_SPBRGH2_MASK                               0xFF
#define _SPBRGH2_BRG8_POSN                                  0x0
#define _SPBRGH2_BRG8_POSITION                              0x0
#define _SPBRGH2_BRG8_SIZE                                  0x1
#define _SPBRGH2_BRG8_LENGTH                                0x1
#define _SPBRGH2_BRG8_MASK                                  0x1
#define _SPBRGH2_BRG9_POSN                                  0x1
#define _SPBRGH2_BRG9_POSITION                              0x1
#define _SPBRGH2_BRG9_SIZE                                  0x1
#define _SPBRGH2_BRG9_LENGTH                                0x1
#define _SPBRGH2_BRG9_MASK                                  0x2
#define _SPBRGH2_BRG10_POSN                                 0x2
#define _SPBRGH2_BRG10_POSITION                             0x2
#define _SPBRGH2_BRG10_SIZE                                 0x1
#define _SPBRGH2_BRG10_LENGTH                               0x1
#define _SPBRGH2_BRG10_MASK                                 0x4
#define _SPBRGH2_BRG11_POSN                                 0x3
#define _SPBRGH2_BRG11_POSITION                             0x3
#define _SPBRGH2_BRG11_SIZE                                 0x1
#define _SPBRGH2_BRG11_LENGTH                               0x1
#define _SPBRGH2_BRG11_MASK                                 0x8
#define _SPBRGH2_BRG12_POSN                                 0x4
#define _SPBRGH2_BRG12_POSITION                             0x4
#define _SPBRGH2_BRG12_SIZE                                 0x1
#define _SPBRGH2_BRG12_LENGTH                               0x1
#define _SPBRGH2_BRG12_MASK                                 0x10
#define _SPBRGH2_BRG13_POSN                                 0x5
#define _SPBRGH2_BRG13_POSITION                             0x5
#define _SPBRGH2_BRG13_SIZE                                 0x1
#define _SPBRGH2_BRG13_LENGTH                               0x1
#define _SPBRGH2_BRG13_MASK                                 0x20
#define _SPBRGH2_BRG14_POSN                                 0x6
#define _SPBRGH2_BRG14_POSITION                             0x6
#define _SPBRGH2_BRG14_SIZE                                 0x1
#define _SPBRGH2_BRG14_LENGTH                               0x1
#define _SPBRGH2_BRG14_MASK                                 0x40
#define _SPBRGH2_BRG15_POSN                                 0x7
#define _SPBRGH2_BRG15_POSITION                             0x7
#define _SPBRGH2_BRG15_SIZE                                 0x1
#define _SPBRGH2_BRG15_LENGTH                               0x1
#define _SPBRGH2_BRG15_MASK                                 0x80

// Register: DSGPR3
#define DSGPR3 DSGPR3
extern volatile unsigned char           DSGPR3              __at(0xF21);
#ifndef _LIB_BUILD
asm("DSGPR3 equ 0F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSGPR3                 :8;
    };
} DSGPR3bits_t;
extern volatile DSGPR3bits_t DSGPR3bits __at(0xF21);
// bitfield macros
#define _DSGPR3_DSGPR3_POSN                                 0x0
#define _DSGPR3_DSGPR3_POSITION                             0x0
#define _DSGPR3_DSGPR3_SIZE                                 0x8
#define _DSGPR3_DSGPR3_LENGTH                               0x8
#define _DSGPR3_DSGPR3_MASK                                 0xFF

// Register: DSGPR2
#define DSGPR2 DSGPR2
extern volatile unsigned char           DSGPR2              __at(0xF22);
#ifndef _LIB_BUILD
asm("DSGPR2 equ 0F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSGPR2                 :8;
    };
} DSGPR2bits_t;
extern volatile DSGPR2bits_t DSGPR2bits __at(0xF22);
// bitfield macros
#define _DSGPR2_DSGPR2_POSN                                 0x0
#define _DSGPR2_DSGPR2_POSITION                             0x0
#define _DSGPR2_DSGPR2_SIZE                                 0x8
#define _DSGPR2_DSGPR2_LENGTH                               0x8
#define _DSGPR2_DSGPR2_MASK                                 0xFF

// Register: DSGPR1
#define DSGPR1 DSGPR1
extern volatile unsigned char           DSGPR1              __at(0xF23);
#ifndef _LIB_BUILD
asm("DSGPR1 equ 0F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSGPR1                 :8;
    };
} DSGPR1bits_t;
extern volatile DSGPR1bits_t DSGPR1bits __at(0xF23);
// bitfield macros
#define _DSGPR1_DSGPR1_POSN                                 0x0
#define _DSGPR1_DSGPR1_POSITION                             0x0
#define _DSGPR1_DSGPR1_SIZE                                 0x8
#define _DSGPR1_DSGPR1_LENGTH                               0x8
#define _DSGPR1_DSGPR1_MASK                                 0xFF

// Register: DSGPR0
#define DSGPR0 DSGPR0
extern volatile unsigned char           DSGPR0              __at(0xF24);
#ifndef _LIB_BUILD
asm("DSGPR0 equ 0F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSGPR0                 :8;
    };
} DSGPR0bits_t;
extern volatile DSGPR0bits_t DSGPR0bits __at(0xF24);
// bitfield macros
#define _DSGPR0_DSGPR0_POSN                                 0x0
#define _DSGPR0_DSGPR0_POSITION                             0x0
#define _DSGPR0_DSGPR0_SIZE                                 0x8
#define _DSGPR0_DSGPR0_LENGTH                               0x8
#define _DSGPR0_DSGPR0_MASK                                 0xFF

// Register: DSWAKEH
#define DSWAKEH DSWAKEH
extern volatile unsigned char           DSWAKEH             __at(0xF25);
#ifndef _LIB_BUILD
asm("DSWAKEH equ 0F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSINT0                 :1;
    };
} DSWAKEHbits_t;
extern volatile DSWAKEHbits_t DSWAKEHbits __at(0xF25);
// bitfield macros
#define _DSWAKEH_DSINT0_POSN                                0x0
#define _DSWAKEH_DSINT0_POSITION                            0x0
#define _DSWAKEH_DSINT0_SIZE                                0x1
#define _DSWAKEH_DSINT0_LENGTH                              0x1
#define _DSWAKEH_DSINT0_MASK                                0x1

// Register: DSWAKEL
#define DSWAKEL DSWAKEL
extern volatile unsigned char           DSWAKEL             __at(0xF26);
#ifndef _LIB_BUILD
asm("DSWAKEL equ 0F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSPOR                  :1;
        unsigned DSICD                  :1;
        unsigned DSMCLR                 :1;
        unsigned DSRTC                  :1;
        unsigned DSWDT                  :1;
        unsigned DSULP                  :1;
        unsigned BOR                    :1;
        unsigned DSFLT                  :1;
    };
} DSWAKELbits_t;
extern volatile DSWAKELbits_t DSWAKELbits __at(0xF26);
// bitfield macros
#define _DSWAKEL_DSPOR_POSN                                 0x0
#define _DSWAKEL_DSPOR_POSITION                             0x0
#define _DSWAKEL_DSPOR_SIZE                                 0x1
#define _DSWAKEL_DSPOR_LENGTH                               0x1
#define _DSWAKEL_DSPOR_MASK                                 0x1
#define _DSWAKEL_DSICD_POSN                                 0x1
#define _DSWAKEL_DSICD_POSITION                             0x1
#define _DSWAKEL_DSICD_SIZE                                 0x1
#define _DSWAKEL_DSICD_LENGTH                               0x1
#define _DSWAKEL_DSICD_MASK                                 0x2
#define _DSWAKEL_DSMCLR_POSN                                0x2
#define _DSWAKEL_DSMCLR_POSITION                            0x2
#define _DSWAKEL_DSMCLR_SIZE                                0x1
#define _DSWAKEL_DSMCLR_LENGTH                              0x1
#define _DSWAKEL_DSMCLR_MASK                                0x4
#define _DSWAKEL_DSRTC_POSN                                 0x3
#define _DSWAKEL_DSRTC_POSITION                             0x3
#define _DSWAKEL_DSRTC_SIZE                                 0x1
#define _DSWAKEL_DSRTC_LENGTH                               0x1
#define _DSWAKEL_DSRTC_MASK                                 0x8
#define _DSWAKEL_DSWDT_POSN                                 0x4
#define _DSWAKEL_DSWDT_POSITION                             0x4
#define _DSWAKEL_DSWDT_SIZE                                 0x1
#define _DSWAKEL_DSWDT_LENGTH                               0x1
#define _DSWAKEL_DSWDT_MASK                                 0x10
#define _DSWAKEL_DSULP_POSN                                 0x5
#define _DSWAKEL_DSULP_POSITION                             0x5
#define _DSWAKEL_DSULP_SIZE                                 0x1
#define _DSWAKEL_DSULP_LENGTH                               0x1
#define _DSWAKEL_DSULP_MASK                                 0x20
#define _DSWAKEL_BOR_POSN                                   0x6
#define _DSWAKEL_BOR_POSITION                               0x6
#define _DSWAKEL_BOR_SIZE                                   0x1
#define _DSWAKEL_BOR_LENGTH                                 0x1
#define _DSWAKEL_BOR_MASK                                   0x40
#define _DSWAKEL_DSFLT_POSN                                 0x7
#define _DSWAKEL_DSFLT_POSITION                             0x7
#define _DSWAKEL_DSFLT_SIZE                                 0x1
#define _DSWAKEL_DSFLT_LENGTH                               0x1
#define _DSWAKEL_DSFLT_MASK                                 0x80

// Register: DSCONH
#define DSCONH DSCONH
extern volatile unsigned char           DSCONH              __at(0xF27);
#ifndef _LIB_BUILD
asm("DSCONH equ 0F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCWDIS                :1;
        unsigned                        :6;
        unsigned DSEN                   :1;
    };
} DSCONHbits_t;
extern volatile DSCONHbits_t DSCONHbits __at(0xF27);
// bitfield macros
#define _DSCONH_RTCWDIS_POSN                                0x0
#define _DSCONH_RTCWDIS_POSITION                            0x0
#define _DSCONH_RTCWDIS_SIZE                                0x1
#define _DSCONH_RTCWDIS_LENGTH                              0x1
#define _DSCONH_RTCWDIS_MASK                                0x1
#define _DSCONH_DSEN_POSN                                   0x7
#define _DSCONH_DSEN_POSITION                               0x7
#define _DSCONH_DSEN_SIZE                                   0x1
#define _DSCONH_DSEN_LENGTH                                 0x1
#define _DSCONH_DSEN_MASK                                   0x80

// Register: DSCONL
#define DSCONL DSCONL
extern volatile unsigned char           DSCONL              __at(0xF28);
#ifndef _LIB_BUILD
asm("DSCONL equ 0F28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RELEASE                :1;
        unsigned DSBOR                  :1;
        unsigned ULPWDIS                :1;
    };
} DSCONLbits_t;
extern volatile DSCONLbits_t DSCONLbits __at(0xF28);
// bitfield macros
#define _DSCONL_RELEASE_POSN                                0x0
#define _DSCONL_RELEASE_POSITION                            0x0
#define _DSCONL_RELEASE_SIZE                                0x1
#define _DSCONL_RELEASE_LENGTH                              0x1
#define _DSCONL_RELEASE_MASK                                0x1
#define _DSCONL_DSBOR_POSN                                  0x1
#define _DSCONL_DSBOR_POSITION                              0x1
#define _DSCONL_DSBOR_SIZE                                  0x1
#define _DSCONL_DSBOR_LENGTH                                0x1
#define _DSCONL_DSBOR_MASK                                  0x2
#define _DSCONL_ULPWDIS_POSN                                0x2
#define _DSCONL_ULPWDIS_POSITION                            0x2
#define _DSCONL_ULPWDIS_SIZE                                0x1
#define _DSCONL_ULPWDIS_LENGTH                              0x1
#define _DSCONL_ULPWDIS_MASK                                0x4

// Register: TXREG3
#define TXREG3 TXREG3
extern volatile unsigned char           TXREG3              __at(0xF29);
#ifndef _LIB_BUILD
asm("TXREG3 equ 0F29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXREG3                 :8;
    };
} TXREG3bits_t;
extern volatile TXREG3bits_t TXREG3bits __at(0xF29);
// bitfield macros
#define _TXREG3_TXREG3_POSN                                 0x0
#define _TXREG3_TXREG3_POSITION                             0x0
#define _TXREG3_TXREG3_SIZE                                 0x8
#define _TXREG3_TXREG3_LENGTH                               0x8
#define _TXREG3_TXREG3_MASK                                 0xFF

// Register: RCREG3
#define RCREG3 RCREG3
extern volatile unsigned char           RCREG3              __at(0xF2A);
#ifndef _LIB_BUILD
asm("RCREG3 equ 0F2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RCREG3                 :8;
    };
} RCREG3bits_t;
extern volatile RCREG3bits_t RCREG3bits __at(0xF2A);
// bitfield macros
#define _RCREG3_RCREG3_POSN                                 0x0
#define _RCREG3_RCREG3_POSITION                             0x0
#define _RCREG3_RCREG3_SIZE                                 0x8
#define _RCREG3_RCREG3_LENGTH                               0x8
#define _RCREG3_RCREG3_MASK                                 0xFF

// Register: SPBRG3
#define SPBRG3 SPBRG3
extern volatile unsigned char           SPBRG3              __at(0xF2B);
#ifndef _LIB_BUILD
asm("SPBRG3 equ 0F2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRG3                 :8;
    };
    struct {
        unsigned BRG0                   :1;
        unsigned BRG1                   :1;
        unsigned BRG2                   :1;
        unsigned BRG3                   :1;
        unsigned BRG4                   :1;
        unsigned BRG5                   :1;
        unsigned BRG6                   :1;
        unsigned BRG7                   :1;
    };
} SPBRG3bits_t;
extern volatile SPBRG3bits_t SPBRG3bits __at(0xF2B);
// bitfield macros
#define _SPBRG3_SPBRG3_POSN                                 0x0
#define _SPBRG3_SPBRG3_POSITION                             0x0
#define _SPBRG3_SPBRG3_SIZE                                 0x8
#define _SPBRG3_SPBRG3_LENGTH                               0x8
#define _SPBRG3_SPBRG3_MASK                                 0xFF
#define _SPBRG3_BRG0_POSN                                   0x0
#define _SPBRG3_BRG0_POSITION                               0x0
#define _SPBRG3_BRG0_SIZE                                   0x1
#define _SPBRG3_BRG0_LENGTH                                 0x1
#define _SPBRG3_BRG0_MASK                                   0x1
#define _SPBRG3_BRG1_POSN                                   0x1
#define _SPBRG3_BRG1_POSITION                               0x1
#define _SPBRG3_BRG1_SIZE                                   0x1
#define _SPBRG3_BRG1_LENGTH                                 0x1
#define _SPBRG3_BRG1_MASK                                   0x2
#define _SPBRG3_BRG2_POSN                                   0x2
#define _SPBRG3_BRG2_POSITION                               0x2
#define _SPBRG3_BRG2_SIZE                                   0x1
#define _SPBRG3_BRG2_LENGTH                                 0x1
#define _SPBRG3_BRG2_MASK                                   0x4
#define _SPBRG3_BRG3_POSN                                   0x3
#define _SPBRG3_BRG3_POSITION                               0x3
#define _SPBRG3_BRG3_SIZE                                   0x1
#define _SPBRG3_BRG3_LENGTH                                 0x1
#define _SPBRG3_BRG3_MASK                                   0x8
#define _SPBRG3_BRG4_POSN                                   0x4
#define _SPBRG3_BRG4_POSITION                               0x4
#define _SPBRG3_BRG4_SIZE                                   0x1
#define _SPBRG3_BRG4_LENGTH                                 0x1
#define _SPBRG3_BRG4_MASK                                   0x10
#define _SPBRG3_BRG5_POSN                                   0x5
#define _SPBRG3_BRG5_POSITION                               0x5
#define _SPBRG3_BRG5_SIZE                                   0x1
#define _SPBRG3_BRG5_LENGTH                                 0x1
#define _SPBRG3_BRG5_MASK                                   0x20
#define _SPBRG3_BRG6_POSN                                   0x6
#define _SPBRG3_BRG6_POSITION                               0x6
#define _SPBRG3_BRG6_SIZE                                   0x1
#define _SPBRG3_BRG6_LENGTH                                 0x1
#define _SPBRG3_BRG6_MASK                                   0x40
#define _SPBRG3_BRG7_POSN                                   0x7
#define _SPBRG3_BRG7_POSITION                               0x7
#define _SPBRG3_BRG7_SIZE                                   0x1
#define _SPBRG3_BRG7_LENGTH                                 0x1
#define _SPBRG3_BRG7_MASK                                   0x80

// Register: SPBRGH3
#define SPBRGH3 SPBRGH3
extern volatile unsigned char           SPBRGH3             __at(0xF2C);
#ifndef _LIB_BUILD
asm("SPBRGH3 equ 0F2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRGH3                :8;
    };
    struct {
        unsigned BRG8                   :1;
        unsigned BRG9                   :1;
        unsigned BRG10                  :1;
        unsigned BRG11                  :1;
        unsigned BRG12                  :1;
        unsigned BRG13                  :1;
        unsigned BRG14                  :1;
        unsigned BRG15                  :1;
    };
} SPBRGH3bits_t;
extern volatile SPBRGH3bits_t SPBRGH3bits __at(0xF2C);
// bitfield macros
#define _SPBRGH3_SPBRGH3_POSN                               0x0
#define _SPBRGH3_SPBRGH3_POSITION                           0x0
#define _SPBRGH3_SPBRGH3_SIZE                               0x8
#define _SPBRGH3_SPBRGH3_LENGTH                             0x8
#define _SPBRGH3_SPBRGH3_MASK                               0xFF
#define _SPBRGH3_BRG8_POSN                                  0x0
#define _SPBRGH3_BRG8_POSITION                              0x0
#define _SPBRGH3_BRG8_SIZE                                  0x1
#define _SPBRGH3_BRG8_LENGTH                                0x1
#define _SPBRGH3_BRG8_MASK                                  0x1
#define _SPBRGH3_BRG9_POSN                                  0x1
#define _SPBRGH3_BRG9_POSITION                              0x1
#define _SPBRGH3_BRG9_SIZE                                  0x1
#define _SPBRGH3_BRG9_LENGTH                                0x1
#define _SPBRGH3_BRG9_MASK                                  0x2
#define _SPBRGH3_BRG10_POSN                                 0x2
#define _SPBRGH3_BRG10_POSITION                             0x2
#define _SPBRGH3_BRG10_SIZE                                 0x1
#define _SPBRGH3_BRG10_LENGTH                               0x1
#define _SPBRGH3_BRG10_MASK                                 0x4
#define _SPBRGH3_BRG11_POSN                                 0x3
#define _SPBRGH3_BRG11_POSITION                             0x3
#define _SPBRGH3_BRG11_SIZE                                 0x1
#define _SPBRGH3_BRG11_LENGTH                               0x1
#define _SPBRGH3_BRG11_MASK                                 0x8
#define _SPBRGH3_BRG12_POSN                                 0x4
#define _SPBRGH3_BRG12_POSITION                             0x4
#define _SPBRGH3_BRG12_SIZE                                 0x1
#define _SPBRGH3_BRG12_LENGTH                               0x1
#define _SPBRGH3_BRG12_MASK                                 0x10
#define _SPBRGH3_BRG13_POSN                                 0x5
#define _SPBRGH3_BRG13_POSITION                             0x5
#define _SPBRGH3_BRG13_SIZE                                 0x1
#define _SPBRGH3_BRG13_LENGTH                               0x1
#define _SPBRGH3_BRG13_MASK                                 0x20
#define _SPBRGH3_BRG14_POSN                                 0x6
#define _SPBRGH3_BRG14_POSITION                             0x6
#define _SPBRGH3_BRG14_SIZE                                 0x1
#define _SPBRGH3_BRG14_LENGTH                               0x1
#define _SPBRGH3_BRG14_MASK                                 0x40
#define _SPBRGH3_BRG15_POSN                                 0x7
#define _SPBRGH3_BRG15_POSITION                             0x7
#define _SPBRGH3_BRG15_SIZE                                 0x1
#define _SPBRGH3_BRG15_LENGTH                               0x1
#define _SPBRGH3_BRG15_MASK                                 0x80

// Register: BAUDCON3
#define BAUDCON3 BAUDCON3
extern volatile unsigned char           BAUDCON3            __at(0xF2D);
#ifndef _LIB_BUILD
asm("BAUDCON3 equ 0F2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned IREN                   :1;
        unsigned BRG16                  :1;
        unsigned TXCKP                  :1;
        unsigned RXDTP                  :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN3                 :1;
        unsigned WUE3                   :1;
        unsigned                        :1;
        unsigned BRG163                 :1;
        unsigned SCKP3                  :1;
        unsigned DTRXP3                 :1;
        unsigned RCIDL3                 :1;
        unsigned ABDOVF3                :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP3                 :1;
        unsigned RXDTP3                 :1;
        unsigned RCMT3                  :1;
    };
} BAUDCON3bits_t;
extern volatile BAUDCON3bits_t BAUDCON3bits __at(0xF2D);
// bitfield macros
#define _BAUDCON3_ABDEN_POSN                                0x0
#define _BAUDCON3_ABDEN_POSITION                            0x0
#define _BAUDCON3_ABDEN_SIZE                                0x1
#define _BAUDCON3_ABDEN_LENGTH                              0x1
#define _BAUDCON3_ABDEN_MASK                                0x1
#define _BAUDCON3_WUE_POSN                                  0x1
#define _BAUDCON3_WUE_POSITION                              0x1
#define _BAUDCON3_WUE_SIZE                                  0x1
#define _BAUDCON3_WUE_LENGTH                                0x1
#define _BAUDCON3_WUE_MASK                                  0x2
#define _BAUDCON3_IREN_POSN                                 0x2
#define _BAUDCON3_IREN_POSITION                             0x2
#define _BAUDCON3_IREN_SIZE                                 0x1
#define _BAUDCON3_IREN_LENGTH                               0x1
#define _BAUDCON3_IREN_MASK                                 0x4
#define _BAUDCON3_BRG16_POSN                                0x3
#define _BAUDCON3_BRG16_POSITION                            0x3
#define _BAUDCON3_BRG16_SIZE                                0x1
#define _BAUDCON3_BRG16_LENGTH                              0x1
#define _BAUDCON3_BRG16_MASK                                0x8
#define _BAUDCON3_TXCKP_POSN                                0x4
#define _BAUDCON3_TXCKP_POSITION                            0x4
#define _BAUDCON3_TXCKP_SIZE                                0x1
#define _BAUDCON3_TXCKP_LENGTH                              0x1
#define _BAUDCON3_TXCKP_MASK                                0x10
#define _BAUDCON3_RXDTP_POSN                                0x5
#define _BAUDCON3_RXDTP_POSITION                            0x5
#define _BAUDCON3_RXDTP_SIZE                                0x1
#define _BAUDCON3_RXDTP_LENGTH                              0x1
#define _BAUDCON3_RXDTP_MASK                                0x20
#define _BAUDCON3_RCIDL_POSN                                0x6
#define _BAUDCON3_RCIDL_POSITION                            0x6
#define _BAUDCON3_RCIDL_SIZE                                0x1
#define _BAUDCON3_RCIDL_LENGTH                              0x1
#define _BAUDCON3_RCIDL_MASK                                0x40
#define _BAUDCON3_ABDOVF_POSN                               0x7
#define _BAUDCON3_ABDOVF_POSITION                           0x7
#define _BAUDCON3_ABDOVF_SIZE                               0x1
#define _BAUDCON3_ABDOVF_LENGTH                             0x1
#define _BAUDCON3_ABDOVF_MASK                               0x80
#define _BAUDCON3_ABDEN3_POSN                               0x0
#define _BAUDCON3_ABDEN3_POSITION                           0x0
#define _BAUDCON3_ABDEN3_SIZE                               0x1
#define _BAUDCON3_ABDEN3_LENGTH                             0x1
#define _BAUDCON3_ABDEN3_MASK                               0x1
#define _BAUDCON3_WUE3_POSN                                 0x1
#define _BAUDCON3_WUE3_POSITION                             0x1
#define _BAUDCON3_WUE3_SIZE                                 0x1
#define _BAUDCON3_WUE3_LENGTH                               0x1
#define _BAUDCON3_WUE3_MASK                                 0x2
#define _BAUDCON3_BRG163_POSN                               0x3
#define _BAUDCON3_BRG163_POSITION                           0x3
#define _BAUDCON3_BRG163_SIZE                               0x1
#define _BAUDCON3_BRG163_LENGTH                             0x1
#define _BAUDCON3_BRG163_MASK                               0x8
#define _BAUDCON3_SCKP3_POSN                                0x4
#define _BAUDCON3_SCKP3_POSITION                            0x4
#define _BAUDCON3_SCKP3_SIZE                                0x1
#define _BAUDCON3_SCKP3_LENGTH                              0x1
#define _BAUDCON3_SCKP3_MASK                                0x10
#define _BAUDCON3_DTRXP3_POSN                               0x5
#define _BAUDCON3_DTRXP3_POSITION                           0x5
#define _BAUDCON3_DTRXP3_SIZE                               0x1
#define _BAUDCON3_DTRXP3_LENGTH                             0x1
#define _BAUDCON3_DTRXP3_MASK                               0x20
#define _BAUDCON3_RCIDL3_POSN                               0x6
#define _BAUDCON3_RCIDL3_POSITION                           0x6
#define _BAUDCON3_RCIDL3_SIZE                               0x1
#define _BAUDCON3_RCIDL3_LENGTH                             0x1
#define _BAUDCON3_RCIDL3_MASK                               0x40
#define _BAUDCON3_ABDOVF3_POSN                              0x7
#define _BAUDCON3_ABDOVF3_POSITION                          0x7
#define _BAUDCON3_ABDOVF3_SIZE                              0x1
#define _BAUDCON3_ABDOVF3_LENGTH                            0x1
#define _BAUDCON3_ABDOVF3_MASK                              0x80
#define _BAUDCON3_TXCKP3_POSN                               0x4
#define _BAUDCON3_TXCKP3_POSITION                           0x4
#define _BAUDCON3_TXCKP3_SIZE                               0x1
#define _BAUDCON3_TXCKP3_LENGTH                             0x1
#define _BAUDCON3_TXCKP3_MASK                               0x10
#define _BAUDCON3_RXDTP3_POSN                               0x5
#define _BAUDCON3_RXDTP3_POSITION                           0x5
#define _BAUDCON3_RXDTP3_SIZE                               0x1
#define _BAUDCON3_RXDTP3_LENGTH                             0x1
#define _BAUDCON3_RXDTP3_MASK                               0x20
#define _BAUDCON3_RCMT3_POSN                                0x6
#define _BAUDCON3_RCMT3_POSITION                            0x6
#define _BAUDCON3_RCMT3_SIZE                                0x1
#define _BAUDCON3_RCMT3_LENGTH                              0x1
#define _BAUDCON3_RCMT3_MASK                                0x40

// Register: TXSTA3
#define TXSTA3 TXSTA3
extern volatile unsigned char           TXSTA3              __at(0xF2E);
#ifndef _LIB_BUILD
asm("TXSTA3 equ 0F2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned TXD83                  :1;
        unsigned                        :5;
        unsigned TX8_93                 :1;
    };
} TXSTA3bits_t;
extern volatile TXSTA3bits_t TXSTA3bits __at(0xF2E);
// bitfield macros
#define _TXSTA3_TX9D_POSN                                   0x0
#define _TXSTA3_TX9D_POSITION                               0x0
#define _TXSTA3_TX9D_SIZE                                   0x1
#define _TXSTA3_TX9D_LENGTH                                 0x1
#define _TXSTA3_TX9D_MASK                                   0x1
#define _TXSTA3_TRMT_POSN                                   0x1
#define _TXSTA3_TRMT_POSITION                               0x1
#define _TXSTA3_TRMT_SIZE                                   0x1
#define _TXSTA3_TRMT_LENGTH                                 0x1
#define _TXSTA3_TRMT_MASK                                   0x2
#define _TXSTA3_BRGH_POSN                                   0x2
#define _TXSTA3_BRGH_POSITION                               0x2
#define _TXSTA3_BRGH_SIZE                                   0x1
#define _TXSTA3_BRGH_LENGTH                                 0x1
#define _TXSTA3_BRGH_MASK                                   0x4
#define _TXSTA3_SENDB_POSN                                  0x3
#define _TXSTA3_SENDB_POSITION                              0x3
#define _TXSTA3_SENDB_SIZE                                  0x1
#define _TXSTA3_SENDB_LENGTH                                0x1
#define _TXSTA3_SENDB_MASK                                  0x8
#define _TXSTA3_SYNC_POSN                                   0x4
#define _TXSTA3_SYNC_POSITION                               0x4
#define _TXSTA3_SYNC_SIZE                                   0x1
#define _TXSTA3_SYNC_LENGTH                                 0x1
#define _TXSTA3_SYNC_MASK                                   0x10
#define _TXSTA3_TXEN_POSN                                   0x5
#define _TXSTA3_TXEN_POSITION                               0x5
#define _TXSTA3_TXEN_SIZE                                   0x1
#define _TXSTA3_TXEN_LENGTH                                 0x1
#define _TXSTA3_TXEN_MASK                                   0x20
#define _TXSTA3_TX9_POSN                                    0x6
#define _TXSTA3_TX9_POSITION                                0x6
#define _TXSTA3_TX9_SIZE                                    0x1
#define _TXSTA3_TX9_LENGTH                                  0x1
#define _TXSTA3_TX9_MASK                                    0x40
#define _TXSTA3_CSRC_POSN                                   0x7
#define _TXSTA3_CSRC_POSITION                               0x7
#define _TXSTA3_CSRC_SIZE                                   0x1
#define _TXSTA3_CSRC_LENGTH                                 0x1
#define _TXSTA3_CSRC_MASK                                   0x80
#define _TXSTA3_TXD83_POSN                                  0x0
#define _TXSTA3_TXD83_POSITION                              0x0
#define _TXSTA3_TXD83_SIZE                                  0x1
#define _TXSTA3_TXD83_LENGTH                                0x1
#define _TXSTA3_TXD83_MASK                                  0x1
#define _TXSTA3_TX8_93_POSN                                 0x6
#define _TXSTA3_TX8_93_POSITION                             0x6
#define _TXSTA3_TX8_93_SIZE                                 0x1
#define _TXSTA3_TX8_93_LENGTH                               0x1
#define _TXSTA3_TX8_93_MASK                                 0x40

// Register: RCSTA3
#define RCSTA3 RCSTA3
extern volatile unsigned char           RCSTA3              __at(0xF2F);
#ifndef _LIB_BUILD
asm("RCSTA3 equ 0F2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned RCD83                  :1;
        unsigned                        :5;
        unsigned RC8_92                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC93                   :1;
    };
} RCSTA3bits_t;
extern volatile RCSTA3bits_t RCSTA3bits __at(0xF2F);
// bitfield macros
#define _RCSTA3_RX9D_POSN                                   0x0
#define _RCSTA3_RX9D_POSITION                               0x0
#define _RCSTA3_RX9D_SIZE                                   0x1
#define _RCSTA3_RX9D_LENGTH                                 0x1
#define _RCSTA3_RX9D_MASK                                   0x1
#define _RCSTA3_OERR_POSN                                   0x1
#define _RCSTA3_OERR_POSITION                               0x1
#define _RCSTA3_OERR_SIZE                                   0x1
#define _RCSTA3_OERR_LENGTH                                 0x1
#define _RCSTA3_OERR_MASK                                   0x2
#define _RCSTA3_FERR_POSN                                   0x2
#define _RCSTA3_FERR_POSITION                               0x2
#define _RCSTA3_FERR_SIZE                                   0x1
#define _RCSTA3_FERR_LENGTH                                 0x1
#define _RCSTA3_FERR_MASK                                   0x4
#define _RCSTA3_ADDEN_POSN                                  0x3
#define _RCSTA3_ADDEN_POSITION                              0x3
#define _RCSTA3_ADDEN_SIZE                                  0x1
#define _RCSTA3_ADDEN_LENGTH                                0x1
#define _RCSTA3_ADDEN_MASK                                  0x8
#define _RCSTA3_CREN_POSN                                   0x4
#define _RCSTA3_CREN_POSITION                               0x4
#define _RCSTA3_CREN_SIZE                                   0x1
#define _RCSTA3_CREN_LENGTH                                 0x1
#define _RCSTA3_CREN_MASK                                   0x10
#define _RCSTA3_SREN_POSN                                   0x5
#define _RCSTA3_SREN_POSITION                               0x5
#define _RCSTA3_SREN_SIZE                                   0x1
#define _RCSTA3_SREN_LENGTH                                 0x1
#define _RCSTA3_SREN_MASK                                   0x20
#define _RCSTA3_RX9_POSN                                    0x6
#define _RCSTA3_RX9_POSITION                                0x6
#define _RCSTA3_RX9_SIZE                                    0x1
#define _RCSTA3_RX9_LENGTH                                  0x1
#define _RCSTA3_RX9_MASK                                    0x40
#define _RCSTA3_SPEN_POSN                                   0x7
#define _RCSTA3_SPEN_POSITION                               0x7
#define _RCSTA3_SPEN_SIZE                                   0x1
#define _RCSTA3_SPEN_LENGTH                                 0x1
#define _RCSTA3_SPEN_MASK                                   0x80
#define _RCSTA3_RCD83_POSN                                  0x0
#define _RCSTA3_RCD83_POSITION                              0x0
#define _RCSTA3_RCD83_SIZE                                  0x1
#define _RCSTA3_RCD83_LENGTH                                0x1
#define _RCSTA3_RCD83_MASK                                  0x1
#define _RCSTA3_RC8_92_POSN                                 0x6
#define _RCSTA3_RC8_92_POSITION                             0x6
#define _RCSTA3_RC8_92_SIZE                                 0x1
#define _RCSTA3_RC8_92_LENGTH                               0x1
#define _RCSTA3_RC8_92_MASK                                 0x40
#define _RCSTA3_RC93_POSN                                   0x6
#define _RCSTA3_RC93_POSITION                               0x6
#define _RCSTA3_RC93_SIZE                                   0x1
#define _RCSTA3_RC93_LENGTH                                 0x1
#define _RCSTA3_RC93_MASK                                   0x40

// Register: SPBRGH1
#define SPBRGH1 SPBRGH1
extern volatile unsigned char           SPBRGH1             __at(0xF30);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 0F30h");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0xF30);
#ifndef _LIB_BUILD
asm("SPBRGH equ 0F30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRGH1                :8;
    };
    struct {
        unsigned BRG8                   :1;
        unsigned BRG9                   :1;
        unsigned BRG10                  :1;
        unsigned BRG11                  :1;
        unsigned BRG12                  :1;
        unsigned BRG13                  :1;
        unsigned BRG14                  :1;
        unsigned BRG15                  :1;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0xF30);
// bitfield macros
#define _SPBRGH1_SPBRGH1_POSN                               0x0
#define _SPBRGH1_SPBRGH1_POSITION                           0x0
#define _SPBRGH1_SPBRGH1_SIZE                               0x8
#define _SPBRGH1_SPBRGH1_LENGTH                             0x8
#define _SPBRGH1_SPBRGH1_MASK                               0xFF
#define _SPBRGH1_BRG8_POSN                                  0x0
#define _SPBRGH1_BRG8_POSITION                              0x0
#define _SPBRGH1_BRG8_SIZE                                  0x1
#define _SPBRGH1_BRG8_LENGTH                                0x1
#define _SPBRGH1_BRG8_MASK                                  0x1
#define _SPBRGH1_BRG9_POSN                                  0x1
#define _SPBRGH1_BRG9_POSITION                              0x1
#define _SPBRGH1_BRG9_SIZE                                  0x1
#define _SPBRGH1_BRG9_LENGTH                                0x1
#define _SPBRGH1_BRG9_MASK                                  0x2
#define _SPBRGH1_BRG10_POSN                                 0x2
#define _SPBRGH1_BRG10_POSITION                             0x2
#define _SPBRGH1_BRG10_SIZE                                 0x1
#define _SPBRGH1_BRG10_LENGTH                               0x1
#define _SPBRGH1_BRG10_MASK                                 0x4
#define _SPBRGH1_BRG11_POSN                                 0x3
#define _SPBRGH1_BRG11_POSITION                             0x3
#define _SPBRGH1_BRG11_SIZE                                 0x1
#define _SPBRGH1_BRG11_LENGTH                               0x1
#define _SPBRGH1_BRG11_MASK                                 0x8
#define _SPBRGH1_BRG12_POSN                                 0x4
#define _SPBRGH1_BRG12_POSITION                             0x4
#define _SPBRGH1_BRG12_SIZE                                 0x1
#define _SPBRGH1_BRG12_LENGTH                               0x1
#define _SPBRGH1_BRG12_MASK                                 0x10
#define _SPBRGH1_BRG13_POSN                                 0x5
#define _SPBRGH1_BRG13_POSITION                             0x5
#define _SPBRGH1_BRG13_SIZE                                 0x1
#define _SPBRGH1_BRG13_LENGTH                               0x1
#define _SPBRGH1_BRG13_MASK                                 0x20
#define _SPBRGH1_BRG14_POSN                                 0x6
#define _SPBRGH1_BRG14_POSITION                             0x6
#define _SPBRGH1_BRG14_SIZE                                 0x1
#define _SPBRGH1_BRG14_LENGTH                               0x1
#define _SPBRGH1_BRG14_MASK                                 0x40
#define _SPBRGH1_BRG15_POSN                                 0x7
#define _SPBRGH1_BRG15_POSITION                             0x7
#define _SPBRGH1_BRG15_SIZE                                 0x1
#define _SPBRGH1_BRG15_LENGTH                               0x1
#define _SPBRGH1_BRG15_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SPBRGH1                :8;
    };
    struct {
        unsigned BRG8                   :1;
        unsigned BRG9                   :1;
        unsigned BRG10                  :1;
        unsigned BRG11                  :1;
        unsigned BRG12                  :1;
        unsigned BRG13                  :1;
        unsigned BRG14                  :1;
        unsigned BRG15                  :1;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0xF30);
// bitfield macros
#define _SPBRGH_SPBRGH1_POSN                                0x0
#define _SPBRGH_SPBRGH1_POSITION                            0x0
#define _SPBRGH_SPBRGH1_SIZE                                0x8
#define _SPBRGH_SPBRGH1_LENGTH                              0x8
#define _SPBRGH_SPBRGH1_MASK                                0xFF
#define _SPBRGH_BRG8_POSN                                   0x0
#define _SPBRGH_BRG8_POSITION                               0x0
#define _SPBRGH_BRG8_SIZE                                   0x1
#define _SPBRGH_BRG8_LENGTH                                 0x1
#define _SPBRGH_BRG8_MASK                                   0x1
#define _SPBRGH_BRG9_POSN                                   0x1
#define _SPBRGH_BRG9_POSITION                               0x1
#define _SPBRGH_BRG9_SIZE                                   0x1
#define _SPBRGH_BRG9_LENGTH                                 0x1
#define _SPBRGH_BRG9_MASK                                   0x2
#define _SPBRGH_BRG10_POSN                                  0x2
#define _SPBRGH_BRG10_POSITION                              0x2
#define _SPBRGH_BRG10_SIZE                                  0x1
#define _SPBRGH_BRG10_LENGTH                                0x1
#define _SPBRGH_BRG10_MASK                                  0x4
#define _SPBRGH_BRG11_POSN                                  0x3
#define _SPBRGH_BRG11_POSITION                              0x3
#define _SPBRGH_BRG11_SIZE                                  0x1
#define _SPBRGH_BRG11_LENGTH                                0x1
#define _SPBRGH_BRG11_MASK                                  0x8
#define _SPBRGH_BRG12_POSN                                  0x4
#define _SPBRGH_BRG12_POSITION                              0x4
#define _SPBRGH_BRG12_SIZE                                  0x1
#define _SPBRGH_BRG12_LENGTH                                0x1
#define _SPBRGH_BRG12_MASK                                  0x10
#define _SPBRGH_BRG13_POSN                                  0x5
#define _SPBRGH_BRG13_POSITION                              0x5
#define _SPBRGH_BRG13_SIZE                                  0x1
#define _SPBRGH_BRG13_LENGTH                                0x1
#define _SPBRGH_BRG13_MASK                                  0x20
#define _SPBRGH_BRG14_POSN                                  0x6
#define _SPBRGH_BRG14_POSITION                              0x6
#define _SPBRGH_BRG14_SIZE                                  0x1
#define _SPBRGH_BRG14_LENGTH                                0x1
#define _SPBRGH_BRG14_MASK                                  0x40
#define _SPBRGH_BRG15_POSN                                  0x7
#define _SPBRGH_BRG15_POSITION                              0x7
#define _SPBRGH_BRG15_SIZE                                  0x1
#define _SPBRGH_BRG15_LENGTH                                0x1
#define _SPBRGH_BRG15_MASK                                  0x80

// Register: BAUDCON2
#define BAUDCON2 BAUDCON2
extern volatile unsigned char           BAUDCON2            __at(0xF31);
#ifndef _LIB_BUILD
asm("BAUDCON2 equ 0F31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned IREN                   :1;
        unsigned BRG16                  :1;
        unsigned TXCKP                  :1;
        unsigned RXDTP                  :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN2                 :1;
        unsigned WUE2                   :1;
        unsigned                        :1;
        unsigned BRG162                 :1;
        unsigned SCKP2                  :1;
        unsigned DTRXP2                 :1;
        unsigned RCIDL2                 :1;
        unsigned ABDOVF2                :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP2                 :1;
        unsigned RXDTP2                 :1;
        unsigned RCMT2                  :1;
    };
} BAUDCON2bits_t;
extern volatile BAUDCON2bits_t BAUDCON2bits __at(0xF31);
// bitfield macros
#define _BAUDCON2_ABDEN_POSN                                0x0
#define _BAUDCON2_ABDEN_POSITION                            0x0
#define _BAUDCON2_ABDEN_SIZE                                0x1
#define _BAUDCON2_ABDEN_LENGTH                              0x1
#define _BAUDCON2_ABDEN_MASK                                0x1
#define _BAUDCON2_WUE_POSN                                  0x1
#define _BAUDCON2_WUE_POSITION                              0x1
#define _BAUDCON2_WUE_SIZE                                  0x1
#define _BAUDCON2_WUE_LENGTH                                0x1
#define _BAUDCON2_WUE_MASK                                  0x2
#define _BAUDCON2_IREN_POSN                                 0x2
#define _BAUDCON2_IREN_POSITION                             0x2
#define _BAUDCON2_IREN_SIZE                                 0x1
#define _BAUDCON2_IREN_LENGTH                               0x1
#define _BAUDCON2_IREN_MASK                                 0x4
#define _BAUDCON2_BRG16_POSN                                0x3
#define _BAUDCON2_BRG16_POSITION                            0x3
#define _BAUDCON2_BRG16_SIZE                                0x1
#define _BAUDCON2_BRG16_LENGTH                              0x1
#define _BAUDCON2_BRG16_MASK                                0x8
#define _BAUDCON2_TXCKP_POSN                                0x4
#define _BAUDCON2_TXCKP_POSITION                            0x4
#define _BAUDCON2_TXCKP_SIZE                                0x1
#define _BAUDCON2_TXCKP_LENGTH                              0x1
#define _BAUDCON2_TXCKP_MASK                                0x10
#define _BAUDCON2_RXDTP_POSN                                0x5
#define _BAUDCON2_RXDTP_POSITION                            0x5
#define _BAUDCON2_RXDTP_SIZE                                0x1
#define _BAUDCON2_RXDTP_LENGTH                              0x1
#define _BAUDCON2_RXDTP_MASK                                0x20
#define _BAUDCON2_RCIDL_POSN                                0x6
#define _BAUDCON2_RCIDL_POSITION                            0x6
#define _BAUDCON2_RCIDL_SIZE                                0x1
#define _BAUDCON2_RCIDL_LENGTH                              0x1
#define _BAUDCON2_RCIDL_MASK                                0x40
#define _BAUDCON2_ABDOVF_POSN                               0x7
#define _BAUDCON2_ABDOVF_POSITION                           0x7
#define _BAUDCON2_ABDOVF_SIZE                               0x1
#define _BAUDCON2_ABDOVF_LENGTH                             0x1
#define _BAUDCON2_ABDOVF_MASK                               0x80
#define _BAUDCON2_ABDEN2_POSN                               0x0
#define _BAUDCON2_ABDEN2_POSITION                           0x0
#define _BAUDCON2_ABDEN2_SIZE                               0x1
#define _BAUDCON2_ABDEN2_LENGTH                             0x1
#define _BAUDCON2_ABDEN2_MASK                               0x1
#define _BAUDCON2_WUE2_POSN                                 0x1
#define _BAUDCON2_WUE2_POSITION                             0x1
#define _BAUDCON2_WUE2_SIZE                                 0x1
#define _BAUDCON2_WUE2_LENGTH                               0x1
#define _BAUDCON2_WUE2_MASK                                 0x2
#define _BAUDCON2_BRG162_POSN                               0x3
#define _BAUDCON2_BRG162_POSITION                           0x3
#define _BAUDCON2_BRG162_SIZE                               0x1
#define _BAUDCON2_BRG162_LENGTH                             0x1
#define _BAUDCON2_BRG162_MASK                               0x8
#define _BAUDCON2_SCKP2_POSN                                0x4
#define _BAUDCON2_SCKP2_POSITION                            0x4
#define _BAUDCON2_SCKP2_SIZE                                0x1
#define _BAUDCON2_SCKP2_LENGTH                              0x1
#define _BAUDCON2_SCKP2_MASK                                0x10
#define _BAUDCON2_DTRXP2_POSN                               0x5
#define _BAUDCON2_DTRXP2_POSITION                           0x5
#define _BAUDCON2_DTRXP2_SIZE                               0x1
#define _BAUDCON2_DTRXP2_LENGTH                             0x1
#define _BAUDCON2_DTRXP2_MASK                               0x20
#define _BAUDCON2_RCIDL2_POSN                               0x6
#define _BAUDCON2_RCIDL2_POSITION                           0x6
#define _BAUDCON2_RCIDL2_SIZE                               0x1
#define _BAUDCON2_RCIDL2_LENGTH                             0x1
#define _BAUDCON2_RCIDL2_MASK                               0x40
#define _BAUDCON2_ABDOVF2_POSN                              0x7
#define _BAUDCON2_ABDOVF2_POSITION                          0x7
#define _BAUDCON2_ABDOVF2_SIZE                              0x1
#define _BAUDCON2_ABDOVF2_LENGTH                            0x1
#define _BAUDCON2_ABDOVF2_MASK                              0x80
#define _BAUDCON2_TXCKP2_POSN                               0x4
#define _BAUDCON2_TXCKP2_POSITION                           0x4
#define _BAUDCON2_TXCKP2_SIZE                               0x1
#define _BAUDCON2_TXCKP2_LENGTH                             0x1
#define _BAUDCON2_TXCKP2_MASK                               0x10
#define _BAUDCON2_RXDTP2_POSN                               0x5
#define _BAUDCON2_RXDTP2_POSITION                           0x5
#define _BAUDCON2_RXDTP2_SIZE                               0x1
#define _BAUDCON2_RXDTP2_LENGTH                             0x1
#define _BAUDCON2_RXDTP2_MASK                               0x20
#define _BAUDCON2_RCMT2_POSN                                0x6
#define _BAUDCON2_RCMT2_POSITION                            0x6
#define _BAUDCON2_RCMT2_SIZE                                0x1
#define _BAUDCON2_RCMT2_LENGTH                              0x1
#define _BAUDCON2_RCMT2_MASK                                0x40

// Register: TXSTA2
#define TXSTA2 TXSTA2
extern volatile unsigned char           TXSTA2              __at(0xF32);
#ifndef _LIB_BUILD
asm("TXSTA2 equ 0F32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned TXD82                  :1;
        unsigned                        :5;
        unsigned TX8_92                 :1;
    };
} TXSTA2bits_t;
extern volatile TXSTA2bits_t TXSTA2bits __at(0xF32);
// bitfield macros
#define _TXSTA2_TX9D_POSN                                   0x0
#define _TXSTA2_TX9D_POSITION                               0x0
#define _TXSTA2_TX9D_SIZE                                   0x1
#define _TXSTA2_TX9D_LENGTH                                 0x1
#define _TXSTA2_TX9D_MASK                                   0x1
#define _TXSTA2_TRMT_POSN                                   0x1
#define _TXSTA2_TRMT_POSITION                               0x1
#define _TXSTA2_TRMT_SIZE                                   0x1
#define _TXSTA2_TRMT_LENGTH                                 0x1
#define _TXSTA2_TRMT_MASK                                   0x2
#define _TXSTA2_BRGH_POSN                                   0x2
#define _TXSTA2_BRGH_POSITION                               0x2
#define _TXSTA2_BRGH_SIZE                                   0x1
#define _TXSTA2_BRGH_LENGTH                                 0x1
#define _TXSTA2_BRGH_MASK                                   0x4
#define _TXSTA2_SENDB_POSN                                  0x3
#define _TXSTA2_SENDB_POSITION                              0x3
#define _TXSTA2_SENDB_SIZE                                  0x1
#define _TXSTA2_SENDB_LENGTH                                0x1
#define _TXSTA2_SENDB_MASK                                  0x8
#define _TXSTA2_SYNC_POSN                                   0x4
#define _TXSTA2_SYNC_POSITION                               0x4
#define _TXSTA2_SYNC_SIZE                                   0x1
#define _TXSTA2_SYNC_LENGTH                                 0x1
#define _TXSTA2_SYNC_MASK                                   0x10
#define _TXSTA2_TXEN_POSN                                   0x5
#define _TXSTA2_TXEN_POSITION                               0x5
#define _TXSTA2_TXEN_SIZE                                   0x1
#define _TXSTA2_TXEN_LENGTH                                 0x1
#define _TXSTA2_TXEN_MASK                                   0x20
#define _TXSTA2_TX9_POSN                                    0x6
#define _TXSTA2_TX9_POSITION                                0x6
#define _TXSTA2_TX9_SIZE                                    0x1
#define _TXSTA2_TX9_LENGTH                                  0x1
#define _TXSTA2_TX9_MASK                                    0x40
#define _TXSTA2_CSRC_POSN                                   0x7
#define _TXSTA2_CSRC_POSITION                               0x7
#define _TXSTA2_CSRC_SIZE                                   0x1
#define _TXSTA2_CSRC_LENGTH                                 0x1
#define _TXSTA2_CSRC_MASK                                   0x80
#define _TXSTA2_TXD82_POSN                                  0x0
#define _TXSTA2_TXD82_POSITION                              0x0
#define _TXSTA2_TXD82_SIZE                                  0x1
#define _TXSTA2_TXD82_LENGTH                                0x1
#define _TXSTA2_TXD82_MASK                                  0x1
#define _TXSTA2_TX8_92_POSN                                 0x6
#define _TXSTA2_TX8_92_POSITION                             0x6
#define _TXSTA2_TX8_92_SIZE                                 0x1
#define _TXSTA2_TX8_92_LENGTH                               0x1
#define _TXSTA2_TX8_92_MASK                                 0x40

// Register: RCSTA2
#define RCSTA2 RCSTA2
extern volatile unsigned char           RCSTA2              __at(0xF33);
#ifndef _LIB_BUILD
asm("RCSTA2 equ 0F33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned RCD82                  :1;
        unsigned                        :5;
        unsigned RC8_92                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC92                   :1;
    };
} RCSTA2bits_t;
extern volatile RCSTA2bits_t RCSTA2bits __at(0xF33);
// bitfield macros
#define _RCSTA2_RX9D_POSN                                   0x0
#define _RCSTA2_RX9D_POSITION                               0x0
#define _RCSTA2_RX9D_SIZE                                   0x1
#define _RCSTA2_RX9D_LENGTH                                 0x1
#define _RCSTA2_RX9D_MASK                                   0x1
#define _RCSTA2_OERR_POSN                                   0x1
#define _RCSTA2_OERR_POSITION                               0x1
#define _RCSTA2_OERR_SIZE                                   0x1
#define _RCSTA2_OERR_LENGTH                                 0x1
#define _RCSTA2_OERR_MASK                                   0x2
#define _RCSTA2_FERR_POSN                                   0x2
#define _RCSTA2_FERR_POSITION                               0x2
#define _RCSTA2_FERR_SIZE                                   0x1
#define _RCSTA2_FERR_LENGTH                                 0x1
#define _RCSTA2_FERR_MASK                                   0x4
#define _RCSTA2_ADDEN_POSN                                  0x3
#define _RCSTA2_ADDEN_POSITION                              0x3
#define _RCSTA2_ADDEN_SIZE                                  0x1
#define _RCSTA2_ADDEN_LENGTH                                0x1
#define _RCSTA2_ADDEN_MASK                                  0x8
#define _RCSTA2_CREN_POSN                                   0x4
#define _RCSTA2_CREN_POSITION                               0x4
#define _RCSTA2_CREN_SIZE                                   0x1
#define _RCSTA2_CREN_LENGTH                                 0x1
#define _RCSTA2_CREN_MASK                                   0x10
#define _RCSTA2_SREN_POSN                                   0x5
#define _RCSTA2_SREN_POSITION                               0x5
#define _RCSTA2_SREN_SIZE                                   0x1
#define _RCSTA2_SREN_LENGTH                                 0x1
#define _RCSTA2_SREN_MASK                                   0x20
#define _RCSTA2_RX9_POSN                                    0x6
#define _RCSTA2_RX9_POSITION                                0x6
#define _RCSTA2_RX9_SIZE                                    0x1
#define _RCSTA2_RX9_LENGTH                                  0x1
#define _RCSTA2_RX9_MASK                                    0x40
#define _RCSTA2_SPEN_POSN                                   0x7
#define _RCSTA2_SPEN_POSITION                               0x7
#define _RCSTA2_SPEN_SIZE                                   0x1
#define _RCSTA2_SPEN_LENGTH                                 0x1
#define _RCSTA2_SPEN_MASK                                   0x80
#define _RCSTA2_RCD82_POSN                                  0x0
#define _RCSTA2_RCD82_POSITION                              0x0
#define _RCSTA2_RCD82_SIZE                                  0x1
#define _RCSTA2_RCD82_LENGTH                                0x1
#define _RCSTA2_RCD82_MASK                                  0x1
#define _RCSTA2_RC8_92_POSN                                 0x6
#define _RCSTA2_RC8_92_POSITION                             0x6
#define _RCSTA2_RC8_92_SIZE                                 0x1
#define _RCSTA2_RC8_92_LENGTH                               0x1
#define _RCSTA2_RC8_92_MASK                                 0x40
#define _RCSTA2_RC92_POSN                                   0x6
#define _RCSTA2_RC92_POSITION                               0x6
#define _RCSTA2_RC92_SIZE                                   0x1
#define _RCSTA2_RC92_LENGTH                                 0x1
#define _RCSTA2_RC92_MASK                                   0x40

// Register: CCPTMRS2
#define CCPTMRS2 CCPTMRS2
extern volatile unsigned char           CCPTMRS2            __at(0xF34);
#ifndef _LIB_BUILD
asm("CCPTMRS2 equ 0F34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C8TSEL                 :2;
        unsigned C9TSEL                 :1;
        unsigned                        :1;
        unsigned C10TSEL                :1;
    };
    struct {
        unsigned C8TSEL0                :1;
        unsigned C8TSEL1                :1;
        unsigned C9TSEL0                :1;
        unsigned                        :1;
        unsigned C10TSEL0               :1;
    };
} CCPTMRS2bits_t;
extern volatile CCPTMRS2bits_t CCPTMRS2bits __at(0xF34);
// bitfield macros
#define _CCPTMRS2_C8TSEL_POSN                               0x0
#define _CCPTMRS2_C8TSEL_POSITION                           0x0
#define _CCPTMRS2_C8TSEL_SIZE                               0x2
#define _CCPTMRS2_C8TSEL_LENGTH                             0x2
#define _CCPTMRS2_C8TSEL_MASK                               0x3
#define _CCPTMRS2_C9TSEL_POSN                               0x2
#define _CCPTMRS2_C9TSEL_POSITION                           0x2
#define _CCPTMRS2_C9TSEL_SIZE                               0x1
#define _CCPTMRS2_C9TSEL_LENGTH                             0x1
#define _CCPTMRS2_C9TSEL_MASK                               0x4
#define _CCPTMRS2_C10TSEL_POSN                              0x4
#define _CCPTMRS2_C10TSEL_POSITION                          0x4
#define _CCPTMRS2_C10TSEL_SIZE                              0x1
#define _CCPTMRS2_C10TSEL_LENGTH                            0x1
#define _CCPTMRS2_C10TSEL_MASK                              0x10
#define _CCPTMRS2_C8TSEL0_POSN                              0x0
#define _CCPTMRS2_C8TSEL0_POSITION                          0x0
#define _CCPTMRS2_C8TSEL0_SIZE                              0x1
#define _CCPTMRS2_C8TSEL0_LENGTH                            0x1
#define _CCPTMRS2_C8TSEL0_MASK                              0x1
#define _CCPTMRS2_C8TSEL1_POSN                              0x1
#define _CCPTMRS2_C8TSEL1_POSITION                          0x1
#define _CCPTMRS2_C8TSEL1_SIZE                              0x1
#define _CCPTMRS2_C8TSEL1_LENGTH                            0x1
#define _CCPTMRS2_C8TSEL1_MASK                              0x2
#define _CCPTMRS2_C9TSEL0_POSN                              0x2
#define _CCPTMRS2_C9TSEL0_POSITION                          0x2
#define _CCPTMRS2_C9TSEL0_SIZE                              0x1
#define _CCPTMRS2_C9TSEL0_LENGTH                            0x1
#define _CCPTMRS2_C9TSEL0_MASK                              0x4
#define _CCPTMRS2_C10TSEL0_POSN                             0x4
#define _CCPTMRS2_C10TSEL0_POSITION                         0x4
#define _CCPTMRS2_C10TSEL0_SIZE                             0x1
#define _CCPTMRS2_C10TSEL0_LENGTH                           0x1
#define _CCPTMRS2_C10TSEL0_MASK                             0x10

// Register: CCPTMRS1
#define CCPTMRS1 CCPTMRS1
extern volatile unsigned char           CCPTMRS1            __at(0xF35);
#ifndef _LIB_BUILD
asm("CCPTMRS1 equ 0F35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C4TSEL                 :2;
        unsigned C5TSEL                 :1;
        unsigned                        :1;
        unsigned C6TSEL                 :1;
        unsigned                        :1;
        unsigned C7TSEL                 :2;
    };
    struct {
        unsigned C4TSEL0                :1;
        unsigned C4TSEL1                :1;
        unsigned C5TSEL0                :1;
        unsigned                        :1;
        unsigned C6TSEL0                :1;
        unsigned                        :1;
        unsigned C7TSEL0                :1;
        unsigned C7TSEL1                :1;
    };
} CCPTMRS1bits_t;
extern volatile CCPTMRS1bits_t CCPTMRS1bits __at(0xF35);
// bitfield macros
#define _CCPTMRS1_C4TSEL_POSN                               0x0
#define _CCPTMRS1_C4TSEL_POSITION                           0x0
#define _CCPTMRS1_C4TSEL_SIZE                               0x2
#define _CCPTMRS1_C4TSEL_LENGTH                             0x2
#define _CCPTMRS1_C4TSEL_MASK                               0x3
#define _CCPTMRS1_C5TSEL_POSN                               0x2
#define _CCPTMRS1_C5TSEL_POSITION                           0x2
#define _CCPTMRS1_C5TSEL_SIZE                               0x1
#define _CCPTMRS1_C5TSEL_LENGTH                             0x1
#define _CCPTMRS1_C5TSEL_MASK                               0x4
#define _CCPTMRS1_C6TSEL_POSN                               0x4
#define _CCPTMRS1_C6TSEL_POSITION                           0x4
#define _CCPTMRS1_C6TSEL_SIZE                               0x1
#define _CCPTMRS1_C6TSEL_LENGTH                             0x1
#define _CCPTMRS1_C6TSEL_MASK                               0x10
#define _CCPTMRS1_C7TSEL_POSN                               0x6
#define _CCPTMRS1_C7TSEL_POSITION                           0x6
#define _CCPTMRS1_C7TSEL_SIZE                               0x2
#define _CCPTMRS1_C7TSEL_LENGTH                             0x2
#define _CCPTMRS1_C7TSEL_MASK                               0xC0
#define _CCPTMRS1_C4TSEL0_POSN                              0x0
#define _CCPTMRS1_C4TSEL0_POSITION                          0x0
#define _CCPTMRS1_C4TSEL0_SIZE                              0x1
#define _CCPTMRS1_C4TSEL0_LENGTH                            0x1
#define _CCPTMRS1_C4TSEL0_MASK                              0x1
#define _CCPTMRS1_C4TSEL1_POSN                              0x1
#define _CCPTMRS1_C4TSEL1_POSITION                          0x1
#define _CCPTMRS1_C4TSEL1_SIZE                              0x1
#define _CCPTMRS1_C4TSEL1_LENGTH                            0x1
#define _CCPTMRS1_C4TSEL1_MASK                              0x2
#define _CCPTMRS1_C5TSEL0_POSN                              0x2
#define _CCPTMRS1_C5TSEL0_POSITION                          0x2
#define _CCPTMRS1_C5TSEL0_SIZE                              0x1
#define _CCPTMRS1_C5TSEL0_LENGTH                            0x1
#define _CCPTMRS1_C5TSEL0_MASK                              0x4
#define _CCPTMRS1_C6TSEL0_POSN                              0x4
#define _CCPTMRS1_C6TSEL0_POSITION                          0x4
#define _CCPTMRS1_C6TSEL0_SIZE                              0x1
#define _CCPTMRS1_C6TSEL0_LENGTH                            0x1
#define _CCPTMRS1_C6TSEL0_MASK                              0x10
#define _CCPTMRS1_C7TSEL0_POSN                              0x6
#define _CCPTMRS1_C7TSEL0_POSITION                          0x6
#define _CCPTMRS1_C7TSEL0_SIZE                              0x1
#define _CCPTMRS1_C7TSEL0_LENGTH                            0x1
#define _CCPTMRS1_C7TSEL0_MASK                              0x40
#define _CCPTMRS1_C7TSEL1_POSN                              0x7
#define _CCPTMRS1_C7TSEL1_POSITION                          0x7
#define _CCPTMRS1_C7TSEL1_SIZE                              0x1
#define _CCPTMRS1_C7TSEL1_LENGTH                            0x1
#define _CCPTMRS1_C7TSEL1_MASK                              0x80

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0xF36);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 0F36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :3;
        unsigned C2TSEL                 :3;
        unsigned C3TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C1TSEL2                :1;
        unsigned C2TSEL0                :1;
        unsigned C2TSEL1                :1;
        unsigned C2TSEL2                :1;
        unsigned C3TSEL0                :1;
        unsigned C3TSEL1                :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0xF36);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x3
#define _CCPTMRS0_C1TSEL_LENGTH                             0x3
#define _CCPTMRS0_C1TSEL_MASK                               0x7
#define _CCPTMRS0_C2TSEL_POSN                               0x3
#define _CCPTMRS0_C2TSEL_POSITION                           0x3
#define _CCPTMRS0_C2TSEL_SIZE                               0x3
#define _CCPTMRS0_C2TSEL_LENGTH                             0x3
#define _CCPTMRS0_C2TSEL_MASK                               0x38
#define _CCPTMRS0_C3TSEL_POSN                               0x6
#define _CCPTMRS0_C3TSEL_POSITION                           0x6
#define _CCPTMRS0_C3TSEL_SIZE                               0x2
#define _CCPTMRS0_C3TSEL_LENGTH                             0x2
#define _CCPTMRS0_C3TSEL_MASK                               0xC0
#define _CCPTMRS0_C1TSEL0_POSN                              0x0
#define _CCPTMRS0_C1TSEL0_POSITION                          0x0
#define _CCPTMRS0_C1TSEL0_SIZE                              0x1
#define _CCPTMRS0_C1TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL0_MASK                              0x1
#define _CCPTMRS0_C1TSEL1_POSN                              0x1
#define _CCPTMRS0_C1TSEL1_POSITION                          0x1
#define _CCPTMRS0_C1TSEL1_SIZE                              0x1
#define _CCPTMRS0_C1TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL1_MASK                              0x2
#define _CCPTMRS0_C1TSEL2_POSN                              0x2
#define _CCPTMRS0_C1TSEL2_POSITION                          0x2
#define _CCPTMRS0_C1TSEL2_SIZE                              0x1
#define _CCPTMRS0_C1TSEL2_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL2_MASK                              0x4
#define _CCPTMRS0_C2TSEL0_POSN                              0x3
#define _CCPTMRS0_C2TSEL0_POSITION                          0x3
#define _CCPTMRS0_C2TSEL0_SIZE                              0x1
#define _CCPTMRS0_C2TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL0_MASK                              0x8
#define _CCPTMRS0_C2TSEL1_POSN                              0x4
#define _CCPTMRS0_C2TSEL1_POSITION                          0x4
#define _CCPTMRS0_C2TSEL1_SIZE                              0x1
#define _CCPTMRS0_C2TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL1_MASK                              0x10
#define _CCPTMRS0_C2TSEL2_POSN                              0x5
#define _CCPTMRS0_C2TSEL2_POSITION                          0x5
#define _CCPTMRS0_C2TSEL2_SIZE                              0x1
#define _CCPTMRS0_C2TSEL2_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL2_MASK                              0x20
#define _CCPTMRS0_C3TSEL0_POSN                              0x6
#define _CCPTMRS0_C3TSEL0_POSITION                          0x6
#define _CCPTMRS0_C3TSEL0_SIZE                              0x1
#define _CCPTMRS0_C3TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL0_MASK                              0x40
#define _CCPTMRS0_C3TSEL1_POSN                              0x7
#define _CCPTMRS0_C3TSEL1_POSITION                          0x7
#define _CCPTMRS0_C3TSEL1_SIZE                              0x1
#define _CCPTMRS0_C3TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL1_MASK                              0x80

// Register: CM3CON
#define CM3CON CM3CON
extern volatile unsigned char           CM3CON              __at(0xF37);
#ifndef _LIB_BUILD
asm("CM3CON equ 0F37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCH                    :2;
        unsigned CREF                   :1;
        unsigned EVPOL                  :2;
        unsigned CPOL                   :1;
        unsigned COE                    :1;
        unsigned CON                    :1;
    };
    struct {
        unsigned CCH0                   :1;
        unsigned CCH1                   :1;
        unsigned                        :1;
        unsigned EVPOL0                 :1;
        unsigned EVPOL1                 :1;
    };
    struct {
        unsigned CCH03                  :1;
        unsigned CCH13                  :1;
        unsigned CREF3                  :1;
        unsigned EVPOL03                :1;
        unsigned EVPOL13                :1;
        unsigned CPOL3                  :1;
        unsigned COE3                   :1;
        unsigned CON3                   :1;
    };
} CM3CONbits_t;
extern volatile CM3CONbits_t CM3CONbits __at(0xF37);
// bitfield macros
#define _CM3CON_CCH_POSN                                    0x0
#define _CM3CON_CCH_POSITION                                0x0
#define _CM3CON_CCH_SIZE                                    0x2
#define _CM3CON_CCH_LENGTH                                  0x2
#define _CM3CON_CCH_MASK                                    0x3
#define _CM3CON_CREF_POSN                                   0x2
#define _CM3CON_CREF_POSITION                               0x2
#define _CM3CON_CREF_SIZE                                   0x1
#define _CM3CON_CREF_LENGTH                                 0x1
#define _CM3CON_CREF_MASK                                   0x4
#define _CM3CON_EVPOL_POSN                                  0x3
#define _CM3CON_EVPOL_POSITION                              0x3
#define _CM3CON_EVPOL_SIZE                                  0x2
#define _CM3CON_EVPOL_LENGTH                                0x2
#define _CM3CON_EVPOL_MASK                                  0x18
#define _CM3CON_CPOL_POSN                                   0x5
#define _CM3CON_CPOL_POSITION                               0x5
#define _CM3CON_CPOL_SIZE                                   0x1
#define _CM3CON_CPOL_LENGTH                                 0x1
#define _CM3CON_CPOL_MASK                                   0x20
#define _CM3CON_COE_POSN                                    0x6
#define _CM3CON_COE_POSITION                                0x6
#define _CM3CON_COE_SIZE                                    0x1
#define _CM3CON_COE_LENGTH                                  0x1
#define _CM3CON_COE_MASK                                    0x40
#define _CM3CON_CON_POSN                                    0x7
#define _CM3CON_CON_POSITION                                0x7
#define _CM3CON_CON_SIZE                                    0x1
#define _CM3CON_CON_LENGTH                                  0x1
#define _CM3CON_CON_MASK                                    0x80
#define _CM3CON_CCH0_POSN                                   0x0
#define _CM3CON_CCH0_POSITION                               0x0
#define _CM3CON_CCH0_SIZE                                   0x1
#define _CM3CON_CCH0_LENGTH                                 0x1
#define _CM3CON_CCH0_MASK                                   0x1
#define _CM3CON_CCH1_POSN                                   0x1
#define _CM3CON_CCH1_POSITION                               0x1
#define _CM3CON_CCH1_SIZE                                   0x1
#define _CM3CON_CCH1_LENGTH                                 0x1
#define _CM3CON_CCH1_MASK                                   0x2
#define _CM3CON_EVPOL0_POSN                                 0x3
#define _CM3CON_EVPOL0_POSITION                             0x3
#define _CM3CON_EVPOL0_SIZE                                 0x1
#define _CM3CON_EVPOL0_LENGTH                               0x1
#define _CM3CON_EVPOL0_MASK                                 0x8
#define _CM3CON_EVPOL1_POSN                                 0x4
#define _CM3CON_EVPOL1_POSITION                             0x4
#define _CM3CON_EVPOL1_SIZE                                 0x1
#define _CM3CON_EVPOL1_LENGTH                               0x1
#define _CM3CON_EVPOL1_MASK                                 0x10
#define _CM3CON_CCH03_POSN                                  0x0
#define _CM3CON_CCH03_POSITION                              0x0
#define _CM3CON_CCH03_SIZE                                  0x1
#define _CM3CON_CCH03_LENGTH                                0x1
#define _CM3CON_CCH03_MASK                                  0x1
#define _CM3CON_CCH13_POSN                                  0x1
#define _CM3CON_CCH13_POSITION                              0x1
#define _CM3CON_CCH13_SIZE                                  0x1
#define _CM3CON_CCH13_LENGTH                                0x1
#define _CM3CON_CCH13_MASK                                  0x2
#define _CM3CON_CREF3_POSN                                  0x2
#define _CM3CON_CREF3_POSITION                              0x2
#define _CM3CON_CREF3_SIZE                                  0x1
#define _CM3CON_CREF3_LENGTH                                0x1
#define _CM3CON_CREF3_MASK                                  0x4
#define _CM3CON_EVPOL03_POSN                                0x3
#define _CM3CON_EVPOL03_POSITION                            0x3
#define _CM3CON_EVPOL03_SIZE                                0x1
#define _CM3CON_EVPOL03_LENGTH                              0x1
#define _CM3CON_EVPOL03_MASK                                0x8
#define _CM3CON_EVPOL13_POSN                                0x4
#define _CM3CON_EVPOL13_POSITION                            0x4
#define _CM3CON_EVPOL13_SIZE                                0x1
#define _CM3CON_EVPOL13_LENGTH                              0x1
#define _CM3CON_EVPOL13_MASK                                0x10
#define _CM3CON_CPOL3_POSN                                  0x5
#define _CM3CON_CPOL3_POSITION                              0x5
#define _CM3CON_CPOL3_SIZE                                  0x1
#define _CM3CON_CPOL3_LENGTH                                0x1
#define _CM3CON_CPOL3_MASK                                  0x20
#define _CM3CON_COE3_POSN                                   0x6
#define _CM3CON_COE3_POSITION                               0x6
#define _CM3CON_COE3_SIZE                                   0x1
#define _CM3CON_COE3_LENGTH                                 0x1
#define _CM3CON_COE3_MASK                                   0x40
#define _CM3CON_CON3_POSN                                   0x7
#define _CM3CON_CON3_POSITION                               0x7
#define _CM3CON_CON3_SIZE                                   0x1
#define _CM3CON_CON3_LENGTH                                 0x1
#define _CM3CON_CON3_MASK                                   0x80

// Register: CM2CON
#define CM2CON CM2CON
extern volatile unsigned char           CM2CON              __at(0xF38);
#ifndef _LIB_BUILD
asm("CM2CON equ 0F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCH                    :2;
        unsigned CREF                   :1;
        unsigned EVPOL                  :2;
        unsigned CPOL                   :1;
        unsigned COE                    :1;
        unsigned CON                    :1;
    };
    struct {
        unsigned CCH0                   :1;
        unsigned CCH1                   :1;
        unsigned                        :1;
        unsigned EVPOL0                 :1;
        unsigned EVPOL1                 :1;
    };
    struct {
        unsigned CCH02                  :1;
        unsigned CCH12                  :1;
        unsigned CREF2                  :1;
        unsigned EVPOL02                :1;
        unsigned EVPOL12                :1;
        unsigned CPOL2                  :1;
        unsigned COE2                   :1;
        unsigned CON2                   :1;
    };
} CM2CONbits_t;
extern volatile CM2CONbits_t CM2CONbits __at(0xF38);
// bitfield macros
#define _CM2CON_CCH_POSN                                    0x0
#define _CM2CON_CCH_POSITION                                0x0
#define _CM2CON_CCH_SIZE                                    0x2
#define _CM2CON_CCH_LENGTH                                  0x2
#define _CM2CON_CCH_MASK                                    0x3
#define _CM2CON_CREF_POSN                                   0x2
#define _CM2CON_CREF_POSITION                               0x2
#define _CM2CON_CREF_SIZE                                   0x1
#define _CM2CON_CREF_LENGTH                                 0x1
#define _CM2CON_CREF_MASK                                   0x4
#define _CM2CON_EVPOL_POSN                                  0x3
#define _CM2CON_EVPOL_POSITION                              0x3
#define _CM2CON_EVPOL_SIZE                                  0x2
#define _CM2CON_EVPOL_LENGTH                                0x2
#define _CM2CON_EVPOL_MASK                                  0x18
#define _CM2CON_CPOL_POSN                                   0x5
#define _CM2CON_CPOL_POSITION                               0x5
#define _CM2CON_CPOL_SIZE                                   0x1
#define _CM2CON_CPOL_LENGTH                                 0x1
#define _CM2CON_CPOL_MASK                                   0x20
#define _CM2CON_COE_POSN                                    0x6
#define _CM2CON_COE_POSITION                                0x6
#define _CM2CON_COE_SIZE                                    0x1
#define _CM2CON_COE_LENGTH                                  0x1
#define _CM2CON_COE_MASK                                    0x40
#define _CM2CON_CON_POSN                                    0x7
#define _CM2CON_CON_POSITION                                0x7
#define _CM2CON_CON_SIZE                                    0x1
#define _CM2CON_CON_LENGTH                                  0x1
#define _CM2CON_CON_MASK                                    0x80
#define _CM2CON_CCH0_POSN                                   0x0
#define _CM2CON_CCH0_POSITION                               0x0
#define _CM2CON_CCH0_SIZE                                   0x1
#define _CM2CON_CCH0_LENGTH                                 0x1
#define _CM2CON_CCH0_MASK                                   0x1
#define _CM2CON_CCH1_POSN                                   0x1
#define _CM2CON_CCH1_POSITION                               0x1
#define _CM2CON_CCH1_SIZE                                   0x1
#define _CM2CON_CCH1_LENGTH                                 0x1
#define _CM2CON_CCH1_MASK                                   0x2
#define _CM2CON_EVPOL0_POSN                                 0x3
#define _CM2CON_EVPOL0_POSITION                             0x3
#define _CM2CON_EVPOL0_SIZE                                 0x1
#define _CM2CON_EVPOL0_LENGTH                               0x1
#define _CM2CON_EVPOL0_MASK                                 0x8
#define _CM2CON_EVPOL1_POSN                                 0x4
#define _CM2CON_EVPOL1_POSITION                             0x4
#define _CM2CON_EVPOL1_SIZE                                 0x1
#define _CM2CON_EVPOL1_LENGTH                               0x1
#define _CM2CON_EVPOL1_MASK                                 0x10
#define _CM2CON_CCH02_POSN                                  0x0
#define _CM2CON_CCH02_POSITION                              0x0
#define _CM2CON_CCH02_SIZE                                  0x1
#define _CM2CON_CCH02_LENGTH                                0x1
#define _CM2CON_CCH02_MASK                                  0x1
#define _CM2CON_CCH12_POSN                                  0x1
#define _CM2CON_CCH12_POSITION                              0x1
#define _CM2CON_CCH12_SIZE                                  0x1
#define _CM2CON_CCH12_LENGTH                                0x1
#define _CM2CON_CCH12_MASK                                  0x2
#define _CM2CON_CREF2_POSN                                  0x2
#define _CM2CON_CREF2_POSITION                              0x2
#define _CM2CON_CREF2_SIZE                                  0x1
#define _CM2CON_CREF2_LENGTH                                0x1
#define _CM2CON_CREF2_MASK                                  0x4
#define _CM2CON_EVPOL02_POSN                                0x3
#define _CM2CON_EVPOL02_POSITION                            0x3
#define _CM2CON_EVPOL02_SIZE                                0x1
#define _CM2CON_EVPOL02_LENGTH                              0x1
#define _CM2CON_EVPOL02_MASK                                0x8
#define _CM2CON_EVPOL12_POSN                                0x4
#define _CM2CON_EVPOL12_POSITION                            0x4
#define _CM2CON_EVPOL12_SIZE                                0x1
#define _CM2CON_EVPOL12_LENGTH                              0x1
#define _CM2CON_EVPOL12_MASK                                0x10
#define _CM2CON_CPOL2_POSN                                  0x5
#define _CM2CON_CPOL2_POSITION                              0x5
#define _CM2CON_CPOL2_SIZE                                  0x1
#define _CM2CON_CPOL2_LENGTH                                0x1
#define _CM2CON_CPOL2_MASK                                  0x20
#define _CM2CON_COE2_POSN                                   0x6
#define _CM2CON_COE2_POSITION                               0x6
#define _CM2CON_COE2_SIZE                                   0x1
#define _CM2CON_COE2_LENGTH                                 0x1
#define _CM2CON_COE2_MASK                                   0x40
#define _CM2CON_CON2_POSN                                   0x7
#define _CM2CON_CON2_POSITION                               0x7
#define _CM2CON_CON2_SIZE                                   0x1
#define _CM2CON_CON2_LENGTH                                 0x1
#define _CM2CON_CON2_MASK                                   0x80

// Register: SSP2CON3
#define SSP2CON3 SSP2CON3
extern volatile unsigned char           SSP2CON3            __at(0xF39);
#ifndef _LIB_BUILD
asm("SSP2CON3 equ 0F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP2CON3bits_t;
extern volatile SSP2CON3bits_t SSP2CON3bits __at(0xF39);
// bitfield macros
#define _SSP2CON3_DHEN_POSN                                 0x0
#define _SSP2CON3_DHEN_POSITION                             0x0
#define _SSP2CON3_DHEN_SIZE                                 0x1
#define _SSP2CON3_DHEN_LENGTH                               0x1
#define _SSP2CON3_DHEN_MASK                                 0x1
#define _SSP2CON3_AHEN_POSN                                 0x1
#define _SSP2CON3_AHEN_POSITION                             0x1
#define _SSP2CON3_AHEN_SIZE                                 0x1
#define _SSP2CON3_AHEN_LENGTH                               0x1
#define _SSP2CON3_AHEN_MASK                                 0x2
#define _SSP2CON3_SBCDE_POSN                                0x2
#define _SSP2CON3_SBCDE_POSITION                            0x2
#define _SSP2CON3_SBCDE_SIZE                                0x1
#define _SSP2CON3_SBCDE_LENGTH                              0x1
#define _SSP2CON3_SBCDE_MASK                                0x4
#define _SSP2CON3_SDAHT_POSN                                0x3
#define _SSP2CON3_SDAHT_POSITION                            0x3
#define _SSP2CON3_SDAHT_SIZE                                0x1
#define _SSP2CON3_SDAHT_LENGTH                              0x1
#define _SSP2CON3_SDAHT_MASK                                0x8
#define _SSP2CON3_BOEN_POSN                                 0x4
#define _SSP2CON3_BOEN_POSITION                             0x4
#define _SSP2CON3_BOEN_SIZE                                 0x1
#define _SSP2CON3_BOEN_LENGTH                               0x1
#define _SSP2CON3_BOEN_MASK                                 0x10
#define _SSP2CON3_SCIE_POSN                                 0x5
#define _SSP2CON3_SCIE_POSITION                             0x5
#define _SSP2CON3_SCIE_SIZE                                 0x1
#define _SSP2CON3_SCIE_LENGTH                               0x1
#define _SSP2CON3_SCIE_MASK                                 0x20
#define _SSP2CON3_PCIE_POSN                                 0x6
#define _SSP2CON3_PCIE_POSITION                             0x6
#define _SSP2CON3_PCIE_SIZE                                 0x1
#define _SSP2CON3_PCIE_LENGTH                               0x1
#define _SSP2CON3_PCIE_MASK                                 0x40
#define _SSP2CON3_ACKTIM_POSN                               0x7
#define _SSP2CON3_ACKTIM_POSITION                           0x7
#define _SSP2CON3_ACKTIM_SIZE                               0x1
#define _SSP2CON3_ACKTIM_LENGTH                             0x1
#define _SSP2CON3_ACKTIM_MASK                               0x80

// Register: T8CON
#define T8CON T8CON
extern volatile unsigned char           T8CON               __at(0xF3A);
#ifndef _LIB_BUILD
asm("T8CON equ 0F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T8CKPS                 :2;
        unsigned TMR8ON                 :1;
        unsigned T8OUTPS                :4;
    };
    struct {
        unsigned T8CKPS0                :1;
        unsigned T8CKPS1                :1;
        unsigned                        :1;
        unsigned T8OUTPS0               :1;
        unsigned T8OUTPS1               :1;
        unsigned T8OUTPS2               :1;
        unsigned T8OUTPS3               :1;
    };
} T8CONbits_t;
extern volatile T8CONbits_t T8CONbits __at(0xF3A);
// bitfield macros
#define _T8CON_T8CKPS_POSN                                  0x0
#define _T8CON_T8CKPS_POSITION                              0x0
#define _T8CON_T8CKPS_SIZE                                  0x2
#define _T8CON_T8CKPS_LENGTH                                0x2
#define _T8CON_T8CKPS_MASK                                  0x3
#define _T8CON_TMR8ON_POSN                                  0x2
#define _T8CON_TMR8ON_POSITION                              0x2
#define _T8CON_TMR8ON_SIZE                                  0x1
#define _T8CON_TMR8ON_LENGTH                                0x1
#define _T8CON_TMR8ON_MASK                                  0x4
#define _T8CON_T8OUTPS_POSN                                 0x3
#define _T8CON_T8OUTPS_POSITION                             0x3
#define _T8CON_T8OUTPS_SIZE                                 0x4
#define _T8CON_T8OUTPS_LENGTH                               0x4
#define _T8CON_T8OUTPS_MASK                                 0x78
#define _T8CON_T8CKPS0_POSN                                 0x0
#define _T8CON_T8CKPS0_POSITION                             0x0
#define _T8CON_T8CKPS0_SIZE                                 0x1
#define _T8CON_T8CKPS0_LENGTH                               0x1
#define _T8CON_T8CKPS0_MASK                                 0x1
#define _T8CON_T8CKPS1_POSN                                 0x1
#define _T8CON_T8CKPS1_POSITION                             0x1
#define _T8CON_T8CKPS1_SIZE                                 0x1
#define _T8CON_T8CKPS1_LENGTH                               0x1
#define _T8CON_T8CKPS1_MASK                                 0x2
#define _T8CON_T8OUTPS0_POSN                                0x3
#define _T8CON_T8OUTPS0_POSITION                            0x3
#define _T8CON_T8OUTPS0_SIZE                                0x1
#define _T8CON_T8OUTPS0_LENGTH                              0x1
#define _T8CON_T8OUTPS0_MASK                                0x8
#define _T8CON_T8OUTPS1_POSN                                0x4
#define _T8CON_T8OUTPS1_POSITION                            0x4
#define _T8CON_T8OUTPS1_SIZE                                0x1
#define _T8CON_T8OUTPS1_LENGTH                              0x1
#define _T8CON_T8OUTPS1_MASK                                0x10
#define _T8CON_T8OUTPS2_POSN                                0x5
#define _T8CON_T8OUTPS2_POSITION                            0x5
#define _T8CON_T8OUTPS2_SIZE                                0x1
#define _T8CON_T8OUTPS2_LENGTH                              0x1
#define _T8CON_T8OUTPS2_MASK                                0x20
#define _T8CON_T8OUTPS3_POSN                                0x6
#define _T8CON_T8OUTPS3_POSITION                            0x6
#define _T8CON_T8OUTPS3_SIZE                                0x1
#define _T8CON_T8OUTPS3_LENGTH                              0x1
#define _T8CON_T8OUTPS3_MASK                                0x40

// Register: PR8
#define PR8 PR8
extern volatile unsigned char           PR8                 __at(0xF3B);
#ifndef _LIB_BUILD
asm("PR8 equ 0F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR8                    :8;
    };
} PR8bits_t;
extern volatile PR8bits_t PR8bits __at(0xF3B);
// bitfield macros
#define _PR8_PR8_POSN                                       0x0
#define _PR8_PR8_POSITION                                   0x0
#define _PR8_PR8_SIZE                                       0x8
#define _PR8_PR8_LENGTH                                     0x8
#define _PR8_PR8_MASK                                       0xFF

// Register: TMR8
#define TMR8 TMR8
extern volatile unsigned char           TMR8                __at(0xF3C);
#ifndef _LIB_BUILD
asm("TMR8 equ 0F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR8                   :8;
    };
} TMR8bits_t;
extern volatile TMR8bits_t TMR8bits __at(0xF3C);
// bitfield macros
#define _TMR8_TMR8_POSN                                     0x0
#define _TMR8_TMR8_POSITION                                 0x0
#define _TMR8_TMR8_SIZE                                     0x8
#define _TMR8_TMR8_LENGTH                                   0x8
#define _TMR8_TMR8_MASK                                     0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0xF3D);
#ifndef _LIB_BUILD
asm("T6CON equ 0F3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T6CKPS                 :2;
        unsigned TMR6ON                 :1;
        unsigned T6OUTPS                :4;
    };
    struct {
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned                        :1;
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0xF3D);
// bitfield macros
#define _T6CON_T6CKPS_POSN                                  0x0
#define _T6CON_T6CKPS_POSITION                              0x0
#define _T6CON_T6CKPS_SIZE                                  0x2
#define _T6CON_T6CKPS_LENGTH                                0x2
#define _T6CON_T6CKPS_MASK                                  0x3
#define _T6CON_TMR6ON_POSN                                  0x2
#define _T6CON_TMR6ON_POSITION                              0x2
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x4
#define _T6CON_T6OUTPS_POSN                                 0x3
#define _T6CON_T6OUTPS_POSITION                             0x3
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0x78
#define _T6CON_T6CKPS0_POSN                                 0x0
#define _T6CON_T6CKPS0_POSITION                             0x0
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x1
#define _T6CON_T6CKPS1_POSN                                 0x1
#define _T6CON_T6CKPS1_POSITION                             0x1
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x2
#define _T6CON_T6OUTPS0_POSN                                0x3
#define _T6CON_T6OUTPS0_POSITION                            0x3
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x8
#define _T6CON_T6OUTPS1_POSN                                0x4
#define _T6CON_T6OUTPS1_POSITION                            0x4
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x10
#define _T6CON_T6OUTPS2_POSN                                0x5
#define _T6CON_T6OUTPS2_POSITION                            0x5
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x20
#define _T6CON_T6OUTPS3_POSN                                0x6
#define _T6CON_T6OUTPS3_POSITION                            0x6
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x40

// Register: PR6
#define PR6 PR6
extern volatile unsigned char           PR6                 __at(0xF3E);
#ifndef _LIB_BUILD
asm("PR6 equ 0F3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0xF3E);
// bitfield macros
#define _PR6_PR6_POSN                                       0x0
#define _PR6_PR6_POSITION                                   0x0
#define _PR6_PR6_SIZE                                       0x8
#define _PR6_PR6_LENGTH                                     0x8
#define _PR6_PR6_MASK                                       0xFF

// Register: TMR6
#define TMR6 TMR6
extern volatile unsigned char           TMR6                __at(0xF3F);
#ifndef _LIB_BUILD
asm("TMR6 equ 0F3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0xF3F);
// bitfield macros
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: CCP10CON
#define CCP10CON CCP10CON
extern volatile unsigned char           CCP10CON            __at(0xF40);
#ifndef _LIB_BUILD
asm("CCP10CON equ 0F40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP10M                 :4;
        unsigned DC10B                  :2;
    };
    struct {
        unsigned CCP10M0                :1;
        unsigned CCP10M1                :1;
        unsigned CCP10M2                :1;
        unsigned CCP10M3                :1;
        unsigned DC10B0                 :1;
        unsigned DC10B1                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP10Y                 :1;
        unsigned CCP10X                 :1;
    };
} CCP10CONbits_t;
extern volatile CCP10CONbits_t CCP10CONbits __at(0xF40);
// bitfield macros
#define _CCP10CON_CCP10M_POSN                               0x0
#define _CCP10CON_CCP10M_POSITION                           0x0
#define _CCP10CON_CCP10M_SIZE                               0x4
#define _CCP10CON_CCP10M_LENGTH                             0x4
#define _CCP10CON_CCP10M_MASK                               0xF
#define _CCP10CON_DC10B_POSN                                0x4
#define _CCP10CON_DC10B_POSITION                            0x4
#define _CCP10CON_DC10B_SIZE                                0x2
#define _CCP10CON_DC10B_LENGTH                              0x2
#define _CCP10CON_DC10B_MASK                                0x30
#define _CCP10CON_CCP10M0_POSN                              0x0
#define _CCP10CON_CCP10M0_POSITION                          0x0
#define _CCP10CON_CCP10M0_SIZE                              0x1
#define _CCP10CON_CCP10M0_LENGTH                            0x1
#define _CCP10CON_CCP10M0_MASK                              0x1
#define _CCP10CON_CCP10M1_POSN                              0x1
#define _CCP10CON_CCP10M1_POSITION                          0x1
#define _CCP10CON_CCP10M1_SIZE                              0x1
#define _CCP10CON_CCP10M1_LENGTH                            0x1
#define _CCP10CON_CCP10M1_MASK                              0x2
#define _CCP10CON_CCP10M2_POSN                              0x2
#define _CCP10CON_CCP10M2_POSITION                          0x2
#define _CCP10CON_CCP10M2_SIZE                              0x1
#define _CCP10CON_CCP10M2_LENGTH                            0x1
#define _CCP10CON_CCP10M2_MASK                              0x4
#define _CCP10CON_CCP10M3_POSN                              0x3
#define _CCP10CON_CCP10M3_POSITION                          0x3
#define _CCP10CON_CCP10M3_SIZE                              0x1
#define _CCP10CON_CCP10M3_LENGTH                            0x1
#define _CCP10CON_CCP10M3_MASK                              0x8
#define _CCP10CON_DC10B0_POSN                               0x4
#define _CCP10CON_DC10B0_POSITION                           0x4
#define _CCP10CON_DC10B0_SIZE                               0x1
#define _CCP10CON_DC10B0_LENGTH                             0x1
#define _CCP10CON_DC10B0_MASK                               0x10
#define _CCP10CON_DC10B1_POSN                               0x5
#define _CCP10CON_DC10B1_POSITION                           0x5
#define _CCP10CON_DC10B1_SIZE                               0x1
#define _CCP10CON_DC10B1_LENGTH                             0x1
#define _CCP10CON_DC10B1_MASK                               0x20
#define _CCP10CON_CCP10Y_POSN                               0x4
#define _CCP10CON_CCP10Y_POSITION                           0x4
#define _CCP10CON_CCP10Y_SIZE                               0x1
#define _CCP10CON_CCP10Y_LENGTH                             0x1
#define _CCP10CON_CCP10Y_MASK                               0x10
#define _CCP10CON_CCP10X_POSN                               0x5
#define _CCP10CON_CCP10X_POSITION                           0x5
#define _CCP10CON_CCP10X_SIZE                               0x1
#define _CCP10CON_CCP10X_LENGTH                             0x1
#define _CCP10CON_CCP10X_MASK                               0x20

// Register: CCPR10
#define CCPR10 CCPR10
extern volatile unsigned short          CCPR10              __at(0xF41);
#ifndef _LIB_BUILD
asm("CCPR10 equ 0F41h");
#endif

// Register: CCPR10L
#define CCPR10L CCPR10L
extern volatile unsigned char           CCPR10L             __at(0xF41);
#ifndef _LIB_BUILD
asm("CCPR10L equ 0F41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR10L                :8;
    };
} CCPR10Lbits_t;
extern volatile CCPR10Lbits_t CCPR10Lbits __at(0xF41);
// bitfield macros
#define _CCPR10L_CCPR10L_POSN                               0x0
#define _CCPR10L_CCPR10L_POSITION                           0x0
#define _CCPR10L_CCPR10L_SIZE                               0x8
#define _CCPR10L_CCPR10L_LENGTH                             0x8
#define _CCPR10L_CCPR10L_MASK                               0xFF

// Register: CCPR10H
#define CCPR10H CCPR10H
extern volatile unsigned char           CCPR10H             __at(0xF42);
#ifndef _LIB_BUILD
asm("CCPR10H equ 0F42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR10H                :8;
    };
} CCPR10Hbits_t;
extern volatile CCPR10Hbits_t CCPR10Hbits __at(0xF42);
// bitfield macros
#define _CCPR10H_CCPR10H_POSN                               0x0
#define _CCPR10H_CCPR10H_POSITION                           0x0
#define _CCPR10H_CCPR10H_SIZE                               0x8
#define _CCPR10H_CCPR10H_LENGTH                             0x8
#define _CCPR10H_CCPR10H_MASK                               0xFF

// Register: CCP9CON
#define CCP9CON CCP9CON
extern volatile unsigned char           CCP9CON             __at(0xF43);
#ifndef _LIB_BUILD
asm("CCP9CON equ 0F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP9M                  :4;
        unsigned DC9B                   :2;
    };
    struct {
        unsigned CCP9M0                 :1;
        unsigned CCP9M1                 :1;
        unsigned CCP9M2                 :1;
        unsigned CCP9M3                 :1;
        unsigned DC9B0                  :1;
        unsigned DC9B1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP9Y                  :1;
        unsigned CCP9X                  :1;
    };
} CCP9CONbits_t;
extern volatile CCP9CONbits_t CCP9CONbits __at(0xF43);
// bitfield macros
#define _CCP9CON_CCP9M_POSN                                 0x0
#define _CCP9CON_CCP9M_POSITION                             0x0
#define _CCP9CON_CCP9M_SIZE                                 0x4
#define _CCP9CON_CCP9M_LENGTH                               0x4
#define _CCP9CON_CCP9M_MASK                                 0xF
#define _CCP9CON_DC9B_POSN                                  0x4
#define _CCP9CON_DC9B_POSITION                              0x4
#define _CCP9CON_DC9B_SIZE                                  0x2
#define _CCP9CON_DC9B_LENGTH                                0x2
#define _CCP9CON_DC9B_MASK                                  0x30
#define _CCP9CON_CCP9M0_POSN                                0x0
#define _CCP9CON_CCP9M0_POSITION                            0x0
#define _CCP9CON_CCP9M0_SIZE                                0x1
#define _CCP9CON_CCP9M0_LENGTH                              0x1
#define _CCP9CON_CCP9M0_MASK                                0x1
#define _CCP9CON_CCP9M1_POSN                                0x1
#define _CCP9CON_CCP9M1_POSITION                            0x1
#define _CCP9CON_CCP9M1_SIZE                                0x1
#define _CCP9CON_CCP9M1_LENGTH                              0x1
#define _CCP9CON_CCP9M1_MASK                                0x2
#define _CCP9CON_CCP9M2_POSN                                0x2
#define _CCP9CON_CCP9M2_POSITION                            0x2
#define _CCP9CON_CCP9M2_SIZE                                0x1
#define _CCP9CON_CCP9M2_LENGTH                              0x1
#define _CCP9CON_CCP9M2_MASK                                0x4
#define _CCP9CON_CCP9M3_POSN                                0x3
#define _CCP9CON_CCP9M3_POSITION                            0x3
#define _CCP9CON_CCP9M3_SIZE                                0x1
#define _CCP9CON_CCP9M3_LENGTH                              0x1
#define _CCP9CON_CCP9M3_MASK                                0x8
#define _CCP9CON_DC9B0_POSN                                 0x4
#define _CCP9CON_DC9B0_POSITION                             0x4
#define _CCP9CON_DC9B0_SIZE                                 0x1
#define _CCP9CON_DC9B0_LENGTH                               0x1
#define _CCP9CON_DC9B0_MASK                                 0x10
#define _CCP9CON_DC9B1_POSN                                 0x5
#define _CCP9CON_DC9B1_POSITION                             0x5
#define _CCP9CON_DC9B1_SIZE                                 0x1
#define _CCP9CON_DC9B1_LENGTH                               0x1
#define _CCP9CON_DC9B1_MASK                                 0x20
#define _CCP9CON_CCP9Y_POSN                                 0x4
#define _CCP9CON_CCP9Y_POSITION                             0x4
#define _CCP9CON_CCP9Y_SIZE                                 0x1
#define _CCP9CON_CCP9Y_LENGTH                               0x1
#define _CCP9CON_CCP9Y_MASK                                 0x10
#define _CCP9CON_CCP9X_POSN                                 0x5
#define _CCP9CON_CCP9X_POSITION                             0x5
#define _CCP9CON_CCP9X_SIZE                                 0x1
#define _CCP9CON_CCP9X_LENGTH                               0x1
#define _CCP9CON_CCP9X_MASK                                 0x20

// Register: CCPR9
#define CCPR9 CCPR9
extern volatile unsigned short          CCPR9               __at(0xF44);
#ifndef _LIB_BUILD
asm("CCPR9 equ 0F44h");
#endif

// Register: CCPR9L
#define CCPR9L CCPR9L
extern volatile unsigned char           CCPR9L              __at(0xF44);
#ifndef _LIB_BUILD
asm("CCPR9L equ 0F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR9L                 :8;
    };
} CCPR9Lbits_t;
extern volatile CCPR9Lbits_t CCPR9Lbits __at(0xF44);
// bitfield macros
#define _CCPR9L_CCPR9L_POSN                                 0x0
#define _CCPR9L_CCPR9L_POSITION                             0x0
#define _CCPR9L_CCPR9L_SIZE                                 0x8
#define _CCPR9L_CCPR9L_LENGTH                               0x8
#define _CCPR9L_CCPR9L_MASK                                 0xFF

// Register: CCPR9H
#define CCPR9H CCPR9H
extern volatile unsigned char           CCPR9H              __at(0xF45);
#ifndef _LIB_BUILD
asm("CCPR9H equ 0F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR9H                 :8;
    };
} CCPR9Hbits_t;
extern volatile CCPR9Hbits_t CCPR9Hbits __at(0xF45);
// bitfield macros
#define _CCPR9H_CCPR9H_POSN                                 0x0
#define _CCPR9H_CCPR9H_POSITION                             0x0
#define _CCPR9H_CCPR9H_SIZE                                 0x8
#define _CCPR9H_CCPR9H_LENGTH                               0x8
#define _CCPR9H_CCPR9H_MASK                                 0xFF

// Register: CCP8CON
#define CCP8CON CCP8CON
extern volatile unsigned char           CCP8CON             __at(0xF46);
#ifndef _LIB_BUILD
asm("CCP8CON equ 0F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP8M                  :4;
        unsigned DC8B                   :2;
    };
    struct {
        unsigned CCP8M0                 :1;
        unsigned CCP8M1                 :1;
        unsigned CCP8M2                 :1;
        unsigned CCP8M3                 :1;
        unsigned DC8B0                  :1;
        unsigned DC8B1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP8Y                  :1;
        unsigned CCP8X                  :1;
    };
} CCP8CONbits_t;
extern volatile CCP8CONbits_t CCP8CONbits __at(0xF46);
// bitfield macros
#define _CCP8CON_CCP8M_POSN                                 0x0
#define _CCP8CON_CCP8M_POSITION                             0x0
#define _CCP8CON_CCP8M_SIZE                                 0x4
#define _CCP8CON_CCP8M_LENGTH                               0x4
#define _CCP8CON_CCP8M_MASK                                 0xF
#define _CCP8CON_DC8B_POSN                                  0x4
#define _CCP8CON_DC8B_POSITION                              0x4
#define _CCP8CON_DC8B_SIZE                                  0x2
#define _CCP8CON_DC8B_LENGTH                                0x2
#define _CCP8CON_DC8B_MASK                                  0x30
#define _CCP8CON_CCP8M0_POSN                                0x0
#define _CCP8CON_CCP8M0_POSITION                            0x0
#define _CCP8CON_CCP8M0_SIZE                                0x1
#define _CCP8CON_CCP8M0_LENGTH                              0x1
#define _CCP8CON_CCP8M0_MASK                                0x1
#define _CCP8CON_CCP8M1_POSN                                0x1
#define _CCP8CON_CCP8M1_POSITION                            0x1
#define _CCP8CON_CCP8M1_SIZE                                0x1
#define _CCP8CON_CCP8M1_LENGTH                              0x1
#define _CCP8CON_CCP8M1_MASK                                0x2
#define _CCP8CON_CCP8M2_POSN                                0x2
#define _CCP8CON_CCP8M2_POSITION                            0x2
#define _CCP8CON_CCP8M2_SIZE                                0x1
#define _CCP8CON_CCP8M2_LENGTH                              0x1
#define _CCP8CON_CCP8M2_MASK                                0x4
#define _CCP8CON_CCP8M3_POSN                                0x3
#define _CCP8CON_CCP8M3_POSITION                            0x3
#define _CCP8CON_CCP8M3_SIZE                                0x1
#define _CCP8CON_CCP8M3_LENGTH                              0x1
#define _CCP8CON_CCP8M3_MASK                                0x8
#define _CCP8CON_DC8B0_POSN                                 0x4
#define _CCP8CON_DC8B0_POSITION                             0x4
#define _CCP8CON_DC8B0_SIZE                                 0x1
#define _CCP8CON_DC8B0_LENGTH                               0x1
#define _CCP8CON_DC8B0_MASK                                 0x10
#define _CCP8CON_DC8B1_POSN                                 0x5
#define _CCP8CON_DC8B1_POSITION                             0x5
#define _CCP8CON_DC8B1_SIZE                                 0x1
#define _CCP8CON_DC8B1_LENGTH                               0x1
#define _CCP8CON_DC8B1_MASK                                 0x20
#define _CCP8CON_CCP8Y_POSN                                 0x4
#define _CCP8CON_CCP8Y_POSITION                             0x4
#define _CCP8CON_CCP8Y_SIZE                                 0x1
#define _CCP8CON_CCP8Y_LENGTH                               0x1
#define _CCP8CON_CCP8Y_MASK                                 0x10
#define _CCP8CON_CCP8X_POSN                                 0x5
#define _CCP8CON_CCP8X_POSITION                             0x5
#define _CCP8CON_CCP8X_SIZE                                 0x1
#define _CCP8CON_CCP8X_LENGTH                               0x1
#define _CCP8CON_CCP8X_MASK                                 0x20

// Register: CCPR8
#define CCPR8 CCPR8
extern volatile unsigned short          CCPR8               __at(0xF47);
#ifndef _LIB_BUILD
asm("CCPR8 equ 0F47h");
#endif

// Register: CCPR8L
#define CCPR8L CCPR8L
extern volatile unsigned char           CCPR8L              __at(0xF47);
#ifndef _LIB_BUILD
asm("CCPR8L equ 0F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR8L                 :8;
    };
} CCPR8Lbits_t;
extern volatile CCPR8Lbits_t CCPR8Lbits __at(0xF47);
// bitfield macros
#define _CCPR8L_CCPR8L_POSN                                 0x0
#define _CCPR8L_CCPR8L_POSITION                             0x0
#define _CCPR8L_CCPR8L_SIZE                                 0x8
#define _CCPR8L_CCPR8L_LENGTH                               0x8
#define _CCPR8L_CCPR8L_MASK                                 0xFF

// Register: CCPR8H
#define CCPR8H CCPR8H
extern volatile unsigned char           CCPR8H              __at(0xF48);
#ifndef _LIB_BUILD
asm("CCPR8H equ 0F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR8H                 :8;
    };
} CCPR8Hbits_t;
extern volatile CCPR8Hbits_t CCPR8Hbits __at(0xF48);
// bitfield macros
#define _CCPR8H_CCPR8H_POSN                                 0x0
#define _CCPR8H_CCPR8H_POSITION                             0x0
#define _CCPR8H_CCPR8H_SIZE                                 0x8
#define _CCPR8H_CCPR8H_LENGTH                               0x8
#define _CCPR8H_CCPR8H_MASK                                 0xFF

// Register: CCP3CON
#define CCP3CON CCP3CON
extern volatile unsigned char           CCP3CON             __at(0xF49);
#ifndef _LIB_BUILD
asm("CCP3CON equ 0F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP3M                  :4;
        unsigned DC3B                   :2;
        unsigned P3M                    :2;
    };
    struct {
        unsigned CCP3M0                 :1;
        unsigned CCP3M1                 :1;
        unsigned CCP3M2                 :1;
        unsigned CCP3M3                 :1;
        unsigned DC3B0                  :1;
        unsigned DC3B1                  :1;
        unsigned P3M0                   :1;
        unsigned P3M1                   :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP3Y                  :1;
        unsigned CCP3X                  :1;
    };
} CCP3CONbits_t;
extern volatile CCP3CONbits_t CCP3CONbits __at(0xF49);
// bitfield macros
#define _CCP3CON_CCP3M_POSN                                 0x0
#define _CCP3CON_CCP3M_POSITION                             0x0
#define _CCP3CON_CCP3M_SIZE                                 0x4
#define _CCP3CON_CCP3M_LENGTH                               0x4
#define _CCP3CON_CCP3M_MASK                                 0xF
#define _CCP3CON_DC3B_POSN                                  0x4
#define _CCP3CON_DC3B_POSITION                              0x4
#define _CCP3CON_DC3B_SIZE                                  0x2
#define _CCP3CON_DC3B_LENGTH                                0x2
#define _CCP3CON_DC3B_MASK                                  0x30
#define _CCP3CON_P3M_POSN                                   0x6
#define _CCP3CON_P3M_POSITION                               0x6
#define _CCP3CON_P3M_SIZE                                   0x2
#define _CCP3CON_P3M_LENGTH                                 0x2
#define _CCP3CON_P3M_MASK                                   0xC0
#define _CCP3CON_CCP3M0_POSN                                0x0
#define _CCP3CON_CCP3M0_POSITION                            0x0
#define _CCP3CON_CCP3M0_SIZE                                0x1
#define _CCP3CON_CCP3M0_LENGTH                              0x1
#define _CCP3CON_CCP3M0_MASK                                0x1
#define _CCP3CON_CCP3M1_POSN                                0x1
#define _CCP3CON_CCP3M1_POSITION                            0x1
#define _CCP3CON_CCP3M1_SIZE                                0x1
#define _CCP3CON_CCP3M1_LENGTH                              0x1
#define _CCP3CON_CCP3M1_MASK                                0x2
#define _CCP3CON_CCP3M2_POSN                                0x2
#define _CCP3CON_CCP3M2_POSITION                            0x2
#define _CCP3CON_CCP3M2_SIZE                                0x1
#define _CCP3CON_CCP3M2_LENGTH                              0x1
#define _CCP3CON_CCP3M2_MASK                                0x4
#define _CCP3CON_CCP3M3_POSN                                0x3
#define _CCP3CON_CCP3M3_POSITION                            0x3
#define _CCP3CON_CCP3M3_SIZE                                0x1
#define _CCP3CON_CCP3M3_LENGTH                              0x1
#define _CCP3CON_CCP3M3_MASK                                0x8
#define _CCP3CON_DC3B0_POSN                                 0x4
#define _CCP3CON_DC3B0_POSITION                             0x4
#define _CCP3CON_DC3B0_SIZE                                 0x1
#define _CCP3CON_DC3B0_LENGTH                               0x1
#define _CCP3CON_DC3B0_MASK                                 0x10
#define _CCP3CON_DC3B1_POSN                                 0x5
#define _CCP3CON_DC3B1_POSITION                             0x5
#define _CCP3CON_DC3B1_SIZE                                 0x1
#define _CCP3CON_DC3B1_LENGTH                               0x1
#define _CCP3CON_DC3B1_MASK                                 0x20
#define _CCP3CON_P3M0_POSN                                  0x6
#define _CCP3CON_P3M0_POSITION                              0x6
#define _CCP3CON_P3M0_SIZE                                  0x1
#define _CCP3CON_P3M0_LENGTH                                0x1
#define _CCP3CON_P3M0_MASK                                  0x40
#define _CCP3CON_P3M1_POSN                                  0x7
#define _CCP3CON_P3M1_POSITION                              0x7
#define _CCP3CON_P3M1_SIZE                                  0x1
#define _CCP3CON_P3M1_LENGTH                                0x1
#define _CCP3CON_P3M1_MASK                                  0x80
#define _CCP3CON_CCP3Y_POSN                                 0x4
#define _CCP3CON_CCP3Y_POSITION                             0x4
#define _CCP3CON_CCP3Y_SIZE                                 0x1
#define _CCP3CON_CCP3Y_LENGTH                               0x1
#define _CCP3CON_CCP3Y_MASK                                 0x10
#define _CCP3CON_CCP3X_POSN                                 0x5
#define _CCP3CON_CCP3X_POSITION                             0x5
#define _CCP3CON_CCP3X_SIZE                                 0x1
#define _CCP3CON_CCP3X_LENGTH                               0x1
#define _CCP3CON_CCP3X_MASK                                 0x20

// Register: CCPR3
#define CCPR3 CCPR3
extern volatile unsigned short          CCPR3               __at(0xF4A);
#ifndef _LIB_BUILD
asm("CCPR3 equ 0F4Ah");
#endif

// Register: CCPR3L
#define CCPR3L CCPR3L
extern volatile unsigned char           CCPR3L              __at(0xF4A);
#ifndef _LIB_BUILD
asm("CCPR3L equ 0F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR3L                 :8;
    };
} CCPR3Lbits_t;
extern volatile CCPR3Lbits_t CCPR3Lbits __at(0xF4A);
// bitfield macros
#define _CCPR3L_CCPR3L_POSN                                 0x0
#define _CCPR3L_CCPR3L_POSITION                             0x0
#define _CCPR3L_CCPR3L_SIZE                                 0x8
#define _CCPR3L_CCPR3L_LENGTH                               0x8
#define _CCPR3L_CCPR3L_MASK                                 0xFF

// Register: CCPR3H
#define CCPR3H CCPR3H
extern volatile unsigned char           CCPR3H              __at(0xF4B);
#ifndef _LIB_BUILD
asm("CCPR3H equ 0F4Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR3H                 :8;
    };
} CCPR3Hbits_t;
extern volatile CCPR3Hbits_t CCPR3Hbits __at(0xF4B);
// bitfield macros
#define _CCPR3H_CCPR3H_POSN                                 0x0
#define _CCPR3H_CCPR3H_POSITION                             0x0
#define _CCPR3H_CCPR3H_SIZE                                 0x8
#define _CCPR3H_CCPR3H_LENGTH                               0x8
#define _CCPR3H_CCPR3H_MASK                                 0xFF

// Register: ECCP3DEL
#define ECCP3DEL ECCP3DEL
extern volatile unsigned char           ECCP3DEL            __at(0xF4C);
#ifndef _LIB_BUILD
asm("ECCP3DEL equ 0F4Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3DC                   :7;
        unsigned P3RSEN                 :1;
    };
    struct {
        unsigned P3DC0                  :1;
        unsigned P3DC1                  :1;
        unsigned P3DC2                  :1;
        unsigned P3DC3                  :1;
        unsigned P3DC4                  :1;
        unsigned P3DC5                  :1;
        unsigned P3DC6                  :1;
    };
} ECCP3DELbits_t;
extern volatile ECCP3DELbits_t ECCP3DELbits __at(0xF4C);
// bitfield macros
#define _ECCP3DEL_P3DC_POSN                                 0x0
#define _ECCP3DEL_P3DC_POSITION                             0x0
#define _ECCP3DEL_P3DC_SIZE                                 0x7
#define _ECCP3DEL_P3DC_LENGTH                               0x7
#define _ECCP3DEL_P3DC_MASK                                 0x7F
#define _ECCP3DEL_P3RSEN_POSN                               0x7
#define _ECCP3DEL_P3RSEN_POSITION                           0x7
#define _ECCP3DEL_P3RSEN_SIZE                               0x1
#define _ECCP3DEL_P3RSEN_LENGTH                             0x1
#define _ECCP3DEL_P3RSEN_MASK                               0x80
#define _ECCP3DEL_P3DC0_POSN                                0x0
#define _ECCP3DEL_P3DC0_POSITION                            0x0
#define _ECCP3DEL_P3DC0_SIZE                                0x1
#define _ECCP3DEL_P3DC0_LENGTH                              0x1
#define _ECCP3DEL_P3DC0_MASK                                0x1
#define _ECCP3DEL_P3DC1_POSN                                0x1
#define _ECCP3DEL_P3DC1_POSITION                            0x1
#define _ECCP3DEL_P3DC1_SIZE                                0x1
#define _ECCP3DEL_P3DC1_LENGTH                              0x1
#define _ECCP3DEL_P3DC1_MASK                                0x2
#define _ECCP3DEL_P3DC2_POSN                                0x2
#define _ECCP3DEL_P3DC2_POSITION                            0x2
#define _ECCP3DEL_P3DC2_SIZE                                0x1
#define _ECCP3DEL_P3DC2_LENGTH                              0x1
#define _ECCP3DEL_P3DC2_MASK                                0x4
#define _ECCP3DEL_P3DC3_POSN                                0x3
#define _ECCP3DEL_P3DC3_POSITION                            0x3
#define _ECCP3DEL_P3DC3_SIZE                                0x1
#define _ECCP3DEL_P3DC3_LENGTH                              0x1
#define _ECCP3DEL_P3DC3_MASK                                0x8
#define _ECCP3DEL_P3DC4_POSN                                0x4
#define _ECCP3DEL_P3DC4_POSITION                            0x4
#define _ECCP3DEL_P3DC4_SIZE                                0x1
#define _ECCP3DEL_P3DC4_LENGTH                              0x1
#define _ECCP3DEL_P3DC4_MASK                                0x10
#define _ECCP3DEL_P3DC5_POSN                                0x5
#define _ECCP3DEL_P3DC5_POSITION                            0x5
#define _ECCP3DEL_P3DC5_SIZE                                0x1
#define _ECCP3DEL_P3DC5_LENGTH                              0x1
#define _ECCP3DEL_P3DC5_MASK                                0x20
#define _ECCP3DEL_P3DC6_POSN                                0x6
#define _ECCP3DEL_P3DC6_POSITION                            0x6
#define _ECCP3DEL_P3DC6_SIZE                                0x1
#define _ECCP3DEL_P3DC6_LENGTH                              0x1
#define _ECCP3DEL_P3DC6_MASK                                0x40

// Register: ECCP3AS
#define ECCP3AS ECCP3AS
extern volatile unsigned char           ECCP3AS             __at(0xF4D);
#ifndef _LIB_BUILD
asm("ECCP3AS equ 0F4Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSS3BD                 :2;
        unsigned PSS3AC                 :2;
        unsigned ECCP3AS                :3;
        unsigned ECCP3ASE               :1;
    };
    struct {
        unsigned PSS3BD0                :1;
        unsigned PSS3BD1                :1;
        unsigned PSS3AC0                :1;
        unsigned PSS3AC1                :1;
        unsigned ECCP3AS0               :1;
        unsigned ECCP3AS1               :1;
        unsigned ECCP3AS2               :1;
    };
} ECCP3ASbits_t;
extern volatile ECCP3ASbits_t ECCP3ASbits __at(0xF4D);
// bitfield macros
#define _ECCP3AS_PSS3BD_POSN                                0x0
#define _ECCP3AS_PSS3BD_POSITION                            0x0
#define _ECCP3AS_PSS3BD_SIZE                                0x2
#define _ECCP3AS_PSS3BD_LENGTH                              0x2
#define _ECCP3AS_PSS3BD_MASK                                0x3
#define _ECCP3AS_PSS3AC_POSN                                0x2
#define _ECCP3AS_PSS3AC_POSITION                            0x2
#define _ECCP3AS_PSS3AC_SIZE                                0x2
#define _ECCP3AS_PSS3AC_LENGTH                              0x2
#define _ECCP3AS_PSS3AC_MASK                                0xC
#define _ECCP3AS_ECCP3AS_POSN                               0x4
#define _ECCP3AS_ECCP3AS_POSITION                           0x4
#define _ECCP3AS_ECCP3AS_SIZE                               0x3
#define _ECCP3AS_ECCP3AS_LENGTH                             0x3
#define _ECCP3AS_ECCP3AS_MASK                               0x70
#define _ECCP3AS_ECCP3ASE_POSN                              0x7
#define _ECCP3AS_ECCP3ASE_POSITION                          0x7
#define _ECCP3AS_ECCP3ASE_SIZE                              0x1
#define _ECCP3AS_ECCP3ASE_LENGTH                            0x1
#define _ECCP3AS_ECCP3ASE_MASK                              0x80
#define _ECCP3AS_PSS3BD0_POSN                               0x0
#define _ECCP3AS_PSS3BD0_POSITION                           0x0
#define _ECCP3AS_PSS3BD0_SIZE                               0x1
#define _ECCP3AS_PSS3BD0_LENGTH                             0x1
#define _ECCP3AS_PSS3BD0_MASK                               0x1
#define _ECCP3AS_PSS3BD1_POSN                               0x1
#define _ECCP3AS_PSS3BD1_POSITION                           0x1
#define _ECCP3AS_PSS3BD1_SIZE                               0x1
#define _ECCP3AS_PSS3BD1_LENGTH                             0x1
#define _ECCP3AS_PSS3BD1_MASK                               0x2
#define _ECCP3AS_PSS3AC0_POSN                               0x2
#define _ECCP3AS_PSS3AC0_POSITION                           0x2
#define _ECCP3AS_PSS3AC0_SIZE                               0x1
#define _ECCP3AS_PSS3AC0_LENGTH                             0x1
#define _ECCP3AS_PSS3AC0_MASK                               0x4
#define _ECCP3AS_PSS3AC1_POSN                               0x3
#define _ECCP3AS_PSS3AC1_POSITION                           0x3
#define _ECCP3AS_PSS3AC1_SIZE                               0x1
#define _ECCP3AS_PSS3AC1_LENGTH                             0x1
#define _ECCP3AS_PSS3AC1_MASK                               0x8
#define _ECCP3AS_ECCP3AS0_POSN                              0x4
#define _ECCP3AS_ECCP3AS0_POSITION                          0x4
#define _ECCP3AS_ECCP3AS0_SIZE                              0x1
#define _ECCP3AS_ECCP3AS0_LENGTH                            0x1
#define _ECCP3AS_ECCP3AS0_MASK                              0x10
#define _ECCP3AS_ECCP3AS1_POSN                              0x5
#define _ECCP3AS_ECCP3AS1_POSITION                          0x5
#define _ECCP3AS_ECCP3AS1_SIZE                              0x1
#define _ECCP3AS_ECCP3AS1_LENGTH                            0x1
#define _ECCP3AS_ECCP3AS1_MASK                              0x20
#define _ECCP3AS_ECCP3AS2_POSN                              0x6
#define _ECCP3AS_ECCP3AS2_POSITION                          0x6
#define _ECCP3AS_ECCP3AS2_SIZE                              0x1
#define _ECCP3AS_ECCP3AS2_LENGTH                            0x1
#define _ECCP3AS_ECCP3AS2_MASK                              0x40

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0xF4E);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0F4Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2M                  :4;
        unsigned DC2B                   :2;
        unsigned P2M                    :2;
    };
    struct {
        unsigned CCP2M0                 :1;
        unsigned CCP2M1                 :1;
        unsigned CCP2M2                 :1;
        unsigned CCP2M3                 :1;
        unsigned DC2B0                  :1;
        unsigned DC2B1                  :1;
        unsigned P2M0                   :1;
        unsigned P2M1                   :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP2Y                  :1;
        unsigned CCP2X                  :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0xF4E);
// bitfield macros
#define _CCP2CON_CCP2M_POSN                                 0x0
#define _CCP2CON_CCP2M_POSITION                             0x0
#define _CCP2CON_CCP2M_SIZE                                 0x4
#define _CCP2CON_CCP2M_LENGTH                               0x4
#define _CCP2CON_CCP2M_MASK                                 0xF
#define _CCP2CON_DC2B_POSN                                  0x4
#define _CCP2CON_DC2B_POSITION                              0x4
#define _CCP2CON_DC2B_SIZE                                  0x2
#define _CCP2CON_DC2B_LENGTH                                0x2
#define _CCP2CON_DC2B_MASK                                  0x30
#define _CCP2CON_P2M_POSN                                   0x6
#define _CCP2CON_P2M_POSITION                               0x6
#define _CCP2CON_P2M_SIZE                                   0x2
#define _CCP2CON_P2M_LENGTH                                 0x2
#define _CCP2CON_P2M_MASK                                   0xC0
#define _CCP2CON_CCP2M0_POSN                                0x0
#define _CCP2CON_CCP2M0_POSITION                            0x0
#define _CCP2CON_CCP2M0_SIZE                                0x1
#define _CCP2CON_CCP2M0_LENGTH                              0x1
#define _CCP2CON_CCP2M0_MASK                                0x1
#define _CCP2CON_CCP2M1_POSN                                0x1
#define _CCP2CON_CCP2M1_POSITION                            0x1
#define _CCP2CON_CCP2M1_SIZE                                0x1
#define _CCP2CON_CCP2M1_LENGTH                              0x1
#define _CCP2CON_CCP2M1_MASK                                0x2
#define _CCP2CON_CCP2M2_POSN                                0x2
#define _CCP2CON_CCP2M2_POSITION                            0x2
#define _CCP2CON_CCP2M2_SIZE                                0x1
#define _CCP2CON_CCP2M2_LENGTH                              0x1
#define _CCP2CON_CCP2M2_MASK                                0x4
#define _CCP2CON_CCP2M3_POSN                                0x3
#define _CCP2CON_CCP2M3_POSITION                            0x3
#define _CCP2CON_CCP2M3_SIZE                                0x1
#define _CCP2CON_CCP2M3_LENGTH                              0x1
#define _CCP2CON_CCP2M3_MASK                                0x8
#define _CCP2CON_DC2B0_POSN                                 0x4
#define _CCP2CON_DC2B0_POSITION                             0x4
#define _CCP2CON_DC2B0_SIZE                                 0x1
#define _CCP2CON_DC2B0_LENGTH                               0x1
#define _CCP2CON_DC2B0_MASK                                 0x10
#define _CCP2CON_DC2B1_POSN                                 0x5
#define _CCP2CON_DC2B1_POSITION                             0x5
#define _CCP2CON_DC2B1_SIZE                                 0x1
#define _CCP2CON_DC2B1_LENGTH                               0x1
#define _CCP2CON_DC2B1_MASK                                 0x20
#define _CCP2CON_P2M0_POSN                                  0x6
#define _CCP2CON_P2M0_POSITION                              0x6
#define _CCP2CON_P2M0_SIZE                                  0x1
#define _CCP2CON_P2M0_LENGTH                                0x1
#define _CCP2CON_P2M0_MASK                                  0x40
#define _CCP2CON_P2M1_POSN                                  0x7
#define _CCP2CON_P2M1_POSITION                              0x7
#define _CCP2CON_P2M1_SIZE                                  0x1
#define _CCP2CON_P2M1_LENGTH                                0x1
#define _CCP2CON_P2M1_MASK                                  0x80
#define _CCP2CON_CCP2Y_POSN                                 0x4
#define _CCP2CON_CCP2Y_POSITION                             0x4
#define _CCP2CON_CCP2Y_SIZE                                 0x1
#define _CCP2CON_CCP2Y_LENGTH                               0x1
#define _CCP2CON_CCP2Y_MASK                                 0x10
#define _CCP2CON_CCP2X_POSN                                 0x5
#define _CCP2CON_CCP2X_POSITION                             0x5
#define _CCP2CON_CCP2X_SIZE                                 0x1
#define _CCP2CON_CCP2X_LENGTH                               0x1
#define _CCP2CON_CCP2X_MASK                                 0x20

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0xF4F);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0F4Fh");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0xF4F);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR2L                 :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0xF4F);
// bitfield macros
#define _CCPR2L_CCPR2L_POSN                                 0x0
#define _CCPR2L_CCPR2L_POSITION                             0x0
#define _CCPR2L_CCPR2L_SIZE                                 0x8
#define _CCPR2L_CCPR2L_LENGTH                               0x8
#define _CCPR2L_CCPR2L_MASK                                 0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0xF50);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0F50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR2H                 :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0xF50);
// bitfield macros
#define _CCPR2H_CCPR2H_POSN                                 0x0
#define _CCPR2H_CCPR2H_POSITION                             0x0
#define _CCPR2H_CCPR2H_SIZE                                 0x8
#define _CCPR2H_CCPR2H_LENGTH                               0x8
#define _CCPR2H_CCPR2H_MASK                                 0xFF

// Register: ECCP2DEL
#define ECCP2DEL ECCP2DEL
extern volatile unsigned char           ECCP2DEL            __at(0xF51);
#ifndef _LIB_BUILD
asm("ECCP2DEL equ 0F51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2DC                   :7;
        unsigned P2RSEN                 :1;
    };
    struct {
        unsigned P2DC0                  :1;
        unsigned P2DC1                  :1;
        unsigned P2DC2                  :1;
        unsigned P2DC3                  :1;
        unsigned P2DC4                  :1;
        unsigned P2DC5                  :1;
        unsigned P2DC6                  :1;
    };
} ECCP2DELbits_t;
extern volatile ECCP2DELbits_t ECCP2DELbits __at(0xF51);
// bitfield macros
#define _ECCP2DEL_P2DC_POSN                                 0x0
#define _ECCP2DEL_P2DC_POSITION                             0x0
#define _ECCP2DEL_P2DC_SIZE                                 0x7
#define _ECCP2DEL_P2DC_LENGTH                               0x7
#define _ECCP2DEL_P2DC_MASK                                 0x7F
#define _ECCP2DEL_P2RSEN_POSN                               0x7
#define _ECCP2DEL_P2RSEN_POSITION                           0x7
#define _ECCP2DEL_P2RSEN_SIZE                               0x1
#define _ECCP2DEL_P2RSEN_LENGTH                             0x1
#define _ECCP2DEL_P2RSEN_MASK                               0x80
#define _ECCP2DEL_P2DC0_POSN                                0x0
#define _ECCP2DEL_P2DC0_POSITION                            0x0
#define _ECCP2DEL_P2DC0_SIZE                                0x1
#define _ECCP2DEL_P2DC0_LENGTH                              0x1
#define _ECCP2DEL_P2DC0_MASK                                0x1
#define _ECCP2DEL_P2DC1_POSN                                0x1
#define _ECCP2DEL_P2DC1_POSITION                            0x1
#define _ECCP2DEL_P2DC1_SIZE                                0x1
#define _ECCP2DEL_P2DC1_LENGTH                              0x1
#define _ECCP2DEL_P2DC1_MASK                                0x2
#define _ECCP2DEL_P2DC2_POSN                                0x2
#define _ECCP2DEL_P2DC2_POSITION                            0x2
#define _ECCP2DEL_P2DC2_SIZE                                0x1
#define _ECCP2DEL_P2DC2_LENGTH                              0x1
#define _ECCP2DEL_P2DC2_MASK                                0x4
#define _ECCP2DEL_P2DC3_POSN                                0x3
#define _ECCP2DEL_P2DC3_POSITION                            0x3
#define _ECCP2DEL_P2DC3_SIZE                                0x1
#define _ECCP2DEL_P2DC3_LENGTH                              0x1
#define _ECCP2DEL_P2DC3_MASK                                0x8
#define _ECCP2DEL_P2DC4_POSN                                0x4
#define _ECCP2DEL_P2DC4_POSITION                            0x4
#define _ECCP2DEL_P2DC4_SIZE                                0x1
#define _ECCP2DEL_P2DC4_LENGTH                              0x1
#define _ECCP2DEL_P2DC4_MASK                                0x10
#define _ECCP2DEL_P2DC5_POSN                                0x5
#define _ECCP2DEL_P2DC5_POSITION                            0x5
#define _ECCP2DEL_P2DC5_SIZE                                0x1
#define _ECCP2DEL_P2DC5_LENGTH                              0x1
#define _ECCP2DEL_P2DC5_MASK                                0x20
#define _ECCP2DEL_P2DC6_POSN                                0x6
#define _ECCP2DEL_P2DC6_POSITION                            0x6
#define _ECCP2DEL_P2DC6_SIZE                                0x1
#define _ECCP2DEL_P2DC6_LENGTH                              0x1
#define _ECCP2DEL_P2DC6_MASK                                0x40

// Register: ECCP2AS
#define ECCP2AS ECCP2AS
extern volatile unsigned char           ECCP2AS             __at(0xF52);
#ifndef _LIB_BUILD
asm("ECCP2AS equ 0F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSS2BD                 :2;
        unsigned PSS2AC                 :2;
        unsigned ECCP2AS                :3;
        unsigned ECCP2ASE               :1;
    };
    struct {
        unsigned PSS2BD0                :1;
        unsigned PSS2BD1                :1;
        unsigned PSS2AC0                :1;
        unsigned PSS2AC1                :1;
        unsigned ECCP2AS0               :1;
        unsigned ECCP2AS1               :1;
        unsigned ECCP2AS2               :1;
    };
} ECCP2ASbits_t;
extern volatile ECCP2ASbits_t ECCP2ASbits __at(0xF52);
// bitfield macros
#define _ECCP2AS_PSS2BD_POSN                                0x0
#define _ECCP2AS_PSS2BD_POSITION                            0x0
#define _ECCP2AS_PSS2BD_SIZE                                0x2
#define _ECCP2AS_PSS2BD_LENGTH                              0x2
#define _ECCP2AS_PSS2BD_MASK                                0x3
#define _ECCP2AS_PSS2AC_POSN                                0x2
#define _ECCP2AS_PSS2AC_POSITION                            0x2
#define _ECCP2AS_PSS2AC_SIZE                                0x2
#define _ECCP2AS_PSS2AC_LENGTH                              0x2
#define _ECCP2AS_PSS2AC_MASK                                0xC
#define _ECCP2AS_ECCP2AS_POSN                               0x4
#define _ECCP2AS_ECCP2AS_POSITION                           0x4
#define _ECCP2AS_ECCP2AS_SIZE                               0x3
#define _ECCP2AS_ECCP2AS_LENGTH                             0x3
#define _ECCP2AS_ECCP2AS_MASK                               0x70
#define _ECCP2AS_ECCP2ASE_POSN                              0x7
#define _ECCP2AS_ECCP2ASE_POSITION                          0x7
#define _ECCP2AS_ECCP2ASE_SIZE                              0x1
#define _ECCP2AS_ECCP2ASE_LENGTH                            0x1
#define _ECCP2AS_ECCP2ASE_MASK                              0x80
#define _ECCP2AS_PSS2BD0_POSN                               0x0
#define _ECCP2AS_PSS2BD0_POSITION                           0x0
#define _ECCP2AS_PSS2BD0_SIZE                               0x1
#define _ECCP2AS_PSS2BD0_LENGTH                             0x1
#define _ECCP2AS_PSS2BD0_MASK                               0x1
#define _ECCP2AS_PSS2BD1_POSN                               0x1
#define _ECCP2AS_PSS2BD1_POSITION                           0x1
#define _ECCP2AS_PSS2BD1_SIZE                               0x1
#define _ECCP2AS_PSS2BD1_LENGTH                             0x1
#define _ECCP2AS_PSS2BD1_MASK                               0x2
#define _ECCP2AS_PSS2AC0_POSN                               0x2
#define _ECCP2AS_PSS2AC0_POSITION                           0x2
#define _ECCP2AS_PSS2AC0_SIZE                               0x1
#define _ECCP2AS_PSS2AC0_LENGTH                             0x1
#define _ECCP2AS_PSS2AC0_MASK                               0x4
#define _ECCP2AS_PSS2AC1_POSN                               0x3
#define _ECCP2AS_PSS2AC1_POSITION                           0x3
#define _ECCP2AS_PSS2AC1_SIZE                               0x1
#define _ECCP2AS_PSS2AC1_LENGTH                             0x1
#define _ECCP2AS_PSS2AC1_MASK                               0x8
#define _ECCP2AS_ECCP2AS0_POSN                              0x4
#define _ECCP2AS_ECCP2AS0_POSITION                          0x4
#define _ECCP2AS_ECCP2AS0_SIZE                              0x1
#define _ECCP2AS_ECCP2AS0_LENGTH                            0x1
#define _ECCP2AS_ECCP2AS0_MASK                              0x10
#define _ECCP2AS_ECCP2AS1_POSN                              0x5
#define _ECCP2AS_ECCP2AS1_POSITION                          0x5
#define _ECCP2AS_ECCP2AS1_SIZE                              0x1
#define _ECCP2AS_ECCP2AS1_LENGTH                            0x1
#define _ECCP2AS_ECCP2AS1_MASK                              0x20
#define _ECCP2AS_ECCP2AS2_POSN                              0x6
#define _ECCP2AS_ECCP2AS2_POSITION                          0x6
#define _ECCP2AS_ECCP2AS2_SIZE                              0x1
#define _ECCP2AS_ECCP2AS2_LENGTH                            0x1
#define _ECCP2AS_ECCP2AS2_MASK                              0x40

// Register: CM1CON
#define CM1CON CM1CON
extern volatile unsigned char           CM1CON              __at(0xF53);
#ifndef _LIB_BUILD
asm("CM1CON equ 0F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCH                    :2;
        unsigned CREF                   :1;
        unsigned EVPOL                  :2;
        unsigned CPOL                   :1;
        unsigned COE                    :1;
        unsigned CON                    :1;
    };
    struct {
        unsigned CCH0                   :1;
        unsigned CCH1                   :1;
        unsigned                        :1;
        unsigned EVPOL0                 :1;
        unsigned EVPOL1                 :1;
    };
    struct {
        unsigned C1CH0                  :1;
        unsigned C1CH1                  :1;
        unsigned CREF1                  :1;
        unsigned EVPOL01                :1;
        unsigned EVPOL11                :1;
        unsigned CPOL1                  :1;
        unsigned COE1                   :1;
        unsigned CON1                   :1;
    };
    struct {
        unsigned CCH01                  :1;
        unsigned CCH11                  :1;
    };
} CM1CONbits_t;
extern volatile CM1CONbits_t CM1CONbits __at(0xF53);
// bitfield macros
#define _CM1CON_CCH_POSN                                    0x0
#define _CM1CON_CCH_POSITION                                0x0
#define _CM1CON_CCH_SIZE                                    0x2
#define _CM1CON_CCH_LENGTH                                  0x2
#define _CM1CON_CCH_MASK                                    0x3
#define _CM1CON_CREF_POSN                                   0x2
#define _CM1CON_CREF_POSITION                               0x2
#define _CM1CON_CREF_SIZE                                   0x1
#define _CM1CON_CREF_LENGTH                                 0x1
#define _CM1CON_CREF_MASK                                   0x4
#define _CM1CON_EVPOL_POSN                                  0x3
#define _CM1CON_EVPOL_POSITION                              0x3
#define _CM1CON_EVPOL_SIZE                                  0x2
#define _CM1CON_EVPOL_LENGTH                                0x2
#define _CM1CON_EVPOL_MASK                                  0x18
#define _CM1CON_CPOL_POSN                                   0x5
#define _CM1CON_CPOL_POSITION                               0x5
#define _CM1CON_CPOL_SIZE                                   0x1
#define _CM1CON_CPOL_LENGTH                                 0x1
#define _CM1CON_CPOL_MASK                                   0x20
#define _CM1CON_COE_POSN                                    0x6
#define _CM1CON_COE_POSITION                                0x6
#define _CM1CON_COE_SIZE                                    0x1
#define _CM1CON_COE_LENGTH                                  0x1
#define _CM1CON_COE_MASK                                    0x40
#define _CM1CON_CON_POSN                                    0x7
#define _CM1CON_CON_POSITION                                0x7
#define _CM1CON_CON_SIZE                                    0x1
#define _CM1CON_CON_LENGTH                                  0x1
#define _CM1CON_CON_MASK                                    0x80
#define _CM1CON_CCH0_POSN                                   0x0
#define _CM1CON_CCH0_POSITION                               0x0
#define _CM1CON_CCH0_SIZE                                   0x1
#define _CM1CON_CCH0_LENGTH                                 0x1
#define _CM1CON_CCH0_MASK                                   0x1
#define _CM1CON_CCH1_POSN                                   0x1
#define _CM1CON_CCH1_POSITION                               0x1
#define _CM1CON_CCH1_SIZE                                   0x1
#define _CM1CON_CCH1_LENGTH                                 0x1
#define _CM1CON_CCH1_MASK                                   0x2
#define _CM1CON_EVPOL0_POSN                                 0x3
#define _CM1CON_EVPOL0_POSITION                             0x3
#define _CM1CON_EVPOL0_SIZE                                 0x1
#define _CM1CON_EVPOL0_LENGTH                               0x1
#define _CM1CON_EVPOL0_MASK                                 0x8
#define _CM1CON_EVPOL1_POSN                                 0x4
#define _CM1CON_EVPOL1_POSITION                             0x4
#define _CM1CON_EVPOL1_SIZE                                 0x1
#define _CM1CON_EVPOL1_LENGTH                               0x1
#define _CM1CON_EVPOL1_MASK                                 0x10
#define _CM1CON_C1CH0_POSN                                  0x0
#define _CM1CON_C1CH0_POSITION                              0x0
#define _CM1CON_C1CH0_SIZE                                  0x1
#define _CM1CON_C1CH0_LENGTH                                0x1
#define _CM1CON_C1CH0_MASK                                  0x1
#define _CM1CON_C1CH1_POSN                                  0x1
#define _CM1CON_C1CH1_POSITION                              0x1
#define _CM1CON_C1CH1_SIZE                                  0x1
#define _CM1CON_C1CH1_LENGTH                                0x1
#define _CM1CON_C1CH1_MASK                                  0x2
#define _CM1CON_CREF1_POSN                                  0x2
#define _CM1CON_CREF1_POSITION                              0x2
#define _CM1CON_CREF1_SIZE                                  0x1
#define _CM1CON_CREF1_LENGTH                                0x1
#define _CM1CON_CREF1_MASK                                  0x4
#define _CM1CON_EVPOL01_POSN                                0x3
#define _CM1CON_EVPOL01_POSITION                            0x3
#define _CM1CON_EVPOL01_SIZE                                0x1
#define _CM1CON_EVPOL01_LENGTH                              0x1
#define _CM1CON_EVPOL01_MASK                                0x8
#define _CM1CON_EVPOL11_POSN                                0x4
#define _CM1CON_EVPOL11_POSITION                            0x4
#define _CM1CON_EVPOL11_SIZE                                0x1
#define _CM1CON_EVPOL11_LENGTH                              0x1
#define _CM1CON_EVPOL11_MASK                                0x10
#define _CM1CON_CPOL1_POSN                                  0x5
#define _CM1CON_CPOL1_POSITION                              0x5
#define _CM1CON_CPOL1_SIZE                                  0x1
#define _CM1CON_CPOL1_LENGTH                                0x1
#define _CM1CON_CPOL1_MASK                                  0x20
#define _CM1CON_COE1_POSN                                   0x6
#define _CM1CON_COE1_POSITION                               0x6
#define _CM1CON_COE1_SIZE                                   0x1
#define _CM1CON_COE1_LENGTH                                 0x1
#define _CM1CON_COE1_MASK                                   0x40
#define _CM1CON_CON1_POSN                                   0x7
#define _CM1CON_CON1_POSITION                               0x7
#define _CM1CON_CON1_SIZE                                   0x1
#define _CM1CON_CON1_LENGTH                                 0x1
#define _CM1CON_CON1_MASK                                   0x80
#define _CM1CON_CCH01_POSN                                  0x0
#define _CM1CON_CCH01_POSITION                              0x0
#define _CM1CON_CCH01_SIZE                                  0x1
#define _CM1CON_CCH01_LENGTH                                0x1
#define _CM1CON_CCH01_MASK                                  0x1
#define _CM1CON_CCH11_POSN                                  0x1
#define _CM1CON_CCH11_POSITION                              0x1
#define _CM1CON_CCH11_SIZE                                  0x1
#define _CM1CON_CCH11_LENGTH                                0x1
#define _CM1CON_CCH11_MASK                                  0x2

// Register: PADCFG1
#define PADCFG1 PADCFG1
extern volatile unsigned char           PADCFG1             __at(0xF54);
#ifndef _LIB_BUILD
asm("PADCFG1 equ 0F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RLPU                   :1;
        unsigned RKPU                   :1;
        unsigned RJPU                   :1;
        unsigned RHPU                   :1;
        unsigned RGPU                   :1;
        unsigned RFPU                   :1;
        unsigned REPU                   :1;
        unsigned RDPU                   :1;
    };
    struct {
        unsigned PMPTTL                 :1;
    };
} PADCFG1bits_t;
extern volatile PADCFG1bits_t PADCFG1bits __at(0xF54);
// bitfield macros
#define _PADCFG1_RLPU_POSN                                  0x0
#define _PADCFG1_RLPU_POSITION                              0x0
#define _PADCFG1_RLPU_SIZE                                  0x1
#define _PADCFG1_RLPU_LENGTH                                0x1
#define _PADCFG1_RLPU_MASK                                  0x1
#define _PADCFG1_RKPU_POSN                                  0x1
#define _PADCFG1_RKPU_POSITION                              0x1
#define _PADCFG1_RKPU_SIZE                                  0x1
#define _PADCFG1_RKPU_LENGTH                                0x1
#define _PADCFG1_RKPU_MASK                                  0x2
#define _PADCFG1_RJPU_POSN                                  0x2
#define _PADCFG1_RJPU_POSITION                              0x2
#define _PADCFG1_RJPU_SIZE                                  0x1
#define _PADCFG1_RJPU_LENGTH                                0x1
#define _PADCFG1_RJPU_MASK                                  0x4
#define _PADCFG1_RHPU_POSN                                  0x3
#define _PADCFG1_RHPU_POSITION                              0x3
#define _PADCFG1_RHPU_SIZE                                  0x1
#define _PADCFG1_RHPU_LENGTH                                0x1
#define _PADCFG1_RHPU_MASK                                  0x8
#define _PADCFG1_RGPU_POSN                                  0x4
#define _PADCFG1_RGPU_POSITION                              0x4
#define _PADCFG1_RGPU_SIZE                                  0x1
#define _PADCFG1_RGPU_LENGTH                                0x1
#define _PADCFG1_RGPU_MASK                                  0x10
#define _PADCFG1_RFPU_POSN                                  0x5
#define _PADCFG1_RFPU_POSITION                              0x5
#define _PADCFG1_RFPU_SIZE                                  0x1
#define _PADCFG1_RFPU_LENGTH                                0x1
#define _PADCFG1_RFPU_MASK                                  0x20
#define _PADCFG1_REPU_POSN                                  0x6
#define _PADCFG1_REPU_POSITION                              0x6
#define _PADCFG1_REPU_SIZE                                  0x1
#define _PADCFG1_REPU_LENGTH                                0x1
#define _PADCFG1_REPU_MASK                                  0x40
#define _PADCFG1_RDPU_POSN                                  0x7
#define _PADCFG1_RDPU_POSITION                              0x7
#define _PADCFG1_RDPU_SIZE                                  0x1
#define _PADCFG1_RDPU_LENGTH                                0x1
#define _PADCFG1_RDPU_MASK                                  0x80
#define _PADCFG1_PMPTTL_POSN                                0x0
#define _PADCFG1_PMPTTL_POSITION                            0x0
#define _PADCFG1_PMPTTL_SIZE                                0x1
#define _PADCFG1_PMPTTL_LENGTH                              0x1
#define _PADCFG1_PMPTTL_MASK                                0x1

// Register: IOCN
#define IOCN IOCN
extern volatile unsigned char           IOCN                __at(0xF55);
#ifndef _LIB_BUILD
asm("IOCN equ 0F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCN0                  :1;
        unsigned IOCN1                  :1;
        unsigned IOCN2                  :1;
        unsigned IOCN3                  :1;
        unsigned IOCN4                  :1;
        unsigned IOCN5                  :1;
        unsigned IOCN6                  :1;
        unsigned IOCN7                  :1;
    };
} IOCNbits_t;
extern volatile IOCNbits_t IOCNbits __at(0xF55);
// bitfield macros
#define _IOCN_IOCN0_POSN                                    0x0
#define _IOCN_IOCN0_POSITION                                0x0
#define _IOCN_IOCN0_SIZE                                    0x1
#define _IOCN_IOCN0_LENGTH                                  0x1
#define _IOCN_IOCN0_MASK                                    0x1
#define _IOCN_IOCN1_POSN                                    0x1
#define _IOCN_IOCN1_POSITION                                0x1
#define _IOCN_IOCN1_SIZE                                    0x1
#define _IOCN_IOCN1_LENGTH                                  0x1
#define _IOCN_IOCN1_MASK                                    0x2
#define _IOCN_IOCN2_POSN                                    0x2
#define _IOCN_IOCN2_POSITION                                0x2
#define _IOCN_IOCN2_SIZE                                    0x1
#define _IOCN_IOCN2_LENGTH                                  0x1
#define _IOCN_IOCN2_MASK                                    0x4
#define _IOCN_IOCN3_POSN                                    0x3
#define _IOCN_IOCN3_POSITION                                0x3
#define _IOCN_IOCN3_SIZE                                    0x1
#define _IOCN_IOCN3_LENGTH                                  0x1
#define _IOCN_IOCN3_MASK                                    0x8
#define _IOCN_IOCN4_POSN                                    0x4
#define _IOCN_IOCN4_POSITION                                0x4
#define _IOCN_IOCN4_SIZE                                    0x1
#define _IOCN_IOCN4_LENGTH                                  0x1
#define _IOCN_IOCN4_MASK                                    0x10
#define _IOCN_IOCN5_POSN                                    0x5
#define _IOCN_IOCN5_POSITION                                0x5
#define _IOCN_IOCN5_SIZE                                    0x1
#define _IOCN_IOCN5_LENGTH                                  0x1
#define _IOCN_IOCN5_MASK                                    0x20
#define _IOCN_IOCN6_POSN                                    0x6
#define _IOCN_IOCN6_POSITION                                0x6
#define _IOCN_IOCN6_SIZE                                    0x1
#define _IOCN_IOCN6_LENGTH                                  0x1
#define _IOCN_IOCN6_MASK                                    0x40
#define _IOCN_IOCN7_POSN                                    0x7
#define _IOCN_IOCN7_POSITION                                0x7
#define _IOCN_IOCN7_SIZE                                    0x1
#define _IOCN_IOCN7_LENGTH                                  0x1
#define _IOCN_IOCN7_MASK                                    0x80

// Register: IOCP
#define IOCP IOCP
extern volatile unsigned char           IOCP                __at(0xF56);
#ifndef _LIB_BUILD
asm("IOCP equ 0F56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCP0                  :1;
        unsigned IOCP1                  :1;
        unsigned IOCP2                  :1;
        unsigned IOCP3                  :1;
        unsigned IOCP4                  :1;
        unsigned IOCP5                  :1;
        unsigned IOCP6                  :1;
        unsigned IOCP7                  :1;
    };
} IOCPbits_t;
extern volatile IOCPbits_t IOCPbits __at(0xF56);
// bitfield macros
#define _IOCP_IOCP0_POSN                                    0x0
#define _IOCP_IOCP0_POSITION                                0x0
#define _IOCP_IOCP0_SIZE                                    0x1
#define _IOCP_IOCP0_LENGTH                                  0x1
#define _IOCP_IOCP0_MASK                                    0x1
#define _IOCP_IOCP1_POSN                                    0x1
#define _IOCP_IOCP1_POSITION                                0x1
#define _IOCP_IOCP1_SIZE                                    0x1
#define _IOCP_IOCP1_LENGTH                                  0x1
#define _IOCP_IOCP1_MASK                                    0x2
#define _IOCP_IOCP2_POSN                                    0x2
#define _IOCP_IOCP2_POSITION                                0x2
#define _IOCP_IOCP2_SIZE                                    0x1
#define _IOCP_IOCP2_LENGTH                                  0x1
#define _IOCP_IOCP2_MASK                                    0x4
#define _IOCP_IOCP3_POSN                                    0x3
#define _IOCP_IOCP3_POSITION                                0x3
#define _IOCP_IOCP3_SIZE                                    0x1
#define _IOCP_IOCP3_LENGTH                                  0x1
#define _IOCP_IOCP3_MASK                                    0x8
#define _IOCP_IOCP4_POSN                                    0x4
#define _IOCP_IOCP4_POSITION                                0x4
#define _IOCP_IOCP4_SIZE                                    0x1
#define _IOCP_IOCP4_LENGTH                                  0x1
#define _IOCP_IOCP4_MASK                                    0x10
#define _IOCP_IOCP5_POSN                                    0x5
#define _IOCP_IOCP5_POSITION                                0x5
#define _IOCP_IOCP5_SIZE                                    0x1
#define _IOCP_IOCP5_LENGTH                                  0x1
#define _IOCP_IOCP5_MASK                                    0x20
#define _IOCP_IOCP6_POSN                                    0x6
#define _IOCP_IOCP6_POSITION                                0x6
#define _IOCP_IOCP6_SIZE                                    0x1
#define _IOCP_IOCP6_LENGTH                                  0x1
#define _IOCP_IOCP6_MASK                                    0x40
#define _IOCP_IOCP7_POSN                                    0x7
#define _IOCP_IOCP7_POSITION                                0x7
#define _IOCP_IOCP7_SIZE                                    0x1
#define _IOCP_IOCP7_LENGTH                                  0x1
#define _IOCP_IOCP7_MASK                                    0x80

// Register: RTCCON2
#define RTCCON2 RTCCON2
extern volatile unsigned char           RTCCON2             __at(0xF57);
#ifndef _LIB_BUILD
asm("RTCCON2 equ 0F57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCSECSEL              :2;
        unsigned RTCCLKSEL              :2;
        unsigned PWCSPRE                :1;
        unsigned PWCCPRE                :1;
        unsigned PWCPOL                 :1;
        unsigned PWCEN                  :1;
    };
    struct {
        unsigned RTCSECSEL0             :1;
        unsigned RTCSECSEL1             :1;
        unsigned RTCCLKSEL0             :1;
        unsigned RTCCLKSEL1             :1;
    };
} RTCCON2bits_t;
extern volatile RTCCON2bits_t RTCCON2bits __at(0xF57);
// bitfield macros
#define _RTCCON2_RTCSECSEL_POSN                             0x0
#define _RTCCON2_RTCSECSEL_POSITION                         0x0
#define _RTCCON2_RTCSECSEL_SIZE                             0x2
#define _RTCCON2_RTCSECSEL_LENGTH                           0x2
#define _RTCCON2_RTCSECSEL_MASK                             0x3
#define _RTCCON2_RTCCLKSEL_POSN                             0x2
#define _RTCCON2_RTCCLKSEL_POSITION                         0x2
#define _RTCCON2_RTCCLKSEL_SIZE                             0x2
#define _RTCCON2_RTCCLKSEL_LENGTH                           0x2
#define _RTCCON2_RTCCLKSEL_MASK                             0xC
#define _RTCCON2_PWCSPRE_POSN                               0x4
#define _RTCCON2_PWCSPRE_POSITION                           0x4
#define _RTCCON2_PWCSPRE_SIZE                               0x1
#define _RTCCON2_PWCSPRE_LENGTH                             0x1
#define _RTCCON2_PWCSPRE_MASK                               0x10
#define _RTCCON2_PWCCPRE_POSN                               0x5
#define _RTCCON2_PWCCPRE_POSITION                           0x5
#define _RTCCON2_PWCCPRE_SIZE                               0x1
#define _RTCCON2_PWCCPRE_LENGTH                             0x1
#define _RTCCON2_PWCCPRE_MASK                               0x20
#define _RTCCON2_PWCPOL_POSN                                0x6
#define _RTCCON2_PWCPOL_POSITION                            0x6
#define _RTCCON2_PWCPOL_SIZE                                0x1
#define _RTCCON2_PWCPOL_LENGTH                              0x1
#define _RTCCON2_PWCPOL_MASK                                0x40
#define _RTCCON2_PWCEN_POSN                                 0x7
#define _RTCCON2_PWCEN_POSITION                             0x7
#define _RTCCON2_PWCEN_SIZE                                 0x1
#define _RTCCON2_PWCEN_LENGTH                               0x1
#define _RTCCON2_PWCEN_MASK                                 0x80
#define _RTCCON2_RTCSECSEL0_POSN                            0x0
#define _RTCCON2_RTCSECSEL0_POSITION                        0x0
#define _RTCCON2_RTCSECSEL0_SIZE                            0x1
#define _RTCCON2_RTCSECSEL0_LENGTH                          0x1
#define _RTCCON2_RTCSECSEL0_MASK                            0x1
#define _RTCCON2_RTCSECSEL1_POSN                            0x1
#define _RTCCON2_RTCSECSEL1_POSITION                        0x1
#define _RTCCON2_RTCSECSEL1_SIZE                            0x1
#define _RTCCON2_RTCSECSEL1_LENGTH                          0x1
#define _RTCCON2_RTCSECSEL1_MASK                            0x2
#define _RTCCON2_RTCCLKSEL0_POSN                            0x2
#define _RTCCON2_RTCCLKSEL0_POSITION                        0x2
#define _RTCCON2_RTCCLKSEL0_SIZE                            0x1
#define _RTCCON2_RTCCLKSEL0_LENGTH                          0x1
#define _RTCCON2_RTCCLKSEL0_MASK                            0x4
#define _RTCCON2_RTCCLKSEL1_POSN                            0x3
#define _RTCCON2_RTCCLKSEL1_POSITION                        0x3
#define _RTCCON2_RTCCLKSEL1_SIZE                            0x1
#define _RTCCON2_RTCCLKSEL1_LENGTH                          0x1
#define _RTCCON2_RTCCLKSEL1_MASK                            0x8

// Register: ALRMVALL
#define ALRMVALL ALRMVALL
extern volatile unsigned char           ALRMVALL            __at(0xF58);
#ifndef _LIB_BUILD
asm("ALRMVALL equ 0F58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMVALL               :8;
    };
} ALRMVALLbits_t;
extern volatile ALRMVALLbits_t ALRMVALLbits __at(0xF58);
// bitfield macros
#define _ALRMVALL_ALRMVALL_POSN                             0x0
#define _ALRMVALL_ALRMVALL_POSITION                         0x0
#define _ALRMVALL_ALRMVALL_SIZE                             0x8
#define _ALRMVALL_ALRMVALL_LENGTH                           0x8
#define _ALRMVALL_ALRMVALL_MASK                             0xFF

// Register: ALRMVALH
#define ALRMVALH ALRMVALH
extern volatile unsigned char           ALRMVALH            __at(0xF59);
#ifndef _LIB_BUILD
asm("ALRMVALH equ 0F59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMVALH               :8;
    };
} ALRMVALHbits_t;
extern volatile ALRMVALHbits_t ALRMVALHbits __at(0xF59);
// bitfield macros
#define _ALRMVALH_ALRMVALH_POSN                             0x0
#define _ALRMVALH_ALRMVALH_POSITION                         0x0
#define _ALRMVALH_ALRMVALH_SIZE                             0x8
#define _ALRMVALH_ALRMVALH_LENGTH                           0x8
#define _ALRMVALH_ALRMVALH_MASK                             0xFF

// Register: ALRMRPT
#define ALRMRPT ALRMRPT
extern volatile unsigned char           ALRMRPT             __at(0xF5A);
#ifndef _LIB_BUILD
asm("ALRMRPT equ 0F5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ARPT                   :8;
    };
    struct {
        unsigned ARPT0                  :1;
        unsigned ARPT1                  :1;
        unsigned ARPT2                  :1;
        unsigned ARPT3                  :1;
        unsigned ARPT4                  :1;
        unsigned ARPT5                  :1;
        unsigned ARPT6                  :1;
        unsigned ARPT7                  :1;
    };
} ALRMRPTbits_t;
extern volatile ALRMRPTbits_t ALRMRPTbits __at(0xF5A);
// bitfield macros
#define _ALRMRPT_ARPT_POSN                                  0x0
#define _ALRMRPT_ARPT_POSITION                              0x0
#define _ALRMRPT_ARPT_SIZE                                  0x8
#define _ALRMRPT_ARPT_LENGTH                                0x8
#define _ALRMRPT_ARPT_MASK                                  0xFF
#define _ALRMRPT_ARPT0_POSN                                 0x0
#define _ALRMRPT_ARPT0_POSITION                             0x0
#define _ALRMRPT_ARPT0_SIZE                                 0x1
#define _ALRMRPT_ARPT0_LENGTH                               0x1
#define _ALRMRPT_ARPT0_MASK                                 0x1
#define _ALRMRPT_ARPT1_POSN                                 0x1
#define _ALRMRPT_ARPT1_POSITION                             0x1
#define _ALRMRPT_ARPT1_SIZE                                 0x1
#define _ALRMRPT_ARPT1_LENGTH                               0x1
#define _ALRMRPT_ARPT1_MASK                                 0x2
#define _ALRMRPT_ARPT2_POSN                                 0x2
#define _ALRMRPT_ARPT2_POSITION                             0x2
#define _ALRMRPT_ARPT2_SIZE                                 0x1
#define _ALRMRPT_ARPT2_LENGTH                               0x1
#define _ALRMRPT_ARPT2_MASK                                 0x4
#define _ALRMRPT_ARPT3_POSN                                 0x3
#define _ALRMRPT_ARPT3_POSITION                             0x3
#define _ALRMRPT_ARPT3_SIZE                                 0x1
#define _ALRMRPT_ARPT3_LENGTH                               0x1
#define _ALRMRPT_ARPT3_MASK                                 0x8
#define _ALRMRPT_ARPT4_POSN                                 0x4
#define _ALRMRPT_ARPT4_POSITION                             0x4
#define _ALRMRPT_ARPT4_SIZE                                 0x1
#define _ALRMRPT_ARPT4_LENGTH                               0x1
#define _ALRMRPT_ARPT4_MASK                                 0x10
#define _ALRMRPT_ARPT5_POSN                                 0x5
#define _ALRMRPT_ARPT5_POSITION                             0x5
#define _ALRMRPT_ARPT5_SIZE                                 0x1
#define _ALRMRPT_ARPT5_LENGTH                               0x1
#define _ALRMRPT_ARPT5_MASK                                 0x20
#define _ALRMRPT_ARPT6_POSN                                 0x6
#define _ALRMRPT_ARPT6_POSITION                             0x6
#define _ALRMRPT_ARPT6_SIZE                                 0x1
#define _ALRMRPT_ARPT6_LENGTH                               0x1
#define _ALRMRPT_ARPT6_MASK                                 0x40
#define _ALRMRPT_ARPT7_POSN                                 0x7
#define _ALRMRPT_ARPT7_POSITION                             0x7
#define _ALRMRPT_ARPT7_SIZE                                 0x1
#define _ALRMRPT_ARPT7_LENGTH                               0x1
#define _ALRMRPT_ARPT7_MASK                                 0x80

// Register: ALRMCFG
#define ALRMCFG ALRMCFG
extern volatile unsigned char           ALRMCFG             __at(0xF5B);
#ifndef _LIB_BUILD
asm("ALRMCFG equ 0F5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMPTR                :2;
        unsigned AMASK                  :4;
        unsigned CHIME                  :1;
        unsigned ALRMEN                 :1;
    };
    struct {
        unsigned ALRMPTR0               :1;
        unsigned ALRMPTR1               :1;
        unsigned AMASK0                 :1;
        unsigned AMASK1                 :1;
        unsigned AMASK2                 :1;
        unsigned AMASK3                 :1;
    };
} ALRMCFGbits_t;
extern volatile ALRMCFGbits_t ALRMCFGbits __at(0xF5B);
// bitfield macros
#define _ALRMCFG_ALRMPTR_POSN                               0x0
#define _ALRMCFG_ALRMPTR_POSITION                           0x0
#define _ALRMCFG_ALRMPTR_SIZE                               0x2
#define _ALRMCFG_ALRMPTR_LENGTH                             0x2
#define _ALRMCFG_ALRMPTR_MASK                               0x3
#define _ALRMCFG_AMASK_POSN                                 0x2
#define _ALRMCFG_AMASK_POSITION                             0x2
#define _ALRMCFG_AMASK_SIZE                                 0x4
#define _ALRMCFG_AMASK_LENGTH                               0x4
#define _ALRMCFG_AMASK_MASK                                 0x3C
#define _ALRMCFG_CHIME_POSN                                 0x6
#define _ALRMCFG_CHIME_POSITION                             0x6
#define _ALRMCFG_CHIME_SIZE                                 0x1
#define _ALRMCFG_CHIME_LENGTH                               0x1
#define _ALRMCFG_CHIME_MASK                                 0x40
#define _ALRMCFG_ALRMEN_POSN                                0x7
#define _ALRMCFG_ALRMEN_POSITION                            0x7
#define _ALRMCFG_ALRMEN_SIZE                                0x1
#define _ALRMCFG_ALRMEN_LENGTH                              0x1
#define _ALRMCFG_ALRMEN_MASK                                0x80
#define _ALRMCFG_ALRMPTR0_POSN                              0x0
#define _ALRMCFG_ALRMPTR0_POSITION                          0x0
#define _ALRMCFG_ALRMPTR0_SIZE                              0x1
#define _ALRMCFG_ALRMPTR0_LENGTH                            0x1
#define _ALRMCFG_ALRMPTR0_MASK                              0x1
#define _ALRMCFG_ALRMPTR1_POSN                              0x1
#define _ALRMCFG_ALRMPTR1_POSITION                          0x1
#define _ALRMCFG_ALRMPTR1_SIZE                              0x1
#define _ALRMCFG_ALRMPTR1_LENGTH                            0x1
#define _ALRMCFG_ALRMPTR1_MASK                              0x2
#define _ALRMCFG_AMASK0_POSN                                0x2
#define _ALRMCFG_AMASK0_POSITION                            0x2
#define _ALRMCFG_AMASK0_SIZE                                0x1
#define _ALRMCFG_AMASK0_LENGTH                              0x1
#define _ALRMCFG_AMASK0_MASK                                0x4
#define _ALRMCFG_AMASK1_POSN                                0x3
#define _ALRMCFG_AMASK1_POSITION                            0x3
#define _ALRMCFG_AMASK1_SIZE                                0x1
#define _ALRMCFG_AMASK1_LENGTH                              0x1
#define _ALRMCFG_AMASK1_MASK                                0x8
#define _ALRMCFG_AMASK2_POSN                                0x4
#define _ALRMCFG_AMASK2_POSITION                            0x4
#define _ALRMCFG_AMASK2_SIZE                                0x1
#define _ALRMCFG_AMASK2_LENGTH                              0x1
#define _ALRMCFG_AMASK2_MASK                                0x10
#define _ALRMCFG_AMASK3_POSN                                0x5
#define _ALRMCFG_AMASK3_POSITION                            0x5
#define _ALRMCFG_AMASK3_SIZE                                0x1
#define _ALRMCFG_AMASK3_LENGTH                              0x1
#define _ALRMCFG_AMASK3_MASK                                0x20

// Register: RTCVALL
#define RTCVALL RTCVALL
extern volatile unsigned char           RTCVALL             __at(0xF5C);
#ifndef _LIB_BUILD
asm("RTCVALL equ 0F5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCVALL                :8;
    };
} RTCVALLbits_t;
extern volatile RTCVALLbits_t RTCVALLbits __at(0xF5C);
// bitfield macros
#define _RTCVALL_RTCVALL_POSN                               0x0
#define _RTCVALL_RTCVALL_POSITION                           0x0
#define _RTCVALL_RTCVALL_SIZE                               0x8
#define _RTCVALL_RTCVALL_LENGTH                             0x8
#define _RTCVALL_RTCVALL_MASK                               0xFF

// Register: RTCVALH
#define RTCVALH RTCVALH
extern volatile unsigned char           RTCVALH             __at(0xF5D);
#ifndef _LIB_BUILD
asm("RTCVALH equ 0F5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCVALH                :8;
    };
    struct {
        unsigned WAITE0                 :1;
        unsigned WAITE1                 :1;
        unsigned WAITM0                 :1;
        unsigned WAITM1                 :1;
        unsigned WAITM2                 :1;
        unsigned WAITM3                 :1;
        unsigned WAITB0                 :1;
        unsigned WAITB1                 :1;
    };
} RTCVALHbits_t;
extern volatile RTCVALHbits_t RTCVALHbits __at(0xF5D);
// bitfield macros
#define _RTCVALH_RTCVALH_POSN                               0x0
#define _RTCVALH_RTCVALH_POSITION                           0x0
#define _RTCVALH_RTCVALH_SIZE                               0x8
#define _RTCVALH_RTCVALH_LENGTH                             0x8
#define _RTCVALH_RTCVALH_MASK                               0xFF
#define _RTCVALH_WAITE0_POSN                                0x0
#define _RTCVALH_WAITE0_POSITION                            0x0
#define _RTCVALH_WAITE0_SIZE                                0x1
#define _RTCVALH_WAITE0_LENGTH                              0x1
#define _RTCVALH_WAITE0_MASK                                0x1
#define _RTCVALH_WAITE1_POSN                                0x1
#define _RTCVALH_WAITE1_POSITION                            0x1
#define _RTCVALH_WAITE1_SIZE                                0x1
#define _RTCVALH_WAITE1_LENGTH                              0x1
#define _RTCVALH_WAITE1_MASK                                0x2
#define _RTCVALH_WAITM0_POSN                                0x2
#define _RTCVALH_WAITM0_POSITION                            0x2
#define _RTCVALH_WAITM0_SIZE                                0x1
#define _RTCVALH_WAITM0_LENGTH                              0x1
#define _RTCVALH_WAITM0_MASK                                0x4
#define _RTCVALH_WAITM1_POSN                                0x3
#define _RTCVALH_WAITM1_POSITION                            0x3
#define _RTCVALH_WAITM1_SIZE                                0x1
#define _RTCVALH_WAITM1_LENGTH                              0x1
#define _RTCVALH_WAITM1_MASK                                0x8
#define _RTCVALH_WAITM2_POSN                                0x4
#define _RTCVALH_WAITM2_POSITION                            0x4
#define _RTCVALH_WAITM2_SIZE                                0x1
#define _RTCVALH_WAITM2_LENGTH                              0x1
#define _RTCVALH_WAITM2_MASK                                0x10
#define _RTCVALH_WAITM3_POSN                                0x5
#define _RTCVALH_WAITM3_POSITION                            0x5
#define _RTCVALH_WAITM3_SIZE                                0x1
#define _RTCVALH_WAITM3_LENGTH                              0x1
#define _RTCVALH_WAITM3_MASK                                0x20
#define _RTCVALH_WAITB0_POSN                                0x6
#define _RTCVALH_WAITB0_POSITION                            0x6
#define _RTCVALH_WAITB0_SIZE                                0x1
#define _RTCVALH_WAITB0_LENGTH                              0x1
#define _RTCVALH_WAITB0_MASK                                0x40
#define _RTCVALH_WAITB1_POSN                                0x7
#define _RTCVALH_WAITB1_POSITION                            0x7
#define _RTCVALH_WAITB1_SIZE                                0x1
#define _RTCVALH_WAITB1_LENGTH                              0x1
#define _RTCVALH_WAITB1_MASK                                0x80

// Register: RTCCAL
#define RTCCAL RTCCAL
extern volatile unsigned char           RTCCAL              __at(0xF5E);
#ifndef _LIB_BUILD
asm("RTCCAL equ 0F5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CAL                    :8;
    };
    struct {
        unsigned CAL0                   :1;
        unsigned CAL1                   :1;
        unsigned CAL2                   :1;
        unsigned CAL3                   :1;
        unsigned CAL4                   :1;
        unsigned CAL5                   :1;
        unsigned CAL6                   :1;
        unsigned CAL7                   :1;
    };
} RTCCALbits_t;
extern volatile RTCCALbits_t RTCCALbits __at(0xF5E);
// bitfield macros
#define _RTCCAL_CAL_POSN                                    0x0
#define _RTCCAL_CAL_POSITION                                0x0
#define _RTCCAL_CAL_SIZE                                    0x8
#define _RTCCAL_CAL_LENGTH                                  0x8
#define _RTCCAL_CAL_MASK                                    0xFF
#define _RTCCAL_CAL0_POSN                                   0x0
#define _RTCCAL_CAL0_POSITION                               0x0
#define _RTCCAL_CAL0_SIZE                                   0x1
#define _RTCCAL_CAL0_LENGTH                                 0x1
#define _RTCCAL_CAL0_MASK                                   0x1
#define _RTCCAL_CAL1_POSN                                   0x1
#define _RTCCAL_CAL1_POSITION                               0x1
#define _RTCCAL_CAL1_SIZE                                   0x1
#define _RTCCAL_CAL1_LENGTH                                 0x1
#define _RTCCAL_CAL1_MASK                                   0x2
#define _RTCCAL_CAL2_POSN                                   0x2
#define _RTCCAL_CAL2_POSITION                               0x2
#define _RTCCAL_CAL2_SIZE                                   0x1
#define _RTCCAL_CAL2_LENGTH                                 0x1
#define _RTCCAL_CAL2_MASK                                   0x4
#define _RTCCAL_CAL3_POSN                                   0x3
#define _RTCCAL_CAL3_POSITION                               0x3
#define _RTCCAL_CAL3_SIZE                                   0x1
#define _RTCCAL_CAL3_LENGTH                                 0x1
#define _RTCCAL_CAL3_MASK                                   0x8
#define _RTCCAL_CAL4_POSN                                   0x4
#define _RTCCAL_CAL4_POSITION                               0x4
#define _RTCCAL_CAL4_SIZE                                   0x1
#define _RTCCAL_CAL4_LENGTH                                 0x1
#define _RTCCAL_CAL4_MASK                                   0x10
#define _RTCCAL_CAL5_POSN                                   0x5
#define _RTCCAL_CAL5_POSITION                               0x5
#define _RTCCAL_CAL5_SIZE                                   0x1
#define _RTCCAL_CAL5_LENGTH                                 0x1
#define _RTCCAL_CAL5_MASK                                   0x20
#define _RTCCAL_CAL6_POSN                                   0x6
#define _RTCCAL_CAL6_POSITION                               0x6
#define _RTCCAL_CAL6_SIZE                                   0x1
#define _RTCCAL_CAL6_LENGTH                                 0x1
#define _RTCCAL_CAL6_MASK                                   0x40
#define _RTCCAL_CAL7_POSN                                   0x7
#define _RTCCAL_CAL7_POSITION                               0x7
#define _RTCCAL_CAL7_SIZE                                   0x1
#define _RTCCAL_CAL7_LENGTH                                 0x1
#define _RTCCAL_CAL7_MASK                                   0x80

// Register: RTCCON1
#define RTCCON1 RTCCON1
extern volatile unsigned char           RTCCON1             __at(0xF5F);
#ifndef _LIB_BUILD
asm("RTCCON1 equ 0F5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCPTR                 :2;
        unsigned RTCOE                  :1;
        unsigned HALFSEC                :1;
        unsigned RTCSYNC                :1;
        unsigned RTCWREN                :1;
        unsigned                        :1;
        unsigned RTCEN                  :1;
    };
    struct {
        unsigned RTCPTR0                :1;
        unsigned RTCPTR1                :1;
    };
} RTCCON1bits_t;
extern volatile RTCCON1bits_t RTCCON1bits __at(0xF5F);
// bitfield macros
#define _RTCCON1_RTCPTR_POSN                                0x0
#define _RTCCON1_RTCPTR_POSITION                            0x0
#define _RTCCON1_RTCPTR_SIZE                                0x2
#define _RTCCON1_RTCPTR_LENGTH                              0x2
#define _RTCCON1_RTCPTR_MASK                                0x3
#define _RTCCON1_RTCOE_POSN                                 0x2
#define _RTCCON1_RTCOE_POSITION                             0x2
#define _RTCCON1_RTCOE_SIZE                                 0x1
#define _RTCCON1_RTCOE_LENGTH                               0x1
#define _RTCCON1_RTCOE_MASK                                 0x4
#define _RTCCON1_HALFSEC_POSN                               0x3
#define _RTCCON1_HALFSEC_POSITION                           0x3
#define _RTCCON1_HALFSEC_SIZE                               0x1
#define _RTCCON1_HALFSEC_LENGTH                             0x1
#define _RTCCON1_HALFSEC_MASK                               0x8
#define _RTCCON1_RTCSYNC_POSN                               0x4
#define _RTCCON1_RTCSYNC_POSITION                           0x4
#define _RTCCON1_RTCSYNC_SIZE                               0x1
#define _RTCCON1_RTCSYNC_LENGTH                             0x1
#define _RTCCON1_RTCSYNC_MASK                               0x10
#define _RTCCON1_RTCWREN_POSN                               0x5
#define _RTCCON1_RTCWREN_POSITION                           0x5
#define _RTCCON1_RTCWREN_SIZE                               0x1
#define _RTCCON1_RTCWREN_LENGTH                             0x1
#define _RTCCON1_RTCWREN_MASK                               0x20
#define _RTCCON1_RTCEN_POSN                                 0x7
#define _RTCCON1_RTCEN_POSITION                             0x7
#define _RTCCON1_RTCEN_SIZE                                 0x1
#define _RTCCON1_RTCEN_LENGTH                               0x1
#define _RTCCON1_RTCEN_MASK                                 0x80
#define _RTCCON1_RTCPTR0_POSN                               0x0
#define _RTCCON1_RTCPTR0_POSITION                           0x0
#define _RTCCON1_RTCPTR0_SIZE                               0x1
#define _RTCCON1_RTCPTR0_LENGTH                             0x1
#define _RTCCON1_RTCPTR0_MASK                               0x1
#define _RTCCON1_RTCPTR1_POSN                               0x1
#define _RTCCON1_RTCPTR1_POSITION                           0x1
#define _RTCCON1_RTCPTR1_SIZE                               0x1
#define _RTCCON1_RTCPTR1_LENGTH                             0x1
#define _RTCCON1_RTCPTR1_MASK                               0x2

// Register: DMACON1
#define DMACON1 DMACON1
extern volatile unsigned char           DMACON1             __at(0xF60);
#ifndef _LIB_BUILD
asm("DMACON1 equ 0F60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMAEN                  :1;
        unsigned DLYINTEN               :1;
        unsigned DUPLEX                 :2;
        unsigned RXINC                  :1;
        unsigned TXINC                  :1;
        unsigned SSCON                  :2;
    };
    struct {
        unsigned                        :2;
        unsigned DUPLEX0                :1;
        unsigned DUPLEX1                :1;
        unsigned                        :2;
        unsigned SSCON0                 :1;
        unsigned SSCON1                 :1;
    };
} DMACON1bits_t;
extern volatile DMACON1bits_t DMACON1bits __at(0xF60);
// bitfield macros
#define _DMACON1_DMAEN_POSN                                 0x0
#define _DMACON1_DMAEN_POSITION                             0x0
#define _DMACON1_DMAEN_SIZE                                 0x1
#define _DMACON1_DMAEN_LENGTH                               0x1
#define _DMACON1_DMAEN_MASK                                 0x1
#define _DMACON1_DLYINTEN_POSN                              0x1
#define _DMACON1_DLYINTEN_POSITION                          0x1
#define _DMACON1_DLYINTEN_SIZE                              0x1
#define _DMACON1_DLYINTEN_LENGTH                            0x1
#define _DMACON1_DLYINTEN_MASK                              0x2
#define _DMACON1_DUPLEX_POSN                                0x2
#define _DMACON1_DUPLEX_POSITION                            0x2
#define _DMACON1_DUPLEX_SIZE                                0x2
#define _DMACON1_DUPLEX_LENGTH                              0x2
#define _DMACON1_DUPLEX_MASK                                0xC
#define _DMACON1_RXINC_POSN                                 0x4
#define _DMACON1_RXINC_POSITION                             0x4
#define _DMACON1_RXINC_SIZE                                 0x1
#define _DMACON1_RXINC_LENGTH                               0x1
#define _DMACON1_RXINC_MASK                                 0x10
#define _DMACON1_TXINC_POSN                                 0x5
#define _DMACON1_TXINC_POSITION                             0x5
#define _DMACON1_TXINC_SIZE                                 0x1
#define _DMACON1_TXINC_LENGTH                               0x1
#define _DMACON1_TXINC_MASK                                 0x20
#define _DMACON1_SSCON_POSN                                 0x6
#define _DMACON1_SSCON_POSITION                             0x6
#define _DMACON1_SSCON_SIZE                                 0x2
#define _DMACON1_SSCON_LENGTH                               0x2
#define _DMACON1_SSCON_MASK                                 0xC0
#define _DMACON1_DUPLEX0_POSN                               0x2
#define _DMACON1_DUPLEX0_POSITION                           0x2
#define _DMACON1_DUPLEX0_SIZE                               0x1
#define _DMACON1_DUPLEX0_LENGTH                             0x1
#define _DMACON1_DUPLEX0_MASK                               0x4
#define _DMACON1_DUPLEX1_POSN                               0x3
#define _DMACON1_DUPLEX1_POSITION                           0x3
#define _DMACON1_DUPLEX1_SIZE                               0x1
#define _DMACON1_DUPLEX1_LENGTH                             0x1
#define _DMACON1_DUPLEX1_MASK                               0x8
#define _DMACON1_SSCON0_POSN                                0x6
#define _DMACON1_SSCON0_POSITION                            0x6
#define _DMACON1_SSCON0_SIZE                                0x1
#define _DMACON1_SSCON0_LENGTH                              0x1
#define _DMACON1_SSCON0_MASK                                0x40
#define _DMACON1_SSCON1_POSN                                0x7
#define _DMACON1_SSCON1_POSITION                            0x7
#define _DMACON1_SSCON1_SIZE                                0x1
#define _DMACON1_SSCON1_LENGTH                              0x1
#define _DMACON1_SSCON1_MASK                                0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0xF61);
#ifndef _LIB_BUILD
asm("PIE6 equ 0F61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CMP1IE                 :1;
        unsigned CMP2IE                 :1;
        unsigned CMP3IE                 :1;
        unsigned                        :1;
        unsigned TX3IE                  :1;
        unsigned RC3IE                  :1;
        unsigned TX4IE                  :1;
        unsigned RC4IE                  :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0xF61);
// bitfield macros
#define _PIE6_CMP1IE_POSN                                   0x0
#define _PIE6_CMP1IE_POSITION                               0x0
#define _PIE6_CMP1IE_SIZE                                   0x1
#define _PIE6_CMP1IE_LENGTH                                 0x1
#define _PIE6_CMP1IE_MASK                                   0x1
#define _PIE6_CMP2IE_POSN                                   0x1
#define _PIE6_CMP2IE_POSITION                               0x1
#define _PIE6_CMP2IE_SIZE                                   0x1
#define _PIE6_CMP2IE_LENGTH                                 0x1
#define _PIE6_CMP2IE_MASK                                   0x2
#define _PIE6_CMP3IE_POSN                                   0x2
#define _PIE6_CMP3IE_POSITION                               0x2
#define _PIE6_CMP3IE_SIZE                                   0x1
#define _PIE6_CMP3IE_LENGTH                                 0x1
#define _PIE6_CMP3IE_MASK                                   0x4
#define _PIE6_TX3IE_POSN                                    0x4
#define _PIE6_TX3IE_POSITION                                0x4
#define _PIE6_TX3IE_SIZE                                    0x1
#define _PIE6_TX3IE_LENGTH                                  0x1
#define _PIE6_TX3IE_MASK                                    0x10
#define _PIE6_RC3IE_POSN                                    0x5
#define _PIE6_RC3IE_POSITION                                0x5
#define _PIE6_RC3IE_SIZE                                    0x1
#define _PIE6_RC3IE_LENGTH                                  0x1
#define _PIE6_RC3IE_MASK                                    0x20
#define _PIE6_TX4IE_POSN                                    0x6
#define _PIE6_TX4IE_POSITION                                0x6
#define _PIE6_TX4IE_SIZE                                    0x1
#define _PIE6_TX4IE_LENGTH                                  0x1
#define _PIE6_TX4IE_MASK                                    0x40
#define _PIE6_RC4IE_POSN                                    0x7
#define _PIE6_RC4IE_POSITION                                0x7
#define _PIE6_RC4IE_SIZE                                    0x1
#define _PIE6_RC4IE_LENGTH                                  0x1
#define _PIE6_RC4IE_MASK                                    0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0xF62);
#ifndef _LIB_BUILD
asm("WPUB equ 0F62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0xF62);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ACTCON
#define ACTCON ACTCON
extern volatile unsigned char           ACTCON              __at(0xF63);
#ifndef _LIB_BUILD
asm("ACTCON equ 0F63h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACTORSPOL              :1;
        unsigned ACTORS                 :1;
        unsigned ACTLOCKPOL             :1;
        unsigned ACTLOCK                :1;
        unsigned ACTSRC                 :1;
        unsigned ACTSIDL                :1;
        unsigned                        :1;
        unsigned ACTEN                  :1;
    };
} ACTCONbits_t;
extern volatile ACTCONbits_t ACTCONbits __at(0xF63);
// bitfield macros
#define _ACTCON_ACTORSPOL_POSN                              0x0
#define _ACTCON_ACTORSPOL_POSITION                          0x0
#define _ACTCON_ACTORSPOL_SIZE                              0x1
#define _ACTCON_ACTORSPOL_LENGTH                            0x1
#define _ACTCON_ACTORSPOL_MASK                              0x1
#define _ACTCON_ACTORS_POSN                                 0x1
#define _ACTCON_ACTORS_POSITION                             0x1
#define _ACTCON_ACTORS_SIZE                                 0x1
#define _ACTCON_ACTORS_LENGTH                               0x1
#define _ACTCON_ACTORS_MASK                                 0x2
#define _ACTCON_ACTLOCKPOL_POSN                             0x2
#define _ACTCON_ACTLOCKPOL_POSITION                         0x2
#define _ACTCON_ACTLOCKPOL_SIZE                             0x1
#define _ACTCON_ACTLOCKPOL_LENGTH                           0x1
#define _ACTCON_ACTLOCKPOL_MASK                             0x4
#define _ACTCON_ACTLOCK_POSN                                0x3
#define _ACTCON_ACTLOCK_POSITION                            0x3
#define _ACTCON_ACTLOCK_SIZE                                0x1
#define _ACTCON_ACTLOCK_LENGTH                              0x1
#define _ACTCON_ACTLOCK_MASK                                0x8
#define _ACTCON_ACTSRC_POSN                                 0x4
#define _ACTCON_ACTSRC_POSITION                             0x4
#define _ACTCON_ACTSRC_SIZE                                 0x1
#define _ACTCON_ACTSRC_LENGTH                               0x1
#define _ACTCON_ACTSRC_MASK                                 0x10
#define _ACTCON_ACTSIDL_POSN                                0x5
#define _ACTCON_ACTSIDL_POSITION                            0x5
#define _ACTCON_ACTSIDL_SIZE                                0x1
#define _ACTCON_ACTSIDL_LENGTH                              0x1
#define _ACTCON_ACTSIDL_MASK                                0x20
#define _ACTCON_ACTEN_POSN                                  0x7
#define _ACTCON_ACTEN_POSITION                              0x7
#define _ACTCON_ACTEN_SIZE                                  0x1
#define _ACTCON_ACTEN_LENGTH                                0x1
#define _ACTCON_ACTEN_MASK                                  0x80

// Register: OSCCON4
#define OSCCON4 OSCCON4
extern volatile unsigned char           OSCCON4             __at(0xF64);
#ifndef _LIB_BUILD
asm("OSCCON4 equ 0F64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned PLLEN                  :1;
        unsigned CPDIV                  :2;
    };
    struct {
        unsigned                        :6;
        unsigned CPDIV0                 :1;
        unsigned CPDIV1                 :1;
    };
} OSCCON4bits_t;
extern volatile OSCCON4bits_t OSCCON4bits __at(0xF64);
// bitfield macros
#define _OSCCON4_PLLEN_POSN                                 0x5
#define _OSCCON4_PLLEN_POSITION                             0x5
#define _OSCCON4_PLLEN_SIZE                                 0x1
#define _OSCCON4_PLLEN_LENGTH                               0x1
#define _OSCCON4_PLLEN_MASK                                 0x20
#define _OSCCON4_CPDIV_POSN                                 0x6
#define _OSCCON4_CPDIV_POSITION                             0x6
#define _OSCCON4_CPDIV_SIZE                                 0x2
#define _OSCCON4_CPDIV_LENGTH                               0x2
#define _OSCCON4_CPDIV_MASK                                 0xC0
#define _OSCCON4_CPDIV0_POSN                                0x6
#define _OSCCON4_CPDIV0_POSITION                            0x6
#define _OSCCON4_CPDIV0_SIZE                                0x1
#define _OSCCON4_CPDIV0_LENGTH                              0x1
#define _OSCCON4_CPDIV0_MASK                                0x40
#define _OSCCON4_CPDIV1_POSN                                0x7
#define _OSCCON4_CPDIV1_POSITION                            0x7
#define _OSCCON4_CPDIV1_SIZE                                0x1
#define _OSCCON4_CPDIV1_LENGTH                              0x1
#define _OSCCON4_CPDIV1_MASK                                0x80

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0xF65);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 0F65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IRCF                   :3;
    };
    struct {
        unsigned IRCF0                  :1;
        unsigned IRCF1                  :1;
        unsigned IRCF2                  :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0xF65);
// bitfield macros
#define _OSCCON3_IRCF_POSN                                  0x0
#define _OSCCON3_IRCF_POSITION                              0x0
#define _OSCCON3_IRCF_SIZE                                  0x3
#define _OSCCON3_IRCF_LENGTH                                0x3
#define _OSCCON3_IRCF_MASK                                  0x7
#define _OSCCON3_IRCF0_POSN                                 0x0
#define _OSCCON3_IRCF0_POSITION                             0x0
#define _OSCCON3_IRCF0_SIZE                                 0x1
#define _OSCCON3_IRCF0_LENGTH                               0x1
#define _OSCCON3_IRCF0_MASK                                 0x1
#define _OSCCON3_IRCF1_POSN                                 0x1
#define _OSCCON3_IRCF1_POSITION                             0x1
#define _OSCCON3_IRCF1_SIZE                                 0x1
#define _OSCCON3_IRCF1_LENGTH                               0x1
#define _OSCCON3_IRCF1_MASK                                 0x2
#define _OSCCON3_IRCF2_POSN                                 0x2
#define _OSCCON3_IRCF2_POSITION                             0x2
#define _OSCCON3_IRCF2_SIZE                                 0x1
#define _OSCCON3_IRCF2_LENGTH                               0x1
#define _OSCCON3_IRCF2_MASK                                 0x4

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0xF66);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 0F66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned SOSCGO                 :1;
        unsigned POSCEN                 :1;
        unsigned CF                     :1;
        unsigned                        :1;
        unsigned LOCK                   :1;
        unsigned IOLOCK                 :1;
        unsigned CLKLOCK                :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0xF66);
// bitfield macros
#define _OSCCON2_SOSCGO_POSN                                0x1
#define _OSCCON2_SOSCGO_POSITION                            0x1
#define _OSCCON2_SOSCGO_SIZE                                0x1
#define _OSCCON2_SOSCGO_LENGTH                              0x1
#define _OSCCON2_SOSCGO_MASK                                0x2
#define _OSCCON2_POSCEN_POSN                                0x2
#define _OSCCON2_POSCEN_POSITION                            0x2
#define _OSCCON2_POSCEN_SIZE                                0x1
#define _OSCCON2_POSCEN_LENGTH                              0x1
#define _OSCCON2_POSCEN_MASK                                0x4
#define _OSCCON2_CF_POSN                                    0x3
#define _OSCCON2_CF_POSITION                                0x3
#define _OSCCON2_CF_SIZE                                    0x1
#define _OSCCON2_CF_LENGTH                                  0x1
#define _OSCCON2_CF_MASK                                    0x8
#define _OSCCON2_LOCK_POSN                                  0x5
#define _OSCCON2_LOCK_POSITION                              0x5
#define _OSCCON2_LOCK_SIZE                                  0x1
#define _OSCCON2_LOCK_LENGTH                                0x1
#define _OSCCON2_LOCK_MASK                                  0x20
#define _OSCCON2_IOLOCK_POSN                                0x6
#define _OSCCON2_IOLOCK_POSITION                            0x6
#define _OSCCON2_IOLOCK_SIZE                                0x1
#define _OSCCON2_IOLOCK_LENGTH                              0x1
#define _OSCCON2_IOLOCK_MASK                                0x40
#define _OSCCON2_CLKLOCK_POSN                               0x7
#define _OSCCON2_CLKLOCK_POSITION                           0x7
#define _OSCCON2_CLKLOCK_SIZE                               0x1
#define _OSCCON2_CLKLOCK_LENGTH                             0x1
#define _OSCCON2_CLKLOCK_MASK                               0x80

// Register: BAUDCON1
#define BAUDCON1 BAUDCON1
extern volatile unsigned char           BAUDCON1            __at(0xF67);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 0F67h");
#endif
// aliases
extern volatile unsigned char           BAUDCON             __at(0xF67);
#ifndef _LIB_BUILD
asm("BAUDCON equ 0F67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned IREN                   :1;
        unsigned BRG16                  :1;
        unsigned TXCKP                  :1;
        unsigned RXDTP                  :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
        unsigned DTRXP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned ABDEN1                 :1;
        unsigned WUE1                   :1;
        unsigned                        :1;
        unsigned BRG161                 :1;
        unsigned SCKP1                  :1;
        unsigned DTRXP1                 :1;
        unsigned RCIDL1                 :1;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
        unsigned RXDTP1                 :1;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned RXCKP                  :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0xF67);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_IREN_POSN                                 0x2
#define _BAUDCON1_IREN_POSITION                             0x2
#define _BAUDCON1_IREN_SIZE                                 0x1
#define _BAUDCON1_IREN_LENGTH                               0x1
#define _BAUDCON1_IREN_MASK                                 0x4
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_TXCKP_POSN                                0x4
#define _BAUDCON1_TXCKP_POSITION                            0x4
#define _BAUDCON1_TXCKP_SIZE                                0x1
#define _BAUDCON1_TXCKP_LENGTH                              0x1
#define _BAUDCON1_TXCKP_MASK                                0x10
#define _BAUDCON1_RXDTP_POSN                                0x5
#define _BAUDCON1_RXDTP_POSITION                            0x5
#define _BAUDCON1_RXDTP_SIZE                                0x1
#define _BAUDCON1_RXDTP_LENGTH                              0x1
#define _BAUDCON1_RXDTP_MASK                                0x20
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
#define _BAUDCON1_CKTXP_POSN                                0x4
#define _BAUDCON1_CKTXP_POSITION                            0x4
#define _BAUDCON1_CKTXP_SIZE                                0x1
#define _BAUDCON1_CKTXP_LENGTH                              0x1
#define _BAUDCON1_CKTXP_MASK                                0x10
#define _BAUDCON1_DTRXP_POSN                                0x5
#define _BAUDCON1_DTRXP_POSITION                            0x5
#define _BAUDCON1_DTRXP_SIZE                                0x1
#define _BAUDCON1_DTRXP_LENGTH                              0x1
#define _BAUDCON1_DTRXP_MASK                                0x20
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCMT_POSN                                 0x6
#define _BAUDCON1_RCMT_POSITION                             0x6
#define _BAUDCON1_RCMT_SIZE                                 0x1
#define _BAUDCON1_RCMT_LENGTH                               0x1
#define _BAUDCON1_RCMT_MASK                                 0x40
#define _BAUDCON1_ABDEN1_POSN                               0x0
#define _BAUDCON1_ABDEN1_POSITION                           0x0
#define _BAUDCON1_ABDEN1_SIZE                               0x1
#define _BAUDCON1_ABDEN1_LENGTH                             0x1
#define _BAUDCON1_ABDEN1_MASK                               0x1
#define _BAUDCON1_WUE1_POSN                                 0x1
#define _BAUDCON1_WUE1_POSITION                             0x1
#define _BAUDCON1_WUE1_SIZE                                 0x1
#define _BAUDCON1_WUE1_LENGTH                               0x1
#define _BAUDCON1_WUE1_MASK                                 0x2
#define _BAUDCON1_BRG161_POSN                               0x3
#define _BAUDCON1_BRG161_POSITION                           0x3
#define _BAUDCON1_BRG161_SIZE                               0x1
#define _BAUDCON1_BRG161_LENGTH                             0x1
#define _BAUDCON1_BRG161_MASK                               0x8
#define _BAUDCON1_SCKP1_POSN                                0x4
#define _BAUDCON1_SCKP1_POSITION                            0x4
#define _BAUDCON1_SCKP1_SIZE                                0x1
#define _BAUDCON1_SCKP1_LENGTH                              0x1
#define _BAUDCON1_SCKP1_MASK                                0x10
#define _BAUDCON1_DTRXP1_POSN                               0x5
#define _BAUDCON1_DTRXP1_POSITION                           0x5
#define _BAUDCON1_DTRXP1_SIZE                               0x1
#define _BAUDCON1_DTRXP1_LENGTH                             0x1
#define _BAUDCON1_DTRXP1_MASK                               0x20
#define _BAUDCON1_RCIDL1_POSN                               0x6
#define _BAUDCON1_RCIDL1_POSITION                           0x6
#define _BAUDCON1_RCIDL1_SIZE                               0x1
#define _BAUDCON1_RCIDL1_LENGTH                             0x1
#define _BAUDCON1_RCIDL1_MASK                               0x40
#define _BAUDCON1_ABDOVF1_POSN                              0x7
#define _BAUDCON1_ABDOVF1_POSITION                          0x7
#define _BAUDCON1_ABDOVF1_SIZE                              0x1
#define _BAUDCON1_ABDOVF1_LENGTH                            0x1
#define _BAUDCON1_ABDOVF1_MASK                              0x80
#define _BAUDCON1_TXCKP1_POSN                               0x4
#define _BAUDCON1_TXCKP1_POSITION                           0x4
#define _BAUDCON1_TXCKP1_SIZE                               0x1
#define _BAUDCON1_TXCKP1_LENGTH                             0x1
#define _BAUDCON1_TXCKP1_MASK                               0x10
#define _BAUDCON1_RXDTP1_POSN                               0x5
#define _BAUDCON1_RXDTP1_POSITION                           0x5
#define _BAUDCON1_RXDTP1_SIZE                               0x1
#define _BAUDCON1_RXDTP1_LENGTH                             0x1
#define _BAUDCON1_RXDTP1_MASK                               0x20
#define _BAUDCON1_RCMT1_POSN                                0x6
#define _BAUDCON1_RCMT1_POSITION                            0x6
#define _BAUDCON1_RCMT1_SIZE                                0x1
#define _BAUDCON1_RCMT1_LENGTH                              0x1
#define _BAUDCON1_RCMT1_MASK                                0x40
#define _BAUDCON1_RXCKP_POSN                                0x5
#define _BAUDCON1_RXCKP_POSITION                            0x5
#define _BAUDCON1_RXCKP_SIZE                                0x1
#define _BAUDCON1_RXCKP_LENGTH                              0x1
#define _BAUDCON1_RXCKP_MASK                                0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned IREN                   :1;
        unsigned BRG16                  :1;
        unsigned TXCKP                  :1;
        unsigned RXDTP                  :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
        unsigned DTRXP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned ABDEN1                 :1;
        unsigned WUE1                   :1;
        unsigned                        :1;
        unsigned BRG161                 :1;
        unsigned SCKP1                  :1;
        unsigned DTRXP1                 :1;
        unsigned RCIDL1                 :1;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
        unsigned RXDTP1                 :1;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned RXCKP                  :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0xF67);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_IREN_POSN                                  0x2
#define _BAUDCON_IREN_POSITION                              0x2
#define _BAUDCON_IREN_SIZE                                  0x1
#define _BAUDCON_IREN_LENGTH                                0x1
#define _BAUDCON_IREN_MASK                                  0x4
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_TXCKP_POSN                                 0x4
#define _BAUDCON_TXCKP_POSITION                             0x4
#define _BAUDCON_TXCKP_SIZE                                 0x1
#define _BAUDCON_TXCKP_LENGTH                               0x1
#define _BAUDCON_TXCKP_MASK                                 0x10
#define _BAUDCON_RXDTP_POSN                                 0x5
#define _BAUDCON_RXDTP_POSITION                             0x5
#define _BAUDCON_RXDTP_SIZE                                 0x1
#define _BAUDCON_RXDTP_LENGTH                               0x1
#define _BAUDCON_RXDTP_MASK                                 0x20
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
#define _BAUDCON_CKTXP_POSN                                 0x4
#define _BAUDCON_CKTXP_POSITION                             0x4
#define _BAUDCON_CKTXP_SIZE                                 0x1
#define _BAUDCON_CKTXP_LENGTH                               0x1
#define _BAUDCON_CKTXP_MASK                                 0x10
#define _BAUDCON_DTRXP_POSN                                 0x5
#define _BAUDCON_DTRXP_POSITION                             0x5
#define _BAUDCON_DTRXP_SIZE                                 0x1
#define _BAUDCON_DTRXP_LENGTH                               0x1
#define _BAUDCON_DTRXP_MASK                                 0x20
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCMT_POSN                                  0x6
#define _BAUDCON_RCMT_POSITION                              0x6
#define _BAUDCON_RCMT_SIZE                                  0x1
#define _BAUDCON_RCMT_LENGTH                                0x1
#define _BAUDCON_RCMT_MASK                                  0x40
#define _BAUDCON_ABDEN1_POSN                                0x0
#define _BAUDCON_ABDEN1_POSITION                            0x0
#define _BAUDCON_ABDEN1_SIZE                                0x1
#define _BAUDCON_ABDEN1_LENGTH                              0x1
#define _BAUDCON_ABDEN1_MASK                                0x1
#define _BAUDCON_WUE1_POSN                                  0x1
#define _BAUDCON_WUE1_POSITION                              0x1
#define _BAUDCON_WUE1_SIZE                                  0x1
#define _BAUDCON_WUE1_LENGTH                                0x1
#define _BAUDCON_WUE1_MASK                                  0x2
#define _BAUDCON_BRG161_POSN                                0x3
#define _BAUDCON_BRG161_POSITION                            0x3
#define _BAUDCON_BRG161_SIZE                                0x1
#define _BAUDCON_BRG161_LENGTH                              0x1
#define _BAUDCON_BRG161_MASK                                0x8
#define _BAUDCON_SCKP1_POSN                                 0x4
#define _BAUDCON_SCKP1_POSITION                             0x4
#define _BAUDCON_SCKP1_SIZE                                 0x1
#define _BAUDCON_SCKP1_LENGTH                               0x1
#define _BAUDCON_SCKP1_MASK                                 0x10
#define _BAUDCON_DTRXP1_POSN                                0x5
#define _BAUDCON_DTRXP1_POSITION                            0x5
#define _BAUDCON_DTRXP1_SIZE                                0x1
#define _BAUDCON_DTRXP1_LENGTH                              0x1
#define _BAUDCON_DTRXP1_MASK                                0x20
#define _BAUDCON_RCIDL1_POSN                                0x6
#define _BAUDCON_RCIDL1_POSITION                            0x6
#define _BAUDCON_RCIDL1_SIZE                                0x1
#define _BAUDCON_RCIDL1_LENGTH                              0x1
#define _BAUDCON_RCIDL1_MASK                                0x40
#define _BAUDCON_ABDOVF1_POSN                               0x7
#define _BAUDCON_ABDOVF1_POSITION                           0x7
#define _BAUDCON_ABDOVF1_SIZE                               0x1
#define _BAUDCON_ABDOVF1_LENGTH                             0x1
#define _BAUDCON_ABDOVF1_MASK                               0x80
#define _BAUDCON_TXCKP1_POSN                                0x4
#define _BAUDCON_TXCKP1_POSITION                            0x4
#define _BAUDCON_TXCKP1_SIZE                                0x1
#define _BAUDCON_TXCKP1_LENGTH                              0x1
#define _BAUDCON_TXCKP1_MASK                                0x10
#define _BAUDCON_RXDTP1_POSN                                0x5
#define _BAUDCON_RXDTP1_POSITION                            0x5
#define _BAUDCON_RXDTP1_SIZE                                0x1
#define _BAUDCON_RXDTP1_LENGTH                              0x1
#define _BAUDCON_RXDTP1_MASK                                0x20
#define _BAUDCON_RCMT1_POSN                                 0x6
#define _BAUDCON_RCMT1_POSITION                             0x6
#define _BAUDCON_RCMT1_SIZE                                 0x1
#define _BAUDCON_RCMT1_LENGTH                               0x1
#define _BAUDCON_RCMT1_MASK                                 0x40
#define _BAUDCON_RXCKP_POSN                                 0x5
#define _BAUDCON_RXCKP_POSITION                             0x5
#define _BAUDCON_RXCKP_SIZE                                 0x1
#define _BAUDCON_RXCKP_LENGTH                               0x1
#define _BAUDCON_RXCKP_MASK                                 0x20

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0xF68);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 0F68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0xF68);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0xF69);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0F69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0xF69);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: TXBUF
#define TXBUF TXBUF
extern volatile unsigned char           TXBUF               __at(0xF6A);
#ifndef _LIB_BUILD
asm("TXBUF equ 0F6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXBUF                  :8;
    };
    struct {
        unsigned TXBUF0                 :1;
        unsigned TXBUF1                 :1;
        unsigned TXBUF2                 :1;
        unsigned TXBUF3                 :1;
        unsigned TXBUF4                 :1;
        unsigned TXBUF5                 :1;
        unsigned TXBUF6                 :1;
        unsigned TXBUF7                 :1;
    };
} TXBUFbits_t;
extern volatile TXBUFbits_t TXBUFbits __at(0xF6A);
// bitfield macros
#define _TXBUF_TXBUF_POSN                                   0x0
#define _TXBUF_TXBUF_POSITION                               0x0
#define _TXBUF_TXBUF_SIZE                                   0x8
#define _TXBUF_TXBUF_LENGTH                                 0x8
#define _TXBUF_TXBUF_MASK                                   0xFF
#define _TXBUF_TXBUF0_POSN                                  0x0
#define _TXBUF_TXBUF0_POSITION                              0x0
#define _TXBUF_TXBUF0_SIZE                                  0x1
#define _TXBUF_TXBUF0_LENGTH                                0x1
#define _TXBUF_TXBUF0_MASK                                  0x1
#define _TXBUF_TXBUF1_POSN                                  0x1
#define _TXBUF_TXBUF1_POSITION                              0x1
#define _TXBUF_TXBUF1_SIZE                                  0x1
#define _TXBUF_TXBUF1_LENGTH                                0x1
#define _TXBUF_TXBUF1_MASK                                  0x2
#define _TXBUF_TXBUF2_POSN                                  0x2
#define _TXBUF_TXBUF2_POSITION                              0x2
#define _TXBUF_TXBUF2_SIZE                                  0x1
#define _TXBUF_TXBUF2_LENGTH                                0x1
#define _TXBUF_TXBUF2_MASK                                  0x4
#define _TXBUF_TXBUF3_POSN                                  0x3
#define _TXBUF_TXBUF3_POSITION                              0x3
#define _TXBUF_TXBUF3_SIZE                                  0x1
#define _TXBUF_TXBUF3_LENGTH                                0x1
#define _TXBUF_TXBUF3_MASK                                  0x8
#define _TXBUF_TXBUF4_POSN                                  0x4
#define _TXBUF_TXBUF4_POSITION                              0x4
#define _TXBUF_TXBUF4_SIZE                                  0x1
#define _TXBUF_TXBUF4_LENGTH                                0x1
#define _TXBUF_TXBUF4_MASK                                  0x10
#define _TXBUF_TXBUF5_POSN                                  0x5
#define _TXBUF_TXBUF5_POSITION                              0x5
#define _TXBUF_TXBUF5_SIZE                                  0x1
#define _TXBUF_TXBUF5_LENGTH                                0x1
#define _TXBUF_TXBUF5_MASK                                  0x20
#define _TXBUF_TXBUF6_POSN                                  0x6
#define _TXBUF_TXBUF6_POSITION                              0x6
#define _TXBUF_TXBUF6_SIZE                                  0x1
#define _TXBUF_TXBUF6_LENGTH                                0x1
#define _TXBUF_TXBUF6_MASK                                  0x40
#define _TXBUF_TXBUF7_POSN                                  0x7
#define _TXBUF_TXBUF7_POSITION                              0x7
#define _TXBUF_TXBUF7_SIZE                                  0x1
#define _TXBUF_TXBUF7_LENGTH                                0x1
#define _TXBUF_TXBUF7_MASK                                  0x80

// Register: DMABCH
#define DMABCH DMABCH
extern volatile unsigned char           DMABCH              __at(0xF6B);
#ifndef _LIB_BUILD
asm("DMABCH equ 0F6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMACNTHB               :2;
    };
    struct {
        unsigned BC8                    :1;
        unsigned BC9                    :1;
    };
} DMABCHbits_t;
extern volatile DMABCHbits_t DMABCHbits __at(0xF6B);
// bitfield macros
#define _DMABCH_DMACNTHB_POSN                               0x0
#define _DMABCH_DMACNTHB_POSITION                           0x0
#define _DMABCH_DMACNTHB_SIZE                               0x2
#define _DMABCH_DMACNTHB_LENGTH                             0x2
#define _DMABCH_DMACNTHB_MASK                               0x3
#define _DMABCH_BC8_POSN                                    0x0
#define _DMABCH_BC8_POSITION                                0x0
#define _DMABCH_BC8_SIZE                                    0x1
#define _DMABCH_BC8_LENGTH                                  0x1
#define _DMABCH_BC8_MASK                                    0x1
#define _DMABCH_BC9_POSN                                    0x1
#define _DMABCH_BC9_POSITION                                0x1
#define _DMABCH_BC9_SIZE                                    0x1
#define _DMABCH_BC9_LENGTH                                  0x1
#define _DMABCH_BC9_MASK                                    0x2

// Register: DMABCL
#define DMABCL DMABCL
extern volatile unsigned char           DMABCL              __at(0xF6C);
#ifndef _LIB_BUILD
asm("DMABCL equ 0F6Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMACNTLB               :8;
    };
    struct {
        unsigned BC0                    :1;
        unsigned BC1                    :1;
        unsigned BC2                    :1;
        unsigned BC3                    :1;
        unsigned BC4                    :1;
        unsigned BC5                    :1;
        unsigned BC6                    :1;
        unsigned BC7                    :1;
    };
} DMABCLbits_t;
extern volatile DMABCLbits_t DMABCLbits __at(0xF6C);
// bitfield macros
#define _DMABCL_DMACNTLB_POSN                               0x0
#define _DMABCL_DMACNTLB_POSITION                           0x0
#define _DMABCL_DMACNTLB_SIZE                               0x8
#define _DMABCL_DMACNTLB_LENGTH                             0x8
#define _DMABCL_DMACNTLB_MASK                               0xFF
#define _DMABCL_BC0_POSN                                    0x0
#define _DMABCL_BC0_POSITION                                0x0
#define _DMABCL_BC0_SIZE                                    0x1
#define _DMABCL_BC0_LENGTH                                  0x1
#define _DMABCL_BC0_MASK                                    0x1
#define _DMABCL_BC1_POSN                                    0x1
#define _DMABCL_BC1_POSITION                                0x1
#define _DMABCL_BC1_SIZE                                    0x1
#define _DMABCL_BC1_LENGTH                                  0x1
#define _DMABCL_BC1_MASK                                    0x2
#define _DMABCL_BC2_POSN                                    0x2
#define _DMABCL_BC2_POSITION                                0x2
#define _DMABCL_BC2_SIZE                                    0x1
#define _DMABCL_BC2_LENGTH                                  0x1
#define _DMABCL_BC2_MASK                                    0x4
#define _DMABCL_BC3_POSN                                    0x3
#define _DMABCL_BC3_POSITION                                0x3
#define _DMABCL_BC3_SIZE                                    0x1
#define _DMABCL_BC3_LENGTH                                  0x1
#define _DMABCL_BC3_MASK                                    0x8
#define _DMABCL_BC4_POSN                                    0x4
#define _DMABCL_BC4_POSITION                                0x4
#define _DMABCL_BC4_SIZE                                    0x1
#define _DMABCL_BC4_LENGTH                                  0x1
#define _DMABCL_BC4_MASK                                    0x10
#define _DMABCL_BC5_POSN                                    0x5
#define _DMABCL_BC5_POSITION                                0x5
#define _DMABCL_BC5_SIZE                                    0x1
#define _DMABCL_BC5_LENGTH                                  0x1
#define _DMABCL_BC5_MASK                                    0x20
#define _DMABCL_BC6_POSN                                    0x6
#define _DMABCL_BC6_POSITION                                0x6
#define _DMABCL_BC6_SIZE                                    0x1
#define _DMABCL_BC6_LENGTH                                  0x1
#define _DMABCL_BC6_MASK                                    0x40
#define _DMABCL_BC7_POSN                                    0x7
#define _DMABCL_BC7_POSITION                                0x7
#define _DMABCL_BC7_SIZE                                    0x1
#define _DMABCL_BC7_LENGTH                                  0x1
#define _DMABCL_BC7_MASK                                    0x80

// Register: RXADDRH
#define RXADDRH RXADDRH
extern volatile unsigned char           RXADDRH             __at(0xF6D);
#ifndef _LIB_BUILD
asm("RXADDRH equ 0F6Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMARCVPTRHB            :4;
    };
    struct {
        unsigned RXADDR8                :1;
        unsigned RXADDR9                :1;
        unsigned RXADDR10               :1;
        unsigned RXADDR11               :1;
    };
} RXADDRHbits_t;
extern volatile RXADDRHbits_t RXADDRHbits __at(0xF6D);
// bitfield macros
#define _RXADDRH_DMARCVPTRHB_POSN                           0x0
#define _RXADDRH_DMARCVPTRHB_POSITION                       0x0
#define _RXADDRH_DMARCVPTRHB_SIZE                           0x4
#define _RXADDRH_DMARCVPTRHB_LENGTH                         0x4
#define _RXADDRH_DMARCVPTRHB_MASK                           0xF
#define _RXADDRH_RXADDR8_POSN                               0x0
#define _RXADDRH_RXADDR8_POSITION                           0x0
#define _RXADDRH_RXADDR8_SIZE                               0x1
#define _RXADDRH_RXADDR8_LENGTH                             0x1
#define _RXADDRH_RXADDR8_MASK                               0x1
#define _RXADDRH_RXADDR9_POSN                               0x1
#define _RXADDRH_RXADDR9_POSITION                           0x1
#define _RXADDRH_RXADDR9_SIZE                               0x1
#define _RXADDRH_RXADDR9_LENGTH                             0x1
#define _RXADDRH_RXADDR9_MASK                               0x2
#define _RXADDRH_RXADDR10_POSN                              0x2
#define _RXADDRH_RXADDR10_POSITION                          0x2
#define _RXADDRH_RXADDR10_SIZE                              0x1
#define _RXADDRH_RXADDR10_LENGTH                            0x1
#define _RXADDRH_RXADDR10_MASK                              0x4
#define _RXADDRH_RXADDR11_POSN                              0x3
#define _RXADDRH_RXADDR11_POSITION                          0x3
#define _RXADDRH_RXADDR11_SIZE                              0x1
#define _RXADDRH_RXADDR11_LENGTH                            0x1
#define _RXADDRH_RXADDR11_MASK                              0x8

// Register: RXADDRL
#define RXADDRL RXADDRL
extern volatile unsigned char           RXADDRL             __at(0xF6E);
#ifndef _LIB_BUILD
asm("RXADDRL equ 0F6Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMARCVPTRLB            :8;
    };
    struct {
        unsigned RXADDR0                :1;
        unsigned RXADDR1                :1;
        unsigned RXADDR2                :1;
        unsigned RXADDR3                :1;
        unsigned RXADDR4                :1;
        unsigned RXADDR5                :1;
        unsigned RXADDR6                :1;
        unsigned RXADDR7                :1;
    };
} RXADDRLbits_t;
extern volatile RXADDRLbits_t RXADDRLbits __at(0xF6E);
// bitfield macros
#define _RXADDRL_DMARCVPTRLB_POSN                           0x0
#define _RXADDRL_DMARCVPTRLB_POSITION                       0x0
#define _RXADDRL_DMARCVPTRLB_SIZE                           0x8
#define _RXADDRL_DMARCVPTRLB_LENGTH                         0x8
#define _RXADDRL_DMARCVPTRLB_MASK                           0xFF
#define _RXADDRL_RXADDR0_POSN                               0x0
#define _RXADDRL_RXADDR0_POSITION                           0x0
#define _RXADDRL_RXADDR0_SIZE                               0x1
#define _RXADDRL_RXADDR0_LENGTH                             0x1
#define _RXADDRL_RXADDR0_MASK                               0x1
#define _RXADDRL_RXADDR1_POSN                               0x1
#define _RXADDRL_RXADDR1_POSITION                           0x1
#define _RXADDRL_RXADDR1_SIZE                               0x1
#define _RXADDRL_RXADDR1_LENGTH                             0x1
#define _RXADDRL_RXADDR1_MASK                               0x2
#define _RXADDRL_RXADDR2_POSN                               0x2
#define _RXADDRL_RXADDR2_POSITION                           0x2
#define _RXADDRL_RXADDR2_SIZE                               0x1
#define _RXADDRL_RXADDR2_LENGTH                             0x1
#define _RXADDRL_RXADDR2_MASK                               0x4
#define _RXADDRL_RXADDR3_POSN                               0x3
#define _RXADDRL_RXADDR3_POSITION                           0x3
#define _RXADDRL_RXADDR3_SIZE                               0x1
#define _RXADDRL_RXADDR3_LENGTH                             0x1
#define _RXADDRL_RXADDR3_MASK                               0x8
#define _RXADDRL_RXADDR4_POSN                               0x4
#define _RXADDRL_RXADDR4_POSITION                           0x4
#define _RXADDRL_RXADDR4_SIZE                               0x1
#define _RXADDRL_RXADDR4_LENGTH                             0x1
#define _RXADDRL_RXADDR4_MASK                               0x10
#define _RXADDRL_RXADDR5_POSN                               0x5
#define _RXADDRL_RXADDR5_POSITION                           0x5
#define _RXADDRL_RXADDR5_SIZE                               0x1
#define _RXADDRL_RXADDR5_LENGTH                             0x1
#define _RXADDRL_RXADDR5_MASK                               0x20
#define _RXADDRL_RXADDR6_POSN                               0x6
#define _RXADDRL_RXADDR6_POSITION                           0x6
#define _RXADDRL_RXADDR6_SIZE                               0x1
#define _RXADDRL_RXADDR6_LENGTH                             0x1
#define _RXADDRL_RXADDR6_MASK                               0x40
#define _RXADDRL_RXADDR7_POSN                               0x7
#define _RXADDRL_RXADDR7_POSITION                           0x7
#define _RXADDRL_RXADDR7_SIZE                               0x1
#define _RXADDRL_RXADDR7_LENGTH                             0x1
#define _RXADDRL_RXADDR7_MASK                               0x80

// Register: TXADDRH
#define TXADDRH TXADDRH
extern volatile unsigned char           TXADDRH             __at(0xF6F);
#ifndef _LIB_BUILD
asm("TXADDRH equ 0F6Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMATXPTRHB             :4;
    };
    struct {
        unsigned TXADDR8                :1;
        unsigned TXADDR9                :1;
        unsigned TXADDR10               :1;
        unsigned TXADDR11               :1;
    };
} TXADDRHbits_t;
extern volatile TXADDRHbits_t TXADDRHbits __at(0xF6F);
// bitfield macros
#define _TXADDRH_DMATXPTRHB_POSN                            0x0
#define _TXADDRH_DMATXPTRHB_POSITION                        0x0
#define _TXADDRH_DMATXPTRHB_SIZE                            0x4
#define _TXADDRH_DMATXPTRHB_LENGTH                          0x4
#define _TXADDRH_DMATXPTRHB_MASK                            0xF
#define _TXADDRH_TXADDR8_POSN                               0x0
#define _TXADDRH_TXADDR8_POSITION                           0x0
#define _TXADDRH_TXADDR8_SIZE                               0x1
#define _TXADDRH_TXADDR8_LENGTH                             0x1
#define _TXADDRH_TXADDR8_MASK                               0x1
#define _TXADDRH_TXADDR9_POSN                               0x1
#define _TXADDRH_TXADDR9_POSITION                           0x1
#define _TXADDRH_TXADDR9_SIZE                               0x1
#define _TXADDRH_TXADDR9_LENGTH                             0x1
#define _TXADDRH_TXADDR9_MASK                               0x2
#define _TXADDRH_TXADDR10_POSN                              0x2
#define _TXADDRH_TXADDR10_POSITION                          0x2
#define _TXADDRH_TXADDR10_SIZE                              0x1
#define _TXADDRH_TXADDR10_LENGTH                            0x1
#define _TXADDRH_TXADDR10_MASK                              0x4
#define _TXADDRH_TXADDR11_POSN                              0x3
#define _TXADDRH_TXADDR11_POSITION                          0x3
#define _TXADDRH_TXADDR11_SIZE                              0x1
#define _TXADDRH_TXADDR11_LENGTH                            0x1
#define _TXADDRH_TXADDR11_MASK                              0x8

// Register: TXADDRL
#define TXADDRL TXADDRL
extern volatile unsigned char           TXADDRL             __at(0xF70);
#ifndef _LIB_BUILD
asm("TXADDRL equ 0F70h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMATXPTRLB             :8;
    };
    struct {
        unsigned TXADDR0                :1;
        unsigned TXADDR1                :1;
        unsigned TXADDR2                :1;
        unsigned TXADDR3                :1;
        unsigned TXADDR4                :1;
        unsigned TXADDR5                :1;
        unsigned TXADDR6                :1;
        unsigned TXADDR7                :1;
    };
} TXADDRLbits_t;
extern volatile TXADDRLbits_t TXADDRLbits __at(0xF70);
// bitfield macros
#define _TXADDRL_DMATXPTRLB_POSN                            0x0
#define _TXADDRL_DMATXPTRLB_POSITION                        0x0
#define _TXADDRL_DMATXPTRLB_SIZE                            0x8
#define _TXADDRL_DMATXPTRLB_LENGTH                          0x8
#define _TXADDRL_DMATXPTRLB_MASK                            0xFF
#define _TXADDRL_TXADDR0_POSN                               0x0
#define _TXADDRL_TXADDR0_POSITION                           0x0
#define _TXADDRL_TXADDR0_SIZE                               0x1
#define _TXADDRL_TXADDR0_LENGTH                             0x1
#define _TXADDRL_TXADDR0_MASK                               0x1
#define _TXADDRL_TXADDR1_POSN                               0x1
#define _TXADDRL_TXADDR1_POSITION                           0x1
#define _TXADDRL_TXADDR1_SIZE                               0x1
#define _TXADDRL_TXADDR1_LENGTH                             0x1
#define _TXADDRL_TXADDR1_MASK                               0x2
#define _TXADDRL_TXADDR2_POSN                               0x2
#define _TXADDRL_TXADDR2_POSITION                           0x2
#define _TXADDRL_TXADDR2_SIZE                               0x1
#define _TXADDRL_TXADDR2_LENGTH                             0x1
#define _TXADDRL_TXADDR2_MASK                               0x4
#define _TXADDRL_TXADDR3_POSN                               0x3
#define _TXADDRL_TXADDR3_POSITION                           0x3
#define _TXADDRL_TXADDR3_SIZE                               0x1
#define _TXADDRL_TXADDR3_LENGTH                             0x1
#define _TXADDRL_TXADDR3_MASK                               0x8
#define _TXADDRL_TXADDR4_POSN                               0x4
#define _TXADDRL_TXADDR4_POSITION                           0x4
#define _TXADDRL_TXADDR4_SIZE                               0x1
#define _TXADDRL_TXADDR4_LENGTH                             0x1
#define _TXADDRL_TXADDR4_MASK                               0x10
#define _TXADDRL_TXADDR5_POSN                               0x5
#define _TXADDRL_TXADDR5_POSITION                           0x5
#define _TXADDRL_TXADDR5_SIZE                               0x1
#define _TXADDRL_TXADDR5_LENGTH                             0x1
#define _TXADDRL_TXADDR5_MASK                               0x20
#define _TXADDRL_TXADDR6_POSN                               0x6
#define _TXADDRL_TXADDR6_POSITION                           0x6
#define _TXADDRL_TXADDR6_SIZE                               0x1
#define _TXADDRL_TXADDR6_LENGTH                             0x1
#define _TXADDRL_TXADDR6_MASK                               0x40
#define _TXADDRL_TXADDR7_POSN                               0x7
#define _TXADDRL_TXADDR7_POSITION                           0x7
#define _TXADDRL_TXADDR7_SIZE                               0x1
#define _TXADDRL_TXADDR7_LENGTH                             0x1
#define _TXADDRL_TXADDR7_MASK                               0x80

// Register: PORTVP
#define PORTVP PORTVP
extern volatile unsigned char           PORTVP              __at(0xF71);
#ifndef _LIB_BUILD
asm("PORTVP equ 0F71h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RVP0                   :1;
        unsigned RVP1                   :1;
        unsigned RVP2                   :1;
        unsigned RVP3                   :1;
        unsigned RVP4                   :1;
        unsigned RVP5                   :1;
        unsigned RVP6                   :1;
        unsigned RVP7                   :1;
    };
} PORTVPbits_t;
extern volatile PORTVPbits_t PORTVPbits __at(0xF71);
// bitfield macros
#define _PORTVP_RVP0_POSN                                   0x0
#define _PORTVP_RVP0_POSITION                               0x0
#define _PORTVP_RVP0_SIZE                                   0x1
#define _PORTVP_RVP0_LENGTH                                 0x1
#define _PORTVP_RVP0_MASK                                   0x1
#define _PORTVP_RVP1_POSN                                   0x1
#define _PORTVP_RVP1_POSITION                               0x1
#define _PORTVP_RVP1_SIZE                                   0x1
#define _PORTVP_RVP1_LENGTH                                 0x1
#define _PORTVP_RVP1_MASK                                   0x2
#define _PORTVP_RVP2_POSN                                   0x2
#define _PORTVP_RVP2_POSITION                               0x2
#define _PORTVP_RVP2_SIZE                                   0x1
#define _PORTVP_RVP2_LENGTH                                 0x1
#define _PORTVP_RVP2_MASK                                   0x4
#define _PORTVP_RVP3_POSN                                   0x3
#define _PORTVP_RVP3_POSITION                               0x3
#define _PORTVP_RVP3_SIZE                                   0x1
#define _PORTVP_RVP3_LENGTH                                 0x1
#define _PORTVP_RVP3_MASK                                   0x8
#define _PORTVP_RVP4_POSN                                   0x4
#define _PORTVP_RVP4_POSITION                               0x4
#define _PORTVP_RVP4_SIZE                                   0x1
#define _PORTVP_RVP4_LENGTH                                 0x1
#define _PORTVP_RVP4_MASK                                   0x10
#define _PORTVP_RVP5_POSN                                   0x5
#define _PORTVP_RVP5_POSITION                               0x5
#define _PORTVP_RVP5_SIZE                                   0x1
#define _PORTVP_RVP5_LENGTH                                 0x1
#define _PORTVP_RVP5_MASK                                   0x20
#define _PORTVP_RVP6_POSN                                   0x6
#define _PORTVP_RVP6_POSITION                               0x6
#define _PORTVP_RVP6_SIZE                                   0x1
#define _PORTVP_RVP6_LENGTH                                 0x1
#define _PORTVP_RVP6_MASK                                   0x40
#define _PORTVP_RVP7_POSN                                   0x7
#define _PORTVP_RVP7_POSITION                               0x7
#define _PORTVP_RVP7_SIZE                                   0x1
#define _PORTVP_RVP7_LENGTH                                 0x1
#define _PORTVP_RVP7_MASK                                   0x80

// Register: LATVP
#define LATVP LATVP
extern volatile unsigned char           LATVP               __at(0xF72);
#ifndef _LIB_BUILD
asm("LATVP equ 0F72h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATVP0                 :1;
        unsigned LATVP1                 :1;
        unsigned LATVP2                 :1;
        unsigned LATVP3                 :1;
        unsigned LATVP4                 :1;
        unsigned LATVP5                 :1;
        unsigned LATVP6                 :1;
        unsigned LATVP7                 :1;
    };
} LATVPbits_t;
extern volatile LATVPbits_t LATVPbits __at(0xF72);
// bitfield macros
#define _LATVP_LATVP0_POSN                                  0x0
#define _LATVP_LATVP0_POSITION                              0x0
#define _LATVP_LATVP0_SIZE                                  0x1
#define _LATVP_LATVP0_LENGTH                                0x1
#define _LATVP_LATVP0_MASK                                  0x1
#define _LATVP_LATVP1_POSN                                  0x1
#define _LATVP_LATVP1_POSITION                              0x1
#define _LATVP_LATVP1_SIZE                                  0x1
#define _LATVP_LATVP1_LENGTH                                0x1
#define _LATVP_LATVP1_MASK                                  0x2
#define _LATVP_LATVP2_POSN                                  0x2
#define _LATVP_LATVP2_POSITION                              0x2
#define _LATVP_LATVP2_SIZE                                  0x1
#define _LATVP_LATVP2_LENGTH                                0x1
#define _LATVP_LATVP2_MASK                                  0x4
#define _LATVP_LATVP3_POSN                                  0x3
#define _LATVP_LATVP3_POSITION                              0x3
#define _LATVP_LATVP3_SIZE                                  0x1
#define _LATVP_LATVP3_LENGTH                                0x1
#define _LATVP_LATVP3_MASK                                  0x8
#define _LATVP_LATVP4_POSN                                  0x4
#define _LATVP_LATVP4_POSITION                              0x4
#define _LATVP_LATVP4_SIZE                                  0x1
#define _LATVP_LATVP4_LENGTH                                0x1
#define _LATVP_LATVP4_MASK                                  0x10
#define _LATVP_LATVP5_POSN                                  0x5
#define _LATVP_LATVP5_POSITION                              0x5
#define _LATVP_LATVP5_SIZE                                  0x1
#define _LATVP_LATVP5_LENGTH                                0x1
#define _LATVP_LATVP5_MASK                                  0x20
#define _LATVP_LATVP6_POSN                                  0x6
#define _LATVP_LATVP6_POSITION                              0x6
#define _LATVP_LATVP6_SIZE                                  0x1
#define _LATVP_LATVP6_LENGTH                                0x1
#define _LATVP_LATVP6_MASK                                  0x40
#define _LATVP_LATVP7_POSN                                  0x7
#define _LATVP_LATVP7_POSITION                              0x7
#define _LATVP_LATVP7_SIZE                                  0x1
#define _LATVP_LATVP7_LENGTH                                0x1
#define _LATVP_LATVP7_MASK                                  0x80

// Register: TRISVP
#define TRISVP TRISVP
extern volatile unsigned char           TRISVP              __at(0xF73);
#ifndef _LIB_BUILD
asm("TRISVP equ 0F73h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISVP0                :1;
        unsigned TRISVP1                :1;
        unsigned TRISVP2                :1;
        unsigned TRISVP3                :1;
        unsigned TRISVP4                :1;
        unsigned TRISVP5                :1;
        unsigned TRISVP6                :1;
        unsigned TRISVP7                :1;
    };
} TRISVPbits_t;
extern volatile TRISVPbits_t TRISVPbits __at(0xF73);
// bitfield macros
#define _TRISVP_TRISVP0_POSN                                0x0
#define _TRISVP_TRISVP0_POSITION                            0x0
#define _TRISVP_TRISVP0_SIZE                                0x1
#define _TRISVP_TRISVP0_LENGTH                              0x1
#define _TRISVP_TRISVP0_MASK                                0x1
#define _TRISVP_TRISVP1_POSN                                0x1
#define _TRISVP_TRISVP1_POSITION                            0x1
#define _TRISVP_TRISVP1_SIZE                                0x1
#define _TRISVP_TRISVP1_LENGTH                              0x1
#define _TRISVP_TRISVP1_MASK                                0x2
#define _TRISVP_TRISVP2_POSN                                0x2
#define _TRISVP_TRISVP2_POSITION                            0x2
#define _TRISVP_TRISVP2_SIZE                                0x1
#define _TRISVP_TRISVP2_LENGTH                              0x1
#define _TRISVP_TRISVP2_MASK                                0x4
#define _TRISVP_TRISVP3_POSN                                0x3
#define _TRISVP_TRISVP3_POSITION                            0x3
#define _TRISVP_TRISVP3_SIZE                                0x1
#define _TRISVP_TRISVP3_LENGTH                              0x1
#define _TRISVP_TRISVP3_MASK                                0x8
#define _TRISVP_TRISVP4_POSN                                0x4
#define _TRISVP_TRISVP4_POSITION                            0x4
#define _TRISVP_TRISVP4_SIZE                                0x1
#define _TRISVP_TRISVP4_LENGTH                              0x1
#define _TRISVP_TRISVP4_MASK                                0x10
#define _TRISVP_TRISVP5_POSN                                0x5
#define _TRISVP_TRISVP5_POSITION                            0x5
#define _TRISVP_TRISVP5_SIZE                                0x1
#define _TRISVP_TRISVP5_LENGTH                              0x1
#define _TRISVP_TRISVP5_MASK                                0x20
#define _TRISVP_TRISVP6_POSN                                0x6
#define _TRISVP_TRISVP6_POSITION                            0x6
#define _TRISVP_TRISVP6_SIZE                                0x1
#define _TRISVP_TRISVP6_LENGTH                              0x1
#define _TRISVP_TRISVP6_MASK                                0x40
#define _TRISVP_TRISVP7_POSN                                0x7
#define _TRISVP_TRISVP7_POSITION                            0x7
#define _TRISVP_TRISVP7_SIZE                                0x1
#define _TRISVP_TRISVP7_LENGTH                              0x1
#define _TRISVP_TRISVP7_MASK                                0x80

// Register: UADDR
#define UADDR UADDR
extern volatile unsigned char           UADDR               __at(0xF74);
#ifndef _LIB_BUILD
asm("UADDR equ 0F74h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADDR                   :7;
    };
    struct {
        unsigned ADDR0                  :1;
        unsigned ADDR1                  :1;
        unsigned ADDR2                  :1;
        unsigned ADDR3                  :1;
        unsigned ADDR4                  :1;
        unsigned ADDR5                  :1;
        unsigned ADDR6                  :1;
    };
} UADDRbits_t;
extern volatile UADDRbits_t UADDRbits __at(0xF74);
// bitfield macros
#define _UADDR_ADDR_POSN                                    0x0
#define _UADDR_ADDR_POSITION                                0x0
#define _UADDR_ADDR_SIZE                                    0x7
#define _UADDR_ADDR_LENGTH                                  0x7
#define _UADDR_ADDR_MASK                                    0x7F
#define _UADDR_ADDR0_POSN                                   0x0
#define _UADDR_ADDR0_POSITION                               0x0
#define _UADDR_ADDR0_SIZE                                   0x1
#define _UADDR_ADDR0_LENGTH                                 0x1
#define _UADDR_ADDR0_MASK                                   0x1
#define _UADDR_ADDR1_POSN                                   0x1
#define _UADDR_ADDR1_POSITION                               0x1
#define _UADDR_ADDR1_SIZE                                   0x1
#define _UADDR_ADDR1_LENGTH                                 0x1
#define _UADDR_ADDR1_MASK                                   0x2
#define _UADDR_ADDR2_POSN                                   0x2
#define _UADDR_ADDR2_POSITION                               0x2
#define _UADDR_ADDR2_SIZE                                   0x1
#define _UADDR_ADDR2_LENGTH                                 0x1
#define _UADDR_ADDR2_MASK                                   0x4
#define _UADDR_ADDR3_POSN                                   0x3
#define _UADDR_ADDR3_POSITION                               0x3
#define _UADDR_ADDR3_SIZE                                   0x1
#define _UADDR_ADDR3_LENGTH                                 0x1
#define _UADDR_ADDR3_MASK                                   0x8
#define _UADDR_ADDR4_POSN                                   0x4
#define _UADDR_ADDR4_POSITION                               0x4
#define _UADDR_ADDR4_SIZE                                   0x1
#define _UADDR_ADDR4_LENGTH                                 0x1
#define _UADDR_ADDR4_MASK                                   0x10
#define _UADDR_ADDR5_POSN                                   0x5
#define _UADDR_ADDR5_POSITION                               0x5
#define _UADDR_ADDR5_SIZE                                   0x1
#define _UADDR_ADDR5_LENGTH                                 0x1
#define _UADDR_ADDR5_MASK                                   0x20
#define _UADDR_ADDR6_POSN                                   0x6
#define _UADDR_ADDR6_POSITION                               0x6
#define _UADDR_ADDR6_SIZE                                   0x1
#define _UADDR_ADDR6_LENGTH                                 0x1
#define _UADDR_ADDR6_MASK                                   0x40

// Register: UCON
#define UCON UCON
extern volatile unsigned char           UCON                __at(0xF75);
#ifndef _LIB_BUILD
asm("UCON equ 0F75h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned SUSPND                 :1;
        unsigned RESUME                 :1;
        unsigned USBEN                  :1;
        unsigned PKTDIS                 :1;
        unsigned SE0                    :1;
        unsigned PPBRST                 :1;
    };
} UCONbits_t;
extern volatile UCONbits_t UCONbits __at(0xF75);
// bitfield macros
#define _UCON_SUSPND_POSN                                   0x1
#define _UCON_SUSPND_POSITION                               0x1
#define _UCON_SUSPND_SIZE                                   0x1
#define _UCON_SUSPND_LENGTH                                 0x1
#define _UCON_SUSPND_MASK                                   0x2
#define _UCON_RESUME_POSN                                   0x2
#define _UCON_RESUME_POSITION                               0x2
#define _UCON_RESUME_SIZE                                   0x1
#define _UCON_RESUME_LENGTH                                 0x1
#define _UCON_RESUME_MASK                                   0x4
#define _UCON_USBEN_POSN                                    0x3
#define _UCON_USBEN_POSITION                                0x3
#define _UCON_USBEN_SIZE                                    0x1
#define _UCON_USBEN_LENGTH                                  0x1
#define _UCON_USBEN_MASK                                    0x8
#define _UCON_PKTDIS_POSN                                   0x4
#define _UCON_PKTDIS_POSITION                               0x4
#define _UCON_PKTDIS_SIZE                                   0x1
#define _UCON_PKTDIS_LENGTH                                 0x1
#define _UCON_PKTDIS_MASK                                   0x10
#define _UCON_SE0_POSN                                      0x5
#define _UCON_SE0_POSITION                                  0x5
#define _UCON_SE0_SIZE                                      0x1
#define _UCON_SE0_LENGTH                                    0x1
#define _UCON_SE0_MASK                                      0x20
#define _UCON_PPBRST_POSN                                   0x6
#define _UCON_PPBRST_POSITION                               0x6
#define _UCON_PPBRST_SIZE                                   0x1
#define _UCON_PPBRST_LENGTH                                 0x1
#define _UCON_PPBRST_MASK                                   0x40

// Register: USTAT
#define USTAT USTAT
extern volatile unsigned char           USTAT               __at(0xF76);
#ifndef _LIB_BUILD
asm("USTAT equ 0F76h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned PPBI                   :1;
        unsigned DIR                    :1;
        unsigned ENDP                   :4;
    };
    struct {
        unsigned                        :3;
        unsigned ENDP0                  :1;
        unsigned ENDP1                  :1;
        unsigned ENDP2                  :1;
        unsigned ENDP3                  :1;
    };
} USTATbits_t;
extern volatile USTATbits_t USTATbits __at(0xF76);
// bitfield macros
#define _USTAT_PPBI_POSN                                    0x1
#define _USTAT_PPBI_POSITION                                0x1
#define _USTAT_PPBI_SIZE                                    0x1
#define _USTAT_PPBI_LENGTH                                  0x1
#define _USTAT_PPBI_MASK                                    0x2
#define _USTAT_DIR_POSN                                     0x2
#define _USTAT_DIR_POSITION                                 0x2
#define _USTAT_DIR_SIZE                                     0x1
#define _USTAT_DIR_LENGTH                                   0x1
#define _USTAT_DIR_MASK                                     0x4
#define _USTAT_ENDP_POSN                                    0x3
#define _USTAT_ENDP_POSITION                                0x3
#define _USTAT_ENDP_SIZE                                    0x4
#define _USTAT_ENDP_LENGTH                                  0x4
#define _USTAT_ENDP_MASK                                    0x78
#define _USTAT_ENDP0_POSN                                   0x3
#define _USTAT_ENDP0_POSITION                               0x3
#define _USTAT_ENDP0_SIZE                                   0x1
#define _USTAT_ENDP0_LENGTH                                 0x1
#define _USTAT_ENDP0_MASK                                   0x8
#define _USTAT_ENDP1_POSN                                   0x4
#define _USTAT_ENDP1_POSITION                               0x4
#define _USTAT_ENDP1_SIZE                                   0x1
#define _USTAT_ENDP1_LENGTH                                 0x1
#define _USTAT_ENDP1_MASK                                   0x10
#define _USTAT_ENDP2_POSN                                   0x5
#define _USTAT_ENDP2_POSITION                               0x5
#define _USTAT_ENDP2_SIZE                                   0x1
#define _USTAT_ENDP2_LENGTH                                 0x1
#define _USTAT_ENDP2_MASK                                   0x20
#define _USTAT_ENDP3_POSN                                   0x6
#define _USTAT_ENDP3_POSITION                               0x6
#define _USTAT_ENDP3_SIZE                                   0x1
#define _USTAT_ENDP3_LENGTH                                 0x1
#define _USTAT_ENDP3_MASK                                   0x40

// Register: UEIR
#define UEIR UEIR
extern volatile unsigned char           UEIR                __at(0xF77);
#ifndef _LIB_BUILD
asm("UEIR equ 0F77h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIDEF                  :1;
        unsigned CRC5EF                 :1;
        unsigned CRC16EF                :1;
        unsigned DFN8EF                 :1;
        unsigned BTOEF                  :1;
        unsigned                        :2;
        unsigned BTSEF                  :1;
    };
} UEIRbits_t;
extern volatile UEIRbits_t UEIRbits __at(0xF77);
// bitfield macros
#define _UEIR_PIDEF_POSN                                    0x0
#define _UEIR_PIDEF_POSITION                                0x0
#define _UEIR_PIDEF_SIZE                                    0x1
#define _UEIR_PIDEF_LENGTH                                  0x1
#define _UEIR_PIDEF_MASK                                    0x1
#define _UEIR_CRC5EF_POSN                                   0x1
#define _UEIR_CRC5EF_POSITION                               0x1
#define _UEIR_CRC5EF_SIZE                                   0x1
#define _UEIR_CRC5EF_LENGTH                                 0x1
#define _UEIR_CRC5EF_MASK                                   0x2
#define _UEIR_CRC16EF_POSN                                  0x2
#define _UEIR_CRC16EF_POSITION                              0x2
#define _UEIR_CRC16EF_SIZE                                  0x1
#define _UEIR_CRC16EF_LENGTH                                0x1
#define _UEIR_CRC16EF_MASK                                  0x4
#define _UEIR_DFN8EF_POSN                                   0x3
#define _UEIR_DFN8EF_POSITION                               0x3
#define _UEIR_DFN8EF_SIZE                                   0x1
#define _UEIR_DFN8EF_LENGTH                                 0x1
#define _UEIR_DFN8EF_MASK                                   0x8
#define _UEIR_BTOEF_POSN                                    0x4
#define _UEIR_BTOEF_POSITION                                0x4
#define _UEIR_BTOEF_SIZE                                    0x1
#define _UEIR_BTOEF_LENGTH                                  0x1
#define _UEIR_BTOEF_MASK                                    0x10
#define _UEIR_BTSEF_POSN                                    0x7
#define _UEIR_BTSEF_POSITION                                0x7
#define _UEIR_BTSEF_SIZE                                    0x1
#define _UEIR_BTSEF_LENGTH                                  0x1
#define _UEIR_BTSEF_MASK                                    0x80

// Register: UIR
#define UIR UIR
extern volatile unsigned char           UIR                 __at(0xF78);
#ifndef _LIB_BUILD
asm("UIR equ 0F78h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned URSTIF                 :1;
        unsigned UERRIF                 :1;
        unsigned ACTVIF                 :1;
        unsigned TRNIF                  :1;
        unsigned IDLEIF                 :1;
        unsigned STALLIF                :1;
        unsigned SOFIF                  :1;
    };
} UIRbits_t;
extern volatile UIRbits_t UIRbits __at(0xF78);
// bitfield macros
#define _UIR_URSTIF_POSN                                    0x0
#define _UIR_URSTIF_POSITION                                0x0
#define _UIR_URSTIF_SIZE                                    0x1
#define _UIR_URSTIF_LENGTH                                  0x1
#define _UIR_URSTIF_MASK                                    0x1
#define _UIR_UERRIF_POSN                                    0x1
#define _UIR_UERRIF_POSITION                                0x1
#define _UIR_UERRIF_SIZE                                    0x1
#define _UIR_UERRIF_LENGTH                                  0x1
#define _UIR_UERRIF_MASK                                    0x2
#define _UIR_ACTVIF_POSN                                    0x2
#define _UIR_ACTVIF_POSITION                                0x2
#define _UIR_ACTVIF_SIZE                                    0x1
#define _UIR_ACTVIF_LENGTH                                  0x1
#define _UIR_ACTVIF_MASK                                    0x4
#define _UIR_TRNIF_POSN                                     0x3
#define _UIR_TRNIF_POSITION                                 0x3
#define _UIR_TRNIF_SIZE                                     0x1
#define _UIR_TRNIF_LENGTH                                   0x1
#define _UIR_TRNIF_MASK                                     0x8
#define _UIR_IDLEIF_POSN                                    0x4
#define _UIR_IDLEIF_POSITION                                0x4
#define _UIR_IDLEIF_SIZE                                    0x1
#define _UIR_IDLEIF_LENGTH                                  0x1
#define _UIR_IDLEIF_MASK                                    0x10
#define _UIR_STALLIF_POSN                                   0x5
#define _UIR_STALLIF_POSITION                               0x5
#define _UIR_STALLIF_SIZE                                   0x1
#define _UIR_STALLIF_LENGTH                                 0x1
#define _UIR_STALLIF_MASK                                   0x20
#define _UIR_SOFIF_POSN                                     0x6
#define _UIR_SOFIF_POSITION                                 0x6
#define _UIR_SOFIF_SIZE                                     0x1
#define _UIR_SOFIF_LENGTH                                   0x1
#define _UIR_SOFIF_MASK                                     0x40

// Register: UFRM
#define UFRM UFRM
extern volatile unsigned short          UFRM                __at(0xF79);
#ifndef _LIB_BUILD
asm("UFRM equ 0F79h");
#endif

// Register: UFRMH
#define UFRMH UFRMH
extern volatile unsigned char           UFRMH               __at(0xF79);
#ifndef _LIB_BUILD
asm("UFRMH equ 0F79h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FRM                    :3;
    };
    struct {
        unsigned FRM8                   :1;
        unsigned FRM9                   :1;
        unsigned FRM10                  :1;
    };
} UFRMHbits_t;
extern volatile UFRMHbits_t UFRMHbits __at(0xF79);
// bitfield macros
#define _UFRMH_FRM_POSN                                     0x0
#define _UFRMH_FRM_POSITION                                 0x0
#define _UFRMH_FRM_SIZE                                     0x3
#define _UFRMH_FRM_LENGTH                                   0x3
#define _UFRMH_FRM_MASK                                     0x7
#define _UFRMH_FRM8_POSN                                    0x0
#define _UFRMH_FRM8_POSITION                                0x0
#define _UFRMH_FRM8_SIZE                                    0x1
#define _UFRMH_FRM8_LENGTH                                  0x1
#define _UFRMH_FRM8_MASK                                    0x1
#define _UFRMH_FRM9_POSN                                    0x1
#define _UFRMH_FRM9_POSITION                                0x1
#define _UFRMH_FRM9_SIZE                                    0x1
#define _UFRMH_FRM9_LENGTH                                  0x1
#define _UFRMH_FRM9_MASK                                    0x2
#define _UFRMH_FRM10_POSN                                   0x2
#define _UFRMH_FRM10_POSITION                               0x2
#define _UFRMH_FRM10_SIZE                                   0x1
#define _UFRMH_FRM10_LENGTH                                 0x1
#define _UFRMH_FRM10_MASK                                   0x4

// Register: UFRML
#define UFRML UFRML
extern volatile unsigned char           UFRML               __at(0xF7A);
#ifndef _LIB_BUILD
asm("UFRML equ 0F7Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FRM                    :8;
    };
    struct {
        unsigned FRM0                   :1;
        unsigned FRM1                   :1;
        unsigned FRM2                   :1;
        unsigned FRM3                   :1;
        unsigned FRM4                   :1;
        unsigned FRM5                   :1;
        unsigned FRM6                   :1;
        unsigned FRM7                   :1;
    };
    struct {
        unsigned FRML                   :8;
    };
} UFRMLbits_t;
extern volatile UFRMLbits_t UFRMLbits __at(0xF7A);
// bitfield macros
#define _UFRML_FRM_POSN                                     0x0
#define _UFRML_FRM_POSITION                                 0x0
#define _UFRML_FRM_SIZE                                     0x8
#define _UFRML_FRM_LENGTH                                   0x8
#define _UFRML_FRM_MASK                                     0xFF
#define _UFRML_FRM0_POSN                                    0x0
#define _UFRML_FRM0_POSITION                                0x0
#define _UFRML_FRM0_SIZE                                    0x1
#define _UFRML_FRM0_LENGTH                                  0x1
#define _UFRML_FRM0_MASK                                    0x1
#define _UFRML_FRM1_POSN                                    0x1
#define _UFRML_FRM1_POSITION                                0x1
#define _UFRML_FRM1_SIZE                                    0x1
#define _UFRML_FRM1_LENGTH                                  0x1
#define _UFRML_FRM1_MASK                                    0x2
#define _UFRML_FRM2_POSN                                    0x2
#define _UFRML_FRM2_POSITION                                0x2
#define _UFRML_FRM2_SIZE                                    0x1
#define _UFRML_FRM2_LENGTH                                  0x1
#define _UFRML_FRM2_MASK                                    0x4
#define _UFRML_FRM3_POSN                                    0x3
#define _UFRML_FRM3_POSITION                                0x3
#define _UFRML_FRM3_SIZE                                    0x1
#define _UFRML_FRM3_LENGTH                                  0x1
#define _UFRML_FRM3_MASK                                    0x8
#define _UFRML_FRM4_POSN                                    0x4
#define _UFRML_FRM4_POSITION                                0x4
#define _UFRML_FRM4_SIZE                                    0x1
#define _UFRML_FRM4_LENGTH                                  0x1
#define _UFRML_FRM4_MASK                                    0x10
#define _UFRML_FRM5_POSN                                    0x5
#define _UFRML_FRM5_POSITION                                0x5
#define _UFRML_FRM5_SIZE                                    0x1
#define _UFRML_FRM5_LENGTH                                  0x1
#define _UFRML_FRM5_MASK                                    0x20
#define _UFRML_FRM6_POSN                                    0x6
#define _UFRML_FRM6_POSITION                                0x6
#define _UFRML_FRM6_SIZE                                    0x1
#define _UFRML_FRM6_LENGTH                                  0x1
#define _UFRML_FRM6_MASK                                    0x40
#define _UFRML_FRM7_POSN                                    0x7
#define _UFRML_FRM7_POSITION                                0x7
#define _UFRML_FRM7_SIZE                                    0x1
#define _UFRML_FRM7_LENGTH                                  0x1
#define _UFRML_FRM7_MASK                                    0x80
#define _UFRML_FRML_POSN                                    0x0
#define _UFRML_FRML_POSITION                                0x0
#define _UFRML_FRML_SIZE                                    0x8
#define _UFRML_FRML_LENGTH                                  0x8
#define _UFRML_FRML_MASK                                    0xFF

// Register: RCON4
#define RCON4 RCON4
extern volatile unsigned char           RCON4               __at(0xF7B);
#ifndef _LIB_BUILD
asm("RCON4 equ 0F7Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMSLP                  :1;
        unsigned                        :1;
        unsigned DPSLP                  :1;
        unsigned                        :1;
        unsigned SRETEN                 :1;
    };
} RCON4bits_t;
extern volatile RCON4bits_t RCON4bits __at(0xF7B);
// bitfield macros
#define _RCON4_PMSLP_POSN                                   0x0
#define _RCON4_PMSLP_POSITION                               0x0
#define _RCON4_PMSLP_SIZE                                   0x1
#define _RCON4_PMSLP_LENGTH                                 0x1
#define _RCON4_PMSLP_MASK                                   0x1
#define _RCON4_DPSLP_POSN                                   0x2
#define _RCON4_DPSLP_POSITION                               0x2
#define _RCON4_DPSLP_SIZE                                   0x1
#define _RCON4_DPSLP_LENGTH                                 0x1
#define _RCON4_DPSLP_MASK                                   0x4
#define _RCON4_SRETEN_POSN                                  0x4
#define _RCON4_SRETEN_POSITION                              0x4
#define _RCON4_SRETEN_SIZE                                  0x1
#define _RCON4_SRETEN_LENGTH                                0x1
#define _RCON4_SRETEN_MASK                                  0x10

// Register: RCON3
#define RCON3 RCON3
extern volatile unsigned char           RCON3               __at(0xF7C);
#ifndef _LIB_BUILD
asm("RCON3 equ 0F7Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VBAT                   :1;
        unsigned VBPOR                  :1;
        unsigned VDDPOR                 :1;
        unsigned VDDBOR                 :1;
        unsigned                        :3;
        unsigned STKERR                 :1;
    };
} RCON3bits_t;
extern volatile RCON3bits_t RCON3bits __at(0xF7C);
// bitfield macros
#define _RCON3_VBAT_POSN                                    0x0
#define _RCON3_VBAT_POSITION                                0x0
#define _RCON3_VBAT_SIZE                                    0x1
#define _RCON3_VBAT_LENGTH                                  0x1
#define _RCON3_VBAT_MASK                                    0x1
#define _RCON3_VBPOR_POSN                                   0x1
#define _RCON3_VBPOR_POSITION                               0x1
#define _RCON3_VBPOR_SIZE                                   0x1
#define _RCON3_VBPOR_LENGTH                                 0x1
#define _RCON3_VBPOR_MASK                                   0x2
#define _RCON3_VDDPOR_POSN                                  0x2
#define _RCON3_VDDPOR_POSITION                              0x2
#define _RCON3_VDDPOR_SIZE                                  0x1
#define _RCON3_VDDPOR_LENGTH                                0x1
#define _RCON3_VDDPOR_MASK                                  0x4
#define _RCON3_VDDBOR_POSN                                  0x3
#define _RCON3_VDDBOR_POSITION                              0x3
#define _RCON3_VDDBOR_SIZE                                  0x1
#define _RCON3_VDDBOR_LENGTH                                0x1
#define _RCON3_VDDBOR_MASK                                  0x8
#define _RCON3_STKERR_POSN                                  0x7
#define _RCON3_STKERR_POSITION                              0x7
#define _RCON3_STKERR_SIZE                                  0x1
#define _RCON3_STKERR_LENGTH                                0x1
#define _RCON3_STKERR_MASK                                  0x80

// Register: RCON2
#define RCON2 RCON2
extern volatile unsigned char           RCON2               __at(0xF7D);
#ifndef _LIB_BUILD
asm("RCON2 equ 0F7Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned SWDTEN                 :1;
        unsigned                        :1;
        unsigned EXTR                   :1;
    };
} RCON2bits_t;
extern volatile RCON2bits_t RCON2bits __at(0xF7D);
// bitfield macros
#define _RCON2_SWDTEN_POSN                                  0x5
#define _RCON2_SWDTEN_POSITION                              0x5
#define _RCON2_SWDTEN_SIZE                                  0x1
#define _RCON2_SWDTEN_LENGTH                                0x1
#define _RCON2_SWDTEN_MASK                                  0x20
#define _RCON2_EXTR_POSN                                    0x7
#define _RCON2_EXTR_POSITION                                0x7
#define _RCON2_EXTR_SIZE                                    0x1
#define _RCON2_EXTR_LENGTH                                  0x1
#define _RCON2_EXTR_MASK                                    0x80

// Register: EECON2
#define EECON2 EECON2
extern volatile unsigned char           EECON2              __at(0xF7E);
#ifndef _LIB_BUILD
asm("EECON2 equ 0F7Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned EECON2                 :8;
    };
} EECON2bits_t;
extern volatile EECON2bits_t EECON2bits __at(0xF7E);
// bitfield macros
#define _EECON2_EECON2_POSN                                 0x0
#define _EECON2_EECON2_POSITION                             0x0
#define _EECON2_EECON2_SIZE                                 0x8
#define _EECON2_EECON2_LENGTH                               0x8
#define _EECON2_EECON2_MASK                                 0xFF

// Register: EECON1
#define EECON1 EECON1
extern volatile unsigned char           EECON1              __at(0xF7F);
#ifndef _LIB_BUILD
asm("EECON1 equ 0F7Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned WWPROG                 :1;
    };
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits __at(0xF7F);
// bitfield macros
#define _EECON1_WR_POSN                                     0x1
#define _EECON1_WR_POSITION                                 0x1
#define _EECON1_WR_SIZE                                     0x1
#define _EECON1_WR_LENGTH                                   0x1
#define _EECON1_WR_MASK                                     0x2
#define _EECON1_WREN_POSN                                   0x2
#define _EECON1_WREN_POSITION                               0x2
#define _EECON1_WREN_SIZE                                   0x1
#define _EECON1_WREN_LENGTH                                 0x1
#define _EECON1_WREN_MASK                                   0x4
#define _EECON1_WRERR_POSN                                  0x3
#define _EECON1_WRERR_POSITION                              0x3
#define _EECON1_WRERR_SIZE                                  0x1
#define _EECON1_WRERR_LENGTH                                0x1
#define _EECON1_WRERR_MASK                                  0x8
#define _EECON1_FREE_POSN                                   0x4
#define _EECON1_FREE_POSITION                               0x4
#define _EECON1_FREE_SIZE                                   0x1
#define _EECON1_FREE_LENGTH                                 0x1
#define _EECON1_FREE_MASK                                   0x10
#define _EECON1_WWPROG_POSN                                 0x5
#define _EECON1_WWPROG_POSITION                             0x5
#define _EECON1_WWPROG_SIZE                                 0x1
#define _EECON1_WWPROG_LENGTH                               0x1
#define _EECON1_WWPROG_MASK                                 0x20

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0xF80);
#ifndef _LIB_BUILD
asm("PORTA equ 0F80h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
    struct {
        unsigned ULPWUIN                :1;
        unsigned                        :4;
        unsigned LVDIN                  :1;
        unsigned                        :1;
        unsigned RJPU                   :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0xF80);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80
#define _PORTA_ULPWUIN_POSN                                 0x0
#define _PORTA_ULPWUIN_POSITION                             0x0
#define _PORTA_ULPWUIN_SIZE                                 0x1
#define _PORTA_ULPWUIN_LENGTH                               0x1
#define _PORTA_ULPWUIN_MASK                                 0x1
#define _PORTA_LVDIN_POSN                                   0x5
#define _PORTA_LVDIN_POSITION                               0x5
#define _PORTA_LVDIN_SIZE                                   0x1
#define _PORTA_LVDIN_LENGTH                                 0x1
#define _PORTA_LVDIN_MASK                                   0x20
#define _PORTA_RJPU_POSN                                    0x7
#define _PORTA_RJPU_POSITION                                0x7
#define _PORTA_RJPU_SIZE                                    0x1
#define _PORTA_RJPU_LENGTH                                  0x1
#define _PORTA_RJPU_MASK                                    0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0xF81);
#ifndef _LIB_BUILD
asm("PORTB equ 0F81h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
    struct {
        unsigned                        :3;
        unsigned CCP2_PA2               :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0xF81);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80
#define _PORTB_CCP2_PA2_POSN                                0x3
#define _PORTB_CCP2_PA2_POSITION                            0x3
#define _PORTB_CCP2_PA2_SIZE                                0x1
#define _PORTB_CCP2_PA2_LENGTH                              0x1
#define _PORTB_CCP2_PA2_MASK                                0x8

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0xF82);
#ifndef _LIB_BUILD
asm("PORTC equ 0F82h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned CCP2                   :1;
        unsigned PA1                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned PA2                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0xF82);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80
#define _PORTC_CCP2_POSN                                    0x1
#define _PORTC_CCP2_POSITION                                0x1
#define _PORTC_CCP2_SIZE                                    0x1
#define _PORTC_CCP2_LENGTH                                  0x1
#define _PORTC_CCP2_MASK                                    0x2
#define _PORTC_PA1_POSN                                     0x2
#define _PORTC_PA1_POSITION                                 0x2
#define _PORTC_PA1_SIZE                                     0x1
#define _PORTC_PA1_LENGTH                                   0x1
#define _PORTC_PA1_MASK                                     0x4
#define _PORTC_PA2_POSN                                     0x1
#define _PORTC_PA2_POSITION                                 0x1
#define _PORTC_PA2_SIZE                                     0x1
#define _PORTC_PA2_LENGTH                                   0x1
#define _PORTC_PA2_MASK                                     0x2

// Register: PORTD
#define PORTD PORTD
extern volatile unsigned char           PORTD               __at(0xF83);
#ifndef _LIB_BUILD
asm("PORTD equ 0F83h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD0                    :1;
        unsigned RD1                    :1;
        unsigned RD2                    :1;
        unsigned RD3                    :1;
        unsigned RD4                    :1;
        unsigned RD5                    :1;
        unsigned RD6                    :1;
        unsigned RD7                    :1;
    };
    struct {
        unsigned                        :7;
        unsigned SS2                    :1;
    };
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits __at(0xF83);
// bitfield macros
#define _PORTD_RD0_POSN                                     0x0
#define _PORTD_RD0_POSITION                                 0x0
#define _PORTD_RD0_SIZE                                     0x1
#define _PORTD_RD0_LENGTH                                   0x1
#define _PORTD_RD0_MASK                                     0x1
#define _PORTD_RD1_POSN                                     0x1
#define _PORTD_RD1_POSITION                                 0x1
#define _PORTD_RD1_SIZE                                     0x1
#define _PORTD_RD1_LENGTH                                   0x1
#define _PORTD_RD1_MASK                                     0x2
#define _PORTD_RD2_POSN                                     0x2
#define _PORTD_RD2_POSITION                                 0x2
#define _PORTD_RD2_SIZE                                     0x1
#define _PORTD_RD2_LENGTH                                   0x1
#define _PORTD_RD2_MASK                                     0x4
#define _PORTD_RD3_POSN                                     0x3
#define _PORTD_RD3_POSITION                                 0x3
#define _PORTD_RD3_SIZE                                     0x1
#define _PORTD_RD3_LENGTH                                   0x1
#define _PORTD_RD3_MASK                                     0x8
#define _PORTD_RD4_POSN                                     0x4
#define _PORTD_RD4_POSITION                                 0x4
#define _PORTD_RD4_SIZE                                     0x1
#define _PORTD_RD4_LENGTH                                   0x1
#define _PORTD_RD4_MASK                                     0x10
#define _PORTD_RD5_POSN                                     0x5
#define _PORTD_RD5_POSITION                                 0x5
#define _PORTD_RD5_SIZE                                     0x1
#define _PORTD_RD5_LENGTH                                   0x1
#define _PORTD_RD5_MASK                                     0x20
#define _PORTD_RD6_POSN                                     0x6
#define _PORTD_RD6_POSITION                                 0x6
#define _PORTD_RD6_SIZE                                     0x1
#define _PORTD_RD6_LENGTH                                   0x1
#define _PORTD_RD6_MASK                                     0x40
#define _PORTD_RD7_POSN                                     0x7
#define _PORTD_RD7_POSITION                                 0x7
#define _PORTD_RD7_SIZE                                     0x1
#define _PORTD_RD7_LENGTH                                   0x1
#define _PORTD_RD7_MASK                                     0x80
#define _PORTD_SS2_POSN                                     0x7
#define _PORTD_SS2_POSITION                                 0x7
#define _PORTD_SS2_SIZE                                     0x1
#define _PORTD_SS2_LENGTH                                   0x1
#define _PORTD_SS2_MASK                                     0x80

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0xF84);
#ifndef _LIB_BUILD
asm("PORTE equ 0F84h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE0                    :1;
        unsigned RE1                    :1;
        unsigned RE2                    :1;
        unsigned RE3                    :1;
        unsigned RE4                    :1;
        unsigned RE5                    :1;
        unsigned RE6                    :1;
        unsigned RE7                    :1;
    };
    struct {
        unsigned PD2                    :1;
        unsigned PC2                    :1;
        unsigned CCP10                  :1;
        unsigned CCP9E                  :1;
        unsigned CCP8E                  :1;
        unsigned CCP7E                  :1;
        unsigned CCP6E                  :1;
        unsigned CCP2E                  :1;
    };
    struct {
        unsigned RDE                    :1;
        unsigned WRE                    :1;
        unsigned CS                     :1;
        unsigned PC3E                   :1;
        unsigned PB3E                   :1;
        unsigned PC1E                   :1;
        unsigned PB1E                   :1;
        unsigned PA2E                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned PB2                    :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0xF84);
// bitfield macros
#define _PORTE_RE0_POSN                                     0x0
#define _PORTE_RE0_POSITION                                 0x0
#define _PORTE_RE0_SIZE                                     0x1
#define _PORTE_RE0_LENGTH                                   0x1
#define _PORTE_RE0_MASK                                     0x1
#define _PORTE_RE1_POSN                                     0x1
#define _PORTE_RE1_POSITION                                 0x1
#define _PORTE_RE1_SIZE                                     0x1
#define _PORTE_RE1_LENGTH                                   0x1
#define _PORTE_RE1_MASK                                     0x2
#define _PORTE_RE2_POSN                                     0x2
#define _PORTE_RE2_POSITION                                 0x2
#define _PORTE_RE2_SIZE                                     0x1
#define _PORTE_RE2_LENGTH                                   0x1
#define _PORTE_RE2_MASK                                     0x4
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8
#define _PORTE_RE4_POSN                                     0x4
#define _PORTE_RE4_POSITION                                 0x4
#define _PORTE_RE4_SIZE                                     0x1
#define _PORTE_RE4_LENGTH                                   0x1
#define _PORTE_RE4_MASK                                     0x10
#define _PORTE_RE5_POSN                                     0x5
#define _PORTE_RE5_POSITION                                 0x5
#define _PORTE_RE5_SIZE                                     0x1
#define _PORTE_RE5_LENGTH                                   0x1
#define _PORTE_RE5_MASK                                     0x20
#define _PORTE_RE6_POSN                                     0x6
#define _PORTE_RE6_POSITION                                 0x6
#define _PORTE_RE6_SIZE                                     0x1
#define _PORTE_RE6_LENGTH                                   0x1
#define _PORTE_RE6_MASK                                     0x40
#define _PORTE_RE7_POSN                                     0x7
#define _PORTE_RE7_POSITION                                 0x7
#define _PORTE_RE7_SIZE                                     0x1
#define _PORTE_RE7_LENGTH                                   0x1
#define _PORTE_RE7_MASK                                     0x80
#define _PORTE_PD2_POSN                                     0x0
#define _PORTE_PD2_POSITION                                 0x0
#define _PORTE_PD2_SIZE                                     0x1
#define _PORTE_PD2_LENGTH                                   0x1
#define _PORTE_PD2_MASK                                     0x1
#define _PORTE_PC2_POSN                                     0x1
#define _PORTE_PC2_POSITION                                 0x1
#define _PORTE_PC2_SIZE                                     0x1
#define _PORTE_PC2_LENGTH                                   0x1
#define _PORTE_PC2_MASK                                     0x2
#define _PORTE_CCP10_POSN                                   0x2
#define _PORTE_CCP10_POSITION                               0x2
#define _PORTE_CCP10_SIZE                                   0x1
#define _PORTE_CCP10_LENGTH                                 0x1
#define _PORTE_CCP10_MASK                                   0x4
#define _PORTE_CCP9E_POSN                                   0x3
#define _PORTE_CCP9E_POSITION                               0x3
#define _PORTE_CCP9E_SIZE                                   0x1
#define _PORTE_CCP9E_LENGTH                                 0x1
#define _PORTE_CCP9E_MASK                                   0x8
#define _PORTE_CCP8E_POSN                                   0x4
#define _PORTE_CCP8E_POSITION                               0x4
#define _PORTE_CCP8E_SIZE                                   0x1
#define _PORTE_CCP8E_LENGTH                                 0x1
#define _PORTE_CCP8E_MASK                                   0x10
#define _PORTE_CCP7E_POSN                                   0x5
#define _PORTE_CCP7E_POSITION                               0x5
#define _PORTE_CCP7E_SIZE                                   0x1
#define _PORTE_CCP7E_LENGTH                                 0x1
#define _PORTE_CCP7E_MASK                                   0x20
#define _PORTE_CCP6E_POSN                                   0x6
#define _PORTE_CCP6E_POSITION                               0x6
#define _PORTE_CCP6E_SIZE                                   0x1
#define _PORTE_CCP6E_LENGTH                                 0x1
#define _PORTE_CCP6E_MASK                                   0x40
#define _PORTE_CCP2E_POSN                                   0x7
#define _PORTE_CCP2E_POSITION                               0x7
#define _PORTE_CCP2E_SIZE                                   0x1
#define _PORTE_CCP2E_LENGTH                                 0x1
#define _PORTE_CCP2E_MASK                                   0x80
#define _PORTE_RDE_POSN                                     0x0
#define _PORTE_RDE_POSITION                                 0x0
#define _PORTE_RDE_SIZE                                     0x1
#define _PORTE_RDE_LENGTH                                   0x1
#define _PORTE_RDE_MASK                                     0x1
#define _PORTE_WRE_POSN                                     0x1
#define _PORTE_WRE_POSITION                                 0x1
#define _PORTE_WRE_SIZE                                     0x1
#define _PORTE_WRE_LENGTH                                   0x1
#define _PORTE_WRE_MASK                                     0x2
#define _PORTE_CS_POSN                                      0x2
#define _PORTE_CS_POSITION                                  0x2
#define _PORTE_CS_SIZE                                      0x1
#define _PORTE_CS_LENGTH                                    0x1
#define _PORTE_CS_MASK                                      0x4
#define _PORTE_PC3E_POSN                                    0x3
#define _PORTE_PC3E_POSITION                                0x3
#define _PORTE_PC3E_SIZE                                    0x1
#define _PORTE_PC3E_LENGTH                                  0x1
#define _PORTE_PC3E_MASK                                    0x8
#define _PORTE_PB3E_POSN                                    0x4
#define _PORTE_PB3E_POSITION                                0x4
#define _PORTE_PB3E_SIZE                                    0x1
#define _PORTE_PB3E_LENGTH                                  0x1
#define _PORTE_PB3E_MASK                                    0x10
#define _PORTE_PC1E_POSN                                    0x5
#define _PORTE_PC1E_POSITION                                0x5
#define _PORTE_PC1E_SIZE                                    0x1
#define _PORTE_PC1E_LENGTH                                  0x1
#define _PORTE_PC1E_MASK                                    0x20
#define _PORTE_PB1E_POSN                                    0x6
#define _PORTE_PB1E_POSITION                                0x6
#define _PORTE_PB1E_SIZE                                    0x1
#define _PORTE_PB1E_LENGTH                                  0x1
#define _PORTE_PB1E_MASK                                    0x40
#define _PORTE_PA2E_POSN                                    0x7
#define _PORTE_PA2E_POSITION                                0x7
#define _PORTE_PA2E_SIZE                                    0x1
#define _PORTE_PA2E_LENGTH                                  0x1
#define _PORTE_PA2E_MASK                                    0x80
#define _PORTE_PB2_POSN                                     0x2
#define _PORTE_PB2_POSITION                                 0x2
#define _PORTE_PB2_SIZE                                     0x1
#define _PORTE_PB2_LENGTH                                   0x1
#define _PORTE_PB2_MASK                                     0x4

// Register: PORTF
#define PORTF PORTF
extern volatile unsigned char           PORTF               __at(0xF85);
#ifndef _LIB_BUILD
asm("PORTF equ 0F85h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned RF2                    :1;
        unsigned RF3                    :1;
        unsigned RF4                    :1;
        unsigned RF5                    :1;
        unsigned RF6                    :1;
        unsigned RF7                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned C1OUTF                 :1;
    };
} PORTFbits_t;
extern volatile PORTFbits_t PORTFbits __at(0xF85);
// bitfield macros
#define _PORTF_RF2_POSN                                     0x2
#define _PORTF_RF2_POSITION                                 0x2
#define _PORTF_RF2_SIZE                                     0x1
#define _PORTF_RF2_LENGTH                                   0x1
#define _PORTF_RF2_MASK                                     0x4
#define _PORTF_RF3_POSN                                     0x3
#define _PORTF_RF3_POSITION                                 0x3
#define _PORTF_RF3_SIZE                                     0x1
#define _PORTF_RF3_LENGTH                                   0x1
#define _PORTF_RF3_MASK                                     0x8
#define _PORTF_RF4_POSN                                     0x4
#define _PORTF_RF4_POSITION                                 0x4
#define _PORTF_RF4_SIZE                                     0x1
#define _PORTF_RF4_LENGTH                                   0x1
#define _PORTF_RF4_MASK                                     0x10
#define _PORTF_RF5_POSN                                     0x5
#define _PORTF_RF5_POSITION                                 0x5
#define _PORTF_RF5_SIZE                                     0x1
#define _PORTF_RF5_LENGTH                                   0x1
#define _PORTF_RF5_MASK                                     0x20
#define _PORTF_RF6_POSN                                     0x6
#define _PORTF_RF6_POSITION                                 0x6
#define _PORTF_RF6_SIZE                                     0x1
#define _PORTF_RF6_LENGTH                                   0x1
#define _PORTF_RF6_MASK                                     0x40
#define _PORTF_RF7_POSN                                     0x7
#define _PORTF_RF7_POSITION                                 0x7
#define _PORTF_RF7_SIZE                                     0x1
#define _PORTF_RF7_LENGTH                                   0x1
#define _PORTF_RF7_MASK                                     0x80
#define _PORTF_C1OUTF_POSN                                  0x2
#define _PORTF_C1OUTF_POSITION                              0x2
#define _PORTF_C1OUTF_SIZE                                  0x1
#define _PORTF_C1OUTF_LENGTH                                0x1
#define _PORTF_C1OUTF_MASK                                  0x4

// Register: PORTG
#define PORTG PORTG
extern volatile unsigned char           PORTG               __at(0xF86);
#ifndef _LIB_BUILD
asm("PORTG equ 0F86h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG0                    :1;
        unsigned RG1                    :1;
        unsigned RG2                    :1;
        unsigned RG3                    :1;
        unsigned RG4                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned C3OUTG                 :1;
    };
} PORTGbits_t;
extern volatile PORTGbits_t PORTGbits __at(0xF86);
// bitfield macros
#define _PORTG_RG0_POSN                                     0x0
#define _PORTG_RG0_POSITION                                 0x0
#define _PORTG_RG0_SIZE                                     0x1
#define _PORTG_RG0_LENGTH                                   0x1
#define _PORTG_RG0_MASK                                     0x1
#define _PORTG_RG1_POSN                                     0x1
#define _PORTG_RG1_POSITION                                 0x1
#define _PORTG_RG1_SIZE                                     0x1
#define _PORTG_RG1_LENGTH                                   0x1
#define _PORTG_RG1_MASK                                     0x2
#define _PORTG_RG2_POSN                                     0x2
#define _PORTG_RG2_POSITION                                 0x2
#define _PORTG_RG2_SIZE                                     0x1
#define _PORTG_RG2_LENGTH                                   0x1
#define _PORTG_RG2_MASK                                     0x4
#define _PORTG_RG3_POSN                                     0x3
#define _PORTG_RG3_POSITION                                 0x3
#define _PORTG_RG3_SIZE                                     0x1
#define _PORTG_RG3_LENGTH                                   0x1
#define _PORTG_RG3_MASK                                     0x8
#define _PORTG_RG4_POSN                                     0x4
#define _PORTG_RG4_POSITION                                 0x4
#define _PORTG_RG4_SIZE                                     0x1
#define _PORTG_RG4_LENGTH                                   0x1
#define _PORTG_RG4_MASK                                     0x10
#define _PORTG_C3OUTG_POSN                                  0x1
#define _PORTG_C3OUTG_POSITION                              0x1
#define _PORTG_C3OUTG_SIZE                                  0x1
#define _PORTG_C3OUTG_LENGTH                                0x1
#define _PORTG_C3OUTG_MASK                                  0x2

// Register: PORTH
#define PORTH PORTH
extern volatile unsigned char           PORTH               __at(0xF87);
#ifndef _LIB_BUILD
asm("PORTH equ 0F87h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH0                    :1;
        unsigned RH1                    :1;
        unsigned RH2                    :1;
        unsigned RH3                    :1;
        unsigned RH4                    :1;
        unsigned RH5                    :1;
        unsigned RH6                    :1;
        unsigned RH7                    :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP9                   :1;
        unsigned CCP8                   :1;
        unsigned CCP7                   :1;
        unsigned CCP6                   :1;
    };
    struct {
        unsigned                        :4;
        unsigned PC3                    :1;
        unsigned PB3                    :1;
        unsigned PC1                    :1;
        unsigned PB1                    :1;
    };
} PORTHbits_t;
extern volatile PORTHbits_t PORTHbits __at(0xF87);
// bitfield macros
#define _PORTH_RH0_POSN                                     0x0
#define _PORTH_RH0_POSITION                                 0x0
#define _PORTH_RH0_SIZE                                     0x1
#define _PORTH_RH0_LENGTH                                   0x1
#define _PORTH_RH0_MASK                                     0x1
#define _PORTH_RH1_POSN                                     0x1
#define _PORTH_RH1_POSITION                                 0x1
#define _PORTH_RH1_SIZE                                     0x1
#define _PORTH_RH1_LENGTH                                   0x1
#define _PORTH_RH1_MASK                                     0x2
#define _PORTH_RH2_POSN                                     0x2
#define _PORTH_RH2_POSITION                                 0x2
#define _PORTH_RH2_SIZE                                     0x1
#define _PORTH_RH2_LENGTH                                   0x1
#define _PORTH_RH2_MASK                                     0x4
#define _PORTH_RH3_POSN                                     0x3
#define _PORTH_RH3_POSITION                                 0x3
#define _PORTH_RH3_SIZE                                     0x1
#define _PORTH_RH3_LENGTH                                   0x1
#define _PORTH_RH3_MASK                                     0x8
#define _PORTH_RH4_POSN                                     0x4
#define _PORTH_RH4_POSITION                                 0x4
#define _PORTH_RH4_SIZE                                     0x1
#define _PORTH_RH4_LENGTH                                   0x1
#define _PORTH_RH4_MASK                                     0x10
#define _PORTH_RH5_POSN                                     0x5
#define _PORTH_RH5_POSITION                                 0x5
#define _PORTH_RH5_SIZE                                     0x1
#define _PORTH_RH5_LENGTH                                   0x1
#define _PORTH_RH5_MASK                                     0x20
#define _PORTH_RH6_POSN                                     0x6
#define _PORTH_RH6_POSITION                                 0x6
#define _PORTH_RH6_SIZE                                     0x1
#define _PORTH_RH6_LENGTH                                   0x1
#define _PORTH_RH6_MASK                                     0x40
#define _PORTH_RH7_POSN                                     0x7
#define _PORTH_RH7_POSITION                                 0x7
#define _PORTH_RH7_SIZE                                     0x1
#define _PORTH_RH7_LENGTH                                   0x1
#define _PORTH_RH7_MASK                                     0x80
#define _PORTH_CCP9_POSN                                    0x4
#define _PORTH_CCP9_POSITION                                0x4
#define _PORTH_CCP9_SIZE                                    0x1
#define _PORTH_CCP9_LENGTH                                  0x1
#define _PORTH_CCP9_MASK                                    0x10
#define _PORTH_CCP8_POSN                                    0x5
#define _PORTH_CCP8_POSITION                                0x5
#define _PORTH_CCP8_SIZE                                    0x1
#define _PORTH_CCP8_LENGTH                                  0x1
#define _PORTH_CCP8_MASK                                    0x20
#define _PORTH_CCP7_POSN                                    0x6
#define _PORTH_CCP7_POSITION                                0x6
#define _PORTH_CCP7_SIZE                                    0x1
#define _PORTH_CCP7_LENGTH                                  0x1
#define _PORTH_CCP7_MASK                                    0x40
#define _PORTH_CCP6_POSN                                    0x7
#define _PORTH_CCP6_POSITION                                0x7
#define _PORTH_CCP6_SIZE                                    0x1
#define _PORTH_CCP6_LENGTH                                  0x1
#define _PORTH_CCP6_MASK                                    0x80
#define _PORTH_PC3_POSN                                     0x4
#define _PORTH_PC3_POSITION                                 0x4
#define _PORTH_PC3_SIZE                                     0x1
#define _PORTH_PC3_LENGTH                                   0x1
#define _PORTH_PC3_MASK                                     0x10
#define _PORTH_PB3_POSN                                     0x5
#define _PORTH_PB3_POSITION                                 0x5
#define _PORTH_PB3_SIZE                                     0x1
#define _PORTH_PB3_LENGTH                                   0x1
#define _PORTH_PB3_MASK                                     0x20
#define _PORTH_PC1_POSN                                     0x6
#define _PORTH_PC1_POSITION                                 0x6
#define _PORTH_PC1_SIZE                                     0x1
#define _PORTH_PC1_LENGTH                                   0x1
#define _PORTH_PC1_MASK                                     0x40
#define _PORTH_PB1_POSN                                     0x7
#define _PORTH_PB1_POSITION                                 0x7
#define _PORTH_PB1_SIZE                                     0x1
#define _PORTH_PB1_LENGTH                                   0x1
#define _PORTH_PB1_MASK                                     0x80

// Register: PORTJ
#define PORTJ PORTJ
extern volatile unsigned char           PORTJ               __at(0xF88);
#ifndef _LIB_BUILD
asm("PORTJ equ 0F88h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RJ0                    :1;
        unsigned RJ1                    :1;
        unsigned RJ2                    :1;
        unsigned RJ3                    :1;
        unsigned RJ4                    :1;
        unsigned RJ5                    :1;
        unsigned RJ6                    :1;
        unsigned RJ7                    :1;
    };
} PORTJbits_t;
extern volatile PORTJbits_t PORTJbits __at(0xF88);
// bitfield macros
#define _PORTJ_RJ0_POSN                                     0x0
#define _PORTJ_RJ0_POSITION                                 0x0
#define _PORTJ_RJ0_SIZE                                     0x1
#define _PORTJ_RJ0_LENGTH                                   0x1
#define _PORTJ_RJ0_MASK                                     0x1
#define _PORTJ_RJ1_POSN                                     0x1
#define _PORTJ_RJ1_POSITION                                 0x1
#define _PORTJ_RJ1_SIZE                                     0x1
#define _PORTJ_RJ1_LENGTH                                   0x1
#define _PORTJ_RJ1_MASK                                     0x2
#define _PORTJ_RJ2_POSN                                     0x2
#define _PORTJ_RJ2_POSITION                                 0x2
#define _PORTJ_RJ2_SIZE                                     0x1
#define _PORTJ_RJ2_LENGTH                                   0x1
#define _PORTJ_RJ2_MASK                                     0x4
#define _PORTJ_RJ3_POSN                                     0x3
#define _PORTJ_RJ3_POSITION                                 0x3
#define _PORTJ_RJ3_SIZE                                     0x1
#define _PORTJ_RJ3_LENGTH                                   0x1
#define _PORTJ_RJ3_MASK                                     0x8
#define _PORTJ_RJ4_POSN                                     0x4
#define _PORTJ_RJ4_POSITION                                 0x4
#define _PORTJ_RJ4_SIZE                                     0x1
#define _PORTJ_RJ4_LENGTH                                   0x1
#define _PORTJ_RJ4_MASK                                     0x10
#define _PORTJ_RJ5_POSN                                     0x5
#define _PORTJ_RJ5_POSITION                                 0x5
#define _PORTJ_RJ5_SIZE                                     0x1
#define _PORTJ_RJ5_LENGTH                                   0x1
#define _PORTJ_RJ5_MASK                                     0x20
#define _PORTJ_RJ6_POSN                                     0x6
#define _PORTJ_RJ6_POSITION                                 0x6
#define _PORTJ_RJ6_SIZE                                     0x1
#define _PORTJ_RJ6_LENGTH                                   0x1
#define _PORTJ_RJ6_MASK                                     0x40
#define _PORTJ_RJ7_POSN                                     0x7
#define _PORTJ_RJ7_POSITION                                 0x7
#define _PORTJ_RJ7_SIZE                                     0x1
#define _PORTJ_RJ7_LENGTH                                   0x1
#define _PORTJ_RJ7_MASK                                     0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0xF89);
#ifndef _LIB_BUILD
asm("LATA equ 0F89h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
    struct {
        unsigned LA0                    :1;
        unsigned LA1                    :1;
        unsigned LA2                    :1;
        unsigned LA3                    :1;
        unsigned LA4                    :1;
        unsigned LA5                    :1;
        unsigned LA6                    :1;
        unsigned LA7                    :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0xF89);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80
#define _LATA_LA0_POSN                                      0x0
#define _LATA_LA0_POSITION                                  0x0
#define _LATA_LA0_SIZE                                      0x1
#define _LATA_LA0_LENGTH                                    0x1
#define _LATA_LA0_MASK                                      0x1
#define _LATA_LA1_POSN                                      0x1
#define _LATA_LA1_POSITION                                  0x1
#define _LATA_LA1_SIZE                                      0x1
#define _LATA_LA1_LENGTH                                    0x1
#define _LATA_LA1_MASK                                      0x2
#define _LATA_LA2_POSN                                      0x2
#define _LATA_LA2_POSITION                                  0x2
#define _LATA_LA2_SIZE                                      0x1
#define _LATA_LA2_LENGTH                                    0x1
#define _LATA_LA2_MASK                                      0x4
#define _LATA_LA3_POSN                                      0x3
#define _LATA_LA3_POSITION                                  0x3
#define _LATA_LA3_SIZE                                      0x1
#define _LATA_LA3_LENGTH                                    0x1
#define _LATA_LA3_MASK                                      0x8
#define _LATA_LA4_POSN                                      0x4
#define _LATA_LA4_POSITION                                  0x4
#define _LATA_LA4_SIZE                                      0x1
#define _LATA_LA4_LENGTH                                    0x1
#define _LATA_LA4_MASK                                      0x10
#define _LATA_LA5_POSN                                      0x5
#define _LATA_LA5_POSITION                                  0x5
#define _LATA_LA5_SIZE                                      0x1
#define _LATA_LA5_LENGTH                                    0x1
#define _LATA_LA5_MASK                                      0x20
#define _LATA_LA6_POSN                                      0x6
#define _LATA_LA6_POSITION                                  0x6
#define _LATA_LA6_SIZE                                      0x1
#define _LATA_LA6_LENGTH                                    0x1
#define _LATA_LA6_MASK                                      0x40
#define _LATA_LA7_POSN                                      0x7
#define _LATA_LA7_POSITION                                  0x7
#define _LATA_LA7_SIZE                                      0x1
#define _LATA_LA7_LENGTH                                    0x1
#define _LATA_LA7_MASK                                      0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0xF8A);
#ifndef _LIB_BUILD
asm("LATB equ 0F8Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
    struct {
        unsigned LB0                    :1;
        unsigned LB1                    :1;
        unsigned LB2                    :1;
        unsigned LB3                    :1;
        unsigned LB4                    :1;
        unsigned LB5                    :1;
        unsigned LB6                    :1;
        unsigned LB7                    :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0xF8A);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80
#define _LATB_LB0_POSN                                      0x0
#define _LATB_LB0_POSITION                                  0x0
#define _LATB_LB0_SIZE                                      0x1
#define _LATB_LB0_LENGTH                                    0x1
#define _LATB_LB0_MASK                                      0x1
#define _LATB_LB1_POSN                                      0x1
#define _LATB_LB1_POSITION                                  0x1
#define _LATB_LB1_SIZE                                      0x1
#define _LATB_LB1_LENGTH                                    0x1
#define _LATB_LB1_MASK                                      0x2
#define _LATB_LB2_POSN                                      0x2
#define _LATB_LB2_POSITION                                  0x2
#define _LATB_LB2_SIZE                                      0x1
#define _LATB_LB2_LENGTH                                    0x1
#define _LATB_LB2_MASK                                      0x4
#define _LATB_LB3_POSN                                      0x3
#define _LATB_LB3_POSITION                                  0x3
#define _LATB_LB3_SIZE                                      0x1
#define _LATB_LB3_LENGTH                                    0x1
#define _LATB_LB3_MASK                                      0x8
#define _LATB_LB4_POSN                                      0x4
#define _LATB_LB4_POSITION                                  0x4
#define _LATB_LB4_SIZE                                      0x1
#define _LATB_LB4_LENGTH                                    0x1
#define _LATB_LB4_MASK                                      0x10
#define _LATB_LB5_POSN                                      0x5
#define _LATB_LB5_POSITION                                  0x5
#define _LATB_LB5_SIZE                                      0x1
#define _LATB_LB5_LENGTH                                    0x1
#define _LATB_LB5_MASK                                      0x20
#define _LATB_LB6_POSN                                      0x6
#define _LATB_LB6_POSITION                                  0x6
#define _LATB_LB6_SIZE                                      0x1
#define _LATB_LB6_LENGTH                                    0x1
#define _LATB_LB6_MASK                                      0x40
#define _LATB_LB7_POSN                                      0x7
#define _LATB_LB7_POSITION                                  0x7
#define _LATB_LB7_SIZE                                      0x1
#define _LATB_LB7_LENGTH                                    0x1
#define _LATB_LB7_MASK                                      0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0xF8B);
#ifndef _LIB_BUILD
asm("LATC equ 0F8Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
    struct {
        unsigned LC0                    :1;
        unsigned LC1                    :1;
        unsigned LC2                    :1;
        unsigned LC3                    :1;
        unsigned LC4                    :1;
        unsigned LC5                    :1;
        unsigned LC6                    :1;
        unsigned LC7                    :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0xF8B);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80
#define _LATC_LC0_POSN                                      0x0
#define _LATC_LC0_POSITION                                  0x0
#define _LATC_LC0_SIZE                                      0x1
#define _LATC_LC0_LENGTH                                    0x1
#define _LATC_LC0_MASK                                      0x1
#define _LATC_LC1_POSN                                      0x1
#define _LATC_LC1_POSITION                                  0x1
#define _LATC_LC1_SIZE                                      0x1
#define _LATC_LC1_LENGTH                                    0x1
#define _LATC_LC1_MASK                                      0x2
#define _LATC_LC2_POSN                                      0x2
#define _LATC_LC2_POSITION                                  0x2
#define _LATC_LC2_SIZE                                      0x1
#define _LATC_LC2_LENGTH                                    0x1
#define _LATC_LC2_MASK                                      0x4
#define _LATC_LC3_POSN                                      0x3
#define _LATC_LC3_POSITION                                  0x3
#define _LATC_LC3_SIZE                                      0x1
#define _LATC_LC3_LENGTH                                    0x1
#define _LATC_LC3_MASK                                      0x8
#define _LATC_LC4_POSN                                      0x4
#define _LATC_LC4_POSITION                                  0x4
#define _LATC_LC4_SIZE                                      0x1
#define _LATC_LC4_LENGTH                                    0x1
#define _LATC_LC4_MASK                                      0x10
#define _LATC_LC5_POSN                                      0x5
#define _LATC_LC5_POSITION                                  0x5
#define _LATC_LC5_SIZE                                      0x1
#define _LATC_LC5_LENGTH                                    0x1
#define _LATC_LC5_MASK                                      0x20
#define _LATC_LC6_POSN                                      0x6
#define _LATC_LC6_POSITION                                  0x6
#define _LATC_LC6_SIZE                                      0x1
#define _LATC_LC6_LENGTH                                    0x1
#define _LATC_LC6_MASK                                      0x40
#define _LATC_LC7_POSN                                      0x7
#define _LATC_LC7_POSITION                                  0x7
#define _LATC_LC7_SIZE                                      0x1
#define _LATC_LC7_LENGTH                                    0x1
#define _LATC_LC7_MASK                                      0x80

// Register: LATD
#define LATD LATD
extern volatile unsigned char           LATD                __at(0xF8C);
#ifndef _LIB_BUILD
asm("LATD equ 0F8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATD0                  :1;
        unsigned LATD1                  :1;
        unsigned LATD2                  :1;
        unsigned LATD3                  :1;
        unsigned LATD4                  :1;
        unsigned LATD5                  :1;
        unsigned LATD6                  :1;
        unsigned LATD7                  :1;
    };
    struct {
        unsigned LD0                    :1;
        unsigned LD1                    :1;
        unsigned LD2                    :1;
        unsigned LD3                    :1;
        unsigned LD4                    :1;
        unsigned LD5                    :1;
        unsigned LD6                    :1;
        unsigned LD7                    :1;
    };
} LATDbits_t;
extern volatile LATDbits_t LATDbits __at(0xF8C);
// bitfield macros
#define _LATD_LATD0_POSN                                    0x0
#define _LATD_LATD0_POSITION                                0x0
#define _LATD_LATD0_SIZE                                    0x1
#define _LATD_LATD0_LENGTH                                  0x1
#define _LATD_LATD0_MASK                                    0x1
#define _LATD_LATD1_POSN                                    0x1
#define _LATD_LATD1_POSITION                                0x1
#define _LATD_LATD1_SIZE                                    0x1
#define _LATD_LATD1_LENGTH                                  0x1
#define _LATD_LATD1_MASK                                    0x2
#define _LATD_LATD2_POSN                                    0x2
#define _LATD_LATD2_POSITION                                0x2
#define _LATD_LATD2_SIZE                                    0x1
#define _LATD_LATD2_LENGTH                                  0x1
#define _LATD_LATD2_MASK                                    0x4
#define _LATD_LATD3_POSN                                    0x3
#define _LATD_LATD3_POSITION                                0x3
#define _LATD_LATD3_SIZE                                    0x1
#define _LATD_LATD3_LENGTH                                  0x1
#define _LATD_LATD3_MASK                                    0x8
#define _LATD_LATD4_POSN                                    0x4
#define _LATD_LATD4_POSITION                                0x4
#define _LATD_LATD4_SIZE                                    0x1
#define _LATD_LATD4_LENGTH                                  0x1
#define _LATD_LATD4_MASK                                    0x10
#define _LATD_LATD5_POSN                                    0x5
#define _LATD_LATD5_POSITION                                0x5
#define _LATD_LATD5_SIZE                                    0x1
#define _LATD_LATD5_LENGTH                                  0x1
#define _LATD_LATD5_MASK                                    0x20
#define _LATD_LATD6_POSN                                    0x6
#define _LATD_LATD6_POSITION                                0x6
#define _LATD_LATD6_SIZE                                    0x1
#define _LATD_LATD6_LENGTH                                  0x1
#define _LATD_LATD6_MASK                                    0x40
#define _LATD_LATD7_POSN                                    0x7
#define _LATD_LATD7_POSITION                                0x7
#define _LATD_LATD7_SIZE                                    0x1
#define _LATD_LATD7_LENGTH                                  0x1
#define _LATD_LATD7_MASK                                    0x80
#define _LATD_LD0_POSN                                      0x0
#define _LATD_LD0_POSITION                                  0x0
#define _LATD_LD0_SIZE                                      0x1
#define _LATD_LD0_LENGTH                                    0x1
#define _LATD_LD0_MASK                                      0x1
#define _LATD_LD1_POSN                                      0x1
#define _LATD_LD1_POSITION                                  0x1
#define _LATD_LD1_SIZE                                      0x1
#define _LATD_LD1_LENGTH                                    0x1
#define _LATD_LD1_MASK                                      0x2
#define _LATD_LD2_POSN                                      0x2
#define _LATD_LD2_POSITION                                  0x2
#define _LATD_LD2_SIZE                                      0x1
#define _LATD_LD2_LENGTH                                    0x1
#define _LATD_LD2_MASK                                      0x4
#define _LATD_LD3_POSN                                      0x3
#define _LATD_LD3_POSITION                                  0x3
#define _LATD_LD3_SIZE                                      0x1
#define _LATD_LD3_LENGTH                                    0x1
#define _LATD_LD3_MASK                                      0x8
#define _LATD_LD4_POSN                                      0x4
#define _LATD_LD4_POSITION                                  0x4
#define _LATD_LD4_SIZE                                      0x1
#define _LATD_LD4_LENGTH                                    0x1
#define _LATD_LD4_MASK                                      0x10
#define _LATD_LD5_POSN                                      0x5
#define _LATD_LD5_POSITION                                  0x5
#define _LATD_LD5_SIZE                                      0x1
#define _LATD_LD5_LENGTH                                    0x1
#define _LATD_LD5_MASK                                      0x20
#define _LATD_LD6_POSN                                      0x6
#define _LATD_LD6_POSITION                                  0x6
#define _LATD_LD6_SIZE                                      0x1
#define _LATD_LD6_LENGTH                                    0x1
#define _LATD_LD6_MASK                                      0x40
#define _LATD_LD7_POSN                                      0x7
#define _LATD_LD7_POSITION                                  0x7
#define _LATD_LD7_SIZE                                      0x1
#define _LATD_LD7_LENGTH                                    0x1
#define _LATD_LD7_MASK                                      0x80

// Register: LATE
#define LATE LATE
extern volatile unsigned char           LATE                __at(0xF8D);
#ifndef _LIB_BUILD
asm("LATE equ 0F8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATE0                  :1;
        unsigned LATE1                  :1;
        unsigned LATE2                  :1;
        unsigned LATE3                  :1;
        unsigned LATE4                  :1;
        unsigned LATE5                  :1;
        unsigned LATE6                  :1;
        unsigned LATE7                  :1;
    };
    struct {
        unsigned LE0                    :1;
        unsigned LE1                    :1;
        unsigned LE2                    :1;
        unsigned LE3                    :1;
        unsigned LE4                    :1;
        unsigned LE5                    :1;
        unsigned LE6                    :1;
        unsigned LE7                    :1;
    };
} LATEbits_t;
extern volatile LATEbits_t LATEbits __at(0xF8D);
// bitfield macros
#define _LATE_LATE0_POSN                                    0x0
#define _LATE_LATE0_POSITION                                0x0
#define _LATE_LATE0_SIZE                                    0x1
#define _LATE_LATE0_LENGTH                                  0x1
#define _LATE_LATE0_MASK                                    0x1
#define _LATE_LATE1_POSN                                    0x1
#define _LATE_LATE1_POSITION                                0x1
#define _LATE_LATE1_SIZE                                    0x1
#define _LATE_LATE1_LENGTH                                  0x1
#define _LATE_LATE1_MASK                                    0x2
#define _LATE_LATE2_POSN                                    0x2
#define _LATE_LATE2_POSITION                                0x2
#define _LATE_LATE2_SIZE                                    0x1
#define _LATE_LATE2_LENGTH                                  0x1
#define _LATE_LATE2_MASK                                    0x4
#define _LATE_LATE3_POSN                                    0x3
#define _LATE_LATE3_POSITION                                0x3
#define _LATE_LATE3_SIZE                                    0x1
#define _LATE_LATE3_LENGTH                                  0x1
#define _LATE_LATE3_MASK                                    0x8
#define _LATE_LATE4_POSN                                    0x4
#define _LATE_LATE4_POSITION                                0x4
#define _LATE_LATE4_SIZE                                    0x1
#define _LATE_LATE4_LENGTH                                  0x1
#define _LATE_LATE4_MASK                                    0x10
#define _LATE_LATE5_POSN                                    0x5
#define _LATE_LATE5_POSITION                                0x5
#define _LATE_LATE5_SIZE                                    0x1
#define _LATE_LATE5_LENGTH                                  0x1
#define _LATE_LATE5_MASK                                    0x20
#define _LATE_LATE6_POSN                                    0x6
#define _LATE_LATE6_POSITION                                0x6
#define _LATE_LATE6_SIZE                                    0x1
#define _LATE_LATE6_LENGTH                                  0x1
#define _LATE_LATE6_MASK                                    0x40
#define _LATE_LATE7_POSN                                    0x7
#define _LATE_LATE7_POSITION                                0x7
#define _LATE_LATE7_SIZE                                    0x1
#define _LATE_LATE7_LENGTH                                  0x1
#define _LATE_LATE7_MASK                                    0x80
#define _LATE_LE0_POSN                                      0x0
#define _LATE_LE0_POSITION                                  0x0
#define _LATE_LE0_SIZE                                      0x1
#define _LATE_LE0_LENGTH                                    0x1
#define _LATE_LE0_MASK                                      0x1
#define _LATE_LE1_POSN                                      0x1
#define _LATE_LE1_POSITION                                  0x1
#define _LATE_LE1_SIZE                                      0x1
#define _LATE_LE1_LENGTH                                    0x1
#define _LATE_LE1_MASK                                      0x2
#define _LATE_LE2_POSN                                      0x2
#define _LATE_LE2_POSITION                                  0x2
#define _LATE_LE2_SIZE                                      0x1
#define _LATE_LE2_LENGTH                                    0x1
#define _LATE_LE2_MASK                                      0x4
#define _LATE_LE3_POSN                                      0x3
#define _LATE_LE3_POSITION                                  0x3
#define _LATE_LE3_SIZE                                      0x1
#define _LATE_LE3_LENGTH                                    0x1
#define _LATE_LE3_MASK                                      0x8
#define _LATE_LE4_POSN                                      0x4
#define _LATE_LE4_POSITION                                  0x4
#define _LATE_LE4_SIZE                                      0x1
#define _LATE_LE4_LENGTH                                    0x1
#define _LATE_LE4_MASK                                      0x10
#define _LATE_LE5_POSN                                      0x5
#define _LATE_LE5_POSITION                                  0x5
#define _LATE_LE5_SIZE                                      0x1
#define _LATE_LE5_LENGTH                                    0x1
#define _LATE_LE5_MASK                                      0x20
#define _LATE_LE6_POSN                                      0x6
#define _LATE_LE6_POSITION                                  0x6
#define _LATE_LE6_SIZE                                      0x1
#define _LATE_LE6_LENGTH                                    0x1
#define _LATE_LE6_MASK                                      0x40
#define _LATE_LE7_POSN                                      0x7
#define _LATE_LE7_POSITION                                  0x7
#define _LATE_LE7_SIZE                                      0x1
#define _LATE_LE7_LENGTH                                    0x1
#define _LATE_LE7_MASK                                      0x80

// Register: LATF
#define LATF LATF
extern volatile unsigned char           LATF                __at(0xF8E);
#ifndef _LIB_BUILD
asm("LATF equ 0F8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LATF2                  :1;
        unsigned LATF3                  :1;
        unsigned LATF4                  :1;
        unsigned LATF5                  :1;
        unsigned LATF6                  :1;
        unsigned LATF7                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned LF2                    :1;
        unsigned LF3                    :1;
        unsigned LF4                    :1;
        unsigned LF5                    :1;
        unsigned LF6                    :1;
        unsigned LF7                    :1;
    };
} LATFbits_t;
extern volatile LATFbits_t LATFbits __at(0xF8E);
// bitfield macros
#define _LATF_LATF2_POSN                                    0x2
#define _LATF_LATF2_POSITION                                0x2
#define _LATF_LATF2_SIZE                                    0x1
#define _LATF_LATF2_LENGTH                                  0x1
#define _LATF_LATF2_MASK                                    0x4
#define _LATF_LATF3_POSN                                    0x3
#define _LATF_LATF3_POSITION                                0x3
#define _LATF_LATF3_SIZE                                    0x1
#define _LATF_LATF3_LENGTH                                  0x1
#define _LATF_LATF3_MASK                                    0x8
#define _LATF_LATF4_POSN                                    0x4
#define _LATF_LATF4_POSITION                                0x4
#define _LATF_LATF4_SIZE                                    0x1
#define _LATF_LATF4_LENGTH                                  0x1
#define _LATF_LATF4_MASK                                    0x10
#define _LATF_LATF5_POSN                                    0x5
#define _LATF_LATF5_POSITION                                0x5
#define _LATF_LATF5_SIZE                                    0x1
#define _LATF_LATF5_LENGTH                                  0x1
#define _LATF_LATF5_MASK                                    0x20
#define _LATF_LATF6_POSN                                    0x6
#define _LATF_LATF6_POSITION                                0x6
#define _LATF_LATF6_SIZE                                    0x1
#define _LATF_LATF6_LENGTH                                  0x1
#define _LATF_LATF6_MASK                                    0x40
#define _LATF_LATF7_POSN                                    0x7
#define _LATF_LATF7_POSITION                                0x7
#define _LATF_LATF7_SIZE                                    0x1
#define _LATF_LATF7_LENGTH                                  0x1
#define _LATF_LATF7_MASK                                    0x80
#define _LATF_LF2_POSN                                      0x2
#define _LATF_LF2_POSITION                                  0x2
#define _LATF_LF2_SIZE                                      0x1
#define _LATF_LF2_LENGTH                                    0x1
#define _LATF_LF2_MASK                                      0x4
#define _LATF_LF3_POSN                                      0x3
#define _LATF_LF3_POSITION                                  0x3
#define _LATF_LF3_SIZE                                      0x1
#define _LATF_LF3_LENGTH                                    0x1
#define _LATF_LF3_MASK                                      0x8
#define _LATF_LF4_POSN                                      0x4
#define _LATF_LF4_POSITION                                  0x4
#define _LATF_LF4_SIZE                                      0x1
#define _LATF_LF4_LENGTH                                    0x1
#define _LATF_LF4_MASK                                      0x10
#define _LATF_LF5_POSN                                      0x5
#define _LATF_LF5_POSITION                                  0x5
#define _LATF_LF5_SIZE                                      0x1
#define _LATF_LF5_LENGTH                                    0x1
#define _LATF_LF5_MASK                                      0x20
#define _LATF_LF6_POSN                                      0x6
#define _LATF_LF6_POSITION                                  0x6
#define _LATF_LF6_SIZE                                      0x1
#define _LATF_LF6_LENGTH                                    0x1
#define _LATF_LF6_MASK                                      0x40
#define _LATF_LF7_POSN                                      0x7
#define _LATF_LF7_POSITION                                  0x7
#define _LATF_LF7_SIZE                                      0x1
#define _LATF_LF7_LENGTH                                    0x1
#define _LATF_LF7_MASK                                      0x80

// Register: LATG
#define LATG LATG
extern volatile unsigned char           LATG                __at(0xF8F);
#ifndef _LIB_BUILD
asm("LATG equ 0F8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATG0                  :1;
        unsigned LATG1                  :1;
        unsigned LATG2                  :1;
        unsigned LATG3                  :1;
        unsigned LATG4                  :1;
    };
    struct {
        unsigned LG0                    :1;
        unsigned LG1                    :1;
        unsigned LG2                    :1;
        unsigned LG3                    :1;
        unsigned LG4                    :1;
    };
} LATGbits_t;
extern volatile LATGbits_t LATGbits __at(0xF8F);
// bitfield macros
#define _LATG_LATG0_POSN                                    0x0
#define _LATG_LATG0_POSITION                                0x0
#define _LATG_LATG0_SIZE                                    0x1
#define _LATG_LATG0_LENGTH                                  0x1
#define _LATG_LATG0_MASK                                    0x1
#define _LATG_LATG1_POSN                                    0x1
#define _LATG_LATG1_POSITION                                0x1
#define _LATG_LATG1_SIZE                                    0x1
#define _LATG_LATG1_LENGTH                                  0x1
#define _LATG_LATG1_MASK                                    0x2
#define _LATG_LATG2_POSN                                    0x2
#define _LATG_LATG2_POSITION                                0x2
#define _LATG_LATG2_SIZE                                    0x1
#define _LATG_LATG2_LENGTH                                  0x1
#define _LATG_LATG2_MASK                                    0x4
#define _LATG_LATG3_POSN                                    0x3
#define _LATG_LATG3_POSITION                                0x3
#define _LATG_LATG3_SIZE                                    0x1
#define _LATG_LATG3_LENGTH                                  0x1
#define _LATG_LATG3_MASK                                    0x8
#define _LATG_LATG4_POSN                                    0x4
#define _LATG_LATG4_POSITION                                0x4
#define _LATG_LATG4_SIZE                                    0x1
#define _LATG_LATG4_LENGTH                                  0x1
#define _LATG_LATG4_MASK                                    0x10
#define _LATG_LG0_POSN                                      0x0
#define _LATG_LG0_POSITION                                  0x0
#define _LATG_LG0_SIZE                                      0x1
#define _LATG_LG0_LENGTH                                    0x1
#define _LATG_LG0_MASK                                      0x1
#define _LATG_LG1_POSN                                      0x1
#define _LATG_LG1_POSITION                                  0x1
#define _LATG_LG1_SIZE                                      0x1
#define _LATG_LG1_LENGTH                                    0x1
#define _LATG_LG1_MASK                                      0x2
#define _LATG_LG2_POSN                                      0x2
#define _LATG_LG2_POSITION                                  0x2
#define _LATG_LG2_SIZE                                      0x1
#define _LATG_LG2_LENGTH                                    0x1
#define _LATG_LG2_MASK                                      0x4
#define _LATG_LG3_POSN                                      0x3
#define _LATG_LG3_POSITION                                  0x3
#define _LATG_LG3_SIZE                                      0x1
#define _LATG_LG3_LENGTH                                    0x1
#define _LATG_LG3_MASK                                      0x8
#define _LATG_LG4_POSN                                      0x4
#define _LATG_LG4_POSITION                                  0x4
#define _LATG_LG4_SIZE                                      0x1
#define _LATG_LG4_LENGTH                                    0x1
#define _LATG_LG4_MASK                                      0x10

// Register: LATH
#define LATH LATH
extern volatile unsigned char           LATH                __at(0xF90);
#ifndef _LIB_BUILD
asm("LATH equ 0F90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATH0                  :1;
        unsigned LATH1                  :1;
        unsigned LATH2                  :1;
        unsigned LATH3                  :1;
        unsigned LATH4                  :1;
        unsigned LATH5                  :1;
        unsigned LATH6                  :1;
        unsigned LATH7                  :1;
    };
    struct {
        unsigned LH0                    :1;
        unsigned LH1                    :1;
        unsigned LH2                    :1;
        unsigned LH3                    :1;
        unsigned LH4                    :1;
        unsigned LH5                    :1;
        unsigned LH6                    :1;
        unsigned LH7                    :1;
    };
} LATHbits_t;
extern volatile LATHbits_t LATHbits __at(0xF90);
// bitfield macros
#define _LATH_LATH0_POSN                                    0x0
#define _LATH_LATH0_POSITION                                0x0
#define _LATH_LATH0_SIZE                                    0x1
#define _LATH_LATH0_LENGTH                                  0x1
#define _LATH_LATH0_MASK                                    0x1
#define _LATH_LATH1_POSN                                    0x1
#define _LATH_LATH1_POSITION                                0x1
#define _LATH_LATH1_SIZE                                    0x1
#define _LATH_LATH1_LENGTH                                  0x1
#define _LATH_LATH1_MASK                                    0x2
#define _LATH_LATH2_POSN                                    0x2
#define _LATH_LATH2_POSITION                                0x2
#define _LATH_LATH2_SIZE                                    0x1
#define _LATH_LATH2_LENGTH                                  0x1
#define _LATH_LATH2_MASK                                    0x4
#define _LATH_LATH3_POSN                                    0x3
#define _LATH_LATH3_POSITION                                0x3
#define _LATH_LATH3_SIZE                                    0x1
#define _LATH_LATH3_LENGTH                                  0x1
#define _LATH_LATH3_MASK                                    0x8
#define _LATH_LATH4_POSN                                    0x4
#define _LATH_LATH4_POSITION                                0x4
#define _LATH_LATH4_SIZE                                    0x1
#define _LATH_LATH4_LENGTH                                  0x1
#define _LATH_LATH4_MASK                                    0x10
#define _LATH_LATH5_POSN                                    0x5
#define _LATH_LATH5_POSITION                                0x5
#define _LATH_LATH5_SIZE                                    0x1
#define _LATH_LATH5_LENGTH                                  0x1
#define _LATH_LATH5_MASK                                    0x20
#define _LATH_LATH6_POSN                                    0x6
#define _LATH_LATH6_POSITION                                0x6
#define _LATH_LATH6_SIZE                                    0x1
#define _LATH_LATH6_LENGTH                                  0x1
#define _LATH_LATH6_MASK                                    0x40
#define _LATH_LATH7_POSN                                    0x7
#define _LATH_LATH7_POSITION                                0x7
#define _LATH_LATH7_SIZE                                    0x1
#define _LATH_LATH7_LENGTH                                  0x1
#define _LATH_LATH7_MASK                                    0x80
#define _LATH_LH0_POSN                                      0x0
#define _LATH_LH0_POSITION                                  0x0
#define _LATH_LH0_SIZE                                      0x1
#define _LATH_LH0_LENGTH                                    0x1
#define _LATH_LH0_MASK                                      0x1
#define _LATH_LH1_POSN                                      0x1
#define _LATH_LH1_POSITION                                  0x1
#define _LATH_LH1_SIZE                                      0x1
#define _LATH_LH1_LENGTH                                    0x1
#define _LATH_LH1_MASK                                      0x2
#define _LATH_LH2_POSN                                      0x2
#define _LATH_LH2_POSITION                                  0x2
#define _LATH_LH2_SIZE                                      0x1
#define _LATH_LH2_LENGTH                                    0x1
#define _LATH_LH2_MASK                                      0x4
#define _LATH_LH3_POSN                                      0x3
#define _LATH_LH3_POSITION                                  0x3
#define _LATH_LH3_SIZE                                      0x1
#define _LATH_LH3_LENGTH                                    0x1
#define _LATH_LH3_MASK                                      0x8
#define _LATH_LH4_POSN                                      0x4
#define _LATH_LH4_POSITION                                  0x4
#define _LATH_LH4_SIZE                                      0x1
#define _LATH_LH4_LENGTH                                    0x1
#define _LATH_LH4_MASK                                      0x10
#define _LATH_LH5_POSN                                      0x5
#define _LATH_LH5_POSITION                                  0x5
#define _LATH_LH5_SIZE                                      0x1
#define _LATH_LH5_LENGTH                                    0x1
#define _LATH_LH5_MASK                                      0x20
#define _LATH_LH6_POSN                                      0x6
#define _LATH_LH6_POSITION                                  0x6
#define _LATH_LH6_SIZE                                      0x1
#define _LATH_LH6_LENGTH                                    0x1
#define _LATH_LH6_MASK                                      0x40
#define _LATH_LH7_POSN                                      0x7
#define _LATH_LH7_POSITION                                  0x7
#define _LATH_LH7_SIZE                                      0x1
#define _LATH_LH7_LENGTH                                    0x1
#define _LATH_LH7_MASK                                      0x80

// Register: LATJ
#define LATJ LATJ
extern volatile unsigned char           LATJ                __at(0xF91);
#ifndef _LIB_BUILD
asm("LATJ equ 0F91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATJ0                  :1;
        unsigned LATJ1                  :1;
        unsigned LATJ2                  :1;
        unsigned LATJ3                  :1;
        unsigned LATJ4                  :1;
        unsigned LATJ5                  :1;
        unsigned LATJ6                  :1;
        unsigned LATJ7                  :1;
    };
    struct {
        unsigned LJ0                    :1;
        unsigned LJ1                    :1;
        unsigned LJ2                    :1;
        unsigned LJ3                    :1;
        unsigned LJ4                    :1;
        unsigned LJ5                    :1;
        unsigned LJ6                    :1;
        unsigned LJ7                    :1;
    };
} LATJbits_t;
extern volatile LATJbits_t LATJbits __at(0xF91);
// bitfield macros
#define _LATJ_LATJ0_POSN                                    0x0
#define _LATJ_LATJ0_POSITION                                0x0
#define _LATJ_LATJ0_SIZE                                    0x1
#define _LATJ_LATJ0_LENGTH                                  0x1
#define _LATJ_LATJ0_MASK                                    0x1
#define _LATJ_LATJ1_POSN                                    0x1
#define _LATJ_LATJ1_POSITION                                0x1
#define _LATJ_LATJ1_SIZE                                    0x1
#define _LATJ_LATJ1_LENGTH                                  0x1
#define _LATJ_LATJ1_MASK                                    0x2
#define _LATJ_LATJ2_POSN                                    0x2
#define _LATJ_LATJ2_POSITION                                0x2
#define _LATJ_LATJ2_SIZE                                    0x1
#define _LATJ_LATJ2_LENGTH                                  0x1
#define _LATJ_LATJ2_MASK                                    0x4
#define _LATJ_LATJ3_POSN                                    0x3
#define _LATJ_LATJ3_POSITION                                0x3
#define _LATJ_LATJ3_SIZE                                    0x1
#define _LATJ_LATJ3_LENGTH                                  0x1
#define _LATJ_LATJ3_MASK                                    0x8
#define _LATJ_LATJ4_POSN                                    0x4
#define _LATJ_LATJ4_POSITION                                0x4
#define _LATJ_LATJ4_SIZE                                    0x1
#define _LATJ_LATJ4_LENGTH                                  0x1
#define _LATJ_LATJ4_MASK                                    0x10
#define _LATJ_LATJ5_POSN                                    0x5
#define _LATJ_LATJ5_POSITION                                0x5
#define _LATJ_LATJ5_SIZE                                    0x1
#define _LATJ_LATJ5_LENGTH                                  0x1
#define _LATJ_LATJ5_MASK                                    0x20
#define _LATJ_LATJ6_POSN                                    0x6
#define _LATJ_LATJ6_POSITION                                0x6
#define _LATJ_LATJ6_SIZE                                    0x1
#define _LATJ_LATJ6_LENGTH                                  0x1
#define _LATJ_LATJ6_MASK                                    0x40
#define _LATJ_LATJ7_POSN                                    0x7
#define _LATJ_LATJ7_POSITION                                0x7
#define _LATJ_LATJ7_SIZE                                    0x1
#define _LATJ_LATJ7_LENGTH                                  0x1
#define _LATJ_LATJ7_MASK                                    0x80
#define _LATJ_LJ0_POSN                                      0x0
#define _LATJ_LJ0_POSITION                                  0x0
#define _LATJ_LJ0_SIZE                                      0x1
#define _LATJ_LJ0_LENGTH                                    0x1
#define _LATJ_LJ0_MASK                                      0x1
#define _LATJ_LJ1_POSN                                      0x1
#define _LATJ_LJ1_POSITION                                  0x1
#define _LATJ_LJ1_SIZE                                      0x1
#define _LATJ_LJ1_LENGTH                                    0x1
#define _LATJ_LJ1_MASK                                      0x2
#define _LATJ_LJ2_POSN                                      0x2
#define _LATJ_LJ2_POSITION                                  0x2
#define _LATJ_LJ2_SIZE                                      0x1
#define _LATJ_LJ2_LENGTH                                    0x1
#define _LATJ_LJ2_MASK                                      0x4
#define _LATJ_LJ3_POSN                                      0x3
#define _LATJ_LJ3_POSITION                                  0x3
#define _LATJ_LJ3_SIZE                                      0x1
#define _LATJ_LJ3_LENGTH                                    0x1
#define _LATJ_LJ3_MASK                                      0x8
#define _LATJ_LJ4_POSN                                      0x4
#define _LATJ_LJ4_POSITION                                  0x4
#define _LATJ_LJ4_SIZE                                      0x1
#define _LATJ_LJ4_LENGTH                                    0x1
#define _LATJ_LJ4_MASK                                      0x10
#define _LATJ_LJ5_POSN                                      0x5
#define _LATJ_LJ5_POSITION                                  0x5
#define _LATJ_LJ5_SIZE                                      0x1
#define _LATJ_LJ5_LENGTH                                    0x1
#define _LATJ_LJ5_MASK                                      0x20
#define _LATJ_LJ6_POSN                                      0x6
#define _LATJ_LJ6_POSITION                                  0x6
#define _LATJ_LJ6_SIZE                                      0x1
#define _LATJ_LJ6_LENGTH                                    0x1
#define _LATJ_LJ6_MASK                                      0x40
#define _LATJ_LJ7_POSN                                      0x7
#define _LATJ_LJ7_POSITION                                  0x7
#define _LATJ_LJ7_SIZE                                      0x1
#define _LATJ_LJ7_LENGTH                                    0x1
#define _LATJ_LJ7_MASK                                      0x80

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0xF92);
#ifndef _LIB_BUILD
asm("TRISA equ 0F92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0xF92);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0xF93);
#ifndef _LIB_BUILD
asm("TRISB equ 0F93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0xF93);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0xF94);
#ifndef _LIB_BUILD
asm("TRISC equ 0F94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0xF94);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: TRISD
#define TRISD TRISD
extern volatile unsigned char           TRISD               __at(0xF95);
#ifndef _LIB_BUILD
asm("TRISD equ 0F95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISD0                 :1;
        unsigned TRISD1                 :1;
        unsigned TRISD2                 :1;
        unsigned TRISD3                 :1;
        unsigned TRISD4                 :1;
        unsigned TRISD5                 :1;
        unsigned TRISD6                 :1;
        unsigned TRISD7                 :1;
    };
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits __at(0xF95);
// bitfield macros
#define _TRISD_TRISD0_POSN                                  0x0
#define _TRISD_TRISD0_POSITION                              0x0
#define _TRISD_TRISD0_SIZE                                  0x1
#define _TRISD_TRISD0_LENGTH                                0x1
#define _TRISD_TRISD0_MASK                                  0x1
#define _TRISD_TRISD1_POSN                                  0x1
#define _TRISD_TRISD1_POSITION                              0x1
#define _TRISD_TRISD1_SIZE                                  0x1
#define _TRISD_TRISD1_LENGTH                                0x1
#define _TRISD_TRISD1_MASK                                  0x2
#define _TRISD_TRISD2_POSN                                  0x2
#define _TRISD_TRISD2_POSITION                              0x2
#define _TRISD_TRISD2_SIZE                                  0x1
#define _TRISD_TRISD2_LENGTH                                0x1
#define _TRISD_TRISD2_MASK                                  0x4
#define _TRISD_TRISD3_POSN                                  0x3
#define _TRISD_TRISD3_POSITION                              0x3
#define _TRISD_TRISD3_SIZE                                  0x1
#define _TRISD_TRISD3_LENGTH                                0x1
#define _TRISD_TRISD3_MASK                                  0x8
#define _TRISD_TRISD4_POSN                                  0x4
#define _TRISD_TRISD4_POSITION                              0x4
#define _TRISD_TRISD4_SIZE                                  0x1
#define _TRISD_TRISD4_LENGTH                                0x1
#define _TRISD_TRISD4_MASK                                  0x10
#define _TRISD_TRISD5_POSN                                  0x5
#define _TRISD_TRISD5_POSITION                              0x5
#define _TRISD_TRISD5_SIZE                                  0x1
#define _TRISD_TRISD5_LENGTH                                0x1
#define _TRISD_TRISD5_MASK                                  0x20
#define _TRISD_TRISD6_POSN                                  0x6
#define _TRISD_TRISD6_POSITION                              0x6
#define _TRISD_TRISD6_SIZE                                  0x1
#define _TRISD_TRISD6_LENGTH                                0x1
#define _TRISD_TRISD6_MASK                                  0x40
#define _TRISD_TRISD7_POSN                                  0x7
#define _TRISD_TRISD7_POSITION                              0x7
#define _TRISD_TRISD7_SIZE                                  0x1
#define _TRISD_TRISD7_LENGTH                                0x1
#define _TRISD_TRISD7_MASK                                  0x80

// Register: TRISE
#define TRISE TRISE
extern volatile unsigned char           TRISE               __at(0xF96);
#ifndef _LIB_BUILD
asm("TRISE equ 0F96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISE0                 :1;
        unsigned TRISE1                 :1;
        unsigned TRISE2                 :1;
        unsigned TRISE3                 :1;
        unsigned TRISE4                 :1;
        unsigned TRISE5                 :1;
        unsigned TRISE6                 :1;
        unsigned TRISE7                 :1;
    };
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits __at(0xF96);
// bitfield macros
#define _TRISE_TRISE0_POSN                                  0x0
#define _TRISE_TRISE0_POSITION                              0x0
#define _TRISE_TRISE0_SIZE                                  0x1
#define _TRISE_TRISE0_LENGTH                                0x1
#define _TRISE_TRISE0_MASK                                  0x1
#define _TRISE_TRISE1_POSN                                  0x1
#define _TRISE_TRISE1_POSITION                              0x1
#define _TRISE_TRISE1_SIZE                                  0x1
#define _TRISE_TRISE1_LENGTH                                0x1
#define _TRISE_TRISE1_MASK                                  0x2
#define _TRISE_TRISE2_POSN                                  0x2
#define _TRISE_TRISE2_POSITION                              0x2
#define _TRISE_TRISE2_SIZE                                  0x1
#define _TRISE_TRISE2_LENGTH                                0x1
#define _TRISE_TRISE2_MASK                                  0x4
#define _TRISE_TRISE3_POSN                                  0x3
#define _TRISE_TRISE3_POSITION                              0x3
#define _TRISE_TRISE3_SIZE                                  0x1
#define _TRISE_TRISE3_LENGTH                                0x1
#define _TRISE_TRISE3_MASK                                  0x8
#define _TRISE_TRISE4_POSN                                  0x4
#define _TRISE_TRISE4_POSITION                              0x4
#define _TRISE_TRISE4_SIZE                                  0x1
#define _TRISE_TRISE4_LENGTH                                0x1
#define _TRISE_TRISE4_MASK                                  0x10
#define _TRISE_TRISE5_POSN                                  0x5
#define _TRISE_TRISE5_POSITION                              0x5
#define _TRISE_TRISE5_SIZE                                  0x1
#define _TRISE_TRISE5_LENGTH                                0x1
#define _TRISE_TRISE5_MASK                                  0x20
#define _TRISE_TRISE6_POSN                                  0x6
#define _TRISE_TRISE6_POSITION                              0x6
#define _TRISE_TRISE6_SIZE                                  0x1
#define _TRISE_TRISE6_LENGTH                                0x1
#define _TRISE_TRISE6_MASK                                  0x40
#define _TRISE_TRISE7_POSN                                  0x7
#define _TRISE_TRISE7_POSITION                              0x7
#define _TRISE_TRISE7_SIZE                                  0x1
#define _TRISE_TRISE7_LENGTH                                0x1
#define _TRISE_TRISE7_MASK                                  0x80

// Register: TRISF
#define TRISF TRISF
extern volatile unsigned char           TRISF               __at(0xF97);
#ifndef _LIB_BUILD
asm("TRISF equ 0F97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned TRISF2                 :1;
        unsigned TRISF3                 :1;
        unsigned TRISF4                 :1;
        unsigned TRISF5                 :1;
        unsigned TRISF6                 :1;
        unsigned TRISF7                 :1;
    };
} TRISFbits_t;
extern volatile TRISFbits_t TRISFbits __at(0xF97);
// bitfield macros
#define _TRISF_TRISF2_POSN                                  0x2
#define _TRISF_TRISF2_POSITION                              0x2
#define _TRISF_TRISF2_SIZE                                  0x1
#define _TRISF_TRISF2_LENGTH                                0x1
#define _TRISF_TRISF2_MASK                                  0x4
#define _TRISF_TRISF3_POSN                                  0x3
#define _TRISF_TRISF3_POSITION                              0x3
#define _TRISF_TRISF3_SIZE                                  0x1
#define _TRISF_TRISF3_LENGTH                                0x1
#define _TRISF_TRISF3_MASK                                  0x8
#define _TRISF_TRISF4_POSN                                  0x4
#define _TRISF_TRISF4_POSITION                              0x4
#define _TRISF_TRISF4_SIZE                                  0x1
#define _TRISF_TRISF4_LENGTH                                0x1
#define _TRISF_TRISF4_MASK                                  0x10
#define _TRISF_TRISF5_POSN                                  0x5
#define _TRISF_TRISF5_POSITION                              0x5
#define _TRISF_TRISF5_SIZE                                  0x1
#define _TRISF_TRISF5_LENGTH                                0x1
#define _TRISF_TRISF5_MASK                                  0x20
#define _TRISF_TRISF6_POSN                                  0x6
#define _TRISF_TRISF6_POSITION                              0x6
#define _TRISF_TRISF6_SIZE                                  0x1
#define _TRISF_TRISF6_LENGTH                                0x1
#define _TRISF_TRISF6_MASK                                  0x40
#define _TRISF_TRISF7_POSN                                  0x7
#define _TRISF_TRISF7_POSITION                              0x7
#define _TRISF_TRISF7_SIZE                                  0x1
#define _TRISF_TRISF7_LENGTH                                0x1
#define _TRISF_TRISF7_MASK                                  0x80

// Register: TRISG
#define TRISG TRISG
extern volatile unsigned char           TRISG               __at(0xF98);
#ifndef _LIB_BUILD
asm("TRISG equ 0F98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISG0                 :1;
        unsigned TRISG1                 :1;
        unsigned TRISG2                 :1;
        unsigned TRISG3                 :1;
        unsigned TRISG4                 :1;
    };
} TRISGbits_t;
extern volatile TRISGbits_t TRISGbits __at(0xF98);
// bitfield macros
#define _TRISG_TRISG0_POSN                                  0x0
#define _TRISG_TRISG0_POSITION                              0x0
#define _TRISG_TRISG0_SIZE                                  0x1
#define _TRISG_TRISG0_LENGTH                                0x1
#define _TRISG_TRISG0_MASK                                  0x1
#define _TRISG_TRISG1_POSN                                  0x1
#define _TRISG_TRISG1_POSITION                              0x1
#define _TRISG_TRISG1_SIZE                                  0x1
#define _TRISG_TRISG1_LENGTH                                0x1
#define _TRISG_TRISG1_MASK                                  0x2
#define _TRISG_TRISG2_POSN                                  0x2
#define _TRISG_TRISG2_POSITION                              0x2
#define _TRISG_TRISG2_SIZE                                  0x1
#define _TRISG_TRISG2_LENGTH                                0x1
#define _TRISG_TRISG2_MASK                                  0x4
#define _TRISG_TRISG3_POSN                                  0x3
#define _TRISG_TRISG3_POSITION                              0x3
#define _TRISG_TRISG3_SIZE                                  0x1
#define _TRISG_TRISG3_LENGTH                                0x1
#define _TRISG_TRISG3_MASK                                  0x8
#define _TRISG_TRISG4_POSN                                  0x4
#define _TRISG_TRISG4_POSITION                              0x4
#define _TRISG_TRISG4_SIZE                                  0x1
#define _TRISG_TRISG4_LENGTH                                0x1
#define _TRISG_TRISG4_MASK                                  0x10

// Register: TRISH
#define TRISH TRISH
extern volatile unsigned char           TRISH               __at(0xF99);
#ifndef _LIB_BUILD
asm("TRISH equ 0F99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISH0                 :1;
        unsigned TRISH1                 :1;
        unsigned TRISH2                 :1;
        unsigned TRISH3                 :1;
        unsigned TRISH4                 :1;
        unsigned TRISH5                 :1;
        unsigned TRISH6                 :1;
        unsigned TRISH7                 :1;
    };
} TRISHbits_t;
extern volatile TRISHbits_t TRISHbits __at(0xF99);
// bitfield macros
#define _TRISH_TRISH0_POSN                                  0x0
#define _TRISH_TRISH0_POSITION                              0x0
#define _TRISH_TRISH0_SIZE                                  0x1
#define _TRISH_TRISH0_LENGTH                                0x1
#define _TRISH_TRISH0_MASK                                  0x1
#define _TRISH_TRISH1_POSN                                  0x1
#define _TRISH_TRISH1_POSITION                              0x1
#define _TRISH_TRISH1_SIZE                                  0x1
#define _TRISH_TRISH1_LENGTH                                0x1
#define _TRISH_TRISH1_MASK                                  0x2
#define _TRISH_TRISH2_POSN                                  0x2
#define _TRISH_TRISH2_POSITION                              0x2
#define _TRISH_TRISH2_SIZE                                  0x1
#define _TRISH_TRISH2_LENGTH                                0x1
#define _TRISH_TRISH2_MASK                                  0x4
#define _TRISH_TRISH3_POSN                                  0x3
#define _TRISH_TRISH3_POSITION                              0x3
#define _TRISH_TRISH3_SIZE                                  0x1
#define _TRISH_TRISH3_LENGTH                                0x1
#define _TRISH_TRISH3_MASK                                  0x8
#define _TRISH_TRISH4_POSN                                  0x4
#define _TRISH_TRISH4_POSITION                              0x4
#define _TRISH_TRISH4_SIZE                                  0x1
#define _TRISH_TRISH4_LENGTH                                0x1
#define _TRISH_TRISH4_MASK                                  0x10
#define _TRISH_TRISH5_POSN                                  0x5
#define _TRISH_TRISH5_POSITION                              0x5
#define _TRISH_TRISH5_SIZE                                  0x1
#define _TRISH_TRISH5_LENGTH                                0x1
#define _TRISH_TRISH5_MASK                                  0x20
#define _TRISH_TRISH6_POSN                                  0x6
#define _TRISH_TRISH6_POSITION                              0x6
#define _TRISH_TRISH6_SIZE                                  0x1
#define _TRISH_TRISH6_LENGTH                                0x1
#define _TRISH_TRISH6_MASK                                  0x40
#define _TRISH_TRISH7_POSN                                  0x7
#define _TRISH_TRISH7_POSITION                              0x7
#define _TRISH_TRISH7_SIZE                                  0x1
#define _TRISH_TRISH7_LENGTH                                0x1
#define _TRISH_TRISH7_MASK                                  0x80

// Register: TRISJ
#define TRISJ TRISJ
extern volatile unsigned char           TRISJ               __at(0xF9A);
#ifndef _LIB_BUILD
asm("TRISJ equ 0F9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISJ0                 :1;
        unsigned TRISJ1                 :1;
        unsigned TRISJ2                 :1;
        unsigned TRISJ3                 :1;
        unsigned TRISJ4                 :1;
        unsigned TRISJ5                 :1;
        unsigned TRISJ6                 :1;
        unsigned TRISJ7                 :1;
    };
} TRISJbits_t;
extern volatile TRISJbits_t TRISJbits __at(0xF9A);
// bitfield macros
#define _TRISJ_TRISJ0_POSN                                  0x0
#define _TRISJ_TRISJ0_POSITION                              0x0
#define _TRISJ_TRISJ0_SIZE                                  0x1
#define _TRISJ_TRISJ0_LENGTH                                0x1
#define _TRISJ_TRISJ0_MASK                                  0x1
#define _TRISJ_TRISJ1_POSN                                  0x1
#define _TRISJ_TRISJ1_POSITION                              0x1
#define _TRISJ_TRISJ1_SIZE                                  0x1
#define _TRISJ_TRISJ1_LENGTH                                0x1
#define _TRISJ_TRISJ1_MASK                                  0x2
#define _TRISJ_TRISJ2_POSN                                  0x2
#define _TRISJ_TRISJ2_POSITION                              0x2
#define _TRISJ_TRISJ2_SIZE                                  0x1
#define _TRISJ_TRISJ2_LENGTH                                0x1
#define _TRISJ_TRISJ2_MASK                                  0x4
#define _TRISJ_TRISJ3_POSN                                  0x3
#define _TRISJ_TRISJ3_POSITION                              0x3
#define _TRISJ_TRISJ3_SIZE                                  0x1
#define _TRISJ_TRISJ3_LENGTH                                0x1
#define _TRISJ_TRISJ3_MASK                                  0x8
#define _TRISJ_TRISJ4_POSN                                  0x4
#define _TRISJ_TRISJ4_POSITION                              0x4
#define _TRISJ_TRISJ4_SIZE                                  0x1
#define _TRISJ_TRISJ4_LENGTH                                0x1
#define _TRISJ_TRISJ4_MASK                                  0x10
#define _TRISJ_TRISJ5_POSN                                  0x5
#define _TRISJ_TRISJ5_POSITION                              0x5
#define _TRISJ_TRISJ5_SIZE                                  0x1
#define _TRISJ_TRISJ5_LENGTH                                0x1
#define _TRISJ_TRISJ5_MASK                                  0x20
#define _TRISJ_TRISJ6_POSN                                  0x6
#define _TRISJ_TRISJ6_POSITION                              0x6
#define _TRISJ_TRISJ6_SIZE                                  0x1
#define _TRISJ_TRISJ6_LENGTH                                0x1
#define _TRISJ_TRISJ6_MASK                                  0x40
#define _TRISJ_TRISJ7_POSN                                  0x7
#define _TRISJ_TRISJ7_POSITION                              0x7
#define _TRISJ_TRISJ7_SIZE                                  0x1
#define _TRISJ_TRISJ7_LENGTH                                0x1
#define _TRISJ_TRISJ7_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0xF9B);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0F9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0xF9B);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: PSTR1CON
#define PSTR1CON PSTR1CON
extern volatile unsigned char           PSTR1CON            __at(0xF9C);
#ifndef _LIB_BUILD
asm("PSTR1CON equ 0F9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned STRSYNC                :1;
        unsigned                        :1;
        unsigned CMPL                   :2;
    };
    struct {
        unsigned                        :6;
        unsigned CMPL0                  :1;
        unsigned CMPL1                  :1;
    };
    struct {
        unsigned STRA1                  :1;
        unsigned STRB1                  :1;
        unsigned STRC1                  :1;
        unsigned STRD1                  :1;
        unsigned STRSYNC1               :1;
        unsigned                        :1;
        unsigned CMPL01                 :1;
        unsigned CMPL11                 :1;
    };
    struct {
        unsigned P1DC02                 :1;
        unsigned P1DC12                 :1;
        unsigned P1DC22                 :1;
        unsigned P1DC32                 :1;
        unsigned P1DC42                 :1;
        unsigned                        :1;
        unsigned P1DC62                 :1;
    };
    struct {
        unsigned P1DC0CON               :1;
        unsigned P1DC1CON               :1;
        unsigned P1DC2CON               :1;
        unsigned P1DC3CON               :1;
        unsigned P1DC4CON               :1;
        unsigned                        :1;
        unsigned P1DC6CON               :1;
    };
} PSTR1CONbits_t;
extern volatile PSTR1CONbits_t PSTR1CONbits __at(0xF9C);
// bitfield macros
#define _PSTR1CON_STRA_POSN                                 0x0
#define _PSTR1CON_STRA_POSITION                             0x0
#define _PSTR1CON_STRA_SIZE                                 0x1
#define _PSTR1CON_STRA_LENGTH                               0x1
#define _PSTR1CON_STRA_MASK                                 0x1
#define _PSTR1CON_STRB_POSN                                 0x1
#define _PSTR1CON_STRB_POSITION                             0x1
#define _PSTR1CON_STRB_SIZE                                 0x1
#define _PSTR1CON_STRB_LENGTH                               0x1
#define _PSTR1CON_STRB_MASK                                 0x2
#define _PSTR1CON_STRC_POSN                                 0x2
#define _PSTR1CON_STRC_POSITION                             0x2
#define _PSTR1CON_STRC_SIZE                                 0x1
#define _PSTR1CON_STRC_LENGTH                               0x1
#define _PSTR1CON_STRC_MASK                                 0x4
#define _PSTR1CON_STRD_POSN                                 0x3
#define _PSTR1CON_STRD_POSITION                             0x3
#define _PSTR1CON_STRD_SIZE                                 0x1
#define _PSTR1CON_STRD_LENGTH                               0x1
#define _PSTR1CON_STRD_MASK                                 0x8
#define _PSTR1CON_STRSYNC_POSN                              0x4
#define _PSTR1CON_STRSYNC_POSITION                          0x4
#define _PSTR1CON_STRSYNC_SIZE                              0x1
#define _PSTR1CON_STRSYNC_LENGTH                            0x1
#define _PSTR1CON_STRSYNC_MASK                              0x10
#define _PSTR1CON_CMPL_POSN                                 0x6
#define _PSTR1CON_CMPL_POSITION                             0x6
#define _PSTR1CON_CMPL_SIZE                                 0x2
#define _PSTR1CON_CMPL_LENGTH                               0x2
#define _PSTR1CON_CMPL_MASK                                 0xC0
#define _PSTR1CON_CMPL0_POSN                                0x6
#define _PSTR1CON_CMPL0_POSITION                            0x6
#define _PSTR1CON_CMPL0_SIZE                                0x1
#define _PSTR1CON_CMPL0_LENGTH                              0x1
#define _PSTR1CON_CMPL0_MASK                                0x40
#define _PSTR1CON_CMPL1_POSN                                0x7
#define _PSTR1CON_CMPL1_POSITION                            0x7
#define _PSTR1CON_CMPL1_SIZE                                0x1
#define _PSTR1CON_CMPL1_LENGTH                              0x1
#define _PSTR1CON_CMPL1_MASK                                0x80
#define _PSTR1CON_STRA1_POSN                                0x0
#define _PSTR1CON_STRA1_POSITION                            0x0
#define _PSTR1CON_STRA1_SIZE                                0x1
#define _PSTR1CON_STRA1_LENGTH                              0x1
#define _PSTR1CON_STRA1_MASK                                0x1
#define _PSTR1CON_STRB1_POSN                                0x1
#define _PSTR1CON_STRB1_POSITION                            0x1
#define _PSTR1CON_STRB1_SIZE                                0x1
#define _PSTR1CON_STRB1_LENGTH                              0x1
#define _PSTR1CON_STRB1_MASK                                0x2
#define _PSTR1CON_STRC1_POSN                                0x2
#define _PSTR1CON_STRC1_POSITION                            0x2
#define _PSTR1CON_STRC1_SIZE                                0x1
#define _PSTR1CON_STRC1_LENGTH                              0x1
#define _PSTR1CON_STRC1_MASK                                0x4
#define _PSTR1CON_STRD1_POSN                                0x3
#define _PSTR1CON_STRD1_POSITION                            0x3
#define _PSTR1CON_STRD1_SIZE                                0x1
#define _PSTR1CON_STRD1_LENGTH                              0x1
#define _PSTR1CON_STRD1_MASK                                0x8
#define _PSTR1CON_STRSYNC1_POSN                             0x4
#define _PSTR1CON_STRSYNC1_POSITION                         0x4
#define _PSTR1CON_STRSYNC1_SIZE                             0x1
#define _PSTR1CON_STRSYNC1_LENGTH                           0x1
#define _PSTR1CON_STRSYNC1_MASK                             0x10
#define _PSTR1CON_CMPL01_POSN                               0x6
#define _PSTR1CON_CMPL01_POSITION                           0x6
#define _PSTR1CON_CMPL01_SIZE                               0x1
#define _PSTR1CON_CMPL01_LENGTH                             0x1
#define _PSTR1CON_CMPL01_MASK                               0x40
#define _PSTR1CON_CMPL11_POSN                               0x7
#define _PSTR1CON_CMPL11_POSITION                           0x7
#define _PSTR1CON_CMPL11_SIZE                               0x1
#define _PSTR1CON_CMPL11_LENGTH                             0x1
#define _PSTR1CON_CMPL11_MASK                               0x80
#define _PSTR1CON_P1DC02_POSN                               0x0
#define _PSTR1CON_P1DC02_POSITION                           0x0
#define _PSTR1CON_P1DC02_SIZE                               0x1
#define _PSTR1CON_P1DC02_LENGTH                             0x1
#define _PSTR1CON_P1DC02_MASK                               0x1
#define _PSTR1CON_P1DC12_POSN                               0x1
#define _PSTR1CON_P1DC12_POSITION                           0x1
#define _PSTR1CON_P1DC12_SIZE                               0x1
#define _PSTR1CON_P1DC12_LENGTH                             0x1
#define _PSTR1CON_P1DC12_MASK                               0x2
#define _PSTR1CON_P1DC22_POSN                               0x2
#define _PSTR1CON_P1DC22_POSITION                           0x2
#define _PSTR1CON_P1DC22_SIZE                               0x1
#define _PSTR1CON_P1DC22_LENGTH                             0x1
#define _PSTR1CON_P1DC22_MASK                               0x4
#define _PSTR1CON_P1DC32_POSN                               0x3
#define _PSTR1CON_P1DC32_POSITION                           0x3
#define _PSTR1CON_P1DC32_SIZE                               0x1
#define _PSTR1CON_P1DC32_LENGTH                             0x1
#define _PSTR1CON_P1DC32_MASK                               0x8
#define _PSTR1CON_P1DC42_POSN                               0x4
#define _PSTR1CON_P1DC42_POSITION                           0x4
#define _PSTR1CON_P1DC42_SIZE                               0x1
#define _PSTR1CON_P1DC42_LENGTH                             0x1
#define _PSTR1CON_P1DC42_MASK                               0x10
#define _PSTR1CON_P1DC62_POSN                               0x6
#define _PSTR1CON_P1DC62_POSITION                           0x6
#define _PSTR1CON_P1DC62_SIZE                               0x1
#define _PSTR1CON_P1DC62_LENGTH                             0x1
#define _PSTR1CON_P1DC62_MASK                               0x40
#define _PSTR1CON_P1DC0CON_POSN                             0x0
#define _PSTR1CON_P1DC0CON_POSITION                         0x0
#define _PSTR1CON_P1DC0CON_SIZE                             0x1
#define _PSTR1CON_P1DC0CON_LENGTH                           0x1
#define _PSTR1CON_P1DC0CON_MASK                             0x1
#define _PSTR1CON_P1DC1CON_POSN                             0x1
#define _PSTR1CON_P1DC1CON_POSITION                         0x1
#define _PSTR1CON_P1DC1CON_SIZE                             0x1
#define _PSTR1CON_P1DC1CON_LENGTH                           0x1
#define _PSTR1CON_P1DC1CON_MASK                             0x2
#define _PSTR1CON_P1DC2CON_POSN                             0x2
#define _PSTR1CON_P1DC2CON_POSITION                         0x2
#define _PSTR1CON_P1DC2CON_SIZE                             0x1
#define _PSTR1CON_P1DC2CON_LENGTH                           0x1
#define _PSTR1CON_P1DC2CON_MASK                             0x4
#define _PSTR1CON_P1DC3CON_POSN                             0x3
#define _PSTR1CON_P1DC3CON_POSITION                         0x3
#define _PSTR1CON_P1DC3CON_SIZE                             0x1
#define _PSTR1CON_P1DC3CON_LENGTH                           0x1
#define _PSTR1CON_P1DC3CON_MASK                             0x8
#define _PSTR1CON_P1DC4CON_POSN                             0x4
#define _PSTR1CON_P1DC4CON_POSITION                         0x4
#define _PSTR1CON_P1DC4CON_SIZE                             0x1
#define _PSTR1CON_P1DC4CON_LENGTH                           0x1
#define _PSTR1CON_P1DC4CON_MASK                             0x10
#define _PSTR1CON_P1DC6CON_POSN                             0x6
#define _PSTR1CON_P1DC6CON_POSITION                         0x6
#define _PSTR1CON_P1DC6CON_SIZE                             0x1
#define _PSTR1CON_P1DC6CON_LENGTH                           0x1
#define _PSTR1CON_P1DC6CON_MASK                             0x40

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0xF9D);
#ifndef _LIB_BUILD
asm("PIE1 equ 0F9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned TMR1GIE                :1;
        unsigned SSP1IE                 :1;
        unsigned TX1IE                  :1;
        unsigned RC1IE                  :1;
        unsigned ADIE                   :1;
        unsigned PSPIE                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXIE                   :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0xF9D);
// bitfield macros
#define _PIE1_TMR1IE_POSN                                   0x0
#define _PIE1_TMR1IE_POSITION                               0x0
#define _PIE1_TMR1IE_SIZE                                   0x1
#define _PIE1_TMR1IE_LENGTH                                 0x1
#define _PIE1_TMR1IE_MASK                                   0x1
#define _PIE1_TMR2IE_POSN                                   0x1
#define _PIE1_TMR2IE_POSITION                               0x1
#define _PIE1_TMR2IE_SIZE                                   0x1
#define _PIE1_TMR2IE_LENGTH                                 0x1
#define _PIE1_TMR2IE_MASK                                   0x2
#define _PIE1_TMR1GIE_POSN                                  0x2
#define _PIE1_TMR1GIE_POSITION                              0x2
#define _PIE1_TMR1GIE_SIZE                                  0x1
#define _PIE1_TMR1GIE_LENGTH                                0x1
#define _PIE1_TMR1GIE_MASK                                  0x4
#define _PIE1_SSP1IE_POSN                                   0x3
#define _PIE1_SSP1IE_POSITION                               0x3
#define _PIE1_SSP1IE_SIZE                                   0x1
#define _PIE1_SSP1IE_LENGTH                                 0x1
#define _PIE1_SSP1IE_MASK                                   0x8
#define _PIE1_TX1IE_POSN                                    0x4
#define _PIE1_TX1IE_POSITION                                0x4
#define _PIE1_TX1IE_SIZE                                    0x1
#define _PIE1_TX1IE_LENGTH                                  0x1
#define _PIE1_TX1IE_MASK                                    0x10
#define _PIE1_RC1IE_POSN                                    0x5
#define _PIE1_RC1IE_POSITION                                0x5
#define _PIE1_RC1IE_SIZE                                    0x1
#define _PIE1_RC1IE_LENGTH                                  0x1
#define _PIE1_RC1IE_MASK                                    0x20
#define _PIE1_ADIE_POSN                                     0x6
#define _PIE1_ADIE_POSITION                                 0x6
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x40
#define _PIE1_PSPIE_POSN                                    0x7
#define _PIE1_PSPIE_POSITION                                0x7
#define _PIE1_PSPIE_SIZE                                    0x1
#define _PIE1_PSPIE_LENGTH                                  0x1
#define _PIE1_PSPIE_MASK                                    0x80
#define _PIE1_TXIE_POSN                                     0x4
#define _PIE1_TXIE_POSITION                                 0x4
#define _PIE1_TXIE_SIZE                                     0x1
#define _PIE1_TXIE_LENGTH                                   0x1
#define _PIE1_TXIE_MASK                                     0x10

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0xF9E);
#ifndef _LIB_BUILD
asm("PIR1 equ 0F9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned TMR1GIF                :1;
        unsigned SSP1IF                 :1;
        unsigned TX1IF                  :1;
        unsigned RC1IF                  :1;
        unsigned ADIF                   :1;
        unsigned PSPIF                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXIF                   :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0xF9E);
// bitfield macros
#define _PIR1_TMR1IF_POSN                                   0x0
#define _PIR1_TMR1IF_POSITION                               0x0
#define _PIR1_TMR1IF_SIZE                                   0x1
#define _PIR1_TMR1IF_LENGTH                                 0x1
#define _PIR1_TMR1IF_MASK                                   0x1
#define _PIR1_TMR2IF_POSN                                   0x1
#define _PIR1_TMR2IF_POSITION                               0x1
#define _PIR1_TMR2IF_SIZE                                   0x1
#define _PIR1_TMR2IF_LENGTH                                 0x1
#define _PIR1_TMR2IF_MASK                                   0x2
#define _PIR1_TMR1GIF_POSN                                  0x2
#define _PIR1_TMR1GIF_POSITION                              0x2
#define _PIR1_TMR1GIF_SIZE                                  0x1
#define _PIR1_TMR1GIF_LENGTH                                0x1
#define _PIR1_TMR1GIF_MASK                                  0x4
#define _PIR1_SSP1IF_POSN                                   0x3
#define _PIR1_SSP1IF_POSITION                               0x3
#define _PIR1_SSP1IF_SIZE                                   0x1
#define _PIR1_SSP1IF_LENGTH                                 0x1
#define _PIR1_SSP1IF_MASK                                   0x8
#define _PIR1_TX1IF_POSN                                    0x4
#define _PIR1_TX1IF_POSITION                                0x4
#define _PIR1_TX1IF_SIZE                                    0x1
#define _PIR1_TX1IF_LENGTH                                  0x1
#define _PIR1_TX1IF_MASK                                    0x10
#define _PIR1_RC1IF_POSN                                    0x5
#define _PIR1_RC1IF_POSITION                                0x5
#define _PIR1_RC1IF_SIZE                                    0x1
#define _PIR1_RC1IF_LENGTH                                  0x1
#define _PIR1_RC1IF_MASK                                    0x20
#define _PIR1_ADIF_POSN                                     0x6
#define _PIR1_ADIF_POSITION                                 0x6
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x40
#define _PIR1_PSPIF_POSN                                    0x7
#define _PIR1_PSPIF_POSITION                                0x7
#define _PIR1_PSPIF_SIZE                                    0x1
#define _PIR1_PSPIF_LENGTH                                  0x1
#define _PIR1_PSPIF_MASK                                    0x80
#define _PIR1_TXIF_POSN                                     0x4
#define _PIR1_TXIF_POSITION                                 0x4
#define _PIR1_TXIF_SIZE                                     0x1
#define _PIR1_TXIF_LENGTH                                   0x1
#define _PIR1_TXIF_MASK                                     0x10

// Register: IPR1
#define IPR1 IPR1
extern volatile unsigned char           IPR1                __at(0xF9F);
#ifndef _LIB_BUILD
asm("IPR1 equ 0F9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IP                 :1;
        unsigned TMR2IP                 :1;
        unsigned TMR1GIP                :1;
        unsigned SSP1IP                 :1;
        unsigned TX1IP                  :1;
        unsigned RC1IP                  :1;
        unsigned ADIP                   :1;
        unsigned PSPIP                  :1;
    };
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits __at(0xF9F);
// bitfield macros
#define _IPR1_TMR1IP_POSN                                   0x0
#define _IPR1_TMR1IP_POSITION                               0x0
#define _IPR1_TMR1IP_SIZE                                   0x1
#define _IPR1_TMR1IP_LENGTH                                 0x1
#define _IPR1_TMR1IP_MASK                                   0x1
#define _IPR1_TMR2IP_POSN                                   0x1
#define _IPR1_TMR2IP_POSITION                               0x1
#define _IPR1_TMR2IP_SIZE                                   0x1
#define _IPR1_TMR2IP_LENGTH                                 0x1
#define _IPR1_TMR2IP_MASK                                   0x2
#define _IPR1_TMR1GIP_POSN                                  0x2
#define _IPR1_TMR1GIP_POSITION                              0x2
#define _IPR1_TMR1GIP_SIZE                                  0x1
#define _IPR1_TMR1GIP_LENGTH                                0x1
#define _IPR1_TMR1GIP_MASK                                  0x4
#define _IPR1_SSP1IP_POSN                                   0x3
#define _IPR1_SSP1IP_POSITION                               0x3
#define _IPR1_SSP1IP_SIZE                                   0x1
#define _IPR1_SSP1IP_LENGTH                                 0x1
#define _IPR1_SSP1IP_MASK                                   0x8
#define _IPR1_TX1IP_POSN                                    0x4
#define _IPR1_TX1IP_POSITION                                0x4
#define _IPR1_TX1IP_SIZE                                    0x1
#define _IPR1_TX1IP_LENGTH                                  0x1
#define _IPR1_TX1IP_MASK                                    0x10
#define _IPR1_RC1IP_POSN                                    0x5
#define _IPR1_RC1IP_POSITION                                0x5
#define _IPR1_RC1IP_SIZE                                    0x1
#define _IPR1_RC1IP_LENGTH                                  0x1
#define _IPR1_RC1IP_MASK                                    0x20
#define _IPR1_ADIP_POSN                                     0x6
#define _IPR1_ADIP_POSITION                                 0x6
#define _IPR1_ADIP_SIZE                                     0x1
#define _IPR1_ADIP_LENGTH                                   0x1
#define _IPR1_ADIP_MASK                                     0x40
#define _IPR1_PSPIP_POSN                                    0x7
#define _IPR1_PSPIP_POSITION                                0x7
#define _IPR1_PSPIP_SIZE                                    0x1
#define _IPR1_PSPIP_LENGTH                                  0x1
#define _IPR1_PSPIP_MASK                                    0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0xFA0);
#ifndef _LIB_BUILD
asm("PIE2 equ 0FA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3GIE                :1;
        unsigned TMR3IE                 :1;
        unsigned HLVDIE                 :1;
        unsigned BCL1IE                 :1;
        unsigned USBIE                  :1;
        unsigned BCL2IE                 :1;
        unsigned SSP2IE                 :1;
        unsigned OSCFIE                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned CMIE                   :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0xFA0);
// bitfield macros
#define _PIE2_TMR3GIE_POSN                                  0x0
#define _PIE2_TMR3GIE_POSITION                              0x0
#define _PIE2_TMR3GIE_SIZE                                  0x1
#define _PIE2_TMR3GIE_LENGTH                                0x1
#define _PIE2_TMR3GIE_MASK                                  0x1
#define _PIE2_TMR3IE_POSN                                   0x1
#define _PIE2_TMR3IE_POSITION                               0x1
#define _PIE2_TMR3IE_SIZE                                   0x1
#define _PIE2_TMR3IE_LENGTH                                 0x1
#define _PIE2_TMR3IE_MASK                                   0x2
#define _PIE2_HLVDIE_POSN                                   0x2
#define _PIE2_HLVDIE_POSITION                               0x2
#define _PIE2_HLVDIE_SIZE                                   0x1
#define _PIE2_HLVDIE_LENGTH                                 0x1
#define _PIE2_HLVDIE_MASK                                   0x4
#define _PIE2_BCL1IE_POSN                                   0x3
#define _PIE2_BCL1IE_POSITION                               0x3
#define _PIE2_BCL1IE_SIZE                                   0x1
#define _PIE2_BCL1IE_LENGTH                                 0x1
#define _PIE2_BCL1IE_MASK                                   0x8
#define _PIE2_USBIE_POSN                                    0x4
#define _PIE2_USBIE_POSITION                                0x4
#define _PIE2_USBIE_SIZE                                    0x1
#define _PIE2_USBIE_LENGTH                                  0x1
#define _PIE2_USBIE_MASK                                    0x10
#define _PIE2_BCL2IE_POSN                                   0x5
#define _PIE2_BCL2IE_POSITION                               0x5
#define _PIE2_BCL2IE_SIZE                                   0x1
#define _PIE2_BCL2IE_LENGTH                                 0x1
#define _PIE2_BCL2IE_MASK                                   0x20
#define _PIE2_SSP2IE_POSN                                   0x6
#define _PIE2_SSP2IE_POSITION                               0x6
#define _PIE2_SSP2IE_SIZE                                   0x1
#define _PIE2_SSP2IE_LENGTH                                 0x1
#define _PIE2_SSP2IE_MASK                                   0x40
#define _PIE2_OSCFIE_POSN                                   0x7
#define _PIE2_OSCFIE_POSITION                               0x7
#define _PIE2_OSCFIE_SIZE                                   0x1
#define _PIE2_OSCFIE_LENGTH                                 0x1
#define _PIE2_OSCFIE_MASK                                   0x80
#define _PIE2_CMIE_POSN                                     0x6
#define _PIE2_CMIE_POSITION                                 0x6
#define _PIE2_CMIE_SIZE                                     0x1
#define _PIE2_CMIE_LENGTH                                   0x1
#define _PIE2_CMIE_MASK                                     0x40

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0xFA1);
#ifndef _LIB_BUILD
asm("PIR2 equ 0FA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3GIF                :1;
        unsigned TMR3IF                 :1;
        unsigned HLVDIF                 :1;
        unsigned BCL1IF                 :1;
        unsigned USBIF                  :1;
        unsigned BCL2IF                 :1;
        unsigned SSP2IF                 :1;
        unsigned OSCFIF                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned LVDIF                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned CMIF                   :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0xFA1);
// bitfield macros
#define _PIR2_TMR3GIF_POSN                                  0x0
#define _PIR2_TMR3GIF_POSITION                              0x0
#define _PIR2_TMR3GIF_SIZE                                  0x1
#define _PIR2_TMR3GIF_LENGTH                                0x1
#define _PIR2_TMR3GIF_MASK                                  0x1
#define _PIR2_TMR3IF_POSN                                   0x1
#define _PIR2_TMR3IF_POSITION                               0x1
#define _PIR2_TMR3IF_SIZE                                   0x1
#define _PIR2_TMR3IF_LENGTH                                 0x1
#define _PIR2_TMR3IF_MASK                                   0x2
#define _PIR2_HLVDIF_POSN                                   0x2
#define _PIR2_HLVDIF_POSITION                               0x2
#define _PIR2_HLVDIF_SIZE                                   0x1
#define _PIR2_HLVDIF_LENGTH                                 0x1
#define _PIR2_HLVDIF_MASK                                   0x4
#define _PIR2_BCL1IF_POSN                                   0x3
#define _PIR2_BCL1IF_POSITION                               0x3
#define _PIR2_BCL1IF_SIZE                                   0x1
#define _PIR2_BCL1IF_LENGTH                                 0x1
#define _PIR2_BCL1IF_MASK                                   0x8
#define _PIR2_USBIF_POSN                                    0x4
#define _PIR2_USBIF_POSITION                                0x4
#define _PIR2_USBIF_SIZE                                    0x1
#define _PIR2_USBIF_LENGTH                                  0x1
#define _PIR2_USBIF_MASK                                    0x10
#define _PIR2_BCL2IF_POSN                                   0x5
#define _PIR2_BCL2IF_POSITION                               0x5
#define _PIR2_BCL2IF_SIZE                                   0x1
#define _PIR2_BCL2IF_LENGTH                                 0x1
#define _PIR2_BCL2IF_MASK                                   0x20
#define _PIR2_SSP2IF_POSN                                   0x6
#define _PIR2_SSP2IF_POSITION                               0x6
#define _PIR2_SSP2IF_SIZE                                   0x1
#define _PIR2_SSP2IF_LENGTH                                 0x1
#define _PIR2_SSP2IF_MASK                                   0x40
#define _PIR2_OSCFIF_POSN                                   0x7
#define _PIR2_OSCFIF_POSITION                               0x7
#define _PIR2_OSCFIF_SIZE                                   0x1
#define _PIR2_OSCFIF_LENGTH                                 0x1
#define _PIR2_OSCFIF_MASK                                   0x80
#define _PIR2_LVDIF_POSN                                    0x2
#define _PIR2_LVDIF_POSITION                                0x2
#define _PIR2_LVDIF_SIZE                                    0x1
#define _PIR2_LVDIF_LENGTH                                  0x1
#define _PIR2_LVDIF_MASK                                    0x4
#define _PIR2_CMIF_POSN                                     0x6
#define _PIR2_CMIF_POSITION                                 0x6
#define _PIR2_CMIF_SIZE                                     0x1
#define _PIR2_CMIF_LENGTH                                   0x1
#define _PIR2_CMIF_MASK                                     0x40

// Register: IPR2
#define IPR2 IPR2
extern volatile unsigned char           IPR2                __at(0xFA2);
#ifndef _LIB_BUILD
asm("IPR2 equ 0FA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3GIP                :1;
        unsigned TMR3IP                 :1;
        unsigned HLVDIP                 :1;
        unsigned BCL1IP                 :1;
        unsigned USBIP                  :1;
        unsigned BCL2IP                 :1;
        unsigned SSP2IP                 :1;
        unsigned OSCFIP                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned CMIP                   :1;
    };
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits __at(0xFA2);
// bitfield macros
#define _IPR2_TMR3GIP_POSN                                  0x0
#define _IPR2_TMR3GIP_POSITION                              0x0
#define _IPR2_TMR3GIP_SIZE                                  0x1
#define _IPR2_TMR3GIP_LENGTH                                0x1
#define _IPR2_TMR3GIP_MASK                                  0x1
#define _IPR2_TMR3IP_POSN                                   0x1
#define _IPR2_TMR3IP_POSITION                               0x1
#define _IPR2_TMR3IP_SIZE                                   0x1
#define _IPR2_TMR3IP_LENGTH                                 0x1
#define _IPR2_TMR3IP_MASK                                   0x2
#define _IPR2_HLVDIP_POSN                                   0x2
#define _IPR2_HLVDIP_POSITION                               0x2
#define _IPR2_HLVDIP_SIZE                                   0x1
#define _IPR2_HLVDIP_LENGTH                                 0x1
#define _IPR2_HLVDIP_MASK                                   0x4
#define _IPR2_BCL1IP_POSN                                   0x3
#define _IPR2_BCL1IP_POSITION                               0x3
#define _IPR2_BCL1IP_SIZE                                   0x1
#define _IPR2_BCL1IP_LENGTH                                 0x1
#define _IPR2_BCL1IP_MASK                                   0x8
#define _IPR2_USBIP_POSN                                    0x4
#define _IPR2_USBIP_POSITION                                0x4
#define _IPR2_USBIP_SIZE                                    0x1
#define _IPR2_USBIP_LENGTH                                  0x1
#define _IPR2_USBIP_MASK                                    0x10
#define _IPR2_BCL2IP_POSN                                   0x5
#define _IPR2_BCL2IP_POSITION                               0x5
#define _IPR2_BCL2IP_SIZE                                   0x1
#define _IPR2_BCL2IP_LENGTH                                 0x1
#define _IPR2_BCL2IP_MASK                                   0x20
#define _IPR2_SSP2IP_POSN                                   0x6
#define _IPR2_SSP2IP_POSITION                               0x6
#define _IPR2_SSP2IP_SIZE                                   0x1
#define _IPR2_SSP2IP_LENGTH                                 0x1
#define _IPR2_SSP2IP_MASK                                   0x40
#define _IPR2_OSCFIP_POSN                                   0x7
#define _IPR2_OSCFIP_POSITION                               0x7
#define _IPR2_OSCFIP_SIZE                                   0x1
#define _IPR2_OSCFIP_LENGTH                                 0x1
#define _IPR2_OSCFIP_MASK                                   0x80
#define _IPR2_CMIP_POSN                                     0x6
#define _IPR2_CMIP_POSITION                                 0x6
#define _IPR2_CMIP_SIZE                                     0x1
#define _IPR2_CMIP_LENGTH                                   0x1
#define _IPR2_CMIP_MASK                                     0x40

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0xFA3);
#ifndef _LIB_BUILD
asm("PIE3 equ 0FA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCCIE                 :1;
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
        unsigned CTMUIE                 :1;
        unsigned TX2IE                  :1;
        unsigned RC2IE                  :1;
        unsigned LCDIE                  :1;
        unsigned TMR5GIE                :1;
    };
    struct {
        unsigned RXB0IE                 :1;
        unsigned RXB1IE                 :1;
        unsigned TXB0IE                 :1;
        unsigned TXB1IE                 :1;
        unsigned TXB2IE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned RXBNIE                 :1;
        unsigned                        :2;
        unsigned TXBNIE                 :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0xFA3);
// bitfield macros
#define _PIE3_RTCCIE_POSN                                   0x0
#define _PIE3_RTCCIE_POSITION                               0x0
#define _PIE3_RTCCIE_SIZE                                   0x1
#define _PIE3_RTCCIE_LENGTH                                 0x1
#define _PIE3_RTCCIE_MASK                                   0x1
#define _PIE3_CCP1IE_POSN                                   0x1
#define _PIE3_CCP1IE_POSITION                               0x1
#define _PIE3_CCP1IE_SIZE                                   0x1
#define _PIE3_CCP1IE_LENGTH                                 0x1
#define _PIE3_CCP1IE_MASK                                   0x2
#define _PIE3_CCP2IE_POSN                                   0x2
#define _PIE3_CCP2IE_POSITION                               0x2
#define _PIE3_CCP2IE_SIZE                                   0x1
#define _PIE3_CCP2IE_LENGTH                                 0x1
#define _PIE3_CCP2IE_MASK                                   0x4
#define _PIE3_CTMUIE_POSN                                   0x3
#define _PIE3_CTMUIE_POSITION                               0x3
#define _PIE3_CTMUIE_SIZE                                   0x1
#define _PIE3_CTMUIE_LENGTH                                 0x1
#define _PIE3_CTMUIE_MASK                                   0x8
#define _PIE3_TX2IE_POSN                                    0x4
#define _PIE3_TX2IE_POSITION                                0x4
#define _PIE3_TX2IE_SIZE                                    0x1
#define _PIE3_TX2IE_LENGTH                                  0x1
#define _PIE3_TX2IE_MASK                                    0x10
#define _PIE3_RC2IE_POSN                                    0x5
#define _PIE3_RC2IE_POSITION                                0x5
#define _PIE3_RC2IE_SIZE                                    0x1
#define _PIE3_RC2IE_LENGTH                                  0x1
#define _PIE3_RC2IE_MASK                                    0x20
#define _PIE3_LCDIE_POSN                                    0x6
#define _PIE3_LCDIE_POSITION                                0x6
#define _PIE3_LCDIE_SIZE                                    0x1
#define _PIE3_LCDIE_LENGTH                                  0x1
#define _PIE3_LCDIE_MASK                                    0x40
#define _PIE3_TMR5GIE_POSN                                  0x7
#define _PIE3_TMR5GIE_POSITION                              0x7
#define _PIE3_TMR5GIE_SIZE                                  0x1
#define _PIE3_TMR5GIE_LENGTH                                0x1
#define _PIE3_TMR5GIE_MASK                                  0x80
#define _PIE3_RXB0IE_POSN                                   0x0
#define _PIE3_RXB0IE_POSITION                               0x0
#define _PIE3_RXB0IE_SIZE                                   0x1
#define _PIE3_RXB0IE_LENGTH                                 0x1
#define _PIE3_RXB0IE_MASK                                   0x1
#define _PIE3_RXB1IE_POSN                                   0x1
#define _PIE3_RXB1IE_POSITION                               0x1
#define _PIE3_RXB1IE_SIZE                                   0x1
#define _PIE3_RXB1IE_LENGTH                                 0x1
#define _PIE3_RXB1IE_MASK                                   0x2
#define _PIE3_TXB0IE_POSN                                   0x2
#define _PIE3_TXB0IE_POSITION                               0x2
#define _PIE3_TXB0IE_SIZE                                   0x1
#define _PIE3_TXB0IE_LENGTH                                 0x1
#define _PIE3_TXB0IE_MASK                                   0x4
#define _PIE3_TXB1IE_POSN                                   0x3
#define _PIE3_TXB1IE_POSITION                               0x3
#define _PIE3_TXB1IE_SIZE                                   0x1
#define _PIE3_TXB1IE_LENGTH                                 0x1
#define _PIE3_TXB1IE_MASK                                   0x8
#define _PIE3_TXB2IE_POSN                                   0x4
#define _PIE3_TXB2IE_POSITION                               0x4
#define _PIE3_TXB2IE_SIZE                                   0x1
#define _PIE3_TXB2IE_LENGTH                                 0x1
#define _PIE3_TXB2IE_MASK                                   0x10
#define _PIE3_RXBNIE_POSN                                   0x1
#define _PIE3_RXBNIE_POSITION                               0x1
#define _PIE3_RXBNIE_SIZE                                   0x1
#define _PIE3_RXBNIE_LENGTH                                 0x1
#define _PIE3_RXBNIE_MASK                                   0x2
#define _PIE3_TXBNIE_POSN                                   0x4
#define _PIE3_TXBNIE_POSITION                               0x4
#define _PIE3_TXBNIE_SIZE                                   0x1
#define _PIE3_TXBNIE_LENGTH                                 0x1
#define _PIE3_TXBNIE_MASK                                   0x10

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0xFA4);
#ifndef _LIB_BUILD
asm("PIR3 equ 0FA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCCIF                 :1;
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
        unsigned CTMUIF                 :1;
        unsigned TX2IF                  :1;
        unsigned RC2IF                  :1;
        unsigned LCDIF                  :1;
        unsigned TMR5GIF                :1;
    };
    struct {
        unsigned                        :1;
        unsigned RXBNIF                 :1;
        unsigned                        :2;
        unsigned TXBNIF                 :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0xFA4);
// bitfield macros
#define _PIR3_RTCCIF_POSN                                   0x0
#define _PIR3_RTCCIF_POSITION                               0x0
#define _PIR3_RTCCIF_SIZE                                   0x1
#define _PIR3_RTCCIF_LENGTH                                 0x1
#define _PIR3_RTCCIF_MASK                                   0x1
#define _PIR3_CCP1IF_POSN                                   0x1
#define _PIR3_CCP1IF_POSITION                               0x1
#define _PIR3_CCP1IF_SIZE                                   0x1
#define _PIR3_CCP1IF_LENGTH                                 0x1
#define _PIR3_CCP1IF_MASK                                   0x2
#define _PIR3_CCP2IF_POSN                                   0x2
#define _PIR3_CCP2IF_POSITION                               0x2
#define _PIR3_CCP2IF_SIZE                                   0x1
#define _PIR3_CCP2IF_LENGTH                                 0x1
#define _PIR3_CCP2IF_MASK                                   0x4
#define _PIR3_CTMUIF_POSN                                   0x3
#define _PIR3_CTMUIF_POSITION                               0x3
#define _PIR3_CTMUIF_SIZE                                   0x1
#define _PIR3_CTMUIF_LENGTH                                 0x1
#define _PIR3_CTMUIF_MASK                                   0x8
#define _PIR3_TX2IF_POSN                                    0x4
#define _PIR3_TX2IF_POSITION                                0x4
#define _PIR3_TX2IF_SIZE                                    0x1
#define _PIR3_TX2IF_LENGTH                                  0x1
#define _PIR3_TX2IF_MASK                                    0x10
#define _PIR3_RC2IF_POSN                                    0x5
#define _PIR3_RC2IF_POSITION                                0x5
#define _PIR3_RC2IF_SIZE                                    0x1
#define _PIR3_RC2IF_LENGTH                                  0x1
#define _PIR3_RC2IF_MASK                                    0x20
#define _PIR3_LCDIF_POSN                                    0x6
#define _PIR3_LCDIF_POSITION                                0x6
#define _PIR3_LCDIF_SIZE                                    0x1
#define _PIR3_LCDIF_LENGTH                                  0x1
#define _PIR3_LCDIF_MASK                                    0x40
#define _PIR3_TMR5GIF_POSN                                  0x7
#define _PIR3_TMR5GIF_POSITION                              0x7
#define _PIR3_TMR5GIF_SIZE                                  0x1
#define _PIR3_TMR5GIF_LENGTH                                0x1
#define _PIR3_TMR5GIF_MASK                                  0x80
#define _PIR3_RXBNIF_POSN                                   0x1
#define _PIR3_RXBNIF_POSITION                               0x1
#define _PIR3_RXBNIF_SIZE                                   0x1
#define _PIR3_RXBNIF_LENGTH                                 0x1
#define _PIR3_RXBNIF_MASK                                   0x2
#define _PIR3_TXBNIF_POSN                                   0x4
#define _PIR3_TXBNIF_POSITION                               0x4
#define _PIR3_TXBNIF_SIZE                                   0x1
#define _PIR3_TXBNIF_LENGTH                                 0x1
#define _PIR3_TXBNIF_MASK                                   0x10

// Register: IPR3
#define IPR3 IPR3
extern volatile unsigned char           IPR3                __at(0xFA5);
#ifndef _LIB_BUILD
asm("IPR3 equ 0FA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCCIP                 :1;
        unsigned CCP1IP                 :1;
        unsigned CCP2IP                 :1;
        unsigned CTMUIP                 :1;
        unsigned TX2IP                  :1;
        unsigned RC2IP                  :1;
        unsigned LCDIP                  :1;
        unsigned TMR5GIP                :1;
    };
    struct {
        unsigned                        :1;
        unsigned RXBNIP                 :1;
        unsigned                        :2;
        unsigned TXBNIP                 :1;
    };
} IPR3bits_t;
extern volatile IPR3bits_t IPR3bits __at(0xFA5);
// bitfield macros
#define _IPR3_RTCCIP_POSN                                   0x0
#define _IPR3_RTCCIP_POSITION                               0x0
#define _IPR3_RTCCIP_SIZE                                   0x1
#define _IPR3_RTCCIP_LENGTH                                 0x1
#define _IPR3_RTCCIP_MASK                                   0x1
#define _IPR3_CCP1IP_POSN                                   0x1
#define _IPR3_CCP1IP_POSITION                               0x1
#define _IPR3_CCP1IP_SIZE                                   0x1
#define _IPR3_CCP1IP_LENGTH                                 0x1
#define _IPR3_CCP1IP_MASK                                   0x2
#define _IPR3_CCP2IP_POSN                                   0x2
#define _IPR3_CCP2IP_POSITION                               0x2
#define _IPR3_CCP2IP_SIZE                                   0x1
#define _IPR3_CCP2IP_LENGTH                                 0x1
#define _IPR3_CCP2IP_MASK                                   0x4
#define _IPR3_CTMUIP_POSN                                   0x3
#define _IPR3_CTMUIP_POSITION                               0x3
#define _IPR3_CTMUIP_SIZE                                   0x1
#define _IPR3_CTMUIP_LENGTH                                 0x1
#define _IPR3_CTMUIP_MASK                                   0x8
#define _IPR3_TX2IP_POSN                                    0x4
#define _IPR3_TX2IP_POSITION                                0x4
#define _IPR3_TX2IP_SIZE                                    0x1
#define _IPR3_TX2IP_LENGTH                                  0x1
#define _IPR3_TX2IP_MASK                                    0x10
#define _IPR3_RC2IP_POSN                                    0x5
#define _IPR3_RC2IP_POSITION                                0x5
#define _IPR3_RC2IP_SIZE                                    0x1
#define _IPR3_RC2IP_LENGTH                                  0x1
#define _IPR3_RC2IP_MASK                                    0x20
#define _IPR3_LCDIP_POSN                                    0x6
#define _IPR3_LCDIP_POSITION                                0x6
#define _IPR3_LCDIP_SIZE                                    0x1
#define _IPR3_LCDIP_LENGTH                                  0x1
#define _IPR3_LCDIP_MASK                                    0x40
#define _IPR3_TMR5GIP_POSN                                  0x7
#define _IPR3_TMR5GIP_POSITION                              0x7
#define _IPR3_TMR5GIP_SIZE                                  0x1
#define _IPR3_TMR5GIP_LENGTH                                0x1
#define _IPR3_TMR5GIP_MASK                                  0x80
#define _IPR3_RXBNIP_POSN                                   0x1
#define _IPR3_RXBNIP_POSITION                               0x1
#define _IPR3_RXBNIP_SIZE                                   0x1
#define _IPR3_RXBNIP_LENGTH                                 0x1
#define _IPR3_RXBNIP_MASK                                   0x2
#define _IPR3_TXBNIP_POSN                                   0x4
#define _IPR3_TXBNIP_POSITION                               0x4
#define _IPR3_TXBNIP_SIZE                                   0x1
#define _IPR3_TXBNIP_LENGTH                                 0x1
#define _IPR3_TXBNIP_MASK                                   0x10

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0xFA6);
#ifndef _LIB_BUILD
asm("PIR6 equ 0FA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CMP1IF                 :1;
        unsigned CMP2IF                 :1;
        unsigned CMP3IF                 :1;
        unsigned                        :1;
        unsigned TX3IF                  :1;
        unsigned RC3IF                  :1;
        unsigned TX4IF                  :1;
        unsigned RC4IF                  :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0xFA6);
// bitfield macros
#define _PIR6_CMP1IF_POSN                                   0x0
#define _PIR6_CMP1IF_POSITION                               0x0
#define _PIR6_CMP1IF_SIZE                                   0x1
#define _PIR6_CMP1IF_LENGTH                                 0x1
#define _PIR6_CMP1IF_MASK                                   0x1
#define _PIR6_CMP2IF_POSN                                   0x1
#define _PIR6_CMP2IF_POSITION                               0x1
#define _PIR6_CMP2IF_SIZE                                   0x1
#define _PIR6_CMP2IF_LENGTH                                 0x1
#define _PIR6_CMP2IF_MASK                                   0x2
#define _PIR6_CMP3IF_POSN                                   0x2
#define _PIR6_CMP3IF_POSITION                               0x2
#define _PIR6_CMP3IF_SIZE                                   0x1
#define _PIR6_CMP3IF_LENGTH                                 0x1
#define _PIR6_CMP3IF_MASK                                   0x4
#define _PIR6_TX3IF_POSN                                    0x4
#define _PIR6_TX3IF_POSITION                                0x4
#define _PIR6_TX3IF_SIZE                                    0x1
#define _PIR6_TX3IF_LENGTH                                  0x1
#define _PIR6_TX3IF_MASK                                    0x10
#define _PIR6_RC3IF_POSN                                    0x5
#define _PIR6_RC3IF_POSITION                                0x5
#define _PIR6_RC3IF_SIZE                                    0x1
#define _PIR6_RC3IF_LENGTH                                  0x1
#define _PIR6_RC3IF_MASK                                    0x20
#define _PIR6_TX4IF_POSN                                    0x6
#define _PIR6_TX4IF_POSITION                                0x6
#define _PIR6_TX4IF_SIZE                                    0x1
#define _PIR6_TX4IF_LENGTH                                  0x1
#define _PIR6_TX4IF_MASK                                    0x40
#define _PIR6_RC4IF_POSN                                    0x7
#define _PIR6_RC4IF_POSITION                                0x7
#define _PIR6_RC4IF_SIZE                                    0x1
#define _PIR6_RC4IF_LENGTH                                  0x1
#define _PIR6_RC4IF_MASK                                    0x80

// Register: PSPCON
#define PSPCON PSPCON
extern volatile unsigned char           PSPCON              __at(0xFA7);
#ifndef _LIB_BUILD
asm("PSPCON equ 0FA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned PSPMODE                :1;
        unsigned IBOV                   :1;
        unsigned OBF                    :1;
        unsigned IBF                    :1;
    };
} PSPCONbits_t;
extern volatile PSPCONbits_t PSPCONbits __at(0xFA7);
// bitfield macros
#define _PSPCON_PSPMODE_POSN                                0x4
#define _PSPCON_PSPMODE_POSITION                            0x4
#define _PSPCON_PSPMODE_SIZE                                0x1
#define _PSPCON_PSPMODE_LENGTH                              0x1
#define _PSPCON_PSPMODE_MASK                                0x10
#define _PSPCON_IBOV_POSN                                   0x5
#define _PSPCON_IBOV_POSITION                               0x5
#define _PSPCON_IBOV_SIZE                                   0x1
#define _PSPCON_IBOV_LENGTH                                 0x1
#define _PSPCON_IBOV_MASK                                   0x20
#define _PSPCON_OBF_POSN                                    0x6
#define _PSPCON_OBF_POSITION                                0x6
#define _PSPCON_OBF_SIZE                                    0x1
#define _PSPCON_OBF_LENGTH                                  0x1
#define _PSPCON_OBF_MASK                                    0x40
#define _PSPCON_IBF_POSN                                    0x7
#define _PSPCON_IBF_POSITION                                0x7
#define _PSPCON_IBF_SIZE                                    0x1
#define _PSPCON_IBF_LENGTH                                  0x1
#define _PSPCON_IBF_MASK                                    0x80

// Register: HLVDCON
#define HLVDCON HLVDCON
extern volatile unsigned char           HLVDCON             __at(0xFA8);
#ifndef _LIB_BUILD
asm("HLVDCON equ 0FA8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HLVDL                  :4;
        unsigned HLVDEN                 :1;
        unsigned IRVST                  :1;
        unsigned BGVST                  :1;
        unsigned VDIRMAG                :1;
    };
    struct {
        unsigned HLVDL0                 :1;
        unsigned HLVDL1                 :1;
        unsigned HLVDL2                 :1;
        unsigned HLVDL3                 :1;
    };
} HLVDCONbits_t;
extern volatile HLVDCONbits_t HLVDCONbits __at(0xFA8);
// bitfield macros
#define _HLVDCON_HLVDL_POSN                                 0x0
#define _HLVDCON_HLVDL_POSITION                             0x0
#define _HLVDCON_HLVDL_SIZE                                 0x4
#define _HLVDCON_HLVDL_LENGTH                               0x4
#define _HLVDCON_HLVDL_MASK                                 0xF
#define _HLVDCON_HLVDEN_POSN                                0x4
#define _HLVDCON_HLVDEN_POSITION                            0x4
#define _HLVDCON_HLVDEN_SIZE                                0x1
#define _HLVDCON_HLVDEN_LENGTH                              0x1
#define _HLVDCON_HLVDEN_MASK                                0x10
#define _HLVDCON_IRVST_POSN                                 0x5
#define _HLVDCON_IRVST_POSITION                             0x5
#define _HLVDCON_IRVST_SIZE                                 0x1
#define _HLVDCON_IRVST_LENGTH                               0x1
#define _HLVDCON_IRVST_MASK                                 0x20
#define _HLVDCON_BGVST_POSN                                 0x6
#define _HLVDCON_BGVST_POSITION                             0x6
#define _HLVDCON_BGVST_SIZE                                 0x1
#define _HLVDCON_BGVST_LENGTH                               0x1
#define _HLVDCON_BGVST_MASK                                 0x40
#define _HLVDCON_VDIRMAG_POSN                               0x7
#define _HLVDCON_VDIRMAG_POSITION                           0x7
#define _HLVDCON_VDIRMAG_SIZE                               0x1
#define _HLVDCON_VDIRMAG_LENGTH                             0x1
#define _HLVDCON_VDIRMAG_MASK                               0x80
#define _HLVDCON_HLVDL0_POSN                                0x0
#define _HLVDCON_HLVDL0_POSITION                            0x0
#define _HLVDCON_HLVDL0_SIZE                                0x1
#define _HLVDCON_HLVDL0_LENGTH                              0x1
#define _HLVDCON_HLVDL0_MASK                                0x1
#define _HLVDCON_HLVDL1_POSN                                0x1
#define _HLVDCON_HLVDL1_POSITION                            0x1
#define _HLVDCON_HLVDL1_SIZE                                0x1
#define _HLVDCON_HLVDL1_LENGTH                              0x1
#define _HLVDCON_HLVDL1_MASK                                0x2
#define _HLVDCON_HLVDL2_POSN                                0x2
#define _HLVDCON_HLVDL2_POSITION                            0x2
#define _HLVDCON_HLVDL2_SIZE                                0x1
#define _HLVDCON_HLVDL2_LENGTH                              0x1
#define _HLVDCON_HLVDL2_MASK                                0x4
#define _HLVDCON_HLVDL3_POSN                                0x3
#define _HLVDCON_HLVDL3_POSITION                            0x3
#define _HLVDCON_HLVDL3_SIZE                                0x1
#define _HLVDCON_HLVDL3_LENGTH                              0x1
#define _HLVDCON_HLVDL3_MASK                                0x8

// Register: IPR6
#define IPR6 IPR6
extern volatile unsigned char           IPR6                __at(0xFA9);
#ifndef _LIB_BUILD
asm("IPR6 equ 0FA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CMP1IP                 :1;
        unsigned CMP2IP                 :1;
        unsigned CMP3IP                 :1;
        unsigned                        :1;
        unsigned TX3IP                  :1;
        unsigned RC3IP                  :1;
        unsigned TX4IP                  :1;
        unsigned RC4IP                  :1;
    };
} IPR6bits_t;
extern volatile IPR6bits_t IPR6bits __at(0xFA9);
// bitfield macros
#define _IPR6_CMP1IP_POSN                                   0x0
#define _IPR6_CMP1IP_POSITION                               0x0
#define _IPR6_CMP1IP_SIZE                                   0x1
#define _IPR6_CMP1IP_LENGTH                                 0x1
#define _IPR6_CMP1IP_MASK                                   0x1
#define _IPR6_CMP2IP_POSN                                   0x1
#define _IPR6_CMP2IP_POSITION                               0x1
#define _IPR6_CMP2IP_SIZE                                   0x1
#define _IPR6_CMP2IP_LENGTH                                 0x1
#define _IPR6_CMP2IP_MASK                                   0x2
#define _IPR6_CMP3IP_POSN                                   0x2
#define _IPR6_CMP3IP_POSITION                               0x2
#define _IPR6_CMP3IP_SIZE                                   0x1
#define _IPR6_CMP3IP_LENGTH                                 0x1
#define _IPR6_CMP3IP_MASK                                   0x4
#define _IPR6_TX3IP_POSN                                    0x4
#define _IPR6_TX3IP_POSITION                                0x4
#define _IPR6_TX3IP_SIZE                                    0x1
#define _IPR6_TX3IP_LENGTH                                  0x1
#define _IPR6_TX3IP_MASK                                    0x10
#define _IPR6_RC3IP_POSN                                    0x5
#define _IPR6_RC3IP_POSITION                                0x5
#define _IPR6_RC3IP_SIZE                                    0x1
#define _IPR6_RC3IP_LENGTH                                  0x1
#define _IPR6_RC3IP_MASK                                    0x20
#define _IPR6_TX4IP_POSN                                    0x6
#define _IPR6_TX4IP_POSITION                                0x6
#define _IPR6_TX4IP_SIZE                                    0x1
#define _IPR6_TX4IP_LENGTH                                  0x1
#define _IPR6_TX4IP_MASK                                    0x40
#define _IPR6_RC4IP_POSN                                    0x7
#define _IPR6_RC4IP_POSITION                                0x7
#define _IPR6_RC4IP_SIZE                                    0x1
#define _IPR6_RC4IP_LENGTH                                  0x1
#define _IPR6_RC4IP_MASK                                    0x80

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0xFAA);
#ifndef _LIB_BUILD
asm("T1GCON equ 0FAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned T1GGO_NOT_T1DONE       :1;
    };
    struct {
        unsigned T1GSS                  :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nT1DONE          :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned TMR1GE                 :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned                        :1;
        unsigned T1GGO                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
    struct {
        unsigned                        :3;
        unsigned nT1DONE                :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0xFAA);
// bitfield macros
#define _T1GCON_T1GGO_NOT_T1DONE_POSN                       0x3
#define _T1GCON_T1GGO_NOT_T1DONE_POSITION                   0x3
#define _T1GCON_T1GGO_NOT_T1DONE_SIZE                       0x1
#define _T1GCON_T1GGO_NOT_T1DONE_LENGTH                     0x1
#define _T1GCON_T1GGO_NOT_T1DONE_MASK                       0x8
#define _T1GCON_T1GSS_POSN                                  0x0
#define _T1GCON_T1GSS_POSITION                              0x0
#define _T1GCON_T1GSS_SIZE                                  0x2
#define _T1GCON_T1GSS_LENGTH                                0x2
#define _T1GCON_T1GSS_MASK                                  0x3
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nT1DONE_POSN                          0x3
#define _T1GCON_T1GGO_nT1DONE_POSITION                      0x3
#define _T1GCON_T1GGO_nT1DONE_SIZE                          0x1
#define _T1GCON_T1GGO_nT1DONE_LENGTH                        0x1
#define _T1GCON_T1GGO_nT1DONE_MASK                          0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_TMR1GE_POSN                                 0x7
#define _T1GCON_TMR1GE_POSITION                             0x7
#define _T1GCON_TMR1GE_SIZE                                 0x1
#define _T1GCON_TMR1GE_LENGTH                               0x1
#define _T1GCON_TMR1GE_MASK                                 0x80
#define _T1GCON_T1GSS0_POSN                                 0x0
#define _T1GCON_T1GSS0_POSITION                             0x0
#define _T1GCON_T1GSS0_SIZE                                 0x1
#define _T1GCON_T1GSS0_LENGTH                               0x1
#define _T1GCON_T1GSS0_MASK                                 0x1
#define _T1GCON_T1GSS1_POSN                                 0x1
#define _T1GCON_T1GSS1_POSITION                             0x1
#define _T1GCON_T1GSS1_SIZE                                 0x1
#define _T1GCON_T1GSS1_LENGTH                               0x1
#define _T1GCON_T1GSS1_MASK                                 0x2
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
#define _T1GCON_NOT_T1DONE_POSN                             0x3
#define _T1GCON_NOT_T1DONE_POSITION                         0x3
#define _T1GCON_NOT_T1DONE_SIZE                             0x1
#define _T1GCON_NOT_T1DONE_LENGTH                           0x1
#define _T1GCON_NOT_T1DONE_MASK                             0x8
#define _T1GCON_nT1DONE_POSN                                0x3
#define _T1GCON_nT1DONE_POSITION                            0x3
#define _T1GCON_nT1DONE_SIZE                                0x1
#define _T1GCON_nT1DONE_LENGTH                              0x1
#define _T1GCON_nT1DONE_MASK                                0x8

// Register: RCSTA1
#define RCSTA1 RCSTA1
extern volatile unsigned char           RCSTA1              __at(0xFAB);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 0FABh");
#endif
// aliases
extern volatile unsigned char           RCSTA               __at(0xFAB);
#ifndef _LIB_BUILD
asm("RCSTA equ 0FABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned ADEN                   :1;
    };
    struct {
        unsigned RCD8                   :1;
        unsigned                        :5;
        unsigned RC8_9                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC9                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned SRENA                  :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0xFAB);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
#define _RCSTA1_ADEN_POSN                                   0x3
#define _RCSTA1_ADEN_POSITION                               0x3
#define _RCSTA1_ADEN_SIZE                                   0x1
#define _RCSTA1_ADEN_LENGTH                                 0x1
#define _RCSTA1_ADEN_MASK                                   0x8
#define _RCSTA1_RCD8_POSN                                   0x0
#define _RCSTA1_RCD8_POSITION                               0x0
#define _RCSTA1_RCD8_SIZE                                   0x1
#define _RCSTA1_RCD8_LENGTH                                 0x1
#define _RCSTA1_RCD8_MASK                                   0x1
#define _RCSTA1_RC8_9_POSN                                  0x6
#define _RCSTA1_RC8_9_POSITION                              0x6
#define _RCSTA1_RC8_9_SIZE                                  0x1
#define _RCSTA1_RC8_9_LENGTH                                0x1
#define _RCSTA1_RC8_9_MASK                                  0x40
#define _RCSTA1_RC9_POSN                                    0x6
#define _RCSTA1_RC9_POSITION                                0x6
#define _RCSTA1_RC9_SIZE                                    0x1
#define _RCSTA1_RC9_LENGTH                                  0x1
#define _RCSTA1_RC9_MASK                                    0x40
#define _RCSTA1_SRENA_POSN                                  0x5
#define _RCSTA1_SRENA_POSITION                              0x5
#define _RCSTA1_SRENA_SIZE                                  0x1
#define _RCSTA1_SRENA_LENGTH                                0x1
#define _RCSTA1_SRENA_MASK                                  0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned ADEN                   :1;
    };
    struct {
        unsigned RCD8                   :1;
        unsigned                        :5;
        unsigned RC8_9                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC9                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned SRENA                  :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0xFAB);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80
#define _RCSTA_ADEN_POSN                                    0x3
#define _RCSTA_ADEN_POSITION                                0x3
#define _RCSTA_ADEN_SIZE                                    0x1
#define _RCSTA_ADEN_LENGTH                                  0x1
#define _RCSTA_ADEN_MASK                                    0x8
#define _RCSTA_RCD8_POSN                                    0x0
#define _RCSTA_RCD8_POSITION                                0x0
#define _RCSTA_RCD8_SIZE                                    0x1
#define _RCSTA_RCD8_LENGTH                                  0x1
#define _RCSTA_RCD8_MASK                                    0x1
#define _RCSTA_RC8_9_POSN                                   0x6
#define _RCSTA_RC8_9_POSITION                               0x6
#define _RCSTA_RC8_9_SIZE                                   0x1
#define _RCSTA_RC8_9_LENGTH                                 0x1
#define _RCSTA_RC8_9_MASK                                   0x40
#define _RCSTA_RC9_POSN                                     0x6
#define _RCSTA_RC9_POSITION                                 0x6
#define _RCSTA_RC9_SIZE                                     0x1
#define _RCSTA_RC9_LENGTH                                   0x1
#define _RCSTA_RC9_MASK                                     0x40
#define _RCSTA_SRENA_POSN                                   0x5
#define _RCSTA_SRENA_POSITION                               0x5
#define _RCSTA_SRENA_SIZE                                   0x1
#define _RCSTA_SRENA_LENGTH                                 0x1
#define _RCSTA_SRENA_MASK                                   0x20

// Register: TXSTA1
#define TXSTA1 TXSTA1
extern volatile unsigned char           TXSTA1              __at(0xFAC);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 0FACh");
#endif
// aliases
extern volatile unsigned char           TXSTA               __at(0xFAC);
#ifndef _LIB_BUILD
asm("TXSTA equ 0FACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned TXD8                   :1;
        unsigned                        :5;
        unsigned TX8_9                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned BRGH1                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned CSRC1                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned SENDB1                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned SYNC1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned TRMT1                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX91                   :1;
    };
    struct {
        unsigned TX9D1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned TXEN1                  :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0xFAC);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
#define _TXSTA1_TXD8_POSN                                   0x0
#define _TXSTA1_TXD8_POSITION                               0x0
#define _TXSTA1_TXD8_SIZE                                   0x1
#define _TXSTA1_TXD8_LENGTH                                 0x1
#define _TXSTA1_TXD8_MASK                                   0x1
#define _TXSTA1_TX8_9_POSN                                  0x6
#define _TXSTA1_TX8_9_POSITION                              0x6
#define _TXSTA1_TX8_9_SIZE                                  0x1
#define _TXSTA1_TX8_9_LENGTH                                0x1
#define _TXSTA1_TX8_9_MASK                                  0x40
#define _TXSTA1_BRGH1_POSN                                  0x2
#define _TXSTA1_BRGH1_POSITION                              0x2
#define _TXSTA1_BRGH1_SIZE                                  0x1
#define _TXSTA1_BRGH1_LENGTH                                0x1
#define _TXSTA1_BRGH1_MASK                                  0x4
#define _TXSTA1_CSRC1_POSN                                  0x7
#define _TXSTA1_CSRC1_POSITION                              0x7
#define _TXSTA1_CSRC1_SIZE                                  0x1
#define _TXSTA1_CSRC1_LENGTH                                0x1
#define _TXSTA1_CSRC1_MASK                                  0x80
#define _TXSTA1_SENDB1_POSN                                 0x3
#define _TXSTA1_SENDB1_POSITION                             0x3
#define _TXSTA1_SENDB1_SIZE                                 0x1
#define _TXSTA1_SENDB1_LENGTH                               0x1
#define _TXSTA1_SENDB1_MASK                                 0x8
#define _TXSTA1_SYNC1_POSN                                  0x4
#define _TXSTA1_SYNC1_POSITION                              0x4
#define _TXSTA1_SYNC1_SIZE                                  0x1
#define _TXSTA1_SYNC1_LENGTH                                0x1
#define _TXSTA1_SYNC1_MASK                                  0x10
#define _TXSTA1_TRMT1_POSN                                  0x1
#define _TXSTA1_TRMT1_POSITION                              0x1
#define _TXSTA1_TRMT1_SIZE                                  0x1
#define _TXSTA1_TRMT1_LENGTH                                0x1
#define _TXSTA1_TRMT1_MASK                                  0x2
#define _TXSTA1_TX91_POSN                                   0x6
#define _TXSTA1_TX91_POSITION                               0x6
#define _TXSTA1_TX91_SIZE                                   0x1
#define _TXSTA1_TX91_LENGTH                                 0x1
#define _TXSTA1_TX91_MASK                                   0x40
#define _TXSTA1_TX9D1_POSN                                  0x0
#define _TXSTA1_TX9D1_POSITION                              0x0
#define _TXSTA1_TX9D1_SIZE                                  0x1
#define _TXSTA1_TX9D1_LENGTH                                0x1
#define _TXSTA1_TX9D1_MASK                                  0x1
#define _TXSTA1_TXEN1_POSN                                  0x5
#define _TXSTA1_TXEN1_POSITION                              0x5
#define _TXSTA1_TXEN1_SIZE                                  0x1
#define _TXSTA1_TXEN1_LENGTH                                0x1
#define _TXSTA1_TXEN1_MASK                                  0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned TXD8                   :1;
        unsigned                        :5;
        unsigned TX8_9                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned BRGH1                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned CSRC1                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned SENDB1                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned SYNC1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned TRMT1                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX91                   :1;
    };
    struct {
        unsigned TX9D1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned TXEN1                  :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0xFAC);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80
#define _TXSTA_TXD8_POSN                                    0x0
#define _TXSTA_TXD8_POSITION                                0x0
#define _TXSTA_TXD8_SIZE                                    0x1
#define _TXSTA_TXD8_LENGTH                                  0x1
#define _TXSTA_TXD8_MASK                                    0x1
#define _TXSTA_TX8_9_POSN                                   0x6
#define _TXSTA_TX8_9_POSITION                               0x6
#define _TXSTA_TX8_9_SIZE                                   0x1
#define _TXSTA_TX8_9_LENGTH                                 0x1
#define _TXSTA_TX8_9_MASK                                   0x40
#define _TXSTA_BRGH1_POSN                                   0x2
#define _TXSTA_BRGH1_POSITION                               0x2
#define _TXSTA_BRGH1_SIZE                                   0x1
#define _TXSTA_BRGH1_LENGTH                                 0x1
#define _TXSTA_BRGH1_MASK                                   0x4
#define _TXSTA_CSRC1_POSN                                   0x7
#define _TXSTA_CSRC1_POSITION                               0x7
#define _TXSTA_CSRC1_SIZE                                   0x1
#define _TXSTA_CSRC1_LENGTH                                 0x1
#define _TXSTA_CSRC1_MASK                                   0x80
#define _TXSTA_SENDB1_POSN                                  0x3
#define _TXSTA_SENDB1_POSITION                              0x3
#define _TXSTA_SENDB1_SIZE                                  0x1
#define _TXSTA_SENDB1_LENGTH                                0x1
#define _TXSTA_SENDB1_MASK                                  0x8
#define _TXSTA_SYNC1_POSN                                   0x4
#define _TXSTA_SYNC1_POSITION                               0x4
#define _TXSTA_SYNC1_SIZE                                   0x1
#define _TXSTA_SYNC1_LENGTH                                 0x1
#define _TXSTA_SYNC1_MASK                                   0x10
#define _TXSTA_TRMT1_POSN                                   0x1
#define _TXSTA_TRMT1_POSITION                               0x1
#define _TXSTA_TRMT1_SIZE                                   0x1
#define _TXSTA_TRMT1_LENGTH                                 0x1
#define _TXSTA_TRMT1_MASK                                   0x2
#define _TXSTA_TX91_POSN                                    0x6
#define _TXSTA_TX91_POSITION                                0x6
#define _TXSTA_TX91_SIZE                                    0x1
#define _TXSTA_TX91_LENGTH                                  0x1
#define _TXSTA_TX91_MASK                                    0x40
#define _TXSTA_TX9D1_POSN                                   0x0
#define _TXSTA_TX9D1_POSITION                               0x0
#define _TXSTA_TX9D1_SIZE                                   0x1
#define _TXSTA_TX9D1_LENGTH                                 0x1
#define _TXSTA_TX9D1_MASK                                   0x1
#define _TXSTA_TXEN1_POSN                                   0x5
#define _TXSTA_TXEN1_POSITION                               0x5
#define _TXSTA_TXEN1_SIZE                                   0x1
#define _TXSTA_TXEN1_LENGTH                                 0x1
#define _TXSTA_TXEN1_MASK                                   0x20

// Register: TXREG1
#define TXREG1 TXREG1
extern volatile unsigned char           TXREG1              __at(0xFAD);
#ifndef _LIB_BUILD
asm("TXREG1 equ 0FADh");
#endif
// aliases
extern volatile unsigned char           TXREG               __at(0xFAD);
#ifndef _LIB_BUILD
asm("TXREG equ 0FADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXREG1                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0xFAD);
// bitfield macros
#define _TXREG1_TXREG1_POSN                                 0x0
#define _TXREG1_TXREG1_POSITION                             0x0
#define _TXREG1_TXREG1_SIZE                                 0x8
#define _TXREG1_TXREG1_LENGTH                               0x8
#define _TXREG1_TXREG1_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXREG1                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0xFAD);
// bitfield macros
#define _TXREG_TXREG1_POSN                                  0x0
#define _TXREG_TXREG1_POSITION                              0x0
#define _TXREG_TXREG1_SIZE                                  0x8
#define _TXREG_TXREG1_LENGTH                                0x8
#define _TXREG_TXREG1_MASK                                  0xFF

// Register: RCREG1
#define RCREG1 RCREG1
extern volatile unsigned char           RCREG1              __at(0xFAE);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0FAEh");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0xFAE);
#ifndef _LIB_BUILD
asm("RCREG equ 0FAEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RCREG1                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0xFAE);
// bitfield macros
#define _RCREG1_RCREG1_POSN                                 0x0
#define _RCREG1_RCREG1_POSITION                             0x0
#define _RCREG1_RCREG1_SIZE                                 0x8
#define _RCREG1_RCREG1_LENGTH                               0x8
#define _RCREG1_RCREG1_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RCREG1                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0xFAE);
// bitfield macros
#define _RCREG_RCREG1_POSN                                  0x0
#define _RCREG_RCREG1_POSITION                              0x0
#define _RCREG_RCREG1_SIZE                                  0x8
#define _RCREG_RCREG1_LENGTH                                0x8
#define _RCREG_RCREG1_MASK                                  0xFF

// Register: SPBRG1
#define SPBRG1 SPBRG1
extern volatile unsigned char           SPBRG1              __at(0xFAF);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 0FAFh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0xFAF);
#ifndef _LIB_BUILD
asm("SPBRG equ 0FAFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRG1                 :8;
    };
    struct {
        unsigned BRG0                   :1;
        unsigned BRG1                   :1;
        unsigned BRG2                   :1;
        unsigned BRG3                   :1;
        unsigned BRG4                   :1;
        unsigned BRG5                   :1;
        unsigned BRG6                   :1;
        unsigned BRG7                   :1;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0xFAF);
// bitfield macros
#define _SPBRG1_SPBRG1_POSN                                 0x0
#define _SPBRG1_SPBRG1_POSITION                             0x0
#define _SPBRG1_SPBRG1_SIZE                                 0x8
#define _SPBRG1_SPBRG1_LENGTH                               0x8
#define _SPBRG1_SPBRG1_MASK                                 0xFF
#define _SPBRG1_BRG0_POSN                                   0x0
#define _SPBRG1_BRG0_POSITION                               0x0
#define _SPBRG1_BRG0_SIZE                                   0x1
#define _SPBRG1_BRG0_LENGTH                                 0x1
#define _SPBRG1_BRG0_MASK                                   0x1
#define _SPBRG1_BRG1_POSN                                   0x1
#define _SPBRG1_BRG1_POSITION                               0x1
#define _SPBRG1_BRG1_SIZE                                   0x1
#define _SPBRG1_BRG1_LENGTH                                 0x1
#define _SPBRG1_BRG1_MASK                                   0x2
#define _SPBRG1_BRG2_POSN                                   0x2
#define _SPBRG1_BRG2_POSITION                               0x2
#define _SPBRG1_BRG2_SIZE                                   0x1
#define _SPBRG1_BRG2_LENGTH                                 0x1
#define _SPBRG1_BRG2_MASK                                   0x4
#define _SPBRG1_BRG3_POSN                                   0x3
#define _SPBRG1_BRG3_POSITION                               0x3
#define _SPBRG1_BRG3_SIZE                                   0x1
#define _SPBRG1_BRG3_LENGTH                                 0x1
#define _SPBRG1_BRG3_MASK                                   0x8
#define _SPBRG1_BRG4_POSN                                   0x4
#define _SPBRG1_BRG4_POSITION                               0x4
#define _SPBRG1_BRG4_SIZE                                   0x1
#define _SPBRG1_BRG4_LENGTH                                 0x1
#define _SPBRG1_BRG4_MASK                                   0x10
#define _SPBRG1_BRG5_POSN                                   0x5
#define _SPBRG1_BRG5_POSITION                               0x5
#define _SPBRG1_BRG5_SIZE                                   0x1
#define _SPBRG1_BRG5_LENGTH                                 0x1
#define _SPBRG1_BRG5_MASK                                   0x20
#define _SPBRG1_BRG6_POSN                                   0x6
#define _SPBRG1_BRG6_POSITION                               0x6
#define _SPBRG1_BRG6_SIZE                                   0x1
#define _SPBRG1_BRG6_LENGTH                                 0x1
#define _SPBRG1_BRG6_MASK                                   0x40
#define _SPBRG1_BRG7_POSN                                   0x7
#define _SPBRG1_BRG7_POSITION                               0x7
#define _SPBRG1_BRG7_SIZE                                   0x1
#define _SPBRG1_BRG7_LENGTH                                 0x1
#define _SPBRG1_BRG7_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SPBRG1                 :8;
    };
    struct {
        unsigned BRG0                   :1;
        unsigned BRG1                   :1;
        unsigned BRG2                   :1;
        unsigned BRG3                   :1;
        unsigned BRG4                   :1;
        unsigned BRG5                   :1;
        unsigned BRG6                   :1;
        unsigned BRG7                   :1;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0xFAF);
// bitfield macros
#define _SPBRG_SPBRG1_POSN                                  0x0
#define _SPBRG_SPBRG1_POSITION                              0x0
#define _SPBRG_SPBRG1_SIZE                                  0x8
#define _SPBRG_SPBRG1_LENGTH                                0x8
#define _SPBRG_SPBRG1_MASK                                  0xFF
#define _SPBRG_BRG0_POSN                                    0x0
#define _SPBRG_BRG0_POSITION                                0x0
#define _SPBRG_BRG0_SIZE                                    0x1
#define _SPBRG_BRG0_LENGTH                                  0x1
#define _SPBRG_BRG0_MASK                                    0x1
#define _SPBRG_BRG1_POSN                                    0x1
#define _SPBRG_BRG1_POSITION                                0x1
#define _SPBRG_BRG1_SIZE                                    0x1
#define _SPBRG_BRG1_LENGTH                                  0x1
#define _SPBRG_BRG1_MASK                                    0x2
#define _SPBRG_BRG2_POSN                                    0x2
#define _SPBRG_BRG2_POSITION                                0x2
#define _SPBRG_BRG2_SIZE                                    0x1
#define _SPBRG_BRG2_LENGTH                                  0x1
#define _SPBRG_BRG2_MASK                                    0x4
#define _SPBRG_BRG3_POSN                                    0x3
#define _SPBRG_BRG3_POSITION                                0x3
#define _SPBRG_BRG3_SIZE                                    0x1
#define _SPBRG_BRG3_LENGTH                                  0x1
#define _SPBRG_BRG3_MASK                                    0x8
#define _SPBRG_BRG4_POSN                                    0x4
#define _SPBRG_BRG4_POSITION                                0x4
#define _SPBRG_BRG4_SIZE                                    0x1
#define _SPBRG_BRG4_LENGTH                                  0x1
#define _SPBRG_BRG4_MASK                                    0x10
#define _SPBRG_BRG5_POSN                                    0x5
#define _SPBRG_BRG5_POSITION                                0x5
#define _SPBRG_BRG5_SIZE                                    0x1
#define _SPBRG_BRG5_LENGTH                                  0x1
#define _SPBRG_BRG5_MASK                                    0x20
#define _SPBRG_BRG6_POSN                                    0x6
#define _SPBRG_BRG6_POSITION                                0x6
#define _SPBRG_BRG6_SIZE                                    0x1
#define _SPBRG_BRG6_LENGTH                                  0x1
#define _SPBRG_BRG6_MASK                                    0x40
#define _SPBRG_BRG7_POSN                                    0x7
#define _SPBRG_BRG7_POSITION                                0x7
#define _SPBRG_BRG7_SIZE                                    0x1
#define _SPBRG_BRG7_LENGTH                                  0x1
#define _SPBRG_BRG7_MASK                                    0x80

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0xFB0);
#ifndef _LIB_BUILD
asm("T3GCON equ 0FB0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned T3GGO_NOT_T3DONE       :1;
    };
    struct {
        unsigned T3GSS                  :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nT3DONE          :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned TMR3GE                 :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned                        :1;
        unsigned T3GGO                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T3DONE             :1;
    };
    struct {
        unsigned                        :3;
        unsigned nT3DONE                :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0xFB0);
// bitfield macros
#define _T3GCON_T3GGO_NOT_T3DONE_POSN                       0x3
#define _T3GCON_T3GGO_NOT_T3DONE_POSITION                   0x3
#define _T3GCON_T3GGO_NOT_T3DONE_SIZE                       0x1
#define _T3GCON_T3GGO_NOT_T3DONE_LENGTH                     0x1
#define _T3GCON_T3GGO_NOT_T3DONE_MASK                       0x8
#define _T3GCON_T3GSS_POSN                                  0x0
#define _T3GCON_T3GSS_POSITION                              0x0
#define _T3GCON_T3GSS_SIZE                                  0x2
#define _T3GCON_T3GSS_LENGTH                                0x2
#define _T3GCON_T3GSS_MASK                                  0x3
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_nT3DONE_POSN                          0x3
#define _T3GCON_T3GGO_nT3DONE_POSITION                      0x3
#define _T3GCON_T3GGO_nT3DONE_SIZE                          0x1
#define _T3GCON_T3GGO_nT3DONE_LENGTH                        0x1
#define _T3GCON_T3GGO_nT3DONE_MASK                          0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_TMR3GE_POSN                                 0x7
#define _T3GCON_TMR3GE_POSITION                             0x7
#define _T3GCON_TMR3GE_SIZE                                 0x1
#define _T3GCON_TMR3GE_LENGTH                               0x1
#define _T3GCON_TMR3GE_MASK                                 0x80
#define _T3GCON_T3GSS0_POSN                                 0x0
#define _T3GCON_T3GSS0_POSITION                             0x0
#define _T3GCON_T3GSS0_SIZE                                 0x1
#define _T3GCON_T3GSS0_LENGTH                               0x1
#define _T3GCON_T3GSS0_MASK                                 0x1
#define _T3GCON_T3GSS1_POSN                                 0x1
#define _T3GCON_T3GSS1_POSITION                             0x1
#define _T3GCON_T3GSS1_SIZE                                 0x1
#define _T3GCON_T3GSS1_LENGTH                               0x1
#define _T3GCON_T3GSS1_MASK                                 0x2
#define _T3GCON_T3GGO_POSN                                  0x3
#define _T3GCON_T3GGO_POSITION                              0x3
#define _T3GCON_T3GGO_SIZE                                  0x1
#define _T3GCON_T3GGO_LENGTH                                0x1
#define _T3GCON_T3GGO_MASK                                  0x8
#define _T3GCON_NOT_T3DONE_POSN                             0x3
#define _T3GCON_NOT_T3DONE_POSITION                         0x3
#define _T3GCON_NOT_T3DONE_SIZE                             0x1
#define _T3GCON_NOT_T3DONE_LENGTH                           0x1
#define _T3GCON_NOT_T3DONE_MASK                             0x8
#define _T3GCON_nT3DONE_POSN                                0x3
#define _T3GCON_nT3DONE_POSITION                            0x3
#define _T3GCON_nT3DONE_SIZE                                0x1
#define _T3GCON_nT3DONE_LENGTH                              0x1
#define _T3GCON_nT3DONE_MASK                                0x8

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0xFB1);
#ifndef _LIB_BUILD
asm("T3CON equ 0FB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned NOT_T3SYNC             :1;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned RD16                   :1;
        unsigned nT3SYNC                :1;
        unsigned SOSCEN                 :1;
        unsigned TCKPS                  :2;
        unsigned TMR3CS                 :2;
    };
    struct {
        unsigned                        :4;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
        unsigned TMR3CS0                :1;
        unsigned TMR3CS1                :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
        unsigned                        :1;
        unsigned SOSCEN3                :1;
        unsigned                        :3;
        unsigned T3RD16                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3OSCEN                :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0xFB1);
// bitfield macros
#define _T3CON_NOT_T3SYNC_POSN                              0x2
#define _T3CON_NOT_T3SYNC_POSITION                          0x2
#define _T3CON_NOT_T3SYNC_SIZE                              0x1
#define _T3CON_NOT_T3SYNC_LENGTH                            0x1
#define _T3CON_NOT_T3SYNC_MASK                              0x4
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_RD16_POSN                                    0x1
#define _T3CON_RD16_POSITION                                0x1
#define _T3CON_RD16_SIZE                                    0x1
#define _T3CON_RD16_LENGTH                                  0x1
#define _T3CON_RD16_MASK                                    0x2
#define _T3CON_nT3SYNC_POSN                                 0x2
#define _T3CON_nT3SYNC_POSITION                             0x2
#define _T3CON_nT3SYNC_SIZE                                 0x1
#define _T3CON_nT3SYNC_LENGTH                               0x1
#define _T3CON_nT3SYNC_MASK                                 0x4
#define _T3CON_SOSCEN_POSN                                  0x3
#define _T3CON_SOSCEN_POSITION                              0x3
#define _T3CON_SOSCEN_SIZE                                  0x1
#define _T3CON_SOSCEN_LENGTH                                0x1
#define _T3CON_SOSCEN_MASK                                  0x8
#define _T3CON_TCKPS_POSN                                   0x4
#define _T3CON_TCKPS_POSITION                               0x4
#define _T3CON_TCKPS_SIZE                                   0x2
#define _T3CON_TCKPS_LENGTH                                 0x2
#define _T3CON_TCKPS_MASK                                   0x30
#define _T3CON_TMR3CS_POSN                                  0x6
#define _T3CON_TMR3CS_POSITION                              0x6
#define _T3CON_TMR3CS_SIZE                                  0x2
#define _T3CON_TMR3CS_LENGTH                                0x2
#define _T3CON_TMR3CS_MASK                                  0xC0
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_TMR3CS0_POSN                                 0x6
#define _T3CON_TMR3CS0_POSITION                             0x6
#define _T3CON_TMR3CS0_SIZE                                 0x1
#define _T3CON_TMR3CS0_LENGTH                               0x1
#define _T3CON_TMR3CS0_MASK                                 0x40
#define _T3CON_TMR3CS1_POSN                                 0x7
#define _T3CON_TMR3CS1_POSITION                             0x7
#define _T3CON_TMR3CS1_SIZE                                 0x1
#define _T3CON_TMR3CS1_LENGTH                               0x1
#define _T3CON_TMR3CS1_MASK                                 0x80
#define _T3CON_RD163_POSN                                   0x1
#define _T3CON_RD163_POSITION                               0x1
#define _T3CON_RD163_SIZE                                   0x1
#define _T3CON_RD163_LENGTH                                 0x1
#define _T3CON_RD163_MASK                                   0x2
#define _T3CON_SOSCEN3_POSN                                 0x3
#define _T3CON_SOSCEN3_POSITION                             0x3
#define _T3CON_SOSCEN3_SIZE                                 0x1
#define _T3CON_SOSCEN3_LENGTH                               0x1
#define _T3CON_SOSCEN3_MASK                                 0x8
#define _T3CON_T3RD16_POSN                                  0x7
#define _T3CON_T3RD16_POSITION                              0x7
#define _T3CON_T3RD16_SIZE                                  0x1
#define _T3CON_T3RD16_LENGTH                                0x1
#define _T3CON_T3RD16_MASK                                  0x80
#define _T3CON_T3OSCEN_POSN                                 0x3
#define _T3CON_T3OSCEN_POSITION                             0x3
#define _T3CON_T3OSCEN_SIZE                                 0x1
#define _T3CON_T3OSCEN_LENGTH                               0x1
#define _T3CON_T3OSCEN_MASK                                 0x8

// Register: TMR3
#define TMR3 TMR3
extern volatile unsigned short          TMR3                __at(0xFB2);
#ifndef _LIB_BUILD
asm("TMR3 equ 0FB2h");
#endif

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0xFB2);
#ifndef _LIB_BUILD
asm("TMR3L equ 0FB2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L                  :8;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0xFB2);
// bitfield macros
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0xFB3);
#ifndef _LIB_BUILD
asm("TMR3H equ 0FB3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H                  :8;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0xFB3);
// bitfield macros
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0xFB4);
#ifndef _LIB_BUILD
asm("PIE4 equ 0FB4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ECCP3IE                :1;
        unsigned CCP4IE                 :1;
        unsigned CCP5IE                 :1;
        unsigned CCP6IE                 :1;
        unsigned CCP7IE                 :1;
        unsigned CCP8IE                 :1;
        unsigned CCP9IE                 :1;
        unsigned CCP10IE                :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0xFB4);
// bitfield macros
#define _PIE4_ECCP3IE_POSN                                  0x0
#define _PIE4_ECCP3IE_POSITION                              0x0
#define _PIE4_ECCP3IE_SIZE                                  0x1
#define _PIE4_ECCP3IE_LENGTH                                0x1
#define _PIE4_ECCP3IE_MASK                                  0x1
#define _PIE4_CCP4IE_POSN                                   0x1
#define _PIE4_CCP4IE_POSITION                               0x1
#define _PIE4_CCP4IE_SIZE                                   0x1
#define _PIE4_CCP4IE_LENGTH                                 0x1
#define _PIE4_CCP4IE_MASK                                   0x2
#define _PIE4_CCP5IE_POSN                                   0x2
#define _PIE4_CCP5IE_POSITION                               0x2
#define _PIE4_CCP5IE_SIZE                                   0x1
#define _PIE4_CCP5IE_LENGTH                                 0x1
#define _PIE4_CCP5IE_MASK                                   0x4
#define _PIE4_CCP6IE_POSN                                   0x3
#define _PIE4_CCP6IE_POSITION                               0x3
#define _PIE4_CCP6IE_SIZE                                   0x1
#define _PIE4_CCP6IE_LENGTH                                 0x1
#define _PIE4_CCP6IE_MASK                                   0x8
#define _PIE4_CCP7IE_POSN                                   0x4
#define _PIE4_CCP7IE_POSITION                               0x4
#define _PIE4_CCP7IE_SIZE                                   0x1
#define _PIE4_CCP7IE_LENGTH                                 0x1
#define _PIE4_CCP7IE_MASK                                   0x10
#define _PIE4_CCP8IE_POSN                                   0x5
#define _PIE4_CCP8IE_POSITION                               0x5
#define _PIE4_CCP8IE_SIZE                                   0x1
#define _PIE4_CCP8IE_LENGTH                                 0x1
#define _PIE4_CCP8IE_MASK                                   0x20
#define _PIE4_CCP9IE_POSN                                   0x6
#define _PIE4_CCP9IE_POSITION                               0x6
#define _PIE4_CCP9IE_SIZE                                   0x1
#define _PIE4_CCP9IE_LENGTH                                 0x1
#define _PIE4_CCP9IE_MASK                                   0x40
#define _PIE4_CCP10IE_POSN                                  0x7
#define _PIE4_CCP10IE_POSITION                              0x7
#define _PIE4_CCP10IE_SIZE                                  0x1
#define _PIE4_CCP10IE_LENGTH                                0x1
#define _PIE4_CCP10IE_MASK                                  0x80

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0xFB5);
#ifndef _LIB_BUILD
asm("PIR4 equ 0FB5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ECCP3IF                :1;
        unsigned CCP4IF                 :1;
        unsigned CCP5IF                 :1;
        unsigned CCP6IF                 :1;
        unsigned CCP7IF                 :1;
        unsigned CCP8IF                 :1;
        unsigned CCP9IF                 :1;
        unsigned CCP10IF                :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0xFB5);
// bitfield macros
#define _PIR4_ECCP3IF_POSN                                  0x0
#define _PIR4_ECCP3IF_POSITION                              0x0
#define _PIR4_ECCP3IF_SIZE                                  0x1
#define _PIR4_ECCP3IF_LENGTH                                0x1
#define _PIR4_ECCP3IF_MASK                                  0x1
#define _PIR4_CCP4IF_POSN                                   0x1
#define _PIR4_CCP4IF_POSITION                               0x1
#define _PIR4_CCP4IF_SIZE                                   0x1
#define _PIR4_CCP4IF_LENGTH                                 0x1
#define _PIR4_CCP4IF_MASK                                   0x2
#define _PIR4_CCP5IF_POSN                                   0x2
#define _PIR4_CCP5IF_POSITION                               0x2
#define _PIR4_CCP5IF_SIZE                                   0x1
#define _PIR4_CCP5IF_LENGTH                                 0x1
#define _PIR4_CCP5IF_MASK                                   0x4
#define _PIR4_CCP6IF_POSN                                   0x3
#define _PIR4_CCP6IF_POSITION                               0x3
#define _PIR4_CCP6IF_SIZE                                   0x1
#define _PIR4_CCP6IF_LENGTH                                 0x1
#define _PIR4_CCP6IF_MASK                                   0x8
#define _PIR4_CCP7IF_POSN                                   0x4
#define _PIR4_CCP7IF_POSITION                               0x4
#define _PIR4_CCP7IF_SIZE                                   0x1
#define _PIR4_CCP7IF_LENGTH                                 0x1
#define _PIR4_CCP7IF_MASK                                   0x10
#define _PIR4_CCP8IF_POSN                                   0x5
#define _PIR4_CCP8IF_POSITION                               0x5
#define _PIR4_CCP8IF_SIZE                                   0x1
#define _PIR4_CCP8IF_LENGTH                                 0x1
#define _PIR4_CCP8IF_MASK                                   0x20
#define _PIR4_CCP9IF_POSN                                   0x6
#define _PIR4_CCP9IF_POSITION                               0x6
#define _PIR4_CCP9IF_SIZE                                   0x1
#define _PIR4_CCP9IF_LENGTH                                 0x1
#define _PIR4_CCP9IF_MASK                                   0x40
#define _PIR4_CCP10IF_POSN                                  0x7
#define _PIR4_CCP10IF_POSITION                              0x7
#define _PIR4_CCP10IF_SIZE                                  0x1
#define _PIR4_CCP10IF_LENGTH                                0x1
#define _PIR4_CCP10IF_MASK                                  0x80

// Register: IPR4
#define IPR4 IPR4
extern volatile unsigned char           IPR4                __at(0xFB6);
#ifndef _LIB_BUILD
asm("IPR4 equ 0FB6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ECCP3IP                :1;
        unsigned CCP4IP                 :1;
        unsigned CCP5IP                 :1;
        unsigned CCP6IP                 :1;
        unsigned CCP7IP                 :1;
        unsigned CCP8IP                 :1;
        unsigned CCP9IP                 :1;
        unsigned CCP10IP                :1;
    };
    struct {
        unsigned CCIP3IP                :1;
    };
} IPR4bits_t;
extern volatile IPR4bits_t IPR4bits __at(0xFB6);
// bitfield macros
#define _IPR4_ECCP3IP_POSN                                  0x0
#define _IPR4_ECCP3IP_POSITION                              0x0
#define _IPR4_ECCP3IP_SIZE                                  0x1
#define _IPR4_ECCP3IP_LENGTH                                0x1
#define _IPR4_ECCP3IP_MASK                                  0x1
#define _IPR4_CCP4IP_POSN                                   0x1
#define _IPR4_CCP4IP_POSITION                               0x1
#define _IPR4_CCP4IP_SIZE                                   0x1
#define _IPR4_CCP4IP_LENGTH                                 0x1
#define _IPR4_CCP4IP_MASK                                   0x2
#define _IPR4_CCP5IP_POSN                                   0x2
#define _IPR4_CCP5IP_POSITION                               0x2
#define _IPR4_CCP5IP_SIZE                                   0x1
#define _IPR4_CCP5IP_LENGTH                                 0x1
#define _IPR4_CCP5IP_MASK                                   0x4
#define _IPR4_CCP6IP_POSN                                   0x3
#define _IPR4_CCP6IP_POSITION                               0x3
#define _IPR4_CCP6IP_SIZE                                   0x1
#define _IPR4_CCP6IP_LENGTH                                 0x1
#define _IPR4_CCP6IP_MASK                                   0x8
#define _IPR4_CCP7IP_POSN                                   0x4
#define _IPR4_CCP7IP_POSITION                               0x4
#define _IPR4_CCP7IP_SIZE                                   0x1
#define _IPR4_CCP7IP_LENGTH                                 0x1
#define _IPR4_CCP7IP_MASK                                   0x10
#define _IPR4_CCP8IP_POSN                                   0x5
#define _IPR4_CCP8IP_POSITION                               0x5
#define _IPR4_CCP8IP_SIZE                                   0x1
#define _IPR4_CCP8IP_LENGTH                                 0x1
#define _IPR4_CCP8IP_MASK                                   0x20
#define _IPR4_CCP9IP_POSN                                   0x6
#define _IPR4_CCP9IP_POSITION                               0x6
#define _IPR4_CCP9IP_SIZE                                   0x1
#define _IPR4_CCP9IP_LENGTH                                 0x1
#define _IPR4_CCP9IP_MASK                                   0x40
#define _IPR4_CCP10IP_POSN                                  0x7
#define _IPR4_CCP10IP_POSITION                              0x7
#define _IPR4_CCP10IP_SIZE                                  0x1
#define _IPR4_CCP10IP_LENGTH                                0x1
#define _IPR4_CCP10IP_MASK                                  0x80
#define _IPR4_CCIP3IP_POSN                                  0x0
#define _IPR4_CCIP3IP_POSITION                              0x0
#define _IPR4_CCIP3IP_SIZE                                  0x1
#define _IPR4_CCIP3IP_LENGTH                                0x1
#define _IPR4_CCIP3IP_MASK                                  0x1

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0xFB7);
#ifndef _LIB_BUILD
asm("PIE5 equ 0FB7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IE                 :1;
        unsigned TMR5IE                 :1;
        unsigned TMR6IE                 :1;
        unsigned                        :1;
        unsigned TMR8IE                 :1;
        unsigned ACTLOCKIE              :1;
        unsigned ACTORSIE               :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0xFB7);
// bitfield macros
#define _PIE5_TMR4IE_POSN                                   0x0
#define _PIE5_TMR4IE_POSITION                               0x0
#define _PIE5_TMR4IE_SIZE                                   0x1
#define _PIE5_TMR4IE_LENGTH                                 0x1
#define _PIE5_TMR4IE_MASK                                   0x1
#define _PIE5_TMR5IE_POSN                                   0x1
#define _PIE5_TMR5IE_POSITION                               0x1
#define _PIE5_TMR5IE_SIZE                                   0x1
#define _PIE5_TMR5IE_LENGTH                                 0x1
#define _PIE5_TMR5IE_MASK                                   0x2
#define _PIE5_TMR6IE_POSN                                   0x2
#define _PIE5_TMR6IE_POSITION                               0x2
#define _PIE5_TMR6IE_SIZE                                   0x1
#define _PIE5_TMR6IE_LENGTH                                 0x1
#define _PIE5_TMR6IE_MASK                                   0x4
#define _PIE5_TMR8IE_POSN                                   0x4
#define _PIE5_TMR8IE_POSITION                               0x4
#define _PIE5_TMR8IE_SIZE                                   0x1
#define _PIE5_TMR8IE_LENGTH                                 0x1
#define _PIE5_TMR8IE_MASK                                   0x10
#define _PIE5_ACTLOCKIE_POSN                                0x5
#define _PIE5_ACTLOCKIE_POSITION                            0x5
#define _PIE5_ACTLOCKIE_SIZE                                0x1
#define _PIE5_ACTLOCKIE_LENGTH                              0x1
#define _PIE5_ACTLOCKIE_MASK                                0x20
#define _PIE5_ACTORSIE_POSN                                 0x6
#define _PIE5_ACTORSIE_POSITION                             0x6
#define _PIE5_ACTORSIE_SIZE                                 0x1
#define _PIE5_ACTORSIE_LENGTH                               0x1
#define _PIE5_ACTORSIE_MASK                                 0x40

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0xFB8);
#ifndef _LIB_BUILD
asm("PIR5 equ 0FB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IF                 :1;
        unsigned TMR5IF                 :1;
        unsigned TMR6IF                 :1;
        unsigned                        :1;
        unsigned TMR8IF                 :1;
        unsigned ACTLOCKIF              :1;
        unsigned ACTORSIF               :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0xFB8);
// bitfield macros
#define _PIR5_TMR4IF_POSN                                   0x0
#define _PIR5_TMR4IF_POSITION                               0x0
#define _PIR5_TMR4IF_SIZE                                   0x1
#define _PIR5_TMR4IF_LENGTH                                 0x1
#define _PIR5_TMR4IF_MASK                                   0x1
#define _PIR5_TMR5IF_POSN                                   0x1
#define _PIR5_TMR5IF_POSITION                               0x1
#define _PIR5_TMR5IF_SIZE                                   0x1
#define _PIR5_TMR5IF_LENGTH                                 0x1
#define _PIR5_TMR5IF_MASK                                   0x2
#define _PIR5_TMR6IF_POSN                                   0x2
#define _PIR5_TMR6IF_POSITION                               0x2
#define _PIR5_TMR6IF_SIZE                                   0x1
#define _PIR5_TMR6IF_LENGTH                                 0x1
#define _PIR5_TMR6IF_MASK                                   0x4
#define _PIR5_TMR8IF_POSN                                   0x4
#define _PIR5_TMR8IF_POSITION                               0x4
#define _PIR5_TMR8IF_SIZE                                   0x1
#define _PIR5_TMR8IF_LENGTH                                 0x1
#define _PIR5_TMR8IF_MASK                                   0x10
#define _PIR5_ACTLOCKIF_POSN                                0x5
#define _PIR5_ACTLOCKIF_POSITION                            0x5
#define _PIR5_ACTLOCKIF_SIZE                                0x1
#define _PIR5_ACTLOCKIF_LENGTH                              0x1
#define _PIR5_ACTLOCKIF_MASK                                0x20
#define _PIR5_ACTORSIF_POSN                                 0x6
#define _PIR5_ACTORSIF_POSITION                             0x6
#define _PIR5_ACTORSIF_SIZE                                 0x1
#define _PIR5_ACTORSIF_LENGTH                               0x1
#define _PIR5_ACTORSIF_MASK                                 0x40

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0xFB9);
#ifndef _LIB_BUILD
asm("CCP1CON equ 0FB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1M                  :4;
        unsigned DC1B                   :2;
        unsigned P1M                    :2;
    };
    struct {
        unsigned CCP1M0                 :1;
        unsigned CCP1M1                 :1;
        unsigned CCP1M2                 :1;
        unsigned CCP1M3                 :1;
        unsigned DC1B0                  :1;
        unsigned DC1B1                  :1;
        unsigned P1M0                   :1;
        unsigned P1M1                   :1;
    };
    struct {
        unsigned                        :4;
        unsigned CCP1Y                  :1;
        unsigned CCP1X                  :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0xFB9);
// bitfield macros
#define _CCP1CON_CCP1M_POSN                                 0x0
#define _CCP1CON_CCP1M_POSITION                             0x0
#define _CCP1CON_CCP1M_SIZE                                 0x4
#define _CCP1CON_CCP1M_LENGTH                               0x4
#define _CCP1CON_CCP1M_MASK                                 0xF
#define _CCP1CON_DC1B_POSN                                  0x4
#define _CCP1CON_DC1B_POSITION                              0x4
#define _CCP1CON_DC1B_SIZE                                  0x2
#define _CCP1CON_DC1B_LENGTH                                0x2
#define _CCP1CON_DC1B_MASK                                  0x30
#define _CCP1CON_P1M_POSN                                   0x6
#define _CCP1CON_P1M_POSITION                               0x6
#define _CCP1CON_P1M_SIZE                                   0x2
#define _CCP1CON_P1M_LENGTH                                 0x2
#define _CCP1CON_P1M_MASK                                   0xC0
#define _CCP1CON_CCP1M0_POSN                                0x0
#define _CCP1CON_CCP1M0_POSITION                            0x0
#define _CCP1CON_CCP1M0_SIZE                                0x1
#define _CCP1CON_CCP1M0_LENGTH                              0x1
#define _CCP1CON_CCP1M0_MASK                                0x1
#define _CCP1CON_CCP1M1_POSN                                0x1
#define _CCP1CON_CCP1M1_POSITION                            0x1
#define _CCP1CON_CCP1M1_SIZE                                0x1
#define _CCP1CON_CCP1M1_LENGTH                              0x1
#define _CCP1CON_CCP1M1_MASK                                0x2
#define _CCP1CON_CCP1M2_POSN                                0x2
#define _CCP1CON_CCP1M2_POSITION                            0x2
#define _CCP1CON_CCP1M2_SIZE                                0x1
#define _CCP1CON_CCP1M2_LENGTH                              0x1
#define _CCP1CON_CCP1M2_MASK                                0x4
#define _CCP1CON_CCP1M3_POSN                                0x3
#define _CCP1CON_CCP1M3_POSITION                            0x3
#define _CCP1CON_CCP1M3_SIZE                                0x1
#define _CCP1CON_CCP1M3_LENGTH                              0x1
#define _CCP1CON_CCP1M3_MASK                                0x8
#define _CCP1CON_DC1B0_POSN                                 0x4
#define _CCP1CON_DC1B0_POSITION                             0x4
#define _CCP1CON_DC1B0_SIZE                                 0x1
#define _CCP1CON_DC1B0_LENGTH                               0x1
#define _CCP1CON_DC1B0_MASK                                 0x10
#define _CCP1CON_DC1B1_POSN                                 0x5
#define _CCP1CON_DC1B1_POSITION                             0x5
#define _CCP1CON_DC1B1_SIZE                                 0x1
#define _CCP1CON_DC1B1_LENGTH                               0x1
#define _CCP1CON_DC1B1_MASK                                 0x20
#define _CCP1CON_P1M0_POSN                                  0x6
#define _CCP1CON_P1M0_POSITION                              0x6
#define _CCP1CON_P1M0_SIZE                                  0x1
#define _CCP1CON_P1M0_LENGTH                                0x1
#define _CCP1CON_P1M0_MASK                                  0x40
#define _CCP1CON_P1M1_POSN                                  0x7
#define _CCP1CON_P1M1_POSITION                              0x7
#define _CCP1CON_P1M1_SIZE                                  0x1
#define _CCP1CON_P1M1_LENGTH                                0x1
#define _CCP1CON_P1M1_MASK                                  0x80
#define _CCP1CON_CCP1Y_POSN                                 0x4
#define _CCP1CON_CCP1Y_POSITION                             0x4
#define _CCP1CON_CCP1Y_SIZE                                 0x1
#define _CCP1CON_CCP1Y_LENGTH                               0x1
#define _CCP1CON_CCP1Y_MASK                                 0x10
#define _CCP1CON_CCP1X_POSN                                 0x5
#define _CCP1CON_CCP1X_POSITION                             0x5
#define _CCP1CON_CCP1X_SIZE                                 0x1
#define _CCP1CON_CCP1X_LENGTH                               0x1
#define _CCP1CON_CCP1X_MASK                                 0x20

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0xFBA);
#ifndef _LIB_BUILD
asm("CCPR1 equ 0FBAh");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0xFBA);
#ifndef _LIB_BUILD
asm("CCPR1L equ 0FBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR1L                 :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0xFBA);
// bitfield macros
#define _CCPR1L_CCPR1L_POSN                                 0x0
#define _CCPR1L_CCPR1L_POSITION                             0x0
#define _CCPR1L_CCPR1L_SIZE                                 0x8
#define _CCPR1L_CCPR1L_LENGTH                               0x8
#define _CCPR1L_CCPR1L_MASK                                 0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0xFBB);
#ifndef _LIB_BUILD
asm("CCPR1H equ 0FBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPR1H                 :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0xFBB);
// bitfield macros
#define _CCPR1H_CCPR1H_POSN                                 0x0
#define _CCPR1H_CCPR1H_POSITION                             0x0
#define _CCPR1H_CCPR1H_SIZE                                 0x8
#define _CCPR1H_CCPR1H_LENGTH                               0x8
#define _CCPR1H_CCPR1H_MASK                                 0xFF

// Register: ECCP1DEL
#define ECCP1DEL ECCP1DEL
extern volatile unsigned char           ECCP1DEL            __at(0xFBC);
#ifndef _LIB_BUILD
asm("ECCP1DEL equ 0FBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1DC                   :7;
        unsigned P1RSEN                 :1;
    };
    struct {
        unsigned P1DC0                  :1;
        unsigned P1DC1                  :1;
        unsigned P1DC2                  :1;
        unsigned P1DC3                  :1;
        unsigned P1DC4                  :1;
        unsigned P1DC5                  :1;
        unsigned P1DC6                  :1;
    };
} ECCP1DELbits_t;
extern volatile ECCP1DELbits_t ECCP1DELbits __at(0xFBC);
// bitfield macros
#define _ECCP1DEL_P1DC_POSN                                 0x0
#define _ECCP1DEL_P1DC_POSITION                             0x0
#define _ECCP1DEL_P1DC_SIZE                                 0x7
#define _ECCP1DEL_P1DC_LENGTH                               0x7
#define _ECCP1DEL_P1DC_MASK                                 0x7F
#define _ECCP1DEL_P1RSEN_POSN                               0x7
#define _ECCP1DEL_P1RSEN_POSITION                           0x7
#define _ECCP1DEL_P1RSEN_SIZE                               0x1
#define _ECCP1DEL_P1RSEN_LENGTH                             0x1
#define _ECCP1DEL_P1RSEN_MASK                               0x80
#define _ECCP1DEL_P1DC0_POSN                                0x0
#define _ECCP1DEL_P1DC0_POSITION                            0x0
#define _ECCP1DEL_P1DC0_SIZE                                0x1
#define _ECCP1DEL_P1DC0_LENGTH                              0x1
#define _ECCP1DEL_P1DC0_MASK                                0x1
#define _ECCP1DEL_P1DC1_POSN                                0x1
#define _ECCP1DEL_P1DC1_POSITION                            0x1
#define _ECCP1DEL_P1DC1_SIZE                                0x1
#define _ECCP1DEL_P1DC1_LENGTH                              0x1
#define _ECCP1DEL_P1DC1_MASK                                0x2
#define _ECCP1DEL_P1DC2_POSN                                0x2
#define _ECCP1DEL_P1DC2_POSITION                            0x2
#define _ECCP1DEL_P1DC2_SIZE                                0x1
#define _ECCP1DEL_P1DC2_LENGTH                              0x1
#define _ECCP1DEL_P1DC2_MASK                                0x4
#define _ECCP1DEL_P1DC3_POSN                                0x3
#define _ECCP1DEL_P1DC3_POSITION                            0x3
#define _ECCP1DEL_P1DC3_SIZE                                0x1
#define _ECCP1DEL_P1DC3_LENGTH                              0x1
#define _ECCP1DEL_P1DC3_MASK                                0x8
#define _ECCP1DEL_P1DC4_POSN                                0x4
#define _ECCP1DEL_P1DC4_POSITION                            0x4
#define _ECCP1DEL_P1DC4_SIZE                                0x1
#define _ECCP1DEL_P1DC4_LENGTH                              0x1
#define _ECCP1DEL_P1DC4_MASK                                0x10
#define _ECCP1DEL_P1DC5_POSN                                0x5
#define _ECCP1DEL_P1DC5_POSITION                            0x5
#define _ECCP1DEL_P1DC5_SIZE                                0x1
#define _ECCP1DEL_P1DC5_LENGTH                              0x1
#define _ECCP1DEL_P1DC5_MASK                                0x20
#define _ECCP1DEL_P1DC6_POSN                                0x6
#define _ECCP1DEL_P1DC6_POSITION                            0x6
#define _ECCP1DEL_P1DC6_SIZE                                0x1
#define _ECCP1DEL_P1DC6_LENGTH                              0x1
#define _ECCP1DEL_P1DC6_MASK                                0x40

// Register: ECCP1AS
#define ECCP1AS ECCP1AS
extern volatile unsigned char           ECCP1AS             __at(0xFBD);
#ifndef _LIB_BUILD
asm("ECCP1AS equ 0FBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSS1BD                 :2;
        unsigned PSS1AC                 :2;
        unsigned ECCP1AS                :3;
        unsigned ECCP1ASE               :1;
    };
    struct {
        unsigned PSS1BD0                :1;
        unsigned PSS1BD1                :1;
        unsigned PSS1AC0                :1;
        unsigned PSS1AC1                :1;
        unsigned ECCP1AS0               :1;
        unsigned ECCP1AS1               :1;
        unsigned ECCP1AS2               :1;
    };
} ECCP1ASbits_t;
extern volatile ECCP1ASbits_t ECCP1ASbits __at(0xFBD);
// bitfield macros
#define _ECCP1AS_PSS1BD_POSN                                0x0
#define _ECCP1AS_PSS1BD_POSITION                            0x0
#define _ECCP1AS_PSS1BD_SIZE                                0x2
#define _ECCP1AS_PSS1BD_LENGTH                              0x2
#define _ECCP1AS_PSS1BD_MASK                                0x3
#define _ECCP1AS_PSS1AC_POSN                                0x2
#define _ECCP1AS_PSS1AC_POSITION                            0x2
#define _ECCP1AS_PSS1AC_SIZE                                0x2
#define _ECCP1AS_PSS1AC_LENGTH                              0x2
#define _ECCP1AS_PSS1AC_MASK                                0xC
#define _ECCP1AS_ECCP1AS_POSN                               0x4
#define _ECCP1AS_ECCP1AS_POSITION                           0x4
#define _ECCP1AS_ECCP1AS_SIZE                               0x3
#define _ECCP1AS_ECCP1AS_LENGTH                             0x3
#define _ECCP1AS_ECCP1AS_MASK                               0x70
#define _ECCP1AS_ECCP1ASE_POSN                              0x7
#define _ECCP1AS_ECCP1ASE_POSITION                          0x7
#define _ECCP1AS_ECCP1ASE_SIZE                              0x1
#define _ECCP1AS_ECCP1ASE_LENGTH                            0x1
#define _ECCP1AS_ECCP1ASE_MASK                              0x80
#define _ECCP1AS_PSS1BD0_POSN                               0x0
#define _ECCP1AS_PSS1BD0_POSITION                           0x0
#define _ECCP1AS_PSS1BD0_SIZE                               0x1
#define _ECCP1AS_PSS1BD0_LENGTH                             0x1
#define _ECCP1AS_PSS1BD0_MASK                               0x1
#define _ECCP1AS_PSS1BD1_POSN                               0x1
#define _ECCP1AS_PSS1BD1_POSITION                           0x1
#define _ECCP1AS_PSS1BD1_SIZE                               0x1
#define _ECCP1AS_PSS1BD1_LENGTH                             0x1
#define _ECCP1AS_PSS1BD1_MASK                               0x2
#define _ECCP1AS_PSS1AC0_POSN                               0x2
#define _ECCP1AS_PSS1AC0_POSITION                           0x2
#define _ECCP1AS_PSS1AC0_SIZE                               0x1
#define _ECCP1AS_PSS1AC0_LENGTH                             0x1
#define _ECCP1AS_PSS1AC0_MASK                               0x4
#define _ECCP1AS_PSS1AC1_POSN                               0x3
#define _ECCP1AS_PSS1AC1_POSITION                           0x3
#define _ECCP1AS_PSS1AC1_SIZE                               0x1
#define _ECCP1AS_PSS1AC1_LENGTH                             0x1
#define _ECCP1AS_PSS1AC1_MASK                               0x8
#define _ECCP1AS_ECCP1AS0_POSN                              0x4
#define _ECCP1AS_ECCP1AS0_POSITION                          0x4
#define _ECCP1AS_ECCP1AS0_SIZE                              0x1
#define _ECCP1AS_ECCP1AS0_LENGTH                            0x1
#define _ECCP1AS_ECCP1AS0_MASK                              0x10
#define _ECCP1AS_ECCP1AS1_POSN                              0x5
#define _ECCP1AS_ECCP1AS1_POSITION                          0x5
#define _ECCP1AS_ECCP1AS1_SIZE                              0x1
#define _ECCP1AS_ECCP1AS1_LENGTH                            0x1
#define _ECCP1AS_ECCP1AS1_MASK                              0x20
#define _ECCP1AS_ECCP1AS2_POSN                              0x6
#define _ECCP1AS_ECCP1AS2_POSITION                          0x6
#define _ECCP1AS_ECCP1AS2_SIZE                              0x1
#define _ECCP1AS_ECCP1AS2_LENGTH                            0x1
#define _ECCP1AS_ECCP1AS2_MASK                              0x40

// Register: CVRCONL
#define CVRCONL CVRCONL
extern volatile unsigned char           CVRCONL             __at(0xFBE);
#ifndef _LIB_BUILD
asm("CVRCONL equ 0FBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CVRNSS                 :1;
        unsigned                        :3;
        unsigned CVRPSS                 :2;
        unsigned CVROE                  :1;
        unsigned CVREN                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CVRPSS0                :1;
        unsigned CVRPSS1                :1;
    };
} CVRCONLbits_t;
extern volatile CVRCONLbits_t CVRCONLbits __at(0xFBE);
// bitfield macros
#define _CVRCONL_CVRNSS_POSN                                0x0
#define _CVRCONL_CVRNSS_POSITION                            0x0
#define _CVRCONL_CVRNSS_SIZE                                0x1
#define _CVRCONL_CVRNSS_LENGTH                              0x1
#define _CVRCONL_CVRNSS_MASK                                0x1
#define _CVRCONL_CVRPSS_POSN                                0x4
#define _CVRCONL_CVRPSS_POSITION                            0x4
#define _CVRCONL_CVRPSS_SIZE                                0x2
#define _CVRCONL_CVRPSS_LENGTH                              0x2
#define _CVRCONL_CVRPSS_MASK                                0x30
#define _CVRCONL_CVROE_POSN                                 0x6
#define _CVRCONL_CVROE_POSITION                             0x6
#define _CVRCONL_CVROE_SIZE                                 0x1
#define _CVRCONL_CVROE_LENGTH                               0x1
#define _CVRCONL_CVROE_MASK                                 0x40
#define _CVRCONL_CVREN_POSN                                 0x7
#define _CVRCONL_CVREN_POSITION                             0x7
#define _CVRCONL_CVREN_SIZE                                 0x1
#define _CVRCONL_CVREN_LENGTH                               0x1
#define _CVRCONL_CVREN_MASK                                 0x80
#define _CVRCONL_CVRPSS0_POSN                               0x4
#define _CVRCONL_CVRPSS0_POSITION                           0x4
#define _CVRCONL_CVRPSS0_SIZE                               0x1
#define _CVRCONL_CVRPSS0_LENGTH                             0x1
#define _CVRCONL_CVRPSS0_MASK                               0x10
#define _CVRCONL_CVRPSS1_POSN                               0x5
#define _CVRCONL_CVRPSS1_POSITION                           0x5
#define _CVRCONL_CVRPSS1_SIZE                               0x1
#define _CVRCONL_CVRPSS1_LENGTH                             0x1
#define _CVRCONL_CVRPSS1_MASK                               0x20

// Register: CVRCONH
#define CVRCONH CVRCONH
extern volatile unsigned char           CVRCONH             __at(0xFBF);
#ifndef _LIB_BUILD
asm("CVRCONH equ 0FBFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CVR                    :5;
    };
    struct {
        unsigned CVR0                   :1;
        unsigned CVR1                   :1;
        unsigned CVR2                   :1;
        unsigned CVR3                   :1;
        unsigned CVR4                   :1;
    };
} CVRCONHbits_t;
extern volatile CVRCONHbits_t CVRCONHbits __at(0xFBF);
// bitfield macros
#define _CVRCONH_CVR_POSN                                   0x0
#define _CVRCONH_CVR_POSITION                               0x0
#define _CVRCONH_CVR_SIZE                                   0x5
#define _CVRCONH_CVR_LENGTH                                 0x5
#define _CVRCONH_CVR_MASK                                   0x1F
#define _CVRCONH_CVR0_POSN                                  0x0
#define _CVRCONH_CVR0_POSITION                              0x0
#define _CVRCONH_CVR0_SIZE                                  0x1
#define _CVRCONH_CVR0_LENGTH                                0x1
#define _CVRCONH_CVR0_MASK                                  0x1
#define _CVRCONH_CVR1_POSN                                  0x1
#define _CVRCONH_CVR1_POSITION                              0x1
#define _CVRCONH_CVR1_SIZE                                  0x1
#define _CVRCONH_CVR1_LENGTH                                0x1
#define _CVRCONH_CVR1_MASK                                  0x2
#define _CVRCONH_CVR2_POSN                                  0x2
#define _CVRCONH_CVR2_POSITION                              0x2
#define _CVRCONH_CVR2_SIZE                                  0x1
#define _CVRCONH_CVR2_LENGTH                                0x1
#define _CVRCONH_CVR2_MASK                                  0x4
#define _CVRCONH_CVR3_POSN                                  0x3
#define _CVRCONH_CVR3_POSITION                              0x3
#define _CVRCONH_CVR3_SIZE                                  0x1
#define _CVRCONH_CVR3_LENGTH                                0x1
#define _CVRCONH_CVR3_MASK                                  0x8
#define _CVRCONH_CVR4_POSN                                  0x4
#define _CVRCONH_CVR4_POSITION                              0x4
#define _CVRCONH_CVR4_SIZE                                  0x1
#define _CVRCONH_CVR4_LENGTH                                0x1
#define _CVRCONH_CVR4_MASK                                  0x10

// Register: ADCON1L
#define ADCON1L ADCON1L
extern volatile unsigned char           ADCON1L             __at(0xFC0);
#ifndef _LIB_BUILD
asm("ADCON1L equ 0FC0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DONE                   :1;
        unsigned SAMP                   :1;
        unsigned ASAM                   :1;
        unsigned                        :1;
        unsigned SSRC                   :4;
    };
    struct {
        unsigned                        :4;
        unsigned SSRC0                  :1;
        unsigned SSRC1                  :1;
        unsigned SSRC2                  :1;
        unsigned SSRC3                  :1;
    };
} ADCON1Lbits_t;
extern volatile ADCON1Lbits_t ADCON1Lbits __at(0xFC0);
// bitfield macros
#define _ADCON1L_DONE_POSN                                  0x0
#define _ADCON1L_DONE_POSITION                              0x0
#define _ADCON1L_DONE_SIZE                                  0x1
#define _ADCON1L_DONE_LENGTH                                0x1
#define _ADCON1L_DONE_MASK                                  0x1
#define _ADCON1L_SAMP_POSN                                  0x1
#define _ADCON1L_SAMP_POSITION                              0x1
#define _ADCON1L_SAMP_SIZE                                  0x1
#define _ADCON1L_SAMP_LENGTH                                0x1
#define _ADCON1L_SAMP_MASK                                  0x2
#define _ADCON1L_ASAM_POSN                                  0x2
#define _ADCON1L_ASAM_POSITION                              0x2
#define _ADCON1L_ASAM_SIZE                                  0x1
#define _ADCON1L_ASAM_LENGTH                                0x1
#define _ADCON1L_ASAM_MASK                                  0x4
#define _ADCON1L_SSRC_POSN                                  0x4
#define _ADCON1L_SSRC_POSITION                              0x4
#define _ADCON1L_SSRC_SIZE                                  0x4
#define _ADCON1L_SSRC_LENGTH                                0x4
#define _ADCON1L_SSRC_MASK                                  0xF0
#define _ADCON1L_SSRC0_POSN                                 0x4
#define _ADCON1L_SSRC0_POSITION                             0x4
#define _ADCON1L_SSRC0_SIZE                                 0x1
#define _ADCON1L_SSRC0_LENGTH                               0x1
#define _ADCON1L_SSRC0_MASK                                 0x10
#define _ADCON1L_SSRC1_POSN                                 0x5
#define _ADCON1L_SSRC1_POSITION                             0x5
#define _ADCON1L_SSRC1_SIZE                                 0x1
#define _ADCON1L_SSRC1_LENGTH                               0x1
#define _ADCON1L_SSRC1_MASK                                 0x20
#define _ADCON1L_SSRC2_POSN                                 0x6
#define _ADCON1L_SSRC2_POSITION                             0x6
#define _ADCON1L_SSRC2_SIZE                                 0x1
#define _ADCON1L_SSRC2_LENGTH                               0x1
#define _ADCON1L_SSRC2_MASK                                 0x40
#define _ADCON1L_SSRC3_POSN                                 0x7
#define _ADCON1L_SSRC3_POSITION                             0x7
#define _ADCON1L_SSRC3_SIZE                                 0x1
#define _ADCON1L_SSRC3_LENGTH                               0x1
#define _ADCON1L_SSRC3_MASK                                 0x80

// Register: ADCON1H
#define ADCON1H ADCON1H
extern volatile unsigned char           ADCON1H             __at(0xFC1);
#ifndef _LIB_BUILD
asm("ADCON1H equ 0FC1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FORM                   :2;
        unsigned MODE12                 :1;
        unsigned                        :4;
        unsigned ADON                   :1;
    };
    struct {
        unsigned FORM0                  :1;
        unsigned FORM1                  :1;
    };
} ADCON1Hbits_t;
extern volatile ADCON1Hbits_t ADCON1Hbits __at(0xFC1);
// bitfield macros
#define _ADCON1H_FORM_POSN                                  0x0
#define _ADCON1H_FORM_POSITION                              0x0
#define _ADCON1H_FORM_SIZE                                  0x2
#define _ADCON1H_FORM_LENGTH                                0x2
#define _ADCON1H_FORM_MASK                                  0x3
#define _ADCON1H_MODE12_POSN                                0x2
#define _ADCON1H_MODE12_POSITION                            0x2
#define _ADCON1H_MODE12_SIZE                                0x1
#define _ADCON1H_MODE12_LENGTH                              0x1
#define _ADCON1H_MODE12_MASK                                0x4
#define _ADCON1H_ADON_POSN                                  0x7
#define _ADCON1H_ADON_POSITION                              0x7
#define _ADCON1H_ADON_SIZE                                  0x1
#define _ADCON1H_ADON_LENGTH                                0x1
#define _ADCON1H_ADON_MASK                                  0x80
#define _ADCON1H_FORM0_POSN                                 0x0
#define _ADCON1H_FORM0_POSITION                             0x0
#define _ADCON1H_FORM0_SIZE                                 0x1
#define _ADCON1H_FORM0_LENGTH                               0x1
#define _ADCON1H_FORM0_MASK                                 0x1
#define _ADCON1H_FORM1_POSN                                 0x1
#define _ADCON1H_FORM1_POSITION                             0x1
#define _ADCON1H_FORM1_SIZE                                 0x1
#define _ADCON1H_FORM1_LENGTH                               0x1
#define _ADCON1H_FORM1_MASK                                 0x2

// Register: ADCBUF0
#define ADCBUF0 ADCBUF0
extern volatile unsigned short          ADCBUF0             __at(0xFC2);
#ifndef _LIB_BUILD
asm("ADCBUF0 equ 0FC2h");
#endif

// Register: ADCBUF0L
#define ADCBUF0L ADCBUF0L
extern volatile unsigned char           ADCBUF0L            __at(0xFC2);
#ifndef _LIB_BUILD
asm("ADCBUF0L equ 0FC2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF0L               :8;
    };
} ADCBUF0Lbits_t;
extern volatile ADCBUF0Lbits_t ADCBUF0Lbits __at(0xFC2);
// bitfield macros
#define _ADCBUF0L_ADCBUF0L_POSN                             0x0
#define _ADCBUF0L_ADCBUF0L_POSITION                         0x0
#define _ADCBUF0L_ADCBUF0L_SIZE                             0x8
#define _ADCBUF0L_ADCBUF0L_LENGTH                           0x8
#define _ADCBUF0L_ADCBUF0L_MASK                             0xFF

// Register: ADCBUF0H
#define ADCBUF0H ADCBUF0H
extern volatile unsigned char           ADCBUF0H            __at(0xFC3);
#ifndef _LIB_BUILD
asm("ADCBUF0H equ 0FC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCBUF0H               :8;
    };
} ADCBUF0Hbits_t;
extern volatile ADCBUF0Hbits_t ADCBUF0Hbits __at(0xFC3);
// bitfield macros
#define _ADCBUF0H_ADCBUF0H_POSN                             0x0
#define _ADCBUF0H_ADCBUF0H_POSITION                         0x0
#define _ADCBUF0H_ADCBUF0H_SIZE                             0x8
#define _ADCBUF0H_ADCBUF0H_LENGTH                           0x8
#define _ADCBUF0H_ADCBUF0H_MASK                             0xFF

// Register: CMSTAT
#define CMSTAT CMSTAT
extern volatile unsigned char           CMSTAT              __at(0xFC4);
#ifndef _LIB_BUILD
asm("CMSTAT equ 0FC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
        unsigned C3OUT                  :1;
    };
} CMSTATbits_t;
extern volatile CMSTATbits_t CMSTATbits __at(0xFC4);
// bitfield macros
#define _CMSTAT_C1OUT_POSN                                  0x0
#define _CMSTAT_C1OUT_POSITION                              0x0
#define _CMSTAT_C1OUT_SIZE                                  0x1
#define _CMSTAT_C1OUT_LENGTH                                0x1
#define _CMSTAT_C1OUT_MASK                                  0x1
#define _CMSTAT_C2OUT_POSN                                  0x1
#define _CMSTAT_C2OUT_POSITION                              0x1
#define _CMSTAT_C2OUT_SIZE                                  0x1
#define _CMSTAT_C2OUT_LENGTH                                0x1
#define _CMSTAT_C2OUT_MASK                                  0x2
#define _CMSTAT_C3OUT_POSN                                  0x2
#define _CMSTAT_C3OUT_POSITION                              0x2
#define _CMSTAT_C3OUT_SIZE                                  0x1
#define _CMSTAT_C3OUT_LENGTH                                0x1
#define _CMSTAT_C3OUT_MASK                                  0x4

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0xFC5);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0FC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0xFC5);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0xFC6);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0FC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0xFC6);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0xFC7);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 0FC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned R_NOT_W                :1;
    };
    struct {
        unsigned                        :5;
        unsigned D_NOT_A                :1;
    };
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_ADDRESS            :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned I2C_READ1              :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :5;
        unsigned D_NOT_A1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_NOT_W1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_W2                 :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_A2                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_WRITE1             :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_ADDRESS1           :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned R                      :1;
        unsigned                        :2;
        unsigned D                      :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned                        :2;
        unsigned DA                     :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0xFC7);
// bitfield macros
#define _SSP1STAT_R_NOT_W_POSN                              0x2
#define _SSP1STAT_R_NOT_W_POSITION                          0x2
#define _SSP1STAT_R_NOT_W_SIZE                              0x1
#define _SSP1STAT_R_NOT_W_LENGTH                            0x1
#define _SSP1STAT_R_NOT_W_MASK                              0x4
#define _SSP1STAT_D_NOT_A_POSN                              0x5
#define _SSP1STAT_D_NOT_A_POSITION                          0x5
#define _SSP1STAT_D_NOT_A_SIZE                              0x1
#define _SSP1STAT_D_NOT_A_LENGTH                            0x1
#define _SSP1STAT_D_NOT_A_MASK                              0x20
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_NOT_WRITE_POSN                            0x2
#define _SSP1STAT_NOT_WRITE_POSITION                        0x2
#define _SSP1STAT_NOT_WRITE_SIZE                            0x1
#define _SSP1STAT_NOT_WRITE_LENGTH                          0x1
#define _SSP1STAT_NOT_WRITE_MASK                            0x4
#define _SSP1STAT_NOT_ADDRESS_POSN                          0x5
#define _SSP1STAT_NOT_ADDRESS_POSITION                      0x5
#define _SSP1STAT_NOT_ADDRESS_SIZE                          0x1
#define _SSP1STAT_NOT_ADDRESS_LENGTH                        0x1
#define _SSP1STAT_NOT_ADDRESS_MASK                          0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_D_NOT_A1_POSN                             0x5
#define _SSP1STAT_D_NOT_A1_POSITION                         0x5
#define _SSP1STAT_D_NOT_A1_SIZE                             0x1
#define _SSP1STAT_D_NOT_A1_LENGTH                           0x1
#define _SSP1STAT_D_NOT_A1_MASK                             0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_NOT_W1_POSN                             0x2
#define _SSP1STAT_R_NOT_W1_POSITION                         0x2
#define _SSP1STAT_R_NOT_W1_SIZE                             0x1
#define _SSP1STAT_R_NOT_W1_LENGTH                           0x1
#define _SSP1STAT_R_NOT_W1_MASK                             0x4
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_NOT_W2_POSN                               0x2
#define _SSP1STAT_NOT_W2_POSITION                           0x2
#define _SSP1STAT_NOT_W2_SIZE                               0x1
#define _SSP1STAT_NOT_W2_LENGTH                             0x1
#define _SSP1STAT_NOT_W2_MASK                               0x4
#define _SSP1STAT_NOT_A2_POSN                               0x5
#define _SSP1STAT_NOT_A2_POSITION                           0x5
#define _SSP1STAT_NOT_A2_SIZE                               0x1
#define _SSP1STAT_NOT_A2_LENGTH                             0x1
#define _SSP1STAT_NOT_A2_MASK                               0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_NOT_WRITE1_POSN                           0x2
#define _SSP1STAT_NOT_WRITE1_POSITION                       0x2
#define _SSP1STAT_NOT_WRITE1_SIZE                           0x1
#define _SSP1STAT_NOT_WRITE1_LENGTH                         0x1
#define _SSP1STAT_NOT_WRITE1_MASK                           0x4
#define _SSP1STAT_NOT_ADDRESS1_POSN                         0x5
#define _SSP1STAT_NOT_ADDRESS1_POSITION                     0x5
#define _SSP1STAT_NOT_ADDRESS1_SIZE                         0x1
#define _SSP1STAT_NOT_ADDRESS1_LENGTH                       0x1
#define _SSP1STAT_NOT_ADDRESS1_MASK                         0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0xFC8);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 0FC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0xFC8);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0xFC9);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 0FC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0xFC9);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0xFCA);
#ifndef _LIB_BUILD
asm("T2CON equ 0FCAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2CKPS                 :2;
        unsigned TMR2ON                 :1;
        unsigned T2OUTPS                :4;
    };
    struct {
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned                        :1;
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0xFCA);
// bitfield macros
#define _T2CON_T2CKPS_POSN                                  0x0
#define _T2CON_T2CKPS_POSITION                              0x0
#define _T2CON_T2CKPS_SIZE                                  0x2
#define _T2CON_T2CKPS_LENGTH                                0x2
#define _T2CON_T2CKPS_MASK                                  0x3
#define _T2CON_TMR2ON_POSN                                  0x2
#define _T2CON_TMR2ON_POSITION                              0x2
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x4
#define _T2CON_T2OUTPS_POSN                                 0x3
#define _T2CON_T2OUTPS_POSITION                             0x3
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0x78
#define _T2CON_T2CKPS0_POSN                                 0x0
#define _T2CON_T2CKPS0_POSITION                             0x0
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x1
#define _T2CON_T2CKPS1_POSN                                 0x1
#define _T2CON_T2CKPS1_POSITION                             0x1
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x2
#define _T2CON_T2OUTPS0_POSN                                0x3
#define _T2CON_T2OUTPS0_POSITION                            0x3
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x8
#define _T2CON_T2OUTPS1_POSN                                0x4
#define _T2CON_T2OUTPS1_POSITION                            0x4
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x10
#define _T2CON_T2OUTPS2_POSN                                0x5
#define _T2CON_T2OUTPS2_POSITION                            0x5
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x20
#define _T2CON_T2OUTPS3_POSN                                0x6
#define _T2CON_T2OUTPS3_POSITION                            0x6
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x40

// Register: PR2
#define PR2 PR2
extern volatile unsigned char           PR2                 __at(0xFCB);
#ifndef _LIB_BUILD
asm("PR2 equ 0FCBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0xFCB);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: TMR2
#define TMR2 TMR2
extern volatile unsigned char           TMR2                __at(0xFCC);
#ifndef _LIB_BUILD
asm("TMR2 equ 0FCCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0xFCC);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0xFCD);
#ifndef _LIB_BUILD
asm("T1CON equ 0FCDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned NOT_T1SYNC             :1;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned RD16                   :1;
        unsigned nT1SYNC                :1;
        unsigned SOSCEN                 :1;
        unsigned TCKPS                  :2;
        unsigned TMR1CS                 :2;
    };
    struct {
        unsigned                        :4;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
        unsigned TMR1CS0                :1;
        unsigned TMR1CS1                :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
        unsigned                        :1;
        unsigned SOSCEN1                :1;
        unsigned                        :3;
        unsigned T1RD16                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1OSCEN                :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0xFCD);
// bitfield macros
#define _T1CON_NOT_T1SYNC_POSN                              0x2
#define _T1CON_NOT_T1SYNC_POSITION                          0x2
#define _T1CON_NOT_T1SYNC_SIZE                              0x1
#define _T1CON_NOT_T1SYNC_LENGTH                            0x1
#define _T1CON_NOT_T1SYNC_MASK                              0x4
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_SOSCEN_POSN                                  0x3
#define _T1CON_SOSCEN_POSITION                              0x3
#define _T1CON_SOSCEN_SIZE                                  0x1
#define _T1CON_SOSCEN_LENGTH                                0x1
#define _T1CON_SOSCEN_MASK                                  0x8
#define _T1CON_TCKPS_POSN                                   0x4
#define _T1CON_TCKPS_POSITION                               0x4
#define _T1CON_TCKPS_SIZE                                   0x2
#define _T1CON_TCKPS_LENGTH                                 0x2
#define _T1CON_TCKPS_MASK                                   0x30
#define _T1CON_TMR1CS_POSN                                  0x6
#define _T1CON_TMR1CS_POSITION                              0x6
#define _T1CON_TMR1CS_SIZE                                  0x2
#define _T1CON_TMR1CS_LENGTH                                0x2
#define _T1CON_TMR1CS_MASK                                  0xC0
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_TMR1CS0_POSN                                 0x6
#define _T1CON_TMR1CS0_POSITION                             0x6
#define _T1CON_TMR1CS0_SIZE                                 0x1
#define _T1CON_TMR1CS0_LENGTH                               0x1
#define _T1CON_TMR1CS0_MASK                                 0x40
#define _T1CON_TMR1CS1_POSN                                 0x7
#define _T1CON_TMR1CS1_POSITION                             0x7
#define _T1CON_TMR1CS1_SIZE                                 0x1
#define _T1CON_TMR1CS1_LENGTH                               0x1
#define _T1CON_TMR1CS1_MASK                                 0x80
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2
#define _T1CON_SOSCEN1_POSN                                 0x3
#define _T1CON_SOSCEN1_POSITION                             0x3
#define _T1CON_SOSCEN1_SIZE                                 0x1
#define _T1CON_SOSCEN1_LENGTH                               0x1
#define _T1CON_SOSCEN1_MASK                                 0x8
#define _T1CON_T1RD16_POSN                                  0x7
#define _T1CON_T1RD16_POSITION                              0x7
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x80
#define _T1CON_T1OSCEN_POSN                                 0x3
#define _T1CON_T1OSCEN_POSITION                             0x3
#define _T1CON_T1OSCEN_SIZE                                 0x1
#define _T1CON_T1OSCEN_LENGTH                               0x1
#define _T1CON_T1OSCEN_MASK                                 0x8

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0xFCE);
#ifndef _LIB_BUILD
asm("TMR1 equ 0FCEh");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0xFCE);
#ifndef _LIB_BUILD
asm("TMR1L equ 0FCEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0xFCE);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0xFCF);
#ifndef _LIB_BUILD
asm("TMR1H equ 0FCFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0xFCF);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF

// Register: RCON
#define RCON RCON
extern volatile unsigned char           RCON                __at(0xFD0);
#ifndef _LIB_BUILD
asm("RCON equ 0FD0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_BOR                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_POR                :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned NOT_RI                 :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_CM                 :1;
    };
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
        unsigned nRI                    :1;
        unsigned nCM                    :1;
        unsigned                        :1;
        unsigned IPEN                   :1;
    };
    struct {
        unsigned BOR                    :1;
        unsigned POR                    :1;
        unsigned PD                     :1;
        unsigned TO                     :1;
        unsigned RI                     :1;
        unsigned CM                     :1;
    };
} RCONbits_t;
extern volatile RCONbits_t RCONbits __at(0xFD0);
// bitfield macros
#define _RCON_NOT_BOR_POSN                                  0x0
#define _RCON_NOT_BOR_POSITION                              0x0
#define _RCON_NOT_BOR_SIZE                                  0x1
#define _RCON_NOT_BOR_LENGTH                                0x1
#define _RCON_NOT_BOR_MASK                                  0x1
#define _RCON_NOT_POR_POSN                                  0x1
#define _RCON_NOT_POR_POSITION                              0x1
#define _RCON_NOT_POR_SIZE                                  0x1
#define _RCON_NOT_POR_LENGTH                                0x1
#define _RCON_NOT_POR_MASK                                  0x2
#define _RCON_NOT_PD_POSN                                   0x2
#define _RCON_NOT_PD_POSITION                               0x2
#define _RCON_NOT_PD_SIZE                                   0x1
#define _RCON_NOT_PD_LENGTH                                 0x1
#define _RCON_NOT_PD_MASK                                   0x4
#define _RCON_NOT_TO_POSN                                   0x3
#define _RCON_NOT_TO_POSITION                               0x3
#define _RCON_NOT_TO_SIZE                                   0x1
#define _RCON_NOT_TO_LENGTH                                 0x1
#define _RCON_NOT_TO_MASK                                   0x8
#define _RCON_NOT_RI_POSN                                   0x4
#define _RCON_NOT_RI_POSITION                               0x4
#define _RCON_NOT_RI_SIZE                                   0x1
#define _RCON_NOT_RI_LENGTH                                 0x1
#define _RCON_NOT_RI_MASK                                   0x10
#define _RCON_NOT_CM_POSN                                   0x5
#define _RCON_NOT_CM_POSITION                               0x5
#define _RCON_NOT_CM_SIZE                                   0x1
#define _RCON_NOT_CM_LENGTH                                 0x1
#define _RCON_NOT_CM_MASK                                   0x20
#define _RCON_nBOR_POSN                                     0x0
#define _RCON_nBOR_POSITION                                 0x0
#define _RCON_nBOR_SIZE                                     0x1
#define _RCON_nBOR_LENGTH                                   0x1
#define _RCON_nBOR_MASK                                     0x1
#define _RCON_nPOR_POSN                                     0x1
#define _RCON_nPOR_POSITION                                 0x1
#define _RCON_nPOR_SIZE                                     0x1
#define _RCON_nPOR_LENGTH                                   0x1
#define _RCON_nPOR_MASK                                     0x2
#define _RCON_nPD_POSN                                      0x2
#define _RCON_nPD_POSITION                                  0x2
#define _RCON_nPD_SIZE                                      0x1
#define _RCON_nPD_LENGTH                                    0x1
#define _RCON_nPD_MASK                                      0x4
#define _RCON_nTO_POSN                                      0x3
#define _RCON_nTO_POSITION                                  0x3
#define _RCON_nTO_SIZE                                      0x1
#define _RCON_nTO_LENGTH                                    0x1
#define _RCON_nTO_MASK                                      0x8
#define _RCON_nRI_POSN                                      0x4
#define _RCON_nRI_POSITION                                  0x4
#define _RCON_nRI_SIZE                                      0x1
#define _RCON_nRI_LENGTH                                    0x1
#define _RCON_nRI_MASK                                      0x10
#define _RCON_nCM_POSN                                      0x5
#define _RCON_nCM_POSITION                                  0x5
#define _RCON_nCM_SIZE                                      0x1
#define _RCON_nCM_LENGTH                                    0x1
#define _RCON_nCM_MASK                                      0x20
#define _RCON_IPEN_POSN                                     0x7
#define _RCON_IPEN_POSITION                                 0x7
#define _RCON_IPEN_SIZE                                     0x1
#define _RCON_IPEN_LENGTH                                   0x1
#define _RCON_IPEN_MASK                                     0x80
#define _RCON_BOR_POSN                                      0x0
#define _RCON_BOR_POSITION                                  0x0
#define _RCON_BOR_SIZE                                      0x1
#define _RCON_BOR_LENGTH                                    0x1
#define _RCON_BOR_MASK                                      0x1
#define _RCON_POR_POSN                                      0x1
#define _RCON_POR_POSITION                                  0x1
#define _RCON_POR_SIZE                                      0x1
#define _RCON_POR_LENGTH                                    0x1
#define _RCON_POR_MASK                                      0x2
#define _RCON_PD_POSN                                       0x2
#define _RCON_PD_POSITION                                   0x2
#define _RCON_PD_SIZE                                       0x1
#define _RCON_PD_LENGTH                                     0x1
#define _RCON_PD_MASK                                       0x4
#define _RCON_TO_POSN                                       0x3
#define _RCON_TO_POSITION                                   0x3
#define _RCON_TO_SIZE                                       0x1
#define _RCON_TO_LENGTH                                     0x1
#define _RCON_TO_MASK                                       0x8
#define _RCON_RI_POSN                                       0x4
#define _RCON_RI_POSITION                                   0x4
#define _RCON_RI_SIZE                                       0x1
#define _RCON_RI_LENGTH                                     0x1
#define _RCON_RI_MASK                                       0x10
#define _RCON_CM_POSN                                       0x5
#define _RCON_CM_POSITION                                   0x5
#define _RCON_CM_SIZE                                       0x1
#define _RCON_CM_LENGTH                                     0x1
#define _RCON_CM_MASK                                       0x20

// Register: IOCF
#define IOCF IOCF
extern volatile unsigned char           IOCF                __at(0xFD1);
#ifndef _LIB_BUILD
asm("IOCF equ 0FD1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCF0                  :1;
        unsigned IOCF1                  :1;
        unsigned IOCF2                  :1;
        unsigned IOCF3                  :1;
        unsigned IOCF4                  :1;
        unsigned IOCF5                  :1;
        unsigned IOCF6                  :1;
        unsigned IOCF7                  :1;
    };
} IOCFbits_t;
extern volatile IOCFbits_t IOCFbits __at(0xFD1);
// bitfield macros
#define _IOCF_IOCF0_POSN                                    0x0
#define _IOCF_IOCF0_POSITION                                0x0
#define _IOCF_IOCF0_SIZE                                    0x1
#define _IOCF_IOCF0_LENGTH                                  0x1
#define _IOCF_IOCF0_MASK                                    0x1
#define _IOCF_IOCF1_POSN                                    0x1
#define _IOCF_IOCF1_POSITION                                0x1
#define _IOCF_IOCF1_SIZE                                    0x1
#define _IOCF_IOCF1_LENGTH                                  0x1
#define _IOCF_IOCF1_MASK                                    0x2
#define _IOCF_IOCF2_POSN                                    0x2
#define _IOCF_IOCF2_POSITION                                0x2
#define _IOCF_IOCF2_SIZE                                    0x1
#define _IOCF_IOCF2_LENGTH                                  0x1
#define _IOCF_IOCF2_MASK                                    0x4
#define _IOCF_IOCF3_POSN                                    0x3
#define _IOCF_IOCF3_POSITION                                0x3
#define _IOCF_IOCF3_SIZE                                    0x1
#define _IOCF_IOCF3_LENGTH                                  0x1
#define _IOCF_IOCF3_MASK                                    0x8
#define _IOCF_IOCF4_POSN                                    0x4
#define _IOCF_IOCF4_POSITION                                0x4
#define _IOCF_IOCF4_SIZE                                    0x1
#define _IOCF_IOCF4_LENGTH                                  0x1
#define _IOCF_IOCF4_MASK                                    0x10
#define _IOCF_IOCF5_POSN                                    0x5
#define _IOCF_IOCF5_POSITION                                0x5
#define _IOCF_IOCF5_SIZE                                    0x1
#define _IOCF_IOCF5_LENGTH                                  0x1
#define _IOCF_IOCF5_MASK                                    0x20
#define _IOCF_IOCF6_POSN                                    0x6
#define _IOCF_IOCF6_POSITION                                0x6
#define _IOCF_IOCF6_SIZE                                    0x1
#define _IOCF_IOCF6_LENGTH                                  0x1
#define _IOCF_IOCF6_MASK                                    0x40
#define _IOCF_IOCF7_POSN                                    0x7
#define _IOCF_IOCF7_POSITION                                0x7
#define _IOCF_IOCF7_SIZE                                    0x1
#define _IOCF_IOCF7_LENGTH                                  0x1
#define _IOCF_IOCF7_MASK                                    0x80

// Register: IPR5
#define IPR5 IPR5
extern volatile unsigned char           IPR5                __at(0xFD2);
#ifndef _LIB_BUILD
asm("IPR5 equ 0FD2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IP                 :1;
        unsigned TMR5IP                 :1;
        unsigned TMR6IP                 :1;
        unsigned                        :1;
        unsigned TMR8IP                 :1;
        unsigned ACTLOCKIP              :1;
        unsigned ACTORSIP               :1;
    };
    struct {
        unsigned CCH05                  :1;
        unsigned CCH15                  :1;
        unsigned                        :2;
        unsigned EVPOL15                :1;
    };
} IPR5bits_t;
extern volatile IPR5bits_t IPR5bits __at(0xFD2);
// bitfield macros
#define _IPR5_TMR4IP_POSN                                   0x0
#define _IPR5_TMR4IP_POSITION                               0x0
#define _IPR5_TMR4IP_SIZE                                   0x1
#define _IPR5_TMR4IP_LENGTH                                 0x1
#define _IPR5_TMR4IP_MASK                                   0x1
#define _IPR5_TMR5IP_POSN                                   0x1
#define _IPR5_TMR5IP_POSITION                               0x1
#define _IPR5_TMR5IP_SIZE                                   0x1
#define _IPR5_TMR5IP_LENGTH                                 0x1
#define _IPR5_TMR5IP_MASK                                   0x2
#define _IPR5_TMR6IP_POSN                                   0x2
#define _IPR5_TMR6IP_POSITION                               0x2
#define _IPR5_TMR6IP_SIZE                                   0x1
#define _IPR5_TMR6IP_LENGTH                                 0x1
#define _IPR5_TMR6IP_MASK                                   0x4
#define _IPR5_TMR8IP_POSN                                   0x4
#define _IPR5_TMR8IP_POSITION                               0x4
#define _IPR5_TMR8IP_SIZE                                   0x1
#define _IPR5_TMR8IP_LENGTH                                 0x1
#define _IPR5_TMR8IP_MASK                                   0x10
#define _IPR5_ACTLOCKIP_POSN                                0x5
#define _IPR5_ACTLOCKIP_POSITION                            0x5
#define _IPR5_ACTLOCKIP_SIZE                                0x1
#define _IPR5_ACTLOCKIP_LENGTH                              0x1
#define _IPR5_ACTLOCKIP_MASK                                0x20
#define _IPR5_ACTORSIP_POSN                                 0x6
#define _IPR5_ACTORSIP_POSITION                             0x6
#define _IPR5_ACTORSIP_SIZE                                 0x1
#define _IPR5_ACTORSIP_LENGTH                               0x1
#define _IPR5_ACTORSIP_MASK                                 0x40
#define _IPR5_CCH05_POSN                                    0x0
#define _IPR5_CCH05_POSITION                                0x0
#define _IPR5_CCH05_SIZE                                    0x1
#define _IPR5_CCH05_LENGTH                                  0x1
#define _IPR5_CCH05_MASK                                    0x1
#define _IPR5_CCH15_POSN                                    0x1
#define _IPR5_CCH15_POSITION                                0x1
#define _IPR5_CCH15_SIZE                                    0x1
#define _IPR5_CCH15_LENGTH                                  0x1
#define _IPR5_CCH15_MASK                                    0x2
#define _IPR5_EVPOL15_POSN                                  0x4
#define _IPR5_EVPOL15_POSITION                              0x4
#define _IPR5_EVPOL15_SIZE                                  0x1
#define _IPR5_EVPOL15_LENGTH                                0x1
#define _IPR5_EVPOL15_MASK                                  0x10

// Register: OSCCON
#define OSCCON OSCCON
extern volatile unsigned char           OSCCON              __at(0xFD3);
#ifndef _LIB_BUILD
asm("OSCCON equ 0FD3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOSC                   :3;
        unsigned                        :1;
        unsigned COSC                   :3;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
        unsigned                        :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
    struct {
        unsigned SCS                    :1;
    };
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits __at(0xFD3);
// bitfield macros
#define _OSCCON_NOSC_POSN                                   0x0
#define _OSCCON_NOSC_POSITION                               0x0
#define _OSCCON_NOSC_SIZE                                   0x3
#define _OSCCON_NOSC_LENGTH                                 0x3
#define _OSCCON_NOSC_MASK                                   0x7
#define _OSCCON_COSC_POSN                                   0x4
#define _OSCCON_COSC_POSITION                               0x4
#define _OSCCON_COSC_SIZE                                   0x3
#define _OSCCON_COSC_LENGTH                                 0x3
#define _OSCCON_COSC_MASK                                   0x70
#define _OSCCON_IDLEN_POSN                                  0x7
#define _OSCCON_IDLEN_POSITION                              0x7
#define _OSCCON_IDLEN_SIZE                                  0x1
#define _OSCCON_IDLEN_LENGTH                                0x1
#define _OSCCON_IDLEN_MASK                                  0x80
#define _OSCCON_NOSC0_POSN                                  0x0
#define _OSCCON_NOSC0_POSITION                              0x0
#define _OSCCON_NOSC0_SIZE                                  0x1
#define _OSCCON_NOSC0_LENGTH                                0x1
#define _OSCCON_NOSC0_MASK                                  0x1
#define _OSCCON_NOSC1_POSN                                  0x1
#define _OSCCON_NOSC1_POSITION                              0x1
#define _OSCCON_NOSC1_SIZE                                  0x1
#define _OSCCON_NOSC1_LENGTH                                0x1
#define _OSCCON_NOSC1_MASK                                  0x2
#define _OSCCON_NOSC2_POSN                                  0x2
#define _OSCCON_NOSC2_POSITION                              0x2
#define _OSCCON_NOSC2_SIZE                                  0x1
#define _OSCCON_NOSC2_LENGTH                                0x1
#define _OSCCON_NOSC2_MASK                                  0x4
#define _OSCCON_COSC0_POSN                                  0x4
#define _OSCCON_COSC0_POSITION                              0x4
#define _OSCCON_COSC0_SIZE                                  0x1
#define _OSCCON_COSC0_LENGTH                                0x1
#define _OSCCON_COSC0_MASK                                  0x10
#define _OSCCON_COSC1_POSN                                  0x5
#define _OSCCON_COSC1_POSITION                              0x5
#define _OSCCON_COSC1_SIZE                                  0x1
#define _OSCCON_COSC1_LENGTH                                0x1
#define _OSCCON_COSC1_MASK                                  0x20
#define _OSCCON_COSC2_POSN                                  0x6
#define _OSCCON_COSC2_POSITION                              0x6
#define _OSCCON_COSC2_SIZE                                  0x1
#define _OSCCON_COSC2_LENGTH                                0x1
#define _OSCCON_COSC2_MASK                                  0x40
#define _OSCCON_SCS_POSN                                    0x0
#define _OSCCON_SCS_POSITION                                0x0
#define _OSCCON_SCS_SIZE                                    0x1
#define _OSCCON_SCS_LENGTH                                  0x1
#define _OSCCON_SCS_MASK                                    0x1

// Register: T0CON
#define T0CON T0CON
extern volatile unsigned char           T0CON               __at(0xFD5);
#ifndef _LIB_BUILD
asm("T0CON equ 0FD5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0PS                   :3;
        unsigned PSA                    :1;
        unsigned T0CS                   :2;
        unsigned T08BIT                 :1;
        unsigned TMR0ON                 :1;
    };
    struct {
        unsigned T0PS0                  :1;
        unsigned T0PS1                  :1;
        unsigned T0PS2                  :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
    };
} T0CONbits_t;
extern volatile T0CONbits_t T0CONbits __at(0xFD5);
// bitfield macros
#define _T0CON_T0PS_POSN                                    0x0
#define _T0CON_T0PS_POSITION                                0x0
#define _T0CON_T0PS_SIZE                                    0x3
#define _T0CON_T0PS_LENGTH                                  0x3
#define _T0CON_T0PS_MASK                                    0x7
#define _T0CON_PSA_POSN                                     0x3
#define _T0CON_PSA_POSITION                                 0x3
#define _T0CON_PSA_SIZE                                     0x1
#define _T0CON_PSA_LENGTH                                   0x1
#define _T0CON_PSA_MASK                                     0x8
#define _T0CON_T0CS_POSN                                    0x4
#define _T0CON_T0CS_POSITION                                0x4
#define _T0CON_T0CS_SIZE                                    0x2
#define _T0CON_T0CS_LENGTH                                  0x2
#define _T0CON_T0CS_MASK                                    0x30
#define _T0CON_T08BIT_POSN                                  0x6
#define _T0CON_T08BIT_POSITION                              0x6
#define _T0CON_T08BIT_SIZE                                  0x1
#define _T0CON_T08BIT_LENGTH                                0x1
#define _T0CON_T08BIT_MASK                                  0x40
#define _T0CON_TMR0ON_POSN                                  0x7
#define _T0CON_TMR0ON_POSITION                              0x7
#define _T0CON_TMR0ON_SIZE                                  0x1
#define _T0CON_TMR0ON_LENGTH                                0x1
#define _T0CON_TMR0ON_MASK                                  0x80
#define _T0CON_T0PS0_POSN                                   0x0
#define _T0CON_T0PS0_POSITION                               0x0
#define _T0CON_T0PS0_SIZE                                   0x1
#define _T0CON_T0PS0_LENGTH                                 0x1
#define _T0CON_T0PS0_MASK                                   0x1
#define _T0CON_T0PS1_POSN                                   0x1
#define _T0CON_T0PS1_POSITION                               0x1
#define _T0CON_T0PS1_SIZE                                   0x1
#define _T0CON_T0PS1_LENGTH                                 0x1
#define _T0CON_T0PS1_MASK                                   0x2
#define _T0CON_T0PS2_POSN                                   0x2
#define _T0CON_T0PS2_POSITION                               0x2
#define _T0CON_T0PS2_SIZE                                   0x1
#define _T0CON_T0PS2_LENGTH                                 0x1
#define _T0CON_T0PS2_MASK                                   0x4
#define _T0CON_T0CS0_POSN                                   0x4
#define _T0CON_T0CS0_POSITION                               0x4
#define _T0CON_T0CS0_SIZE                                   0x1
#define _T0CON_T0CS0_LENGTH                                 0x1
#define _T0CON_T0CS0_MASK                                   0x10
#define _T0CON_T0CS1_POSN                                   0x5
#define _T0CON_T0CS1_POSITION                               0x5
#define _T0CON_T0CS1_SIZE                                   0x1
#define _T0CON_T0CS1_LENGTH                                 0x1
#define _T0CON_T0CS1_MASK                                   0x20

// Register: TMR0
#define TMR0 TMR0
extern volatile unsigned short          TMR0                __at(0xFD6);
#ifndef _LIB_BUILD
asm("TMR0 equ 0FD6h");
#endif

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0xFD6);
#ifndef _LIB_BUILD
asm("TMR0L equ 0FD6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0xFD6);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0xFD7);
#ifndef _LIB_BUILD
asm("TMR0H equ 0FD7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0xFD7);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0xFD8);
#ifndef _LIB_BUILD
asm("STATUS equ 0FD8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
        unsigned OVERFLOW               :1;
        unsigned NEGATIVE               :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0xFD8);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_OV_POSN                                     0x3
#define _STATUS_OV_POSITION                                 0x3
#define _STATUS_OV_SIZE                                     0x1
#define _STATUS_OV_LENGTH                                   0x1
#define _STATUS_OV_MASK                                     0x8
#define _STATUS_N_POSN                                      0x4
#define _STATUS_N_POSITION                                  0x4
#define _STATUS_N_SIZE                                      0x1
#define _STATUS_N_LENGTH                                    0x1
#define _STATUS_N_MASK                                      0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4
#define _STATUS_OVERFLOW_POSN                               0x3
#define _STATUS_OVERFLOW_POSITION                           0x3
#define _STATUS_OVERFLOW_SIZE                               0x1
#define _STATUS_OVERFLOW_LENGTH                             0x1
#define _STATUS_OVERFLOW_MASK                               0x8
#define _STATUS_NEGATIVE_POSN                               0x4
#define _STATUS_NEGATIVE_POSITION                           0x4
#define _STATUS_NEGATIVE_SIZE                               0x1
#define _STATUS_NEGATIVE_LENGTH                             0x1
#define _STATUS_NEGATIVE_MASK                               0x10

// Register: FSR2
#define FSR2 FSR2
extern volatile unsigned short          FSR2                __at(0xFD9);
#ifndef _LIB_BUILD
asm("FSR2 equ 0FD9h");
#endif

// Register: FSR2L
#define FSR2L FSR2L
extern volatile unsigned char           FSR2L               __at(0xFD9);
#ifndef _LIB_BUILD
asm("FSR2L equ 0FD9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2Lbits_t;
extern volatile FSR2Lbits_t FSR2Lbits __at(0xFD9);
// bitfield macros
#define _FSR2L_FSR2L_POSN                                   0x0
#define _FSR2L_FSR2L_POSITION                               0x0
#define _FSR2L_FSR2L_SIZE                                   0x8
#define _FSR2L_FSR2L_LENGTH                                 0x8
#define _FSR2L_FSR2L_MASK                                   0xFF

// Register: FSR2H
#define FSR2H FSR2H
extern volatile unsigned char           FSR2H               __at(0xFDA);
#ifndef _LIB_BUILD
asm("FSR2H equ 0FDAh");
#endif

// Register: PLUSW2
#define PLUSW2 PLUSW2
extern volatile unsigned char           PLUSW2              __at(0xFDB);
#ifndef _LIB_BUILD
asm("PLUSW2 equ 0FDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW2                 :8;
    };
} PLUSW2bits_t;
extern volatile PLUSW2bits_t PLUSW2bits __at(0xFDB);
// bitfield macros
#define _PLUSW2_PLUSW2_POSN                                 0x0
#define _PLUSW2_PLUSW2_POSITION                             0x0
#define _PLUSW2_PLUSW2_SIZE                                 0x8
#define _PLUSW2_PLUSW2_LENGTH                               0x8
#define _PLUSW2_PLUSW2_MASK                                 0xFF

// Register: PREINC2
#define PREINC2 PREINC2
extern volatile unsigned char           PREINC2             __at(0xFDC);
#ifndef _LIB_BUILD
asm("PREINC2 equ 0FDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC2                :8;
    };
} PREINC2bits_t;
extern volatile PREINC2bits_t PREINC2bits __at(0xFDC);
// bitfield macros
#define _PREINC2_PREINC2_POSN                               0x0
#define _PREINC2_PREINC2_POSITION                           0x0
#define _PREINC2_PREINC2_SIZE                               0x8
#define _PREINC2_PREINC2_LENGTH                             0x8
#define _PREINC2_PREINC2_MASK                               0xFF

// Register: POSTDEC2
#define POSTDEC2 POSTDEC2
extern volatile unsigned char           POSTDEC2            __at(0xFDD);
#ifndef _LIB_BUILD
asm("POSTDEC2 equ 0FDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC2               :8;
    };
} POSTDEC2bits_t;
extern volatile POSTDEC2bits_t POSTDEC2bits __at(0xFDD);
// bitfield macros
#define _POSTDEC2_POSTDEC2_POSN                             0x0
#define _POSTDEC2_POSTDEC2_POSITION                         0x0
#define _POSTDEC2_POSTDEC2_SIZE                             0x8
#define _POSTDEC2_POSTDEC2_LENGTH                           0x8
#define _POSTDEC2_POSTDEC2_MASK                             0xFF

// Register: POSTINC2
#define POSTINC2 POSTINC2
extern volatile unsigned char           POSTINC2            __at(0xFDE);
#ifndef _LIB_BUILD
asm("POSTINC2 equ 0FDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC2               :8;
    };
} POSTINC2bits_t;
extern volatile POSTINC2bits_t POSTINC2bits __at(0xFDE);
// bitfield macros
#define _POSTINC2_POSTINC2_POSN                             0x0
#define _POSTINC2_POSTINC2_POSITION                         0x0
#define _POSTINC2_POSTINC2_SIZE                             0x8
#define _POSTINC2_POSTINC2_LENGTH                           0x8
#define _POSTINC2_POSTINC2_MASK                             0xFF

// Register: INDF2
#define INDF2 INDF2
extern volatile unsigned char           INDF2               __at(0xFDF);
#ifndef _LIB_BUILD
asm("INDF2 equ 0FDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF2                  :8;
    };
} INDF2bits_t;
extern volatile INDF2bits_t INDF2bits __at(0xFDF);
// bitfield macros
#define _INDF2_INDF2_POSN                                   0x0
#define _INDF2_INDF2_POSITION                               0x0
#define _INDF2_INDF2_SIZE                                   0x8
#define _INDF2_INDF2_LENGTH                                 0x8
#define _INDF2_INDF2_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0xFE0);
#ifndef _LIB_BUILD
asm("BSR equ 0FE0h");
#endif

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0xFE1);
#ifndef _LIB_BUILD
asm("FSR1 equ 0FE1h");
#endif

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0xFE1);
#ifndef _LIB_BUILD
asm("FSR1L equ 0FE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0xFE1);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0xFE2);
#ifndef _LIB_BUILD
asm("FSR1H equ 0FE2h");
#endif

// Register: PLUSW1
#define PLUSW1 PLUSW1
extern volatile unsigned char           PLUSW1              __at(0xFE3);
#ifndef _LIB_BUILD
asm("PLUSW1 equ 0FE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW1                 :8;
    };
} PLUSW1bits_t;
extern volatile PLUSW1bits_t PLUSW1bits __at(0xFE3);
// bitfield macros
#define _PLUSW1_PLUSW1_POSN                                 0x0
#define _PLUSW1_PLUSW1_POSITION                             0x0
#define _PLUSW1_PLUSW1_SIZE                                 0x8
#define _PLUSW1_PLUSW1_LENGTH                               0x8
#define _PLUSW1_PLUSW1_MASK                                 0xFF

// Register: PREINC1
#define PREINC1 PREINC1
extern volatile unsigned char           PREINC1             __at(0xFE4);
#ifndef _LIB_BUILD
asm("PREINC1 equ 0FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC1                :8;
    };
} PREINC1bits_t;
extern volatile PREINC1bits_t PREINC1bits __at(0xFE4);
// bitfield macros
#define _PREINC1_PREINC1_POSN                               0x0
#define _PREINC1_PREINC1_POSITION                           0x0
#define _PREINC1_PREINC1_SIZE                               0x8
#define _PREINC1_PREINC1_LENGTH                             0x8
#define _PREINC1_PREINC1_MASK                               0xFF

// Register: POSTDEC1
#define POSTDEC1 POSTDEC1
extern volatile unsigned char           POSTDEC1            __at(0xFE5);
#ifndef _LIB_BUILD
asm("POSTDEC1 equ 0FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC1               :8;
    };
} POSTDEC1bits_t;
extern volatile POSTDEC1bits_t POSTDEC1bits __at(0xFE5);
// bitfield macros
#define _POSTDEC1_POSTDEC1_POSN                             0x0
#define _POSTDEC1_POSTDEC1_POSITION                         0x0
#define _POSTDEC1_POSTDEC1_SIZE                             0x8
#define _POSTDEC1_POSTDEC1_LENGTH                           0x8
#define _POSTDEC1_POSTDEC1_MASK                             0xFF

// Register: POSTINC1
#define POSTINC1 POSTINC1
extern volatile unsigned char           POSTINC1            __at(0xFE6);
#ifndef _LIB_BUILD
asm("POSTINC1 equ 0FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC1               :8;
    };
} POSTINC1bits_t;
extern volatile POSTINC1bits_t POSTINC1bits __at(0xFE6);
// bitfield macros
#define _POSTINC1_POSTINC1_POSN                             0x0
#define _POSTINC1_POSTINC1_POSITION                         0x0
#define _POSTINC1_POSTINC1_SIZE                             0x8
#define _POSTINC1_POSTINC1_LENGTH                           0x8
#define _POSTINC1_POSTINC1_MASK                             0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0xFE7);
#ifndef _LIB_BUILD
asm("INDF1 equ 0FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0xFE7);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0xFE8);
#ifndef _LIB_BUILD
asm("WREG equ 0FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0xFE8);
// bitfield macros
#define _WREG_WREG_POSN                                     0x0
#define _WREG_WREG_POSITION                                 0x0
#define _WREG_WREG_SIZE                                     0x8
#define _WREG_WREG_LENGTH                                   0x8
#define _WREG_WREG_MASK                                     0xFF

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0 equ 0FE9h");
#endif

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0L equ 0FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0xFE9);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0xFEA);
#ifndef _LIB_BUILD
asm("FSR0H equ 0FEAh");
#endif

// Register: PLUSW0
#define PLUSW0 PLUSW0
extern volatile unsigned char           PLUSW0              __at(0xFEB);
#ifndef _LIB_BUILD
asm("PLUSW0 equ 0FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW0                 :8;
    };
} PLUSW0bits_t;
extern volatile PLUSW0bits_t PLUSW0bits __at(0xFEB);
// bitfield macros
#define _PLUSW0_PLUSW0_POSN                                 0x0
#define _PLUSW0_PLUSW0_POSITION                             0x0
#define _PLUSW0_PLUSW0_SIZE                                 0x8
#define _PLUSW0_PLUSW0_LENGTH                               0x8
#define _PLUSW0_PLUSW0_MASK                                 0xFF

// Register: PREINC0
#define PREINC0 PREINC0
extern volatile unsigned char           PREINC0             __at(0xFEC);
#ifndef _LIB_BUILD
asm("PREINC0 equ 0FECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC0                :8;
    };
} PREINC0bits_t;
extern volatile PREINC0bits_t PREINC0bits __at(0xFEC);
// bitfield macros
#define _PREINC0_PREINC0_POSN                               0x0
#define _PREINC0_PREINC0_POSITION                           0x0
#define _PREINC0_PREINC0_SIZE                               0x8
#define _PREINC0_PREINC0_LENGTH                             0x8
#define _PREINC0_PREINC0_MASK                               0xFF

// Register: POSTDEC0
#define POSTDEC0 POSTDEC0
extern volatile unsigned char           POSTDEC0            __at(0xFED);
#ifndef _LIB_BUILD
asm("POSTDEC0 equ 0FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC0               :8;
    };
} POSTDEC0bits_t;
extern volatile POSTDEC0bits_t POSTDEC0bits __at(0xFED);
// bitfield macros
#define _POSTDEC0_POSTDEC0_POSN                             0x0
#define _POSTDEC0_POSTDEC0_POSITION                         0x0
#define _POSTDEC0_POSTDEC0_SIZE                             0x8
#define _POSTDEC0_POSTDEC0_LENGTH                           0x8
#define _POSTDEC0_POSTDEC0_MASK                             0xFF

// Register: POSTINC0
#define POSTINC0 POSTINC0
extern volatile unsigned char           POSTINC0            __at(0xFEE);
#ifndef _LIB_BUILD
asm("POSTINC0 equ 0FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC0               :8;
    };
} POSTINC0bits_t;
extern volatile POSTINC0bits_t POSTINC0bits __at(0xFEE);
// bitfield macros
#define _POSTINC0_POSTINC0_POSN                             0x0
#define _POSTINC0_POSTINC0_POSITION                         0x0
#define _POSTINC0_POSTINC0_SIZE                             0x8
#define _POSTINC0_POSTINC0_LENGTH                           0x8
#define _POSTINC0_POSTINC0_MASK                             0xFF

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0xFEF);
#ifndef _LIB_BUILD
asm("INDF0 equ 0FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0xFEF);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INTCON3
#define INTCON3 INTCON3
extern volatile unsigned char           INTCON3             __at(0xFF0);
#ifndef _LIB_BUILD
asm("INTCON3 equ 0FF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IF                 :1;
        unsigned INT2IF                 :1;
        unsigned INT3IF                 :1;
        unsigned INT1IE                 :1;
        unsigned INT2IE                 :1;
        unsigned INT3IE                 :1;
        unsigned INT1IP                 :1;
        unsigned INT2IP                 :1;
    };
    struct {
        unsigned INT1F                  :1;
        unsigned INT2F                  :1;
        unsigned INT3F                  :1;
        unsigned INT1E                  :1;
        unsigned INT2E                  :1;
        unsigned INT3E                  :1;
        unsigned INT1P                  :1;
        unsigned INT2P                  :1;
    };
} INTCON3bits_t;
extern volatile INTCON3bits_t INTCON3bits __at(0xFF0);
// bitfield macros
#define _INTCON3_INT1IF_POSN                                0x0
#define _INTCON3_INT1IF_POSITION                            0x0
#define _INTCON3_INT1IF_SIZE                                0x1
#define _INTCON3_INT1IF_LENGTH                              0x1
#define _INTCON3_INT1IF_MASK                                0x1
#define _INTCON3_INT2IF_POSN                                0x1
#define _INTCON3_INT2IF_POSITION                            0x1
#define _INTCON3_INT2IF_SIZE                                0x1
#define _INTCON3_INT2IF_LENGTH                              0x1
#define _INTCON3_INT2IF_MASK                                0x2
#define _INTCON3_INT3IF_POSN                                0x2
#define _INTCON3_INT3IF_POSITION                            0x2
#define _INTCON3_INT3IF_SIZE                                0x1
#define _INTCON3_INT3IF_LENGTH                              0x1
#define _INTCON3_INT3IF_MASK                                0x4
#define _INTCON3_INT1IE_POSN                                0x3
#define _INTCON3_INT1IE_POSITION                            0x3
#define _INTCON3_INT1IE_SIZE                                0x1
#define _INTCON3_INT1IE_LENGTH                              0x1
#define _INTCON3_INT1IE_MASK                                0x8
#define _INTCON3_INT2IE_POSN                                0x4
#define _INTCON3_INT2IE_POSITION                            0x4
#define _INTCON3_INT2IE_SIZE                                0x1
#define _INTCON3_INT2IE_LENGTH                              0x1
#define _INTCON3_INT2IE_MASK                                0x10
#define _INTCON3_INT3IE_POSN                                0x5
#define _INTCON3_INT3IE_POSITION                            0x5
#define _INTCON3_INT3IE_SIZE                                0x1
#define _INTCON3_INT3IE_LENGTH                              0x1
#define _INTCON3_INT3IE_MASK                                0x20
#define _INTCON3_INT1IP_POSN                                0x6
#define _INTCON3_INT1IP_POSITION                            0x6
#define _INTCON3_INT1IP_SIZE                                0x1
#define _INTCON3_INT1IP_LENGTH                              0x1
#define _INTCON3_INT1IP_MASK                                0x40
#define _INTCON3_INT2IP_POSN                                0x7
#define _INTCON3_INT2IP_POSITION                            0x7
#define _INTCON3_INT2IP_SIZE                                0x1
#define _INTCON3_INT2IP_LENGTH                              0x1
#define _INTCON3_INT2IP_MASK                                0x80
#define _INTCON3_INT1F_POSN                                 0x0
#define _INTCON3_INT1F_POSITION                             0x0
#define _INTCON3_INT1F_SIZE                                 0x1
#define _INTCON3_INT1F_LENGTH                               0x1
#define _INTCON3_INT1F_MASK                                 0x1
#define _INTCON3_INT2F_POSN                                 0x1
#define _INTCON3_INT2F_POSITION                             0x1
#define _INTCON3_INT2F_SIZE                                 0x1
#define _INTCON3_INT2F_LENGTH                               0x1
#define _INTCON3_INT2F_MASK                                 0x2
#define _INTCON3_INT3F_POSN                                 0x2
#define _INTCON3_INT3F_POSITION                             0x2
#define _INTCON3_INT3F_SIZE                                 0x1
#define _INTCON3_INT3F_LENGTH                               0x1
#define _INTCON3_INT3F_MASK                                 0x4
#define _INTCON3_INT1E_POSN                                 0x3
#define _INTCON3_INT1E_POSITION                             0x3
#define _INTCON3_INT1E_SIZE                                 0x1
#define _INTCON3_INT1E_LENGTH                               0x1
#define _INTCON3_INT1E_MASK                                 0x8
#define _INTCON3_INT2E_POSN                                 0x4
#define _INTCON3_INT2E_POSITION                             0x4
#define _INTCON3_INT2E_SIZE                                 0x1
#define _INTCON3_INT2E_LENGTH                               0x1
#define _INTCON3_INT2E_MASK                                 0x10
#define _INTCON3_INT3E_POSN                                 0x5
#define _INTCON3_INT3E_POSITION                             0x5
#define _INTCON3_INT3E_SIZE                                 0x1
#define _INTCON3_INT3E_LENGTH                               0x1
#define _INTCON3_INT3E_MASK                                 0x20
#define _INTCON3_INT1P_POSN                                 0x6
#define _INTCON3_INT1P_POSITION                             0x6
#define _INTCON3_INT1P_SIZE                                 0x1
#define _INTCON3_INT1P_LENGTH                               0x1
#define _INTCON3_INT1P_MASK                                 0x40
#define _INTCON3_INT2P_POSN                                 0x7
#define _INTCON3_INT2P_POSITION                             0x7
#define _INTCON3_INT2P_SIZE                                 0x1
#define _INTCON3_INT2P_LENGTH                               0x1
#define _INTCON3_INT2P_MASK                                 0x80

// Register: INTCON2
#define INTCON2 INTCON2
extern volatile unsigned char           INTCON2             __at(0xFF1);
#ifndef _LIB_BUILD
asm("INTCON2 equ 0FF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :7;
        unsigned NOT_RBPU               :1;
    };
    struct {
        unsigned IOCIP                  :1;
        unsigned INT3IP                 :1;
        unsigned TMR0IP                 :1;
        unsigned INTEDG3                :1;
        unsigned INTEDG2                :1;
        unsigned INTEDG1                :1;
        unsigned INTEDG0                :1;
        unsigned nRBPU                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned INT3P                  :1;
        unsigned T0IP                   :1;
        unsigned                        :4;
        unsigned RBPU                   :1;
    };
} INTCON2bits_t;
extern volatile INTCON2bits_t INTCON2bits __at(0xFF1);
// bitfield macros
#define _INTCON2_NOT_RBPU_POSN                              0x7
#define _INTCON2_NOT_RBPU_POSITION                          0x7
#define _INTCON2_NOT_RBPU_SIZE                              0x1
#define _INTCON2_NOT_RBPU_LENGTH                            0x1
#define _INTCON2_NOT_RBPU_MASK                              0x80
#define _INTCON2_IOCIP_POSN                                 0x0
#define _INTCON2_IOCIP_POSITION                             0x0
#define _INTCON2_IOCIP_SIZE                                 0x1
#define _INTCON2_IOCIP_LENGTH                               0x1
#define _INTCON2_IOCIP_MASK                                 0x1
#define _INTCON2_INT3IP_POSN                                0x1
#define _INTCON2_INT3IP_POSITION                            0x1
#define _INTCON2_INT3IP_SIZE                                0x1
#define _INTCON2_INT3IP_LENGTH                              0x1
#define _INTCON2_INT3IP_MASK                                0x2
#define _INTCON2_TMR0IP_POSN                                0x2
#define _INTCON2_TMR0IP_POSITION                            0x2
#define _INTCON2_TMR0IP_SIZE                                0x1
#define _INTCON2_TMR0IP_LENGTH                              0x1
#define _INTCON2_TMR0IP_MASK                                0x4
#define _INTCON2_INTEDG3_POSN                               0x3
#define _INTCON2_INTEDG3_POSITION                           0x3
#define _INTCON2_INTEDG3_SIZE                               0x1
#define _INTCON2_INTEDG3_LENGTH                             0x1
#define _INTCON2_INTEDG3_MASK                               0x8
#define _INTCON2_INTEDG2_POSN                               0x4
#define _INTCON2_INTEDG2_POSITION                           0x4
#define _INTCON2_INTEDG2_SIZE                               0x1
#define _INTCON2_INTEDG2_LENGTH                             0x1
#define _INTCON2_INTEDG2_MASK                               0x10
#define _INTCON2_INTEDG1_POSN                               0x5
#define _INTCON2_INTEDG1_POSITION                           0x5
#define _INTCON2_INTEDG1_SIZE                               0x1
#define _INTCON2_INTEDG1_LENGTH                             0x1
#define _INTCON2_INTEDG1_MASK                               0x20
#define _INTCON2_INTEDG0_POSN                               0x6
#define _INTCON2_INTEDG0_POSITION                           0x6
#define _INTCON2_INTEDG0_SIZE                               0x1
#define _INTCON2_INTEDG0_LENGTH                             0x1
#define _INTCON2_INTEDG0_MASK                               0x40
#define _INTCON2_nRBPU_POSN                                 0x7
#define _INTCON2_nRBPU_POSITION                             0x7
#define _INTCON2_nRBPU_SIZE                                 0x1
#define _INTCON2_nRBPU_LENGTH                               0x1
#define _INTCON2_nRBPU_MASK                                 0x80
#define _INTCON2_INT3P_POSN                                 0x1
#define _INTCON2_INT3P_POSITION                             0x1
#define _INTCON2_INT3P_SIZE                                 0x1
#define _INTCON2_INT3P_LENGTH                               0x1
#define _INTCON2_INT3P_MASK                                 0x2
#define _INTCON2_T0IP_POSN                                  0x2
#define _INTCON2_T0IP_POSITION                              0x2
#define _INTCON2_T0IP_SIZE                                  0x1
#define _INTCON2_T0IP_LENGTH                                0x1
#define _INTCON2_T0IP_MASK                                  0x4
#define _INTCON2_RBPU_POSN                                  0x7
#define _INTCON2_RBPU_POSITION                              0x7
#define _INTCON2_RBPU_SIZE                                  0x1
#define _INTCON2_RBPU_LENGTH                                0x1
#define _INTCON2_RBPU_MASK                                  0x80

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0xFF2);
#ifndef _LIB_BUILD
asm("INTCON equ 0FF2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCIF                  :1;
        unsigned INT0IF                 :1;
        unsigned TMR0IF                 :1;
        unsigned IOCIE                  :1;
        unsigned INT0IE                 :1;
        unsigned TMR0IE                 :1;
        unsigned PEIE_GIEL              :1;
        unsigned GIE_GIEH               :1;
    };
    struct {
        unsigned                        :1;
        unsigned INT0F                  :1;
        unsigned T0IF                   :1;
        unsigned                        :1;
        unsigned INT0E                  :1;
        unsigned T0IE                   :1;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned GIEL                   :1;
        unsigned GIEH                   :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0xFF2);
// bitfield macros
#define _INTCON_IOCIF_POSN                                  0x0
#define _INTCON_IOCIF_POSITION                              0x0
#define _INTCON_IOCIF_SIZE                                  0x1
#define _INTCON_IOCIF_LENGTH                                0x1
#define _INTCON_IOCIF_MASK                                  0x1
#define _INTCON_INT0IF_POSN                                 0x1
#define _INTCON_INT0IF_POSITION                             0x1
#define _INTCON_INT0IF_SIZE                                 0x1
#define _INTCON_INT0IF_LENGTH                               0x1
#define _INTCON_INT0IF_MASK                                 0x2
#define _INTCON_TMR0IF_POSN                                 0x2
#define _INTCON_TMR0IF_POSITION                             0x2
#define _INTCON_TMR0IF_SIZE                                 0x1
#define _INTCON_TMR0IF_LENGTH                               0x1
#define _INTCON_TMR0IF_MASK                                 0x4
#define _INTCON_IOCIE_POSN                                  0x3
#define _INTCON_IOCIE_POSITION                              0x3
#define _INTCON_IOCIE_SIZE                                  0x1
#define _INTCON_IOCIE_LENGTH                                0x1
#define _INTCON_IOCIE_MASK                                  0x8
#define _INTCON_INT0IE_POSN                                 0x4
#define _INTCON_INT0IE_POSITION                             0x4
#define _INTCON_INT0IE_SIZE                                 0x1
#define _INTCON_INT0IE_LENGTH                               0x1
#define _INTCON_INT0IE_MASK                                 0x10
#define _INTCON_TMR0IE_POSN                                 0x5
#define _INTCON_TMR0IE_POSITION                             0x5
#define _INTCON_TMR0IE_SIZE                                 0x1
#define _INTCON_TMR0IE_LENGTH                               0x1
#define _INTCON_TMR0IE_MASK                                 0x20
#define _INTCON_PEIE_GIEL_POSN                              0x6
#define _INTCON_PEIE_GIEL_POSITION                          0x6
#define _INTCON_PEIE_GIEL_SIZE                              0x1
#define _INTCON_PEIE_GIEL_LENGTH                            0x1
#define _INTCON_PEIE_GIEL_MASK                              0x40
#define _INTCON_GIE_GIEH_POSN                               0x7
#define _INTCON_GIE_GIEH_POSITION                           0x7
#define _INTCON_GIE_GIEH_SIZE                               0x1
#define _INTCON_GIE_GIEH_LENGTH                             0x1
#define _INTCON_GIE_GIEH_MASK                               0x80
#define _INTCON_INT0F_POSN                                  0x1
#define _INTCON_INT0F_POSITION                              0x1
#define _INTCON_INT0F_SIZE                                  0x1
#define _INTCON_INT0F_LENGTH                                0x1
#define _INTCON_INT0F_MASK                                  0x2
#define _INTCON_T0IF_POSN                                   0x2
#define _INTCON_T0IF_POSITION                               0x2
#define _INTCON_T0IF_SIZE                                   0x1
#define _INTCON_T0IF_LENGTH                                 0x1
#define _INTCON_T0IF_MASK                                   0x4
#define _INTCON_INT0E_POSN                                  0x4
#define _INTCON_INT0E_POSITION                              0x4
#define _INTCON_INT0E_SIZE                                  0x1
#define _INTCON_INT0E_LENGTH                                0x1
#define _INTCON_INT0E_MASK                                  0x10
#define _INTCON_T0IE_POSN                                   0x5
#define _INTCON_T0IE_POSITION                               0x5
#define _INTCON_T0IE_SIZE                                   0x1
#define _INTCON_T0IE_LENGTH                                 0x1
#define _INTCON_T0IE_MASK                                   0x20
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80
#define _INTCON_GIEL_POSN                                   0x6
#define _INTCON_GIEL_POSITION                               0x6
#define _INTCON_GIEL_SIZE                                   0x1
#define _INTCON_GIEL_LENGTH                                 0x1
#define _INTCON_GIEL_MASK                                   0x40
#define _INTCON_GIEH_POSN                                   0x7
#define _INTCON_GIEH_POSITION                               0x7
#define _INTCON_GIEH_SIZE                                   0x1
#define _INTCON_GIEH_LENGTH                                 0x1
#define _INTCON_GIEH_MASK                                   0x80

// Register: PROD
#define PROD PROD
extern volatile unsigned short          PROD                __at(0xFF3);
#ifndef _LIB_BUILD
asm("PROD equ 0FF3h");
#endif

// Register: PRODL
#define PRODL PRODL
extern volatile unsigned char           PRODL               __at(0xFF3);
#ifndef _LIB_BUILD
asm("PRODL equ 0FF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODLbits_t;
extern volatile PRODLbits_t PRODLbits __at(0xFF3);
// bitfield macros
#define _PRODL_PRODL_POSN                                   0x0
#define _PRODL_PRODL_POSITION                               0x0
#define _PRODL_PRODL_SIZE                                   0x8
#define _PRODL_PRODL_LENGTH                                 0x8
#define _PRODL_PRODL_MASK                                   0xFF

// Register: PRODH
#define PRODH PRODH
extern volatile unsigned char           PRODH               __at(0xFF4);
#ifndef _LIB_BUILD
asm("PRODH equ 0FF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODHbits_t;
extern volatile PRODHbits_t PRODHbits __at(0xFF4);
// bitfield macros
#define _PRODH_PRODH_POSN                                   0x0
#define _PRODH_PRODH_POSITION                               0x0
#define _PRODH_PRODH_SIZE                                   0x8
#define _PRODH_PRODH_LENGTH                                 0x8
#define _PRODH_PRODH_MASK                                   0xFF

// Register: TABLAT
#define TABLAT TABLAT
extern volatile unsigned char           TABLAT              __at(0xFF5);
#ifndef _LIB_BUILD
asm("TABLAT equ 0FF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TABLAT                 :8;
    };
} TABLATbits_t;
extern volatile TABLATbits_t TABLATbits __at(0xFF5);
// bitfield macros
#define _TABLAT_TABLAT_POSN                                 0x0
#define _TABLAT_TABLAT_POSITION                             0x0
#define _TABLAT_TABLAT_SIZE                                 0x8
#define _TABLAT_TABLAT_LENGTH                               0x8
#define _TABLAT_TABLAT_MASK                                 0xFF

// Register: TBLPTR
#define TBLPTR TBLPTR
#ifndef __CCI__
extern volatile __uint24                TBLPTR              __at(0xFF6);
#endif
#ifndef _LIB_BUILD
asm("TBLPTR equ 0FF6h");
#endif

// Register: TBLPTRL
#define TBLPTRL TBLPTRL
extern volatile unsigned char           TBLPTRL             __at(0xFF6);
#ifndef _LIB_BUILD
asm("TBLPTRL equ 0FF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRL                :8;
    };
} TBLPTRLbits_t;
extern volatile TBLPTRLbits_t TBLPTRLbits __at(0xFF6);
// bitfield macros
#define _TBLPTRL_TBLPTRL_POSN                               0x0
#define _TBLPTRL_TBLPTRL_POSITION                           0x0
#define _TBLPTRL_TBLPTRL_SIZE                               0x8
#define _TBLPTRL_TBLPTRL_LENGTH                             0x8
#define _TBLPTRL_TBLPTRL_MASK                               0xFF

// Register: TBLPTRH
#define TBLPTRH TBLPTRH
extern volatile unsigned char           TBLPTRH             __at(0xFF7);
#ifndef _LIB_BUILD
asm("TBLPTRH equ 0FF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRH                :8;
    };
} TBLPTRHbits_t;
extern volatile TBLPTRHbits_t TBLPTRHbits __at(0xFF7);
// bitfield macros
#define _TBLPTRH_TBLPTRH_POSN                               0x0
#define _TBLPTRH_TBLPTRH_POSITION                           0x0
#define _TBLPTRH_TBLPTRH_SIZE                               0x8
#define _TBLPTRH_TBLPTRH_LENGTH                             0x8
#define _TBLPTRH_TBLPTRH_MASK                               0xFF

// Register: TBLPTRU
#define TBLPTRU TBLPTRU
extern volatile unsigned char           TBLPTRU             __at(0xFF8);
#ifndef _LIB_BUILD
asm("TBLPTRU equ 0FF8h");
#endif

// Register: PCLAT
#define PCLAT PCLAT
#ifndef __CCI__
extern volatile __uint24                PCLAT               __at(0xFF9);
#endif
#ifndef _LIB_BUILD
asm("PCLAT equ 0FF9h");
#endif
// aliases
#ifndef __CCI__
extern volatile __uint24                PC                  __at(0xFF9);
#endif
#ifndef _LIB_BUILD
asm("PC equ 0FF9h");
#endif

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0xFF9);
#ifndef _LIB_BUILD
asm("PCL equ 0FF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0xFF9);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0xFFA);
#ifndef _LIB_BUILD
asm("PCLATH equ 0FFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0xFFA);
// bitfield macros
#define _PCLATH_PCH_POSN                                    0x0
#define _PCLATH_PCH_POSITION                                0x0
#define _PCLATH_PCH_SIZE                                    0x8
#define _PCLATH_PCH_LENGTH                                  0x8
#define _PCLATH_PCH_MASK                                    0xFF

// Register: PCLATU
#define PCLATU PCLATU
extern volatile unsigned char           PCLATU              __at(0xFFB);
#ifndef _LIB_BUILD
asm("PCLATU equ 0FFBh");
#endif

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0xFFC);
#ifndef _LIB_BUILD
asm("STKPTR equ 0FFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
        unsigned                        :1;
        unsigned STKUNF                 :1;
        unsigned STKFUL                 :1;
    };
    struct {
        unsigned SP0                    :1;
        unsigned SP1                    :1;
        unsigned SP2                    :1;
        unsigned SP3                    :1;
        unsigned SP4                    :1;
        unsigned                        :2;
        unsigned STKOVF                 :1;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0xFFC);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F
#define _STKPTR_STKUNF_POSN                                 0x6
#define _STKPTR_STKUNF_POSITION                             0x6
#define _STKPTR_STKUNF_SIZE                                 0x1
#define _STKPTR_STKUNF_LENGTH                               0x1
#define _STKPTR_STKUNF_MASK                                 0x40
#define _STKPTR_STKFUL_POSN                                 0x7
#define _STKPTR_STKFUL_POSITION                             0x7
#define _STKPTR_STKFUL_SIZE                                 0x1
#define _STKPTR_STKFUL_LENGTH                               0x1
#define _STKPTR_STKFUL_MASK                                 0x80
#define _STKPTR_SP0_POSN                                    0x0
#define _STKPTR_SP0_POSITION                                0x0
#define _STKPTR_SP0_SIZE                                    0x1
#define _STKPTR_SP0_LENGTH                                  0x1
#define _STKPTR_SP0_MASK                                    0x1
#define _STKPTR_SP1_POSN                                    0x1
#define _STKPTR_SP1_POSITION                                0x1
#define _STKPTR_SP1_SIZE                                    0x1
#define _STKPTR_SP1_LENGTH                                  0x1
#define _STKPTR_SP1_MASK                                    0x2
#define _STKPTR_SP2_POSN                                    0x2
#define _STKPTR_SP2_POSITION                                0x2
#define _STKPTR_SP2_SIZE                                    0x1
#define _STKPTR_SP2_LENGTH                                  0x1
#define _STKPTR_SP2_MASK                                    0x4
#define _STKPTR_SP3_POSN                                    0x3
#define _STKPTR_SP3_POSITION                                0x3
#define _STKPTR_SP3_SIZE                                    0x1
#define _STKPTR_SP3_LENGTH                                  0x1
#define _STKPTR_SP3_MASK                                    0x8
#define _STKPTR_SP4_POSN                                    0x4
#define _STKPTR_SP4_POSITION                                0x4
#define _STKPTR_SP4_SIZE                                    0x1
#define _STKPTR_SP4_LENGTH                                  0x1
#define _STKPTR_SP4_MASK                                    0x10
#define _STKPTR_STKOVF_POSN                                 0x7
#define _STKPTR_STKOVF_POSITION                             0x7
#define _STKPTR_STKOVF_SIZE                                 0x1
#define _STKPTR_STKOVF_LENGTH                               0x1
#define _STKPTR_STKOVF_MASK                                 0x80

// Register: TOS
#define TOS TOS
#ifndef __CCI__
extern volatile __uint24                TOS                 __at(0xFFD);
#endif
#ifndef _LIB_BUILD
asm("TOS equ 0FFDh");
#endif

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0xFFD);
#ifndef _LIB_BUILD
asm("TOSL equ 0FFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0xFFD);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0xFFE);
#ifndef _LIB_BUILD
asm("TOSH equ 0FFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0xFFE);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF

// Register: TOSU
#define TOSU TOSU
extern volatile unsigned char           TOSU                __at(0xFFF);
#ifndef _LIB_BUILD
asm("TOSU equ 0FFFh");
#endif

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&0FFh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&0FFFFFh)
#endif
// BAUDCON1<ABDEN1>
extern volatile __bit                   ABDEN1              __at(0x7B38);	// @ (0xF67 * 8 + 0)
#define                                 ABDEN1_bit          _BIT_ACCESS(BAUDCON1,0)
// BAUDCON2<ABDEN2>
extern volatile __bit                   ABDEN2              __at(0x7988);	// @ (0xF31 * 8 + 0)
#define                                 ABDEN2_bit          _BIT_ACCESS(BAUDCON2,0)
// BAUDCON3<ABDEN3>
extern volatile __bit                   ABDEN3              __at(0x7968);	// @ (0xF2D * 8 + 0)
#define                                 ABDEN3_bit          _BIT_ACCESS(BAUDCON3,0)
// BAUDCON4<ABDEN4>
extern volatile __bit                   ABDEN4              __at(0x77E8);	// @ (0xEFD * 8 + 0)
#define                                 ABDEN4_bit          _BIT_ACCESS(BAUDCON4,0)
// BAUDCON1<ABDOVF1>
extern volatile __bit                   ABDOVF1             __at(0x7B3F);	// @ (0xF67 * 8 + 7)
#define                                 ABDOVF1_bit         _BIT_ACCESS(BAUDCON1,7)
// BAUDCON2<ABDOVF2>
extern volatile __bit                   ABDOVF2             __at(0x798F);	// @ (0xF31 * 8 + 7)
#define                                 ABDOVF2_bit         _BIT_ACCESS(BAUDCON2,7)
// BAUDCON3<ABDOVF3>
extern volatile __bit                   ABDOVF3             __at(0x796F);	// @ (0xF2D * 8 + 7)
#define                                 ABDOVF3_bit         _BIT_ACCESS(BAUDCON3,7)
// BAUDCON4<ABDOVF4>
extern volatile __bit                   ABDOVF4             __at(0x77EF);	// @ (0xEFD * 8 + 7)
#define                                 ABDOVF4_bit         _BIT_ACCESS(BAUDCON4,7)
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0x7E2D);	// @ (0xFC5 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP2CON2<ACKDT2>
extern volatile __bit                   ACKDT2              __at(0x78C5);	// @ (0xF18 * 8 + 5)
#define                                 ACKDT2_bit          _BIT_ACCESS(SSP2CON2,5)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0x7E2C);	// @ (0xFC5 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP2CON2<ACKEN2>
extern volatile __bit                   ACKEN2              __at(0x78C4);	// @ (0xF18 * 8 + 4)
#define                                 ACKEN2_bit          _BIT_ACCESS(SSP2CON2,4)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0x7E2E);	// @ (0xFC5 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP2CON2<ACKSTAT2>
extern volatile __bit                   ACKSTAT2            __at(0x78C6);	// @ (0xF18 * 8 + 6)
#define                                 ACKSTAT2_bit        _BIT_ACCESS(SSP2CON2,6)
// ACTCON<ACTEN>
extern volatile __bit                   ACTEN               __at(0x7B1F);	// @ (0xF63 * 8 + 7)
#define                                 ACTEN_bit           _BIT_ACCESS(ACTCON,7)
// ACTCON<ACTLOCK>
extern volatile __bit                   ACTLOCK             __at(0x7B1B);	// @ (0xF63 * 8 + 3)
#define                                 ACTLOCK_bit         _BIT_ACCESS(ACTCON,3)
// PIE5<ACTLOCKIE>
extern volatile __bit                   ACTLOCKIE           __at(0x7DBD);	// @ (0xFB7 * 8 + 5)
#define                                 ACTLOCKIE_bit       _BIT_ACCESS(PIE5,5)
// PIR5<ACTLOCKIF>
extern volatile __bit                   ACTLOCKIF           __at(0x7DC5);	// @ (0xFB8 * 8 + 5)
#define                                 ACTLOCKIF_bit       _BIT_ACCESS(PIR5,5)
// IPR5<ACTLOCKIP>
extern volatile __bit                   ACTLOCKIP           __at(0x7E95);	// @ (0xFD2 * 8 + 5)
#define                                 ACTLOCKIP_bit       _BIT_ACCESS(IPR5,5)
// ACTCON<ACTLOCKPOL>
extern volatile __bit                   ACTLOCKPOL          __at(0x7B1A);	// @ (0xF63 * 8 + 2)
#define                                 ACTLOCKPOL_bit      _BIT_ACCESS(ACTCON,2)
// ACTCON<ACTORS>
extern volatile __bit                   ACTORS              __at(0x7B19);	// @ (0xF63 * 8 + 1)
#define                                 ACTORS_bit          _BIT_ACCESS(ACTCON,1)
// PIE5<ACTORSIE>
extern volatile __bit                   ACTORSIE            __at(0x7DBE);	// @ (0xFB7 * 8 + 6)
#define                                 ACTORSIE_bit        _BIT_ACCESS(PIE5,6)
// PIR5<ACTORSIF>
extern volatile __bit                   ACTORSIF            __at(0x7DC6);	// @ (0xFB8 * 8 + 6)
#define                                 ACTORSIF_bit        _BIT_ACCESS(PIR5,6)
// IPR5<ACTORSIP>
extern volatile __bit                   ACTORSIP            __at(0x7E96);	// @ (0xFD2 * 8 + 6)
#define                                 ACTORSIP_bit        _BIT_ACCESS(IPR5,6)
// ACTCON<ACTORSPOL>
extern volatile __bit                   ACTORSPOL           __at(0x7B18);	// @ (0xF63 * 8 + 0)
#define                                 ACTORSPOL_bit       _BIT_ACCESS(ACTCON,0)
// ACTCON<ACTSIDL>
extern volatile __bit                   ACTSIDL             __at(0x7B1D);	// @ (0xF63 * 8 + 5)
#define                                 ACTSIDL_bit         _BIT_ACCESS(ACTCON,5)
// ACTCON<ACTSRC>
extern volatile __bit                   ACTSRC              __at(0x7B1C);	// @ (0xF63 * 8 + 4)
#define                                 ACTSRC_bit          _BIT_ACCESS(ACTCON,4)
// UIE<ACTVIE>
extern volatile __bit                   ACTVIE              __at(0x7082);	// @ (0xE10 * 8 + 2)
#define                                 ACTVIE_bit          _BIT_ACCESS(UIE,2)
// UIR<ACTVIF>
extern volatile __bit                   ACTVIF              __at(0x7BC2);	// @ (0xF78 * 8 + 2)
#define                                 ACTVIF_bit          _BIT_ACCESS(UIR,2)
// PMD3<ADCMD>
extern volatile __bit                   ADCMD               __at(0x778D);	// @ (0xEF1 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD3,5)
// ADCON3L<ADCS0>
extern volatile __bit                   ADCS0               __at(0x7450);	// @ (0xE8A * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCON3L,0)
// ADCON3L<ADCS1>
extern volatile __bit                   ADCS1               __at(0x7451);	// @ (0xE8A * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCON3L,1)
// ADCON3L<ADCS2>
extern volatile __bit                   ADCS2               __at(0x7452);	// @ (0xE8A * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCON3L,2)
// ADCON3L<ADCS3>
extern volatile __bit                   ADCS3               __at(0x7453);	// @ (0xE8A * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCON3L,3)
// ADCON3L<ADCS4>
extern volatile __bit                   ADCS4               __at(0x7454);	// @ (0xE8A * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCON3L,4)
// ADCON3L<ADCS5>
extern volatile __bit                   ADCS5               __at(0x7455);	// @ (0xE8A * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCON3L,5)
// ADCON3L<ADCS6>
extern volatile __bit                   ADCS6               __at(0x7456);	// @ (0xE8A * 8 + 6)
#define                                 ADCS6_bit           _BIT_ACCESS(ADCON3L,6)
// ADCON3L<ADCS7>
extern volatile __bit                   ADCS7               __at(0x7457);	// @ (0xE8A * 8 + 7)
#define                                 ADCS7_bit           _BIT_ACCESS(ADCON3L,7)
// UADDR<ADDR0>
extern volatile __bit                   ADDR0               __at(0x7BA0);	// @ (0xF74 * 8 + 0)
#define                                 ADDR0_bit           _BIT_ACCESS(UADDR,0)
// UADDR<ADDR1>
extern volatile __bit                   ADDR1               __at(0x7BA1);	// @ (0xF74 * 8 + 1)
#define                                 ADDR1_bit           _BIT_ACCESS(UADDR,1)
// UADDR<ADDR2>
extern volatile __bit                   ADDR2               __at(0x7BA2);	// @ (0xF74 * 8 + 2)
#define                                 ADDR2_bit           _BIT_ACCESS(UADDR,2)
// UADDR<ADDR3>
extern volatile __bit                   ADDR3               __at(0x7BA3);	// @ (0xF74 * 8 + 3)
#define                                 ADDR3_bit           _BIT_ACCESS(UADDR,3)
// UADDR<ADDR4>
extern volatile __bit                   ADDR4               __at(0x7BA4);	// @ (0xF74 * 8 + 4)
#define                                 ADDR4_bit           _BIT_ACCESS(UADDR,4)
// UADDR<ADDR5>
extern volatile __bit                   ADDR5               __at(0x7BA5);	// @ (0xF74 * 8 + 5)
#define                                 ADDR5_bit           _BIT_ACCESS(UADDR,5)
// UADDR<ADDR6>
extern volatile __bit                   ADDR6               __at(0x7BA6);	// @ (0xF74 * 8 + 6)
#define                                 ADDR6_bit           _BIT_ACCESS(UADDR,6)
// RCSTA1<ADEN>
extern volatile __bit                   ADEN                __at(0x7D5B);	// @ (0xFAB * 8 + 3)
#define                                 ADEN_bit            _BIT_ACCESS(RCSTA1,3)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x7CEE);	// @ (0xF9D * 8 + 6)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,6)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x7CF6);	// @ (0xF9E * 8 + 6)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,6)
// IPR1<ADIP>
extern volatile __bit                   ADIP                __at(0x7CFE);	// @ (0xF9F * 8 + 6)
#define                                 ADIP_bit            _BIT_ACCESS(IPR1,6)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0x7E29);	// @ (0xFC5 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP2CON2<ADMSK12>
extern volatile __bit                   ADMSK12             __at(0x78C1);	// @ (0xF18 * 8 + 1)
#define                                 ADMSK12_bit         _BIT_ACCESS(SSP2CON2,1)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0x7E2A);	// @ (0xFC5 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP2CON2<ADMSK22>
extern volatile __bit                   ADMSK22             __at(0x78C2);	// @ (0xF18 * 8 + 2)
#define                                 ADMSK22_bit         _BIT_ACCESS(SSP2CON2,2)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0x7E2B);	// @ (0xFC5 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP2CON2<ADMSK32>
extern volatile __bit                   ADMSK32             __at(0x78C3);	// @ (0xF18 * 8 + 3)
#define                                 ADMSK32_bit         _BIT_ACCESS(SSP2CON2,3)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0x7E2C);	// @ (0xFC5 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP2CON2<ADMSK42>
extern volatile __bit                   ADMSK42             __at(0x78C4);	// @ (0xF18 * 8 + 4)
#define                                 ADMSK42_bit         _BIT_ACCESS(SSP2CON2,4)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0x7E2D);	// @ (0xFC5 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// SSP2CON2<ADMSK52>
extern volatile __bit                   ADMSK52             __at(0x78C5);	// @ (0xF18 * 8 + 5)
#define                                 ADMSK52_bit         _BIT_ACCESS(SSP2CON2,5)
// ADCON1H<ADON>
extern volatile __bit                   ADON                __at(0x7E0F);	// @ (0xFC1 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON1H,7)
// ADCON3H<ADRC>
extern volatile __bit                   ADRC                __at(0x745F);	// @ (0xE8B * 8 + 7)
#define                                 ADRC_bit            _BIT_ACCESS(ADCON3H,7)
// ALRMCFG<ALRMEN>
extern volatile __bit                   ALRMEN              __at(0x7ADF);	// @ (0xF5B * 8 + 7)
#define                                 ALRMEN_bit          _BIT_ACCESS(ALRMCFG,7)
// ALRMCFG<ALRMPTR0>
extern volatile __bit                   ALRMPTR0            __at(0x7AD8);	// @ (0xF5B * 8 + 0)
#define                                 ALRMPTR0_bit        _BIT_ACCESS(ALRMCFG,0)
// ALRMCFG<ALRMPTR1>
extern volatile __bit                   ALRMPTR1            __at(0x7AD9);	// @ (0xF5B * 8 + 1)
#define                                 ALRMPTR1_bit        _BIT_ACCESS(ALRMCFG,1)
// ADCON2L<ALTS>
extern volatile __bit                   ALTS                __at(0x7460);	// @ (0xE8C * 8 + 0)
#define                                 ALTS_bit            _BIT_ACCESS(ADCON2L,0)
// ALRMCFG<AMASK0>
extern volatile __bit                   AMASK0              __at(0x7ADA);	// @ (0xF5B * 8 + 2)
#define                                 AMASK0_bit          _BIT_ACCESS(ALRMCFG,2)
// ALRMCFG<AMASK1>
extern volatile __bit                   AMASK1              __at(0x7ADB);	// @ (0xF5B * 8 + 3)
#define                                 AMASK1_bit          _BIT_ACCESS(ALRMCFG,3)
// ALRMCFG<AMASK2>
extern volatile __bit                   AMASK2              __at(0x7ADC);	// @ (0xF5B * 8 + 4)
#define                                 AMASK2_bit          _BIT_ACCESS(ALRMCFG,4)
// ALRMCFG<AMASK3>
extern volatile __bit                   AMASK3              __at(0x7ADD);	// @ (0xF5B * 8 + 5)
#define                                 AMASK3_bit          _BIT_ACCESS(ALRMCFG,5)
// ANCON1<ANSEL0>
extern volatile __bit                   ANSEL0              __at(0x7238);	// @ (0xE47 * 8 + 0)
#define                                 ANSEL0_bit          _BIT_ACCESS(ANCON1,0)
// ANCON1<ANSEL1>
extern volatile __bit                   ANSEL1              __at(0x7239);	// @ (0xE47 * 8 + 1)
#define                                 ANSEL1_bit          _BIT_ACCESS(ANCON1,1)
// ANCON2<ANSEL10>
extern volatile __bit                   ANSEL10             __at(0x7232);	// @ (0xE46 * 8 + 2)
#define                                 ANSEL10_bit         _BIT_ACCESS(ANCON2,2)
// ANCON2<ANSEL11>
extern volatile __bit                   ANSEL11             __at(0x7233);	// @ (0xE46 * 8 + 3)
#define                                 ANSEL11_bit         _BIT_ACCESS(ANCON2,3)
// ANCON2<ANSEL12>
extern volatile __bit                   ANSEL12             __at(0x7234);	// @ (0xE46 * 8 + 4)
#define                                 ANSEL12_bit         _BIT_ACCESS(ANCON2,4)
// ANCON2<ANSEL13>
extern volatile __bit                   ANSEL13             __at(0x7235);	// @ (0xE46 * 8 + 5)
#define                                 ANSEL13_bit         _BIT_ACCESS(ANCON2,5)
// ANCON2<ANSEL14>
extern volatile __bit                   ANSEL14             __at(0x7236);	// @ (0xE46 * 8 + 6)
#define                                 ANSEL14_bit         _BIT_ACCESS(ANCON2,6)
// ANCON2<ANSEL15>
extern volatile __bit                   ANSEL15             __at(0x7237);	// @ (0xE46 * 8 + 7)
#define                                 ANSEL15_bit         _BIT_ACCESS(ANCON2,7)
// ANCON3<ANSEL16>
extern volatile __bit                   ANSEL16             __at(0x7228);	// @ (0xE45 * 8 + 0)
#define                                 ANSEL16_bit         _BIT_ACCESS(ANCON3,0)
// ANCON3<ANSEL17>
extern volatile __bit                   ANSEL17             __at(0x7229);	// @ (0xE45 * 8 + 1)
#define                                 ANSEL17_bit         _BIT_ACCESS(ANCON3,1)
// ANCON3<ANSEL18>
extern volatile __bit                   ANSEL18             __at(0x722A);	// @ (0xE45 * 8 + 2)
#define                                 ANSEL18_bit         _BIT_ACCESS(ANCON3,2)
// ANCON3<ANSEL19>
extern volatile __bit                   ANSEL19             __at(0x722B);	// @ (0xE45 * 8 + 3)
#define                                 ANSEL19_bit         _BIT_ACCESS(ANCON3,3)
// ANCON1<ANSEL2>
extern volatile __bit                   ANSEL2              __at(0x723A);	// @ (0xE47 * 8 + 2)
#define                                 ANSEL2_bit          _BIT_ACCESS(ANCON1,2)
// ANCON3<ANSEL20>
extern volatile __bit                   ANSEL20             __at(0x722C);	// @ (0xE45 * 8 + 4)
#define                                 ANSEL20_bit         _BIT_ACCESS(ANCON3,4)
// ANCON3<ANSEL21>
extern volatile __bit                   ANSEL21             __at(0x722D);	// @ (0xE45 * 8 + 5)
#define                                 ANSEL21_bit         _BIT_ACCESS(ANCON3,5)
// ANCON3<ANSEL22>
extern volatile __bit                   ANSEL22             __at(0x722E);	// @ (0xE45 * 8 + 6)
#define                                 ANSEL22_bit         _BIT_ACCESS(ANCON3,6)
// ANCON3<ANSEL23>
extern volatile __bit                   ANSEL23             __at(0x722F);	// @ (0xE45 * 8 + 7)
#define                                 ANSEL23_bit         _BIT_ACCESS(ANCON3,7)
// ANCON1<ANSEL3>
extern volatile __bit                   ANSEL3              __at(0x723B);	// @ (0xE47 * 8 + 3)
#define                                 ANSEL3_bit          _BIT_ACCESS(ANCON1,3)
// ANCON1<ANSEL4>
extern volatile __bit                   ANSEL4              __at(0x723C);	// @ (0xE47 * 8 + 4)
#define                                 ANSEL4_bit          _BIT_ACCESS(ANCON1,4)
// ANCON1<ANSEL5>
extern volatile __bit                   ANSEL5              __at(0x723D);	// @ (0xE47 * 8 + 5)
#define                                 ANSEL5_bit          _BIT_ACCESS(ANCON1,5)
// ANCON1<ANSEL6>
extern volatile __bit                   ANSEL6              __at(0x723E);	// @ (0xE47 * 8 + 6)
#define                                 ANSEL6_bit          _BIT_ACCESS(ANCON1,6)
// ANCON1<ANSEL7>
extern volatile __bit                   ANSEL7              __at(0x723F);	// @ (0xE47 * 8 + 7)
#define                                 ANSEL7_bit          _BIT_ACCESS(ANCON1,7)
// ANCON2<ANSEL8>
extern volatile __bit                   ANSEL8              __at(0x7230);	// @ (0xE46 * 8 + 0)
#define                                 ANSEL8_bit          _BIT_ACCESS(ANCON2,0)
// ANCON2<ANSEL9>
extern volatile __bit                   ANSEL9              __at(0x7231);	// @ (0xE46 * 8 + 1)
#define                                 ANSEL9_bit          _BIT_ACCESS(ANCON2,1)
// ALRMRPT<ARPT0>
extern volatile __bit                   ARPT0               __at(0x7AD0);	// @ (0xF5A * 8 + 0)
#define                                 ARPT0_bit           _BIT_ACCESS(ALRMRPT,0)
// ALRMRPT<ARPT1>
extern volatile __bit                   ARPT1               __at(0x7AD1);	// @ (0xF5A * 8 + 1)
#define                                 ARPT1_bit           _BIT_ACCESS(ALRMRPT,1)
// ALRMRPT<ARPT2>
extern volatile __bit                   ARPT2               __at(0x7AD2);	// @ (0xF5A * 8 + 2)
#define                                 ARPT2_bit           _BIT_ACCESS(ALRMRPT,2)
// ALRMRPT<ARPT3>
extern volatile __bit                   ARPT3               __at(0x7AD3);	// @ (0xF5A * 8 + 3)
#define                                 ARPT3_bit           _BIT_ACCESS(ALRMRPT,3)
// ALRMRPT<ARPT4>
extern volatile __bit                   ARPT4               __at(0x7AD4);	// @ (0xF5A * 8 + 4)
#define                                 ARPT4_bit           _BIT_ACCESS(ALRMRPT,4)
// ALRMRPT<ARPT5>
extern volatile __bit                   ARPT5               __at(0x7AD5);	// @ (0xF5A * 8 + 5)
#define                                 ARPT5_bit           _BIT_ACCESS(ALRMRPT,5)
// ALRMRPT<ARPT6>
extern volatile __bit                   ARPT6               __at(0x7AD6);	// @ (0xF5A * 8 + 6)
#define                                 ARPT6_bit           _BIT_ACCESS(ALRMRPT,6)
// ALRMRPT<ARPT7>
extern volatile __bit                   ARPT7               __at(0x7AD7);	// @ (0xF5A * 8 + 7)
#define                                 ARPT7_bit           _BIT_ACCESS(ALRMRPT,7)
// ADCON1L<ASAM>
extern volatile __bit                   ASAM                __at(0x7E02);	// @ (0xFC0 * 8 + 2)
#define                                 ASAM_bit            _BIT_ACCESS(ADCON1L,2)
// ADCON5H<ASENA>
extern volatile __bit                   ASENA               __at(0x744F);	// @ (0xE89 * 8 + 7)
#define                                 ASENA_bit           _BIT_ACCESS(ADCON5H,7)
// ADCON5H<ASINTMD0>
extern volatile __bit                   ASINTMD0            __at(0x7448);	// @ (0xE89 * 8 + 0)
#define                                 ASINTMD0_bit        _BIT_ACCESS(ADCON5H,0)
// ADCON5H<ASINTMD1>
extern volatile __bit                   ASINTMD1            __at(0x7449);	// @ (0xE89 * 8 + 1)
#define                                 ASINTMD1_bit        _BIT_ACCESS(ADCON5H,1)
// DMABCL<BC0>
extern volatile __bit                   BC0                 __at(0x7B60);	// @ (0xF6C * 8 + 0)
#define                                 BC0_bit             _BIT_ACCESS(DMABCL,0)
// DMABCL<BC1>
extern volatile __bit                   BC1                 __at(0x7B61);	// @ (0xF6C * 8 + 1)
#define                                 BC1_bit             _BIT_ACCESS(DMABCL,1)
// DMABCL<BC2>
extern volatile __bit                   BC2                 __at(0x7B62);	// @ (0xF6C * 8 + 2)
#define                                 BC2_bit             _BIT_ACCESS(DMABCL,2)
// DMABCL<BC3>
extern volatile __bit                   BC3                 __at(0x7B63);	// @ (0xF6C * 8 + 3)
#define                                 BC3_bit             _BIT_ACCESS(DMABCL,3)
// DMABCL<BC4>
extern volatile __bit                   BC4                 __at(0x7B64);	// @ (0xF6C * 8 + 4)
#define                                 BC4_bit             _BIT_ACCESS(DMABCL,4)
// DMABCL<BC5>
extern volatile __bit                   BC5                 __at(0x7B65);	// @ (0xF6C * 8 + 5)
#define                                 BC5_bit             _BIT_ACCESS(DMABCL,5)
// DMABCL<BC6>
extern volatile __bit                   BC6                 __at(0x7B66);	// @ (0xF6C * 8 + 6)
#define                                 BC6_bit             _BIT_ACCESS(DMABCL,6)
// DMABCL<BC7>
extern volatile __bit                   BC7                 __at(0x7B67);	// @ (0xF6C * 8 + 7)
#define                                 BC7_bit             _BIT_ACCESS(DMABCL,7)
// DMABCH<BC8>
extern volatile __bit                   BC8                 __at(0x7B58);	// @ (0xF6B * 8 + 0)
#define                                 BC8_bit             _BIT_ACCESS(DMABCH,0)
// DMABCH<BC9>
extern volatile __bit                   BC9                 __at(0x7B59);	// @ (0xF6B * 8 + 1)
#define                                 BC9_bit             _BIT_ACCESS(DMABCH,1)
// PIE2<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x7D03);	// @ (0xFA0 * 8 + 3)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE2,3)
// PIR2<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x7D0B);	// @ (0xFA1 * 8 + 3)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR2,3)
// IPR2<BCL1IP>
extern volatile __bit                   BCL1IP              __at(0x7D13);	// @ (0xFA2 * 8 + 3)
#define                                 BCL1IP_bit          _BIT_ACCESS(IPR2,3)
// PIE2<BCL2IE>
extern volatile __bit                   BCL2IE              __at(0x7D05);	// @ (0xFA0 * 8 + 5)
#define                                 BCL2IE_bit          _BIT_ACCESS(PIE2,5)
// PIR2<BCL2IF>
extern volatile __bit                   BCL2IF              __at(0x7D0D);	// @ (0xFA1 * 8 + 5)
#define                                 BCL2IF_bit          _BIT_ACCESS(PIR2,5)
// IPR2<BCL2IP>
extern volatile __bit                   BCL2IP              __at(0x7D15);	// @ (0xFA2 * 8 + 5)
#define                                 BCL2IP_bit          _BIT_ACCESS(IPR2,5)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0x7E38);	// @ (0xFC7 * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// SSP2STAT<BF2>
extern volatile __bit                   BF2                 __at(0x78D0);	// @ (0xF1A * 8 + 0)
#define                                 BF2_bit             _BIT_ACCESS(SSP2STAT,0)
// HLVDCON<BGVST>
extern volatile __bit                   BGVST               __at(0x7D46);	// @ (0xFA8 * 8 + 6)
#define                                 BGVST_bit           _BIT_ACCESS(HLVDCON,6)
// LCDREG<BIAS0>
extern volatile __bit                   BIAS0               __at(0x76C3);	// @ (0xED8 * 8 + 3)
#define                                 BIAS0_bit           _BIT_ACCESS(LCDREG,3)
// LCDREG<BIAS1>
extern volatile __bit                   BIAS1               __at(0x76C4);	// @ (0xED8 * 8 + 4)
#define                                 BIAS1_bit           _BIT_ACCESS(LCDREG,4)
// LCDREG<BIAS2>
extern volatile __bit                   BIAS2               __at(0x76C5);	// @ (0xED8 * 8 + 5)
#define                                 BIAS2_bit           _BIT_ACCESS(LCDREG,5)
// LCDPS<BIASMD>
extern volatile __bit                   BIASMD              __at(0x76D6);	// @ (0xEDA * 8 + 6)
#define                                 BIASMD_bit          _BIT_ACCESS(LCDPS,6)
// BAUDCON1<BRG161>
extern volatile __bit                   BRG161              __at(0x7B3B);	// @ (0xF67 * 8 + 3)
#define                                 BRG161_bit          _BIT_ACCESS(BAUDCON1,3)
// BAUDCON2<BRG162>
extern volatile __bit                   BRG162              __at(0x798B);	// @ (0xF31 * 8 + 3)
#define                                 BRG162_bit          _BIT_ACCESS(BAUDCON2,3)
// BAUDCON3<BRG163>
extern volatile __bit                   BRG163              __at(0x796B);	// @ (0xF2D * 8 + 3)
#define                                 BRG163_bit          _BIT_ACCESS(BAUDCON3,3)
// BAUDCON4<BRG164>
extern volatile __bit                   BRG164              __at(0x77EB);	// @ (0xEFD * 8 + 3)
#define                                 BRG164_bit          _BIT_ACCESS(BAUDCON4,3)
// TXSTA1<BRGH1>
extern volatile __bit                   BRGH1               __at(0x7D62);	// @ (0xFAC * 8 + 2)
#define                                 BRGH1_bit           _BIT_ACCESS(TXSTA1,2)
// UEIE<BTOEE>
extern volatile __bit                   BTOEE               __at(0x707C);	// @ (0xE0F * 8 + 4)
#define                                 BTOEE_bit           _BIT_ACCESS(UEIE,4)
// UEIR<BTOEF>
extern volatile __bit                   BTOEF               __at(0x7BBC);	// @ (0xF77 * 8 + 4)
#define                                 BTOEF_bit           _BIT_ACCESS(UEIR,4)
// UEIE<BTSEE>
extern volatile __bit                   BTSEE               __at(0x707F);	// @ (0xE0F * 8 + 7)
#define                                 BTSEE_bit           _BIT_ACCESS(UEIE,7)
// UEIR<BTSEF>
extern volatile __bit                   BTSEF               __at(0x7BBF);	// @ (0xF77 * 8 + 7)
#define                                 BTSEF_bit           _BIT_ACCESS(UEIR,7)
// ADCON2L<BUFM>
extern volatile __bit                   BUFM                __at(0x7461);	// @ (0xE8C * 8 + 1)
#define                                 BUFM_bit            _BIT_ACCESS(ADCON2L,1)
// ADCON2H<BUFREGEN>
extern volatile __bit                   BUFREGEN            __at(0x746B);	// @ (0xE8D * 8 + 3)
#define                                 BUFREGEN_bit        _BIT_ACCESS(ADCON2H,3)
// ADCON2L<BUFS>
extern volatile __bit                   BUFS                __at(0x7467);	// @ (0xE8C * 8 + 7)
#define                                 BUFS_bit            _BIT_ACCESS(ADCON2L,7)
// CCPTMRS2<C10TSEL>
extern volatile __bit                   C10TSEL             __at(0x79A4);	// @ (0xF34 * 8 + 4)
#define                                 C10TSEL_bit         _BIT_ACCESS(CCPTMRS2,4)
// CCPTMRS2<C10TSEL0>
extern volatile __bit                   C10TSEL0            __at(0x79A4);	// @ (0xF34 * 8 + 4)
#define                                 C10TSEL0_bit        _BIT_ACCESS(CCPTMRS2,4)
// CM1CON<C1CH0>
extern volatile __bit                   C1CH0               __at(0x7A98);	// @ (0xF53 * 8 + 0)
#define                                 C1CH0_bit           _BIT_ACCESS(CM1CON,0)
// CM1CON<C1CH1>
extern volatile __bit                   C1CH1               __at(0x7A99);	// @ (0xF53 * 8 + 1)
#define                                 C1CH1_bit           _BIT_ACCESS(CM1CON,1)
// CMSTAT<C1OUT>
extern volatile __bit                   C1OUT               __at(0x7E20);	// @ (0xFC4 * 8 + 0)
#define                                 C1OUT_bit           _BIT_ACCESS(CMSTAT,0)
// PORTF<C1OUTF>
extern volatile __bit                   C1OUTF              __at(0x7C2A);	// @ (0xF85 * 8 + 2)
#define                                 C1OUTF_bit          _BIT_ACCESS(PORTF,2)
// CCPTMRS0<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x79B0);	// @ (0xF36 * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x79B1);	// @ (0xF36 * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS0,1)
// CCPTMRS0<C1TSEL2>
extern volatile __bit                   C1TSEL2             __at(0x79B2);	// @ (0xF36 * 8 + 2)
#define                                 C1TSEL2_bit         _BIT_ACCESS(CCPTMRS0,2)
// CMSTAT<C2OUT>
extern volatile __bit                   C2OUT               __at(0x7E21);	// @ (0xFC4 * 8 + 1)
#define                                 C2OUT_bit           _BIT_ACCESS(CMSTAT,1)
// CCPTMRS0<C2TSEL0>
extern volatile __bit                   C2TSEL0             __at(0x79B3);	// @ (0xF36 * 8 + 3)
#define                                 C2TSEL0_bit         _BIT_ACCESS(CCPTMRS0,3)
// CCPTMRS0<C2TSEL1>
extern volatile __bit                   C2TSEL1             __at(0x79B4);	// @ (0xF36 * 8 + 4)
#define                                 C2TSEL1_bit         _BIT_ACCESS(CCPTMRS0,4)
// CCPTMRS0<C2TSEL2>
extern volatile __bit                   C2TSEL2             __at(0x79B5);	// @ (0xF36 * 8 + 5)
#define                                 C2TSEL2_bit         _BIT_ACCESS(CCPTMRS0,5)
// CMSTAT<C3OUT>
extern volatile __bit                   C3OUT               __at(0x7E22);	// @ (0xFC4 * 8 + 2)
#define                                 C3OUT_bit           _BIT_ACCESS(CMSTAT,2)
// PORTG<C3OUTG>
extern volatile __bit                   C3OUTG              __at(0x7C31);	// @ (0xF86 * 8 + 1)
#define                                 C3OUTG_bit          _BIT_ACCESS(PORTG,1)
// CCPTMRS0<C3TSEL0>
extern volatile __bit                   C3TSEL0             __at(0x79B6);	// @ (0xF36 * 8 + 6)
#define                                 C3TSEL0_bit         _BIT_ACCESS(CCPTMRS0,6)
// CCPTMRS0<C3TSEL1>
extern volatile __bit                   C3TSEL1             __at(0x79B7);	// @ (0xF36 * 8 + 7)
#define                                 C3TSEL1_bit         _BIT_ACCESS(CCPTMRS0,7)
// CCPTMRS1<C4TSEL0>
extern volatile __bit                   C4TSEL0             __at(0x79A8);	// @ (0xF35 * 8 + 0)
#define                                 C4TSEL0_bit         _BIT_ACCESS(CCPTMRS1,0)
// CCPTMRS1<C4TSEL1>
extern volatile __bit                   C4TSEL1             __at(0x79A9);	// @ (0xF35 * 8 + 1)
#define                                 C4TSEL1_bit         _BIT_ACCESS(CCPTMRS1,1)
// CCPTMRS1<C5TSEL>
extern volatile __bit                   C5TSEL              __at(0x79AA);	// @ (0xF35 * 8 + 2)
#define                                 C5TSEL_bit          _BIT_ACCESS(CCPTMRS1,2)
// CCPTMRS1<C5TSEL0>
extern volatile __bit                   C5TSEL0             __at(0x79AA);	// @ (0xF35 * 8 + 2)
#define                                 C5TSEL0_bit         _BIT_ACCESS(CCPTMRS1,2)
// CCPTMRS1<C6TSEL>
extern volatile __bit                   C6TSEL              __at(0x79AC);	// @ (0xF35 * 8 + 4)
#define                                 C6TSEL_bit          _BIT_ACCESS(CCPTMRS1,4)
// CCPTMRS1<C6TSEL0>
extern volatile __bit                   C6TSEL0             __at(0x79AC);	// @ (0xF35 * 8 + 4)
#define                                 C6TSEL0_bit         _BIT_ACCESS(CCPTMRS1,4)
// CCPTMRS1<C7TSEL0>
extern volatile __bit                   C7TSEL0             __at(0x79AE);	// @ (0xF35 * 8 + 6)
#define                                 C7TSEL0_bit         _BIT_ACCESS(CCPTMRS1,6)
// CCPTMRS1<C7TSEL1>
extern volatile __bit                   C7TSEL1             __at(0x79AF);	// @ (0xF35 * 8 + 7)
#define                                 C7TSEL1_bit         _BIT_ACCESS(CCPTMRS1,7)
// CCPTMRS2<C8TSEL0>
extern volatile __bit                   C8TSEL0             __at(0x79A0);	// @ (0xF34 * 8 + 0)
#define                                 C8TSEL0_bit         _BIT_ACCESS(CCPTMRS2,0)
// CCPTMRS2<C8TSEL1>
extern volatile __bit                   C8TSEL1             __at(0x79A1);	// @ (0xF34 * 8 + 1)
#define                                 C8TSEL1_bit         _BIT_ACCESS(CCPTMRS2,1)
// CCPTMRS2<C9TSEL>
extern volatile __bit                   C9TSEL              __at(0x79A2);	// @ (0xF34 * 8 + 2)
#define                                 C9TSEL_bit          _BIT_ACCESS(CCPTMRS2,2)
// CCPTMRS2<C9TSEL0>
extern volatile __bit                   C9TSEL0             __at(0x79A2);	// @ (0xF34 * 8 + 2)
#define                                 C9TSEL0_bit         _BIT_ACCESS(CCPTMRS2,2)
// RTCCAL<CAL0>
extern volatile __bit                   CAL0                __at(0x7AF0);	// @ (0xF5E * 8 + 0)
#define                                 CAL0_bit            _BIT_ACCESS(RTCCAL,0)
// RTCCAL<CAL1>
extern volatile __bit                   CAL1                __at(0x7AF1);	// @ (0xF5E * 8 + 1)
#define                                 CAL1_bit            _BIT_ACCESS(RTCCAL,1)
// RTCCAL<CAL2>
extern volatile __bit                   CAL2                __at(0x7AF2);	// @ (0xF5E * 8 + 2)
#define                                 CAL2_bit            _BIT_ACCESS(RTCCAL,2)
// RTCCAL<CAL3>
extern volatile __bit                   CAL3                __at(0x7AF3);	// @ (0xF5E * 8 + 3)
#define                                 CAL3_bit            _BIT_ACCESS(RTCCAL,3)
// RTCCAL<CAL4>
extern volatile __bit                   CAL4                __at(0x7AF4);	// @ (0xF5E * 8 + 4)
#define                                 CAL4_bit            _BIT_ACCESS(RTCCAL,4)
// RTCCAL<CAL5>
extern volatile __bit                   CAL5                __at(0x7AF5);	// @ (0xF5E * 8 + 5)
#define                                 CAL5_bit            _BIT_ACCESS(RTCCAL,5)
// RTCCAL<CAL6>
extern volatile __bit                   CAL6                __at(0x7AF6);	// @ (0xF5E * 8 + 6)
#define                                 CAL6_bit            _BIT_ACCESS(RTCCAL,6)
// RTCCAL<CAL7>
extern volatile __bit                   CAL7                __at(0x7AF7);	// @ (0xF5E * 8 + 7)
#define                                 CAL7_bit            _BIT_ACCESS(RTCCAL,7)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x7EC0);	// @ (0xFD8 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CM1CON<CCH01>
extern volatile __bit                   CCH01               __at(0x7A98);	// @ (0xF53 * 8 + 0)
#define                                 CCH01_bit           _BIT_ACCESS(CM1CON,0)
// CM2CON<CCH02>
extern volatile __bit                   CCH02               __at(0x79C0);	// @ (0xF38 * 8 + 0)
#define                                 CCH02_bit           _BIT_ACCESS(CM2CON,0)
// CM3CON<CCH03>
extern volatile __bit                   CCH03               __at(0x79B8);	// @ (0xF37 * 8 + 0)
#define                                 CCH03_bit           _BIT_ACCESS(CM3CON,0)
// IPR5<CCH05>
extern volatile __bit                   CCH05               __at(0x7E90);	// @ (0xFD2 * 8 + 0)
#define                                 CCH05_bit           _BIT_ACCESS(IPR5,0)
// CM1CON<CCH11>
extern volatile __bit                   CCH11               __at(0x7A99);	// @ (0xF53 * 8 + 1)
#define                                 CCH11_bit           _BIT_ACCESS(CM1CON,1)
// CM2CON<CCH12>
extern volatile __bit                   CCH12               __at(0x79C1);	// @ (0xF38 * 8 + 1)
#define                                 CCH12_bit           _BIT_ACCESS(CM2CON,1)
// CM3CON<CCH13>
extern volatile __bit                   CCH13               __at(0x79B9);	// @ (0xF37 * 8 + 1)
#define                                 CCH13_bit           _BIT_ACCESS(CM3CON,1)
// IPR5<CCH15>
extern volatile __bit                   CCH15               __at(0x7E91);	// @ (0xFD2 * 8 + 1)
#define                                 CCH15_bit           _BIT_ACCESS(IPR5,1)
// IPR4<CCIP3IP>
extern volatile __bit                   CCIP3IP             __at(0x7DB0);	// @ (0xFB6 * 8 + 0)
#define                                 CCIP3IP_bit         _BIT_ACCESS(IPR4,0)
// PORTE<CCP10>
extern volatile __bit                   CCP10               __at(0x7C22);	// @ (0xF84 * 8 + 2)
#define                                 CCP10_bit           _BIT_ACCESS(PORTE,2)
// PIE4<CCP10IE>
extern volatile __bit                   CCP10IE             __at(0x7DA7);	// @ (0xFB4 * 8 + 7)
#define                                 CCP10IE_bit         _BIT_ACCESS(PIE4,7)
// PIR4<CCP10IF>
extern volatile __bit                   CCP10IF             __at(0x7DAF);	// @ (0xFB5 * 8 + 7)
#define                                 CCP10IF_bit         _BIT_ACCESS(PIR4,7)
// IPR4<CCP10IP>
extern volatile __bit                   CCP10IP             __at(0x7DB7);	// @ (0xFB6 * 8 + 7)
#define                                 CCP10IP_bit         _BIT_ACCESS(IPR4,7)
// CCP10CON<CCP10M0>
extern volatile __bit                   CCP10M0             __at(0x7A00);	// @ (0xF40 * 8 + 0)
#define                                 CCP10M0_bit         _BIT_ACCESS(CCP10CON,0)
// CCP10CON<CCP10M1>
extern volatile __bit                   CCP10M1             __at(0x7A01);	// @ (0xF40 * 8 + 1)
#define                                 CCP10M1_bit         _BIT_ACCESS(CCP10CON,1)
// CCP10CON<CCP10M2>
extern volatile __bit                   CCP10M2             __at(0x7A02);	// @ (0xF40 * 8 + 2)
#define                                 CCP10M2_bit         _BIT_ACCESS(CCP10CON,2)
// CCP10CON<CCP10M3>
extern volatile __bit                   CCP10M3             __at(0x7A03);	// @ (0xF40 * 8 + 3)
#define                                 CCP10M3_bit         _BIT_ACCESS(CCP10CON,3)
// PMD0<CCP10MD>
extern volatile __bit                   CCP10MD             __at(0x77A7);	// @ (0xEF4 * 8 + 7)
#define                                 CCP10MD_bit         _BIT_ACCESS(PMD0,7)
// ODCON2<CCP10OD>
extern volatile __bit                   CCP10OD             __at(0x7757);	// @ (0xEEA * 8 + 7)
#define                                 CCP10OD_bit         _BIT_ACCESS(ODCON2,7)
// RPINR38_39<CCP10R0>
extern volatile __bit                   CCP10R0             __at(0x71E8);	// @ (0xE3D * 8 + 0)
#define                                 CCP10R0_bit         _BIT_ACCESS(RPINR38_39,0)
// RPINR38_39<CCP10R1>
extern volatile __bit                   CCP10R1             __at(0x71E9);	// @ (0xE3D * 8 + 1)
#define                                 CCP10R1_bit         _BIT_ACCESS(RPINR38_39,1)
// RPINR38_39<CCP10R2>
extern volatile __bit                   CCP10R2             __at(0x71EA);	// @ (0xE3D * 8 + 2)
#define                                 CCP10R2_bit         _BIT_ACCESS(RPINR38_39,2)
// RPINR38_39<CCP10R3>
extern volatile __bit                   CCP10R3             __at(0x71EB);	// @ (0xE3D * 8 + 3)
#define                                 CCP10R3_bit         _BIT_ACCESS(RPINR38_39,3)
// CCP10CON<CCP10X>
extern volatile __bit                   CCP10X              __at(0x7A05);	// @ (0xF40 * 8 + 5)
#define                                 CCP10X_bit          _BIT_ACCESS(CCP10CON,5)
// CCP10CON<CCP10Y>
extern volatile __bit                   CCP10Y              __at(0x7A04);	// @ (0xF40 * 8 + 4)
#define                                 CCP10Y_bit          _BIT_ACCESS(CCP10CON,4)
// PIE3<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x7D19);	// @ (0xFA3 * 8 + 1)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x7D21);	// @ (0xFA4 * 8 + 1)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR3,1)
// IPR3<CCP1IP>
extern volatile __bit                   CCP1IP              __at(0x7D29);	// @ (0xFA5 * 8 + 1)
#define                                 CCP1IP_bit          _BIT_ACCESS(IPR3,1)
// CCP1CON<CCP1M0>
extern volatile __bit                   CCP1M0              __at(0x7DC8);	// @ (0xFB9 * 8 + 0)
#define                                 CCP1M0_bit          _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1M1>
extern volatile __bit                   CCP1M1              __at(0x7DC9);	// @ (0xFB9 * 8 + 1)
#define                                 CCP1M1_bit          _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1M2>
extern volatile __bit                   CCP1M2              __at(0x7DCA);	// @ (0xFB9 * 8 + 2)
#define                                 CCP1M2_bit          _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1M3>
extern volatile __bit                   CCP1M3              __at(0x7DCB);	// @ (0xFB9 * 8 + 3)
#define                                 CCP1M3_bit          _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1X>
extern volatile __bit                   CCP1X               __at(0x7DCD);	// @ (0xFB9 * 8 + 5)
#define                                 CCP1X_bit           _BIT_ACCESS(CCP1CON,5)
// CCP1CON<CCP1Y>
extern volatile __bit                   CCP1Y               __at(0x7DCC);	// @ (0xFB9 * 8 + 4)
#define                                 CCP1Y_bit           _BIT_ACCESS(CCP1CON,4)
// PORTC<CCP2>
extern volatile __bit                   CCP2                __at(0x7C11);	// @ (0xF82 * 8 + 1)
#define                                 CCP2_bit            _BIT_ACCESS(PORTC,1)
// PORTE<CCP2E>
extern volatile __bit                   CCP2E               __at(0x7C27);	// @ (0xF84 * 8 + 7)
#define                                 CCP2E_bit           _BIT_ACCESS(PORTE,7)
// PIE3<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x7D1A);	// @ (0xFA3 * 8 + 2)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE3,2)
// PIR3<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x7D22);	// @ (0xFA4 * 8 + 2)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR3,2)
// IPR3<CCP2IP>
extern volatile __bit                   CCP2IP              __at(0x7D2A);	// @ (0xFA5 * 8 + 2)
#define                                 CCP2IP_bit          _BIT_ACCESS(IPR3,2)
// CCP2CON<CCP2M0>
extern volatile __bit                   CCP2M0              __at(0x7A70);	// @ (0xF4E * 8 + 0)
#define                                 CCP2M0_bit          _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2M1>
extern volatile __bit                   CCP2M1              __at(0x7A71);	// @ (0xF4E * 8 + 1)
#define                                 CCP2M1_bit          _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2M2>
extern volatile __bit                   CCP2M2              __at(0x7A72);	// @ (0xF4E * 8 + 2)
#define                                 CCP2M2_bit          _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2M3>
extern volatile __bit                   CCP2M3              __at(0x7A73);	// @ (0xF4E * 8 + 3)
#define                                 CCP2M3_bit          _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2X>
extern volatile __bit                   CCP2X               __at(0x7A75);	// @ (0xF4E * 8 + 5)
#define                                 CCP2X_bit           _BIT_ACCESS(CCP2CON,5)
// CCP2CON<CCP2Y>
extern volatile __bit                   CCP2Y               __at(0x7A74);	// @ (0xF4E * 8 + 4)
#define                                 CCP2Y_bit           _BIT_ACCESS(CCP2CON,4)
// PORTB<CCP2_PA2>
extern volatile __bit                   CCP2_PA2            __at(0x7C0B);	// @ (0xF81 * 8 + 3)
#define                                 CCP2_PA2_bit        _BIT_ACCESS(PORTB,3)
// CCP3CON<CCP3M0>
extern volatile __bit                   CCP3M0              __at(0x7A48);	// @ (0xF49 * 8 + 0)
#define                                 CCP3M0_bit          _BIT_ACCESS(CCP3CON,0)
// CCP3CON<CCP3M1>
extern volatile __bit                   CCP3M1              __at(0x7A49);	// @ (0xF49 * 8 + 1)
#define                                 CCP3M1_bit          _BIT_ACCESS(CCP3CON,1)
// CCP3CON<CCP3M2>
extern volatile __bit                   CCP3M2              __at(0x7A4A);	// @ (0xF49 * 8 + 2)
#define                                 CCP3M2_bit          _BIT_ACCESS(CCP3CON,2)
// CCP3CON<CCP3M3>
extern volatile __bit                   CCP3M3              __at(0x7A4B);	// @ (0xF49 * 8 + 3)
#define                                 CCP3M3_bit          _BIT_ACCESS(CCP3CON,3)
// CCP3CON<CCP3X>
extern volatile __bit                   CCP3X               __at(0x7A4D);	// @ (0xF49 * 8 + 5)
#define                                 CCP3X_bit           _BIT_ACCESS(CCP3CON,5)
// CCP3CON<CCP3Y>
extern volatile __bit                   CCP3Y               __at(0x7A4C);	// @ (0xF49 * 8 + 4)
#define                                 CCP3Y_bit           _BIT_ACCESS(CCP3CON,4)
// PIE4<CCP4IE>
extern volatile __bit                   CCP4IE              __at(0x7DA1);	// @ (0xFB4 * 8 + 1)
#define                                 CCP4IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<CCP4IF>
extern volatile __bit                   CCP4IF              __at(0x7DA9);	// @ (0xFB5 * 8 + 1)
#define                                 CCP4IF_bit          _BIT_ACCESS(PIR4,1)
// IPR4<CCP4IP>
extern volatile __bit                   CCP4IP              __at(0x7DB1);	// @ (0xFB6 * 8 + 1)
#define                                 CCP4IP_bit          _BIT_ACCESS(IPR4,1)
// CCP4CON<CCP4M0>
extern volatile __bit                   CCP4M0              __at(0x7880);	// @ (0xF10 * 8 + 0)
#define                                 CCP4M0_bit          _BIT_ACCESS(CCP4CON,0)
// CCP4CON<CCP4M1>
extern volatile __bit                   CCP4M1              __at(0x7881);	// @ (0xF10 * 8 + 1)
#define                                 CCP4M1_bit          _BIT_ACCESS(CCP4CON,1)
// CCP4CON<CCP4M2>
extern volatile __bit                   CCP4M2              __at(0x7882);	// @ (0xF10 * 8 + 2)
#define                                 CCP4M2_bit          _BIT_ACCESS(CCP4CON,2)
// CCP4CON<CCP4M3>
extern volatile __bit                   CCP4M3              __at(0x7883);	// @ (0xF10 * 8 + 3)
#define                                 CCP4M3_bit          _BIT_ACCESS(CCP4CON,3)
// PMD0<CCP4MD>
extern volatile __bit                   CCP4MD              __at(0x77A1);	// @ (0xEF4 * 8 + 1)
#define                                 CCP4MD_bit          _BIT_ACCESS(PMD0,1)
// ODCON2<CCP4OD>
extern volatile __bit                   CCP4OD              __at(0x7751);	// @ (0xEEA * 8 + 1)
#define                                 CCP4OD_bit          _BIT_ACCESS(ODCON2,1)
// RPINR32_33<CCP4R0>
extern volatile __bit                   CCP4R0              __at(0x71D0);	// @ (0xE3A * 8 + 0)
#define                                 CCP4R0_bit          _BIT_ACCESS(RPINR32_33,0)
// RPINR32_33<CCP4R1>
extern volatile __bit                   CCP4R1              __at(0x71D1);	// @ (0xE3A * 8 + 1)
#define                                 CCP4R1_bit          _BIT_ACCESS(RPINR32_33,1)
// RPINR32_33<CCP4R2>
extern volatile __bit                   CCP4R2              __at(0x71D2);	// @ (0xE3A * 8 + 2)
#define                                 CCP4R2_bit          _BIT_ACCESS(RPINR32_33,2)
// RPINR32_33<CCP4R3>
extern volatile __bit                   CCP4R3              __at(0x71D3);	// @ (0xE3A * 8 + 3)
#define                                 CCP4R3_bit          _BIT_ACCESS(RPINR32_33,3)
// CCP4CON<CCP4X>
extern volatile __bit                   CCP4X               __at(0x7885);	// @ (0xF10 * 8 + 5)
#define                                 CCP4X_bit           _BIT_ACCESS(CCP4CON,5)
// CCP4CON<CCP4Y>
extern volatile __bit                   CCP4Y               __at(0x7884);	// @ (0xF10 * 8 + 4)
#define                                 CCP4Y_bit           _BIT_ACCESS(CCP4CON,4)
// PIE4<CCP5IE>
extern volatile __bit                   CCP5IE              __at(0x7DA2);	// @ (0xFB4 * 8 + 2)
#define                                 CCP5IE_bit          _BIT_ACCESS(PIE4,2)
// PIR4<CCP5IF>
extern volatile __bit                   CCP5IF              __at(0x7DAA);	// @ (0xFB5 * 8 + 2)
#define                                 CCP5IF_bit          _BIT_ACCESS(PIR4,2)
// IPR4<CCP5IP>
extern volatile __bit                   CCP5IP              __at(0x7DB2);	// @ (0xFB6 * 8 + 2)
#define                                 CCP5IP_bit          _BIT_ACCESS(IPR4,2)
// CCP5CON<CCP5M0>
extern volatile __bit                   CCP5M0              __at(0x7868);	// @ (0xF0D * 8 + 0)
#define                                 CCP5M0_bit          _BIT_ACCESS(CCP5CON,0)
// CCP5CON<CCP5M1>
extern volatile __bit                   CCP5M1              __at(0x7869);	// @ (0xF0D * 8 + 1)
#define                                 CCP5M1_bit          _BIT_ACCESS(CCP5CON,1)
// CCP5CON<CCP5M2>
extern volatile __bit                   CCP5M2              __at(0x786A);	// @ (0xF0D * 8 + 2)
#define                                 CCP5M2_bit          _BIT_ACCESS(CCP5CON,2)
// CCP5CON<CCP5M3>
extern volatile __bit                   CCP5M3              __at(0x786B);	// @ (0xF0D * 8 + 3)
#define                                 CCP5M3_bit          _BIT_ACCESS(CCP5CON,3)
// PMD0<CCP5MD>
extern volatile __bit                   CCP5MD              __at(0x77A2);	// @ (0xEF4 * 8 + 2)
#define                                 CCP5MD_bit          _BIT_ACCESS(PMD0,2)
// ODCON2<CCP5OD>
extern volatile __bit                   CCP5OD              __at(0x7752);	// @ (0xEEA * 8 + 2)
#define                                 CCP5OD_bit          _BIT_ACCESS(ODCON2,2)
// RPINR32_33<CCP5R0>
extern volatile __bit                   CCP5R0              __at(0x71D4);	// @ (0xE3A * 8 + 4)
#define                                 CCP5R0_bit          _BIT_ACCESS(RPINR32_33,4)
// RPINR32_33<CCP5R1>
extern volatile __bit                   CCP5R1              __at(0x71D5);	// @ (0xE3A * 8 + 5)
#define                                 CCP5R1_bit          _BIT_ACCESS(RPINR32_33,5)
// RPINR32_33<CCP5R2>
extern volatile __bit                   CCP5R2              __at(0x71D6);	// @ (0xE3A * 8 + 6)
#define                                 CCP5R2_bit          _BIT_ACCESS(RPINR32_33,6)
// RPINR32_33<CCP5R3>
extern volatile __bit                   CCP5R3              __at(0x71D7);	// @ (0xE3A * 8 + 7)
#define                                 CCP5R3_bit          _BIT_ACCESS(RPINR32_33,7)
// CCP5CON<CCP5X>
extern volatile __bit                   CCP5X               __at(0x786D);	// @ (0xF0D * 8 + 5)
#define                                 CCP5X_bit           _BIT_ACCESS(CCP5CON,5)
// CCP5CON<CCP5Y>
extern volatile __bit                   CCP5Y               __at(0x786C);	// @ (0xF0D * 8 + 4)
#define                                 CCP5Y_bit           _BIT_ACCESS(CCP5CON,4)
// PORTH<CCP6>
extern volatile __bit                   CCP6                __at(0x7C3F);	// @ (0xF87 * 8 + 7)
#define                                 CCP6_bit            _BIT_ACCESS(PORTH,7)
// PORTE<CCP6E>
extern volatile __bit                   CCP6E               __at(0x7C26);	// @ (0xF84 * 8 + 6)
#define                                 CCP6E_bit           _BIT_ACCESS(PORTE,6)
// PIE4<CCP6IE>
extern volatile __bit                   CCP6IE              __at(0x7DA3);	// @ (0xFB4 * 8 + 3)
#define                                 CCP6IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<CCP6IF>
extern volatile __bit                   CCP6IF              __at(0x7DAB);	// @ (0xFB5 * 8 + 3)
#define                                 CCP6IF_bit          _BIT_ACCESS(PIR4,3)
// IPR4<CCP6IP>
extern volatile __bit                   CCP6IP              __at(0x7DB3);	// @ (0xFB6 * 8 + 3)
#define                                 CCP6IP_bit          _BIT_ACCESS(IPR4,3)
// CCP6CON<CCP6M0>
extern volatile __bit                   CCP6M0              __at(0x7850);	// @ (0xF0A * 8 + 0)
#define                                 CCP6M0_bit          _BIT_ACCESS(CCP6CON,0)
// CCP6CON<CCP6M1>
extern volatile __bit                   CCP6M1              __at(0x7851);	// @ (0xF0A * 8 + 1)
#define                                 CCP6M1_bit          _BIT_ACCESS(CCP6CON,1)
// CCP6CON<CCP6M2>
extern volatile __bit                   CCP6M2              __at(0x7852);	// @ (0xF0A * 8 + 2)
#define                                 CCP6M2_bit          _BIT_ACCESS(CCP6CON,2)
// CCP6CON<CCP6M3>
extern volatile __bit                   CCP6M3              __at(0x7853);	// @ (0xF0A * 8 + 3)
#define                                 CCP6M3_bit          _BIT_ACCESS(CCP6CON,3)
// PMD0<CCP6MD>
extern volatile __bit                   CCP6MD              __at(0x77A3);	// @ (0xEF4 * 8 + 3)
#define                                 CCP6MD_bit          _BIT_ACCESS(PMD0,3)
// ODCON2<CCP6OD>
extern volatile __bit                   CCP6OD              __at(0x7753);	// @ (0xEEA * 8 + 3)
#define                                 CCP6OD_bit          _BIT_ACCESS(ODCON2,3)
// RPINR34_35<CCP6R0>
extern volatile __bit                   CCP6R0              __at(0x71D8);	// @ (0xE3B * 8 + 0)
#define                                 CCP6R0_bit          _BIT_ACCESS(RPINR34_35,0)
// RPINR34_35<CCP6R1>
extern volatile __bit                   CCP6R1              __at(0x71D9);	// @ (0xE3B * 8 + 1)
#define                                 CCP6R1_bit          _BIT_ACCESS(RPINR34_35,1)
// RPINR34_35<CCP6R2>
extern volatile __bit                   CCP6R2              __at(0x71DA);	// @ (0xE3B * 8 + 2)
#define                                 CCP6R2_bit          _BIT_ACCESS(RPINR34_35,2)
// RPINR34_35<CCP6R3>
extern volatile __bit                   CCP6R3              __at(0x71DB);	// @ (0xE3B * 8 + 3)
#define                                 CCP6R3_bit          _BIT_ACCESS(RPINR34_35,3)
// CCP6CON<CCP6X>
extern volatile __bit                   CCP6X               __at(0x7855);	// @ (0xF0A * 8 + 5)
#define                                 CCP6X_bit           _BIT_ACCESS(CCP6CON,5)
// CCP6CON<CCP6Y>
extern volatile __bit                   CCP6Y               __at(0x7854);	// @ (0xF0A * 8 + 4)
#define                                 CCP6Y_bit           _BIT_ACCESS(CCP6CON,4)
// PORTH<CCP7>
extern volatile __bit                   CCP7                __at(0x7C3E);	// @ (0xF87 * 8 + 6)
#define                                 CCP7_bit            _BIT_ACCESS(PORTH,6)
// PORTE<CCP7E>
extern volatile __bit                   CCP7E               __at(0x7C25);	// @ (0xF84 * 8 + 5)
#define                                 CCP7E_bit           _BIT_ACCESS(PORTE,5)
// PIE4<CCP7IE>
extern volatile __bit                   CCP7IE              __at(0x7DA4);	// @ (0xFB4 * 8 + 4)
#define                                 CCP7IE_bit          _BIT_ACCESS(PIE4,4)
// PIR4<CCP7IF>
extern volatile __bit                   CCP7IF              __at(0x7DAC);	// @ (0xFB5 * 8 + 4)
#define                                 CCP7IF_bit          _BIT_ACCESS(PIR4,4)
// IPR4<CCP7IP>
extern volatile __bit                   CCP7IP              __at(0x7DB4);	// @ (0xFB6 * 8 + 4)
#define                                 CCP7IP_bit          _BIT_ACCESS(IPR4,4)
// CCP7CON<CCP7M0>
extern volatile __bit                   CCP7M0              __at(0x7838);	// @ (0xF07 * 8 + 0)
#define                                 CCP7M0_bit          _BIT_ACCESS(CCP7CON,0)
// CCP7CON<CCP7M1>
extern volatile __bit                   CCP7M1              __at(0x7839);	// @ (0xF07 * 8 + 1)
#define                                 CCP7M1_bit          _BIT_ACCESS(CCP7CON,1)
// CCP7CON<CCP7M2>
extern volatile __bit                   CCP7M2              __at(0x783A);	// @ (0xF07 * 8 + 2)
#define                                 CCP7M2_bit          _BIT_ACCESS(CCP7CON,2)
// CCP7CON<CCP7M3>
extern volatile __bit                   CCP7M3              __at(0x783B);	// @ (0xF07 * 8 + 3)
#define                                 CCP7M3_bit          _BIT_ACCESS(CCP7CON,3)
// PMD0<CCP7MD>
extern volatile __bit                   CCP7MD              __at(0x77A4);	// @ (0xEF4 * 8 + 4)
#define                                 CCP7MD_bit          _BIT_ACCESS(PMD0,4)
// ODCON2<CCP7OD>
extern volatile __bit                   CCP7OD              __at(0x7754);	// @ (0xEEA * 8 + 4)
#define                                 CCP7OD_bit          _BIT_ACCESS(ODCON2,4)
// RPINR34_35<CCP7R0>
extern volatile __bit                   CCP7R0              __at(0x71DC);	// @ (0xE3B * 8 + 4)
#define                                 CCP7R0_bit          _BIT_ACCESS(RPINR34_35,4)
// RPINR34_35<CCP7R1>
extern volatile __bit                   CCP7R1              __at(0x71DD);	// @ (0xE3B * 8 + 5)
#define                                 CCP7R1_bit          _BIT_ACCESS(RPINR34_35,5)
// RPINR34_35<CCP7R2>
extern volatile __bit                   CCP7R2              __at(0x71DE);	// @ (0xE3B * 8 + 6)
#define                                 CCP7R2_bit          _BIT_ACCESS(RPINR34_35,6)
// RPINR34_35<CCP7R3>
extern volatile __bit                   CCP7R3              __at(0x71DF);	// @ (0xE3B * 8 + 7)
#define                                 CCP7R3_bit          _BIT_ACCESS(RPINR34_35,7)
// CCP7CON<CCP7X>
extern volatile __bit                   CCP7X               __at(0x783D);	// @ (0xF07 * 8 + 5)
#define                                 CCP7X_bit           _BIT_ACCESS(CCP7CON,5)
// CCP7CON<CCP7Y>
extern volatile __bit                   CCP7Y               __at(0x783C);	// @ (0xF07 * 8 + 4)
#define                                 CCP7Y_bit           _BIT_ACCESS(CCP7CON,4)
// PORTH<CCP8>
extern volatile __bit                   CCP8                __at(0x7C3D);	// @ (0xF87 * 8 + 5)
#define                                 CCP8_bit            _BIT_ACCESS(PORTH,5)
// PORTE<CCP8E>
extern volatile __bit                   CCP8E               __at(0x7C24);	// @ (0xF84 * 8 + 4)
#define                                 CCP8E_bit           _BIT_ACCESS(PORTE,4)
// PIE4<CCP8IE>
extern volatile __bit                   CCP8IE              __at(0x7DA5);	// @ (0xFB4 * 8 + 5)
#define                                 CCP8IE_bit          _BIT_ACCESS(PIE4,5)
// PIR4<CCP8IF>
extern volatile __bit                   CCP8IF              __at(0x7DAD);	// @ (0xFB5 * 8 + 5)
#define                                 CCP8IF_bit          _BIT_ACCESS(PIR4,5)
// IPR4<CCP8IP>
extern volatile __bit                   CCP8IP              __at(0x7DB5);	// @ (0xFB6 * 8 + 5)
#define                                 CCP8IP_bit          _BIT_ACCESS(IPR4,5)
// CCP8CON<CCP8M0>
extern volatile __bit                   CCP8M0              __at(0x7A30);	// @ (0xF46 * 8 + 0)
#define                                 CCP8M0_bit          _BIT_ACCESS(CCP8CON,0)
// CCP8CON<CCP8M1>
extern volatile __bit                   CCP8M1              __at(0x7A31);	// @ (0xF46 * 8 + 1)
#define                                 CCP8M1_bit          _BIT_ACCESS(CCP8CON,1)
// CCP8CON<CCP8M2>
extern volatile __bit                   CCP8M2              __at(0x7A32);	// @ (0xF46 * 8 + 2)
#define                                 CCP8M2_bit          _BIT_ACCESS(CCP8CON,2)
// CCP8CON<CCP8M3>
extern volatile __bit                   CCP8M3              __at(0x7A33);	// @ (0xF46 * 8 + 3)
#define                                 CCP8M3_bit          _BIT_ACCESS(CCP8CON,3)
// PMD0<CCP8MD>
extern volatile __bit                   CCP8MD              __at(0x77A5);	// @ (0xEF4 * 8 + 5)
#define                                 CCP8MD_bit          _BIT_ACCESS(PMD0,5)
// ODCON2<CCP8OD>
extern volatile __bit                   CCP8OD              __at(0x7755);	// @ (0xEEA * 8 + 5)
#define                                 CCP8OD_bit          _BIT_ACCESS(ODCON2,5)
// RPINR36_37<CCP8R0>
extern volatile __bit                   CCP8R0              __at(0x71E0);	// @ (0xE3C * 8 + 0)
#define                                 CCP8R0_bit          _BIT_ACCESS(RPINR36_37,0)
// RPINR36_37<CCP8R1>
extern volatile __bit                   CCP8R1              __at(0x71E1);	// @ (0xE3C * 8 + 1)
#define                                 CCP8R1_bit          _BIT_ACCESS(RPINR36_37,1)
// RPINR36_37<CCP8R2>
extern volatile __bit                   CCP8R2              __at(0x71E2);	// @ (0xE3C * 8 + 2)
#define                                 CCP8R2_bit          _BIT_ACCESS(RPINR36_37,2)
// RPINR36_37<CCP8R3>
extern volatile __bit                   CCP8R3              __at(0x71E3);	// @ (0xE3C * 8 + 3)
#define                                 CCP8R3_bit          _BIT_ACCESS(RPINR36_37,3)
// CCP8CON<CCP8X>
extern volatile __bit                   CCP8X               __at(0x7A35);	// @ (0xF46 * 8 + 5)
#define                                 CCP8X_bit           _BIT_ACCESS(CCP8CON,5)
// CCP8CON<CCP8Y>
extern volatile __bit                   CCP8Y               __at(0x7A34);	// @ (0xF46 * 8 + 4)
#define                                 CCP8Y_bit           _BIT_ACCESS(CCP8CON,4)
// PORTH<CCP9>
extern volatile __bit                   CCP9                __at(0x7C3C);	// @ (0xF87 * 8 + 4)
#define                                 CCP9_bit            _BIT_ACCESS(PORTH,4)
// PORTE<CCP9E>
extern volatile __bit                   CCP9E               __at(0x7C23);	// @ (0xF84 * 8 + 3)
#define                                 CCP9E_bit           _BIT_ACCESS(PORTE,3)
// PIE4<CCP9IE>
extern volatile __bit                   CCP9IE              __at(0x7DA6);	// @ (0xFB4 * 8 + 6)
#define                                 CCP9IE_bit          _BIT_ACCESS(PIE4,6)
// PIR4<CCP9IF>
extern volatile __bit                   CCP9IF              __at(0x7DAE);	// @ (0xFB5 * 8 + 6)
#define                                 CCP9IF_bit          _BIT_ACCESS(PIR4,6)
// IPR4<CCP9IP>
extern volatile __bit                   CCP9IP              __at(0x7DB6);	// @ (0xFB6 * 8 + 6)
#define                                 CCP9IP_bit          _BIT_ACCESS(IPR4,6)
// CCP9CON<CCP9M0>
extern volatile __bit                   CCP9M0              __at(0x7A18);	// @ (0xF43 * 8 + 0)
#define                                 CCP9M0_bit          _BIT_ACCESS(CCP9CON,0)
// CCP9CON<CCP9M1>
extern volatile __bit                   CCP9M1              __at(0x7A19);	// @ (0xF43 * 8 + 1)
#define                                 CCP9M1_bit          _BIT_ACCESS(CCP9CON,1)
// CCP9CON<CCP9M2>
extern volatile __bit                   CCP9M2              __at(0x7A1A);	// @ (0xF43 * 8 + 2)
#define                                 CCP9M2_bit          _BIT_ACCESS(CCP9CON,2)
// CCP9CON<CCP9M3>
extern volatile __bit                   CCP9M3              __at(0x7A1B);	// @ (0xF43 * 8 + 3)
#define                                 CCP9M3_bit          _BIT_ACCESS(CCP9CON,3)
// PMD0<CCP9MD>
extern volatile __bit                   CCP9MD              __at(0x77A6);	// @ (0xEF4 * 8 + 6)
#define                                 CCP9MD_bit          _BIT_ACCESS(PMD0,6)
// ODCON2<CCP9OD>
extern volatile __bit                   CCP9OD              __at(0x7756);	// @ (0xEEA * 8 + 6)
#define                                 CCP9OD_bit          _BIT_ACCESS(ODCON2,6)
// RPINR36_37<CCP9R0>
extern volatile __bit                   CCP9R0              __at(0x71E4);	// @ (0xE3C * 8 + 4)
#define                                 CCP9R0_bit          _BIT_ACCESS(RPINR36_37,4)
// RPINR36_37<CCP9R1>
extern volatile __bit                   CCP9R1              __at(0x71E5);	// @ (0xE3C * 8 + 5)
#define                                 CCP9R1_bit          _BIT_ACCESS(RPINR36_37,5)
// RPINR36_37<CCP9R2>
extern volatile __bit                   CCP9R2              __at(0x71E6);	// @ (0xE3C * 8 + 6)
#define                                 CCP9R2_bit          _BIT_ACCESS(RPINR36_37,6)
// RPINR36_37<CCP9R3>
extern volatile __bit                   CCP9R3              __at(0x71E7);	// @ (0xE3C * 8 + 7)
#define                                 CCP9R3_bit          _BIT_ACCESS(RPINR36_37,7)
// CCP9CON<CCP9X>
extern volatile __bit                   CCP9X               __at(0x7A1D);	// @ (0xF43 * 8 + 5)
#define                                 CCP9X_bit           _BIT_ACCESS(CCP9CON,5)
// CCP9CON<CCP9Y>
extern volatile __bit                   CCP9Y               __at(0x7A1C);	// @ (0xF43 * 8 + 4)
#define                                 CCP9Y_bit           _BIT_ACCESS(CCP9CON,4)
// OSCCON2<CF>
extern volatile __bit                   CF                  __at(0x7B33);	// @ (0xF66 * 8 + 3)
#define                                 CF_bit              _BIT_ACCESS(OSCCON2,3)
// ADCHS0L<CH0NA0>
extern volatile __bit                   CH0NA0              __at(0x7435);	// @ (0xE86 * 8 + 5)
#define                                 CH0NA0_bit          _BIT_ACCESS(ADCHS0L,5)
// ADCHS0L<CH0NA1>
extern volatile __bit                   CH0NA1              __at(0x7436);	// @ (0xE86 * 8 + 6)
#define                                 CH0NA1_bit          _BIT_ACCESS(ADCHS0L,6)
// ADCHS0L<CH0NA2>
extern volatile __bit                   CH0NA2              __at(0x7437);	// @ (0xE86 * 8 + 7)
#define                                 CH0NA2_bit          _BIT_ACCESS(ADCHS0L,7)
// ADCHS0H<CH0NB0>
extern volatile __bit                   CH0NB0              __at(0x743D);	// @ (0xE87 * 8 + 5)
#define                                 CH0NB0_bit          _BIT_ACCESS(ADCHS0H,5)
// ADCHS0H<CH0NB1>
extern volatile __bit                   CH0NB1              __at(0x743E);	// @ (0xE87 * 8 + 6)
#define                                 CH0NB1_bit          _BIT_ACCESS(ADCHS0H,6)
// ADCHS0H<CH0NB2>
extern volatile __bit                   CH0NB2              __at(0x743F);	// @ (0xE87 * 8 + 7)
#define                                 CH0NB2_bit          _BIT_ACCESS(ADCHS0H,7)
// ADCHS0L<CH0SA0>
extern volatile __bit                   CH0SA0              __at(0x7430);	// @ (0xE86 * 8 + 0)
#define                                 CH0SA0_bit          _BIT_ACCESS(ADCHS0L,0)
// ADCHS0L<CH0SA1>
extern volatile __bit                   CH0SA1              __at(0x7431);	// @ (0xE86 * 8 + 1)
#define                                 CH0SA1_bit          _BIT_ACCESS(ADCHS0L,1)
// ADCHS0L<CH0SA2>
extern volatile __bit                   CH0SA2              __at(0x7432);	// @ (0xE86 * 8 + 2)
#define                                 CH0SA2_bit          _BIT_ACCESS(ADCHS0L,2)
// ADCHS0L<CH0SA3>
extern volatile __bit                   CH0SA3              __at(0x7433);	// @ (0xE86 * 8 + 3)
#define                                 CH0SA3_bit          _BIT_ACCESS(ADCHS0L,3)
// ADCHS0L<CH0SA4>
extern volatile __bit                   CH0SA4              __at(0x7434);	// @ (0xE86 * 8 + 4)
#define                                 CH0SA4_bit          _BIT_ACCESS(ADCHS0L,4)
// ADCHS0H<CH0SB0>
extern volatile __bit                   CH0SB0              __at(0x7438);	// @ (0xE87 * 8 + 0)
#define                                 CH0SB0_bit          _BIT_ACCESS(ADCHS0H,0)
// ADCHS0H<CH0SB1>
extern volatile __bit                   CH0SB1              __at(0x7439);	// @ (0xE87 * 8 + 1)
#define                                 CH0SB1_bit          _BIT_ACCESS(ADCHS0H,1)
// ADCHS0H<CH0SB2>
extern volatile __bit                   CH0SB2              __at(0x743A);	// @ (0xE87 * 8 + 2)
#define                                 CH0SB2_bit          _BIT_ACCESS(ADCHS0H,2)
// ADCHS0H<CH0SB3>
extern volatile __bit                   CH0SB3              __at(0x743B);	// @ (0xE87 * 8 + 3)
#define                                 CH0SB3_bit          _BIT_ACCESS(ADCHS0H,3)
// ADCHS0H<CH0SB4>
extern volatile __bit                   CH0SB4              __at(0x743C);	// @ (0xE87 * 8 + 4)
#define                                 CH0SB4_bit          _BIT_ACCESS(ADCHS0H,4)
// ADCHIT0L<CHH0>
extern volatile __bit                   CHH0                __at(0x73F0);	// @ (0xE7E * 8 + 0)
#define                                 CHH0_bit            _BIT_ACCESS(ADCHIT0L,0)
// ADCHIT0L<CHH1>
extern volatile __bit                   CHH1                __at(0x73F1);	// @ (0xE7E * 8 + 1)
#define                                 CHH1_bit            _BIT_ACCESS(ADCHIT0L,1)
// ADCHIT0H<CHH10>
extern volatile __bit                   CHH10               __at(0x73FA);	// @ (0xE7F * 8 + 2)
#define                                 CHH10_bit           _BIT_ACCESS(ADCHIT0H,2)
// ADCHIT0H<CHH11>
extern volatile __bit                   CHH11               __at(0x73FB);	// @ (0xE7F * 8 + 3)
#define                                 CHH11_bit           _BIT_ACCESS(ADCHIT0H,3)
// ADCHIT0H<CHH12>
extern volatile __bit                   CHH12               __at(0x73FC);	// @ (0xE7F * 8 + 4)
#define                                 CHH12_bit           _BIT_ACCESS(ADCHIT0H,4)
// ADCHIT0H<CHH13>
extern volatile __bit                   CHH13               __at(0x73FD);	// @ (0xE7F * 8 + 5)
#define                                 CHH13_bit           _BIT_ACCESS(ADCHIT0H,5)
// ADCHIT0H<CHH14>
extern volatile __bit                   CHH14               __at(0x73FE);	// @ (0xE7F * 8 + 6)
#define                                 CHH14_bit           _BIT_ACCESS(ADCHIT0H,6)
// ADCHIT0H<CHH15>
extern volatile __bit                   CHH15               __at(0x73FF);	// @ (0xE7F * 8 + 7)
#define                                 CHH15_bit           _BIT_ACCESS(ADCHIT0H,7)
// ADCHIT1L<CHH16>
extern volatile __bit                   CHH16               __at(0x7400);	// @ (0xE80 * 8 + 0)
#define                                 CHH16_bit           _BIT_ACCESS(ADCHIT1L,0)
// ADCHIT1L<CHH17>
extern volatile __bit                   CHH17               __at(0x7401);	// @ (0xE80 * 8 + 1)
#define                                 CHH17_bit           _BIT_ACCESS(ADCHIT1L,1)
// ADCHIT1L<CHH18>
extern volatile __bit                   CHH18               __at(0x7402);	// @ (0xE80 * 8 + 2)
#define                                 CHH18_bit           _BIT_ACCESS(ADCHIT1L,2)
// ADCHIT1L<CHH19>
extern volatile __bit                   CHH19               __at(0x7403);	// @ (0xE80 * 8 + 3)
#define                                 CHH19_bit           _BIT_ACCESS(ADCHIT1L,3)
// ADCHIT0L<CHH2>
extern volatile __bit                   CHH2                __at(0x73F2);	// @ (0xE7E * 8 + 2)
#define                                 CHH2_bit            _BIT_ACCESS(ADCHIT0L,2)
// ADCHIT1L<CHH20>
extern volatile __bit                   CHH20               __at(0x7404);	// @ (0xE80 * 8 + 4)
#define                                 CHH20_bit           _BIT_ACCESS(ADCHIT1L,4)
// ADCHIT1L<CHH21>
extern volatile __bit                   CHH21               __at(0x7405);	// @ (0xE80 * 8 + 5)
#define                                 CHH21_bit           _BIT_ACCESS(ADCHIT1L,5)
// ADCHIT1L<CHH22>
extern volatile __bit                   CHH22               __at(0x7406);	// @ (0xE80 * 8 + 6)
#define                                 CHH22_bit           _BIT_ACCESS(ADCHIT1L,6)
// ADCHIT1L<CHH23>
extern volatile __bit                   CHH23               __at(0x7407);	// @ (0xE80 * 8 + 7)
#define                                 CHH23_bit           _BIT_ACCESS(ADCHIT1L,7)
// ADCHIT1H<CHH24>
extern volatile __bit                   CHH24               __at(0x7408);	// @ (0xE81 * 8 + 0)
#define                                 CHH24_bit           _BIT_ACCESS(ADCHIT1H,0)
// ADCHIT1H<CHH25>
extern volatile __bit                   CHH25               __at(0x7409);	// @ (0xE81 * 8 + 1)
#define                                 CHH25_bit           _BIT_ACCESS(ADCHIT1H,1)
// ADCHIT1H<CHH26>
extern volatile __bit                   CHH26               __at(0x740A);	// @ (0xE81 * 8 + 2)
#define                                 CHH26_bit           _BIT_ACCESS(ADCHIT1H,2)
// ADCHIT1H<CHH27>
extern volatile __bit                   CHH27               __at(0x740B);	// @ (0xE81 * 8 + 3)
#define                                 CHH27_bit           _BIT_ACCESS(ADCHIT1H,3)
// ADCHIT1H<CHH28>
extern volatile __bit                   CHH28               __at(0x740C);	// @ (0xE81 * 8 + 4)
#define                                 CHH28_bit           _BIT_ACCESS(ADCHIT1H,4)
// ADCHIT1H<CHH29>
extern volatile __bit                   CHH29               __at(0x740D);	// @ (0xE81 * 8 + 5)
#define                                 CHH29_bit           _BIT_ACCESS(ADCHIT1H,5)
// ADCHIT0L<CHH3>
extern volatile __bit                   CHH3                __at(0x73F3);	// @ (0xE7E * 8 + 3)
#define                                 CHH3_bit            _BIT_ACCESS(ADCHIT0L,3)
// ADCHIT1H<CHH30>
extern volatile __bit                   CHH30               __at(0x740E);	// @ (0xE81 * 8 + 6)
#define                                 CHH30_bit           _BIT_ACCESS(ADCHIT1H,6)
// ADCHIT0L<CHH4>
extern volatile __bit                   CHH4                __at(0x73F4);	// @ (0xE7E * 8 + 4)
#define                                 CHH4_bit            _BIT_ACCESS(ADCHIT0L,4)
// ADCHIT0L<CHH5>
extern volatile __bit                   CHH5                __at(0x73F5);	// @ (0xE7E * 8 + 5)
#define                                 CHH5_bit            _BIT_ACCESS(ADCHIT0L,5)
// ADCHIT0L<CHH6>
extern volatile __bit                   CHH6                __at(0x73F6);	// @ (0xE7E * 8 + 6)
#define                                 CHH6_bit            _BIT_ACCESS(ADCHIT0L,6)
// ADCHIT0L<CHH7>
extern volatile __bit                   CHH7                __at(0x73F7);	// @ (0xE7E * 8 + 7)
#define                                 CHH7_bit            _BIT_ACCESS(ADCHIT0L,7)
// ADCHIT0H<CHH8>
extern volatile __bit                   CHH8                __at(0x73F8);	// @ (0xE7F * 8 + 0)
#define                                 CHH8_bit            _BIT_ACCESS(ADCHIT0H,0)
// ADCHIT0H<CHH9>
extern volatile __bit                   CHH9                __at(0x73F9);	// @ (0xE7F * 8 + 1)
#define                                 CHH9_bit            _BIT_ACCESS(ADCHIT0H,1)
// ALRMCFG<CHIME>
extern volatile __bit                   CHIME               __at(0x7ADE);	// @ (0xF5B * 8 + 6)
#define                                 CHIME_bit           _BIT_ACCESS(ALRMCFG,6)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0x7E3E);	// @ (0xFC7 * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP2STAT<CKE2>
extern volatile __bit                   CKE2                __at(0x78D6);	// @ (0xF1A * 8 + 6)
#define                                 CKE2_bit            _BIT_ACCESS(SSP2STAT,6)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0x7E34);	// @ (0xFC6 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// SSP2CON1<CKP2>
extern volatile __bit                   CKP2                __at(0x78CC);	// @ (0xF19 * 8 + 4)
#define                                 CKP2_bit            _BIT_ACCESS(SSP2CON1,4)
// BAUDCON1<CKTXP>
extern volatile __bit                   CKTXP               __at(0x7B3C);	// @ (0xF67 * 8 + 4)
#define                                 CKTXP_bit           _BIT_ACCESS(BAUDCON1,4)
// OSCCON2<CLKLOCK>
extern volatile __bit                   CLKLOCK             __at(0x7B37);	// @ (0xF66 * 8 + 7)
#define                                 CLKLOCK_bit         _BIT_ACCESS(OSCCON2,7)
// LCDREG<CLKSEL0>
extern volatile __bit                   CLKSEL0             __at(0x76C0);	// @ (0xED8 * 8 + 0)
#define                                 CLKSEL0_bit         _BIT_ACCESS(LCDREG,0)
// LCDREG<CLKSEL1>
extern volatile __bit                   CLKSEL1             __at(0x76C1);	// @ (0xED8 * 8 + 1)
#define                                 CLKSEL1_bit         _BIT_ACCESS(LCDREG,1)
// RCON<CM>
extern volatile __bit                   CM                  __at(0x7E85);	// @ (0xFD0 * 8 + 5)
#define                                 CM_bit              _BIT_ACCESS(RCON,5)
// ADCON5L<CM0>
extern volatile __bit                   CM0                 __at(0x7440);	// @ (0xE88 * 8 + 0)
#define                                 CM0_bit             _BIT_ACCESS(ADCON5L,0)
// ADCON5L<CM1>
extern volatile __bit                   CM1                 __at(0x7441);	// @ (0xE88 * 8 + 1)
#define                                 CM1_bit             _BIT_ACCESS(ADCON5L,1)
// PIE2<CMIE>
extern volatile __bit                   CMIE                __at(0x7D06);	// @ (0xFA0 * 8 + 6)
#define                                 CMIE_bit            _BIT_ACCESS(PIE2,6)
// PIR2<CMIF>
extern volatile __bit                   CMIF                __at(0x7D0E);	// @ (0xFA1 * 8 + 6)
#define                                 CMIF_bit            _BIT_ACCESS(PIR2,6)
// IPR2<CMIP>
extern volatile __bit                   CMIP                __at(0x7D16);	// @ (0xFA2 * 8 + 6)
#define                                 CMIP_bit            _BIT_ACCESS(IPR2,6)
// PIE6<CMP1IE>
extern volatile __bit                   CMP1IE              __at(0x7B08);	// @ (0xF61 * 8 + 0)
#define                                 CMP1IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<CMP1IF>
extern volatile __bit                   CMP1IF              __at(0x7D30);	// @ (0xFA6 * 8 + 0)
#define                                 CMP1IF_bit          _BIT_ACCESS(PIR6,0)
// IPR6<CMP1IP>
extern volatile __bit                   CMP1IP              __at(0x7D48);	// @ (0xFA9 * 8 + 0)
#define                                 CMP1IP_bit          _BIT_ACCESS(IPR6,0)
// PMD4<CMP1MD>
extern volatile __bit                   CMP1MD              __at(0x7787);	// @ (0xEF0 * 8 + 7)
#define                                 CMP1MD_bit          _BIT_ACCESS(PMD4,7)
// PIE6<CMP2IE>
extern volatile __bit                   CMP2IE              __at(0x7B09);	// @ (0xF61 * 8 + 1)
#define                                 CMP2IE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<CMP2IF>
extern volatile __bit                   CMP2IF              __at(0x7D31);	// @ (0xFA6 * 8 + 1)
#define                                 CMP2IF_bit          _BIT_ACCESS(PIR6,1)
// IPR6<CMP2IP>
extern volatile __bit                   CMP2IP              __at(0x7D49);	// @ (0xFA9 * 8 + 1)
#define                                 CMP2IP_bit          _BIT_ACCESS(IPR6,1)
// PMD4<CMP2MD>
extern volatile __bit                   CMP2MD              __at(0x7786);	// @ (0xEF0 * 8 + 6)
#define                                 CMP2MD_bit          _BIT_ACCESS(PMD4,6)
// PIE6<CMP3IE>
extern volatile __bit                   CMP3IE              __at(0x7B0A);	// @ (0xF61 * 8 + 2)
#define                                 CMP3IE_bit          _BIT_ACCESS(PIE6,2)
// PIR6<CMP3IF>
extern volatile __bit                   CMP3IF              __at(0x7D32);	// @ (0xFA6 * 8 + 2)
#define                                 CMP3IF_bit          _BIT_ACCESS(PIR6,2)
// IPR6<CMP3IP>
extern volatile __bit                   CMP3IP              __at(0x7D4A);	// @ (0xFA9 * 8 + 2)
#define                                 CMP3IP_bit          _BIT_ACCESS(IPR6,2)
// PMD4<CMP3MD>
extern volatile __bit                   CMP3MD              __at(0x7785);	// @ (0xEF0 * 8 + 5)
#define                                 CMP3MD_bit          _BIT_ACCESS(PMD4,5)
// PSTR1CON<CMPL01>
extern volatile __bit                   CMPL01              __at(0x7CE6);	// @ (0xF9C * 8 + 6)
#define                                 CMPL01_bit          _BIT_ACCESS(PSTR1CON,6)
// PSTR2CON<CMPL02>
extern volatile __bit                   CMPL02              __at(0x78E6);	// @ (0xF1C * 8 + 6)
#define                                 CMPL02_bit          _BIT_ACCESS(PSTR2CON,6)
// PSTR3CON<CMPL03>
extern volatile __bit                   CMPL03              __at(0x78DE);	// @ (0xF1B * 8 + 6)
#define                                 CMPL03_bit          _BIT_ACCESS(PSTR3CON,6)
// PSTR1CON<CMPL11>
extern volatile __bit                   CMPL11              __at(0x7CE7);	// @ (0xF9C * 8 + 7)
#define                                 CMPL11_bit          _BIT_ACCESS(PSTR1CON,7)
// PSTR2CON<CMPL12>
extern volatile __bit                   CMPL12              __at(0x78E7);	// @ (0xF1C * 8 + 7)
#define                                 CMPL12_bit          _BIT_ACCESS(PSTR2CON,7)
// PSTR3CON<CMPL13>
extern volatile __bit                   CMPL13              __at(0x78DF);	// @ (0xF1B * 8 + 7)
#define                                 CMPL13_bit          _BIT_ACCESS(PSTR3CON,7)
// CM1CON<COE1>
extern volatile __bit                   COE1                __at(0x7A9E);	// @ (0xF53 * 8 + 6)
#define                                 COE1_bit            _BIT_ACCESS(CM1CON,6)
// CM2CON<COE2>
extern volatile __bit                   COE2                __at(0x79C6);	// @ (0xF38 * 8 + 6)
#define                                 COE2_bit            _BIT_ACCESS(CM2CON,6)
// CM3CON<COE3>
extern volatile __bit                   COE3                __at(0x79BE);	// @ (0xF37 * 8 + 6)
#define                                 COE3_bit            _BIT_ACCESS(CM3CON,6)
// CM1CON<CON1>
extern volatile __bit                   CON1                __at(0x7A9F);	// @ (0xF53 * 8 + 7)
#define                                 CON1_bit            _BIT_ACCESS(CM1CON,7)
// CM2CON<CON2>
extern volatile __bit                   CON2                __at(0x79C7);	// @ (0xF38 * 8 + 7)
#define                                 CON2_bit            _BIT_ACCESS(CM2CON,7)
// CM3CON<CON3>
extern volatile __bit                   CON3                __at(0x79BF);	// @ (0xF37 * 8 + 7)
#define                                 CON3_bit            _BIT_ACCESS(CM3CON,7)
// OSCCON<COSC0>
extern volatile __bit                   COSC0               __at(0x7E9C);	// @ (0xFD3 * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON,4)
// OSCCON<COSC1>
extern volatile __bit                   COSC1               __at(0x7E9D);	// @ (0xFD3 * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON,5)
// OSCCON<COSC2>
extern volatile __bit                   COSC2               __at(0x7E9E);	// @ (0xFD3 * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON,6)
// OSCCON4<CPDIV0>
extern volatile __bit                   CPDIV0              __at(0x7B26);	// @ (0xF64 * 8 + 6)
#define                                 CPDIV0_bit          _BIT_ACCESS(OSCCON4,6)
// OSCCON4<CPDIV1>
extern volatile __bit                   CPDIV1              __at(0x7B27);	// @ (0xF64 * 8 + 7)
#define                                 CPDIV1_bit          _BIT_ACCESS(OSCCON4,7)
// LCDREG<CPEN>
extern volatile __bit                   CPEN                __at(0x76C7);	// @ (0xED8 * 8 + 7)
#define                                 CPEN_bit            _BIT_ACCESS(LCDREG,7)
// CM1CON<CPOL1>
extern volatile __bit                   CPOL1               __at(0x7A9D);	// @ (0xF53 * 8 + 5)
#define                                 CPOL1_bit           _BIT_ACCESS(CM1CON,5)
// CM2CON<CPOL2>
extern volatile __bit                   CPOL2               __at(0x79C5);	// @ (0xF38 * 8 + 5)
#define                                 CPOL2_bit           _BIT_ACCESS(CM2CON,5)
// CM3CON<CPOL3>
extern volatile __bit                   CPOL3               __at(0x79BD);	// @ (0xF37 * 8 + 5)
#define                                 CPOL3_bit           _BIT_ACCESS(CM3CON,5)
// UEIE<CRC16EE>
extern volatile __bit                   CRC16EE             __at(0x707A);	// @ (0xE0F * 8 + 2)
#define                                 CRC16EE_bit         _BIT_ACCESS(UEIE,2)
// UEIR<CRC16EF>
extern volatile __bit                   CRC16EF             __at(0x7BBA);	// @ (0xF77 * 8 + 2)
#define                                 CRC16EF_bit         _BIT_ACCESS(UEIR,2)
// UEIE<CRC5EE>
extern volatile __bit                   CRC5EE              __at(0x7079);	// @ (0xE0F * 8 + 1)
#define                                 CRC5EE_bit          _BIT_ACCESS(UEIE,1)
// UEIR<CRC5EF>
extern volatile __bit                   CRC5EF              __at(0x7BB9);	// @ (0xF77 * 8 + 1)
#define                                 CRC5EF_bit          _BIT_ACCESS(UEIR,1)
// CM1CON<CREF1>
extern volatile __bit                   CREF1               __at(0x7A9A);	// @ (0xF53 * 8 + 2)
#define                                 CREF1_bit           _BIT_ACCESS(CM1CON,2)
// CM2CON<CREF2>
extern volatile __bit                   CREF2               __at(0x79C2);	// @ (0xF38 * 8 + 2)
#define                                 CREF2_bit           _BIT_ACCESS(CM2CON,2)
// CM3CON<CREF3>
extern volatile __bit                   CREF3               __at(0x79BA);	// @ (0xF37 * 8 + 2)
#define                                 CREF3_bit           _BIT_ACCESS(CM3CON,2)
// PORTE<CS>
extern volatile __bit                   CS                  __at(0x7C22);	// @ (0xF84 * 8 + 2)
#define                                 CS_bit              _BIT_ACCESS(PORTE,2)
// LCDCON<CS0>
extern volatile __bit                   CS0                 __at(0x76CB);	// @ (0xED9 * 8 + 3)
#define                                 CS0_bit             _BIT_ACCESS(LCDCON,3)
// LCDCON<CS1>
extern volatile __bit                   CS1                 __at(0x76CC);	// @ (0xED9 * 8 + 4)
#define                                 CS1_bit             _BIT_ACCESS(LCDCON,4)
// ADCON2H<CSCNA>
extern volatile __bit                   CSCNA               __at(0x746A);	// @ (0xE8D * 8 + 2)
#define                                 CSCNA_bit           _BIT_ACCESS(ADCON2H,2)
// TXSTA1<CSRC1>
extern volatile __bit                   CSRC1               __at(0x7D67);	// @ (0xFAC * 8 + 7)
#define                                 CSRC1_bit           _BIT_ACCESS(TXSTA1,7)
// ADCSS0L<CSS0>
extern volatile __bit                   CSS0                __at(0x7410);	// @ (0xE82 * 8 + 0)
#define                                 CSS0_bit            _BIT_ACCESS(ADCSS0L,0)
// ADCSS0L<CSS1>
extern volatile __bit                   CSS1                __at(0x7411);	// @ (0xE82 * 8 + 1)
#define                                 CSS1_bit            _BIT_ACCESS(ADCSS0L,1)
// ADCSS0H<CSS10>
extern volatile __bit                   CSS10               __at(0x741A);	// @ (0xE83 * 8 + 2)
#define                                 CSS10_bit           _BIT_ACCESS(ADCSS0H,2)
// ADCSS0H<CSS11>
extern volatile __bit                   CSS11               __at(0x741B);	// @ (0xE83 * 8 + 3)
#define                                 CSS11_bit           _BIT_ACCESS(ADCSS0H,3)
// ADCSS0H<CSS12>
extern volatile __bit                   CSS12               __at(0x741C);	// @ (0xE83 * 8 + 4)
#define                                 CSS12_bit           _BIT_ACCESS(ADCSS0H,4)
// ADCSS0H<CSS13>
extern volatile __bit                   CSS13               __at(0x741D);	// @ (0xE83 * 8 + 5)
#define                                 CSS13_bit           _BIT_ACCESS(ADCSS0H,5)
// ADCSS0H<CSS14>
extern volatile __bit                   CSS14               __at(0x741E);	// @ (0xE83 * 8 + 6)
#define                                 CSS14_bit           _BIT_ACCESS(ADCSS0H,6)
// ADCSS0H<CSS15>
extern volatile __bit                   CSS15               __at(0x741F);	// @ (0xE83 * 8 + 7)
#define                                 CSS15_bit           _BIT_ACCESS(ADCSS0H,7)
// ADCSS1L<CSS16>
extern volatile __bit                   CSS16               __at(0x7420);	// @ (0xE84 * 8 + 0)
#define                                 CSS16_bit           _BIT_ACCESS(ADCSS1L,0)
// ADCSS1L<CSS17>
extern volatile __bit                   CSS17               __at(0x7421);	// @ (0xE84 * 8 + 1)
#define                                 CSS17_bit           _BIT_ACCESS(ADCSS1L,1)
// ADCSS1L<CSS18>
extern volatile __bit                   CSS18               __at(0x7422);	// @ (0xE84 * 8 + 2)
#define                                 CSS18_bit           _BIT_ACCESS(ADCSS1L,2)
// ADCSS1L<CSS19>
extern volatile __bit                   CSS19               __at(0x7423);	// @ (0xE84 * 8 + 3)
#define                                 CSS19_bit           _BIT_ACCESS(ADCSS1L,3)
// ADCSS0L<CSS2>
extern volatile __bit                   CSS2                __at(0x7412);	// @ (0xE82 * 8 + 2)
#define                                 CSS2_bit            _BIT_ACCESS(ADCSS0L,2)
// ADCSS1L<CSS20>
extern volatile __bit                   CSS20               __at(0x7424);	// @ (0xE84 * 8 + 4)
#define                                 CSS20_bit           _BIT_ACCESS(ADCSS1L,4)
// ADCSS1L<CSS21>
extern volatile __bit                   CSS21               __at(0x7425);	// @ (0xE84 * 8 + 5)
#define                                 CSS21_bit           _BIT_ACCESS(ADCSS1L,5)
// ADCSS1L<CSS22>
extern volatile __bit                   CSS22               __at(0x7426);	// @ (0xE84 * 8 + 6)
#define                                 CSS22_bit           _BIT_ACCESS(ADCSS1L,6)
// ADCSS1L<CSS23>
extern volatile __bit                   CSS23               __at(0x7427);	// @ (0xE84 * 8 + 7)
#define                                 CSS23_bit           _BIT_ACCESS(ADCSS1L,7)
// ADCSS1H<CSS24>
extern volatile __bit                   CSS24               __at(0x7428);	// @ (0xE85 * 8 + 0)
#define                                 CSS24_bit           _BIT_ACCESS(ADCSS1H,0)
// ADCSS1H<CSS25>
extern volatile __bit                   CSS25               __at(0x7429);	// @ (0xE85 * 8 + 1)
#define                                 CSS25_bit           _BIT_ACCESS(ADCSS1H,1)
// ADCSS1H<CSS26>
extern volatile __bit                   CSS26               __at(0x742A);	// @ (0xE85 * 8 + 2)
#define                                 CSS26_bit           _BIT_ACCESS(ADCSS1H,2)
// ADCSS1H<CSS27>
extern volatile __bit                   CSS27               __at(0x742B);	// @ (0xE85 * 8 + 3)
#define                                 CSS27_bit           _BIT_ACCESS(ADCSS1H,3)
// ADCSS1H<CSS28>
extern volatile __bit                   CSS28               __at(0x742C);	// @ (0xE85 * 8 + 4)
#define                                 CSS28_bit           _BIT_ACCESS(ADCSS1H,4)
// ADCSS1H<CSS29>
extern volatile __bit                   CSS29               __at(0x742D);	// @ (0xE85 * 8 + 5)
#define                                 CSS29_bit           _BIT_ACCESS(ADCSS1H,5)
// ADCSS0L<CSS3>
extern volatile __bit                   CSS3                __at(0x7413);	// @ (0xE82 * 8 + 3)
#define                                 CSS3_bit            _BIT_ACCESS(ADCSS0L,3)
// ADCSS1H<CSS30>
extern volatile __bit                   CSS30               __at(0x742E);	// @ (0xE85 * 8 + 6)
#define                                 CSS30_bit           _BIT_ACCESS(ADCSS1H,6)
// ADCSS0L<CSS4>
extern volatile __bit                   CSS4                __at(0x7414);	// @ (0xE82 * 8 + 4)
#define                                 CSS4_bit            _BIT_ACCESS(ADCSS0L,4)
// ADCSS0L<CSS5>
extern volatile __bit                   CSS5                __at(0x7415);	// @ (0xE82 * 8 + 5)
#define                                 CSS5_bit            _BIT_ACCESS(ADCSS0L,5)
// ADCSS0L<CSS6>
extern volatile __bit                   CSS6                __at(0x7416);	// @ (0xE82 * 8 + 6)
#define                                 CSS6_bit            _BIT_ACCESS(ADCSS0L,6)
// ADCSS0L<CSS7>
extern volatile __bit                   CSS7                __at(0x7417);	// @ (0xE82 * 8 + 7)
#define                                 CSS7_bit            _BIT_ACCESS(ADCSS0L,7)
// ADCSS0H<CSS8>
extern volatile __bit                   CSS8                __at(0x7418);	// @ (0xE83 * 8 + 0)
#define                                 CSS8_bit            _BIT_ACCESS(ADCSS0H,0)
// ADCSS0H<CSS9>
extern volatile __bit                   CSS9                __at(0x7419);	// @ (0xE83 * 8 + 1)
#define                                 CSS9_bit            _BIT_ACCESS(ADCSS0H,1)
// CTMUCON1<CTMUEN>
extern volatile __bit                   CTMUEN              __at(0x77C7);	// @ (0xEF8 * 8 + 7)
#define                                 CTMUEN_bit          _BIT_ACCESS(CTMUCON1,7)
// ADCTMUEN0L<CTMUEN0>
extern volatile __bit                   CTMUEN0             __at(0x73D0);	// @ (0xE7A * 8 + 0)
#define                                 CTMUEN0_bit         _BIT_ACCESS(ADCTMUEN0L,0)
// ADCTMUEN0L<CTMUEN1>
extern volatile __bit                   CTMUEN1             __at(0x73D1);	// @ (0xE7A * 8 + 1)
#define                                 CTMUEN1_bit         _BIT_ACCESS(ADCTMUEN0L,1)
// ADCTMUEN0H<CTMUEN10>
extern volatile __bit                   CTMUEN10            __at(0x73DA);	// @ (0xE7B * 8 + 2)
#define                                 CTMUEN10_bit        _BIT_ACCESS(ADCTMUEN0H,2)
// ADCTMUEN0H<CTMUEN11>
extern volatile __bit                   CTMUEN11            __at(0x73DB);	// @ (0xE7B * 8 + 3)
#define                                 CTMUEN11_bit        _BIT_ACCESS(ADCTMUEN0H,3)
// ADCTMUEN0H<CTMUEN12>
extern volatile __bit                   CTMUEN12            __at(0x73DC);	// @ (0xE7B * 8 + 4)
#define                                 CTMUEN12_bit        _BIT_ACCESS(ADCTMUEN0H,4)
// ADCTMUEN0H<CTMUEN13>
extern volatile __bit                   CTMUEN13            __at(0x73DD);	// @ (0xE7B * 8 + 5)
#define                                 CTMUEN13_bit        _BIT_ACCESS(ADCTMUEN0H,5)
// ADCTMUEN0H<CTMUEN14>
extern volatile __bit                   CTMUEN14            __at(0x73DE);	// @ (0xE7B * 8 + 6)
#define                                 CTMUEN14_bit        _BIT_ACCESS(ADCTMUEN0H,6)
// ADCTMUEN0H<CTMUEN15>
extern volatile __bit                   CTMUEN15            __at(0x73DF);	// @ (0xE7B * 8 + 7)
#define                                 CTMUEN15_bit        _BIT_ACCESS(ADCTMUEN0H,7)
// ADCTMUEN0L<CTMUEN2>
extern volatile __bit                   CTMUEN2             __at(0x73D2);	// @ (0xE7A * 8 + 2)
#define                                 CTMUEN2_bit         _BIT_ACCESS(ADCTMUEN0L,2)
// ADCTMUEN1L<CTMUEN20>
extern volatile __bit                   CTMUEN20            __at(0x73E4);	// @ (0xE7C * 8 + 4)
#define                                 CTMUEN20_bit        _BIT_ACCESS(ADCTMUEN1L,4)
// ADCTMUEN1L<CTMUEN21>
extern volatile __bit                   CTMUEN21            __at(0x73E5);	// @ (0xE7C * 8 + 5)
#define                                 CTMUEN21_bit        _BIT_ACCESS(ADCTMUEN1L,5)
// ADCTMUEN1L<CTMUEN22>
extern volatile __bit                   CTMUEN22            __at(0x73E6);	// @ (0xE7C * 8 + 6)
#define                                 CTMUEN22_bit        _BIT_ACCESS(ADCTMUEN1L,6)
// ADCTMUEN1L<CTMUEN23>
extern volatile __bit                   CTMUEN23            __at(0x73E7);	// @ (0xE7C * 8 + 7)
#define                                 CTMUEN23_bit        _BIT_ACCESS(ADCTMUEN1L,7)
// ADCTMUEN0L<CTMUEN3>
extern volatile __bit                   CTMUEN3             __at(0x73D3);	// @ (0xE7A * 8 + 3)
#define                                 CTMUEN3_bit         _BIT_ACCESS(ADCTMUEN0L,3)
// ADCTMUEN1H<CTMUEN30>
extern volatile __bit                   CTMUEN30            __at(0x73EE);	// @ (0xE7D * 8 + 6)
#define                                 CTMUEN30_bit        _BIT_ACCESS(ADCTMUEN1H,6)
// ADCTMUEN0L<CTMUEN4>
extern volatile __bit                   CTMUEN4             __at(0x73D4);	// @ (0xE7A * 8 + 4)
#define                                 CTMUEN4_bit         _BIT_ACCESS(ADCTMUEN0L,4)
// ADCTMUEN0L<CTMUEN5>
extern volatile __bit                   CTMUEN5             __at(0x73D5);	// @ (0xE7A * 8 + 5)
#define                                 CTMUEN5_bit         _BIT_ACCESS(ADCTMUEN0L,5)
// ADCTMUEN0L<CTMUEN6>
extern volatile __bit                   CTMUEN6             __at(0x73D6);	// @ (0xE7A * 8 + 6)
#define                                 CTMUEN6_bit         _BIT_ACCESS(ADCTMUEN0L,6)
// ADCTMUEN0L<CTMUEN7>
extern volatile __bit                   CTMUEN7             __at(0x73D7);	// @ (0xE7A * 8 + 7)
#define                                 CTMUEN7_bit         _BIT_ACCESS(ADCTMUEN0L,7)
// ADCTMUEN0H<CTMUEN8>
extern volatile __bit                   CTMUEN8             __at(0x73D8);	// @ (0xE7B * 8 + 0)
#define                                 CTMUEN8_bit         _BIT_ACCESS(ADCTMUEN0H,0)
// ADCTMUEN0H<CTMUEN9>
extern volatile __bit                   CTMUEN9             __at(0x73D9);	// @ (0xE7B * 8 + 1)
#define                                 CTMUEN9_bit         _BIT_ACCESS(ADCTMUEN0H,1)
// PIE3<CTMUIE>
extern volatile __bit                   CTMUIE              __at(0x7D1B);	// @ (0xFA3 * 8 + 3)
#define                                 CTMUIE_bit          _BIT_ACCESS(PIE3,3)
// PIR3<CTMUIF>
extern volatile __bit                   CTMUIF              __at(0x7D23);	// @ (0xFA4 * 8 + 3)
#define                                 CTMUIF_bit          _BIT_ACCESS(PIR3,3)
// IPR3<CTMUIP>
extern volatile __bit                   CTMUIP              __at(0x7D2B);	// @ (0xFA5 * 8 + 3)
#define                                 CTMUIP_bit          _BIT_ACCESS(IPR3,3)
// PMD3<CTMUMD>
extern volatile __bit                   CTMUMD              __at(0x778E);	// @ (0xEF1 * 8 + 6)
#define                                 CTMUMD_bit          _BIT_ACCESS(PMD3,6)
// ADCON5H<CTMUREQ>
extern volatile __bit                   CTMUREQ             __at(0x744D);	// @ (0xE89 * 8 + 5)
#define                                 CTMUREQ_bit         _BIT_ACCESS(ADCON5H,5)
// CTMUCON1<CTMUSIDL>
extern volatile __bit                   CTMUSIDL            __at(0x77C5);	// @ (0xEF8 * 8 + 5)
#define                                 CTMUSIDL_bit        _BIT_ACCESS(CTMUCON1,5)
// CTMUCON1<CTTRIG>
extern volatile __bit                   CTTRIG              __at(0x77C0);	// @ (0xEF8 * 8 + 0)
#define                                 CTTRIG_bit          _BIT_ACCESS(CTMUCON1,0)
// ADCTMUEN1L<CTUMEN16>
extern volatile __bit                   CTUMEN16            __at(0x73E0);	// @ (0xE7C * 8 + 0)
#define                                 CTUMEN16_bit        _BIT_ACCESS(ADCTMUEN1L,0)
// ADCTMUEN1L<CTUMEN17>
extern volatile __bit                   CTUMEN17            __at(0x73E1);	// @ (0xE7C * 8 + 1)
#define                                 CTUMEN17_bit        _BIT_ACCESS(ADCTMUEN1L,1)
// ADCTMUEN1L<CTUMEN18>
extern volatile __bit                   CTUMEN18            __at(0x73E2);	// @ (0xE7C * 8 + 2)
#define                                 CTUMEN18_bit        _BIT_ACCESS(ADCTMUEN1L,2)
// ADCTMUEN1L<CTUMEN19>
extern volatile __bit                   CTUMEN19            __at(0x73E3);	// @ (0xE7C * 8 + 3)
#define                                 CTUMEN19_bit        _BIT_ACCESS(ADCTMUEN1L,3)
// ADCTMUEN1H<CTUMEN24>
extern volatile __bit                   CTUMEN24            __at(0x73E8);	// @ (0xE7D * 8 + 0)
#define                                 CTUMEN24_bit        _BIT_ACCESS(ADCTMUEN1H,0)
// ADCTMUEN1H<CTUMEN25>
extern volatile __bit                   CTUMEN25            __at(0x73E9);	// @ (0xE7D * 8 + 1)
#define                                 CTUMEN25_bit        _BIT_ACCESS(ADCTMUEN1H,1)
// ADCTMUEN1H<CTUMEN26>
extern volatile __bit                   CTUMEN26            __at(0x73EA);	// @ (0xE7D * 8 + 2)
#define                                 CTUMEN26_bit        _BIT_ACCESS(ADCTMUEN1H,2)
// ADCTMUEN1H<CTUMEN27>
extern volatile __bit                   CTUMEN27            __at(0x73EB);	// @ (0xE7D * 8 + 3)
#define                                 CTUMEN27_bit        _BIT_ACCESS(ADCTMUEN1H,3)
// ADCTMUEN1H<CTUMEN28>
extern volatile __bit                   CTUMEN28            __at(0x73EC);	// @ (0xE7D * 8 + 4)
#define                                 CTUMEN28_bit        _BIT_ACCESS(ADCTMUEN1H,4)
// ADCTMUEN1H<CTUMEN29>
extern volatile __bit                   CTUMEN29            __at(0x73ED);	// @ (0xE7D * 8 + 5)
#define                                 CTUMEN29_bit        _BIT_ACCESS(ADCTMUEN1H,5)
// CVRCONH<CVR0>
extern volatile __bit                   CVR0                __at(0x7DF8);	// @ (0xFBF * 8 + 0)
#define                                 CVR0_bit            _BIT_ACCESS(CVRCONH,0)
// CVRCONH<CVR1>
extern volatile __bit                   CVR1                __at(0x7DF9);	// @ (0xFBF * 8 + 1)
#define                                 CVR1_bit            _BIT_ACCESS(CVRCONH,1)
// CVRCONH<CVR2>
extern volatile __bit                   CVR2                __at(0x7DFA);	// @ (0xFBF * 8 + 2)
#define                                 CVR2_bit            _BIT_ACCESS(CVRCONH,2)
// CVRCONH<CVR3>
extern volatile __bit                   CVR3                __at(0x7DFB);	// @ (0xFBF * 8 + 3)
#define                                 CVR3_bit            _BIT_ACCESS(CVRCONH,3)
// CVRCONH<CVR4>
extern volatile __bit                   CVR4                __at(0x7DFC);	// @ (0xFBF * 8 + 4)
#define                                 CVR4_bit            _BIT_ACCESS(CVRCONH,4)
// CVRCONL<CVREN>
extern volatile __bit                   CVREN               __at(0x7DF7);	// @ (0xFBE * 8 + 7)
#define                                 CVREN_bit           _BIT_ACCESS(CVRCONL,7)
// CVRCONL<CVRNSS>
extern volatile __bit                   CVRNSS              __at(0x7DF0);	// @ (0xFBE * 8 + 0)
#define                                 CVRNSS_bit          _BIT_ACCESS(CVRCONL,0)
// CVRCONL<CVROE>
extern volatile __bit                   CVROE               __at(0x7DF6);	// @ (0xFBE * 8 + 6)
#define                                 CVROE_bit           _BIT_ACCESS(CVRCONL,6)
// CVRCONL<CVRPSS0>
extern volatile __bit                   CVRPSS0             __at(0x7DF4);	// @ (0xFBE * 8 + 4)
#define                                 CVRPSS0_bit         _BIT_ACCESS(CVRCONL,4)
// CVRCONL<CVRPSS1>
extern volatile __bit                   CVRPSS1             __at(0x7DF5);	// @ (0xFBE * 8 + 5)
#define                                 CVRPSS1_bit         _BIT_ACCESS(CVRCONL,5)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<DA2>
extern volatile __bit                   DA2                 __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 DA2_bit             _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<DATA_ADDRESS2>
extern volatile __bit                   DATA_ADDRESS2       __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 DATA_ADDRESS2_bit   _BIT_ACCESS(SSP2STAT,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x7EC1);	// @ (0xFD8 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// CCP10CON<DC10B0>
extern volatile __bit                   DC10B0              __at(0x7A04);	// @ (0xF40 * 8 + 4)
#define                                 DC10B0_bit          _BIT_ACCESS(CCP10CON,4)
// CCP10CON<DC10B1>
extern volatile __bit                   DC10B1              __at(0x7A05);	// @ (0xF40 * 8 + 5)
#define                                 DC10B1_bit          _BIT_ACCESS(CCP10CON,5)
// CCP1CON<DC1B0>
extern volatile __bit                   DC1B0               __at(0x7DCC);	// @ (0xFB9 * 8 + 4)
#define                                 DC1B0_bit           _BIT_ACCESS(CCP1CON,4)
// CCP1CON<DC1B1>
extern volatile __bit                   DC1B1               __at(0x7DCD);	// @ (0xFB9 * 8 + 5)
#define                                 DC1B1_bit           _BIT_ACCESS(CCP1CON,5)
// CCP2CON<DC2B0>
extern volatile __bit                   DC2B0               __at(0x7A74);	// @ (0xF4E * 8 + 4)
#define                                 DC2B0_bit           _BIT_ACCESS(CCP2CON,4)
// CCP2CON<DC2B1>
extern volatile __bit                   DC2B1               __at(0x7A75);	// @ (0xF4E * 8 + 5)
#define                                 DC2B1_bit           _BIT_ACCESS(CCP2CON,5)
// CCP3CON<DC3B0>
extern volatile __bit                   DC3B0               __at(0x7A4C);	// @ (0xF49 * 8 + 4)
#define                                 DC3B0_bit           _BIT_ACCESS(CCP3CON,4)
// CCP3CON<DC3B1>
extern volatile __bit                   DC3B1               __at(0x7A4D);	// @ (0xF49 * 8 + 5)
#define                                 DC3B1_bit           _BIT_ACCESS(CCP3CON,5)
// CCP4CON<DC4B0>
extern volatile __bit                   DC4B0               __at(0x7884);	// @ (0xF10 * 8 + 4)
#define                                 DC4B0_bit           _BIT_ACCESS(CCP4CON,4)
// CCP4CON<DC4B1>
extern volatile __bit                   DC4B1               __at(0x7885);	// @ (0xF10 * 8 + 5)
#define                                 DC4B1_bit           _BIT_ACCESS(CCP4CON,5)
// CCP5CON<DC5B0>
extern volatile __bit                   DC5B0               __at(0x786C);	// @ (0xF0D * 8 + 4)
#define                                 DC5B0_bit           _BIT_ACCESS(CCP5CON,4)
// CCP5CON<DC5B1>
extern volatile __bit                   DC5B1               __at(0x786D);	// @ (0xF0D * 8 + 5)
#define                                 DC5B1_bit           _BIT_ACCESS(CCP5CON,5)
// CCP6CON<DC6B0>
extern volatile __bit                   DC6B0               __at(0x7854);	// @ (0xF0A * 8 + 4)
#define                                 DC6B0_bit           _BIT_ACCESS(CCP6CON,4)
// CCP6CON<DC6B1>
extern volatile __bit                   DC6B1               __at(0x7855);	// @ (0xF0A * 8 + 5)
#define                                 DC6B1_bit           _BIT_ACCESS(CCP6CON,5)
// CCP7CON<DC7B0>
extern volatile __bit                   DC7B0               __at(0x783C);	// @ (0xF07 * 8 + 4)
#define                                 DC7B0_bit           _BIT_ACCESS(CCP7CON,4)
// CCP7CON<DC7B1>
extern volatile __bit                   DC7B1               __at(0x783D);	// @ (0xF07 * 8 + 5)
#define                                 DC7B1_bit           _BIT_ACCESS(CCP7CON,5)
// CCP8CON<DC8B0>
extern volatile __bit                   DC8B0               __at(0x7A34);	// @ (0xF46 * 8 + 4)
#define                                 DC8B0_bit           _BIT_ACCESS(CCP8CON,4)
// CCP8CON<DC8B1>
extern volatile __bit                   DC8B1               __at(0x7A35);	// @ (0xF46 * 8 + 5)
#define                                 DC8B1_bit           _BIT_ACCESS(CCP8CON,5)
// CCP9CON<DC9B0>
extern volatile __bit                   DC9B0               __at(0x7A1C);	// @ (0xF43 * 8 + 4)
#define                                 DC9B0_bit           _BIT_ACCESS(CCP9CON,4)
// CCP9CON<DC9B1>
extern volatile __bit                   DC9B1               __at(0x7A1D);	// @ (0xF43 * 8 + 5)
#define                                 DC9B1_bit           _BIT_ACCESS(CCP9CON,5)
// UEIE<DFN8EE>
extern volatile __bit                   DFN8EE              __at(0x707B);	// @ (0xE0F * 8 + 3)
#define                                 DFN8EE_bit          _BIT_ACCESS(UEIE,3)
// UEIR<DFN8EF>
extern volatile __bit                   DFN8EF              __at(0x7BBB);	// @ (0xF77 * 8 + 3)
#define                                 DFN8EF_bit          _BIT_ACCESS(UEIR,3)
// USTAT<DIR>
extern volatile __bit                   DIR                 __at(0x7BB2);	// @ (0xF76 * 8 + 2)
#define                                 DIR_bit             _BIT_ACCESS(USTAT,2)
// DMACON2<DLYCYC0>
extern volatile __bit                   DLYCYC0             __at(0x7804);	// @ (0xF00 * 8 + 4)
#define                                 DLYCYC0_bit         _BIT_ACCESS(DMACON2,4)
// DMACON2<DLYCYC1>
extern volatile __bit                   DLYCYC1             __at(0x7805);	// @ (0xF00 * 8 + 5)
#define                                 DLYCYC1_bit         _BIT_ACCESS(DMACON2,5)
// DMACON2<DLYCYC2>
extern volatile __bit                   DLYCYC2             __at(0x7806);	// @ (0xF00 * 8 + 6)
#define                                 DLYCYC2_bit         _BIT_ACCESS(DMACON2,6)
// DMACON2<DLYCYC3>
extern volatile __bit                   DLYCYC3             __at(0x7807);	// @ (0xF00 * 8 + 7)
#define                                 DLYCYC3_bit         _BIT_ACCESS(DMACON2,7)
// DMACON1<DLYINTEN>
extern volatile __bit                   DLYINTEN            __at(0x7B01);	// @ (0xF60 * 8 + 1)
#define                                 DLYINTEN_bit        _BIT_ACCESS(DMACON1,1)
// DMACON1<DMAEN>
extern volatile __bit                   DMAEN               __at(0x7B00);	// @ (0xF60 * 8 + 0)
#define                                 DMAEN_bit           _BIT_ACCESS(DMACON1,0)
// ADCON1L<DONE>
extern volatile __bit                   DONE                __at(0x7E00);	// @ (0xFC0 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON1L,0)
// RCON4<DPSLP>
extern volatile __bit                   DPSLP               __at(0x7BDA);	// @ (0xF7B * 8 + 2)
#define                                 DPSLP_bit           _BIT_ACCESS(RCON4,2)
// DSCONL<DSBOR>
extern volatile __bit                   DSBOR               __at(0x7941);	// @ (0xF28 * 8 + 1)
#define                                 DSBOR_bit           _BIT_ACCESS(DSCONL,1)
// DSCONH<DSEN>
extern volatile __bit                   DSEN                __at(0x793F);	// @ (0xF27 * 8 + 7)
#define                                 DSEN_bit            _BIT_ACCESS(DSCONH,7)
// DSWAKEL<DSFLT>
extern volatile __bit                   DSFLT               __at(0x7937);	// @ (0xF26 * 8 + 7)
#define                                 DSFLT_bit           _BIT_ACCESS(DSWAKEL,7)
// DSWAKEL<DSICD>
extern volatile __bit                   DSICD               __at(0x7931);	// @ (0xF26 * 8 + 1)
#define                                 DSICD_bit           _BIT_ACCESS(DSWAKEL,1)
// DSWAKEH<DSINT0>
extern volatile __bit                   DSINT0              __at(0x7928);	// @ (0xF25 * 8 + 0)
#define                                 DSINT0_bit          _BIT_ACCESS(DSWAKEH,0)
// DSWAKEL<DSMCLR>
extern volatile __bit                   DSMCLR              __at(0x7932);	// @ (0xF26 * 8 + 2)
#define                                 DSMCLR_bit          _BIT_ACCESS(DSWAKEL,2)
// DSWAKEL<DSPOR>
extern volatile __bit                   DSPOR               __at(0x7930);	// @ (0xF26 * 8 + 0)
#define                                 DSPOR_bit           _BIT_ACCESS(DSWAKEL,0)
// DSWAKEL<DSRTC>
extern volatile __bit                   DSRTC               __at(0x7933);	// @ (0xF26 * 8 + 3)
#define                                 DSRTC_bit           _BIT_ACCESS(DSWAKEL,3)
// DSWAKEL<DSULP>
extern volatile __bit                   DSULP               __at(0x7935);	// @ (0xF26 * 8 + 5)
#define                                 DSULP_bit           _BIT_ACCESS(DSWAKEL,5)
// DSWAKEL<DSWDT>
extern volatile __bit                   DSWDT               __at(0x7934);	// @ (0xF26 * 8 + 4)
#define                                 DSWDT_bit           _BIT_ACCESS(DSWAKEL,4)
// BAUDCON1<DTRXP>
extern volatile __bit                   DTRXP               __at(0x7B3D);	// @ (0xF67 * 8 + 5)
#define                                 DTRXP_bit           _BIT_ACCESS(BAUDCON1,5)
// BAUDCON1<DTRXP1>
extern volatile __bit                   DTRXP1              __at(0x7B3D);	// @ (0xF67 * 8 + 5)
#define                                 DTRXP1_bit          _BIT_ACCESS(BAUDCON1,5)
// BAUDCON2<DTRXP2>
extern volatile __bit                   DTRXP2              __at(0x798D);	// @ (0xF31 * 8 + 5)
#define                                 DTRXP2_bit          _BIT_ACCESS(BAUDCON2,5)
// BAUDCON3<DTRXP3>
extern volatile __bit                   DTRXP3              __at(0x796D);	// @ (0xF2D * 8 + 5)
#define                                 DTRXP3_bit          _BIT_ACCESS(BAUDCON3,5)
// BAUDCON4<DTRXP4>
extern volatile __bit                   DTRXP4              __at(0x77ED);	// @ (0xEFD * 8 + 5)
#define                                 DTRXP4_bit          _BIT_ACCESS(BAUDCON4,5)
// DMACON1<DUPLEX0>
extern volatile __bit                   DUPLEX0             __at(0x7B02);	// @ (0xF60 * 8 + 2)
#define                                 DUPLEX0_bit         _BIT_ACCESS(DMACON1,2)
// DMACON1<DUPLEX1>
extern volatile __bit                   DUPLEX1             __at(0x7B03);	// @ (0xF60 * 8 + 3)
#define                                 DUPLEX1_bit         _BIT_ACCESS(DMACON1,3)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_A2>
extern volatile __bit                   D_A2                __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 D_A2_bit            _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<D_NOT_A1>
extern volatile __bit                   D_NOT_A1            __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 D_NOT_A1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_NOT_A2>
extern volatile __bit                   D_NOT_A2            __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 D_NOT_A2_bit        _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_nA2>
extern volatile __bit                   D_nA2               __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 D_nA2_bit           _BIT_ACCESS(SSP2STAT,5)
// MEMCON<EBDIS>
extern volatile __bit                   EBDIS               __at(0x771F);	// @ (0xEE3 * 8 + 7)
#define                                 EBDIS_bit           _BIT_ACCESS(MEMCON,7)
// ECCP1AS<ECCP1AS0>
extern volatile __bit                   ECCP1AS0            __at(0x7DEC);	// @ (0xFBD * 8 + 4)
#define                                 ECCP1AS0_bit        _BIT_ACCESS(ECCP1AS,4)
// ECCP1AS<ECCP1AS1>
extern volatile __bit                   ECCP1AS1            __at(0x7DED);	// @ (0xFBD * 8 + 5)
#define                                 ECCP1AS1_bit        _BIT_ACCESS(ECCP1AS,5)
// ECCP1AS<ECCP1AS2>
extern volatile __bit                   ECCP1AS2            __at(0x7DEE);	// @ (0xFBD * 8 + 6)
#define                                 ECCP1AS2_bit        _BIT_ACCESS(ECCP1AS,6)
// ECCP1AS<ECCP1ASE>
extern volatile __bit                   ECCP1ASE            __at(0x7DEF);	// @ (0xFBD * 8 + 7)
#define                                 ECCP1ASE_bit        _BIT_ACCESS(ECCP1AS,7)
// PMD1<ECCP1MD>
extern volatile __bit                   ECCP1MD             __at(0x779E);	// @ (0xEF3 * 8 + 6)
#define                                 ECCP1MD_bit         _BIT_ACCESS(PMD1,6)
// ODCON1<ECCP1OD>
extern volatile __bit                   ECCP1OD             __at(0x775E);	// @ (0xEEB * 8 + 6)
#define                                 ECCP1OD_bit         _BIT_ACCESS(ODCON1,6)
// RPINR14_15<ECCP1R0>
extern volatile __bit                   ECCP1R0             __at(0x718C);	// @ (0xE31 * 8 + 4)
#define                                 ECCP1R0_bit         _BIT_ACCESS(RPINR14_15,4)
// RPINR14_15<ECCP1R1>
extern volatile __bit                   ECCP1R1             __at(0x718D);	// @ (0xE31 * 8 + 5)
#define                                 ECCP1R1_bit         _BIT_ACCESS(RPINR14_15,5)
// RPINR14_15<ECCP1R2>
extern volatile __bit                   ECCP1R2             __at(0x718E);	// @ (0xE31 * 8 + 6)
#define                                 ECCP1R2_bit         _BIT_ACCESS(RPINR14_15,6)
// RPINR14_15<ECCP1R3>
extern volatile __bit                   ECCP1R3             __at(0x718F);	// @ (0xE31 * 8 + 7)
#define                                 ECCP1R3_bit         _BIT_ACCESS(RPINR14_15,7)
// ECCP2AS<ECCP2AS0>
extern volatile __bit                   ECCP2AS0            __at(0x7A94);	// @ (0xF52 * 8 + 4)
#define                                 ECCP2AS0_bit        _BIT_ACCESS(ECCP2AS,4)
// ECCP2AS<ECCP2AS1>
extern volatile __bit                   ECCP2AS1            __at(0x7A95);	// @ (0xF52 * 8 + 5)
#define                                 ECCP2AS1_bit        _BIT_ACCESS(ECCP2AS,5)
// ECCP2AS<ECCP2AS2>
extern volatile __bit                   ECCP2AS2            __at(0x7A96);	// @ (0xF52 * 8 + 6)
#define                                 ECCP2AS2_bit        _BIT_ACCESS(ECCP2AS,6)
// ECCP2AS<ECCP2ASE>
extern volatile __bit                   ECCP2ASE            __at(0x7A97);	// @ (0xF52 * 8 + 7)
#define                                 ECCP2ASE_bit        _BIT_ACCESS(ECCP2AS,7)
// PMD1<ECCP2MD>
extern volatile __bit                   ECCP2MD             __at(0x779F);	// @ (0xEF3 * 8 + 7)
#define                                 ECCP2MD_bit         _BIT_ACCESS(PMD1,7)
// ODCON1<ECCP2OD>
extern volatile __bit                   ECCP2OD             __at(0x775F);	// @ (0xEEB * 8 + 7)
#define                                 ECCP2OD_bit         _BIT_ACCESS(ODCON1,7)
// RPINR16_17<ECCP2R0>
extern volatile __bit                   ECCP2R0             __at(0x7190);	// @ (0xE32 * 8 + 0)
#define                                 ECCP2R0_bit         _BIT_ACCESS(RPINR16_17,0)
// RPINR16_17<ECCP2R1>
extern volatile __bit                   ECCP2R1             __at(0x7191);	// @ (0xE32 * 8 + 1)
#define                                 ECCP2R1_bit         _BIT_ACCESS(RPINR16_17,1)
// RPINR16_17<ECCP2R2>
extern volatile __bit                   ECCP2R2             __at(0x7192);	// @ (0xE32 * 8 + 2)
#define                                 ECCP2R2_bit         _BIT_ACCESS(RPINR16_17,2)
// RPINR16_17<ECCP2R3>
extern volatile __bit                   ECCP2R3             __at(0x7193);	// @ (0xE32 * 8 + 3)
#define                                 ECCP2R3_bit         _BIT_ACCESS(RPINR16_17,3)
// ECCP3AS<ECCP3AS0>
extern volatile __bit                   ECCP3AS0            __at(0x7A6C);	// @ (0xF4D * 8 + 4)
#define                                 ECCP3AS0_bit        _BIT_ACCESS(ECCP3AS,4)
// ECCP3AS<ECCP3AS1>
extern volatile __bit                   ECCP3AS1            __at(0x7A6D);	// @ (0xF4D * 8 + 5)
#define                                 ECCP3AS1_bit        _BIT_ACCESS(ECCP3AS,5)
// ECCP3AS<ECCP3AS2>
extern volatile __bit                   ECCP3AS2            __at(0x7A6E);	// @ (0xF4D * 8 + 6)
#define                                 ECCP3AS2_bit        _BIT_ACCESS(ECCP3AS,6)
// ECCP3AS<ECCP3ASE>
extern volatile __bit                   ECCP3ASE            __at(0x7A6F);	// @ (0xF4D * 8 + 7)
#define                                 ECCP3ASE_bit        _BIT_ACCESS(ECCP3AS,7)
// PIE4<ECCP3IE>
extern volatile __bit                   ECCP3IE             __at(0x7DA0);	// @ (0xFB4 * 8 + 0)
#define                                 ECCP3IE_bit         _BIT_ACCESS(PIE4,0)
// PIR4<ECCP3IF>
extern volatile __bit                   ECCP3IF             __at(0x7DA8);	// @ (0xFB5 * 8 + 0)
#define                                 ECCP3IF_bit         _BIT_ACCESS(PIR4,0)
// IPR4<ECCP3IP>
extern volatile __bit                   ECCP3IP             __at(0x7DB0);	// @ (0xFB6 * 8 + 0)
#define                                 ECCP3IP_bit         _BIT_ACCESS(IPR4,0)
// PMD0<ECCP3MD>
extern volatile __bit                   ECCP3MD             __at(0x77A0);	// @ (0xEF4 * 8 + 0)
#define                                 ECCP3MD_bit         _BIT_ACCESS(PMD0,0)
// ODCON2<ECCP3OD>
extern volatile __bit                   ECCP3OD             __at(0x7750);	// @ (0xEEA * 8 + 0)
#define                                 ECCP3OD_bit         _BIT_ACCESS(ODCON2,0)
// RPINR16_17<ECCP3R0>
extern volatile __bit                   ECCP3R0             __at(0x7194);	// @ (0xE32 * 8 + 4)
#define                                 ECCP3R0_bit         _BIT_ACCESS(RPINR16_17,4)
// RPINR16_17<ECCP3R1>
extern volatile __bit                   ECCP3R1             __at(0x7195);	// @ (0xE32 * 8 + 5)
#define                                 ECCP3R1_bit         _BIT_ACCESS(RPINR16_17,5)
// RPINR16_17<ECCP3R2>
extern volatile __bit                   ECCP3R2             __at(0x7196);	// @ (0xE32 * 8 + 6)
#define                                 ECCP3R2_bit         _BIT_ACCESS(RPINR16_17,6)
// RPINR16_17<ECCP3R3>
extern volatile __bit                   ECCP3R3             __at(0x7197);	// @ (0xE32 * 8 + 7)
#define                                 ECCP3R3_bit         _BIT_ACCESS(RPINR16_17,7)
// CTMUCON4<EDG1EN>
extern volatile __bit                   EDG1EN              __at(0x77AF);	// @ (0xEF5 * 8 + 7)
#define                                 EDG1EN_bit          _BIT_ACCESS(CTMUCON4,7)
// CTMUCON4<EDG1POL>
extern volatile __bit                   EDG1POL             __at(0x77AE);	// @ (0xEF5 * 8 + 6)
#define                                 EDG1POL_bit         _BIT_ACCESS(CTMUCON4,6)
// CTMUCON4<EDG1SEL0>
extern volatile __bit                   EDG1SEL0            __at(0x77AA);	// @ (0xEF5 * 8 + 2)
#define                                 EDG1SEL0_bit        _BIT_ACCESS(CTMUCON4,2)
// CTMUCON4<EDG1SEL1>
extern volatile __bit                   EDG1SEL1            __at(0x77AB);	// @ (0xEF5 * 8 + 3)
#define                                 EDG1SEL1_bit        _BIT_ACCESS(CTMUCON4,3)
// CTMUCON4<EDG1SEL2>
extern volatile __bit                   EDG1SEL2            __at(0x77AC);	// @ (0xEF5 * 8 + 4)
#define                                 EDG1SEL2_bit        _BIT_ACCESS(CTMUCON4,4)
// CTMUCON4<EDG1SEL3>
extern volatile __bit                   EDG1SEL3            __at(0x77AD);	// @ (0xEF5 * 8 + 5)
#define                                 EDG1SEL3_bit        _BIT_ACCESS(CTMUCON4,5)
// CTMUCON4<EDG1STAT>
extern volatile __bit                   EDG1STAT            __at(0x77A8);	// @ (0xEF5 * 8 + 0)
#define                                 EDG1STAT_bit        _BIT_ACCESS(CTMUCON4,0)
// CTMUCON3<EDG2EN>
extern volatile __bit                   EDG2EN              __at(0x77B7);	// @ (0xEF6 * 8 + 7)
#define                                 EDG2EN_bit          _BIT_ACCESS(CTMUCON3,7)
// CTMUCON3<EDG2POL>
extern volatile __bit                   EDG2POL             __at(0x77B6);	// @ (0xEF6 * 8 + 6)
#define                                 EDG2POL_bit         _BIT_ACCESS(CTMUCON3,6)
// CTMUCON3<EDG2SEL0>
extern volatile __bit                   EDG2SEL0            __at(0x77B2);	// @ (0xEF6 * 8 + 2)
#define                                 EDG2SEL0_bit        _BIT_ACCESS(CTMUCON3,2)
// CTMUCON3<EDG2SEL1>
extern volatile __bit                   EDG2SEL1            __at(0x77B3);	// @ (0xEF6 * 8 + 3)
#define                                 EDG2SEL1_bit        _BIT_ACCESS(CTMUCON3,3)
// CTMUCON3<EDG2SEL2>
extern volatile __bit                   EDG2SEL2            __at(0x77B4);	// @ (0xEF6 * 8 + 4)
#define                                 EDG2SEL2_bit        _BIT_ACCESS(CTMUCON3,4)
// CTMUCON3<EDG2SEL3>
extern volatile __bit                   EDG2SEL3            __at(0x77B5);	// @ (0xEF6 * 8 + 5)
#define                                 EDG2SEL3_bit        _BIT_ACCESS(CTMUCON3,5)
// CTMUCON4<EDG2STAT>
extern volatile __bit                   EDG2STAT            __at(0x77A9);	// @ (0xEF5 * 8 + 1)
#define                                 EDG2STAT_bit        _BIT_ACCESS(CTMUCON4,1)
// CTMUCON1<EDGEN>
extern volatile __bit                   EDGEN               __at(0x77C3);	// @ (0xEF8 * 8 + 3)
#define                                 EDGEN_bit           _BIT_ACCESS(CTMUCON1,3)
// CTMUCON1<EDGSEQEN>
extern volatile __bit                   EDGSEQEN            __at(0x77C2);	// @ (0xEF8 * 8 + 2)
#define                                 EDGSEQEN_bit        _BIT_ACCESS(CTMUCON1,2)
// USTAT<ENDP0>
extern volatile __bit                   ENDP0               __at(0x7BB3);	// @ (0xF76 * 8 + 3)
#define                                 ENDP0_bit           _BIT_ACCESS(USTAT,3)
// USTAT<ENDP1>
extern volatile __bit                   ENDP1               __at(0x7BB4);	// @ (0xF76 * 8 + 4)
#define                                 ENDP1_bit           _BIT_ACCESS(USTAT,4)
// USTAT<ENDP2>
extern volatile __bit                   ENDP2               __at(0x7BB5);	// @ (0xF76 * 8 + 5)
#define                                 ENDP2_bit           _BIT_ACCESS(USTAT,5)
// USTAT<ENDP3>
extern volatile __bit                   ENDP3               __at(0x7BB6);	// @ (0xF76 * 8 + 6)
#define                                 ENDP3_bit           _BIT_ACCESS(USTAT,6)
// UEP0<EP0CONDIS>
extern volatile __bit                   EP0CONDIS           __at(0x6FFB);	// @ (0xDFF * 8 + 3)
#define                                 EP0CONDIS_bit       _BIT_ACCESS(UEP0,3)
// UEP0<EP0HSHK>
extern volatile __bit                   EP0HSHK             __at(0x6FFC);	// @ (0xDFF * 8 + 4)
#define                                 EP0HSHK_bit         _BIT_ACCESS(UEP0,4)
// UEP0<EP0INEN>
extern volatile __bit                   EP0INEN             __at(0x6FF9);	// @ (0xDFF * 8 + 1)
#define                                 EP0INEN_bit         _BIT_ACCESS(UEP0,1)
// UEP0<EP0OUTEN>
extern volatile __bit                   EP0OUTEN            __at(0x6FFA);	// @ (0xDFF * 8 + 2)
#define                                 EP0OUTEN_bit        _BIT_ACCESS(UEP0,2)
// UEP0<EP0STALL>
extern volatile __bit                   EP0STALL            __at(0x6FF8);	// @ (0xDFF * 8 + 0)
#define                                 EP0STALL_bit        _BIT_ACCESS(UEP0,0)
// UEP1<EP1CONDIS>
extern volatile __bit                   EP1CONDIS           __at(0x7003);	// @ (0xE00 * 8 + 3)
#define                                 EP1CONDIS_bit       _BIT_ACCESS(UEP1,3)
// UEP1<EP1HSHK>
extern volatile __bit                   EP1HSHK             __at(0x7004);	// @ (0xE00 * 8 + 4)
#define                                 EP1HSHK_bit         _BIT_ACCESS(UEP1,4)
// UEP1<EP1INEN>
extern volatile __bit                   EP1INEN             __at(0x7001);	// @ (0xE00 * 8 + 1)
#define                                 EP1INEN_bit         _BIT_ACCESS(UEP1,1)
// UEP1<EP1OUTEN>
extern volatile __bit                   EP1OUTEN            __at(0x7002);	// @ (0xE00 * 8 + 2)
#define                                 EP1OUTEN_bit        _BIT_ACCESS(UEP1,2)
// UEP1<EP1STALL>
extern volatile __bit                   EP1STALL            __at(0x7000);	// @ (0xE00 * 8 + 0)
#define                                 EP1STALL_bit        _BIT_ACCESS(UEP1,0)
// UEP2<EP2CONDIS>
extern volatile __bit                   EP2CONDIS           __at(0x700B);	// @ (0xE01 * 8 + 3)
#define                                 EP2CONDIS_bit       _BIT_ACCESS(UEP2,3)
// UEP2<EP2HSHK>
extern volatile __bit                   EP2HSHK             __at(0x700C);	// @ (0xE01 * 8 + 4)
#define                                 EP2HSHK_bit         _BIT_ACCESS(UEP2,4)
// UEP2<EP2INEN>
extern volatile __bit                   EP2INEN             __at(0x7009);	// @ (0xE01 * 8 + 1)
#define                                 EP2INEN_bit         _BIT_ACCESS(UEP2,1)
// UEP2<EP2OUTEN>
extern volatile __bit                   EP2OUTEN            __at(0x700A);	// @ (0xE01 * 8 + 2)
#define                                 EP2OUTEN_bit        _BIT_ACCESS(UEP2,2)
// UEP2<EP2STALL>
extern volatile __bit                   EP2STALL            __at(0x7008);	// @ (0xE01 * 8 + 0)
#define                                 EP2STALL_bit        _BIT_ACCESS(UEP2,0)
// UEP3<EP3CONDIS>
extern volatile __bit                   EP3CONDIS           __at(0x7013);	// @ (0xE02 * 8 + 3)
#define                                 EP3CONDIS_bit       _BIT_ACCESS(UEP3,3)
// UEP3<EP3HSHK>
extern volatile __bit                   EP3HSHK             __at(0x7014);	// @ (0xE02 * 8 + 4)
#define                                 EP3HSHK_bit         _BIT_ACCESS(UEP3,4)
// UEP3<EP3INEN>
extern volatile __bit                   EP3INEN             __at(0x7011);	// @ (0xE02 * 8 + 1)
#define                                 EP3INEN_bit         _BIT_ACCESS(UEP3,1)
// UEP3<EP3OUTEN>
extern volatile __bit                   EP3OUTEN            __at(0x7012);	// @ (0xE02 * 8 + 2)
#define                                 EP3OUTEN_bit        _BIT_ACCESS(UEP3,2)
// UEP3<EP3STALL>
extern volatile __bit                   EP3STALL            __at(0x7010);	// @ (0xE02 * 8 + 0)
#define                                 EP3STALL_bit        _BIT_ACCESS(UEP3,0)
// UEP4<EP4CONDIS>
extern volatile __bit                   EP4CONDIS           __at(0x701B);	// @ (0xE03 * 8 + 3)
#define                                 EP4CONDIS_bit       _BIT_ACCESS(UEP4,3)
// UEP4<EP4HSHK>
extern volatile __bit                   EP4HSHK             __at(0x701C);	// @ (0xE03 * 8 + 4)
#define                                 EP4HSHK_bit         _BIT_ACCESS(UEP4,4)
// UEP4<EP4INEN>
extern volatile __bit                   EP4INEN             __at(0x7019);	// @ (0xE03 * 8 + 1)
#define                                 EP4INEN_bit         _BIT_ACCESS(UEP4,1)
// UEP4<EP4OUTEN>
extern volatile __bit                   EP4OUTEN            __at(0x701A);	// @ (0xE03 * 8 + 2)
#define                                 EP4OUTEN_bit        _BIT_ACCESS(UEP4,2)
// UEP4<EP4STALL>
extern volatile __bit                   EP4STALL            __at(0x7018);	// @ (0xE03 * 8 + 0)
#define                                 EP4STALL_bit        _BIT_ACCESS(UEP4,0)
// UEP5<EP5CONDIS>
extern volatile __bit                   EP5CONDIS           __at(0x7023);	// @ (0xE04 * 8 + 3)
#define                                 EP5CONDIS_bit       _BIT_ACCESS(UEP5,3)
// UEP5<EP5HSHK>
extern volatile __bit                   EP5HSHK             __at(0x7024);	// @ (0xE04 * 8 + 4)
#define                                 EP5HSHK_bit         _BIT_ACCESS(UEP5,4)
// UEP5<EP5INEN>
extern volatile __bit                   EP5INEN             __at(0x7021);	// @ (0xE04 * 8 + 1)
#define                                 EP5INEN_bit         _BIT_ACCESS(UEP5,1)
// UEP5<EP5OUTEN>
extern volatile __bit                   EP5OUTEN            __at(0x7022);	// @ (0xE04 * 8 + 2)
#define                                 EP5OUTEN_bit        _BIT_ACCESS(UEP5,2)
// UEP5<EP5STALL>
extern volatile __bit                   EP5STALL            __at(0x7020);	// @ (0xE04 * 8 + 0)
#define                                 EP5STALL_bit        _BIT_ACCESS(UEP5,0)
// UEP6<EP6CONDIS>
extern volatile __bit                   EP6CONDIS           __at(0x702B);	// @ (0xE05 * 8 + 3)
#define                                 EP6CONDIS_bit       _BIT_ACCESS(UEP6,3)
// UEP6<EP6HSHK>
extern volatile __bit                   EP6HSHK             __at(0x702C);	// @ (0xE05 * 8 + 4)
#define                                 EP6HSHK_bit         _BIT_ACCESS(UEP6,4)
// UEP6<EP6INEN>
extern volatile __bit                   EP6INEN             __at(0x7029);	// @ (0xE05 * 8 + 1)
#define                                 EP6INEN_bit         _BIT_ACCESS(UEP6,1)
// UEP6<EP6OUTEN>
extern volatile __bit                   EP6OUTEN            __at(0x702A);	// @ (0xE05 * 8 + 2)
#define                                 EP6OUTEN_bit        _BIT_ACCESS(UEP6,2)
// UEP6<EP6STALL>
extern volatile __bit                   EP6STALL            __at(0x7028);	// @ (0xE05 * 8 + 0)
#define                                 EP6STALL_bit        _BIT_ACCESS(UEP6,0)
// UEP7<EP7CONDIS>
extern volatile __bit                   EP7CONDIS           __at(0x7033);	// @ (0xE06 * 8 + 3)
#define                                 EP7CONDIS_bit       _BIT_ACCESS(UEP7,3)
// UEP7<EP7HSHK>
extern volatile __bit                   EP7HSHK             __at(0x7034);	// @ (0xE06 * 8 + 4)
#define                                 EP7HSHK_bit         _BIT_ACCESS(UEP7,4)
// UEP7<EP7INEN>
extern volatile __bit                   EP7INEN             __at(0x7031);	// @ (0xE06 * 8 + 1)
#define                                 EP7INEN_bit         _BIT_ACCESS(UEP7,1)
// UEP7<EP7OUTEN>
extern volatile __bit                   EP7OUTEN            __at(0x7032);	// @ (0xE06 * 8 + 2)
#define                                 EP7OUTEN_bit        _BIT_ACCESS(UEP7,2)
// UEP7<EP7STALL>
extern volatile __bit                   EP7STALL            __at(0x7030);	// @ (0xE06 * 8 + 0)
#define                                 EP7STALL_bit        _BIT_ACCESS(UEP7,0)
// UEP0<EPCONDIS0>
extern volatile __bit                   EPCONDIS0           __at(0x6FFB);	// @ (0xDFF * 8 + 3)
#define                                 EPCONDIS0_bit       _BIT_ACCESS(UEP0,3)
// UEP1<EPCONDIS1>
extern volatile __bit                   EPCONDIS1           __at(0x7003);	// @ (0xE00 * 8 + 3)
#define                                 EPCONDIS1_bit       _BIT_ACCESS(UEP1,3)
// UEP10<EPCONDIS10>
extern volatile __bit                   EPCONDIS10          __at(0x704B);	// @ (0xE09 * 8 + 3)
#define                                 EPCONDIS10_bit      _BIT_ACCESS(UEP10,3)
// UEP11<EPCONDIS11>
extern volatile __bit                   EPCONDIS11          __at(0x7053);	// @ (0xE0A * 8 + 3)
#define                                 EPCONDIS11_bit      _BIT_ACCESS(UEP11,3)
// UEP12<EPCONDIS12>
extern volatile __bit                   EPCONDIS12          __at(0x705B);	// @ (0xE0B * 8 + 3)
#define                                 EPCONDIS12_bit      _BIT_ACCESS(UEP12,3)
// UEP13<EPCONDIS13>
extern volatile __bit                   EPCONDIS13          __at(0x7063);	// @ (0xE0C * 8 + 3)
#define                                 EPCONDIS13_bit      _BIT_ACCESS(UEP13,3)
// UEP14<EPCONDIS14>
extern volatile __bit                   EPCONDIS14          __at(0x706B);	// @ (0xE0D * 8 + 3)
#define                                 EPCONDIS14_bit      _BIT_ACCESS(UEP14,3)
// UEP15<EPCONDIS15>
extern volatile __bit                   EPCONDIS15          __at(0x7073);	// @ (0xE0E * 8 + 3)
#define                                 EPCONDIS15_bit      _BIT_ACCESS(UEP15,3)
// UEP2<EPCONDIS2>
extern volatile __bit                   EPCONDIS2           __at(0x700B);	// @ (0xE01 * 8 + 3)
#define                                 EPCONDIS2_bit       _BIT_ACCESS(UEP2,3)
// UEP3<EPCONDIS3>
extern volatile __bit                   EPCONDIS3           __at(0x7013);	// @ (0xE02 * 8 + 3)
#define                                 EPCONDIS3_bit       _BIT_ACCESS(UEP3,3)
// UEP4<EPCONDIS4>
extern volatile __bit                   EPCONDIS4           __at(0x701B);	// @ (0xE03 * 8 + 3)
#define                                 EPCONDIS4_bit       _BIT_ACCESS(UEP4,3)
// UEP5<EPCONDIS5>
extern volatile __bit                   EPCONDIS5           __at(0x7023);	// @ (0xE04 * 8 + 3)
#define                                 EPCONDIS5_bit       _BIT_ACCESS(UEP5,3)
// UEP6<EPCONDIS6>
extern volatile __bit                   EPCONDIS6           __at(0x702B);	// @ (0xE05 * 8 + 3)
#define                                 EPCONDIS6_bit       _BIT_ACCESS(UEP6,3)
// UEP7<EPCONDIS7>
extern volatile __bit                   EPCONDIS7           __at(0x7033);	// @ (0xE06 * 8 + 3)
#define                                 EPCONDIS7_bit       _BIT_ACCESS(UEP7,3)
// UEP8<EPCONDIS8>
extern volatile __bit                   EPCONDIS8           __at(0x703B);	// @ (0xE07 * 8 + 3)
#define                                 EPCONDIS8_bit       _BIT_ACCESS(UEP8,3)
// UEP9<EPCONDIS9>
extern volatile __bit                   EPCONDIS9           __at(0x7043);	// @ (0xE08 * 8 + 3)
#define                                 EPCONDIS9_bit       _BIT_ACCESS(UEP9,3)
// UEP0<EPHSHK0>
extern volatile __bit                   EPHSHK0             __at(0x6FFC);	// @ (0xDFF * 8 + 4)
#define                                 EPHSHK0_bit         _BIT_ACCESS(UEP0,4)
// UEP1<EPHSHK1>
extern volatile __bit                   EPHSHK1             __at(0x7004);	// @ (0xE00 * 8 + 4)
#define                                 EPHSHK1_bit         _BIT_ACCESS(UEP1,4)
// UEP10<EPHSHK10>
extern volatile __bit                   EPHSHK10            __at(0x704C);	// @ (0xE09 * 8 + 4)
#define                                 EPHSHK10_bit        _BIT_ACCESS(UEP10,4)
// UEP11<EPHSHK11>
extern volatile __bit                   EPHSHK11            __at(0x7054);	// @ (0xE0A * 8 + 4)
#define                                 EPHSHK11_bit        _BIT_ACCESS(UEP11,4)
// UEP12<EPHSHK12>
extern volatile __bit                   EPHSHK12            __at(0x705C);	// @ (0xE0B * 8 + 4)
#define                                 EPHSHK12_bit        _BIT_ACCESS(UEP12,4)
// UEP13<EPHSHK13>
extern volatile __bit                   EPHSHK13            __at(0x7064);	// @ (0xE0C * 8 + 4)
#define                                 EPHSHK13_bit        _BIT_ACCESS(UEP13,4)
// UEP14<EPHSHK14>
extern volatile __bit                   EPHSHK14            __at(0x706C);	// @ (0xE0D * 8 + 4)
#define                                 EPHSHK14_bit        _BIT_ACCESS(UEP14,4)
// UEP15<EPHSHK15>
extern volatile __bit                   EPHSHK15            __at(0x7074);	// @ (0xE0E * 8 + 4)
#define                                 EPHSHK15_bit        _BIT_ACCESS(UEP15,4)
// UEP2<EPHSHK2>
extern volatile __bit                   EPHSHK2             __at(0x700C);	// @ (0xE01 * 8 + 4)
#define                                 EPHSHK2_bit         _BIT_ACCESS(UEP2,4)
// UEP3<EPHSHK3>
extern volatile __bit                   EPHSHK3             __at(0x7014);	// @ (0xE02 * 8 + 4)
#define                                 EPHSHK3_bit         _BIT_ACCESS(UEP3,4)
// UEP4<EPHSHK4>
extern volatile __bit                   EPHSHK4             __at(0x701C);	// @ (0xE03 * 8 + 4)
#define                                 EPHSHK4_bit         _BIT_ACCESS(UEP4,4)
// UEP5<EPHSHK5>
extern volatile __bit                   EPHSHK5             __at(0x7024);	// @ (0xE04 * 8 + 4)
#define                                 EPHSHK5_bit         _BIT_ACCESS(UEP5,4)
// UEP6<EPHSHK6>
extern volatile __bit                   EPHSHK6             __at(0x702C);	// @ (0xE05 * 8 + 4)
#define                                 EPHSHK6_bit         _BIT_ACCESS(UEP6,4)
// UEP7<EPHSHK7>
extern volatile __bit                   EPHSHK7             __at(0x7034);	// @ (0xE06 * 8 + 4)
#define                                 EPHSHK7_bit         _BIT_ACCESS(UEP7,4)
// UEP8<EPHSHK8>
extern volatile __bit                   EPHSHK8             __at(0x703C);	// @ (0xE07 * 8 + 4)
#define                                 EPHSHK8_bit         _BIT_ACCESS(UEP8,4)
// UEP9<EPHSHK9>
extern volatile __bit                   EPHSHK9             __at(0x7044);	// @ (0xE08 * 8 + 4)
#define                                 EPHSHK9_bit         _BIT_ACCESS(UEP9,4)
// UEP0<EPINEN0>
extern volatile __bit                   EPINEN0             __at(0x6FF9);	// @ (0xDFF * 8 + 1)
#define                                 EPINEN0_bit         _BIT_ACCESS(UEP0,1)
// UEP1<EPINEN1>
extern volatile __bit                   EPINEN1             __at(0x7001);	// @ (0xE00 * 8 + 1)
#define                                 EPINEN1_bit         _BIT_ACCESS(UEP1,1)
// UEP10<EPINEN10>
extern volatile __bit                   EPINEN10            __at(0x7049);	// @ (0xE09 * 8 + 1)
#define                                 EPINEN10_bit        _BIT_ACCESS(UEP10,1)
// UEP11<EPINEN11>
extern volatile __bit                   EPINEN11            __at(0x7051);	// @ (0xE0A * 8 + 1)
#define                                 EPINEN11_bit        _BIT_ACCESS(UEP11,1)
// UEP12<EPINEN12>
extern volatile __bit                   EPINEN12            __at(0x7059);	// @ (0xE0B * 8 + 1)
#define                                 EPINEN12_bit        _BIT_ACCESS(UEP12,1)
// UEP13<EPINEN13>
extern volatile __bit                   EPINEN13            __at(0x7061);	// @ (0xE0C * 8 + 1)
#define                                 EPINEN13_bit        _BIT_ACCESS(UEP13,1)
// UEP14<EPINEN14>
extern volatile __bit                   EPINEN14            __at(0x7069);	// @ (0xE0D * 8 + 1)
#define                                 EPINEN14_bit        _BIT_ACCESS(UEP14,1)
// UEP15<EPINEN15>
extern volatile __bit                   EPINEN15            __at(0x7071);	// @ (0xE0E * 8 + 1)
#define                                 EPINEN15_bit        _BIT_ACCESS(UEP15,1)
// UEP2<EPINEN2>
extern volatile __bit                   EPINEN2             __at(0x7009);	// @ (0xE01 * 8 + 1)
#define                                 EPINEN2_bit         _BIT_ACCESS(UEP2,1)
// UEP3<EPINEN3>
extern volatile __bit                   EPINEN3             __at(0x7011);	// @ (0xE02 * 8 + 1)
#define                                 EPINEN3_bit         _BIT_ACCESS(UEP3,1)
// UEP4<EPINEN4>
extern volatile __bit                   EPINEN4             __at(0x7019);	// @ (0xE03 * 8 + 1)
#define                                 EPINEN4_bit         _BIT_ACCESS(UEP4,1)
// UEP5<EPINEN5>
extern volatile __bit                   EPINEN5             __at(0x7021);	// @ (0xE04 * 8 + 1)
#define                                 EPINEN5_bit         _BIT_ACCESS(UEP5,1)
// UEP6<EPINEN6>
extern volatile __bit                   EPINEN6             __at(0x7029);	// @ (0xE05 * 8 + 1)
#define                                 EPINEN6_bit         _BIT_ACCESS(UEP6,1)
// UEP7<EPINEN7>
extern volatile __bit                   EPINEN7             __at(0x7031);	// @ (0xE06 * 8 + 1)
#define                                 EPINEN7_bit         _BIT_ACCESS(UEP7,1)
// UEP8<EPINEN8>
extern volatile __bit                   EPINEN8             __at(0x7039);	// @ (0xE07 * 8 + 1)
#define                                 EPINEN8_bit         _BIT_ACCESS(UEP8,1)
// UEP9<EPINEN9>
extern volatile __bit                   EPINEN9             __at(0x7041);	// @ (0xE08 * 8 + 1)
#define                                 EPINEN9_bit         _BIT_ACCESS(UEP9,1)
// UEP0<EPOUTEN0>
extern volatile __bit                   EPOUTEN0            __at(0x6FFA);	// @ (0xDFF * 8 + 2)
#define                                 EPOUTEN0_bit        _BIT_ACCESS(UEP0,2)
// UEP1<EPOUTEN1>
extern volatile __bit                   EPOUTEN1            __at(0x7002);	// @ (0xE00 * 8 + 2)
#define                                 EPOUTEN1_bit        _BIT_ACCESS(UEP1,2)
// UEP10<EPOUTEN10>
extern volatile __bit                   EPOUTEN10           __at(0x704A);	// @ (0xE09 * 8 + 2)
#define                                 EPOUTEN10_bit       _BIT_ACCESS(UEP10,2)
// UEP11<EPOUTEN11>
extern volatile __bit                   EPOUTEN11           __at(0x7052);	// @ (0xE0A * 8 + 2)
#define                                 EPOUTEN11_bit       _BIT_ACCESS(UEP11,2)
// UEP12<EPOUTEN12>
extern volatile __bit                   EPOUTEN12           __at(0x705A);	// @ (0xE0B * 8 + 2)
#define                                 EPOUTEN12_bit       _BIT_ACCESS(UEP12,2)
// UEP13<EPOUTEN13>
extern volatile __bit                   EPOUTEN13           __at(0x7062);	// @ (0xE0C * 8 + 2)
#define                                 EPOUTEN13_bit       _BIT_ACCESS(UEP13,2)
// UEP14<EPOUTEN14>
extern volatile __bit                   EPOUTEN14           __at(0x706A);	// @ (0xE0D * 8 + 2)
#define                                 EPOUTEN14_bit       _BIT_ACCESS(UEP14,2)
// UEP15<EPOUTEN15>
extern volatile __bit                   EPOUTEN15           __at(0x7072);	// @ (0xE0E * 8 + 2)
#define                                 EPOUTEN15_bit       _BIT_ACCESS(UEP15,2)
// UEP2<EPOUTEN2>
extern volatile __bit                   EPOUTEN2            __at(0x700A);	// @ (0xE01 * 8 + 2)
#define                                 EPOUTEN2_bit        _BIT_ACCESS(UEP2,2)
// UEP3<EPOUTEN3>
extern volatile __bit                   EPOUTEN3            __at(0x7012);	// @ (0xE02 * 8 + 2)
#define                                 EPOUTEN3_bit        _BIT_ACCESS(UEP3,2)
// UEP4<EPOUTEN4>
extern volatile __bit                   EPOUTEN4            __at(0x701A);	// @ (0xE03 * 8 + 2)
#define                                 EPOUTEN4_bit        _BIT_ACCESS(UEP4,2)
// UEP5<EPOUTEN5>
extern volatile __bit                   EPOUTEN5            __at(0x7022);	// @ (0xE04 * 8 + 2)
#define                                 EPOUTEN5_bit        _BIT_ACCESS(UEP5,2)
// UEP6<EPOUTEN6>
extern volatile __bit                   EPOUTEN6            __at(0x702A);	// @ (0xE05 * 8 + 2)
#define                                 EPOUTEN6_bit        _BIT_ACCESS(UEP6,2)
// UEP7<EPOUTEN7>
extern volatile __bit                   EPOUTEN7            __at(0x7032);	// @ (0xE06 * 8 + 2)
#define                                 EPOUTEN7_bit        _BIT_ACCESS(UEP7,2)
// UEP8<EPOUTEN8>
extern volatile __bit                   EPOUTEN8            __at(0x703A);	// @ (0xE07 * 8 + 2)
#define                                 EPOUTEN8_bit        _BIT_ACCESS(UEP8,2)
// UEP9<EPOUTEN9>
extern volatile __bit                   EPOUTEN9            __at(0x7042);	// @ (0xE08 * 8 + 2)
#define                                 EPOUTEN9_bit        _BIT_ACCESS(UEP9,2)
// UEP0<EPSTALL0>
extern volatile __bit                   EPSTALL0            __at(0x6FF8);	// @ (0xDFF * 8 + 0)
#define                                 EPSTALL0_bit        _BIT_ACCESS(UEP0,0)
// UEP1<EPSTALL1>
extern volatile __bit                   EPSTALL1            __at(0x7000);	// @ (0xE00 * 8 + 0)
#define                                 EPSTALL1_bit        _BIT_ACCESS(UEP1,0)
// UEP10<EPSTALL10>
extern volatile __bit                   EPSTALL10           __at(0x7048);	// @ (0xE09 * 8 + 0)
#define                                 EPSTALL10_bit       _BIT_ACCESS(UEP10,0)
// UEP11<EPSTALL11>
extern volatile __bit                   EPSTALL11           __at(0x7050);	// @ (0xE0A * 8 + 0)
#define                                 EPSTALL11_bit       _BIT_ACCESS(UEP11,0)
// UEP12<EPSTALL12>
extern volatile __bit                   EPSTALL12           __at(0x7058);	// @ (0xE0B * 8 + 0)
#define                                 EPSTALL12_bit       _BIT_ACCESS(UEP12,0)
// UEP13<EPSTALL13>
extern volatile __bit                   EPSTALL13           __at(0x7060);	// @ (0xE0C * 8 + 0)
#define                                 EPSTALL13_bit       _BIT_ACCESS(UEP13,0)
// UEP14<EPSTALL14>
extern volatile __bit                   EPSTALL14           __at(0x7068);	// @ (0xE0D * 8 + 0)
#define                                 EPSTALL14_bit       _BIT_ACCESS(UEP14,0)
// UEP15<EPSTALL15>
extern volatile __bit                   EPSTALL15           __at(0x7070);	// @ (0xE0E * 8 + 0)
#define                                 EPSTALL15_bit       _BIT_ACCESS(UEP15,0)
// UEP2<EPSTALL2>
extern volatile __bit                   EPSTALL2            __at(0x7008);	// @ (0xE01 * 8 + 0)
#define                                 EPSTALL2_bit        _BIT_ACCESS(UEP2,0)
// UEP3<EPSTALL3>
extern volatile __bit                   EPSTALL3            __at(0x7010);	// @ (0xE02 * 8 + 0)
#define                                 EPSTALL3_bit        _BIT_ACCESS(UEP3,0)
// UEP4<EPSTALL4>
extern volatile __bit                   EPSTALL4            __at(0x7018);	// @ (0xE03 * 8 + 0)
#define                                 EPSTALL4_bit        _BIT_ACCESS(UEP4,0)
// UEP5<EPSTALL5>
extern volatile __bit                   EPSTALL5            __at(0x7020);	// @ (0xE04 * 8 + 0)
#define                                 EPSTALL5_bit        _BIT_ACCESS(UEP5,0)
// UEP6<EPSTALL6>
extern volatile __bit                   EPSTALL6            __at(0x7028);	// @ (0xE05 * 8 + 0)
#define                                 EPSTALL6_bit        _BIT_ACCESS(UEP6,0)
// UEP7<EPSTALL7>
extern volatile __bit                   EPSTALL7            __at(0x7030);	// @ (0xE06 * 8 + 0)
#define                                 EPSTALL7_bit        _BIT_ACCESS(UEP7,0)
// UEP8<EPSTALL8>
extern volatile __bit                   EPSTALL8            __at(0x7038);	// @ (0xE07 * 8 + 0)
#define                                 EPSTALL8_bit        _BIT_ACCESS(UEP8,0)
// UEP9<EPSTALL9>
extern volatile __bit                   EPSTALL9            __at(0x7040);	// @ (0xE08 * 8 + 0)
#define                                 EPSTALL9_bit        _BIT_ACCESS(UEP9,0)
// CM1CON<EVPOL01>
extern volatile __bit                   EVPOL01             __at(0x7A9B);	// @ (0xF53 * 8 + 3)
#define                                 EVPOL01_bit         _BIT_ACCESS(CM1CON,3)
// CM2CON<EVPOL02>
extern volatile __bit                   EVPOL02             __at(0x79C3);	// @ (0xF38 * 8 + 3)
#define                                 EVPOL02_bit         _BIT_ACCESS(CM2CON,3)
// CM3CON<EVPOL03>
extern volatile __bit                   EVPOL03             __at(0x79BB);	// @ (0xF37 * 8 + 3)
#define                                 EVPOL03_bit         _BIT_ACCESS(CM3CON,3)
// CM1CON<EVPOL11>
extern volatile __bit                   EVPOL11             __at(0x7A9C);	// @ (0xF53 * 8 + 4)
#define                                 EVPOL11_bit         _BIT_ACCESS(CM1CON,4)
// CM2CON<EVPOL12>
extern volatile __bit                   EVPOL12             __at(0x79C4);	// @ (0xF38 * 8 + 4)
#define                                 EVPOL12_bit         _BIT_ACCESS(CM2CON,4)
// CM3CON<EVPOL13>
extern volatile __bit                   EVPOL13             __at(0x79BC);	// @ (0xF37 * 8 + 4)
#define                                 EVPOL13_bit         _BIT_ACCESS(CM3CON,4)
// IPR5<EVPOL15>
extern volatile __bit                   EVPOL15             __at(0x7E94);	// @ (0xFD2 * 8 + 4)
#define                                 EVPOL15_bit         _BIT_ACCESS(IPR5,4)
// RCON2<EXTR>
extern volatile __bit                   EXTR                __at(0x7BEF);	// @ (0xF7D * 8 + 7)
#define                                 EXTR_bit            _BIT_ACCESS(RCON2,7)
// ADCON3H<EXTSAM>
extern volatile __bit                   EXTSAM              __at(0x745E);	// @ (0xE8B * 8 + 6)
#define                                 EXTSAM_bit          _BIT_ACCESS(ADCON3H,6)
// RPINR14_15<FLT0R0>
extern volatile __bit                   FLT0R0              __at(0x7188);	// @ (0xE31 * 8 + 0)
#define                                 FLT0R0_bit          _BIT_ACCESS(RPINR14_15,0)
// RPINR14_15<FLT0R1>
extern volatile __bit                   FLT0R1              __at(0x7189);	// @ (0xE31 * 8 + 1)
#define                                 FLT0R1_bit          _BIT_ACCESS(RPINR14_15,1)
// RPINR14_15<FLT0R2>
extern volatile __bit                   FLT0R2              __at(0x718A);	// @ (0xE31 * 8 + 2)
#define                                 FLT0R2_bit          _BIT_ACCESS(RPINR14_15,2)
// RPINR14_15<FLT0R3>
extern volatile __bit                   FLT0R3              __at(0x718B);	// @ (0xE31 * 8 + 3)
#define                                 FLT0R3_bit          _BIT_ACCESS(RPINR14_15,3)
// ADCON1H<FORM0>
extern volatile __bit                   FORM0               __at(0x7E08);	// @ (0xFC1 * 8 + 0)
#define                                 FORM0_bit           _BIT_ACCESS(ADCON1H,0)
// ADCON1H<FORM1>
extern volatile __bit                   FORM1               __at(0x7E09);	// @ (0xFC1 * 8 + 1)
#define                                 FORM1_bit           _BIT_ACCESS(ADCON1H,1)
// EECON1<FREE>
extern volatile __bit                   FREE                __at(0x7BFC);	// @ (0xF7F * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(EECON1,4)
// UFRML<FRM0>
extern volatile __bit                   FRM0                __at(0x7BD0);	// @ (0xF7A * 8 + 0)
#define                                 FRM0_bit            _BIT_ACCESS(UFRML,0)
// UFRML<FRM1>
extern volatile __bit                   FRM1                __at(0x7BD1);	// @ (0xF7A * 8 + 1)
#define                                 FRM1_bit            _BIT_ACCESS(UFRML,1)
// UFRMH<FRM10>
extern volatile __bit                   FRM10               __at(0x7BCA);	// @ (0xF79 * 8 + 2)
#define                                 FRM10_bit           _BIT_ACCESS(UFRMH,2)
// UFRML<FRM2>
extern volatile __bit                   FRM2                __at(0x7BD2);	// @ (0xF7A * 8 + 2)
#define                                 FRM2_bit            _BIT_ACCESS(UFRML,2)
// UFRML<FRM3>
extern volatile __bit                   FRM3                __at(0x7BD3);	// @ (0xF7A * 8 + 3)
#define                                 FRM3_bit            _BIT_ACCESS(UFRML,3)
// UFRML<FRM4>
extern volatile __bit                   FRM4                __at(0x7BD4);	// @ (0xF7A * 8 + 4)
#define                                 FRM4_bit            _BIT_ACCESS(UFRML,4)
// UFRML<FRM5>
extern volatile __bit                   FRM5                __at(0x7BD5);	// @ (0xF7A * 8 + 5)
#define                                 FRM5_bit            _BIT_ACCESS(UFRML,5)
// UFRML<FRM6>
extern volatile __bit                   FRM6                __at(0x7BD6);	// @ (0xF7A * 8 + 6)
#define                                 FRM6_bit            _BIT_ACCESS(UFRML,6)
// UFRML<FRM7>
extern volatile __bit                   FRM7                __at(0x7BD7);	// @ (0xF7A * 8 + 7)
#define                                 FRM7_bit            _BIT_ACCESS(UFRML,7)
// UFRMH<FRM8>
extern volatile __bit                   FRM8                __at(0x7BC8);	// @ (0xF79 * 8 + 0)
#define                                 FRM8_bit            _BIT_ACCESS(UFRMH,0)
// UFRMH<FRM9>
extern volatile __bit                   FRM9                __at(0x7BC9);	// @ (0xF79 * 8 + 1)
#define                                 FRM9_bit            _BIT_ACCESS(UFRMH,1)
// UCFG<FSEN>
extern volatile __bit                   FSEN                __at(0x708A);	// @ (0xE11 * 8 + 2)
#define                                 FSEN_bit            _BIT_ACCESS(UCFG,2)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0x7E2F);	// @ (0xFC5 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// SSP2CON2<GCEN2>
extern volatile __bit                   GCEN2               __at(0x78C7);	// @ (0xF18 * 8 + 7)
#define                                 GCEN2_bit           _BIT_ACCESS(SSP2CON2,7)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x7F97);	// @ (0xFF2 * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// INTCON<GIEH>
extern volatile __bit                   GIEH                __at(0x7F97);	// @ (0xFF2 * 8 + 7)
#define                                 GIEH_bit            _BIT_ACCESS(INTCON,7)
// INTCON<GIEL>
extern volatile __bit                   GIEL                __at(0x7F96);	// @ (0xFF2 * 8 + 6)
#define                                 GIEL_bit            _BIT_ACCESS(INTCON,6)
// INTCON<GIE_GIEH>
extern volatile __bit                   GIE_GIEH            __at(0x7F97);	// @ (0xFF2 * 8 + 7)
#define                                 GIE_GIEH_bit        _BIT_ACCESS(INTCON,7)
// RTCCON1<HALFSEC>
extern volatile __bit                   HALFSEC             __at(0x7AFB);	// @ (0xF5F * 8 + 3)
#define                                 HALFSEC_bit         _BIT_ACCESS(RTCCON1,3)
// HLVDCON<HLVDEN>
extern volatile __bit                   HLVDEN              __at(0x7D44);	// @ (0xFA8 * 8 + 4)
#define                                 HLVDEN_bit          _BIT_ACCESS(HLVDCON,4)
// PIE2<HLVDIE>
extern volatile __bit                   HLVDIE              __at(0x7D02);	// @ (0xFA0 * 8 + 2)
#define                                 HLVDIE_bit          _BIT_ACCESS(PIE2,2)
// PIR2<HLVDIF>
extern volatile __bit                   HLVDIF              __at(0x7D0A);	// @ (0xFA1 * 8 + 2)
#define                                 HLVDIF_bit          _BIT_ACCESS(PIR2,2)
// IPR2<HLVDIP>
extern volatile __bit                   HLVDIP              __at(0x7D12);	// @ (0xFA2 * 8 + 2)
#define                                 HLVDIP_bit          _BIT_ACCESS(IPR2,2)
// HLVDCON<HLVDL0>
extern volatile __bit                   HLVDL0              __at(0x7D40);	// @ (0xFA8 * 8 + 0)
#define                                 HLVDL0_bit          _BIT_ACCESS(HLVDCON,0)
// HLVDCON<HLVDL1>
extern volatile __bit                   HLVDL1              __at(0x7D41);	// @ (0xFA8 * 8 + 1)
#define                                 HLVDL1_bit          _BIT_ACCESS(HLVDCON,1)
// HLVDCON<HLVDL2>
extern volatile __bit                   HLVDL2              __at(0x7D42);	// @ (0xFA8 * 8 + 2)
#define                                 HLVDL2_bit          _BIT_ACCESS(HLVDCON,2)
// HLVDCON<HLVDL3>
extern volatile __bit                   HLVDL3              __at(0x7D43);	// @ (0xFA8 * 8 + 3)
#define                                 HLVDL3_bit          _BIT_ACCESS(HLVDCON,3)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<I2C_DAT2>
extern volatile __bit                   I2C_DAT2            __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 I2C_DAT2_bit        _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<I2C_READ2>
extern volatile __bit                   I2C_READ2           __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 I2C_READ2_bit       _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0x7E3B);	// @ (0xFC7 * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP2STAT<I2C_START2>
extern volatile __bit                   I2C_START2          __at(0x78D3);	// @ (0xF1A * 8 + 3)
#define                                 I2C_START2_bit      _BIT_ACCESS(SSP2STAT,3)
// PSPCON<IBF>
extern volatile __bit                   IBF                 __at(0x7D3F);	// @ (0xFA7 * 8 + 7)
#define                                 IBF_bit             _BIT_ACCESS(PSPCON,7)
// PSPCON<IBOV>
extern volatile __bit                   IBOV                __at(0x7D3D);	// @ (0xFA7 * 8 + 5)
#define                                 IBOV_bit            _BIT_ACCESS(PSPCON,5)
// CTMUCON1<IDISSEN>
extern volatile __bit                   IDISSEN             __at(0x77C1);	// @ (0xEF8 * 8 + 1)
#define                                 IDISSEN_bit         _BIT_ACCESS(CTMUCON1,1)
// UIE<IDLEIE>
extern volatile __bit                   IDLEIE              __at(0x7084);	// @ (0xE10 * 8 + 4)
#define                                 IDLEIE_bit          _BIT_ACCESS(UIE,4)
// UIR<IDLEIF>
extern volatile __bit                   IDLEIF              __at(0x7BC4);	// @ (0xF78 * 8 + 4)
#define                                 IDLEIF_bit          _BIT_ACCESS(UIR,4)
// OSCCON<IDLEN>
extern volatile __bit                   IDLEN               __at(0x7E9F);	// @ (0xFD3 * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(OSCCON,7)
// INTCON<INT0E>
extern volatile __bit                   INT0E               __at(0x7F94);	// @ (0xFF2 * 8 + 4)
#define                                 INT0E_bit           _BIT_ACCESS(INTCON,4)
// INTCON<INT0F>
extern volatile __bit                   INT0F               __at(0x7F91);	// @ (0xFF2 * 8 + 1)
#define                                 INT0F_bit           _BIT_ACCESS(INTCON,1)
// INTCON<INT0IE>
extern volatile __bit                   INT0IE              __at(0x7F94);	// @ (0xFF2 * 8 + 4)
#define                                 INT0IE_bit          _BIT_ACCESS(INTCON,4)
// INTCON<INT0IF>
extern volatile __bit                   INT0IF              __at(0x7F91);	// @ (0xFF2 * 8 + 1)
#define                                 INT0IF_bit          _BIT_ACCESS(INTCON,1)
// INTCON3<INT1E>
extern volatile __bit                   INT1E               __at(0x7F83);	// @ (0xFF0 * 8 + 3)
#define                                 INT1E_bit           _BIT_ACCESS(INTCON3,3)
// INTCON3<INT1F>
extern volatile __bit                   INT1F               __at(0x7F80);	// @ (0xFF0 * 8 + 0)
#define                                 INT1F_bit           _BIT_ACCESS(INTCON3,0)
// INTCON3<INT1IE>
extern volatile __bit                   INT1IE              __at(0x7F83);	// @ (0xFF0 * 8 + 3)
#define                                 INT1IE_bit          _BIT_ACCESS(INTCON3,3)
// INTCON3<INT1IF>
extern volatile __bit                   INT1IF              __at(0x7F80);	// @ (0xFF0 * 8 + 0)
#define                                 INT1IF_bit          _BIT_ACCESS(INTCON3,0)
// INTCON3<INT1IP>
extern volatile __bit                   INT1IP              __at(0x7F86);	// @ (0xFF0 * 8 + 6)
#define                                 INT1IP_bit          _BIT_ACCESS(INTCON3,6)
// INTCON3<INT1P>
extern volatile __bit                   INT1P               __at(0x7F86);	// @ (0xFF0 * 8 + 6)
#define                                 INT1P_bit           _BIT_ACCESS(INTCON3,6)
// RPINR26_27<INT1R0>
extern volatile __bit                   INT1R0              __at(0x71B8);	// @ (0xE37 * 8 + 0)
#define                                 INT1R0_bit          _BIT_ACCESS(RPINR26_27,0)
// RPINR26_27<INT1R1>
extern volatile __bit                   INT1R1              __at(0x71B9);	// @ (0xE37 * 8 + 1)
#define                                 INT1R1_bit          _BIT_ACCESS(RPINR26_27,1)
// RPINR26_27<INT1R2>
extern volatile __bit                   INT1R2              __at(0x71BA);	// @ (0xE37 * 8 + 2)
#define                                 INT1R2_bit          _BIT_ACCESS(RPINR26_27,2)
// RPINR26_27<INT1R3>
extern volatile __bit                   INT1R3              __at(0x71BB);	// @ (0xE37 * 8 + 3)
#define                                 INT1R3_bit          _BIT_ACCESS(RPINR26_27,3)
// INTCON3<INT2E>
extern volatile __bit                   INT2E               __at(0x7F84);	// @ (0xFF0 * 8 + 4)
#define                                 INT2E_bit           _BIT_ACCESS(INTCON3,4)
// INTCON3<INT2F>
extern volatile __bit                   INT2F               __at(0x7F81);	// @ (0xFF0 * 8 + 1)
#define                                 INT2F_bit           _BIT_ACCESS(INTCON3,1)
// INTCON3<INT2IE>
extern volatile __bit                   INT2IE              __at(0x7F84);	// @ (0xFF0 * 8 + 4)
#define                                 INT2IE_bit          _BIT_ACCESS(INTCON3,4)
// INTCON3<INT2IF>
extern volatile __bit                   INT2IF              __at(0x7F81);	// @ (0xFF0 * 8 + 1)
#define                                 INT2IF_bit          _BIT_ACCESS(INTCON3,1)
// INTCON3<INT2IP>
extern volatile __bit                   INT2IP              __at(0x7F87);	// @ (0xFF0 * 8 + 7)
#define                                 INT2IP_bit          _BIT_ACCESS(INTCON3,7)
// INTCON3<INT2P>
extern volatile __bit                   INT2P               __at(0x7F87);	// @ (0xFF0 * 8 + 7)
#define                                 INT2P_bit           _BIT_ACCESS(INTCON3,7)
// RPINR26_27<INT2R0>
extern volatile __bit                   INT2R0              __at(0x71BC);	// @ (0xE37 * 8 + 4)
#define                                 INT2R0_bit          _BIT_ACCESS(RPINR26_27,4)
// RPINR26_27<INT2R1>
extern volatile __bit                   INT2R1              __at(0x71BD);	// @ (0xE37 * 8 + 5)
#define                                 INT2R1_bit          _BIT_ACCESS(RPINR26_27,5)
// RPINR26_27<INT2R2>
extern volatile __bit                   INT2R2              __at(0x71BE);	// @ (0xE37 * 8 + 6)
#define                                 INT2R2_bit          _BIT_ACCESS(RPINR26_27,6)
// RPINR26_27<INT2R3>
extern volatile __bit                   INT2R3              __at(0x71BF);	// @ (0xE37 * 8 + 7)
#define                                 INT2R3_bit          _BIT_ACCESS(RPINR26_27,7)
// INTCON3<INT3E>
extern volatile __bit                   INT3E               __at(0x7F85);	// @ (0xFF0 * 8 + 5)
#define                                 INT3E_bit           _BIT_ACCESS(INTCON3,5)
// INTCON3<INT3F>
extern volatile __bit                   INT3F               __at(0x7F82);	// @ (0xFF0 * 8 + 2)
#define                                 INT3F_bit           _BIT_ACCESS(INTCON3,2)
// INTCON3<INT3IE>
extern volatile __bit                   INT3IE              __at(0x7F85);	// @ (0xFF0 * 8 + 5)
#define                                 INT3IE_bit          _BIT_ACCESS(INTCON3,5)
// INTCON3<INT3IF>
extern volatile __bit                   INT3IF              __at(0x7F82);	// @ (0xFF0 * 8 + 2)
#define                                 INT3IF_bit          _BIT_ACCESS(INTCON3,2)
// INTCON2<INT3IP>
extern volatile __bit                   INT3IP              __at(0x7F89);	// @ (0xFF1 * 8 + 1)
#define                                 INT3IP_bit          _BIT_ACCESS(INTCON2,1)
// INTCON2<INT3P>
extern volatile __bit                   INT3P               __at(0x7F89);	// @ (0xFF1 * 8 + 1)
#define                                 INT3P_bit           _BIT_ACCESS(INTCON2,1)
// RPINR28_29<INT3R0>
extern volatile __bit                   INT3R0              __at(0x71C0);	// @ (0xE38 * 8 + 0)
#define                                 INT3R0_bit          _BIT_ACCESS(RPINR28_29,0)
// RPINR28_29<INT3R1>
extern volatile __bit                   INT3R1              __at(0x71C1);	// @ (0xE38 * 8 + 1)
#define                                 INT3R1_bit          _BIT_ACCESS(RPINR28_29,1)
// RPINR28_29<INT3R2>
extern volatile __bit                   INT3R2              __at(0x71C2);	// @ (0xE38 * 8 + 2)
#define                                 INT3R2_bit          _BIT_ACCESS(RPINR28_29,2)
// RPINR28_29<INT3R3>
extern volatile __bit                   INT3R3              __at(0x71C3);	// @ (0xE38 * 8 + 3)
#define                                 INT3R3_bit          _BIT_ACCESS(RPINR28_29,3)
// INTCON2<INTEDG0>
extern volatile __bit                   INTEDG0             __at(0x7F8E);	// @ (0xFF1 * 8 + 6)
#define                                 INTEDG0_bit         _BIT_ACCESS(INTCON2,6)
// INTCON2<INTEDG1>
extern volatile __bit                   INTEDG1             __at(0x7F8D);	// @ (0xFF1 * 8 + 5)
#define                                 INTEDG1_bit         _BIT_ACCESS(INTCON2,5)
// INTCON2<INTEDG2>
extern volatile __bit                   INTEDG2             __at(0x7F8C);	// @ (0xFF1 * 8 + 4)
#define                                 INTEDG2_bit         _BIT_ACCESS(INTCON2,4)
// INTCON2<INTEDG3>
extern volatile __bit                   INTEDG3             __at(0x7F8B);	// @ (0xFF1 * 8 + 3)
#define                                 INTEDG3_bit         _BIT_ACCESS(INTCON2,3)
// DMACON2<INTLVL0>
extern volatile __bit                   INTLVL0             __at(0x7800);	// @ (0xF00 * 8 + 0)
#define                                 INTLVL0_bit         _BIT_ACCESS(DMACON2,0)
// DMACON2<INTLVL1>
extern volatile __bit                   INTLVL1             __at(0x7801);	// @ (0xF00 * 8 + 1)
#define                                 INTLVL1_bit         _BIT_ACCESS(DMACON2,1)
// DMACON2<INTLVL2>
extern volatile __bit                   INTLVL2             __at(0x7802);	// @ (0xF00 * 8 + 2)
#define                                 INTLVL2_bit         _BIT_ACCESS(DMACON2,2)
// DMACON2<INTLVL3>
extern volatile __bit                   INTLVL3             __at(0x7803);	// @ (0xF00 * 8 + 3)
#define                                 INTLVL3_bit         _BIT_ACCESS(DMACON2,3)
// RPINR18_19<IOC0R0>
extern volatile __bit                   IOC0R0              __at(0x7198);	// @ (0xE33 * 8 + 0)
#define                                 IOC0R0_bit          _BIT_ACCESS(RPINR18_19,0)
// RPINR18_19<IOC0R1>
extern volatile __bit                   IOC0R1              __at(0x7199);	// @ (0xE33 * 8 + 1)
#define                                 IOC0R1_bit          _BIT_ACCESS(RPINR18_19,1)
// RPINR18_19<IOC0R2>
extern volatile __bit                   IOC0R2              __at(0x719A);	// @ (0xE33 * 8 + 2)
#define                                 IOC0R2_bit          _BIT_ACCESS(RPINR18_19,2)
// RPINR18_19<IOC0R3>
extern volatile __bit                   IOC0R3              __at(0x719B);	// @ (0xE33 * 8 + 3)
#define                                 IOC0R3_bit          _BIT_ACCESS(RPINR18_19,3)
// RPINR18_19<IOC1R0>
extern volatile __bit                   IOC1R0              __at(0x719C);	// @ (0xE33 * 8 + 4)
#define                                 IOC1R0_bit          _BIT_ACCESS(RPINR18_19,4)
// RPINR18_19<IOC1R1>
extern volatile __bit                   IOC1R1              __at(0x719D);	// @ (0xE33 * 8 + 5)
#define                                 IOC1R1_bit          _BIT_ACCESS(RPINR18_19,5)
// RPINR18_19<IOC1R2>
extern volatile __bit                   IOC1R2              __at(0x719E);	// @ (0xE33 * 8 + 6)
#define                                 IOC1R2_bit          _BIT_ACCESS(RPINR18_19,6)
// RPINR18_19<IOC1R3>
extern volatile __bit                   IOC1R3              __at(0x719F);	// @ (0xE33 * 8 + 7)
#define                                 IOC1R3_bit          _BIT_ACCESS(RPINR18_19,7)
// RPINR20_21<IOC2R0>
extern volatile __bit                   IOC2R0              __at(0x71A0);	// @ (0xE34 * 8 + 0)
#define                                 IOC2R0_bit          _BIT_ACCESS(RPINR20_21,0)
// RPINR20_21<IOC2R1>
extern volatile __bit                   IOC2R1              __at(0x71A1);	// @ (0xE34 * 8 + 1)
#define                                 IOC2R1_bit          _BIT_ACCESS(RPINR20_21,1)
// RPINR20_21<IOC2R2>
extern volatile __bit                   IOC2R2              __at(0x71A2);	// @ (0xE34 * 8 + 2)
#define                                 IOC2R2_bit          _BIT_ACCESS(RPINR20_21,2)
// RPINR20_21<IOC2R3>
extern volatile __bit                   IOC2R3              __at(0x71A3);	// @ (0xE34 * 8 + 3)
#define                                 IOC2R3_bit          _BIT_ACCESS(RPINR20_21,3)
// RPINR20_21<IOC3R0>
extern volatile __bit                   IOC3R0              __at(0x71A4);	// @ (0xE34 * 8 + 4)
#define                                 IOC3R0_bit          _BIT_ACCESS(RPINR20_21,4)
// RPINR20_21<IOC3R1>
extern volatile __bit                   IOC3R1              __at(0x71A5);	// @ (0xE34 * 8 + 5)
#define                                 IOC3R1_bit          _BIT_ACCESS(RPINR20_21,5)
// RPINR20_21<IOC3R2>
extern volatile __bit                   IOC3R2              __at(0x71A6);	// @ (0xE34 * 8 + 6)
#define                                 IOC3R2_bit          _BIT_ACCESS(RPINR20_21,6)
// RPINR20_21<IOC3R3>
extern volatile __bit                   IOC3R3              __at(0x71A7);	// @ (0xE34 * 8 + 7)
#define                                 IOC3R3_bit          _BIT_ACCESS(RPINR20_21,7)
// RPINR22_23<IOC4R0>
extern volatile __bit                   IOC4R0              __at(0x71A8);	// @ (0xE35 * 8 + 0)
#define                                 IOC4R0_bit          _BIT_ACCESS(RPINR22_23,0)
// RPINR22_23<IOC4R1>
extern volatile __bit                   IOC4R1              __at(0x71A9);	// @ (0xE35 * 8 + 1)
#define                                 IOC4R1_bit          _BIT_ACCESS(RPINR22_23,1)
// RPINR22_23<IOC4R2>
extern volatile __bit                   IOC4R2              __at(0x71AA);	// @ (0xE35 * 8 + 2)
#define                                 IOC4R2_bit          _BIT_ACCESS(RPINR22_23,2)
// RPINR22_23<IOC4R3>
extern volatile __bit                   IOC4R3              __at(0x71AB);	// @ (0xE35 * 8 + 3)
#define                                 IOC4R3_bit          _BIT_ACCESS(RPINR22_23,3)
// RPINR22_23<IOC5R0>
extern volatile __bit                   IOC5R0              __at(0x71AC);	// @ (0xE35 * 8 + 4)
#define                                 IOC5R0_bit          _BIT_ACCESS(RPINR22_23,4)
// RPINR22_23<IOC5R1>
extern volatile __bit                   IOC5R1              __at(0x71AD);	// @ (0xE35 * 8 + 5)
#define                                 IOC5R1_bit          _BIT_ACCESS(RPINR22_23,5)
// RPINR22_23<IOC5R2>
extern volatile __bit                   IOC5R2              __at(0x71AE);	// @ (0xE35 * 8 + 6)
#define                                 IOC5R2_bit          _BIT_ACCESS(RPINR22_23,6)
// RPINR22_23<IOC5R3>
extern volatile __bit                   IOC5R3              __at(0x71AF);	// @ (0xE35 * 8 + 7)
#define                                 IOC5R3_bit          _BIT_ACCESS(RPINR22_23,7)
// RPINR24_25<IOC6R0>
extern volatile __bit                   IOC6R0              __at(0x71B0);	// @ (0xE36 * 8 + 0)
#define                                 IOC6R0_bit          _BIT_ACCESS(RPINR24_25,0)
// RPINR24_25<IOC6R1>
extern volatile __bit                   IOC6R1              __at(0x71B1);	// @ (0xE36 * 8 + 1)
#define                                 IOC6R1_bit          _BIT_ACCESS(RPINR24_25,1)
// RPINR24_25<IOC6R2>
extern volatile __bit                   IOC6R2              __at(0x71B2);	// @ (0xE36 * 8 + 2)
#define                                 IOC6R2_bit          _BIT_ACCESS(RPINR24_25,2)
// RPINR24_25<IOC6R3>
extern volatile __bit                   IOC6R3              __at(0x71B3);	// @ (0xE36 * 8 + 3)
#define                                 IOC6R3_bit          _BIT_ACCESS(RPINR24_25,3)
// RPINR24_25<IOC7R0>
extern volatile __bit                   IOC7R0              __at(0x71B4);	// @ (0xE36 * 8 + 4)
#define                                 IOC7R0_bit          _BIT_ACCESS(RPINR24_25,4)
// RPINR24_25<IOC7R1>
extern volatile __bit                   IOC7R1              __at(0x71B5);	// @ (0xE36 * 8 + 5)
#define                                 IOC7R1_bit          _BIT_ACCESS(RPINR24_25,5)
// RPINR24_25<IOC7R2>
extern volatile __bit                   IOC7R2              __at(0x71B6);	// @ (0xE36 * 8 + 6)
#define                                 IOC7R2_bit          _BIT_ACCESS(RPINR24_25,6)
// RPINR24_25<IOC7R3>
extern volatile __bit                   IOC7R3              __at(0x71B7);	// @ (0xE36 * 8 + 7)
#define                                 IOC7R3_bit          _BIT_ACCESS(RPINR24_25,7)
// IOCF<IOCF0>
extern volatile __bit                   IOCF0               __at(0x7E88);	// @ (0xFD1 * 8 + 0)
#define                                 IOCF0_bit           _BIT_ACCESS(IOCF,0)
// IOCF<IOCF1>
extern volatile __bit                   IOCF1               __at(0x7E89);	// @ (0xFD1 * 8 + 1)
#define                                 IOCF1_bit           _BIT_ACCESS(IOCF,1)
// IOCF<IOCF2>
extern volatile __bit                   IOCF2               __at(0x7E8A);	// @ (0xFD1 * 8 + 2)
#define                                 IOCF2_bit           _BIT_ACCESS(IOCF,2)
// IOCF<IOCF3>
extern volatile __bit                   IOCF3               __at(0x7E8B);	// @ (0xFD1 * 8 + 3)
#define                                 IOCF3_bit           _BIT_ACCESS(IOCF,3)
// IOCF<IOCF4>
extern volatile __bit                   IOCF4               __at(0x7E8C);	// @ (0xFD1 * 8 + 4)
#define                                 IOCF4_bit           _BIT_ACCESS(IOCF,4)
// IOCF<IOCF5>
extern volatile __bit                   IOCF5               __at(0x7E8D);	// @ (0xFD1 * 8 + 5)
#define                                 IOCF5_bit           _BIT_ACCESS(IOCF,5)
// IOCF<IOCF6>
extern volatile __bit                   IOCF6               __at(0x7E8E);	// @ (0xFD1 * 8 + 6)
#define                                 IOCF6_bit           _BIT_ACCESS(IOCF,6)
// IOCF<IOCF7>
extern volatile __bit                   IOCF7               __at(0x7E8F);	// @ (0xFD1 * 8 + 7)
#define                                 IOCF7_bit           _BIT_ACCESS(IOCF,7)
// INTCON<IOCIE>
extern volatile __bit                   IOCIE               __at(0x7F93);	// @ (0xFF2 * 8 + 3)
#define                                 IOCIE_bit           _BIT_ACCESS(INTCON,3)
// INTCON<IOCIF>
extern volatile __bit                   IOCIF               __at(0x7F90);	// @ (0xFF2 * 8 + 0)
#define                                 IOCIF_bit           _BIT_ACCESS(INTCON,0)
// INTCON2<IOCIP>
extern volatile __bit                   IOCIP               __at(0x7F88);	// @ (0xFF1 * 8 + 0)
#define                                 IOCIP_bit           _BIT_ACCESS(INTCON2,0)
// PMD4<IOCMD>
extern volatile __bit                   IOCMD               __at(0x7783);	// @ (0xEF0 * 8 + 3)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD4,3)
// IOCN<IOCN0>
extern volatile __bit                   IOCN0               __at(0x7AA8);	// @ (0xF55 * 8 + 0)
#define                                 IOCN0_bit           _BIT_ACCESS(IOCN,0)
// IOCN<IOCN1>
extern volatile __bit                   IOCN1               __at(0x7AA9);	// @ (0xF55 * 8 + 1)
#define                                 IOCN1_bit           _BIT_ACCESS(IOCN,1)
// IOCN<IOCN2>
extern volatile __bit                   IOCN2               __at(0x7AAA);	// @ (0xF55 * 8 + 2)
#define                                 IOCN2_bit           _BIT_ACCESS(IOCN,2)
// IOCN<IOCN3>
extern volatile __bit                   IOCN3               __at(0x7AAB);	// @ (0xF55 * 8 + 3)
#define                                 IOCN3_bit           _BIT_ACCESS(IOCN,3)
// IOCN<IOCN4>
extern volatile __bit                   IOCN4               __at(0x7AAC);	// @ (0xF55 * 8 + 4)
#define                                 IOCN4_bit           _BIT_ACCESS(IOCN,4)
// IOCN<IOCN5>
extern volatile __bit                   IOCN5               __at(0x7AAD);	// @ (0xF55 * 8 + 5)
#define                                 IOCN5_bit           _BIT_ACCESS(IOCN,5)
// IOCN<IOCN6>
extern volatile __bit                   IOCN6               __at(0x7AAE);	// @ (0xF55 * 8 + 6)
#define                                 IOCN6_bit           _BIT_ACCESS(IOCN,6)
// IOCN<IOCN7>
extern volatile __bit                   IOCN7               __at(0x7AAF);	// @ (0xF55 * 8 + 7)
#define                                 IOCN7_bit           _BIT_ACCESS(IOCN,7)
// IOCP<IOCP0>
extern volatile __bit                   IOCP0               __at(0x7AB0);	// @ (0xF56 * 8 + 0)
#define                                 IOCP0_bit           _BIT_ACCESS(IOCP,0)
// IOCP<IOCP1>
extern volatile __bit                   IOCP1               __at(0x7AB1);	// @ (0xF56 * 8 + 1)
#define                                 IOCP1_bit           _BIT_ACCESS(IOCP,1)
// IOCP<IOCP2>
extern volatile __bit                   IOCP2               __at(0x7AB2);	// @ (0xF56 * 8 + 2)
#define                                 IOCP2_bit           _BIT_ACCESS(IOCP,2)
// IOCP<IOCP3>
extern volatile __bit                   IOCP3               __at(0x7AB3);	// @ (0xF56 * 8 + 3)
#define                                 IOCP3_bit           _BIT_ACCESS(IOCP,3)
// IOCP<IOCP4>
extern volatile __bit                   IOCP4               __at(0x7AB4);	// @ (0xF56 * 8 + 4)
#define                                 IOCP4_bit           _BIT_ACCESS(IOCP,4)
// IOCP<IOCP5>
extern volatile __bit                   IOCP5               __at(0x7AB5);	// @ (0xF56 * 8 + 5)
#define                                 IOCP5_bit           _BIT_ACCESS(IOCP,5)
// IOCP<IOCP6>
extern volatile __bit                   IOCP6               __at(0x7AB6);	// @ (0xF56 * 8 + 6)
#define                                 IOCP6_bit           _BIT_ACCESS(IOCP,6)
// IOCP<IOCP7>
extern volatile __bit                   IOCP7               __at(0x7AB7);	// @ (0xF56 * 8 + 7)
#define                                 IOCP7_bit           _BIT_ACCESS(IOCP,7)
// OSCCON2<IOLOCK>
extern volatile __bit                   IOLOCK              __at(0x7B36);	// @ (0xF66 * 8 + 6)
#define                                 IOLOCK_bit          _BIT_ACCESS(OSCCON2,6)
// RCON<IPEN>
extern volatile __bit                   IPEN                __at(0x7E87);	// @ (0xFD0 * 8 + 7)
#define                                 IPEN_bit            _BIT_ACCESS(RCON,7)
// OSCCON3<IRCF0>
extern volatile __bit                   IRCF0               __at(0x7B28);	// @ (0xF65 * 8 + 0)
#define                                 IRCF0_bit           _BIT_ACCESS(OSCCON3,0)
// OSCCON3<IRCF1>
extern volatile __bit                   IRCF1               __at(0x7B29);	// @ (0xF65 * 8 + 1)
#define                                 IRCF1_bit           _BIT_ACCESS(OSCCON3,1)
// OSCCON3<IRCF2>
extern volatile __bit                   IRCF2               __at(0x7B2A);	// @ (0xF65 * 8 + 2)
#define                                 IRCF2_bit           _BIT_ACCESS(OSCCON3,2)
// CTMUCON2<IRNG0>
extern volatile __bit                   IRNG0               __at(0x77B8);	// @ (0xEF7 * 8 + 0)
#define                                 IRNG0_bit           _BIT_ACCESS(CTMUCON2,0)
// CTMUCON2<IRNG1>
extern volatile __bit                   IRNG1               __at(0x77B9);	// @ (0xEF7 * 8 + 1)
#define                                 IRNG1_bit           _BIT_ACCESS(CTMUCON2,1)
// HLVDCON<IRVST>
extern volatile __bit                   IRVST               __at(0x7D45);	// @ (0xFA8 * 8 + 5)
#define                                 IRVST_bit           _BIT_ACCESS(HLVDCON,5)
// CTMUCON2<ITRIM0>
extern volatile __bit                   ITRIM0              __at(0x77BA);	// @ (0xEF7 * 8 + 2)
#define                                 ITRIM0_bit          _BIT_ACCESS(CTMUCON2,2)
// CTMUCON2<ITRIM1>
extern volatile __bit                   ITRIM1              __at(0x77BB);	// @ (0xEF7 * 8 + 3)
#define                                 ITRIM1_bit          _BIT_ACCESS(CTMUCON2,3)
// CTMUCON2<ITRIM2>
extern volatile __bit                   ITRIM2              __at(0x77BC);	// @ (0xEF7 * 8 + 4)
#define                                 ITRIM2_bit          _BIT_ACCESS(CTMUCON2,4)
// CTMUCON2<ITRIM3>
extern volatile __bit                   ITRIM3              __at(0x77BD);	// @ (0xEF7 * 8 + 5)
#define                                 ITRIM3_bit          _BIT_ACCESS(CTMUCON2,5)
// CTMUCON2<ITRIM4>
extern volatile __bit                   ITRIM4              __at(0x77BE);	// @ (0xEF7 * 8 + 6)
#define                                 ITRIM4_bit          _BIT_ACCESS(CTMUCON2,6)
// CTMUCON2<ITRIM5>
extern volatile __bit                   ITRIM5              __at(0x77BF);	// @ (0xEF7 * 8 + 7)
#define                                 ITRIM5_bit          _BIT_ACCESS(CTMUCON2,7)
// LATA<LA0>
extern volatile __bit                   LA0                 __at(0x7C48);	// @ (0xF89 * 8 + 0)
#define                                 LA0_bit             _BIT_ACCESS(LATA,0)
// LATA<LA1>
extern volatile __bit                   LA1                 __at(0x7C49);	// @ (0xF89 * 8 + 1)
#define                                 LA1_bit             _BIT_ACCESS(LATA,1)
// LATA<LA2>
extern volatile __bit                   LA2                 __at(0x7C4A);	// @ (0xF89 * 8 + 2)
#define                                 LA2_bit             _BIT_ACCESS(LATA,2)
// LATA<LA3>
extern volatile __bit                   LA3                 __at(0x7C4B);	// @ (0xF89 * 8 + 3)
#define                                 LA3_bit             _BIT_ACCESS(LATA,3)
// LATA<LA4>
extern volatile __bit                   LA4                 __at(0x7C4C);	// @ (0xF89 * 8 + 4)
#define                                 LA4_bit             _BIT_ACCESS(LATA,4)
// LATA<LA5>
extern volatile __bit                   LA5                 __at(0x7C4D);	// @ (0xF89 * 8 + 5)
#define                                 LA5_bit             _BIT_ACCESS(LATA,5)
// LATA<LA6>
extern volatile __bit                   LA6                 __at(0x7C4E);	// @ (0xF89 * 8 + 6)
#define                                 LA6_bit             _BIT_ACCESS(LATA,6)
// LATA<LA7>
extern volatile __bit                   LA7                 __at(0x7C4F);	// @ (0xF89 * 8 + 7)
#define                                 LA7_bit             _BIT_ACCESS(LATA,7)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x7C48);	// @ (0xF89 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x7C49);	// @ (0xF89 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x7C4A);	// @ (0xF89 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0x7C4B);	// @ (0xF89 * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x7C4C);	// @ (0xF89 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x7C4D);	// @ (0xF89 * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0x7C4E);	// @ (0xF89 * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0x7C4F);	// @ (0xF89 * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0x7C50);	// @ (0xF8A * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0x7C51);	// @ (0xF8A * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0x7C52);	// @ (0xF8A * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0x7C53);	// @ (0xF8A * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0x7C54);	// @ (0xF8A * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0x7C55);	// @ (0xF8A * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0x7C56);	// @ (0xF8A * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0x7C57);	// @ (0xF8A * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x7C58);	// @ (0xF8B * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x7C59);	// @ (0xF8B * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0x7C5A);	// @ (0xF8B * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x7C5B);	// @ (0xF8B * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x7C5C);	// @ (0xF8B * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x7C5D);	// @ (0xF8B * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0x7C5E);	// @ (0xF8B * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0x7C5F);	// @ (0xF8B * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// LATD<LATD0>
extern volatile __bit                   LATD0               __at(0x7C60);	// @ (0xF8C * 8 + 0)
#define                                 LATD0_bit           _BIT_ACCESS(LATD,0)
// LATD<LATD1>
extern volatile __bit                   LATD1               __at(0x7C61);	// @ (0xF8C * 8 + 1)
#define                                 LATD1_bit           _BIT_ACCESS(LATD,1)
// LATD<LATD2>
extern volatile __bit                   LATD2               __at(0x7C62);	// @ (0xF8C * 8 + 2)
#define                                 LATD2_bit           _BIT_ACCESS(LATD,2)
// LATD<LATD3>
extern volatile __bit                   LATD3               __at(0x7C63);	// @ (0xF8C * 8 + 3)
#define                                 LATD3_bit           _BIT_ACCESS(LATD,3)
// LATD<LATD4>
extern volatile __bit                   LATD4               __at(0x7C64);	// @ (0xF8C * 8 + 4)
#define                                 LATD4_bit           _BIT_ACCESS(LATD,4)
// LATD<LATD5>
extern volatile __bit                   LATD5               __at(0x7C65);	// @ (0xF8C * 8 + 5)
#define                                 LATD5_bit           _BIT_ACCESS(LATD,5)
// LATD<LATD6>
extern volatile __bit                   LATD6               __at(0x7C66);	// @ (0xF8C * 8 + 6)
#define                                 LATD6_bit           _BIT_ACCESS(LATD,6)
// LATD<LATD7>
extern volatile __bit                   LATD7               __at(0x7C67);	// @ (0xF8C * 8 + 7)
#define                                 LATD7_bit           _BIT_ACCESS(LATD,7)
// LATE<LATE0>
extern volatile __bit                   LATE0               __at(0x7C68);	// @ (0xF8D * 8 + 0)
#define                                 LATE0_bit           _BIT_ACCESS(LATE,0)
// LATE<LATE1>
extern volatile __bit                   LATE1               __at(0x7C69);	// @ (0xF8D * 8 + 1)
#define                                 LATE1_bit           _BIT_ACCESS(LATE,1)
// LATE<LATE2>
extern volatile __bit                   LATE2               __at(0x7C6A);	// @ (0xF8D * 8 + 2)
#define                                 LATE2_bit           _BIT_ACCESS(LATE,2)
// LATE<LATE3>
extern volatile __bit                   LATE3               __at(0x7C6B);	// @ (0xF8D * 8 + 3)
#define                                 LATE3_bit           _BIT_ACCESS(LATE,3)
// LATE<LATE4>
extern volatile __bit                   LATE4               __at(0x7C6C);	// @ (0xF8D * 8 + 4)
#define                                 LATE4_bit           _BIT_ACCESS(LATE,4)
// LATE<LATE5>
extern volatile __bit                   LATE5               __at(0x7C6D);	// @ (0xF8D * 8 + 5)
#define                                 LATE5_bit           _BIT_ACCESS(LATE,5)
// LATE<LATE6>
extern volatile __bit                   LATE6               __at(0x7C6E);	// @ (0xF8D * 8 + 6)
#define                                 LATE6_bit           _BIT_ACCESS(LATE,6)
// LATE<LATE7>
extern volatile __bit                   LATE7               __at(0x7C6F);	// @ (0xF8D * 8 + 7)
#define                                 LATE7_bit           _BIT_ACCESS(LATE,7)
// LATF<LATF2>
extern volatile __bit                   LATF2               __at(0x7C72);	// @ (0xF8E * 8 + 2)
#define                                 LATF2_bit           _BIT_ACCESS(LATF,2)
// LATF<LATF3>
extern volatile __bit                   LATF3               __at(0x7C73);	// @ (0xF8E * 8 + 3)
#define                                 LATF3_bit           _BIT_ACCESS(LATF,3)
// LATF<LATF4>
extern volatile __bit                   LATF4               __at(0x7C74);	// @ (0xF8E * 8 + 4)
#define                                 LATF4_bit           _BIT_ACCESS(LATF,4)
// LATF<LATF5>
extern volatile __bit                   LATF5               __at(0x7C75);	// @ (0xF8E * 8 + 5)
#define                                 LATF5_bit           _BIT_ACCESS(LATF,5)
// LATF<LATF6>
extern volatile __bit                   LATF6               __at(0x7C76);	// @ (0xF8E * 8 + 6)
#define                                 LATF6_bit           _BIT_ACCESS(LATF,6)
// LATF<LATF7>
extern volatile __bit                   LATF7               __at(0x7C77);	// @ (0xF8E * 8 + 7)
#define                                 LATF7_bit           _BIT_ACCESS(LATF,7)
// LATG<LATG0>
extern volatile __bit                   LATG0               __at(0x7C78);	// @ (0xF8F * 8 + 0)
#define                                 LATG0_bit           _BIT_ACCESS(LATG,0)
// LATG<LATG1>
extern volatile __bit                   LATG1               __at(0x7C79);	// @ (0xF8F * 8 + 1)
#define                                 LATG1_bit           _BIT_ACCESS(LATG,1)
// LATG<LATG2>
extern volatile __bit                   LATG2               __at(0x7C7A);	// @ (0xF8F * 8 + 2)
#define                                 LATG2_bit           _BIT_ACCESS(LATG,2)
// LATG<LATG3>
extern volatile __bit                   LATG3               __at(0x7C7B);	// @ (0xF8F * 8 + 3)
#define                                 LATG3_bit           _BIT_ACCESS(LATG,3)
// LATG<LATG4>
extern volatile __bit                   LATG4               __at(0x7C7C);	// @ (0xF8F * 8 + 4)
#define                                 LATG4_bit           _BIT_ACCESS(LATG,4)
// LATH<LATH0>
extern volatile __bit                   LATH0               __at(0x7C80);	// @ (0xF90 * 8 + 0)
#define                                 LATH0_bit           _BIT_ACCESS(LATH,0)
// LATH<LATH1>
extern volatile __bit                   LATH1               __at(0x7C81);	// @ (0xF90 * 8 + 1)
#define                                 LATH1_bit           _BIT_ACCESS(LATH,1)
// LATH<LATH2>
extern volatile __bit                   LATH2               __at(0x7C82);	// @ (0xF90 * 8 + 2)
#define                                 LATH2_bit           _BIT_ACCESS(LATH,2)
// LATH<LATH3>
extern volatile __bit                   LATH3               __at(0x7C83);	// @ (0xF90 * 8 + 3)
#define                                 LATH3_bit           _BIT_ACCESS(LATH,3)
// LATH<LATH4>
extern volatile __bit                   LATH4               __at(0x7C84);	// @ (0xF90 * 8 + 4)
#define                                 LATH4_bit           _BIT_ACCESS(LATH,4)
// LATH<LATH5>
extern volatile __bit                   LATH5               __at(0x7C85);	// @ (0xF90 * 8 + 5)
#define                                 LATH5_bit           _BIT_ACCESS(LATH,5)
// LATH<LATH6>
extern volatile __bit                   LATH6               __at(0x7C86);	// @ (0xF90 * 8 + 6)
#define                                 LATH6_bit           _BIT_ACCESS(LATH,6)
// LATH<LATH7>
extern volatile __bit                   LATH7               __at(0x7C87);	// @ (0xF90 * 8 + 7)
#define                                 LATH7_bit           _BIT_ACCESS(LATH,7)
// LATJ<LATJ0>
extern volatile __bit                   LATJ0               __at(0x7C88);	// @ (0xF91 * 8 + 0)
#define                                 LATJ0_bit           _BIT_ACCESS(LATJ,0)
// LATJ<LATJ1>
extern volatile __bit                   LATJ1               __at(0x7C89);	// @ (0xF91 * 8 + 1)
#define                                 LATJ1_bit           _BIT_ACCESS(LATJ,1)
// LATJ<LATJ2>
extern volatile __bit                   LATJ2               __at(0x7C8A);	// @ (0xF91 * 8 + 2)
#define                                 LATJ2_bit           _BIT_ACCESS(LATJ,2)
// LATJ<LATJ3>
extern volatile __bit                   LATJ3               __at(0x7C8B);	// @ (0xF91 * 8 + 3)
#define                                 LATJ3_bit           _BIT_ACCESS(LATJ,3)
// LATJ<LATJ4>
extern volatile __bit                   LATJ4               __at(0x7C8C);	// @ (0xF91 * 8 + 4)
#define                                 LATJ4_bit           _BIT_ACCESS(LATJ,4)
// LATJ<LATJ5>
extern volatile __bit                   LATJ5               __at(0x7C8D);	// @ (0xF91 * 8 + 5)
#define                                 LATJ5_bit           _BIT_ACCESS(LATJ,5)
// LATJ<LATJ6>
extern volatile __bit                   LATJ6               __at(0x7C8E);	// @ (0xF91 * 8 + 6)
#define                                 LATJ6_bit           _BIT_ACCESS(LATJ,6)
// LATJ<LATJ7>
extern volatile __bit                   LATJ7               __at(0x7C8F);	// @ (0xF91 * 8 + 7)
#define                                 LATJ7_bit           _BIT_ACCESS(LATJ,7)
// LATVP<LATVP0>
extern volatile __bit                   LATVP0              __at(0x7B90);	// @ (0xF72 * 8 + 0)
#define                                 LATVP0_bit          _BIT_ACCESS(LATVP,0)
// LATVP<LATVP1>
extern volatile __bit                   LATVP1              __at(0x7B91);	// @ (0xF72 * 8 + 1)
#define                                 LATVP1_bit          _BIT_ACCESS(LATVP,1)
// LATVP<LATVP2>
extern volatile __bit                   LATVP2              __at(0x7B92);	// @ (0xF72 * 8 + 2)
#define                                 LATVP2_bit          _BIT_ACCESS(LATVP,2)
// LATVP<LATVP3>
extern volatile __bit                   LATVP3              __at(0x7B93);	// @ (0xF72 * 8 + 3)
#define                                 LATVP3_bit          _BIT_ACCESS(LATVP,3)
// LATVP<LATVP4>
extern volatile __bit                   LATVP4              __at(0x7B94);	// @ (0xF72 * 8 + 4)
#define                                 LATVP4_bit          _BIT_ACCESS(LATVP,4)
// LATVP<LATVP5>
extern volatile __bit                   LATVP5              __at(0x7B95);	// @ (0xF72 * 8 + 5)
#define                                 LATVP5_bit          _BIT_ACCESS(LATVP,5)
// LATVP<LATVP6>
extern volatile __bit                   LATVP6              __at(0x7B96);	// @ (0xF72 * 8 + 6)
#define                                 LATVP6_bit          _BIT_ACCESS(LATVP,6)
// LATVP<LATVP7>
extern volatile __bit                   LATVP7              __at(0x7B97);	// @ (0xF72 * 8 + 7)
#define                                 LATVP7_bit          _BIT_ACCESS(LATVP,7)
// LATB<LB0>
extern volatile __bit                   LB0                 __at(0x7C50);	// @ (0xF8A * 8 + 0)
#define                                 LB0_bit             _BIT_ACCESS(LATB,0)
// LATB<LB1>
extern volatile __bit                   LB1                 __at(0x7C51);	// @ (0xF8A * 8 + 1)
#define                                 LB1_bit             _BIT_ACCESS(LATB,1)
// LATB<LB2>
extern volatile __bit                   LB2                 __at(0x7C52);	// @ (0xF8A * 8 + 2)
#define                                 LB2_bit             _BIT_ACCESS(LATB,2)
// LATB<LB3>
extern volatile __bit                   LB3                 __at(0x7C53);	// @ (0xF8A * 8 + 3)
#define                                 LB3_bit             _BIT_ACCESS(LATB,3)
// LATB<LB4>
extern volatile __bit                   LB4                 __at(0x7C54);	// @ (0xF8A * 8 + 4)
#define                                 LB4_bit             _BIT_ACCESS(LATB,4)
// LATB<LB5>
extern volatile __bit                   LB5                 __at(0x7C55);	// @ (0xF8A * 8 + 5)
#define                                 LB5_bit             _BIT_ACCESS(LATB,5)
// LATB<LB6>
extern volatile __bit                   LB6                 __at(0x7C56);	// @ (0xF8A * 8 + 6)
#define                                 LB6_bit             _BIT_ACCESS(LATB,6)
// LATB<LB7>
extern volatile __bit                   LB7                 __at(0x7C57);	// @ (0xF8A * 8 + 7)
#define                                 LB7_bit             _BIT_ACCESS(LATB,7)
// LATC<LC0>
extern volatile __bit                   LC0                 __at(0x7C58);	// @ (0xF8B * 8 + 0)
#define                                 LC0_bit             _BIT_ACCESS(LATC,0)
// LATC<LC1>
extern volatile __bit                   LC1                 __at(0x7C59);	// @ (0xF8B * 8 + 1)
#define                                 LC1_bit             _BIT_ACCESS(LATC,1)
// LATC<LC2>
extern volatile __bit                   LC2                 __at(0x7C5A);	// @ (0xF8B * 8 + 2)
#define                                 LC2_bit             _BIT_ACCESS(LATC,2)
// LATC<LC3>
extern volatile __bit                   LC3                 __at(0x7C5B);	// @ (0xF8B * 8 + 3)
#define                                 LC3_bit             _BIT_ACCESS(LATC,3)
// LATC<LC4>
extern volatile __bit                   LC4                 __at(0x7C5C);	// @ (0xF8B * 8 + 4)
#define                                 LC4_bit             _BIT_ACCESS(LATC,4)
// LATC<LC5>
extern volatile __bit                   LC5                 __at(0x7C5D);	// @ (0xF8B * 8 + 5)
#define                                 LC5_bit             _BIT_ACCESS(LATC,5)
// LATC<LC6>
extern volatile __bit                   LC6                 __at(0x7C5E);	// @ (0xF8B * 8 + 6)
#define                                 LC6_bit             _BIT_ACCESS(LATC,6)
// LATC<LC7>
extern volatile __bit                   LC7                 __at(0x7C5F);	// @ (0xF8B * 8 + 7)
#define                                 LC7_bit             _BIT_ACCESS(LATC,7)
// LCDPS<LCDA>
extern volatile __bit                   LCDA                __at(0x76D5);	// @ (0xEDA * 8 + 5)
#define                                 LCDA_bit            _BIT_ACCESS(LCDPS,5)
// LCDREF<LCDCST0>
extern volatile __bit                   LCDCST0             __at(0x76BB);	// @ (0xED7 * 8 + 3)
#define                                 LCDCST0_bit         _BIT_ACCESS(LCDREF,3)
// LCDREF<LCDCST1>
extern volatile __bit                   LCDCST1             __at(0x76BC);	// @ (0xED7 * 8 + 4)
#define                                 LCDCST1_bit         _BIT_ACCESS(LCDREF,4)
// LCDREF<LCDCST2>
extern volatile __bit                   LCDCST2             __at(0x76BD);	// @ (0xED7 * 8 + 5)
#define                                 LCDCST2_bit         _BIT_ACCESS(LCDREF,5)
// LCDCON<LCDEN>
extern volatile __bit                   LCDEN               __at(0x76CF);	// @ (0xED9 * 8 + 7)
#define                                 LCDEN_bit           _BIT_ACCESS(LCDCON,7)
// PIE3<LCDIE>
extern volatile __bit                   LCDIE               __at(0x7D1E);	// @ (0xFA3 * 8 + 6)
#define                                 LCDIE_bit           _BIT_ACCESS(PIE3,6)
// PIR3<LCDIF>
extern volatile __bit                   LCDIF               __at(0x7D26);	// @ (0xFA4 * 8 + 6)
#define                                 LCDIF_bit           _BIT_ACCESS(PIR3,6)
// IPR3<LCDIP>
extern volatile __bit                   LCDIP               __at(0x7D2E);	// @ (0xFA5 * 8 + 6)
#define                                 LCDIP_bit           _BIT_ACCESS(IPR3,6)
// LCDREF<LCDIRE>
extern volatile __bit                   LCDIRE              __at(0x76BF);	// @ (0xED7 * 8 + 7)
#define                                 LCDIRE_bit          _BIT_ACCESS(LCDREF,7)
// PMD3<LCDMD>
extern volatile __bit                   LCDMD               __at(0x778B);	// @ (0xEF1 * 8 + 3)
#define                                 LCDMD_bit           _BIT_ACCESS(PMD3,3)
// LATD<LD0>
extern volatile __bit                   LD0                 __at(0x7C60);	// @ (0xF8C * 8 + 0)
#define                                 LD0_bit             _BIT_ACCESS(LATD,0)
// LATD<LD1>
extern volatile __bit                   LD1                 __at(0x7C61);	// @ (0xF8C * 8 + 1)
#define                                 LD1_bit             _BIT_ACCESS(LATD,1)
// LATD<LD2>
extern volatile __bit                   LD2                 __at(0x7C62);	// @ (0xF8C * 8 + 2)
#define                                 LD2_bit             _BIT_ACCESS(LATD,2)
// LATD<LD3>
extern volatile __bit                   LD3                 __at(0x7C63);	// @ (0xF8C * 8 + 3)
#define                                 LD3_bit             _BIT_ACCESS(LATD,3)
// LATD<LD4>
extern volatile __bit                   LD4                 __at(0x7C64);	// @ (0xF8C * 8 + 4)
#define                                 LD4_bit             _BIT_ACCESS(LATD,4)
// LATD<LD5>
extern volatile __bit                   LD5                 __at(0x7C65);	// @ (0xF8C * 8 + 5)
#define                                 LD5_bit             _BIT_ACCESS(LATD,5)
// LATD<LD6>
extern volatile __bit                   LD6                 __at(0x7C66);	// @ (0xF8C * 8 + 6)
#define                                 LD6_bit             _BIT_ACCESS(LATD,6)
// LATD<LD7>
extern volatile __bit                   LD7                 __at(0x7C67);	// @ (0xF8C * 8 + 7)
#define                                 LD7_bit             _BIT_ACCESS(LATD,7)
// LATE<LE0>
extern volatile __bit                   LE0                 __at(0x7C68);	// @ (0xF8D * 8 + 0)
#define                                 LE0_bit             _BIT_ACCESS(LATE,0)
// LATE<LE1>
extern volatile __bit                   LE1                 __at(0x7C69);	// @ (0xF8D * 8 + 1)
#define                                 LE1_bit             _BIT_ACCESS(LATE,1)
// LATE<LE2>
extern volatile __bit                   LE2                 __at(0x7C6A);	// @ (0xF8D * 8 + 2)
#define                                 LE2_bit             _BIT_ACCESS(LATE,2)
// LATE<LE3>
extern volatile __bit                   LE3                 __at(0x7C6B);	// @ (0xF8D * 8 + 3)
#define                                 LE3_bit             _BIT_ACCESS(LATE,3)
// LATE<LE4>
extern volatile __bit                   LE4                 __at(0x7C6C);	// @ (0xF8D * 8 + 4)
#define                                 LE4_bit             _BIT_ACCESS(LATE,4)
// LATE<LE5>
extern volatile __bit                   LE5                 __at(0x7C6D);	// @ (0xF8D * 8 + 5)
#define                                 LE5_bit             _BIT_ACCESS(LATE,5)
// LATE<LE6>
extern volatile __bit                   LE6                 __at(0x7C6E);	// @ (0xF8D * 8 + 6)
#define                                 LE6_bit             _BIT_ACCESS(LATE,6)
// LATE<LE7>
extern volatile __bit                   LE7                 __at(0x7C6F);	// @ (0xF8D * 8 + 7)
#define                                 LE7_bit             _BIT_ACCESS(LATE,7)
// LATF<LF2>
extern volatile __bit                   LF2                 __at(0x7C72);	// @ (0xF8E * 8 + 2)
#define                                 LF2_bit             _BIT_ACCESS(LATF,2)
// LATF<LF3>
extern volatile __bit                   LF3                 __at(0x7C73);	// @ (0xF8E * 8 + 3)
#define                                 LF3_bit             _BIT_ACCESS(LATF,3)
// LATF<LF4>
extern volatile __bit                   LF4                 __at(0x7C74);	// @ (0xF8E * 8 + 4)
#define                                 LF4_bit             _BIT_ACCESS(LATF,4)
// LATF<LF5>
extern volatile __bit                   LF5                 __at(0x7C75);	// @ (0xF8E * 8 + 5)
#define                                 LF5_bit             _BIT_ACCESS(LATF,5)
// LATF<LF6>
extern volatile __bit                   LF6                 __at(0x7C76);	// @ (0xF8E * 8 + 6)
#define                                 LF6_bit             _BIT_ACCESS(LATF,6)
// LATF<LF7>
extern volatile __bit                   LF7                 __at(0x7C77);	// @ (0xF8E * 8 + 7)
#define                                 LF7_bit             _BIT_ACCESS(LATF,7)
// LATG<LG0>
extern volatile __bit                   LG0                 __at(0x7C78);	// @ (0xF8F * 8 + 0)
#define                                 LG0_bit             _BIT_ACCESS(LATG,0)
// LATG<LG1>
extern volatile __bit                   LG1                 __at(0x7C79);	// @ (0xF8F * 8 + 1)
#define                                 LG1_bit             _BIT_ACCESS(LATG,1)
// LATG<LG2>
extern volatile __bit                   LG2                 __at(0x7C7A);	// @ (0xF8F * 8 + 2)
#define                                 LG2_bit             _BIT_ACCESS(LATG,2)
// LATG<LG3>
extern volatile __bit                   LG3                 __at(0x7C7B);	// @ (0xF8F * 8 + 3)
#define                                 LG3_bit             _BIT_ACCESS(LATG,3)
// LATG<LG4>
extern volatile __bit                   LG4                 __at(0x7C7C);	// @ (0xF8F * 8 + 4)
#define                                 LG4_bit             _BIT_ACCESS(LATG,4)
// LATH<LH0>
extern volatile __bit                   LH0                 __at(0x7C80);	// @ (0xF90 * 8 + 0)
#define                                 LH0_bit             _BIT_ACCESS(LATH,0)
// LATH<LH1>
extern volatile __bit                   LH1                 __at(0x7C81);	// @ (0xF90 * 8 + 1)
#define                                 LH1_bit             _BIT_ACCESS(LATH,1)
// LATH<LH2>
extern volatile __bit                   LH2                 __at(0x7C82);	// @ (0xF90 * 8 + 2)
#define                                 LH2_bit             _BIT_ACCESS(LATH,2)
// LATH<LH3>
extern volatile __bit                   LH3                 __at(0x7C83);	// @ (0xF90 * 8 + 3)
#define                                 LH3_bit             _BIT_ACCESS(LATH,3)
// LATH<LH4>
extern volatile __bit                   LH4                 __at(0x7C84);	// @ (0xF90 * 8 + 4)
#define                                 LH4_bit             _BIT_ACCESS(LATH,4)
// LATH<LH5>
extern volatile __bit                   LH5                 __at(0x7C85);	// @ (0xF90 * 8 + 5)
#define                                 LH5_bit             _BIT_ACCESS(LATH,5)
// LATH<LH6>
extern volatile __bit                   LH6                 __at(0x7C86);	// @ (0xF90 * 8 + 6)
#define                                 LH6_bit             _BIT_ACCESS(LATH,6)
// LATH<LH7>
extern volatile __bit                   LH7                 __at(0x7C87);	// @ (0xF90 * 8 + 7)
#define                                 LH7_bit             _BIT_ACCESS(LATH,7)
// LATJ<LJ0>
extern volatile __bit                   LJ0                 __at(0x7C88);	// @ (0xF91 * 8 + 0)
#define                                 LJ0_bit             _BIT_ACCESS(LATJ,0)
// LATJ<LJ1>
extern volatile __bit                   LJ1                 __at(0x7C89);	// @ (0xF91 * 8 + 1)
#define                                 LJ1_bit             _BIT_ACCESS(LATJ,1)
// LATJ<LJ2>
extern volatile __bit                   LJ2                 __at(0x7C8A);	// @ (0xF91 * 8 + 2)
#define                                 LJ2_bit             _BIT_ACCESS(LATJ,2)
// LATJ<LJ3>
extern volatile __bit                   LJ3                 __at(0x7C8B);	// @ (0xF91 * 8 + 3)
#define                                 LJ3_bit             _BIT_ACCESS(LATJ,3)
// LATJ<LJ4>
extern volatile __bit                   LJ4                 __at(0x7C8C);	// @ (0xF91 * 8 + 4)
#define                                 LJ4_bit             _BIT_ACCESS(LATJ,4)
// LATJ<LJ5>
extern volatile __bit                   LJ5                 __at(0x7C8D);	// @ (0xF91 * 8 + 5)
#define                                 LJ5_bit             _BIT_ACCESS(LATJ,5)
// LATJ<LJ6>
extern volatile __bit                   LJ6                 __at(0x7C8E);	// @ (0xF91 * 8 + 6)
#define                                 LJ6_bit             _BIT_ACCESS(LATJ,6)
// LATJ<LJ7>
extern volatile __bit                   LJ7                 __at(0x7C8F);	// @ (0xF91 * 8 + 7)
#define                                 LJ7_bit             _BIT_ACCESS(LATJ,7)
// LCDCON<LMUX0>
extern volatile __bit                   LMUX0               __at(0x76C8);	// @ (0xED9 * 8 + 0)
#define                                 LMUX0_bit           _BIT_ACCESS(LCDCON,0)
// LCDCON<LMUX1>
extern volatile __bit                   LMUX1               __at(0x76C9);	// @ (0xED9 * 8 + 1)
#define                                 LMUX1_bit           _BIT_ACCESS(LCDCON,1)
// LCDCON<LMUX2>
extern volatile __bit                   LMUX2               __at(0x76CA);	// @ (0xED9 * 8 + 2)
#define                                 LMUX2_bit           _BIT_ACCESS(LCDCON,2)
// OSCCON2<LOCK>
extern volatile __bit                   LOCK                __at(0x7B35);	// @ (0xF66 * 8 + 5)
#define                                 LOCK_bit            _BIT_ACCESS(OSCCON2,5)
// LCDPS<LP0>
extern volatile __bit                   LP0                 __at(0x76D0);	// @ (0xEDA * 8 + 0)
#define                                 LP0_bit             _BIT_ACCESS(LCDPS,0)
// LCDPS<LP1>
extern volatile __bit                   LP1                 __at(0x76D1);	// @ (0xEDA * 8 + 1)
#define                                 LP1_bit             _BIT_ACCESS(LCDPS,1)
// LCDPS<LP2>
extern volatile __bit                   LP2                 __at(0x76D2);	// @ (0xEDA * 8 + 2)
#define                                 LP2_bit             _BIT_ACCESS(LCDPS,2)
// LCDPS<LP3>
extern volatile __bit                   LP3                 __at(0x76D3);	// @ (0xEDA * 8 + 3)
#define                                 LP3_bit             _BIT_ACCESS(LCDPS,3)
// ADCON5H<LPENA>
extern volatile __bit                   LPENA               __at(0x744E);	// @ (0xE89 * 8 + 6)
#define                                 LPENA_bit           _BIT_ACCESS(ADCON5H,6)
// LCDRL<LRLAP0>
extern volatile __bit                   LRLAP0              __at(0x76B6);	// @ (0xED6 * 8 + 6)
#define                                 LRLAP0_bit          _BIT_ACCESS(LCDRL,6)
// LCDRL<LRLAP1>
extern volatile __bit                   LRLAP1              __at(0x76B7);	// @ (0xED6 * 8 + 7)
#define                                 LRLAP1_bit          _BIT_ACCESS(LCDRL,7)
// LCDRL<LRLAT0>
extern volatile __bit                   LRLAT0              __at(0x76B0);	// @ (0xED6 * 8 + 0)
#define                                 LRLAT0_bit          _BIT_ACCESS(LCDRL,0)
// LCDRL<LRLAT1>
extern volatile __bit                   LRLAT1              __at(0x76B1);	// @ (0xED6 * 8 + 1)
#define                                 LRLAT1_bit          _BIT_ACCESS(LCDRL,1)
// LCDRL<LRLAT2>
extern volatile __bit                   LRLAT2              __at(0x76B2);	// @ (0xED6 * 8 + 2)
#define                                 LRLAT2_bit          _BIT_ACCESS(LCDRL,2)
// LCDRL<LRLBP0>
extern volatile __bit                   LRLBP0              __at(0x76B4);	// @ (0xED6 * 8 + 4)
#define                                 LRLBP0_bit          _BIT_ACCESS(LCDRL,4)
// LCDRL<LRLBP1>
extern volatile __bit                   LRLBP1              __at(0x76B5);	// @ (0xED6 * 8 + 5)
#define                                 LRLBP1_bit          _BIT_ACCESS(LCDRL,5)
// PIR2<LVDIF>
extern volatile __bit                   LVDIF               __at(0x7D0A);	// @ (0xFA1 * 8 + 2)
#define                                 LVDIF_bit           _BIT_ACCESS(PIR2,2)
// PORTA<LVDIN>
extern volatile __bit                   LVDIN               __at(0x7C05);	// @ (0xF80 * 8 + 5)
#define                                 LVDIN_bit           _BIT_ACCESS(PORTA,5)
// PMD4<LVDMD>
extern volatile __bit                   LVDMD               __at(0x7782);	// @ (0xEF0 * 8 + 2)
#define                                 LVDMD_bit           _BIT_ACCESS(PMD4,2)
// MDCON<MDBIT>
extern volatile __bit                   MDBIT               __at(0x7778);	// @ (0xEEF * 8 + 0)
#define                                 MDBIT_bit           _BIT_ACCESS(MDCON,0)
// MDCARH<MDCH0>
extern volatile __bit                   MDCH0               __at(0x7768);	// @ (0xEED * 8 + 0)
#define                                 MDCH0_bit           _BIT_ACCESS(MDCARH,0)
// MDCARH<MDCH1>
extern volatile __bit                   MDCH1               __at(0x7769);	// @ (0xEED * 8 + 1)
#define                                 MDCH1_bit           _BIT_ACCESS(MDCARH,1)
// MDCARH<MDCH2>
extern volatile __bit                   MDCH2               __at(0x776A);	// @ (0xEED * 8 + 2)
#define                                 MDCH2_bit           _BIT_ACCESS(MDCARH,2)
// MDCARH<MDCH3>
extern volatile __bit                   MDCH3               __at(0x776B);	// @ (0xEED * 8 + 3)
#define                                 MDCH3_bit           _BIT_ACCESS(MDCARH,3)
// MDCARH<MDCHODIS>
extern volatile __bit                   MDCHODIS            __at(0x776F);	// @ (0xEED * 8 + 7)
#define                                 MDCHODIS_bit        _BIT_ACCESS(MDCARH,7)
// MDCARH<MDCHPOL>
extern volatile __bit                   MDCHPOL             __at(0x776E);	// @ (0xEED * 8 + 6)
#define                                 MDCHPOL_bit         _BIT_ACCESS(MDCARH,6)
// MDCARH<MDCHSYNC>
extern volatile __bit                   MDCHSYNC            __at(0x776D);	// @ (0xEED * 8 + 5)
#define                                 MDCHSYNC_bit        _BIT_ACCESS(MDCARH,5)
// RPINR30_31<MDCIN1R0>
extern volatile __bit                   MDCIN1R0            __at(0x71C8);	// @ (0xE39 * 8 + 0)
#define                                 MDCIN1R0_bit        _BIT_ACCESS(RPINR30_31,0)
// RPINR30_31<MDCIN1R1>
extern volatile __bit                   MDCIN1R1            __at(0x71C9);	// @ (0xE39 * 8 + 1)
#define                                 MDCIN1R1_bit        _BIT_ACCESS(RPINR30_31,1)
// RPINR30_31<MDCIN1R2>
extern volatile __bit                   MDCIN1R2            __at(0x71CA);	// @ (0xE39 * 8 + 2)
#define                                 MDCIN1R2_bit        _BIT_ACCESS(RPINR30_31,2)
// RPINR30_31<MDCIN1R3>
extern volatile __bit                   MDCIN1R3            __at(0x71CB);	// @ (0xE39 * 8 + 3)
#define                                 MDCIN1R3_bit        _BIT_ACCESS(RPINR30_31,3)
// RPINR30_31<MDCIN2R0>
extern volatile __bit                   MDCIN2R0            __at(0x71CC);	// @ (0xE39 * 8 + 4)
#define                                 MDCIN2R0_bit        _BIT_ACCESS(RPINR30_31,4)
// RPINR30_31<MDCIN2R1>
extern volatile __bit                   MDCIN2R1            __at(0x71CD);	// @ (0xE39 * 8 + 5)
#define                                 MDCIN2R1_bit        _BIT_ACCESS(RPINR30_31,5)
// RPINR30_31<MDCIN2R2>
extern volatile __bit                   MDCIN2R2            __at(0x71CE);	// @ (0xE39 * 8 + 6)
#define                                 MDCIN2R2_bit        _BIT_ACCESS(RPINR30_31,6)
// RPINR30_31<MDCIN2R3>
extern volatile __bit                   MDCIN2R3            __at(0x71CF);	// @ (0xE39 * 8 + 7)
#define                                 MDCIN2R3_bit        _BIT_ACCESS(RPINR30_31,7)
// MDCARL<MDCL0>
extern volatile __bit                   MDCL0               __at(0x7760);	// @ (0xEEC * 8 + 0)
#define                                 MDCL0_bit           _BIT_ACCESS(MDCARL,0)
// MDCARL<MDCL1>
extern volatile __bit                   MDCL1               __at(0x7761);	// @ (0xEEC * 8 + 1)
#define                                 MDCL1_bit           _BIT_ACCESS(MDCARL,1)
// MDCARL<MDCL2>
extern volatile __bit                   MDCL2               __at(0x7762);	// @ (0xEEC * 8 + 2)
#define                                 MDCL2_bit           _BIT_ACCESS(MDCARL,2)
// MDCARL<MDCL3>
extern volatile __bit                   MDCL3               __at(0x7763);	// @ (0xEEC * 8 + 3)
#define                                 MDCL3_bit           _BIT_ACCESS(MDCARL,3)
// MDCARL<MDCLODIS>
extern volatile __bit                   MDCLODIS            __at(0x7767);	// @ (0xEEC * 8 + 7)
#define                                 MDCLODIS_bit        _BIT_ACCESS(MDCARL,7)
// MDCARL<MDCLPOL>
extern volatile __bit                   MDCLPOL             __at(0x7766);	// @ (0xEEC * 8 + 6)
#define                                 MDCLPOL_bit         _BIT_ACCESS(MDCARL,6)
// MDCARL<MDCLSYNC>
extern volatile __bit                   MDCLSYNC            __at(0x7765);	// @ (0xEEC * 8 + 5)
#define                                 MDCLSYNC_bit        _BIT_ACCESS(MDCARL,5)
// MDCON<MDEN>
extern volatile __bit                   MDEN                __at(0x777F);	// @ (0xEEF * 8 + 7)
#define                                 MDEN_bit            _BIT_ACCESS(MDCON,7)
// RPINR28_29<MDMINR0>
extern volatile __bit                   MDMINR0             __at(0x71C4);	// @ (0xE38 * 8 + 4)
#define                                 MDMINR0_bit         _BIT_ACCESS(RPINR28_29,4)
// RPINR28_29<MDMINR1>
extern volatile __bit                   MDMINR1             __at(0x71C5);	// @ (0xE38 * 8 + 5)
#define                                 MDMINR1_bit         _BIT_ACCESS(RPINR28_29,5)
// RPINR28_29<MDMINR2>
extern volatile __bit                   MDMINR2             __at(0x71C6);	// @ (0xE38 * 8 + 6)
#define                                 MDMINR2_bit         _BIT_ACCESS(RPINR28_29,6)
// RPINR28_29<MDMINR3>
extern volatile __bit                   MDMINR3             __at(0x71C7);	// @ (0xE38 * 8 + 7)
#define                                 MDMINR3_bit         _BIT_ACCESS(RPINR28_29,7)
// MDCON<MDO>
extern volatile __bit                   MDO                 __at(0x777B);	// @ (0xEEF * 8 + 3)
#define                                 MDO_bit             _BIT_ACCESS(MDCON,3)
// MDCON<MDOE>
extern volatile __bit                   MDOE                __at(0x777E);	// @ (0xEEF * 8 + 6)
#define                                 MDOE_bit            _BIT_ACCESS(MDCON,6)
// MDCON<MDOPOL>
extern volatile __bit                   MDOPOL              __at(0x777C);	// @ (0xEEF * 8 + 4)
#define                                 MDOPOL_bit          _BIT_ACCESS(MDCON,4)
// MDCON<MDSLR>
extern volatile __bit                   MDSLR               __at(0x777D);	// @ (0xEEF * 8 + 5)
#define                                 MDSLR_bit           _BIT_ACCESS(MDCON,5)
// MDSRC<MDSODIS>
extern volatile __bit                   MDSODIS             __at(0x7777);	// @ (0xEEE * 8 + 7)
#define                                 MDSODIS_bit         _BIT_ACCESS(MDSRC,7)
// MDSRC<MDSRC0>
extern volatile __bit                   MDSRC0              __at(0x7770);	// @ (0xEEE * 8 + 0)
#define                                 MDSRC0_bit          _BIT_ACCESS(MDSRC,0)
// MDSRC<MDSRC1>
extern volatile __bit                   MDSRC1              __at(0x7771);	// @ (0xEEE * 8 + 1)
#define                                 MDSRC1_bit          _BIT_ACCESS(MDSRC,1)
// MDSRC<MDSRC2>
extern volatile __bit                   MDSRC2              __at(0x7772);	// @ (0xEEE * 8 + 2)
#define                                 MDSRC2_bit          _BIT_ACCESS(MDSRC,2)
// MDSRC<MDSRC3>
extern volatile __bit                   MDSRC3              __at(0x7773);	// @ (0xEEE * 8 + 3)
#define                                 MDSRC3_bit          _BIT_ACCESS(MDSRC,3)
// ADCON1H<MODE12>
extern volatile __bit                   MODE12              __at(0x7E0A);	// @ (0xFC1 * 8 + 2)
#define                                 MODE12_bit          _BIT_ACCESS(ADCON1H,2)
// LCDREG<MODE13>
extern volatile __bit                   MODE13              __at(0x76C2);	// @ (0xED8 * 8 + 2)
#define                                 MODE13_bit          _BIT_ACCESS(LCDREG,2)
// PMD3<MODMD>
extern volatile __bit                   MODMD               __at(0x778F);	// @ (0xEF1 * 8 + 7)
#define                                 MODMD_bit           _BIT_ACCESS(PMD3,7)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0x7E40);	// @ (0xFC8 * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP2ADD<MSK02>
extern volatile __bit                   MSK02               __at(0x7810);	// @ (0xF02 * 8 + 0)
#define                                 MSK02_bit           _BIT_ACCESS(SSP2ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0x7E41);	// @ (0xFC8 * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP2ADD<MSK12>
extern volatile __bit                   MSK12               __at(0x7811);	// @ (0xF02 * 8 + 1)
#define                                 MSK12_bit           _BIT_ACCESS(SSP2ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0x7E42);	// @ (0xFC8 * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP2ADD<MSK22>
extern volatile __bit                   MSK22               __at(0x7812);	// @ (0xF02 * 8 + 2)
#define                                 MSK22_bit           _BIT_ACCESS(SSP2ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0x7E43);	// @ (0xFC8 * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP2ADD<MSK32>
extern volatile __bit                   MSK32               __at(0x7813);	// @ (0xF02 * 8 + 3)
#define                                 MSK32_bit           _BIT_ACCESS(SSP2ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0x7E44);	// @ (0xFC8 * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP2ADD<MSK42>
extern volatile __bit                   MSK42               __at(0x7814);	// @ (0xF02 * 8 + 4)
#define                                 MSK42_bit           _BIT_ACCESS(SSP2ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0x7E45);	// @ (0xFC8 * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP2ADD<MSK52>
extern volatile __bit                   MSK52               __at(0x7815);	// @ (0xF02 * 8 + 5)
#define                                 MSK52_bit           _BIT_ACCESS(SSP2ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0x7E46);	// @ (0xFC8 * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP2ADD<MSK62>
extern volatile __bit                   MSK62               __at(0x7816);	// @ (0xF02 * 8 + 6)
#define                                 MSK62_bit           _BIT_ACCESS(SSP2ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0x7E47);	// @ (0xFC8 * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// SSP2ADD<MSK72>
extern volatile __bit                   MSK72               __at(0x7817);	// @ (0xF02 * 8 + 7)
#define                                 MSK72_bit           _BIT_ACCESS(SSP2ADD,7)
// STATUS<NEGATIVE>
extern volatile __bit                   NEGATIVE            __at(0x7EC4);	// @ (0xFD8 * 8 + 4)
#define                                 NEGATIVE_bit        _BIT_ACCESS(STATUS,4)
// OSCCON<NOSC0>
extern volatile __bit                   NOSC0               __at(0x7E98);	// @ (0xFD3 * 8 + 0)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON,0)
// OSCCON<NOSC1>
extern volatile __bit                   NOSC1               __at(0x7E99);	// @ (0xFD3 * 8 + 1)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON,1)
// OSCCON<NOSC2>
extern volatile __bit                   NOSC2               __at(0x7E9A);	// @ (0xFD3 * 8 + 2)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON,2)
// SSP1STAT<NOT_ADDRESS1>
extern volatile __bit                   NOT_ADDRESS1        __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 NOT_ADDRESS1_bit    _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<NOT_ADDRESS2>
extern volatile __bit                   NOT_ADDRESS2        __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 NOT_ADDRESS2_bit    _BIT_ACCESS(SSP2STAT,5)
// RCON<NOT_BOR>
extern volatile __bit                   NOT_BOR             __at(0x7E80);	// @ (0xFD0 * 8 + 0)
#define                                 NOT_BOR_bit         _BIT_ACCESS(RCON,0)
// RCON<NOT_CM>
extern volatile __bit                   NOT_CM              __at(0x7E85);	// @ (0xFD0 * 8 + 5)
#define                                 NOT_CM_bit          _BIT_ACCESS(RCON,5)
// RCON<NOT_PD>
extern volatile __bit                   NOT_PD              __at(0x7E82);	// @ (0xFD0 * 8 + 2)
#define                                 NOT_PD_bit          _BIT_ACCESS(RCON,2)
// RCON<NOT_POR>
extern volatile __bit                   NOT_POR             __at(0x7E81);	// @ (0xFD0 * 8 + 1)
#define                                 NOT_POR_bit         _BIT_ACCESS(RCON,1)
// INTCON2<NOT_RBPU>
extern volatile __bit                   NOT_RBPU            __at(0x7F8F);	// @ (0xFF1 * 8 + 7)
#define                                 NOT_RBPU_bit        _BIT_ACCESS(INTCON2,7)
// RCON<NOT_RI>
extern volatile __bit                   NOT_RI              __at(0x7E84);	// @ (0xFD0 * 8 + 4)
#define                                 NOT_RI_bit          _BIT_ACCESS(RCON,4)
// T1GCON<NOT_T1DONE>
extern volatile __bit                   NOT_T1DONE          __at(0x7D53);	// @ (0xFAA * 8 + 3)
#define                                 NOT_T1DONE_bit      _BIT_ACCESS(T1GCON,3)
// T1CON<NOT_T1SYNC>
extern volatile __bit                   NOT_T1SYNC          __at(0x7E6A);	// @ (0xFCD * 8 + 2)
#define                                 NOT_T1SYNC_bit      _BIT_ACCESS(T1CON,2)
// T3GCON<NOT_T3DONE>
extern volatile __bit                   NOT_T3DONE          __at(0x7D83);	// @ (0xFB0 * 8 + 3)
#define                                 NOT_T3DONE_bit      _BIT_ACCESS(T3GCON,3)
// T3CON<NOT_T3SYNC>
extern volatile __bit                   NOT_T3SYNC          __at(0x7D8A);	// @ (0xFB1 * 8 + 2)
#define                                 NOT_T3SYNC_bit      _BIT_ACCESS(T3CON,2)
// T5GCON<NOT_T5DONE>
extern volatile __bit                   NOT_T5DONE          __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 NOT_T5DONE_bit      _BIT_ACCESS(T5GCON,3)
// T5CON<NOT_T5SYNC>
extern volatile __bit                   NOT_T5SYNC          __at(0x78A2);	// @ (0xF14 * 8 + 2)
#define                                 NOT_T5SYNC_bit      _BIT_ACCESS(T5CON,2)
// RCON<NOT_TO>
extern volatile __bit                   NOT_TO              __at(0x7E83);	// @ (0xFD0 * 8 + 3)
#define                                 NOT_TO_bit          _BIT_ACCESS(RCON,3)
// SSP1STAT<NOT_WRITE1>
extern volatile __bit                   NOT_WRITE1          __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 NOT_WRITE1_bit      _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<NOT_WRITE2>
extern volatile __bit                   NOT_WRITE2          __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 NOT_WRITE2_bit      _BIT_ACCESS(SSP2STAT,2)
// ADCON2H<NVCFG0>
extern volatile __bit                   NVCFG0              __at(0x746D);	// @ (0xE8D * 8 + 5)
#define                                 NVCFG0_bit          _BIT_ACCESS(ADCON2H,5)
// PSPCON<OBF>
extern volatile __bit                   OBF                 __at(0x7D3E);	// @ (0xFA7 * 8 + 6)
#define                                 OBF_bit             _BIT_ACCESS(PSPCON,6)
// ADCON2H<OFFCAL>
extern volatile __bit                   OFFCAL              __at(0x746C);	// @ (0xE8D * 8 + 4)
#define                                 OFFCAL_bit          _BIT_ACCESS(ADCON2H,4)
// PIE2<OSCFIE>
extern volatile __bit                   OSCFIE              __at(0x7D07);	// @ (0xFA0 * 8 + 7)
#define                                 OSCFIE_bit          _BIT_ACCESS(PIE2,7)
// PIR2<OSCFIF>
extern volatile __bit                   OSCFIF              __at(0x7D0F);	// @ (0xFA1 * 8 + 7)
#define                                 OSCFIF_bit          _BIT_ACCESS(PIR2,7)
// IPR2<OSCFIP>
extern volatile __bit                   OSCFIP              __at(0x7D17);	// @ (0xFA2 * 8 + 7)
#define                                 OSCFIP_bit          _BIT_ACCESS(IPR2,7)
// STATUS<OV>
extern volatile __bit                   OV                  __at(0x7EC3);	// @ (0xFD8 * 8 + 3)
#define                                 OV_bit              _BIT_ACCESS(STATUS,3)
// STATUS<OVERFLOW>
extern volatile __bit                   OVERFLOW            __at(0x7EC3);	// @ (0xFD8 * 8 + 3)
#define                                 OVERFLOW_bit        _BIT_ACCESS(STATUS,3)
// ECCP1DEL<P1DC0>
extern volatile __bit                   P1DC0               __at(0x7DE0);	// @ (0xFBC * 8 + 0)
#define                                 P1DC0_bit           _BIT_ACCESS(ECCP1DEL,0)
// PSTR1CON<P1DC02>
extern volatile __bit                   P1DC02              __at(0x7CE0);	// @ (0xF9C * 8 + 0)
#define                                 P1DC02_bit          _BIT_ACCESS(PSTR1CON,0)
// PSTR1CON<P1DC0CON>
extern volatile __bit                   P1DC0CON            __at(0x7CE0);	// @ (0xF9C * 8 + 0)
#define                                 P1DC0CON_bit        _BIT_ACCESS(PSTR1CON,0)
// ECCP1DEL<P1DC1>
extern volatile __bit                   P1DC1               __at(0x7DE1);	// @ (0xFBC * 8 + 1)
#define                                 P1DC1_bit           _BIT_ACCESS(ECCP1DEL,1)
// PSTR1CON<P1DC12>
extern volatile __bit                   P1DC12              __at(0x7CE1);	// @ (0xF9C * 8 + 1)
#define                                 P1DC12_bit          _BIT_ACCESS(PSTR1CON,1)
// PSTR1CON<P1DC1CON>
extern volatile __bit                   P1DC1CON            __at(0x7CE1);	// @ (0xF9C * 8 + 1)
#define                                 P1DC1CON_bit        _BIT_ACCESS(PSTR1CON,1)
// ECCP1DEL<P1DC2>
extern volatile __bit                   P1DC2               __at(0x7DE2);	// @ (0xFBC * 8 + 2)
#define                                 P1DC2_bit           _BIT_ACCESS(ECCP1DEL,2)
// PSTR1CON<P1DC22>
extern volatile __bit                   P1DC22              __at(0x7CE2);	// @ (0xF9C * 8 + 2)
#define                                 P1DC22_bit          _BIT_ACCESS(PSTR1CON,2)
// PSTR1CON<P1DC2CON>
extern volatile __bit                   P1DC2CON            __at(0x7CE2);	// @ (0xF9C * 8 + 2)
#define                                 P1DC2CON_bit        _BIT_ACCESS(PSTR1CON,2)
// ECCP1DEL<P1DC3>
extern volatile __bit                   P1DC3               __at(0x7DE3);	// @ (0xFBC * 8 + 3)
#define                                 P1DC3_bit           _BIT_ACCESS(ECCP1DEL,3)
// PSTR1CON<P1DC32>
extern volatile __bit                   P1DC32              __at(0x7CE3);	// @ (0xF9C * 8 + 3)
#define                                 P1DC32_bit          _BIT_ACCESS(PSTR1CON,3)
// PSTR1CON<P1DC3CON>
extern volatile __bit                   P1DC3CON            __at(0x7CE3);	// @ (0xF9C * 8 + 3)
#define                                 P1DC3CON_bit        _BIT_ACCESS(PSTR1CON,3)
// ECCP1DEL<P1DC4>
extern volatile __bit                   P1DC4               __at(0x7DE4);	// @ (0xFBC * 8 + 4)
#define                                 P1DC4_bit           _BIT_ACCESS(ECCP1DEL,4)
// PSTR1CON<P1DC42>
extern volatile __bit                   P1DC42              __at(0x7CE4);	// @ (0xF9C * 8 + 4)
#define                                 P1DC42_bit          _BIT_ACCESS(PSTR1CON,4)
// PSTR1CON<P1DC4CON>
extern volatile __bit                   P1DC4CON            __at(0x7CE4);	// @ (0xF9C * 8 + 4)
#define                                 P1DC4CON_bit        _BIT_ACCESS(PSTR1CON,4)
// ECCP1DEL<P1DC5>
extern volatile __bit                   P1DC5               __at(0x7DE5);	// @ (0xFBC * 8 + 5)
#define                                 P1DC5_bit           _BIT_ACCESS(ECCP1DEL,5)
// ECCP1DEL<P1DC6>
extern volatile __bit                   P1DC6               __at(0x7DE6);	// @ (0xFBC * 8 + 6)
#define                                 P1DC6_bit           _BIT_ACCESS(ECCP1DEL,6)
// PSTR1CON<P1DC62>
extern volatile __bit                   P1DC62              __at(0x7CE6);	// @ (0xF9C * 8 + 6)
#define                                 P1DC62_bit          _BIT_ACCESS(PSTR1CON,6)
// PSTR1CON<P1DC6CON>
extern volatile __bit                   P1DC6CON            __at(0x7CE6);	// @ (0xF9C * 8 + 6)
#define                                 P1DC6CON_bit        _BIT_ACCESS(PSTR1CON,6)
// CCP1CON<P1M0>
extern volatile __bit                   P1M0                __at(0x7DCE);	// @ (0xFB9 * 8 + 6)
#define                                 P1M0_bit            _BIT_ACCESS(CCP1CON,6)
// CCP1CON<P1M1>
extern volatile __bit                   P1M1                __at(0x7DCF);	// @ (0xFB9 * 8 + 7)
#define                                 P1M1_bit            _BIT_ACCESS(CCP1CON,7)
// ECCP1DEL<P1RSEN>
extern volatile __bit                   P1RSEN              __at(0x7DE7);	// @ (0xFBC * 8 + 7)
#define                                 P1RSEN_bit          _BIT_ACCESS(ECCP1DEL,7)
// ECCP2DEL<P2DC0>
extern volatile __bit                   P2DC0               __at(0x7A88);	// @ (0xF51 * 8 + 0)
#define                                 P2DC0_bit           _BIT_ACCESS(ECCP2DEL,0)
// PSTR2CON<P2DC02>
extern volatile __bit                   P2DC02              __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 P2DC02_bit          _BIT_ACCESS(PSTR2CON,0)
// PSTR2CON<P2DC0CON>
extern volatile __bit                   P2DC0CON            __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 P2DC0CON_bit        _BIT_ACCESS(PSTR2CON,0)
// ECCP2DEL<P2DC1>
extern volatile __bit                   P2DC1               __at(0x7A89);	// @ (0xF51 * 8 + 1)
#define                                 P2DC1_bit           _BIT_ACCESS(ECCP2DEL,1)
// PSTR2CON<P2DC12>
extern volatile __bit                   P2DC12              __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 P2DC12_bit          _BIT_ACCESS(PSTR2CON,1)
// PSTR2CON<P2DC1CON>
extern volatile __bit                   P2DC1CON            __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 P2DC1CON_bit        _BIT_ACCESS(PSTR2CON,1)
// ECCP2DEL<P2DC2>
extern volatile __bit                   P2DC2               __at(0x7A8A);	// @ (0xF51 * 8 + 2)
#define                                 P2DC2_bit           _BIT_ACCESS(ECCP2DEL,2)
// PSTR2CON<P2DC22>
extern volatile __bit                   P2DC22              __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 P2DC22_bit          _BIT_ACCESS(PSTR2CON,2)
// PSTR2CON<P2DC2CON>
extern volatile __bit                   P2DC2CON            __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 P2DC2CON_bit        _BIT_ACCESS(PSTR2CON,2)
// ECCP2DEL<P2DC3>
extern volatile __bit                   P2DC3               __at(0x7A8B);	// @ (0xF51 * 8 + 3)
#define                                 P2DC3_bit           _BIT_ACCESS(ECCP2DEL,3)
// PSTR2CON<P2DC32>
extern volatile __bit                   P2DC32              __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 P2DC32_bit          _BIT_ACCESS(PSTR2CON,3)
// PSTR2CON<P2DC3CON>
extern volatile __bit                   P2DC3CON            __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 P2DC3CON_bit        _BIT_ACCESS(PSTR2CON,3)
// ECCP2DEL<P2DC4>
extern volatile __bit                   P2DC4               __at(0x7A8C);	// @ (0xF51 * 8 + 4)
#define                                 P2DC4_bit           _BIT_ACCESS(ECCP2DEL,4)
// PSTR2CON<P2DC42>
extern volatile __bit                   P2DC42              __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 P2DC42_bit          _BIT_ACCESS(PSTR2CON,4)
// PSTR2CON<P2DC4CON>
extern volatile __bit                   P2DC4CON            __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 P2DC4CON_bit        _BIT_ACCESS(PSTR2CON,4)
// ECCP2DEL<P2DC5>
extern volatile __bit                   P2DC5               __at(0x7A8D);	// @ (0xF51 * 8 + 5)
#define                                 P2DC5_bit           _BIT_ACCESS(ECCP2DEL,5)
// ECCP2DEL<P2DC6>
extern volatile __bit                   P2DC6               __at(0x7A8E);	// @ (0xF51 * 8 + 6)
#define                                 P2DC6_bit           _BIT_ACCESS(ECCP2DEL,6)
// PSTR2CON<P2DC62>
extern volatile __bit                   P2DC62              __at(0x78E6);	// @ (0xF1C * 8 + 6)
#define                                 P2DC62_bit          _BIT_ACCESS(PSTR2CON,6)
// PSTR2CON<P2DC6CON>
extern volatile __bit                   P2DC6CON            __at(0x78E6);	// @ (0xF1C * 8 + 6)
#define                                 P2DC6CON_bit        _BIT_ACCESS(PSTR2CON,6)
// CCP2CON<P2M0>
extern volatile __bit                   P2M0                __at(0x7A76);	// @ (0xF4E * 8 + 6)
#define                                 P2M0_bit            _BIT_ACCESS(CCP2CON,6)
// CCP2CON<P2M1>
extern volatile __bit                   P2M1                __at(0x7A77);	// @ (0xF4E * 8 + 7)
#define                                 P2M1_bit            _BIT_ACCESS(CCP2CON,7)
// ECCP2DEL<P2RSEN>
extern volatile __bit                   P2RSEN              __at(0x7A8F);	// @ (0xF51 * 8 + 7)
#define                                 P2RSEN_bit          _BIT_ACCESS(ECCP2DEL,7)
// ECCP3DEL<P3DC0>
extern volatile __bit                   P3DC0               __at(0x7A60);	// @ (0xF4C * 8 + 0)
#define                                 P3DC0_bit           _BIT_ACCESS(ECCP3DEL,0)
// PSTR3CON<P3DC02>
extern volatile __bit                   P3DC02              __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 P3DC02_bit          _BIT_ACCESS(PSTR3CON,0)
// PSTR3CON<P3DC0CON>
extern volatile __bit                   P3DC0CON            __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 P3DC0CON_bit        _BIT_ACCESS(PSTR3CON,0)
// ECCP3DEL<P3DC1>
extern volatile __bit                   P3DC1               __at(0x7A61);	// @ (0xF4C * 8 + 1)
#define                                 P3DC1_bit           _BIT_ACCESS(ECCP3DEL,1)
// PSTR3CON<P3DC12>
extern volatile __bit                   P3DC12              __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 P3DC12_bit          _BIT_ACCESS(PSTR3CON,1)
// PSTR3CON<P3DC1CON>
extern volatile __bit                   P3DC1CON            __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 P3DC1CON_bit        _BIT_ACCESS(PSTR3CON,1)
// ECCP3DEL<P3DC2>
extern volatile __bit                   P3DC2               __at(0x7A62);	// @ (0xF4C * 8 + 2)
#define                                 P3DC2_bit           _BIT_ACCESS(ECCP3DEL,2)
// PSTR3CON<P3DC22>
extern volatile __bit                   P3DC22              __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 P3DC22_bit          _BIT_ACCESS(PSTR3CON,2)
// PSTR3CON<P3DC2CON>
extern volatile __bit                   P3DC2CON            __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 P3DC2CON_bit        _BIT_ACCESS(PSTR3CON,2)
// ECCP3DEL<P3DC3>
extern volatile __bit                   P3DC3               __at(0x7A63);	// @ (0xF4C * 8 + 3)
#define                                 P3DC3_bit           _BIT_ACCESS(ECCP3DEL,3)
// PSTR3CON<P3DC32>
extern volatile __bit                   P3DC32              __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 P3DC32_bit          _BIT_ACCESS(PSTR3CON,3)
// PSTR3CON<P3DC3CON>
extern volatile __bit                   P3DC3CON            __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 P3DC3CON_bit        _BIT_ACCESS(PSTR3CON,3)
// ECCP3DEL<P3DC4>
extern volatile __bit                   P3DC4               __at(0x7A64);	// @ (0xF4C * 8 + 4)
#define                                 P3DC4_bit           _BIT_ACCESS(ECCP3DEL,4)
// PSTR3CON<P3DC42>
extern volatile __bit                   P3DC42              __at(0x78DC);	// @ (0xF1B * 8 + 4)
#define                                 P3DC42_bit          _BIT_ACCESS(PSTR3CON,4)
// PSTR3CON<P3DC4CON>
extern volatile __bit                   P3DC4CON            __at(0x78DC);	// @ (0xF1B * 8 + 4)
#define                                 P3DC4CON_bit        _BIT_ACCESS(PSTR3CON,4)
// ECCP3DEL<P3DC5>
extern volatile __bit                   P3DC5               __at(0x7A65);	// @ (0xF4C * 8 + 5)
#define                                 P3DC5_bit           _BIT_ACCESS(ECCP3DEL,5)
// ECCP3DEL<P3DC6>
extern volatile __bit                   P3DC6               __at(0x7A66);	// @ (0xF4C * 8 + 6)
#define                                 P3DC6_bit           _BIT_ACCESS(ECCP3DEL,6)
// PSTR3CON<P3DC62>
extern volatile __bit                   P3DC62              __at(0x78DE);	// @ (0xF1B * 8 + 6)
#define                                 P3DC62_bit          _BIT_ACCESS(PSTR3CON,6)
// PSTR3CON<P3DC6CON>
extern volatile __bit                   P3DC6CON            __at(0x78DE);	// @ (0xF1B * 8 + 6)
#define                                 P3DC6CON_bit        _BIT_ACCESS(PSTR3CON,6)
// CCP3CON<P3M0>
extern volatile __bit                   P3M0                __at(0x7A4E);	// @ (0xF49 * 8 + 6)
#define                                 P3M0_bit            _BIT_ACCESS(CCP3CON,6)
// CCP3CON<P3M1>
extern volatile __bit                   P3M1                __at(0x7A4F);	// @ (0xF49 * 8 + 7)
#define                                 P3M1_bit            _BIT_ACCESS(CCP3CON,7)
// ECCP3DEL<P3RSEN>
extern volatile __bit                   P3RSEN              __at(0x7A67);	// @ (0xF4C * 8 + 7)
#define                                 P3RSEN_bit          _BIT_ACCESS(ECCP3DEL,7)
// PORTC<PA1>
extern volatile __bit                   PA1                 __at(0x7C12);	// @ (0xF82 * 8 + 2)
#define                                 PA1_bit             _BIT_ACCESS(PORTC,2)
// PORTC<PA2>
extern volatile __bit                   PA2                 __at(0x7C11);	// @ (0xF82 * 8 + 1)
#define                                 PA2_bit             _BIT_ACCESS(PORTC,1)
// PORTE<PA2E>
extern volatile __bit                   PA2E                __at(0x7C27);	// @ (0xF84 * 8 + 7)
#define                                 PA2E_bit            _BIT_ACCESS(PORTE,7)
// PORTH<PB1>
extern volatile __bit                   PB1                 __at(0x7C3F);	// @ (0xF87 * 8 + 7)
#define                                 PB1_bit             _BIT_ACCESS(PORTH,7)
// PORTE<PB1E>
extern volatile __bit                   PB1E                __at(0x7C26);	// @ (0xF84 * 8 + 6)
#define                                 PB1E_bit            _BIT_ACCESS(PORTE,6)
// PORTE<PB2>
extern volatile __bit                   PB2                 __at(0x7C22);	// @ (0xF84 * 8 + 2)
#define                                 PB2_bit             _BIT_ACCESS(PORTE,2)
// PORTH<PB3>
extern volatile __bit                   PB3                 __at(0x7C3D);	// @ (0xF87 * 8 + 5)
#define                                 PB3_bit             _BIT_ACCESS(PORTH,5)
// PORTE<PB3E>
extern volatile __bit                   PB3E                __at(0x7C24);	// @ (0xF84 * 8 + 4)
#define                                 PB3E_bit            _BIT_ACCESS(PORTE,4)
// RPINR46_47<PBIO0R0>
extern volatile __bit                   PBIO0R0             __at(0x7208);	// @ (0xE41 * 8 + 0)
#define                                 PBIO0R0_bit         _BIT_ACCESS(RPINR46_47,0)
// RPINR46_47<PBIO0R1>
extern volatile __bit                   PBIO0R1             __at(0x7209);	// @ (0xE41 * 8 + 1)
#define                                 PBIO0R1_bit         _BIT_ACCESS(RPINR46_47,1)
// RPINR46_47<PBIO0R2>
extern volatile __bit                   PBIO0R2             __at(0x720A);	// @ (0xE41 * 8 + 2)
#define                                 PBIO0R2_bit         _BIT_ACCESS(RPINR46_47,2)
// RPINR46_47<PBIO0R3>
extern volatile __bit                   PBIO0R3             __at(0x720B);	// @ (0xE41 * 8 + 3)
#define                                 PBIO0R3_bit         _BIT_ACCESS(RPINR46_47,3)
// RPINR46_47<PBIO1R0>
extern volatile __bit                   PBIO1R0             __at(0x720C);	// @ (0xE41 * 8 + 4)
#define                                 PBIO1R0_bit         _BIT_ACCESS(RPINR46_47,4)
// RPINR46_47<PBIO1R1>
extern volatile __bit                   PBIO1R1             __at(0x720D);	// @ (0xE41 * 8 + 5)
#define                                 PBIO1R1_bit         _BIT_ACCESS(RPINR46_47,5)
// RPINR46_47<PBIO1R2>
extern volatile __bit                   PBIO1R2             __at(0x720E);	// @ (0xE41 * 8 + 6)
#define                                 PBIO1R2_bit         _BIT_ACCESS(RPINR46_47,6)
// RPINR46_47<PBIO1R3>
extern volatile __bit                   PBIO1R3             __at(0x720F);	// @ (0xE41 * 8 + 7)
#define                                 PBIO1R3_bit         _BIT_ACCESS(RPINR46_47,7)
// RPINR48_49<PBIO2R0>
extern volatile __bit                   PBIO2R0             __at(0x7210);	// @ (0xE42 * 8 + 0)
#define                                 PBIO2R0_bit         _BIT_ACCESS(RPINR48_49,0)
// RPINR48_49<PBIO2R1>
extern volatile __bit                   PBIO2R1             __at(0x7211);	// @ (0xE42 * 8 + 1)
#define                                 PBIO2R1_bit         _BIT_ACCESS(RPINR48_49,1)
// RPINR48_49<PBIO2R2>
extern volatile __bit                   PBIO2R2             __at(0x7212);	// @ (0xE42 * 8 + 2)
#define                                 PBIO2R2_bit         _BIT_ACCESS(RPINR48_49,2)
// RPINR48_49<PBIO2R3>
extern volatile __bit                   PBIO2R3             __at(0x7213);	// @ (0xE42 * 8 + 3)
#define                                 PBIO2R3_bit         _BIT_ACCESS(RPINR48_49,3)
// RPINR48_49<PBIO3R0>
extern volatile __bit                   PBIO3R0             __at(0x7214);	// @ (0xE42 * 8 + 4)
#define                                 PBIO3R0_bit         _BIT_ACCESS(RPINR48_49,4)
// RPINR48_49<PBIO3R1>
extern volatile __bit                   PBIO3R1             __at(0x7215);	// @ (0xE42 * 8 + 5)
#define                                 PBIO3R1_bit         _BIT_ACCESS(RPINR48_49,5)
// RPINR48_49<PBIO3R2>
extern volatile __bit                   PBIO3R2             __at(0x7216);	// @ (0xE42 * 8 + 6)
#define                                 PBIO3R2_bit         _BIT_ACCESS(RPINR48_49,6)
// RPINR48_49<PBIO3R3>
extern volatile __bit                   PBIO3R3             __at(0x7217);	// @ (0xE42 * 8 + 7)
#define                                 PBIO3R3_bit         _BIT_ACCESS(RPINR48_49,7)
// RPINR50_51<PBIO4R0>
extern volatile __bit                   PBIO4R0             __at(0x7218);	// @ (0xE43 * 8 + 0)
#define                                 PBIO4R0_bit         _BIT_ACCESS(RPINR50_51,0)
// RPINR50_51<PBIO4R1>
extern volatile __bit                   PBIO4R1             __at(0x7219);	// @ (0xE43 * 8 + 1)
#define                                 PBIO4R1_bit         _BIT_ACCESS(RPINR50_51,1)
// RPINR50_51<PBIO4R2>
extern volatile __bit                   PBIO4R2             __at(0x721A);	// @ (0xE43 * 8 + 2)
#define                                 PBIO4R2_bit         _BIT_ACCESS(RPINR50_51,2)
// RPINR50_51<PBIO4R3>
extern volatile __bit                   PBIO4R3             __at(0x721B);	// @ (0xE43 * 8 + 3)
#define                                 PBIO4R3_bit         _BIT_ACCESS(RPINR50_51,3)
// RPINR50_51<PBIO5R0>
extern volatile __bit                   PBIO5R0             __at(0x721C);	// @ (0xE43 * 8 + 4)
#define                                 PBIO5R0_bit         _BIT_ACCESS(RPINR50_51,4)
// RPINR50_51<PBIO5R1>
extern volatile __bit                   PBIO5R1             __at(0x721D);	// @ (0xE43 * 8 + 5)
#define                                 PBIO5R1_bit         _BIT_ACCESS(RPINR50_51,5)
// RPINR50_51<PBIO5R2>
extern volatile __bit                   PBIO5R2             __at(0x721E);	// @ (0xE43 * 8 + 6)
#define                                 PBIO5R2_bit         _BIT_ACCESS(RPINR50_51,6)
// RPINR50_51<PBIO5R3>
extern volatile __bit                   PBIO5R3             __at(0x721F);	// @ (0xE43 * 8 + 7)
#define                                 PBIO5R3_bit         _BIT_ACCESS(RPINR50_51,7)
// RPINR52_53<PBIO6R0>
extern volatile __bit                   PBIO6R0             __at(0x7220);	// @ (0xE44 * 8 + 0)
#define                                 PBIO6R0_bit         _BIT_ACCESS(RPINR52_53,0)
// RPINR52_53<PBIO6R1>
extern volatile __bit                   PBIO6R1             __at(0x7221);	// @ (0xE44 * 8 + 1)
#define                                 PBIO6R1_bit         _BIT_ACCESS(RPINR52_53,1)
// RPINR52_53<PBIO6R2>
extern volatile __bit                   PBIO6R2             __at(0x7222);	// @ (0xE44 * 8 + 2)
#define                                 PBIO6R2_bit         _BIT_ACCESS(RPINR52_53,2)
// RPINR52_53<PBIO6R3>
extern volatile __bit                   PBIO6R3             __at(0x7223);	// @ (0xE44 * 8 + 3)
#define                                 PBIO6R3_bit         _BIT_ACCESS(RPINR52_53,3)
// RPINR52_53<PBIO7R0>
extern volatile __bit                   PBIO7R0             __at(0x7224);	// @ (0xE44 * 8 + 4)
#define                                 PBIO7R0_bit         _BIT_ACCESS(RPINR52_53,4)
// RPINR52_53<PBIO7R1>
extern volatile __bit                   PBIO7R1             __at(0x7225);	// @ (0xE44 * 8 + 5)
#define                                 PBIO7R1_bit         _BIT_ACCESS(RPINR52_53,5)
// RPINR52_53<PBIO7R2>
extern volatile __bit                   PBIO7R2             __at(0x7226);	// @ (0xE44 * 8 + 6)
#define                                 PBIO7R2_bit         _BIT_ACCESS(RPINR52_53,6)
// RPINR52_53<PBIO7R3>
extern volatile __bit                   PBIO7R3             __at(0x7227);	// @ (0xE44 * 8 + 7)
#define                                 PBIO7R3_bit         _BIT_ACCESS(RPINR52_53,7)
// PORTH<PC1>
extern volatile __bit                   PC1                 __at(0x7C3E);	// @ (0xF87 * 8 + 6)
#define                                 PC1_bit             _BIT_ACCESS(PORTH,6)
// PORTE<PC1E>
extern volatile __bit                   PC1E                __at(0x7C25);	// @ (0xF84 * 8 + 5)
#define                                 PC1E_bit            _BIT_ACCESS(PORTE,5)
// PORTE<PC2>
extern volatile __bit                   PC2                 __at(0x7C21);	// @ (0xF84 * 8 + 1)
#define                                 PC2_bit             _BIT_ACCESS(PORTE,1)
// PORTH<PC3>
extern volatile __bit                   PC3                 __at(0x7C3C);	// @ (0xF87 * 8 + 4)
#define                                 PC3_bit             _BIT_ACCESS(PORTH,4)
// PORTE<PC3E>
extern volatile __bit                   PC3E                __at(0x7C23);	// @ (0xF84 * 8 + 3)
#define                                 PC3E_bit            _BIT_ACCESS(PORTE,3)
// ANCON1<PCFG10>
extern volatile __bit                   PCFG10              __at(0x723A);	// @ (0xE47 * 8 + 2)
#define                                 PCFG10_bit          _BIT_ACCESS(ANCON1,2)
// ANCON1<PCFG11>
extern volatile __bit                   PCFG11              __at(0x723B);	// @ (0xE47 * 8 + 3)
#define                                 PCFG11_bit          _BIT_ACCESS(ANCON1,3)
// ANCON1<PCFG12>
extern volatile __bit                   PCFG12              __at(0x723C);	// @ (0xE47 * 8 + 4)
#define                                 PCFG12_bit          _BIT_ACCESS(ANCON1,4)
// ANCON1<PCFG13>
extern volatile __bit                   PCFG13              __at(0x723D);	// @ (0xE47 * 8 + 5)
#define                                 PCFG13_bit          _BIT_ACCESS(ANCON1,5)
// ANCON1<PCFG14>
extern volatile __bit                   PCFG14              __at(0x723E);	// @ (0xE47 * 8 + 6)
#define                                 PCFG14_bit          _BIT_ACCESS(ANCON1,6)
// ANCON1<PCFG15>
extern volatile __bit                   PCFG15              __at(0x723F);	// @ (0xE47 * 8 + 7)
#define                                 PCFG15_bit          _BIT_ACCESS(ANCON1,7)
// ANCON2<PCFG16>
extern volatile __bit                   PCFG16              __at(0x7230);	// @ (0xE46 * 8 + 0)
#define                                 PCFG16_bit          _BIT_ACCESS(ANCON2,0)
// ANCON2<PCFG17>
extern volatile __bit                   PCFG17              __at(0x7231);	// @ (0xE46 * 8 + 1)
#define                                 PCFG17_bit          _BIT_ACCESS(ANCON2,1)
// ANCON2<PCFG18>
extern volatile __bit                   PCFG18              __at(0x7232);	// @ (0xE46 * 8 + 2)
#define                                 PCFG18_bit          _BIT_ACCESS(ANCON2,2)
// ANCON2<PCFG19>
extern volatile __bit                   PCFG19              __at(0x7233);	// @ (0xE46 * 8 + 3)
#define                                 PCFG19_bit          _BIT_ACCESS(ANCON2,3)
// ANCON2<PCFG20>
extern volatile __bit                   PCFG20              __at(0x7234);	// @ (0xE46 * 8 + 4)
#define                                 PCFG20_bit          _BIT_ACCESS(ANCON2,4)
// ANCON2<PCFG21>
extern volatile __bit                   PCFG21              __at(0x7235);	// @ (0xE46 * 8 + 5)
#define                                 PCFG21_bit          _BIT_ACCESS(ANCON2,5)
// ANCON2<PCFG22>
extern volatile __bit                   PCFG22              __at(0x7236);	// @ (0xE46 * 8 + 6)
#define                                 PCFG22_bit          _BIT_ACCESS(ANCON2,6)
// ANCON2<PCFG23>
extern volatile __bit                   PCFG23              __at(0x7237);	// @ (0xE46 * 8 + 7)
#define                                 PCFG23_bit          _BIT_ACCESS(ANCON2,7)
// ANCON1<PCFG8>
extern volatile __bit                   PCFG8               __at(0x7238);	// @ (0xE47 * 8 + 0)
#define                                 PCFG8_bit           _BIT_ACCESS(ANCON1,0)
// ANCON1<PCFG9>
extern volatile __bit                   PCFG9               __at(0x7239);	// @ (0xE47 * 8 + 1)
#define                                 PCFG9_bit           _BIT_ACCESS(ANCON1,1)
// RCON<PD>
extern volatile __bit                   PD                  __at(0x7E82);	// @ (0xFD0 * 8 + 2)
#define                                 PD_bit              _BIT_ACCESS(RCON,2)
// PORTE<PD2>
extern volatile __bit                   PD2                 __at(0x7C20);	// @ (0xF84 * 8 + 0)
#define                                 PD2_bit             _BIT_ACCESS(PORTE,0)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x7F96);	// @ (0xFF2 * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// INTCON<PEIE_GIEL>
extern volatile __bit                   PEIE_GIEL           __at(0x7F96);	// @ (0xFF2 * 8 + 6)
#define                                 PEIE_GIEL_bit       _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0x7E2A);	// @ (0xFC5 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// SSP2CON2<PEN2>
extern volatile __bit                   PEN2                __at(0x78C2);	// @ (0xF18 * 8 + 2)
#define                                 PEN2_bit            _BIT_ACCESS(SSP2CON2,2)
// UEIE<PIDEE>
extern volatile __bit                   PIDEE               __at(0x7078);	// @ (0xE0F * 8 + 0)
#define                                 PIDEE_bit           _BIT_ACCESS(UEIE,0)
// UEIR<PIDEF>
extern volatile __bit                   PIDEF               __at(0x7BB8);	// @ (0xF77 * 8 + 0)
#define                                 PIDEF_bit           _BIT_ACCESS(UEIR,0)
// UCON<PKTDIS>
extern volatile __bit                   PKTDIS              __at(0x7BAC);	// @ (0xF75 * 8 + 4)
#define                                 PKTDIS_bit          _BIT_ACCESS(UCON,4)
// OSCCON4<PLLEN>
extern volatile __bit                   PLLEN               __at(0x7B25);	// @ (0xF64 * 8 + 5)
#define                                 PLLEN_bit           _BIT_ACCESS(OSCCON4,5)
// PADCFG1<PMPTTL>
extern volatile __bit                   PMPTTL              __at(0x7AA0);	// @ (0xF54 * 8 + 0)
#define                                 PMPTTL_bit          _BIT_ACCESS(PADCFG1,0)
// RCON4<PMSLP>
extern volatile __bit                   PMSLP               __at(0x7BD8);	// @ (0xF7B * 8 + 0)
#define                                 PMSLP_bit           _BIT_ACCESS(RCON4,0)
// RCON<POR>
extern volatile __bit                   POR                 __at(0x7E81);	// @ (0xFD0 * 8 + 1)
#define                                 POR_bit             _BIT_ACCESS(RCON,1)
// OSCCON2<POSCEN>
extern volatile __bit                   POSCEN              __at(0x7B32);	// @ (0xF66 * 8 + 2)
#define                                 POSCEN_bit          _BIT_ACCESS(OSCCON2,2)
// UCFG<PPB0>
extern volatile __bit                   PPB0                __at(0x7088);	// @ (0xE11 * 8 + 0)
#define                                 PPB0_bit            _BIT_ACCESS(UCFG,0)
// UCFG<PPB1>
extern volatile __bit                   PPB1                __at(0x7089);	// @ (0xE11 * 8 + 1)
#define                                 PPB1_bit            _BIT_ACCESS(UCFG,1)
// USTAT<PPBI>
extern volatile __bit                   PPBI                __at(0x7BB1);	// @ (0xF76 * 8 + 1)
#define                                 PPBI_bit            _BIT_ACCESS(USTAT,1)
// UCON<PPBRST>
extern volatile __bit                   PPBRST              __at(0x7BAE);	// @ (0xF75 * 8 + 6)
#define                                 PPBRST_bit          _BIT_ACCESS(UCON,6)
// T0CON<PSA>
extern volatile __bit                   PSA                 __at(0x7EAB);	// @ (0xFD5 * 8 + 3)
#define                                 PSA_bit             _BIT_ACCESS(T0CON,3)
// PIE1<PSPIE>
extern volatile __bit                   PSPIE               __at(0x7CEF);	// @ (0xF9D * 8 + 7)
#define                                 PSPIE_bit           _BIT_ACCESS(PIE1,7)
// PIR1<PSPIF>
extern volatile __bit                   PSPIF               __at(0x7CF7);	// @ (0xF9E * 8 + 7)
#define                                 PSPIF_bit           _BIT_ACCESS(PIR1,7)
// IPR1<PSPIP>
extern volatile __bit                   PSPIP               __at(0x7CFF);	// @ (0xF9F * 8 + 7)
#define                                 PSPIP_bit           _BIT_ACCESS(IPR1,7)
// PMD3<PSPMD>
extern volatile __bit                   PSPMD               __at(0x778A);	// @ (0xEF1 * 8 + 2)
#define                                 PSPMD_bit           _BIT_ACCESS(PMD3,2)
// PSPCON<PSPMODE>
extern volatile __bit                   PSPMODE             __at(0x7D3C);	// @ (0xFA7 * 8 + 4)
#define                                 PSPMODE_bit         _BIT_ACCESS(PSPCON,4)
// ECCP1AS<PSS1AC0>
extern volatile __bit                   PSS1AC0             __at(0x7DEA);	// @ (0xFBD * 8 + 2)
#define                                 PSS1AC0_bit         _BIT_ACCESS(ECCP1AS,2)
// ECCP1AS<PSS1AC1>
extern volatile __bit                   PSS1AC1             __at(0x7DEB);	// @ (0xFBD * 8 + 3)
#define                                 PSS1AC1_bit         _BIT_ACCESS(ECCP1AS,3)
// ECCP1AS<PSS1BD0>
extern volatile __bit                   PSS1BD0             __at(0x7DE8);	// @ (0xFBD * 8 + 0)
#define                                 PSS1BD0_bit         _BIT_ACCESS(ECCP1AS,0)
// ECCP1AS<PSS1BD1>
extern volatile __bit                   PSS1BD1             __at(0x7DE9);	// @ (0xFBD * 8 + 1)
#define                                 PSS1BD1_bit         _BIT_ACCESS(ECCP1AS,1)
// ECCP2AS<PSS2AC0>
extern volatile __bit                   PSS2AC0             __at(0x7A92);	// @ (0xF52 * 8 + 2)
#define                                 PSS2AC0_bit         _BIT_ACCESS(ECCP2AS,2)
// ECCP2AS<PSS2AC1>
extern volatile __bit                   PSS2AC1             __at(0x7A93);	// @ (0xF52 * 8 + 3)
#define                                 PSS2AC1_bit         _BIT_ACCESS(ECCP2AS,3)
// ECCP2AS<PSS2BD0>
extern volatile __bit                   PSS2BD0             __at(0x7A90);	// @ (0xF52 * 8 + 0)
#define                                 PSS2BD0_bit         _BIT_ACCESS(ECCP2AS,0)
// ECCP2AS<PSS2BD1>
extern volatile __bit                   PSS2BD1             __at(0x7A91);	// @ (0xF52 * 8 + 1)
#define                                 PSS2BD1_bit         _BIT_ACCESS(ECCP2AS,1)
// ECCP3AS<PSS3AC0>
extern volatile __bit                   PSS3AC0             __at(0x7A6A);	// @ (0xF4D * 8 + 2)
#define                                 PSS3AC0_bit         _BIT_ACCESS(ECCP3AS,2)
// ECCP3AS<PSS3AC1>
extern volatile __bit                   PSS3AC1             __at(0x7A6B);	// @ (0xF4D * 8 + 3)
#define                                 PSS3AC1_bit         _BIT_ACCESS(ECCP3AS,3)
// ECCP3AS<PSS3BD0>
extern volatile __bit                   PSS3BD0             __at(0x7A68);	// @ (0xF4D * 8 + 0)
#define                                 PSS3BD0_bit         _BIT_ACCESS(ECCP3AS,0)
// ECCP3AS<PSS3BD1>
extern volatile __bit                   PSS3BD1             __at(0x7A69);	// @ (0xF4D * 8 + 1)
#define                                 PSS3BD1_bit         _BIT_ACCESS(ECCP3AS,1)
// ADCON3H<PUMPEN>
extern volatile __bit                   PUMPEN              __at(0x745D);	// @ (0xE8B * 8 + 5)
#define                                 PUMPEN_bit          _BIT_ACCESS(ADCON3H,5)
// ADCON2H<PVCFG0>
extern volatile __bit                   PVCFG0              __at(0x746E);	// @ (0xE8D * 8 + 6)
#define                                 PVCFG0_bit          _BIT_ACCESS(ADCON2H,6)
// ADCON2H<PVCFG1>
extern volatile __bit                   PVCFG1              __at(0x746F);	// @ (0xE8D * 8 + 7)
#define                                 PVCFG1_bit          _BIT_ACCESS(ADCON2H,7)
// RTCCON2<PWCCPRE>
extern volatile __bit                   PWCCPRE             __at(0x7ABD);	// @ (0xF57 * 8 + 5)
#define                                 PWCCPRE_bit         _BIT_ACCESS(RTCCON2,5)
// RTCCON2<PWCEN>
extern volatile __bit                   PWCEN               __at(0x7ABF);	// @ (0xF57 * 8 + 7)
#define                                 PWCEN_bit           _BIT_ACCESS(RTCCON2,7)
// RTCCON2<PWCPOL>
extern volatile __bit                   PWCPOL              __at(0x7ABE);	// @ (0xF57 * 8 + 6)
#define                                 PWCPOL_bit          _BIT_ACCESS(RTCCON2,6)
// RTCCON2<PWCSPRE>
extern volatile __bit                   PWCSPRE             __at(0x7ABC);	// @ (0xF57 * 8 + 4)
#define                                 PWCSPRE_bit         _BIT_ACCESS(RTCCON2,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x7C00);	// @ (0xF80 * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x7C01);	// @ (0xF80 * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x7C02);	// @ (0xF80 * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x7C03);	// @ (0xF80 * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x7C04);	// @ (0xF80 * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x7C05);	// @ (0xF80 * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x7C06);	// @ (0xF80 * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x7C07);	// @ (0xF80 * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x7C08);	// @ (0xF81 * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x7C09);	// @ (0xF81 * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x7C0A);	// @ (0xF81 * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x7C0B);	// @ (0xF81 * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x7C0C);	// @ (0xF81 * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x7C0D);	// @ (0xF81 * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x7C0E);	// @ (0xF81 * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x7C0F);	// @ (0xF81 * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// INTCON2<RBPU>
extern volatile __bit                   RBPU                __at(0x7F8F);	// @ (0xFF1 * 8 + 7)
#define                                 RBPU_bit            _BIT_ACCESS(INTCON2,7)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x7C10);	// @ (0xF82 * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x7C11);	// @ (0xF82 * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// PIE1<RC1IE>
extern volatile __bit                   RC1IE               __at(0x7CED);	// @ (0xF9D * 8 + 5)
#define                                 RC1IE_bit           _BIT_ACCESS(PIE1,5)
// PIR1<RC1IF>
extern volatile __bit                   RC1IF               __at(0x7CF5);	// @ (0xF9E * 8 + 5)
#define                                 RC1IF_bit           _BIT_ACCESS(PIR1,5)
// IPR1<RC1IP>
extern volatile __bit                   RC1IP               __at(0x7CFD);	// @ (0xF9F * 8 + 5)
#define                                 RC1IP_bit           _BIT_ACCESS(IPR1,5)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x7C12);	// @ (0xF82 * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// PIE3<RC2IE>
extern volatile __bit                   RC2IE               __at(0x7D1D);	// @ (0xFA3 * 8 + 5)
#define                                 RC2IE_bit           _BIT_ACCESS(PIE3,5)
// PIR3<RC2IF>
extern volatile __bit                   RC2IF               __at(0x7D25);	// @ (0xFA4 * 8 + 5)
#define                                 RC2IF_bit           _BIT_ACCESS(PIR3,5)
// IPR3<RC2IP>
extern volatile __bit                   RC2IP               __at(0x7D2D);	// @ (0xFA5 * 8 + 5)
#define                                 RC2IP_bit           _BIT_ACCESS(IPR3,5)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x7C13);	// @ (0xF82 * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// PIE6<RC3IE>
extern volatile __bit                   RC3IE               __at(0x7B0D);	// @ (0xF61 * 8 + 5)
#define                                 RC3IE_bit           _BIT_ACCESS(PIE6,5)
// PIR6<RC3IF>
extern volatile __bit                   RC3IF               __at(0x7D35);	// @ (0xFA6 * 8 + 5)
#define                                 RC3IF_bit           _BIT_ACCESS(PIR6,5)
// IPR6<RC3IP>
extern volatile __bit                   RC3IP               __at(0x7D4D);	// @ (0xFA9 * 8 + 5)
#define                                 RC3IP_bit           _BIT_ACCESS(IPR6,5)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x7C14);	// @ (0xF82 * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// PIE6<RC4IE>
extern volatile __bit                   RC4IE               __at(0x7B0F);	// @ (0xF61 * 8 + 7)
#define                                 RC4IE_bit           _BIT_ACCESS(PIE6,7)
// PIR6<RC4IF>
extern volatile __bit                   RC4IF               __at(0x7D37);	// @ (0xFA6 * 8 + 7)
#define                                 RC4IF_bit           _BIT_ACCESS(PIR6,7)
// IPR6<RC4IP>
extern volatile __bit                   RC4IP               __at(0x7D4F);	// @ (0xFA9 * 8 + 7)
#define                                 RC4IP_bit           _BIT_ACCESS(IPR6,7)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x7C15);	// @ (0xF82 * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x7C16);	// @ (0xF82 * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x7C17);	// @ (0xF82 * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RCSTA1<RC8_9>
extern volatile __bit                   RC8_9               __at(0x7D5E);	// @ (0xFAB * 8 + 6)
#define                                 RC8_9_bit           _BIT_ACCESS(RCSTA1,6)
// RCSTA1<RC9>
extern volatile __bit                   RC9                 __at(0x7D5E);	// @ (0xFAB * 8 + 6)
#define                                 RC9_bit             _BIT_ACCESS(RCSTA1,6)
// RCSTA2<RC92>
extern volatile __bit                   RC92                __at(0x799E);	// @ (0xF33 * 8 + 6)
#define                                 RC92_bit            _BIT_ACCESS(RCSTA2,6)
// RCSTA3<RC93>
extern volatile __bit                   RC93                __at(0x797E);	// @ (0xF2F * 8 + 6)
#define                                 RC93_bit            _BIT_ACCESS(RCSTA3,6)
// RCSTA4<RC94>
extern volatile __bit                   RC94                __at(0x77FE);	// @ (0xEFF * 8 + 6)
#define                                 RC94_bit            _BIT_ACCESS(RCSTA4,6)
// RCSTA1<RCD8>
extern volatile __bit                   RCD8                __at(0x7D58);	// @ (0xFAB * 8 + 0)
#define                                 RCD8_bit            _BIT_ACCESS(RCSTA1,0)
// RCSTA2<RCD82>
extern volatile __bit                   RCD82               __at(0x7998);	// @ (0xF33 * 8 + 0)
#define                                 RCD82_bit           _BIT_ACCESS(RCSTA2,0)
// RCSTA3<RCD83>
extern volatile __bit                   RCD83               __at(0x7978);	// @ (0xF2F * 8 + 0)
#define                                 RCD83_bit           _BIT_ACCESS(RCSTA3,0)
// RCSTA4<RCD84>
extern volatile __bit                   RCD84               __at(0x77F8);	// @ (0xEFF * 8 + 0)
#define                                 RCD84_bit           _BIT_ACCESS(RCSTA4,0)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0x7E2B);	// @ (0xFC5 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// SSP2CON2<RCEN2>
extern volatile __bit                   RCEN2               __at(0x78C3);	// @ (0xF18 * 8 + 3)
#define                                 RCEN2_bit           _BIT_ACCESS(SSP2CON2,3)
// BAUDCON1<RCIDL1>
extern volatile __bit                   RCIDL1              __at(0x7B3E);	// @ (0xF67 * 8 + 6)
#define                                 RCIDL1_bit          _BIT_ACCESS(BAUDCON1,6)
// BAUDCON2<RCIDL2>
extern volatile __bit                   RCIDL2              __at(0x798E);	// @ (0xF31 * 8 + 6)
#define                                 RCIDL2_bit          _BIT_ACCESS(BAUDCON2,6)
// BAUDCON3<RCIDL3>
extern volatile __bit                   RCIDL3              __at(0x796E);	// @ (0xF2D * 8 + 6)
#define                                 RCIDL3_bit          _BIT_ACCESS(BAUDCON3,6)
// BAUDCON4<RCIDL4>
extern volatile __bit                   RCIDL4              __at(0x77EE);	// @ (0xEFD * 8 + 6)
#define                                 RCIDL4_bit          _BIT_ACCESS(BAUDCON4,6)
// BAUDCON1<RCMT>
extern volatile __bit                   RCMT                __at(0x7B3E);	// @ (0xF67 * 8 + 6)
#define                                 RCMT_bit            _BIT_ACCESS(BAUDCON1,6)
// BAUDCON1<RCMT1>
extern volatile __bit                   RCMT1               __at(0x7B3E);	// @ (0xF67 * 8 + 6)
#define                                 RCMT1_bit           _BIT_ACCESS(BAUDCON1,6)
// BAUDCON2<RCMT2>
extern volatile __bit                   RCMT2               __at(0x798E);	// @ (0xF31 * 8 + 6)
#define                                 RCMT2_bit           _BIT_ACCESS(BAUDCON2,6)
// BAUDCON3<RCMT3>
extern volatile __bit                   RCMT3               __at(0x796E);	// @ (0xF2D * 8 + 6)
#define                                 RCMT3_bit           _BIT_ACCESS(BAUDCON3,6)
// BAUDCON4<RCMT4>
extern volatile __bit                   RCMT4               __at(0x77EE);	// @ (0xEFD * 8 + 6)
#define                                 RCMT4_bit           _BIT_ACCESS(BAUDCON4,6)
// PORTD<RD0>
extern volatile __bit                   RD0                 __at(0x7C18);	// @ (0xF83 * 8 + 0)
#define                                 RD0_bit             _BIT_ACCESS(PORTD,0)
// PORTD<RD1>
extern volatile __bit                   RD1                 __at(0x7C19);	// @ (0xF83 * 8 + 1)
#define                                 RD1_bit             _BIT_ACCESS(PORTD,1)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x7E69);	// @ (0xFCD * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// T3CON<RD163>
extern volatile __bit                   RD163               __at(0x7D89);	// @ (0xFB1 * 8 + 1)
#define                                 RD163_bit           _BIT_ACCESS(T3CON,1)
// T5CON<RD165>
extern volatile __bit                   RD165               __at(0x78A1);	// @ (0xF14 * 8 + 1)
#define                                 RD165_bit           _BIT_ACCESS(T5CON,1)
// PORTD<RD2>
extern volatile __bit                   RD2                 __at(0x7C1A);	// @ (0xF83 * 8 + 2)
#define                                 RD2_bit             _BIT_ACCESS(PORTD,2)
// PORTD<RD3>
extern volatile __bit                   RD3                 __at(0x7C1B);	// @ (0xF83 * 8 + 3)
#define                                 RD3_bit             _BIT_ACCESS(PORTD,3)
// PORTD<RD4>
extern volatile __bit                   RD4                 __at(0x7C1C);	// @ (0xF83 * 8 + 4)
#define                                 RD4_bit             _BIT_ACCESS(PORTD,4)
// PORTD<RD5>
extern volatile __bit                   RD5                 __at(0x7C1D);	// @ (0xF83 * 8 + 5)
#define                                 RD5_bit             _BIT_ACCESS(PORTD,5)
// PORTD<RD6>
extern volatile __bit                   RD6                 __at(0x7C1E);	// @ (0xF83 * 8 + 6)
#define                                 RD6_bit             _BIT_ACCESS(PORTD,6)
// PORTD<RD7>
extern volatile __bit                   RD7                 __at(0x7C1F);	// @ (0xF83 * 8 + 7)
#define                                 RD7_bit             _BIT_ACCESS(PORTD,7)
// PORTE<RDE>
extern volatile __bit                   RDE                 __at(0x7C20);	// @ (0xF84 * 8 + 0)
#define                                 RDE_bit             _BIT_ACCESS(PORTE,0)
// PADCFG1<RDPU>
extern volatile __bit                   RDPU                __at(0x7AA7);	// @ (0xF54 * 8 + 7)
#define                                 RDPU_bit            _BIT_ACCESS(PADCFG1,7)
// PORTE<RE0>
extern volatile __bit                   RE0                 __at(0x7C20);	// @ (0xF84 * 8 + 0)
#define                                 RE0_bit             _BIT_ACCESS(PORTE,0)
// PORTE<RE1>
extern volatile __bit                   RE1                 __at(0x7C21);	// @ (0xF84 * 8 + 1)
#define                                 RE1_bit             _BIT_ACCESS(PORTE,1)
// PORTE<RE2>
extern volatile __bit                   RE2                 __at(0x7C22);	// @ (0xF84 * 8 + 2)
#define                                 RE2_bit             _BIT_ACCESS(PORTE,2)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x7C23);	// @ (0xF84 * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// PORTE<RE4>
extern volatile __bit                   RE4                 __at(0x7C24);	// @ (0xF84 * 8 + 4)
#define                                 RE4_bit             _BIT_ACCESS(PORTE,4)
// PORTE<RE5>
extern volatile __bit                   RE5                 __at(0x7C25);	// @ (0xF84 * 8 + 5)
#define                                 RE5_bit             _BIT_ACCESS(PORTE,5)
// PORTE<RE6>
extern volatile __bit                   RE6                 __at(0x7C26);	// @ (0xF84 * 8 + 6)
#define                                 RE6_bit             _BIT_ACCESS(PORTE,6)
// PORTE<RE7>
extern volatile __bit                   RE7                 __at(0x7C27);	// @ (0xF84 * 8 + 7)
#define                                 RE7_bit             _BIT_ACCESS(PORTE,7)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<READ_WRITE2>
extern volatile __bit                   READ_WRITE2         __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 READ_WRITE2_bit     _BIT_ACCESS(SSP2STAT,2)
// PMD3<REFO1MD>
extern volatile __bit                   REFO1MD             __at(0x7789);	// @ (0xEF1 * 8 + 1)
#define                                 REFO1MD_bit         _BIT_ACCESS(PMD3,1)
// PMD3<REFO2MD>
extern volatile __bit                   REFO2MD             __at(0x7788);	// @ (0xEF1 * 8 + 0)
#define                                 REFO2MD_bit         _BIT_ACCESS(PMD3,0)
// DSCONL<RELEASE>
extern volatile __bit                   RELEASE             __at(0x7940);	// @ (0xF28 * 8 + 0)
#define                                 RELEASE_bit         _BIT_ACCESS(DSCONL,0)
// PADCFG1<REPU>
extern volatile __bit                   REPU                __at(0x7AA6);	// @ (0xF54 * 8 + 6)
#define                                 REPU_bit            _BIT_ACCESS(PADCFG1,6)
// UCON<RESUME>
extern volatile __bit                   RESUME              __at(0x7BAA);	// @ (0xF75 * 8 + 2)
#define                                 RESUME_bit          _BIT_ACCESS(UCON,2)
// PORTF<RF2>
extern volatile __bit                   RF2                 __at(0x7C2A);	// @ (0xF85 * 8 + 2)
#define                                 RF2_bit             _BIT_ACCESS(PORTF,2)
// PORTF<RF3>
extern volatile __bit                   RF3                 __at(0x7C2B);	// @ (0xF85 * 8 + 3)
#define                                 RF3_bit             _BIT_ACCESS(PORTF,3)
// PORTF<RF4>
extern volatile __bit                   RF4                 __at(0x7C2C);	// @ (0xF85 * 8 + 4)
#define                                 RF4_bit             _BIT_ACCESS(PORTF,4)
// PORTF<RF5>
extern volatile __bit                   RF5                 __at(0x7C2D);	// @ (0xF85 * 8 + 5)
#define                                 RF5_bit             _BIT_ACCESS(PORTF,5)
// PORTF<RF6>
extern volatile __bit                   RF6                 __at(0x7C2E);	// @ (0xF85 * 8 + 6)
#define                                 RF6_bit             _BIT_ACCESS(PORTF,6)
// PORTF<RF7>
extern volatile __bit                   RF7                 __at(0x7C2F);	// @ (0xF85 * 8 + 7)
#define                                 RF7_bit             _BIT_ACCESS(PORTF,7)
// PADCFG1<RFPU>
extern volatile __bit                   RFPU                __at(0x7AA5);	// @ (0xF54 * 8 + 5)
#define                                 RFPU_bit            _BIT_ACCESS(PADCFG1,5)
// PORTG<RG0>
extern volatile __bit                   RG0                 __at(0x7C30);	// @ (0xF86 * 8 + 0)
#define                                 RG0_bit             _BIT_ACCESS(PORTG,0)
// PORTG<RG1>
extern volatile __bit                   RG1                 __at(0x7C31);	// @ (0xF86 * 8 + 1)
#define                                 RG1_bit             _BIT_ACCESS(PORTG,1)
// PORTG<RG2>
extern volatile __bit                   RG2                 __at(0x7C32);	// @ (0xF86 * 8 + 2)
#define                                 RG2_bit             _BIT_ACCESS(PORTG,2)
// PORTG<RG3>
extern volatile __bit                   RG3                 __at(0x7C33);	// @ (0xF86 * 8 + 3)
#define                                 RG3_bit             _BIT_ACCESS(PORTG,3)
// PORTG<RG4>
extern volatile __bit                   RG4                 __at(0x7C34);	// @ (0xF86 * 8 + 4)
#define                                 RG4_bit             _BIT_ACCESS(PORTG,4)
// PADCFG1<RGPU>
extern volatile __bit                   RGPU                __at(0x7AA4);	// @ (0xF54 * 8 + 4)
#define                                 RGPU_bit            _BIT_ACCESS(PADCFG1,4)
// PORTH<RH0>
extern volatile __bit                   RH0                 __at(0x7C38);	// @ (0xF87 * 8 + 0)
#define                                 RH0_bit             _BIT_ACCESS(PORTH,0)
// PORTH<RH1>
extern volatile __bit                   RH1                 __at(0x7C39);	// @ (0xF87 * 8 + 1)
#define                                 RH1_bit             _BIT_ACCESS(PORTH,1)
// PORTH<RH2>
extern volatile __bit                   RH2                 __at(0x7C3A);	// @ (0xF87 * 8 + 2)
#define                                 RH2_bit             _BIT_ACCESS(PORTH,2)
// PORTH<RH3>
extern volatile __bit                   RH3                 __at(0x7C3B);	// @ (0xF87 * 8 + 3)
#define                                 RH3_bit             _BIT_ACCESS(PORTH,3)
// PORTH<RH4>
extern volatile __bit                   RH4                 __at(0x7C3C);	// @ (0xF87 * 8 + 4)
#define                                 RH4_bit             _BIT_ACCESS(PORTH,4)
// PORTH<RH5>
extern volatile __bit                   RH5                 __at(0x7C3D);	// @ (0xF87 * 8 + 5)
#define                                 RH5_bit             _BIT_ACCESS(PORTH,5)
// PORTH<RH6>
extern volatile __bit                   RH6                 __at(0x7C3E);	// @ (0xF87 * 8 + 6)
#define                                 RH6_bit             _BIT_ACCESS(PORTH,6)
// PORTH<RH7>
extern volatile __bit                   RH7                 __at(0x7C3F);	// @ (0xF87 * 8 + 7)
#define                                 RH7_bit             _BIT_ACCESS(PORTH,7)
// PADCFG1<RHPU>
extern volatile __bit                   RHPU                __at(0x7AA3);	// @ (0xF54 * 8 + 3)
#define                                 RHPU_bit            _BIT_ACCESS(PADCFG1,3)
// RCON<RI>
extern volatile __bit                   RI                  __at(0x7E84);	// @ (0xFD0 * 8 + 4)
#define                                 RI_bit              _BIT_ACCESS(RCON,4)
// PORTJ<RJ0>
extern volatile __bit                   RJ0                 __at(0x7C40);	// @ (0xF88 * 8 + 0)
#define                                 RJ0_bit             _BIT_ACCESS(PORTJ,0)
// PORTJ<RJ1>
extern volatile __bit                   RJ1                 __at(0x7C41);	// @ (0xF88 * 8 + 1)
#define                                 RJ1_bit             _BIT_ACCESS(PORTJ,1)
// PORTJ<RJ2>
extern volatile __bit                   RJ2                 __at(0x7C42);	// @ (0xF88 * 8 + 2)
#define                                 RJ2_bit             _BIT_ACCESS(PORTJ,2)
// PORTJ<RJ3>
extern volatile __bit                   RJ3                 __at(0x7C43);	// @ (0xF88 * 8 + 3)
#define                                 RJ3_bit             _BIT_ACCESS(PORTJ,3)
// PORTJ<RJ4>
extern volatile __bit                   RJ4                 __at(0x7C44);	// @ (0xF88 * 8 + 4)
#define                                 RJ4_bit             _BIT_ACCESS(PORTJ,4)
// PORTJ<RJ5>
extern volatile __bit                   RJ5                 __at(0x7C45);	// @ (0xF88 * 8 + 5)
#define                                 RJ5_bit             _BIT_ACCESS(PORTJ,5)
// PORTJ<RJ6>
extern volatile __bit                   RJ6                 __at(0x7C46);	// @ (0xF88 * 8 + 6)
#define                                 RJ6_bit             _BIT_ACCESS(PORTJ,6)
// PORTJ<RJ7>
extern volatile __bit                   RJ7                 __at(0x7C47);	// @ (0xF88 * 8 + 7)
#define                                 RJ7_bit             _BIT_ACCESS(PORTJ,7)
// PADCFG1<RKPU>
extern volatile __bit                   RKPU                __at(0x7AA1);	// @ (0xF54 * 8 + 1)
#define                                 RKPU_bit            _BIT_ACCESS(PADCFG1,1)
// PADCFG1<RLPU>
extern volatile __bit                   RLPU                __at(0x7AA0);	// @ (0xF54 * 8 + 0)
#define                                 RLPU_bit            _BIT_ACCESS(PADCFG1,0)
// RPOR0_1<RPO0R0>
extern volatile __bit                   RPO0R0              __at(0x7090);	// @ (0xE12 * 8 + 0)
#define                                 RPO0R0_bit          _BIT_ACCESS(RPOR0_1,0)
// RPOR0_1<RPO0R1>
extern volatile __bit                   RPO0R1              __at(0x7091);	// @ (0xE12 * 8 + 1)
#define                                 RPO0R1_bit          _BIT_ACCESS(RPOR0_1,1)
// RPOR0_1<RPO0R2>
extern volatile __bit                   RPO0R2              __at(0x7092);	// @ (0xE12 * 8 + 2)
#define                                 RPO0R2_bit          _BIT_ACCESS(RPOR0_1,2)
// RPOR0_1<RPO0R3>
extern volatile __bit                   RPO0R3              __at(0x7093);	// @ (0xE12 * 8 + 3)
#define                                 RPO0R3_bit          _BIT_ACCESS(RPOR0_1,3)
// RPOR10_11<RPO10R0>
extern volatile __bit                   RPO10R0             __at(0x70B8);	// @ (0xE17 * 8 + 0)
#define                                 RPO10R0_bit         _BIT_ACCESS(RPOR10_11,0)
// RPOR10_11<RPO10R1>
extern volatile __bit                   RPO10R1             __at(0x70B9);	// @ (0xE17 * 8 + 1)
#define                                 RPO10R1_bit         _BIT_ACCESS(RPOR10_11,1)
// RPOR10_11<RPO10R2>
extern volatile __bit                   RPO10R2             __at(0x70BA);	// @ (0xE17 * 8 + 2)
#define                                 RPO10R2_bit         _BIT_ACCESS(RPOR10_11,2)
// RPOR10_11<RPO10R3>
extern volatile __bit                   RPO10R3             __at(0x70BB);	// @ (0xE17 * 8 + 3)
#define                                 RPO10R3_bit         _BIT_ACCESS(RPOR10_11,3)
// RPOR10_11<RPO11R0>
extern volatile __bit                   RPO11R0             __at(0x70BC);	// @ (0xE17 * 8 + 4)
#define                                 RPO11R0_bit         _BIT_ACCESS(RPOR10_11,4)
// RPOR10_11<RPO11R1>
extern volatile __bit                   RPO11R1             __at(0x70BD);	// @ (0xE17 * 8 + 5)
#define                                 RPO11R1_bit         _BIT_ACCESS(RPOR10_11,5)
// RPOR10_11<RPO11R2>
extern volatile __bit                   RPO11R2             __at(0x70BE);	// @ (0xE17 * 8 + 6)
#define                                 RPO11R2_bit         _BIT_ACCESS(RPOR10_11,6)
// RPOR10_11<RPO11R3>
extern volatile __bit                   RPO11R3             __at(0x70BF);	// @ (0xE17 * 8 + 7)
#define                                 RPO11R3_bit         _BIT_ACCESS(RPOR10_11,7)
// RPOR12_13<RPO12R0>
extern volatile __bit                   RPO12R0             __at(0x70C0);	// @ (0xE18 * 8 + 0)
#define                                 RPO12R0_bit         _BIT_ACCESS(RPOR12_13,0)
// RPOR12_13<RPO12R1>
extern volatile __bit                   RPO12R1             __at(0x70C1);	// @ (0xE18 * 8 + 1)
#define                                 RPO12R1_bit         _BIT_ACCESS(RPOR12_13,1)
// RPOR12_13<RPO12R2>
extern volatile __bit                   RPO12R2             __at(0x70C2);	// @ (0xE18 * 8 + 2)
#define                                 RPO12R2_bit         _BIT_ACCESS(RPOR12_13,2)
// RPOR12_13<RPO12R3>
extern volatile __bit                   RPO12R3             __at(0x70C3);	// @ (0xE18 * 8 + 3)
#define                                 RPO12R3_bit         _BIT_ACCESS(RPOR12_13,3)
// RPOR12_13<RPO13R0>
extern volatile __bit                   RPO13R0             __at(0x70C4);	// @ (0xE18 * 8 + 4)
#define                                 RPO13R0_bit         _BIT_ACCESS(RPOR12_13,4)
// RPOR12_13<RPO13R1>
extern volatile __bit                   RPO13R1             __at(0x70C5);	// @ (0xE18 * 8 + 5)
#define                                 RPO13R1_bit         _BIT_ACCESS(RPOR12_13,5)
// RPOR12_13<RPO13R2>
extern volatile __bit                   RPO13R2             __at(0x70C6);	// @ (0xE18 * 8 + 6)
#define                                 RPO13R2_bit         _BIT_ACCESS(RPOR12_13,6)
// RPOR12_13<RPO13R3>
extern volatile __bit                   RPO13R3             __at(0x70C7);	// @ (0xE18 * 8 + 7)
#define                                 RPO13R3_bit         _BIT_ACCESS(RPOR12_13,7)
// RPOR14_15<RPO14R0>
extern volatile __bit                   RPO14R0             __at(0x70C8);	// @ (0xE19 * 8 + 0)
#define                                 RPO14R0_bit         _BIT_ACCESS(RPOR14_15,0)
// RPOR14_15<RPO14R1>
extern volatile __bit                   RPO14R1             __at(0x70C9);	// @ (0xE19 * 8 + 1)
#define                                 RPO14R1_bit         _BIT_ACCESS(RPOR14_15,1)
// RPOR14_15<RPO14R2>
extern volatile __bit                   RPO14R2             __at(0x70CA);	// @ (0xE19 * 8 + 2)
#define                                 RPO14R2_bit         _BIT_ACCESS(RPOR14_15,2)
// RPOR14_15<RPO14R3>
extern volatile __bit                   RPO14R3             __at(0x70CB);	// @ (0xE19 * 8 + 3)
#define                                 RPO14R3_bit         _BIT_ACCESS(RPOR14_15,3)
// RPOR14_15<RPO15R0>
extern volatile __bit                   RPO15R0             __at(0x70CC);	// @ (0xE19 * 8 + 4)
#define                                 RPO15R0_bit         _BIT_ACCESS(RPOR14_15,4)
// RPOR14_15<RPO15R1>
extern volatile __bit                   RPO15R1             __at(0x70CD);	// @ (0xE19 * 8 + 5)
#define                                 RPO15R1_bit         _BIT_ACCESS(RPOR14_15,5)
// RPOR14_15<RPO15R2>
extern volatile __bit                   RPO15R2             __at(0x70CE);	// @ (0xE19 * 8 + 6)
#define                                 RPO15R2_bit         _BIT_ACCESS(RPOR14_15,6)
// RPOR14_15<RPO15R3>
extern volatile __bit                   RPO15R3             __at(0x70CF);	// @ (0xE19 * 8 + 7)
#define                                 RPO15R3_bit         _BIT_ACCESS(RPOR14_15,7)
// RPOR16_17<RPO16R0>
extern volatile __bit                   RPO16R0             __at(0x70D0);	// @ (0xE1A * 8 + 0)
#define                                 RPO16R0_bit         _BIT_ACCESS(RPOR16_17,0)
// RPOR16_17<RPO16R1>
extern volatile __bit                   RPO16R1             __at(0x70D1);	// @ (0xE1A * 8 + 1)
#define                                 RPO16R1_bit         _BIT_ACCESS(RPOR16_17,1)
// RPOR16_17<RPO16R2>
extern volatile __bit                   RPO16R2             __at(0x70D2);	// @ (0xE1A * 8 + 2)
#define                                 RPO16R2_bit         _BIT_ACCESS(RPOR16_17,2)
// RPOR16_17<RPO16R3>
extern volatile __bit                   RPO16R3             __at(0x70D3);	// @ (0xE1A * 8 + 3)
#define                                 RPO16R3_bit         _BIT_ACCESS(RPOR16_17,3)
// RPOR16_17<RPO17R0>
extern volatile __bit                   RPO17R0             __at(0x70D4);	// @ (0xE1A * 8 + 4)
#define                                 RPO17R0_bit         _BIT_ACCESS(RPOR16_17,4)
// RPOR16_17<RPO17R1>
extern volatile __bit                   RPO17R1             __at(0x70D5);	// @ (0xE1A * 8 + 5)
#define                                 RPO17R1_bit         _BIT_ACCESS(RPOR16_17,5)
// RPOR16_17<RPO17R2>
extern volatile __bit                   RPO17R2             __at(0x70D6);	// @ (0xE1A * 8 + 6)
#define                                 RPO17R2_bit         _BIT_ACCESS(RPOR16_17,6)
// RPOR16_17<RPO17R3>
extern volatile __bit                   RPO17R3             __at(0x70D7);	// @ (0xE1A * 8 + 7)
#define                                 RPO17R3_bit         _BIT_ACCESS(RPOR16_17,7)
// RPOR18_19<RPO18R0>
extern volatile __bit                   RPO18R0             __at(0x70D8);	// @ (0xE1B * 8 + 0)
#define                                 RPO18R0_bit         _BIT_ACCESS(RPOR18_19,0)
// RPOR18_19<RPO18R1>
extern volatile __bit                   RPO18R1             __at(0x70D9);	// @ (0xE1B * 8 + 1)
#define                                 RPO18R1_bit         _BIT_ACCESS(RPOR18_19,1)
// RPOR18_19<RPO18R2>
extern volatile __bit                   RPO18R2             __at(0x70DA);	// @ (0xE1B * 8 + 2)
#define                                 RPO18R2_bit         _BIT_ACCESS(RPOR18_19,2)
// RPOR18_19<RPO18R3>
extern volatile __bit                   RPO18R3             __at(0x70DB);	// @ (0xE1B * 8 + 3)
#define                                 RPO18R3_bit         _BIT_ACCESS(RPOR18_19,3)
// RPOR18_19<RPO19R0>
extern volatile __bit                   RPO19R0             __at(0x70DC);	// @ (0xE1B * 8 + 4)
#define                                 RPO19R0_bit         _BIT_ACCESS(RPOR18_19,4)
// RPOR18_19<RPO19R1>
extern volatile __bit                   RPO19R1             __at(0x70DD);	// @ (0xE1B * 8 + 5)
#define                                 RPO19R1_bit         _BIT_ACCESS(RPOR18_19,5)
// RPOR18_19<RPO19R2>
extern volatile __bit                   RPO19R2             __at(0x70DE);	// @ (0xE1B * 8 + 6)
#define                                 RPO19R2_bit         _BIT_ACCESS(RPOR18_19,6)
// RPOR18_19<RPO19R3>
extern volatile __bit                   RPO19R3             __at(0x70DF);	// @ (0xE1B * 8 + 7)
#define                                 RPO19R3_bit         _BIT_ACCESS(RPOR18_19,7)
// RPOR0_1<RPO1R0>
extern volatile __bit                   RPO1R0              __at(0x7094);	// @ (0xE12 * 8 + 4)
#define                                 RPO1R0_bit          _BIT_ACCESS(RPOR0_1,4)
// RPOR0_1<RPO1R1>
extern volatile __bit                   RPO1R1              __at(0x7095);	// @ (0xE12 * 8 + 5)
#define                                 RPO1R1_bit          _BIT_ACCESS(RPOR0_1,5)
// RPOR0_1<RPO1R2>
extern volatile __bit                   RPO1R2              __at(0x7096);	// @ (0xE12 * 8 + 6)
#define                                 RPO1R2_bit          _BIT_ACCESS(RPOR0_1,6)
// RPOR0_1<RPO1R3>
extern volatile __bit                   RPO1R3              __at(0x7097);	// @ (0xE12 * 8 + 7)
#define                                 RPO1R3_bit          _BIT_ACCESS(RPOR0_1,7)
// RPOR20_21<RPO20R0>
extern volatile __bit                   RPO20R0             __at(0x70E0);	// @ (0xE1C * 8 + 0)
#define                                 RPO20R0_bit         _BIT_ACCESS(RPOR20_21,0)
// RPOR20_21<RPO20R1>
extern volatile __bit                   RPO20R1             __at(0x70E1);	// @ (0xE1C * 8 + 1)
#define                                 RPO20R1_bit         _BIT_ACCESS(RPOR20_21,1)
// RPOR20_21<RPO20R2>
extern volatile __bit                   RPO20R2             __at(0x70E2);	// @ (0xE1C * 8 + 2)
#define                                 RPO20R2_bit         _BIT_ACCESS(RPOR20_21,2)
// RPOR20_21<RPO20R3>
extern volatile __bit                   RPO20R3             __at(0x70E3);	// @ (0xE1C * 8 + 3)
#define                                 RPO20R3_bit         _BIT_ACCESS(RPOR20_21,3)
// RPOR20_21<RPO21R0>
extern volatile __bit                   RPO21R0             __at(0x70E4);	// @ (0xE1C * 8 + 4)
#define                                 RPO21R0_bit         _BIT_ACCESS(RPOR20_21,4)
// RPOR20_21<RPO21R1>
extern volatile __bit                   RPO21R1             __at(0x70E5);	// @ (0xE1C * 8 + 5)
#define                                 RPO21R1_bit         _BIT_ACCESS(RPOR20_21,5)
// RPOR20_21<RPO21R2>
extern volatile __bit                   RPO21R2             __at(0x70E6);	// @ (0xE1C * 8 + 6)
#define                                 RPO21R2_bit         _BIT_ACCESS(RPOR20_21,6)
// RPOR20_21<RPO21R3>
extern volatile __bit                   RPO21R3             __at(0x70E7);	// @ (0xE1C * 8 + 7)
#define                                 RPO21R3_bit         _BIT_ACCESS(RPOR20_21,7)
// RPOR22_23<RPO22R0>
extern volatile __bit                   RPO22R0             __at(0x70E8);	// @ (0xE1D * 8 + 0)
#define                                 RPO22R0_bit         _BIT_ACCESS(RPOR22_23,0)
// RPOR22_23<RPO22R1>
extern volatile __bit                   RPO22R1             __at(0x70E9);	// @ (0xE1D * 8 + 1)
#define                                 RPO22R1_bit         _BIT_ACCESS(RPOR22_23,1)
// RPOR22_23<RPO22R2>
extern volatile __bit                   RPO22R2             __at(0x70EA);	// @ (0xE1D * 8 + 2)
#define                                 RPO22R2_bit         _BIT_ACCESS(RPOR22_23,2)
// RPOR22_23<RPO22R3>
extern volatile __bit                   RPO22R3             __at(0x70EB);	// @ (0xE1D * 8 + 3)
#define                                 RPO22R3_bit         _BIT_ACCESS(RPOR22_23,3)
// RPOR22_23<RPO23R0>
extern volatile __bit                   RPO23R0             __at(0x70EC);	// @ (0xE1D * 8 + 4)
#define                                 RPO23R0_bit         _BIT_ACCESS(RPOR22_23,4)
// RPOR22_23<RPO23R1>
extern volatile __bit                   RPO23R1             __at(0x70ED);	// @ (0xE1D * 8 + 5)
#define                                 RPO23R1_bit         _BIT_ACCESS(RPOR22_23,5)
// RPOR22_23<RPO23R2>
extern volatile __bit                   RPO23R2             __at(0x70EE);	// @ (0xE1D * 8 + 6)
#define                                 RPO23R2_bit         _BIT_ACCESS(RPOR22_23,6)
// RPOR22_23<RPO23R3>
extern volatile __bit                   RPO23R3             __at(0x70EF);	// @ (0xE1D * 8 + 7)
#define                                 RPO23R3_bit         _BIT_ACCESS(RPOR22_23,7)
// RPOR24_25<RPO24R0>
extern volatile __bit                   RPO24R0             __at(0x70F0);	// @ (0xE1E * 8 + 0)
#define                                 RPO24R0_bit         _BIT_ACCESS(RPOR24_25,0)
// RPOR24_25<RPO24R1>
extern volatile __bit                   RPO24R1             __at(0x70F1);	// @ (0xE1E * 8 + 1)
#define                                 RPO24R1_bit         _BIT_ACCESS(RPOR24_25,1)
// RPOR24_25<RPO24R2>
extern volatile __bit                   RPO24R2             __at(0x70F2);	// @ (0xE1E * 8 + 2)
#define                                 RPO24R2_bit         _BIT_ACCESS(RPOR24_25,2)
// RPOR24_25<RPO24R3>
extern volatile __bit                   RPO24R3             __at(0x70F3);	// @ (0xE1E * 8 + 3)
#define                                 RPO24R3_bit         _BIT_ACCESS(RPOR24_25,3)
// RPOR24_25<RPO25R0>
extern volatile __bit                   RPO25R0             __at(0x70F4);	// @ (0xE1E * 8 + 4)
#define                                 RPO25R0_bit         _BIT_ACCESS(RPOR24_25,4)
// RPOR24_25<RPO25R1>
extern volatile __bit                   RPO25R1             __at(0x70F5);	// @ (0xE1E * 8 + 5)
#define                                 RPO25R1_bit         _BIT_ACCESS(RPOR24_25,5)
// RPOR24_25<RPO25R2>
extern volatile __bit                   RPO25R2             __at(0x70F6);	// @ (0xE1E * 8 + 6)
#define                                 RPO25R2_bit         _BIT_ACCESS(RPOR24_25,6)
// RPOR24_25<RPO25R3>
extern volatile __bit                   RPO25R3             __at(0x70F7);	// @ (0xE1E * 8 + 7)
#define                                 RPO25R3_bit         _BIT_ACCESS(RPOR24_25,7)
// RPOR26_27<RPO26R0>
extern volatile __bit                   RPO26R0             __at(0x70F8);	// @ (0xE1F * 8 + 0)
#define                                 RPO26R0_bit         _BIT_ACCESS(RPOR26_27,0)
// RPOR26_27<RPO26R1>
extern volatile __bit                   RPO26R1             __at(0x70F9);	// @ (0xE1F * 8 + 1)
#define                                 RPO26R1_bit         _BIT_ACCESS(RPOR26_27,1)
// RPOR26_27<RPO26R2>
extern volatile __bit                   RPO26R2             __at(0x70FA);	// @ (0xE1F * 8 + 2)
#define                                 RPO26R2_bit         _BIT_ACCESS(RPOR26_27,2)
// RPOR26_27<RPO26R3>
extern volatile __bit                   RPO26R3             __at(0x70FB);	// @ (0xE1F * 8 + 3)
#define                                 RPO26R3_bit         _BIT_ACCESS(RPOR26_27,3)
// RPOR26_27<RPO27R0>
extern volatile __bit                   RPO27R0             __at(0x70FC);	// @ (0xE1F * 8 + 4)
#define                                 RPO27R0_bit         _BIT_ACCESS(RPOR26_27,4)
// RPOR26_27<RPO27R1>
extern volatile __bit                   RPO27R1             __at(0x70FD);	// @ (0xE1F * 8 + 5)
#define                                 RPO27R1_bit         _BIT_ACCESS(RPOR26_27,5)
// RPOR26_27<RPO27R2>
extern volatile __bit                   RPO27R2             __at(0x70FE);	// @ (0xE1F * 8 + 6)
#define                                 RPO27R2_bit         _BIT_ACCESS(RPOR26_27,6)
// RPOR26_27<RPO27R3>
extern volatile __bit                   RPO27R3             __at(0x70FF);	// @ (0xE1F * 8 + 7)
#define                                 RPO27R3_bit         _BIT_ACCESS(RPOR26_27,7)
// RPOR28_29<RPO28R0>
extern volatile __bit                   RPO28R0             __at(0x7100);	// @ (0xE20 * 8 + 0)
#define                                 RPO28R0_bit         _BIT_ACCESS(RPOR28_29,0)
// RPOR28_29<RPO28R1>
extern volatile __bit                   RPO28R1             __at(0x7101);	// @ (0xE20 * 8 + 1)
#define                                 RPO28R1_bit         _BIT_ACCESS(RPOR28_29,1)
// RPOR28_29<RPO28R2>
extern volatile __bit                   RPO28R2             __at(0x7102);	// @ (0xE20 * 8 + 2)
#define                                 RPO28R2_bit         _BIT_ACCESS(RPOR28_29,2)
// RPOR28_29<RPO28R3>
extern volatile __bit                   RPO28R3             __at(0x7103);	// @ (0xE20 * 8 + 3)
#define                                 RPO28R3_bit         _BIT_ACCESS(RPOR28_29,3)
// RPOR28_29<RPO29R0>
extern volatile __bit                   RPO29R0             __at(0x7104);	// @ (0xE20 * 8 + 4)
#define                                 RPO29R0_bit         _BIT_ACCESS(RPOR28_29,4)
// RPOR28_29<RPO29R1>
extern volatile __bit                   RPO29R1             __at(0x7105);	// @ (0xE20 * 8 + 5)
#define                                 RPO29R1_bit         _BIT_ACCESS(RPOR28_29,5)
// RPOR28_29<RPO29R2>
extern volatile __bit                   RPO29R2             __at(0x7106);	// @ (0xE20 * 8 + 6)
#define                                 RPO29R2_bit         _BIT_ACCESS(RPOR28_29,6)
// RPOR28_29<RPO29R3>
extern volatile __bit                   RPO29R3             __at(0x7107);	// @ (0xE20 * 8 + 7)
#define                                 RPO29R3_bit         _BIT_ACCESS(RPOR28_29,7)
// RPOR2_3<RPO2R0>
extern volatile __bit                   RPO2R0              __at(0x7098);	// @ (0xE13 * 8 + 0)
#define                                 RPO2R0_bit          _BIT_ACCESS(RPOR2_3,0)
// RPOR2_3<RPO2R1>
extern volatile __bit                   RPO2R1              __at(0x7099);	// @ (0xE13 * 8 + 1)
#define                                 RPO2R1_bit          _BIT_ACCESS(RPOR2_3,1)
// RPOR2_3<RPO2R2>
extern volatile __bit                   RPO2R2              __at(0x709A);	// @ (0xE13 * 8 + 2)
#define                                 RPO2R2_bit          _BIT_ACCESS(RPOR2_3,2)
// RPOR2_3<RPO2R3>
extern volatile __bit                   RPO2R3              __at(0x709B);	// @ (0xE13 * 8 + 3)
#define                                 RPO2R3_bit          _BIT_ACCESS(RPOR2_3,3)
// RPOR30_31<RPO30R0>
extern volatile __bit                   RPO30R0             __at(0x7108);	// @ (0xE21 * 8 + 0)
#define                                 RPO30R0_bit         _BIT_ACCESS(RPOR30_31,0)
// RPOR30_31<RPO30R1>
extern volatile __bit                   RPO30R1             __at(0x7109);	// @ (0xE21 * 8 + 1)
#define                                 RPO30R1_bit         _BIT_ACCESS(RPOR30_31,1)
// RPOR30_31<RPO30R2>
extern volatile __bit                   RPO30R2             __at(0x710A);	// @ (0xE21 * 8 + 2)
#define                                 RPO30R2_bit         _BIT_ACCESS(RPOR30_31,2)
// RPOR30_31<RPO30R3>
extern volatile __bit                   RPO30R3             __at(0x710B);	// @ (0xE21 * 8 + 3)
#define                                 RPO30R3_bit         _BIT_ACCESS(RPOR30_31,3)
// RPOR30_31<RPO31R0>
extern volatile __bit                   RPO31R0             __at(0x710C);	// @ (0xE21 * 8 + 4)
#define                                 RPO31R0_bit         _BIT_ACCESS(RPOR30_31,4)
// RPOR30_31<RPO31R1>
extern volatile __bit                   RPO31R1             __at(0x710D);	// @ (0xE21 * 8 + 5)
#define                                 RPO31R1_bit         _BIT_ACCESS(RPOR30_31,5)
// RPOR30_31<RPO31R2>
extern volatile __bit                   RPO31R2             __at(0x710E);	// @ (0xE21 * 8 + 6)
#define                                 RPO31R2_bit         _BIT_ACCESS(RPOR30_31,6)
// RPOR30_31<RPO31R3>
extern volatile __bit                   RPO31R3             __at(0x710F);	// @ (0xE21 * 8 + 7)
#define                                 RPO31R3_bit         _BIT_ACCESS(RPOR30_31,7)
// RPOR32_33<RPO32R0>
extern volatile __bit                   RPO32R0             __at(0x7110);	// @ (0xE22 * 8 + 0)
#define                                 RPO32R0_bit         _BIT_ACCESS(RPOR32_33,0)
// RPOR32_33<RPO32R1>
extern volatile __bit                   RPO32R1             __at(0x7111);	// @ (0xE22 * 8 + 1)
#define                                 RPO32R1_bit         _BIT_ACCESS(RPOR32_33,1)
// RPOR32_33<RPO32R2>
extern volatile __bit                   RPO32R2             __at(0x7112);	// @ (0xE22 * 8 + 2)
#define                                 RPO32R2_bit         _BIT_ACCESS(RPOR32_33,2)
// RPOR32_33<RPO32R3>
extern volatile __bit                   RPO32R3             __at(0x7113);	// @ (0xE22 * 8 + 3)
#define                                 RPO32R3_bit         _BIT_ACCESS(RPOR32_33,3)
// RPOR32_33<RPO33R0>
extern volatile __bit                   RPO33R0             __at(0x7114);	// @ (0xE22 * 8 + 4)
#define                                 RPO33R0_bit         _BIT_ACCESS(RPOR32_33,4)
// RPOR32_33<RPO33R1>
extern volatile __bit                   RPO33R1             __at(0x7115);	// @ (0xE22 * 8 + 5)
#define                                 RPO33R1_bit         _BIT_ACCESS(RPOR32_33,5)
// RPOR32_33<RPO33R2>
extern volatile __bit                   RPO33R2             __at(0x7116);	// @ (0xE22 * 8 + 6)
#define                                 RPO33R2_bit         _BIT_ACCESS(RPOR32_33,6)
// RPOR32_33<RPO33R3>
extern volatile __bit                   RPO33R3             __at(0x7117);	// @ (0xE22 * 8 + 7)
#define                                 RPO33R3_bit         _BIT_ACCESS(RPOR32_33,7)
// RPOR34_35<RPO34R0>
extern volatile __bit                   RPO34R0             __at(0x7118);	// @ (0xE23 * 8 + 0)
#define                                 RPO34R0_bit         _BIT_ACCESS(RPOR34_35,0)
// RPOR34_35<RPO34R1>
extern volatile __bit                   RPO34R1             __at(0x7119);	// @ (0xE23 * 8 + 1)
#define                                 RPO34R1_bit         _BIT_ACCESS(RPOR34_35,1)
// RPOR34_35<RPO34R2>
extern volatile __bit                   RPO34R2             __at(0x711A);	// @ (0xE23 * 8 + 2)
#define                                 RPO34R2_bit         _BIT_ACCESS(RPOR34_35,2)
// RPOR34_35<RPO34R3>
extern volatile __bit                   RPO34R3             __at(0x711B);	// @ (0xE23 * 8 + 3)
#define                                 RPO34R3_bit         _BIT_ACCESS(RPOR34_35,3)
// RPOR34_35<RPO35R0>
extern volatile __bit                   RPO35R0             __at(0x711C);	// @ (0xE23 * 8 + 4)
#define                                 RPO35R0_bit         _BIT_ACCESS(RPOR34_35,4)
// RPOR34_35<RPO35R1>
extern volatile __bit                   RPO35R1             __at(0x711D);	// @ (0xE23 * 8 + 5)
#define                                 RPO35R1_bit         _BIT_ACCESS(RPOR34_35,5)
// RPOR34_35<RPO35R2>
extern volatile __bit                   RPO35R2             __at(0x711E);	// @ (0xE23 * 8 + 6)
#define                                 RPO35R2_bit         _BIT_ACCESS(RPOR34_35,6)
// RPOR34_35<RPO35R3>
extern volatile __bit                   RPO35R3             __at(0x711F);	// @ (0xE23 * 8 + 7)
#define                                 RPO35R3_bit         _BIT_ACCESS(RPOR34_35,7)
// RPOR36_37<RPO36R0>
extern volatile __bit                   RPO36R0             __at(0x7120);	// @ (0xE24 * 8 + 0)
#define                                 RPO36R0_bit         _BIT_ACCESS(RPOR36_37,0)
// RPOR36_37<RPO36R1>
extern volatile __bit                   RPO36R1             __at(0x7121);	// @ (0xE24 * 8 + 1)
#define                                 RPO36R1_bit         _BIT_ACCESS(RPOR36_37,1)
// RPOR36_37<RPO36R2>
extern volatile __bit                   RPO36R2             __at(0x7122);	// @ (0xE24 * 8 + 2)
#define                                 RPO36R2_bit         _BIT_ACCESS(RPOR36_37,2)
// RPOR36_37<RPO36R3>
extern volatile __bit                   RPO36R3             __at(0x7123);	// @ (0xE24 * 8 + 3)
#define                                 RPO36R3_bit         _BIT_ACCESS(RPOR36_37,3)
// RPOR36_37<RPO37R0>
extern volatile __bit                   RPO37R0             __at(0x7124);	// @ (0xE24 * 8 + 4)
#define                                 RPO37R0_bit         _BIT_ACCESS(RPOR36_37,4)
// RPOR36_37<RPO37R1>
extern volatile __bit                   RPO37R1             __at(0x7125);	// @ (0xE24 * 8 + 5)
#define                                 RPO37R1_bit         _BIT_ACCESS(RPOR36_37,5)
// RPOR36_37<RPO37R2>
extern volatile __bit                   RPO37R2             __at(0x7126);	// @ (0xE24 * 8 + 6)
#define                                 RPO37R2_bit         _BIT_ACCESS(RPOR36_37,6)
// RPOR36_37<RPO37R3>
extern volatile __bit                   RPO37R3             __at(0x7127);	// @ (0xE24 * 8 + 7)
#define                                 RPO37R3_bit         _BIT_ACCESS(RPOR36_37,7)
// RPOR38_39<RPO38R0>
extern volatile __bit                   RPO38R0             __at(0x7128);	// @ (0xE25 * 8 + 0)
#define                                 RPO38R0_bit         _BIT_ACCESS(RPOR38_39,0)
// RPOR38_39<RPO38R1>
extern volatile __bit                   RPO38R1             __at(0x7129);	// @ (0xE25 * 8 + 1)
#define                                 RPO38R1_bit         _BIT_ACCESS(RPOR38_39,1)
// RPOR38_39<RPO38R2>
extern volatile __bit                   RPO38R2             __at(0x712A);	// @ (0xE25 * 8 + 2)
#define                                 RPO38R2_bit         _BIT_ACCESS(RPOR38_39,2)
// RPOR38_39<RPO38R3>
extern volatile __bit                   RPO38R3             __at(0x712B);	// @ (0xE25 * 8 + 3)
#define                                 RPO38R3_bit         _BIT_ACCESS(RPOR38_39,3)
// RPOR38_39<RPO39R0>
extern volatile __bit                   RPO39R0             __at(0x712C);	// @ (0xE25 * 8 + 4)
#define                                 RPO39R0_bit         _BIT_ACCESS(RPOR38_39,4)
// RPOR38_39<RPO39R1>
extern volatile __bit                   RPO39R1             __at(0x712D);	// @ (0xE25 * 8 + 5)
#define                                 RPO39R1_bit         _BIT_ACCESS(RPOR38_39,5)
// RPOR38_39<RPO39R2>
extern volatile __bit                   RPO39R2             __at(0x712E);	// @ (0xE25 * 8 + 6)
#define                                 RPO39R2_bit         _BIT_ACCESS(RPOR38_39,6)
// RPOR38_39<RPO39R3>
extern volatile __bit                   RPO39R3             __at(0x712F);	// @ (0xE25 * 8 + 7)
#define                                 RPO39R3_bit         _BIT_ACCESS(RPOR38_39,7)
// RPOR2_3<RPO3R0>
extern volatile __bit                   RPO3R0              __at(0x709C);	// @ (0xE13 * 8 + 4)
#define                                 RPO3R0_bit          _BIT_ACCESS(RPOR2_3,4)
// RPOR2_3<RPO3R1>
extern volatile __bit                   RPO3R1              __at(0x709D);	// @ (0xE13 * 8 + 5)
#define                                 RPO3R1_bit          _BIT_ACCESS(RPOR2_3,5)
// RPOR2_3<RPO3R2>
extern volatile __bit                   RPO3R2              __at(0x709E);	// @ (0xE13 * 8 + 6)
#define                                 RPO3R2_bit          _BIT_ACCESS(RPOR2_3,6)
// RPOR2_3<RPO3R3>
extern volatile __bit                   RPO3R3              __at(0x709F);	// @ (0xE13 * 8 + 7)
#define                                 RPO3R3_bit          _BIT_ACCESS(RPOR2_3,7)
// RPOR40_41<RPO40R0>
extern volatile __bit                   RPO40R0             __at(0x7130);	// @ (0xE26 * 8 + 0)
#define                                 RPO40R0_bit         _BIT_ACCESS(RPOR40_41,0)
// RPOR40_41<RPO40R1>
extern volatile __bit                   RPO40R1             __at(0x7131);	// @ (0xE26 * 8 + 1)
#define                                 RPO40R1_bit         _BIT_ACCESS(RPOR40_41,1)
// RPOR40_41<RPO40R2>
extern volatile __bit                   RPO40R2             __at(0x7132);	// @ (0xE26 * 8 + 2)
#define                                 RPO40R2_bit         _BIT_ACCESS(RPOR40_41,2)
// RPOR40_41<RPO40R3>
extern volatile __bit                   RPO40R3             __at(0x7133);	// @ (0xE26 * 8 + 3)
#define                                 RPO40R3_bit         _BIT_ACCESS(RPOR40_41,3)
// RPOR40_41<RPO41R0>
extern volatile __bit                   RPO41R0             __at(0x7134);	// @ (0xE26 * 8 + 4)
#define                                 RPO41R0_bit         _BIT_ACCESS(RPOR40_41,4)
// RPOR40_41<RPO41R1>
extern volatile __bit                   RPO41R1             __at(0x7135);	// @ (0xE26 * 8 + 5)
#define                                 RPO41R1_bit         _BIT_ACCESS(RPOR40_41,5)
// RPOR40_41<RPO41R2>
extern volatile __bit                   RPO41R2             __at(0x7136);	// @ (0xE26 * 8 + 6)
#define                                 RPO41R2_bit         _BIT_ACCESS(RPOR40_41,6)
// RPOR40_41<RPO41R3>
extern volatile __bit                   RPO41R3             __at(0x7137);	// @ (0xE26 * 8 + 7)
#define                                 RPO41R3_bit         _BIT_ACCESS(RPOR40_41,7)
// RPOR42_43<RPO42R0>
extern volatile __bit                   RPO42R0             __at(0x7138);	// @ (0xE27 * 8 + 0)
#define                                 RPO42R0_bit         _BIT_ACCESS(RPOR42_43,0)
// RPOR42_43<RPO42R1>
extern volatile __bit                   RPO42R1             __at(0x7139);	// @ (0xE27 * 8 + 1)
#define                                 RPO42R1_bit         _BIT_ACCESS(RPOR42_43,1)
// RPOR42_43<RPO42R2>
extern volatile __bit                   RPO42R2             __at(0x713A);	// @ (0xE27 * 8 + 2)
#define                                 RPO42R2_bit         _BIT_ACCESS(RPOR42_43,2)
// RPOR42_43<RPO42R3>
extern volatile __bit                   RPO42R3             __at(0x713B);	// @ (0xE27 * 8 + 3)
#define                                 RPO42R3_bit         _BIT_ACCESS(RPOR42_43,3)
// RPOR42_43<RPO43R0>
extern volatile __bit                   RPO43R0             __at(0x713C);	// @ (0xE27 * 8 + 4)
#define                                 RPO43R0_bit         _BIT_ACCESS(RPOR42_43,4)
// RPOR42_43<RPO43R1>
extern volatile __bit                   RPO43R1             __at(0x713D);	// @ (0xE27 * 8 + 5)
#define                                 RPO43R1_bit         _BIT_ACCESS(RPOR42_43,5)
// RPOR42_43<RPO43R2>
extern volatile __bit                   RPO43R2             __at(0x713E);	// @ (0xE27 * 8 + 6)
#define                                 RPO43R2_bit         _BIT_ACCESS(RPOR42_43,6)
// RPOR42_43<RPO43R3>
extern volatile __bit                   RPO43R3             __at(0x713F);	// @ (0xE27 * 8 + 7)
#define                                 RPO43R3_bit         _BIT_ACCESS(RPOR42_43,7)
// RPOR44_45<RPO44R0>
extern volatile __bit                   RPO44R0             __at(0x7140);	// @ (0xE28 * 8 + 0)
#define                                 RPO44R0_bit         _BIT_ACCESS(RPOR44_45,0)
// RPOR44_45<RPO44R1>
extern volatile __bit                   RPO44R1             __at(0x7141);	// @ (0xE28 * 8 + 1)
#define                                 RPO44R1_bit         _BIT_ACCESS(RPOR44_45,1)
// RPOR44_45<RPO44R2>
extern volatile __bit                   RPO44R2             __at(0x7142);	// @ (0xE28 * 8 + 2)
#define                                 RPO44R2_bit         _BIT_ACCESS(RPOR44_45,2)
// RPOR44_45<RPO44R3>
extern volatile __bit                   RPO44R3             __at(0x7143);	// @ (0xE28 * 8 + 3)
#define                                 RPO44R3_bit         _BIT_ACCESS(RPOR44_45,3)
// RPOR44_45<RPO45R0>
extern volatile __bit                   RPO45R0             __at(0x7144);	// @ (0xE28 * 8 + 4)
#define                                 RPO45R0_bit         _BIT_ACCESS(RPOR44_45,4)
// RPOR44_45<RPO45R1>
extern volatile __bit                   RPO45R1             __at(0x7145);	// @ (0xE28 * 8 + 5)
#define                                 RPO45R1_bit         _BIT_ACCESS(RPOR44_45,5)
// RPOR44_45<RPO45R2>
extern volatile __bit                   RPO45R2             __at(0x7146);	// @ (0xE28 * 8 + 6)
#define                                 RPO45R2_bit         _BIT_ACCESS(RPOR44_45,6)
// RPOR44_45<RPO45R3>
extern volatile __bit                   RPO45R3             __at(0x7147);	// @ (0xE28 * 8 + 7)
#define                                 RPO45R3_bit         _BIT_ACCESS(RPOR44_45,7)
// RPOR46<RPO46R0>
extern volatile __bit                   RPO46R0             __at(0x7148);	// @ (0xE29 * 8 + 0)
#define                                 RPO46R0_bit         _BIT_ACCESS(RPOR46,0)
// RPOR46<RPO46R1>
extern volatile __bit                   RPO46R1             __at(0x7149);	// @ (0xE29 * 8 + 1)
#define                                 RPO46R1_bit         _BIT_ACCESS(RPOR46,1)
// RPOR46<RPO46R2>
extern volatile __bit                   RPO46R2             __at(0x714A);	// @ (0xE29 * 8 + 2)
#define                                 RPO46R2_bit         _BIT_ACCESS(RPOR46,2)
// RPOR46<RPO46R3>
extern volatile __bit                   RPO46R3             __at(0x714B);	// @ (0xE29 * 8 + 3)
#define                                 RPO46R3_bit         _BIT_ACCESS(RPOR46,3)
// RPOR4_5<RPO4R0>
extern volatile __bit                   RPO4R0              __at(0x70A0);	// @ (0xE14 * 8 + 0)
#define                                 RPO4R0_bit          _BIT_ACCESS(RPOR4_5,0)
// RPOR4_5<RPO4R1>
extern volatile __bit                   RPO4R1              __at(0x70A1);	// @ (0xE14 * 8 + 1)
#define                                 RPO4R1_bit          _BIT_ACCESS(RPOR4_5,1)
// RPOR4_5<RPO4R2>
extern volatile __bit                   RPO4R2              __at(0x70A2);	// @ (0xE14 * 8 + 2)
#define                                 RPO4R2_bit          _BIT_ACCESS(RPOR4_5,2)
// RPOR4_5<RPO4R3>
extern volatile __bit                   RPO4R3              __at(0x70A3);	// @ (0xE14 * 8 + 3)
#define                                 RPO4R3_bit          _BIT_ACCESS(RPOR4_5,3)
// RPOR4_5<RPO5R0>
extern volatile __bit                   RPO5R0              __at(0x70A4);	// @ (0xE14 * 8 + 4)
#define                                 RPO5R0_bit          _BIT_ACCESS(RPOR4_5,4)
// RPOR4_5<RPO5R1>
extern volatile __bit                   RPO5R1              __at(0x70A5);	// @ (0xE14 * 8 + 5)
#define                                 RPO5R1_bit          _BIT_ACCESS(RPOR4_5,5)
// RPOR4_5<RPO5R2>
extern volatile __bit                   RPO5R2              __at(0x70A6);	// @ (0xE14 * 8 + 6)
#define                                 RPO5R2_bit          _BIT_ACCESS(RPOR4_5,6)
// RPOR4_5<RPO5R3>
extern volatile __bit                   RPO5R3              __at(0x70A7);	// @ (0xE14 * 8 + 7)
#define                                 RPO5R3_bit          _BIT_ACCESS(RPOR4_5,7)
// RPOR6_7<RPO6R0>
extern volatile __bit                   RPO6R0              __at(0x70A8);	// @ (0xE15 * 8 + 0)
#define                                 RPO6R0_bit          _BIT_ACCESS(RPOR6_7,0)
// RPOR6_7<RPO6R1>
extern volatile __bit                   RPO6R1              __at(0x70A9);	// @ (0xE15 * 8 + 1)
#define                                 RPO6R1_bit          _BIT_ACCESS(RPOR6_7,1)
// RPOR6_7<RPO6R2>
extern volatile __bit                   RPO6R2              __at(0x70AA);	// @ (0xE15 * 8 + 2)
#define                                 RPO6R2_bit          _BIT_ACCESS(RPOR6_7,2)
// RPOR6_7<RPO6R3>
extern volatile __bit                   RPO6R3              __at(0x70AB);	// @ (0xE15 * 8 + 3)
#define                                 RPO6R3_bit          _BIT_ACCESS(RPOR6_7,3)
// RPOR6_7<RPO7R0>
extern volatile __bit                   RPO7R0              __at(0x70AC);	// @ (0xE15 * 8 + 4)
#define                                 RPO7R0_bit          _BIT_ACCESS(RPOR6_7,4)
// RPOR6_7<RPO7R1>
extern volatile __bit                   RPO7R1              __at(0x70AD);	// @ (0xE15 * 8 + 5)
#define                                 RPO7R1_bit          _BIT_ACCESS(RPOR6_7,5)
// RPOR6_7<RPO7R2>
extern volatile __bit                   RPO7R2              __at(0x70AE);	// @ (0xE15 * 8 + 6)
#define                                 RPO7R2_bit          _BIT_ACCESS(RPOR6_7,6)
// RPOR6_7<RPO7R3>
extern volatile __bit                   RPO7R3              __at(0x70AF);	// @ (0xE15 * 8 + 7)
#define                                 RPO7R3_bit          _BIT_ACCESS(RPOR6_7,7)
// RPOR8_9<RPO8R0>
extern volatile __bit                   RPO8R0              __at(0x70B0);	// @ (0xE16 * 8 + 0)
#define                                 RPO8R0_bit          _BIT_ACCESS(RPOR8_9,0)
// RPOR8_9<RPO8R1>
extern volatile __bit                   RPO8R1              __at(0x70B1);	// @ (0xE16 * 8 + 1)
#define                                 RPO8R1_bit          _BIT_ACCESS(RPOR8_9,1)
// RPOR8_9<RPO8R2>
extern volatile __bit                   RPO8R2              __at(0x70B2);	// @ (0xE16 * 8 + 2)
#define                                 RPO8R2_bit          _BIT_ACCESS(RPOR8_9,2)
// RPOR8_9<RPO8R3>
extern volatile __bit                   RPO8R3              __at(0x70B3);	// @ (0xE16 * 8 + 3)
#define                                 RPO8R3_bit          _BIT_ACCESS(RPOR8_9,3)
// RPOR8_9<RPO9R0>
extern volatile __bit                   RPO9R0              __at(0x70B4);	// @ (0xE16 * 8 + 4)
#define                                 RPO9R0_bit          _BIT_ACCESS(RPOR8_9,4)
// RPOR8_9<RPO9R1>
extern volatile __bit                   RPO9R1              __at(0x70B5);	// @ (0xE16 * 8 + 5)
#define                                 RPO9R1_bit          _BIT_ACCESS(RPOR8_9,5)
// RPOR8_9<RPO9R2>
extern volatile __bit                   RPO9R2              __at(0x70B6);	// @ (0xE16 * 8 + 6)
#define                                 RPO9R2_bit          _BIT_ACCESS(RPOR8_9,6)
// RPOR8_9<RPO9R3>
extern volatile __bit                   RPO9R3              __at(0x70B7);	// @ (0xE16 * 8 + 7)
#define                                 RPO9R3_bit          _BIT_ACCESS(RPOR8_9,7)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0x7E29);	// @ (0xFC5 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// SSP2CON2<RSEN2>
extern volatile __bit                   RSEN2               __at(0x78C1);	// @ (0xF18 * 8 + 1)
#define                                 RSEN2_bit           _BIT_ACCESS(SSP2CON2,1)
// PIE3<RTCCIE>
extern volatile __bit                   RTCCIE              __at(0x7D18);	// @ (0xFA3 * 8 + 0)
#define                                 RTCCIE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<RTCCIF>
extern volatile __bit                   RTCCIF              __at(0x7D20);	// @ (0xFA4 * 8 + 0)
#define                                 RTCCIF_bit          _BIT_ACCESS(PIR3,0)
// IPR3<RTCCIP>
extern volatile __bit                   RTCCIP              __at(0x7D28);	// @ (0xFA5 * 8 + 0)
#define                                 RTCCIP_bit          _BIT_ACCESS(IPR3,0)
// RTCCON2<RTCCLKSEL0>
extern volatile __bit                   RTCCLKSEL0          __at(0x7ABA);	// @ (0xF57 * 8 + 2)
#define                                 RTCCLKSEL0_bit      _BIT_ACCESS(RTCCON2,2)
// RTCCON2<RTCCLKSEL1>
extern volatile __bit                   RTCCLKSEL1          __at(0x7ABB);	// @ (0xF57 * 8 + 3)
#define                                 RTCCLKSEL1_bit      _BIT_ACCESS(RTCCON2,3)
// PMD3<RTCCMD>
extern volatile __bit                   RTCCMD              __at(0x778C);	// @ (0xEF1 * 8 + 4)
#define                                 RTCCMD_bit          _BIT_ACCESS(PMD3,4)
// RTCCON1<RTCEN>
extern volatile __bit                   RTCEN               __at(0x7AFF);	// @ (0xF5F * 8 + 7)
#define                                 RTCEN_bit           _BIT_ACCESS(RTCCON1,7)
// RTCCON1<RTCOE>
extern volatile __bit                   RTCOE               __at(0x7AFA);	// @ (0xF5F * 8 + 2)
#define                                 RTCOE_bit           _BIT_ACCESS(RTCCON1,2)
// RTCCON1<RTCPTR0>
extern volatile __bit                   RTCPTR0             __at(0x7AF8);	// @ (0xF5F * 8 + 0)
#define                                 RTCPTR0_bit         _BIT_ACCESS(RTCCON1,0)
// RTCCON1<RTCPTR1>
extern volatile __bit                   RTCPTR1             __at(0x7AF9);	// @ (0xF5F * 8 + 1)
#define                                 RTCPTR1_bit         _BIT_ACCESS(RTCCON1,1)
// RTCCON2<RTCSECSEL0>
extern volatile __bit                   RTCSECSEL0          __at(0x7AB8);	// @ (0xF57 * 8 + 0)
#define                                 RTCSECSEL0_bit      _BIT_ACCESS(RTCCON2,0)
// RTCCON2<RTCSECSEL1>
extern volatile __bit                   RTCSECSEL1          __at(0x7AB9);	// @ (0xF57 * 8 + 1)
#define                                 RTCSECSEL1_bit      _BIT_ACCESS(RTCCON2,1)
// RTCCON1<RTCSYNC>
extern volatile __bit                   RTCSYNC             __at(0x7AFC);	// @ (0xF5F * 8 + 4)
#define                                 RTCSYNC_bit         _BIT_ACCESS(RTCCON1,4)
// DSCONH<RTCWDIS>
extern volatile __bit                   RTCWDIS             __at(0x7938);	// @ (0xF27 * 8 + 0)
#define                                 RTCWDIS_bit         _BIT_ACCESS(DSCONH,0)
// RTCCON1<RTCWREN>
extern volatile __bit                   RTCWREN             __at(0x7AFD);	// @ (0xF5F * 8 + 5)
#define                                 RTCWREN_bit         _BIT_ACCESS(RTCCON1,5)
// PORTVP<RVP0>
extern volatile __bit                   RVP0                __at(0x7B88);	// @ (0xF71 * 8 + 0)
#define                                 RVP0_bit            _BIT_ACCESS(PORTVP,0)
// PORTVP<RVP1>
extern volatile __bit                   RVP1                __at(0x7B89);	// @ (0xF71 * 8 + 1)
#define                                 RVP1_bit            _BIT_ACCESS(PORTVP,1)
// PORTVP<RVP2>
extern volatile __bit                   RVP2                __at(0x7B8A);	// @ (0xF71 * 8 + 2)
#define                                 RVP2_bit            _BIT_ACCESS(PORTVP,2)
// PORTVP<RVP3>
extern volatile __bit                   RVP3                __at(0x7B8B);	// @ (0xF71 * 8 + 3)
#define                                 RVP3_bit            _BIT_ACCESS(PORTVP,3)
// PORTVP<RVP4>
extern volatile __bit                   RVP4                __at(0x7B8C);	// @ (0xF71 * 8 + 4)
#define                                 RVP4_bit            _BIT_ACCESS(PORTVP,4)
// PORTVP<RVP5>
extern volatile __bit                   RVP5                __at(0x7B8D);	// @ (0xF71 * 8 + 5)
#define                                 RVP5_bit            _BIT_ACCESS(PORTVP,5)
// PORTVP<RVP6>
extern volatile __bit                   RVP6                __at(0x7B8E);	// @ (0xF71 * 8 + 6)
#define                                 RVP6_bit            _BIT_ACCESS(PORTVP,6)
// PORTVP<RVP7>
extern volatile __bit                   RVP7                __at(0x7B8F);	// @ (0xF71 * 8 + 7)
#define                                 RVP7_bit            _BIT_ACCESS(PORTVP,7)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<RW2>
extern volatile __bit                   RW2                 __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 RW2_bit             _BIT_ACCESS(SSP2STAT,2)
// RXADDRL<RXADDR0>
extern volatile __bit                   RXADDR0             __at(0x7B70);	// @ (0xF6E * 8 + 0)
#define                                 RXADDR0_bit         _BIT_ACCESS(RXADDRL,0)
// RXADDRL<RXADDR1>
extern volatile __bit                   RXADDR1             __at(0x7B71);	// @ (0xF6E * 8 + 1)
#define                                 RXADDR1_bit         _BIT_ACCESS(RXADDRL,1)
// RXADDRH<RXADDR10>
extern volatile __bit                   RXADDR10            __at(0x7B6A);	// @ (0xF6D * 8 + 2)
#define                                 RXADDR10_bit        _BIT_ACCESS(RXADDRH,2)
// RXADDRH<RXADDR11>
extern volatile __bit                   RXADDR11            __at(0x7B6B);	// @ (0xF6D * 8 + 3)
#define                                 RXADDR11_bit        _BIT_ACCESS(RXADDRH,3)
// RXADDRL<RXADDR2>
extern volatile __bit                   RXADDR2             __at(0x7B72);	// @ (0xF6E * 8 + 2)
#define                                 RXADDR2_bit         _BIT_ACCESS(RXADDRL,2)
// RXADDRL<RXADDR3>
extern volatile __bit                   RXADDR3             __at(0x7B73);	// @ (0xF6E * 8 + 3)
#define                                 RXADDR3_bit         _BIT_ACCESS(RXADDRL,3)
// RXADDRL<RXADDR4>
extern volatile __bit                   RXADDR4             __at(0x7B74);	// @ (0xF6E * 8 + 4)
#define                                 RXADDR4_bit         _BIT_ACCESS(RXADDRL,4)
// RXADDRL<RXADDR5>
extern volatile __bit                   RXADDR5             __at(0x7B75);	// @ (0xF6E * 8 + 5)
#define                                 RXADDR5_bit         _BIT_ACCESS(RXADDRL,5)
// RXADDRL<RXADDR6>
extern volatile __bit                   RXADDR6             __at(0x7B76);	// @ (0xF6E * 8 + 6)
#define                                 RXADDR6_bit         _BIT_ACCESS(RXADDRL,6)
// RXADDRL<RXADDR7>
extern volatile __bit                   RXADDR7             __at(0x7B77);	// @ (0xF6E * 8 + 7)
#define                                 RXADDR7_bit         _BIT_ACCESS(RXADDRL,7)
// RXADDRH<RXADDR8>
extern volatile __bit                   RXADDR8             __at(0x7B68);	// @ (0xF6D * 8 + 0)
#define                                 RXADDR8_bit         _BIT_ACCESS(RXADDRH,0)
// RXADDRH<RXADDR9>
extern volatile __bit                   RXADDR9             __at(0x7B69);	// @ (0xF6D * 8 + 1)
#define                                 RXADDR9_bit         _BIT_ACCESS(RXADDRH,1)
// PIE3<RXB0IE>
extern volatile __bit                   RXB0IE              __at(0x7D18);	// @ (0xFA3 * 8 + 0)
#define                                 RXB0IE_bit          _BIT_ACCESS(PIE3,0)
// PIE3<RXB1IE>
extern volatile __bit                   RXB1IE              __at(0x7D19);	// @ (0xFA3 * 8 + 1)
#define                                 RXB1IE_bit          _BIT_ACCESS(PIE3,1)
// PIE3<RXBNIE>
extern volatile __bit                   RXBNIE              __at(0x7D19);	// @ (0xFA3 * 8 + 1)
#define                                 RXBNIE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<RXBNIF>
extern volatile __bit                   RXBNIF              __at(0x7D21);	// @ (0xFA4 * 8 + 1)
#define                                 RXBNIF_bit          _BIT_ACCESS(PIR3,1)
// IPR3<RXBNIP>
extern volatile __bit                   RXBNIP              __at(0x7D29);	// @ (0xFA5 * 8 + 1)
#define                                 RXBNIP_bit          _BIT_ACCESS(IPR3,1)
// BAUDCON1<RXCKP>
extern volatile __bit                   RXCKP               __at(0x7B3D);	// @ (0xF67 * 8 + 5)
#define                                 RXCKP_bit           _BIT_ACCESS(BAUDCON1,5)
// BAUDCON1<RXDTP1>
extern volatile __bit                   RXDTP1              __at(0x7B3D);	// @ (0xF67 * 8 + 5)
#define                                 RXDTP1_bit          _BIT_ACCESS(BAUDCON1,5)
// BAUDCON2<RXDTP2>
extern volatile __bit                   RXDTP2              __at(0x798D);	// @ (0xF31 * 8 + 5)
#define                                 RXDTP2_bit          _BIT_ACCESS(BAUDCON2,5)
// BAUDCON3<RXDTP3>
extern volatile __bit                   RXDTP3              __at(0x796D);	// @ (0xF2D * 8 + 5)
#define                                 RXDTP3_bit          _BIT_ACCESS(BAUDCON3,5)
// BAUDCON4<RXDTP4>
extern volatile __bit                   RXDTP4              __at(0x77ED);	// @ (0xEFD * 8 + 5)
#define                                 RXDTP4_bit          _BIT_ACCESS(BAUDCON4,5)
// DMACON1<RXINC>
extern volatile __bit                   RXINC               __at(0x7B04);	// @ (0xF60 * 8 + 4)
#define                                 RXINC_bit           _BIT_ACCESS(DMACON1,4)
// SSP1STAT<R_NOT_W1>
extern volatile __bit                   R_NOT_W1            __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 R_NOT_W1_bit        _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_NOT_W2>
extern volatile __bit                   R_NOT_W2            __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 R_NOT_W2_bit        _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_W2>
extern volatile __bit                   R_W2                __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 R_W2_bit            _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_nW2>
extern volatile __bit                   R_nW2               __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 R_nW2_bit           _BIT_ACCESS(SSP2STAT,2)
// LCDDATA0<S00C0>
extern volatile __bit                   S00C0               __at(0x7470);	// @ (0xE8E * 8 + 0)
#define                                 S00C0_bit           _BIT_ACCESS(LCDDATA0,0)
// LCDDATA8<S00C1>
extern volatile __bit                   S00C1               __at(0x74B0);	// @ (0xE96 * 8 + 0)
#define                                 S00C1_bit           _BIT_ACCESS(LCDDATA8,0)
// LCDDATA16<S00C2>
extern volatile __bit                   S00C2               __at(0x74F0);	// @ (0xE9E * 8 + 0)
#define                                 S00C2_bit           _BIT_ACCESS(LCDDATA16,0)
// LCDDATA24<S00C3>
extern volatile __bit                   S00C3               __at(0x7530);	// @ (0xEA6 * 8 + 0)
#define                                 S00C3_bit           _BIT_ACCESS(LCDDATA24,0)
// LCDDATA32<S00C4>
extern volatile __bit                   S00C4               __at(0x7570);	// @ (0xEAE * 8 + 0)
#define                                 S00C4_bit           _BIT_ACCESS(LCDDATA32,0)
// LCDDATA40<S00C5>
extern volatile __bit                   S00C5               __at(0x75B0);	// @ (0xEB6 * 8 + 0)
#define                                 S00C5_bit           _BIT_ACCESS(LCDDATA40,0)
// LCDDATA48<S00C6>
extern volatile __bit                   S00C6               __at(0x75F0);	// @ (0xEBE * 8 + 0)
#define                                 S00C6_bit           _BIT_ACCESS(LCDDATA48,0)
// LCDDATA56<S00C7>
extern volatile __bit                   S00C7               __at(0x7630);	// @ (0xEC6 * 8 + 0)
#define                                 S00C7_bit           _BIT_ACCESS(LCDDATA56,0)
// LCDDATA0<S01C0>
extern volatile __bit                   S01C0               __at(0x7471);	// @ (0xE8E * 8 + 1)
#define                                 S01C0_bit           _BIT_ACCESS(LCDDATA0,1)
// LCDDATA8<S01C1>
extern volatile __bit                   S01C1               __at(0x74B1);	// @ (0xE96 * 8 + 1)
#define                                 S01C1_bit           _BIT_ACCESS(LCDDATA8,1)
// LCDDATA16<S01C2>
extern volatile __bit                   S01C2               __at(0x74F1);	// @ (0xE9E * 8 + 1)
#define                                 S01C2_bit           _BIT_ACCESS(LCDDATA16,1)
// LCDDATA24<S01C3>
extern volatile __bit                   S01C3               __at(0x7531);	// @ (0xEA6 * 8 + 1)
#define                                 S01C3_bit           _BIT_ACCESS(LCDDATA24,1)
// LCDDATA32<S01C4>
extern volatile __bit                   S01C4               __at(0x7571);	// @ (0xEAE * 8 + 1)
#define                                 S01C4_bit           _BIT_ACCESS(LCDDATA32,1)
// LCDDATA40<S01C5>
extern volatile __bit                   S01C5               __at(0x75B1);	// @ (0xEB6 * 8 + 1)
#define                                 S01C5_bit           _BIT_ACCESS(LCDDATA40,1)
// LCDDATA48<S01C6>
extern volatile __bit                   S01C6               __at(0x75F1);	// @ (0xEBE * 8 + 1)
#define                                 S01C6_bit           _BIT_ACCESS(LCDDATA48,1)
// LCDDATA56<S01C7>
extern volatile __bit                   S01C7               __at(0x7631);	// @ (0xEC6 * 8 + 1)
#define                                 S01C7_bit           _BIT_ACCESS(LCDDATA56,1)
// LCDDATA0<S02C0>
extern volatile __bit                   S02C0               __at(0x7472);	// @ (0xE8E * 8 + 2)
#define                                 S02C0_bit           _BIT_ACCESS(LCDDATA0,2)
// LCDDATA8<S02C1>
extern volatile __bit                   S02C1               __at(0x74B2);	// @ (0xE96 * 8 + 2)
#define                                 S02C1_bit           _BIT_ACCESS(LCDDATA8,2)
// LCDDATA16<S02C2>
extern volatile __bit                   S02C2               __at(0x74F2);	// @ (0xE9E * 8 + 2)
#define                                 S02C2_bit           _BIT_ACCESS(LCDDATA16,2)
// LCDDATA24<S02C3>
extern volatile __bit                   S02C3               __at(0x7532);	// @ (0xEA6 * 8 + 2)
#define                                 S02C3_bit           _BIT_ACCESS(LCDDATA24,2)
// LCDDATA32<S02C4>
extern volatile __bit                   S02C4               __at(0x7572);	// @ (0xEAE * 8 + 2)
#define                                 S02C4_bit           _BIT_ACCESS(LCDDATA32,2)
// LCDDATA40<S02C5>
extern volatile __bit                   S02C5               __at(0x75B2);	// @ (0xEB6 * 8 + 2)
#define                                 S02C5_bit           _BIT_ACCESS(LCDDATA40,2)
// LCDDATA48<S02C6>
extern volatile __bit                   S02C6               __at(0x75F2);	// @ (0xEBE * 8 + 2)
#define                                 S02C6_bit           _BIT_ACCESS(LCDDATA48,2)
// LCDDATA56<S02C7>
extern volatile __bit                   S02C7               __at(0x7632);	// @ (0xEC6 * 8 + 2)
#define                                 S02C7_bit           _BIT_ACCESS(LCDDATA56,2)
// LCDDATA0<S03C0>
extern volatile __bit                   S03C0               __at(0x7473);	// @ (0xE8E * 8 + 3)
#define                                 S03C0_bit           _BIT_ACCESS(LCDDATA0,3)
// LCDDATA8<S03C1>
extern volatile __bit                   S03C1               __at(0x74B3);	// @ (0xE96 * 8 + 3)
#define                                 S03C1_bit           _BIT_ACCESS(LCDDATA8,3)
// LCDDATA16<S03C2>
extern volatile __bit                   S03C2               __at(0x74F3);	// @ (0xE9E * 8 + 3)
#define                                 S03C2_bit           _BIT_ACCESS(LCDDATA16,3)
// LCDDATA24<S03C3>
extern volatile __bit                   S03C3               __at(0x7533);	// @ (0xEA6 * 8 + 3)
#define                                 S03C3_bit           _BIT_ACCESS(LCDDATA24,3)
// LCDDATA32<S03C4>
extern volatile __bit                   S03C4               __at(0x7573);	// @ (0xEAE * 8 + 3)
#define                                 S03C4_bit           _BIT_ACCESS(LCDDATA32,3)
// LCDDATA40<S03C5>
extern volatile __bit                   S03C5               __at(0x75B3);	// @ (0xEB6 * 8 + 3)
#define                                 S03C5_bit           _BIT_ACCESS(LCDDATA40,3)
// LCDDATA48<S03C6>
extern volatile __bit                   S03C6               __at(0x75F3);	// @ (0xEBE * 8 + 3)
#define                                 S03C6_bit           _BIT_ACCESS(LCDDATA48,3)
// LCDDATA56<S03C7>
extern volatile __bit                   S03C7               __at(0x7633);	// @ (0xEC6 * 8 + 3)
#define                                 S03C7_bit           _BIT_ACCESS(LCDDATA56,3)
// LCDDATA0<S04C0>
extern volatile __bit                   S04C0               __at(0x7474);	// @ (0xE8E * 8 + 4)
#define                                 S04C0_bit           _BIT_ACCESS(LCDDATA0,4)
// LCDDATA8<S04C1>
extern volatile __bit                   S04C1               __at(0x74B4);	// @ (0xE96 * 8 + 4)
#define                                 S04C1_bit           _BIT_ACCESS(LCDDATA8,4)
// LCDDATA16<S04C2>
extern volatile __bit                   S04C2               __at(0x74F4);	// @ (0xE9E * 8 + 4)
#define                                 S04C2_bit           _BIT_ACCESS(LCDDATA16,4)
// LCDDATA24<S04C3>
extern volatile __bit                   S04C3               __at(0x7534);	// @ (0xEA6 * 8 + 4)
#define                                 S04C3_bit           _BIT_ACCESS(LCDDATA24,4)
// LCDDATA32<S04C4>
extern volatile __bit                   S04C4               __at(0x7574);	// @ (0xEAE * 8 + 4)
#define                                 S04C4_bit           _BIT_ACCESS(LCDDATA32,4)
// LCDDATA40<S04C5>
extern volatile __bit                   S04C5               __at(0x75B4);	// @ (0xEB6 * 8 + 4)
#define                                 S04C5_bit           _BIT_ACCESS(LCDDATA40,4)
// LCDDATA48<S04C6>
extern volatile __bit                   S04C6               __at(0x75F4);	// @ (0xEBE * 8 + 4)
#define                                 S04C6_bit           _BIT_ACCESS(LCDDATA48,4)
// LCDDATA56<S04C7>
extern volatile __bit                   S04C7               __at(0x7634);	// @ (0xEC6 * 8 + 4)
#define                                 S04C7_bit           _BIT_ACCESS(LCDDATA56,4)
// LCDDATA0<S05C0>
extern volatile __bit                   S05C0               __at(0x7475);	// @ (0xE8E * 8 + 5)
#define                                 S05C0_bit           _BIT_ACCESS(LCDDATA0,5)
// LCDDATA8<S05C1>
extern volatile __bit                   S05C1               __at(0x74B5);	// @ (0xE96 * 8 + 5)
#define                                 S05C1_bit           _BIT_ACCESS(LCDDATA8,5)
// LCDDATA16<S05C2>
extern volatile __bit                   S05C2               __at(0x74F5);	// @ (0xE9E * 8 + 5)
#define                                 S05C2_bit           _BIT_ACCESS(LCDDATA16,5)
// LCDDATA24<S05C3>
extern volatile __bit                   S05C3               __at(0x7535);	// @ (0xEA6 * 8 + 5)
#define                                 S05C3_bit           _BIT_ACCESS(LCDDATA24,5)
// LCDDATA32<S05C4>
extern volatile __bit                   S05C4               __at(0x7575);	// @ (0xEAE * 8 + 5)
#define                                 S05C4_bit           _BIT_ACCESS(LCDDATA32,5)
// LCDDATA40<S05C5>
extern volatile __bit                   S05C5               __at(0x75B5);	// @ (0xEB6 * 8 + 5)
#define                                 S05C5_bit           _BIT_ACCESS(LCDDATA40,5)
// LCDDATA48<S05C6>
extern volatile __bit                   S05C6               __at(0x75F5);	// @ (0xEBE * 8 + 5)
#define                                 S05C6_bit           _BIT_ACCESS(LCDDATA48,5)
// LCDDATA56<S05C7>
extern volatile __bit                   S05C7               __at(0x7635);	// @ (0xEC6 * 8 + 5)
#define                                 S05C7_bit           _BIT_ACCESS(LCDDATA56,5)
// LCDDATA0<S06C0>
extern volatile __bit                   S06C0               __at(0x7476);	// @ (0xE8E * 8 + 6)
#define                                 S06C0_bit           _BIT_ACCESS(LCDDATA0,6)
// LCDDATA8<S06C1>
extern volatile __bit                   S06C1               __at(0x74B6);	// @ (0xE96 * 8 + 6)
#define                                 S06C1_bit           _BIT_ACCESS(LCDDATA8,6)
// LCDDATA16<S06C2>
extern volatile __bit                   S06C2               __at(0x74F6);	// @ (0xE9E * 8 + 6)
#define                                 S06C2_bit           _BIT_ACCESS(LCDDATA16,6)
// LCDDATA24<S06C3>
extern volatile __bit                   S06C3               __at(0x7536);	// @ (0xEA6 * 8 + 6)
#define                                 S06C3_bit           _BIT_ACCESS(LCDDATA24,6)
// LCDDATA32<S06C4>
extern volatile __bit                   S06C4               __at(0x7576);	// @ (0xEAE * 8 + 6)
#define                                 S06C4_bit           _BIT_ACCESS(LCDDATA32,6)
// LCDDATA40<S06C5>
extern volatile __bit                   S06C5               __at(0x75B6);	// @ (0xEB6 * 8 + 6)
#define                                 S06C5_bit           _BIT_ACCESS(LCDDATA40,6)
// LCDDATA48<S06C6>
extern volatile __bit                   S06C6               __at(0x75F6);	// @ (0xEBE * 8 + 6)
#define                                 S06C6_bit           _BIT_ACCESS(LCDDATA48,6)
// LCDDATA56<S06C7>
extern volatile __bit                   S06C7               __at(0x7636);	// @ (0xEC6 * 8 + 6)
#define                                 S06C7_bit           _BIT_ACCESS(LCDDATA56,6)
// LCDDATA0<S07C0>
extern volatile __bit                   S07C0               __at(0x7477);	// @ (0xE8E * 8 + 7)
#define                                 S07C0_bit           _BIT_ACCESS(LCDDATA0,7)
// LCDDATA8<S07C1>
extern volatile __bit                   S07C1               __at(0x74B7);	// @ (0xE96 * 8 + 7)
#define                                 S07C1_bit           _BIT_ACCESS(LCDDATA8,7)
// LCDDATA16<S07C2>
extern volatile __bit                   S07C2               __at(0x74F7);	// @ (0xE9E * 8 + 7)
#define                                 S07C2_bit           _BIT_ACCESS(LCDDATA16,7)
// LCDDATA24<S07C3>
extern volatile __bit                   S07C3               __at(0x7537);	// @ (0xEA6 * 8 + 7)
#define                                 S07C3_bit           _BIT_ACCESS(LCDDATA24,7)
// LCDDATA32<S07C4>
extern volatile __bit                   S07C4               __at(0x7577);	// @ (0xEAE * 8 + 7)
#define                                 S07C4_bit           _BIT_ACCESS(LCDDATA32,7)
// LCDDATA40<S07C5>
extern volatile __bit                   S07C5               __at(0x75B7);	// @ (0xEB6 * 8 + 7)
#define                                 S07C5_bit           _BIT_ACCESS(LCDDATA40,7)
// LCDDATA48<S07C6>
extern volatile __bit                   S07C6               __at(0x75F7);	// @ (0xEBE * 8 + 7)
#define                                 S07C6_bit           _BIT_ACCESS(LCDDATA48,7)
// LCDDATA56<S07C7>
extern volatile __bit                   S07C7               __at(0x7637);	// @ (0xEC6 * 8 + 7)
#define                                 S07C7_bit           _BIT_ACCESS(LCDDATA56,7)
// LCDDATA1<S08C0>
extern volatile __bit                   S08C0               __at(0x7478);	// @ (0xE8F * 8 + 0)
#define                                 S08C0_bit           _BIT_ACCESS(LCDDATA1,0)
// LCDDATA9<S08C1>
extern volatile __bit                   S08C1               __at(0x74B8);	// @ (0xE97 * 8 + 0)
#define                                 S08C1_bit           _BIT_ACCESS(LCDDATA9,0)
// LCDDATA17<S08C2>
extern volatile __bit                   S08C2               __at(0x74F8);	// @ (0xE9F * 8 + 0)
#define                                 S08C2_bit           _BIT_ACCESS(LCDDATA17,0)
// LCDDATA25<S08C3>
extern volatile __bit                   S08C3               __at(0x7538);	// @ (0xEA7 * 8 + 0)
#define                                 S08C3_bit           _BIT_ACCESS(LCDDATA25,0)
// LCDDATA33<S08C4>
extern volatile __bit                   S08C4               __at(0x7578);	// @ (0xEAF * 8 + 0)
#define                                 S08C4_bit           _BIT_ACCESS(LCDDATA33,0)
// LCDDATA41<S08C5>
extern volatile __bit                   S08C5               __at(0x75B8);	// @ (0xEB7 * 8 + 0)
#define                                 S08C5_bit           _BIT_ACCESS(LCDDATA41,0)
// LCDDATA49<S08C6>
extern volatile __bit                   S08C6               __at(0x75F8);	// @ (0xEBF * 8 + 0)
#define                                 S08C6_bit           _BIT_ACCESS(LCDDATA49,0)
// LCDDATA57<S08C7>
extern volatile __bit                   S08C7               __at(0x7638);	// @ (0xEC7 * 8 + 0)
#define                                 S08C7_bit           _BIT_ACCESS(LCDDATA57,0)
// LCDDATA1<S09C0>
extern volatile __bit                   S09C0               __at(0x7479);	// @ (0xE8F * 8 + 1)
#define                                 S09C0_bit           _BIT_ACCESS(LCDDATA1,1)
// LCDDATA9<S09C1>
extern volatile __bit                   S09C1               __at(0x74B9);	// @ (0xE97 * 8 + 1)
#define                                 S09C1_bit           _BIT_ACCESS(LCDDATA9,1)
// LCDDATA17<S09C2>
extern volatile __bit                   S09C2               __at(0x74F9);	// @ (0xE9F * 8 + 1)
#define                                 S09C2_bit           _BIT_ACCESS(LCDDATA17,1)
// LCDDATA25<S09C3>
extern volatile __bit                   S09C3               __at(0x7539);	// @ (0xEA7 * 8 + 1)
#define                                 S09C3_bit           _BIT_ACCESS(LCDDATA25,1)
// LCDDATA33<S09C4>
extern volatile __bit                   S09C4               __at(0x7579);	// @ (0xEAF * 8 + 1)
#define                                 S09C4_bit           _BIT_ACCESS(LCDDATA33,1)
// LCDDATA41<S09C5>
extern volatile __bit                   S09C5               __at(0x75B9);	// @ (0xEB7 * 8 + 1)
#define                                 S09C5_bit           _BIT_ACCESS(LCDDATA41,1)
// LCDDATA49<S09C6>
extern volatile __bit                   S09C6               __at(0x75F9);	// @ (0xEBF * 8 + 1)
#define                                 S09C6_bit           _BIT_ACCESS(LCDDATA49,1)
// LCDDATA57<S09C7>
extern volatile __bit                   S09C7               __at(0x7639);	// @ (0xEC7 * 8 + 1)
#define                                 S09C7_bit           _BIT_ACCESS(LCDDATA57,1)
// LCDDATA1<S10C0>
extern volatile __bit                   S10C0               __at(0x747A);	// @ (0xE8F * 8 + 2)
#define                                 S10C0_bit           _BIT_ACCESS(LCDDATA1,2)
// LCDDATA9<S10C1>
extern volatile __bit                   S10C1               __at(0x74BA);	// @ (0xE97 * 8 + 2)
#define                                 S10C1_bit           _BIT_ACCESS(LCDDATA9,2)
// LCDDATA17<S10C2>
extern volatile __bit                   S10C2               __at(0x74FA);	// @ (0xE9F * 8 + 2)
#define                                 S10C2_bit           _BIT_ACCESS(LCDDATA17,2)
// LCDDATA25<S10C3>
extern volatile __bit                   S10C3               __at(0x753A);	// @ (0xEA7 * 8 + 2)
#define                                 S10C3_bit           _BIT_ACCESS(LCDDATA25,2)
// LCDDATA33<S10C4>
extern volatile __bit                   S10C4               __at(0x757A);	// @ (0xEAF * 8 + 2)
#define                                 S10C4_bit           _BIT_ACCESS(LCDDATA33,2)
// LCDDATA41<S10C5>
extern volatile __bit                   S10C5               __at(0x75BA);	// @ (0xEB7 * 8 + 2)
#define                                 S10C5_bit           _BIT_ACCESS(LCDDATA41,2)
// LCDDATA49<S10C6>
extern volatile __bit                   S10C6               __at(0x75FA);	// @ (0xEBF * 8 + 2)
#define                                 S10C6_bit           _BIT_ACCESS(LCDDATA49,2)
// LCDDATA57<S10C7>
extern volatile __bit                   S10C7               __at(0x763A);	// @ (0xEC7 * 8 + 2)
#define                                 S10C7_bit           _BIT_ACCESS(LCDDATA57,2)
// LCDDATA1<S11C0>
extern volatile __bit                   S11C0               __at(0x747B);	// @ (0xE8F * 8 + 3)
#define                                 S11C0_bit           _BIT_ACCESS(LCDDATA1,3)
// LCDDATA9<S11C1>
extern volatile __bit                   S11C1               __at(0x74BB);	// @ (0xE97 * 8 + 3)
#define                                 S11C1_bit           _BIT_ACCESS(LCDDATA9,3)
// LCDDATA17<S11C2>
extern volatile __bit                   S11C2               __at(0x74FB);	// @ (0xE9F * 8 + 3)
#define                                 S11C2_bit           _BIT_ACCESS(LCDDATA17,3)
// LCDDATA25<S11C3>
extern volatile __bit                   S11C3               __at(0x753B);	// @ (0xEA7 * 8 + 3)
#define                                 S11C3_bit           _BIT_ACCESS(LCDDATA25,3)
// LCDDATA33<S11C4>
extern volatile __bit                   S11C4               __at(0x757B);	// @ (0xEAF * 8 + 3)
#define                                 S11C4_bit           _BIT_ACCESS(LCDDATA33,3)
// LCDDATA41<S11C5>
extern volatile __bit                   S11C5               __at(0x75BB);	// @ (0xEB7 * 8 + 3)
#define                                 S11C5_bit           _BIT_ACCESS(LCDDATA41,3)
// LCDDATA49<S11C6>
extern volatile __bit                   S11C6               __at(0x75FB);	// @ (0xEBF * 8 + 3)
#define                                 S11C6_bit           _BIT_ACCESS(LCDDATA49,3)
// LCDDATA57<S11C7>
extern volatile __bit                   S11C7               __at(0x763B);	// @ (0xEC7 * 8 + 3)
#define                                 S11C7_bit           _BIT_ACCESS(LCDDATA57,3)
// LCDDATA1<S12C0>
extern volatile __bit                   S12C0               __at(0x747C);	// @ (0xE8F * 8 + 4)
#define                                 S12C0_bit           _BIT_ACCESS(LCDDATA1,4)
// LCDDATA9<S12C1>
extern volatile __bit                   S12C1               __at(0x74BC);	// @ (0xE97 * 8 + 4)
#define                                 S12C1_bit           _BIT_ACCESS(LCDDATA9,4)
// LCDDATA17<S12C2>
extern volatile __bit                   S12C2               __at(0x74FC);	// @ (0xE9F * 8 + 4)
#define                                 S12C2_bit           _BIT_ACCESS(LCDDATA17,4)
// LCDDATA25<S12C3>
extern volatile __bit                   S12C3               __at(0x753C);	// @ (0xEA7 * 8 + 4)
#define                                 S12C3_bit           _BIT_ACCESS(LCDDATA25,4)
// LCDDATA33<S12C4>
extern volatile __bit                   S12C4               __at(0x757C);	// @ (0xEAF * 8 + 4)
#define                                 S12C4_bit           _BIT_ACCESS(LCDDATA33,4)
// LCDDATA41<S12C5>
extern volatile __bit                   S12C5               __at(0x75BC);	// @ (0xEB7 * 8 + 4)
#define                                 S12C5_bit           _BIT_ACCESS(LCDDATA41,4)
// LCDDATA49<S12C6>
extern volatile __bit                   S12C6               __at(0x75FC);	// @ (0xEBF * 8 + 4)
#define                                 S12C6_bit           _BIT_ACCESS(LCDDATA49,4)
// LCDDATA57<S12C7>
extern volatile __bit                   S12C7               __at(0x763C);	// @ (0xEC7 * 8 + 4)
#define                                 S12C7_bit           _BIT_ACCESS(LCDDATA57,4)
// LCDDATA1<S13C0>
extern volatile __bit                   S13C0               __at(0x747D);	// @ (0xE8F * 8 + 5)
#define                                 S13C0_bit           _BIT_ACCESS(LCDDATA1,5)
// LCDDATA9<S13C1>
extern volatile __bit                   S13C1               __at(0x74BD);	// @ (0xE97 * 8 + 5)
#define                                 S13C1_bit           _BIT_ACCESS(LCDDATA9,5)
// LCDDATA17<S13C2>
extern volatile __bit                   S13C2               __at(0x74FD);	// @ (0xE9F * 8 + 5)
#define                                 S13C2_bit           _BIT_ACCESS(LCDDATA17,5)
// LCDDATA25<S13C3>
extern volatile __bit                   S13C3               __at(0x753D);	// @ (0xEA7 * 8 + 5)
#define                                 S13C3_bit           _BIT_ACCESS(LCDDATA25,5)
// LCDDATA33<S13C4>
extern volatile __bit                   S13C4               __at(0x757D);	// @ (0xEAF * 8 + 5)
#define                                 S13C4_bit           _BIT_ACCESS(LCDDATA33,5)
// LCDDATA41<S13C5>
extern volatile __bit                   S13C5               __at(0x75BD);	// @ (0xEB7 * 8 + 5)
#define                                 S13C5_bit           _BIT_ACCESS(LCDDATA41,5)
// LCDDATA49<S13C6>
extern volatile __bit                   S13C6               __at(0x75FD);	// @ (0xEBF * 8 + 5)
#define                                 S13C6_bit           _BIT_ACCESS(LCDDATA49,5)
// LCDDATA57<S13C7>
extern volatile __bit                   S13C7               __at(0x763D);	// @ (0xEC7 * 8 + 5)
#define                                 S13C7_bit           _BIT_ACCESS(LCDDATA57,5)
// LCDDATA1<S14C0>
extern volatile __bit                   S14C0               __at(0x747E);	// @ (0xE8F * 8 + 6)
#define                                 S14C0_bit           _BIT_ACCESS(LCDDATA1,6)
// LCDDATA9<S14C1>
extern volatile __bit                   S14C1               __at(0x74BE);	// @ (0xE97 * 8 + 6)
#define                                 S14C1_bit           _BIT_ACCESS(LCDDATA9,6)
// LCDDATA17<S14C2>
extern volatile __bit                   S14C2               __at(0x74FE);	// @ (0xE9F * 8 + 6)
#define                                 S14C2_bit           _BIT_ACCESS(LCDDATA17,6)
// LCDDATA25<S14C3>
extern volatile __bit                   S14C3               __at(0x753E);	// @ (0xEA7 * 8 + 6)
#define                                 S14C3_bit           _BIT_ACCESS(LCDDATA25,6)
// LCDDATA33<S14C4>
extern volatile __bit                   S14C4               __at(0x757E);	// @ (0xEAF * 8 + 6)
#define                                 S14C4_bit           _BIT_ACCESS(LCDDATA33,6)
// LCDDATA41<S14C5>
extern volatile __bit                   S14C5               __at(0x75BE);	// @ (0xEB7 * 8 + 6)
#define                                 S14C5_bit           _BIT_ACCESS(LCDDATA41,6)
// LCDDATA49<S14C6>
extern volatile __bit                   S14C6               __at(0x75FE);	// @ (0xEBF * 8 + 6)
#define                                 S14C6_bit           _BIT_ACCESS(LCDDATA49,6)
// LCDDATA57<S14C7>
extern volatile __bit                   S14C7               __at(0x763E);	// @ (0xEC7 * 8 + 6)
#define                                 S14C7_bit           _BIT_ACCESS(LCDDATA57,6)
// LCDDATA1<S15C0>
extern volatile __bit                   S15C0               __at(0x747F);	// @ (0xE8F * 8 + 7)
#define                                 S15C0_bit           _BIT_ACCESS(LCDDATA1,7)
// LCDDATA9<S15C1>
extern volatile __bit                   S15C1               __at(0x74BF);	// @ (0xE97 * 8 + 7)
#define                                 S15C1_bit           _BIT_ACCESS(LCDDATA9,7)
// LCDDATA17<S15C2>
extern volatile __bit                   S15C2               __at(0x74FF);	// @ (0xE9F * 8 + 7)
#define                                 S15C2_bit           _BIT_ACCESS(LCDDATA17,7)
// LCDDATA25<S15C3>
extern volatile __bit                   S15C3               __at(0x753F);	// @ (0xEA7 * 8 + 7)
#define                                 S15C3_bit           _BIT_ACCESS(LCDDATA25,7)
// LCDDATA33<S15C4>
extern volatile __bit                   S15C4               __at(0x757F);	// @ (0xEAF * 8 + 7)
#define                                 S15C4_bit           _BIT_ACCESS(LCDDATA33,7)
// LCDDATA41<S15C5>
extern volatile __bit                   S15C5               __at(0x75BF);	// @ (0xEB7 * 8 + 7)
#define                                 S15C5_bit           _BIT_ACCESS(LCDDATA41,7)
// LCDDATA49<S15C6>
extern volatile __bit                   S15C6               __at(0x75FF);	// @ (0xEBF * 8 + 7)
#define                                 S15C6_bit           _BIT_ACCESS(LCDDATA49,7)
// LCDDATA57<S15C7>
extern volatile __bit                   S15C7               __at(0x763F);	// @ (0xEC7 * 8 + 7)
#define                                 S15C7_bit           _BIT_ACCESS(LCDDATA57,7)
// LCDDATA2<S16C0>
extern volatile __bit                   S16C0               __at(0x7480);	// @ (0xE90 * 8 + 0)
#define                                 S16C0_bit           _BIT_ACCESS(LCDDATA2,0)
// LCDDATA10<S16C1>
extern volatile __bit                   S16C1               __at(0x74C0);	// @ (0xE98 * 8 + 0)
#define                                 S16C1_bit           _BIT_ACCESS(LCDDATA10,0)
// LCDDATA18<S16C2>
extern volatile __bit                   S16C2               __at(0x7500);	// @ (0xEA0 * 8 + 0)
#define                                 S16C2_bit           _BIT_ACCESS(LCDDATA18,0)
// LCDDATA26<S16C3>
extern volatile __bit                   S16C3               __at(0x7540);	// @ (0xEA8 * 8 + 0)
#define                                 S16C3_bit           _BIT_ACCESS(LCDDATA26,0)
// LCDDATA34<S16C4>
extern volatile __bit                   S16C4               __at(0x7580);	// @ (0xEB0 * 8 + 0)
#define                                 S16C4_bit           _BIT_ACCESS(LCDDATA34,0)
// LCDDATA42<S16C5>
extern volatile __bit                   S16C5               __at(0x75C0);	// @ (0xEB8 * 8 + 0)
#define                                 S16C5_bit           _BIT_ACCESS(LCDDATA42,0)
// LCDDATA50<S16C6>
extern volatile __bit                   S16C6               __at(0x7600);	// @ (0xEC0 * 8 + 0)
#define                                 S16C6_bit           _BIT_ACCESS(LCDDATA50,0)
// LCDDATA58<S16C7>
extern volatile __bit                   S16C7               __at(0x7640);	// @ (0xEC8 * 8 + 0)
#define                                 S16C7_bit           _BIT_ACCESS(LCDDATA58,0)
// LCDDATA2<S17C0>
extern volatile __bit                   S17C0               __at(0x7481);	// @ (0xE90 * 8 + 1)
#define                                 S17C0_bit           _BIT_ACCESS(LCDDATA2,1)
// LCDDATA10<S17C1>
extern volatile __bit                   S17C1               __at(0x74C1);	// @ (0xE98 * 8 + 1)
#define                                 S17C1_bit           _BIT_ACCESS(LCDDATA10,1)
// LCDDATA18<S17C2>
extern volatile __bit                   S17C2               __at(0x7501);	// @ (0xEA0 * 8 + 1)
#define                                 S17C2_bit           _BIT_ACCESS(LCDDATA18,1)
// LCDDATA26<S17C3>
extern volatile __bit                   S17C3               __at(0x7541);	// @ (0xEA8 * 8 + 1)
#define                                 S17C3_bit           _BIT_ACCESS(LCDDATA26,1)
// LCDDATA34<S17C4>
extern volatile __bit                   S17C4               __at(0x7581);	// @ (0xEB0 * 8 + 1)
#define                                 S17C4_bit           _BIT_ACCESS(LCDDATA34,1)
// LCDDATA42<S17C5>
extern volatile __bit                   S17C5               __at(0x75C1);	// @ (0xEB8 * 8 + 1)
#define                                 S17C5_bit           _BIT_ACCESS(LCDDATA42,1)
// LCDDATA50<S17C6>
extern volatile __bit                   S17C6               __at(0x7601);	// @ (0xEC0 * 8 + 1)
#define                                 S17C6_bit           _BIT_ACCESS(LCDDATA50,1)
// LCDDATA58<S17C7>
extern volatile __bit                   S17C7               __at(0x7641);	// @ (0xEC8 * 8 + 1)
#define                                 S17C7_bit           _BIT_ACCESS(LCDDATA58,1)
// LCDDATA2<S18C0>
extern volatile __bit                   S18C0               __at(0x7482);	// @ (0xE90 * 8 + 2)
#define                                 S18C0_bit           _BIT_ACCESS(LCDDATA2,2)
// LCDDATA10<S18C1>
extern volatile __bit                   S18C1               __at(0x74C2);	// @ (0xE98 * 8 + 2)
#define                                 S18C1_bit           _BIT_ACCESS(LCDDATA10,2)
// LCDDATA18<S18C2>
extern volatile __bit                   S18C2               __at(0x7502);	// @ (0xEA0 * 8 + 2)
#define                                 S18C2_bit           _BIT_ACCESS(LCDDATA18,2)
// LCDDATA26<S18C3>
extern volatile __bit                   S18C3               __at(0x7542);	// @ (0xEA8 * 8 + 2)
#define                                 S18C3_bit           _BIT_ACCESS(LCDDATA26,2)
// LCDDATA34<S18C4>
extern volatile __bit                   S18C4               __at(0x7582);	// @ (0xEB0 * 8 + 2)
#define                                 S18C4_bit           _BIT_ACCESS(LCDDATA34,2)
// LCDDATA42<S18C5>
extern volatile __bit                   S18C5               __at(0x75C2);	// @ (0xEB8 * 8 + 2)
#define                                 S18C5_bit           _BIT_ACCESS(LCDDATA42,2)
// LCDDATA50<S18C6>
extern volatile __bit                   S18C6               __at(0x7602);	// @ (0xEC0 * 8 + 2)
#define                                 S18C6_bit           _BIT_ACCESS(LCDDATA50,2)
// LCDDATA58<S18C7>
extern volatile __bit                   S18C7               __at(0x7642);	// @ (0xEC8 * 8 + 2)
#define                                 S18C7_bit           _BIT_ACCESS(LCDDATA58,2)
// LCDDATA2<S19C0>
extern volatile __bit                   S19C0               __at(0x7483);	// @ (0xE90 * 8 + 3)
#define                                 S19C0_bit           _BIT_ACCESS(LCDDATA2,3)
// LCDDATA10<S19C1>
extern volatile __bit                   S19C1               __at(0x74C3);	// @ (0xE98 * 8 + 3)
#define                                 S19C1_bit           _BIT_ACCESS(LCDDATA10,3)
// LCDDATA18<S19C2>
extern volatile __bit                   S19C2               __at(0x7503);	// @ (0xEA0 * 8 + 3)
#define                                 S19C2_bit           _BIT_ACCESS(LCDDATA18,3)
// LCDDATA26<S19C3>
extern volatile __bit                   S19C3               __at(0x7543);	// @ (0xEA8 * 8 + 3)
#define                                 S19C3_bit           _BIT_ACCESS(LCDDATA26,3)
// LCDDATA34<S19C4>
extern volatile __bit                   S19C4               __at(0x7583);	// @ (0xEB0 * 8 + 3)
#define                                 S19C4_bit           _BIT_ACCESS(LCDDATA34,3)
// LCDDATA42<S19C5>
extern volatile __bit                   S19C5               __at(0x75C3);	// @ (0xEB8 * 8 + 3)
#define                                 S19C5_bit           _BIT_ACCESS(LCDDATA42,3)
// LCDDATA50<S19C6>
extern volatile __bit                   S19C6               __at(0x7603);	// @ (0xEC0 * 8 + 3)
#define                                 S19C6_bit           _BIT_ACCESS(LCDDATA50,3)
// LCDDATA58<S19C7>
extern volatile __bit                   S19C7               __at(0x7643);	// @ (0xEC8 * 8 + 3)
#define                                 S19C7_bit           _BIT_ACCESS(LCDDATA58,3)
// LCDDATA2<S20C0>
extern volatile __bit                   S20C0               __at(0x7484);	// @ (0xE90 * 8 + 4)
#define                                 S20C0_bit           _BIT_ACCESS(LCDDATA2,4)
// LCDDATA10<S20C1>
extern volatile __bit                   S20C1               __at(0x74C4);	// @ (0xE98 * 8 + 4)
#define                                 S20C1_bit           _BIT_ACCESS(LCDDATA10,4)
// LCDDATA18<S20C2>
extern volatile __bit                   S20C2               __at(0x7504);	// @ (0xEA0 * 8 + 4)
#define                                 S20C2_bit           _BIT_ACCESS(LCDDATA18,4)
// LCDDATA26<S20C3>
extern volatile __bit                   S20C3               __at(0x7544);	// @ (0xEA8 * 8 + 4)
#define                                 S20C3_bit           _BIT_ACCESS(LCDDATA26,4)
// LCDDATA34<S20C4>
extern volatile __bit                   S20C4               __at(0x7584);	// @ (0xEB0 * 8 + 4)
#define                                 S20C4_bit           _BIT_ACCESS(LCDDATA34,4)
// LCDDATA42<S20C5>
extern volatile __bit                   S20C5               __at(0x75C4);	// @ (0xEB8 * 8 + 4)
#define                                 S20C5_bit           _BIT_ACCESS(LCDDATA42,4)
// LCDDATA50<S20C6>
extern volatile __bit                   S20C6               __at(0x7604);	// @ (0xEC0 * 8 + 4)
#define                                 S20C6_bit           _BIT_ACCESS(LCDDATA50,4)
// LCDDATA58<S20C7>
extern volatile __bit                   S20C7               __at(0x7644);	// @ (0xEC8 * 8 + 4)
#define                                 S20C7_bit           _BIT_ACCESS(LCDDATA58,4)
// LCDDATA2<S21C0>
extern volatile __bit                   S21C0               __at(0x7485);	// @ (0xE90 * 8 + 5)
#define                                 S21C0_bit           _BIT_ACCESS(LCDDATA2,5)
// LCDDATA10<S21C1>
extern volatile __bit                   S21C1               __at(0x74C5);	// @ (0xE98 * 8 + 5)
#define                                 S21C1_bit           _BIT_ACCESS(LCDDATA10,5)
// LCDDATA18<S21C2>
extern volatile __bit                   S21C2               __at(0x7505);	// @ (0xEA0 * 8 + 5)
#define                                 S21C2_bit           _BIT_ACCESS(LCDDATA18,5)
// LCDDATA26<S21C3>
extern volatile __bit                   S21C3               __at(0x7545);	// @ (0xEA8 * 8 + 5)
#define                                 S21C3_bit           _BIT_ACCESS(LCDDATA26,5)
// LCDDATA34<S21C4>
extern volatile __bit                   S21C4               __at(0x7585);	// @ (0xEB0 * 8 + 5)
#define                                 S21C4_bit           _BIT_ACCESS(LCDDATA34,5)
// LCDDATA42<S21C5>
extern volatile __bit                   S21C5               __at(0x75C5);	// @ (0xEB8 * 8 + 5)
#define                                 S21C5_bit           _BIT_ACCESS(LCDDATA42,5)
// LCDDATA50<S21C6>
extern volatile __bit                   S21C6               __at(0x7605);	// @ (0xEC0 * 8 + 5)
#define                                 S21C6_bit           _BIT_ACCESS(LCDDATA50,5)
// LCDDATA58<S21C7>
extern volatile __bit                   S21C7               __at(0x7645);	// @ (0xEC8 * 8 + 5)
#define                                 S21C7_bit           _BIT_ACCESS(LCDDATA58,5)
// LCDDATA2<S22C0>
extern volatile __bit                   S22C0               __at(0x7486);	// @ (0xE90 * 8 + 6)
#define                                 S22C0_bit           _BIT_ACCESS(LCDDATA2,6)
// LCDDATA10<S22C1>
extern volatile __bit                   S22C1               __at(0x74C6);	// @ (0xE98 * 8 + 6)
#define                                 S22C1_bit           _BIT_ACCESS(LCDDATA10,6)
// LCDDATA18<S22C2>
extern volatile __bit                   S22C2               __at(0x7506);	// @ (0xEA0 * 8 + 6)
#define                                 S22C2_bit           _BIT_ACCESS(LCDDATA18,6)
// LCDDATA26<S22C3>
extern volatile __bit                   S22C3               __at(0x7546);	// @ (0xEA8 * 8 + 6)
#define                                 S22C3_bit           _BIT_ACCESS(LCDDATA26,6)
// LCDDATA34<S22C4>
extern volatile __bit                   S22C4               __at(0x7586);	// @ (0xEB0 * 8 + 6)
#define                                 S22C4_bit           _BIT_ACCESS(LCDDATA34,6)
// LCDDATA42<S22C5>
extern volatile __bit                   S22C5               __at(0x75C6);	// @ (0xEB8 * 8 + 6)
#define                                 S22C5_bit           _BIT_ACCESS(LCDDATA42,6)
// LCDDATA50<S22C6>
extern volatile __bit                   S22C6               __at(0x7606);	// @ (0xEC0 * 8 + 6)
#define                                 S22C6_bit           _BIT_ACCESS(LCDDATA50,6)
// LCDDATA58<S22C7>
extern volatile __bit                   S22C7               __at(0x7646);	// @ (0xEC8 * 8 + 6)
#define                                 S22C7_bit           _BIT_ACCESS(LCDDATA58,6)
// LCDDATA2<S23C0>
extern volatile __bit                   S23C0               __at(0x7487);	// @ (0xE90 * 8 + 7)
#define                                 S23C0_bit           _BIT_ACCESS(LCDDATA2,7)
// LCDDATA10<S23C1>
extern volatile __bit                   S23C1               __at(0x74C7);	// @ (0xE98 * 8 + 7)
#define                                 S23C1_bit           _BIT_ACCESS(LCDDATA10,7)
// LCDDATA18<S23C2>
extern volatile __bit                   S23C2               __at(0x7507);	// @ (0xEA0 * 8 + 7)
#define                                 S23C2_bit           _BIT_ACCESS(LCDDATA18,7)
// LCDDATA26<S23C3>
extern volatile __bit                   S23C3               __at(0x7547);	// @ (0xEA8 * 8 + 7)
#define                                 S23C3_bit           _BIT_ACCESS(LCDDATA26,7)
// LCDDATA34<S23C4>
extern volatile __bit                   S23C4               __at(0x7587);	// @ (0xEB0 * 8 + 7)
#define                                 S23C4_bit           _BIT_ACCESS(LCDDATA34,7)
// LCDDATA42<S23C5>
extern volatile __bit                   S23C5               __at(0x75C7);	// @ (0xEB8 * 8 + 7)
#define                                 S23C5_bit           _BIT_ACCESS(LCDDATA42,7)
// LCDDATA50<S23C6>
extern volatile __bit                   S23C6               __at(0x7607);	// @ (0xEC0 * 8 + 7)
#define                                 S23C6_bit           _BIT_ACCESS(LCDDATA50,7)
// LCDDATA58<S23C7>
extern volatile __bit                   S23C7               __at(0x7647);	// @ (0xEC8 * 8 + 7)
#define                                 S23C7_bit           _BIT_ACCESS(LCDDATA58,7)
// LCDDATA3<S24C0>
extern volatile __bit                   S24C0               __at(0x7488);	// @ (0xE91 * 8 + 0)
#define                                 S24C0_bit           _BIT_ACCESS(LCDDATA3,0)
// LCDDATA11<S24C1>
extern volatile __bit                   S24C1               __at(0x74C8);	// @ (0xE99 * 8 + 0)
#define                                 S24C1_bit           _BIT_ACCESS(LCDDATA11,0)
// LCDDATA19<S24C2>
extern volatile __bit                   S24C2               __at(0x7508);	// @ (0xEA1 * 8 + 0)
#define                                 S24C2_bit           _BIT_ACCESS(LCDDATA19,0)
// LCDDATA27<S24C3>
extern volatile __bit                   S24C3               __at(0x7548);	// @ (0xEA9 * 8 + 0)
#define                                 S24C3_bit           _BIT_ACCESS(LCDDATA27,0)
// LCDDATA35<S24C4>
extern volatile __bit                   S24C4               __at(0x7588);	// @ (0xEB1 * 8 + 0)
#define                                 S24C4_bit           _BIT_ACCESS(LCDDATA35,0)
// LCDDATA43<S24C5>
extern volatile __bit                   S24C5               __at(0x75C8);	// @ (0xEB9 * 8 + 0)
#define                                 S24C5_bit           _BIT_ACCESS(LCDDATA43,0)
// LCDDATA51<S24C6>
extern volatile __bit                   S24C6               __at(0x7608);	// @ (0xEC1 * 8 + 0)
#define                                 S24C6_bit           _BIT_ACCESS(LCDDATA51,0)
// LCDDATA59<S24C7>
extern volatile __bit                   S24C7               __at(0x7648);	// @ (0xEC9 * 8 + 0)
#define                                 S24C7_bit           _BIT_ACCESS(LCDDATA59,0)
// LCDDATA3<S25C0>
extern volatile __bit                   S25C0               __at(0x7489);	// @ (0xE91 * 8 + 1)
#define                                 S25C0_bit           _BIT_ACCESS(LCDDATA3,1)
// LCDDATA11<S25C1>
extern volatile __bit                   S25C1               __at(0x74C9);	// @ (0xE99 * 8 + 1)
#define                                 S25C1_bit           _BIT_ACCESS(LCDDATA11,1)
// LCDDATA19<S25C2>
extern volatile __bit                   S25C2               __at(0x7509);	// @ (0xEA1 * 8 + 1)
#define                                 S25C2_bit           _BIT_ACCESS(LCDDATA19,1)
// LCDDATA27<S25C3>
extern volatile __bit                   S25C3               __at(0x7549);	// @ (0xEA9 * 8 + 1)
#define                                 S25C3_bit           _BIT_ACCESS(LCDDATA27,1)
// LCDDATA35<S25C4>
extern volatile __bit                   S25C4               __at(0x7589);	// @ (0xEB1 * 8 + 1)
#define                                 S25C4_bit           _BIT_ACCESS(LCDDATA35,1)
// LCDDATA43<S25C5>
extern volatile __bit                   S25C5               __at(0x75C9);	// @ (0xEB9 * 8 + 1)
#define                                 S25C5_bit           _BIT_ACCESS(LCDDATA43,1)
// LCDDATA51<S25C6>
extern volatile __bit                   S25C6               __at(0x7609);	// @ (0xEC1 * 8 + 1)
#define                                 S25C6_bit           _BIT_ACCESS(LCDDATA51,1)
// LCDDATA59<S25C7>
extern volatile __bit                   S25C7               __at(0x7649);	// @ (0xEC9 * 8 + 1)
#define                                 S25C7_bit           _BIT_ACCESS(LCDDATA59,1)
// LCDDATA3<S26C0>
extern volatile __bit                   S26C0               __at(0x748A);	// @ (0xE91 * 8 + 2)
#define                                 S26C0_bit           _BIT_ACCESS(LCDDATA3,2)
// LCDDATA11<S26C1>
extern volatile __bit                   S26C1               __at(0x74CA);	// @ (0xE99 * 8 + 2)
#define                                 S26C1_bit           _BIT_ACCESS(LCDDATA11,2)
// LCDDATA19<S26C2>
extern volatile __bit                   S26C2               __at(0x750A);	// @ (0xEA1 * 8 + 2)
#define                                 S26C2_bit           _BIT_ACCESS(LCDDATA19,2)
// LCDDATA27<S26C3>
extern volatile __bit                   S26C3               __at(0x754A);	// @ (0xEA9 * 8 + 2)
#define                                 S26C3_bit           _BIT_ACCESS(LCDDATA27,2)
// LCDDATA35<S26C4>
extern volatile __bit                   S26C4               __at(0x758A);	// @ (0xEB1 * 8 + 2)
#define                                 S26C4_bit           _BIT_ACCESS(LCDDATA35,2)
// LCDDATA43<S26C5>
extern volatile __bit                   S26C5               __at(0x75CA);	// @ (0xEB9 * 8 + 2)
#define                                 S26C5_bit           _BIT_ACCESS(LCDDATA43,2)
// LCDDATA51<S26C6>
extern volatile __bit                   S26C6               __at(0x760A);	// @ (0xEC1 * 8 + 2)
#define                                 S26C6_bit           _BIT_ACCESS(LCDDATA51,2)
// LCDDATA59<S26C7>
extern volatile __bit                   S26C7               __at(0x764A);	// @ (0xEC9 * 8 + 2)
#define                                 S26C7_bit           _BIT_ACCESS(LCDDATA59,2)
// LCDDATA3<S27C0>
extern volatile __bit                   S27C0               __at(0x748B);	// @ (0xE91 * 8 + 3)
#define                                 S27C0_bit           _BIT_ACCESS(LCDDATA3,3)
// LCDDATA11<S27C1>
extern volatile __bit                   S27C1               __at(0x74CB);	// @ (0xE99 * 8 + 3)
#define                                 S27C1_bit           _BIT_ACCESS(LCDDATA11,3)
// LCDDATA19<S27C2>
extern volatile __bit                   S27C2               __at(0x750B);	// @ (0xEA1 * 8 + 3)
#define                                 S27C2_bit           _BIT_ACCESS(LCDDATA19,3)
// LCDDATA27<S27C3>
extern volatile __bit                   S27C3               __at(0x754B);	// @ (0xEA9 * 8 + 3)
#define                                 S27C3_bit           _BIT_ACCESS(LCDDATA27,3)
// LCDDATA35<S27C4>
extern volatile __bit                   S27C4               __at(0x758B);	// @ (0xEB1 * 8 + 3)
#define                                 S27C4_bit           _BIT_ACCESS(LCDDATA35,3)
// LCDDATA43<S27C5>
extern volatile __bit                   S27C5               __at(0x75CB);	// @ (0xEB9 * 8 + 3)
#define                                 S27C5_bit           _BIT_ACCESS(LCDDATA43,3)
// LCDDATA51<S27C6>
extern volatile __bit                   S27C6               __at(0x760B);	// @ (0xEC1 * 8 + 3)
#define                                 S27C6_bit           _BIT_ACCESS(LCDDATA51,3)
// LCDDATA59<S27C7>
extern volatile __bit                   S27C7               __at(0x764B);	// @ (0xEC9 * 8 + 3)
#define                                 S27C7_bit           _BIT_ACCESS(LCDDATA59,3)
// LCDDATA3<S28C0>
extern volatile __bit                   S28C0               __at(0x748C);	// @ (0xE91 * 8 + 4)
#define                                 S28C0_bit           _BIT_ACCESS(LCDDATA3,4)
// LCDDATA11<S28C1>
extern volatile __bit                   S28C1               __at(0x74CC);	// @ (0xE99 * 8 + 4)
#define                                 S28C1_bit           _BIT_ACCESS(LCDDATA11,4)
// LCDDATA19<S28C2>
extern volatile __bit                   S28C2               __at(0x750C);	// @ (0xEA1 * 8 + 4)
#define                                 S28C2_bit           _BIT_ACCESS(LCDDATA19,4)
// LCDDATA27<S28C3>
extern volatile __bit                   S28C3               __at(0x754C);	// @ (0xEA9 * 8 + 4)
#define                                 S28C3_bit           _BIT_ACCESS(LCDDATA27,4)
// LCDDATA35<S28C4>
extern volatile __bit                   S28C4               __at(0x758C);	// @ (0xEB1 * 8 + 4)
#define                                 S28C4_bit           _BIT_ACCESS(LCDDATA35,4)
// LCDDATA43<S28C5>
extern volatile __bit                   S28C5               __at(0x75CC);	// @ (0xEB9 * 8 + 4)
#define                                 S28C5_bit           _BIT_ACCESS(LCDDATA43,4)
// LCDDATA51<S28C6>
extern volatile __bit                   S28C6               __at(0x760C);	// @ (0xEC1 * 8 + 4)
#define                                 S28C6_bit           _BIT_ACCESS(LCDDATA51,4)
// LCDDATA59<S28C7>
extern volatile __bit                   S28C7               __at(0x764C);	// @ (0xEC9 * 8 + 4)
#define                                 S28C7_bit           _BIT_ACCESS(LCDDATA59,4)
// LCDDATA3<S29C0>
extern volatile __bit                   S29C0               __at(0x748D);	// @ (0xE91 * 8 + 5)
#define                                 S29C0_bit           _BIT_ACCESS(LCDDATA3,5)
// LCDDATA11<S29C1>
extern volatile __bit                   S29C1               __at(0x74CD);	// @ (0xE99 * 8 + 5)
#define                                 S29C1_bit           _BIT_ACCESS(LCDDATA11,5)
// LCDDATA19<S29C2>
extern volatile __bit                   S29C2               __at(0x750D);	// @ (0xEA1 * 8 + 5)
#define                                 S29C2_bit           _BIT_ACCESS(LCDDATA19,5)
// LCDDATA27<S29C3>
extern volatile __bit                   S29C3               __at(0x754D);	// @ (0xEA9 * 8 + 5)
#define                                 S29C3_bit           _BIT_ACCESS(LCDDATA27,5)
// LCDDATA35<S29C4>
extern volatile __bit                   S29C4               __at(0x758D);	// @ (0xEB1 * 8 + 5)
#define                                 S29C4_bit           _BIT_ACCESS(LCDDATA35,5)
// LCDDATA43<S29C5>
extern volatile __bit                   S29C5               __at(0x75CD);	// @ (0xEB9 * 8 + 5)
#define                                 S29C5_bit           _BIT_ACCESS(LCDDATA43,5)
// LCDDATA51<S29C6>
extern volatile __bit                   S29C6               __at(0x760D);	// @ (0xEC1 * 8 + 5)
#define                                 S29C6_bit           _BIT_ACCESS(LCDDATA51,5)
// LCDDATA59<S29C7>
extern volatile __bit                   S29C7               __at(0x764D);	// @ (0xEC9 * 8 + 5)
#define                                 S29C7_bit           _BIT_ACCESS(LCDDATA59,5)
// LCDDATA3<S30C0>
extern volatile __bit                   S30C0               __at(0x748E);	// @ (0xE91 * 8 + 6)
#define                                 S30C0_bit           _BIT_ACCESS(LCDDATA3,6)
// LCDDATA11<S30C1>
extern volatile __bit                   S30C1               __at(0x74CE);	// @ (0xE99 * 8 + 6)
#define                                 S30C1_bit           _BIT_ACCESS(LCDDATA11,6)
// LCDDATA19<S30C2>
extern volatile __bit                   S30C2               __at(0x750E);	// @ (0xEA1 * 8 + 6)
#define                                 S30C2_bit           _BIT_ACCESS(LCDDATA19,6)
// LCDDATA27<S30C3>
extern volatile __bit                   S30C3               __at(0x754E);	// @ (0xEA9 * 8 + 6)
#define                                 S30C3_bit           _BIT_ACCESS(LCDDATA27,6)
// LCDDATA35<S30C4>
extern volatile __bit                   S30C4               __at(0x758E);	// @ (0xEB1 * 8 + 6)
#define                                 S30C4_bit           _BIT_ACCESS(LCDDATA35,6)
// LCDDATA43<S30C5>
extern volatile __bit                   S30C5               __at(0x75CE);	// @ (0xEB9 * 8 + 6)
#define                                 S30C5_bit           _BIT_ACCESS(LCDDATA43,6)
// LCDDATA51<S30C6>
extern volatile __bit                   S30C6               __at(0x760E);	// @ (0xEC1 * 8 + 6)
#define                                 S30C6_bit           _BIT_ACCESS(LCDDATA51,6)
// LCDDATA59<S30C7>
extern volatile __bit                   S30C7               __at(0x764E);	// @ (0xEC9 * 8 + 6)
#define                                 S30C7_bit           _BIT_ACCESS(LCDDATA59,6)
// LCDDATA3<S31C0>
extern volatile __bit                   S31C0               __at(0x748F);	// @ (0xE91 * 8 + 7)
#define                                 S31C0_bit           _BIT_ACCESS(LCDDATA3,7)
// LCDDATA11<S31C1>
extern volatile __bit                   S31C1               __at(0x74CF);	// @ (0xE99 * 8 + 7)
#define                                 S31C1_bit           _BIT_ACCESS(LCDDATA11,7)
// LCDDATA19<S31C2>
extern volatile __bit                   S31C2               __at(0x750F);	// @ (0xEA1 * 8 + 7)
#define                                 S31C2_bit           _BIT_ACCESS(LCDDATA19,7)
// LCDDATA27<S31C3>
extern volatile __bit                   S31C3               __at(0x754F);	// @ (0xEA9 * 8 + 7)
#define                                 S31C3_bit           _BIT_ACCESS(LCDDATA27,7)
// LCDDATA35<S31C4>
extern volatile __bit                   S31C4               __at(0x758F);	// @ (0xEB1 * 8 + 7)
#define                                 S31C4_bit           _BIT_ACCESS(LCDDATA35,7)
// LCDDATA43<S31C5>
extern volatile __bit                   S31C5               __at(0x75CF);	// @ (0xEB9 * 8 + 7)
#define                                 S31C5_bit           _BIT_ACCESS(LCDDATA43,7)
// LCDDATA51<S31C6>
extern volatile __bit                   S31C6               __at(0x760F);	// @ (0xEC1 * 8 + 7)
#define                                 S31C6_bit           _BIT_ACCESS(LCDDATA51,7)
// LCDDATA59<S31C7>
extern volatile __bit                   S31C7               __at(0x764F);	// @ (0xEC9 * 8 + 7)
#define                                 S31C7_bit           _BIT_ACCESS(LCDDATA59,7)
// LCDDATA4<S32C0>
extern volatile __bit                   S32C0               __at(0x7490);	// @ (0xE92 * 8 + 0)
#define                                 S32C0_bit           _BIT_ACCESS(LCDDATA4,0)
// LCDDATA12<S32C1>
extern volatile __bit                   S32C1               __at(0x74D0);	// @ (0xE9A * 8 + 0)
#define                                 S32C1_bit           _BIT_ACCESS(LCDDATA12,0)
// LCDDATA20<S32C2>
extern volatile __bit                   S32C2               __at(0x7510);	// @ (0xEA2 * 8 + 0)
#define                                 S32C2_bit           _BIT_ACCESS(LCDDATA20,0)
// LCDDATA28<S32C3>
extern volatile __bit                   S32C3               __at(0x7550);	// @ (0xEAA * 8 + 0)
#define                                 S32C3_bit           _BIT_ACCESS(LCDDATA28,0)
// LCDDATA36<S32C4>
extern volatile __bit                   S32C4               __at(0x7590);	// @ (0xEB2 * 8 + 0)
#define                                 S32C4_bit           _BIT_ACCESS(LCDDATA36,0)
// LCDDATA44<S32C5>
extern volatile __bit                   S32C5               __at(0x75D0);	// @ (0xEBA * 8 + 0)
#define                                 S32C5_bit           _BIT_ACCESS(LCDDATA44,0)
// LCDDATA52<S32C6>
extern volatile __bit                   S32C6               __at(0x7610);	// @ (0xEC2 * 8 + 0)
#define                                 S32C6_bit           _BIT_ACCESS(LCDDATA52,0)
// LCDDATA60<S32C7>
extern volatile __bit                   S32C7               __at(0x7650);	// @ (0xECA * 8 + 0)
#define                                 S32C7_bit           _BIT_ACCESS(LCDDATA60,0)
// LCDDATA4<S33C0>
extern volatile __bit                   S33C0               __at(0x7491);	// @ (0xE92 * 8 + 1)
#define                                 S33C0_bit           _BIT_ACCESS(LCDDATA4,1)
// LCDDATA12<S33C1>
extern volatile __bit                   S33C1               __at(0x74D1);	// @ (0xE9A * 8 + 1)
#define                                 S33C1_bit           _BIT_ACCESS(LCDDATA12,1)
// LCDDATA20<S33C2>
extern volatile __bit                   S33C2               __at(0x7511);	// @ (0xEA2 * 8 + 1)
#define                                 S33C2_bit           _BIT_ACCESS(LCDDATA20,1)
// LCDDATA28<S33C3>
extern volatile __bit                   S33C3               __at(0x7551);	// @ (0xEAA * 8 + 1)
#define                                 S33C3_bit           _BIT_ACCESS(LCDDATA28,1)
// LCDDATA36<S33C4>
extern volatile __bit                   S33C4               __at(0x7591);	// @ (0xEB2 * 8 + 1)
#define                                 S33C4_bit           _BIT_ACCESS(LCDDATA36,1)
// LCDDATA44<S33C5>
extern volatile __bit                   S33C5               __at(0x75D1);	// @ (0xEBA * 8 + 1)
#define                                 S33C5_bit           _BIT_ACCESS(LCDDATA44,1)
// LCDDATA52<S33C6>
extern volatile __bit                   S33C6               __at(0x7611);	// @ (0xEC2 * 8 + 1)
#define                                 S33C6_bit           _BIT_ACCESS(LCDDATA52,1)
// LCDDATA60<S33C7>
extern volatile __bit                   S33C7               __at(0x7651);	// @ (0xECA * 8 + 1)
#define                                 S33C7_bit           _BIT_ACCESS(LCDDATA60,1)
// LCDDATA4<S34C0>
extern volatile __bit                   S34C0               __at(0x7492);	// @ (0xE92 * 8 + 2)
#define                                 S34C0_bit           _BIT_ACCESS(LCDDATA4,2)
// LCDDATA12<S34C1>
extern volatile __bit                   S34C1               __at(0x74D2);	// @ (0xE9A * 8 + 2)
#define                                 S34C1_bit           _BIT_ACCESS(LCDDATA12,2)
// LCDDATA20<S34C2>
extern volatile __bit                   S34C2               __at(0x7512);	// @ (0xEA2 * 8 + 2)
#define                                 S34C2_bit           _BIT_ACCESS(LCDDATA20,2)
// LCDDATA28<S34C3>
extern volatile __bit                   S34C3               __at(0x7552);	// @ (0xEAA * 8 + 2)
#define                                 S34C3_bit           _BIT_ACCESS(LCDDATA28,2)
// LCDDATA36<S34C4>
extern volatile __bit                   S34C4               __at(0x7592);	// @ (0xEB2 * 8 + 2)
#define                                 S34C4_bit           _BIT_ACCESS(LCDDATA36,2)
// LCDDATA44<S34C5>
extern volatile __bit                   S34C5               __at(0x75D2);	// @ (0xEBA * 8 + 2)
#define                                 S34C5_bit           _BIT_ACCESS(LCDDATA44,2)
// LCDDATA52<S34C6>
extern volatile __bit                   S34C6               __at(0x7612);	// @ (0xEC2 * 8 + 2)
#define                                 S34C6_bit           _BIT_ACCESS(LCDDATA52,2)
// LCDDATA60<S34C7>
extern volatile __bit                   S34C7               __at(0x7652);	// @ (0xECA * 8 + 2)
#define                                 S34C7_bit           _BIT_ACCESS(LCDDATA60,2)
// LCDDATA4<S35C0>
extern volatile __bit                   S35C0               __at(0x7493);	// @ (0xE92 * 8 + 3)
#define                                 S35C0_bit           _BIT_ACCESS(LCDDATA4,3)
// LCDDATA12<S35C1>
extern volatile __bit                   S35C1               __at(0x74D3);	// @ (0xE9A * 8 + 3)
#define                                 S35C1_bit           _BIT_ACCESS(LCDDATA12,3)
// LCDDATA20<S35C2>
extern volatile __bit                   S35C2               __at(0x7513);	// @ (0xEA2 * 8 + 3)
#define                                 S35C2_bit           _BIT_ACCESS(LCDDATA20,3)
// LCDDATA28<S35C3>
extern volatile __bit                   S35C3               __at(0x7553);	// @ (0xEAA * 8 + 3)
#define                                 S35C3_bit           _BIT_ACCESS(LCDDATA28,3)
// LCDDATA36<S35C4>
extern volatile __bit                   S35C4               __at(0x7593);	// @ (0xEB2 * 8 + 3)
#define                                 S35C4_bit           _BIT_ACCESS(LCDDATA36,3)
// LCDDATA44<S35C5>
extern volatile __bit                   S35C5               __at(0x75D3);	// @ (0xEBA * 8 + 3)
#define                                 S35C5_bit           _BIT_ACCESS(LCDDATA44,3)
// LCDDATA52<S35C6>
extern volatile __bit                   S35C6               __at(0x7613);	// @ (0xEC2 * 8 + 3)
#define                                 S35C6_bit           _BIT_ACCESS(LCDDATA52,3)
// LCDDATA60<S35C7>
extern volatile __bit                   S35C7               __at(0x7653);	// @ (0xECA * 8 + 3)
#define                                 S35C7_bit           _BIT_ACCESS(LCDDATA60,3)
// LCDDATA4<S36C0>
extern volatile __bit                   S36C0               __at(0x7494);	// @ (0xE92 * 8 + 4)
#define                                 S36C0_bit           _BIT_ACCESS(LCDDATA4,4)
// LCDDATA12<S36C1>
extern volatile __bit                   S36C1               __at(0x74D4);	// @ (0xE9A * 8 + 4)
#define                                 S36C1_bit           _BIT_ACCESS(LCDDATA12,4)
// LCDDATA20<S36C2>
extern volatile __bit                   S36C2               __at(0x7514);	// @ (0xEA2 * 8 + 4)
#define                                 S36C2_bit           _BIT_ACCESS(LCDDATA20,4)
// LCDDATA28<S36C3>
extern volatile __bit                   S36C3               __at(0x7554);	// @ (0xEAA * 8 + 4)
#define                                 S36C3_bit           _BIT_ACCESS(LCDDATA28,4)
// LCDDATA36<S36C4>
extern volatile __bit                   S36C4               __at(0x7594);	// @ (0xEB2 * 8 + 4)
#define                                 S36C4_bit           _BIT_ACCESS(LCDDATA36,4)
// LCDDATA44<S36C5>
extern volatile __bit                   S36C5               __at(0x75D4);	// @ (0xEBA * 8 + 4)
#define                                 S36C5_bit           _BIT_ACCESS(LCDDATA44,4)
// LCDDATA52<S36C6>
extern volatile __bit                   S36C6               __at(0x7614);	// @ (0xEC2 * 8 + 4)
#define                                 S36C6_bit           _BIT_ACCESS(LCDDATA52,4)
// LCDDATA60<S36C7>
extern volatile __bit                   S36C7               __at(0x7654);	// @ (0xECA * 8 + 4)
#define                                 S36C7_bit           _BIT_ACCESS(LCDDATA60,4)
// LCDDATA4<S37C0>
extern volatile __bit                   S37C0               __at(0x7495);	// @ (0xE92 * 8 + 5)
#define                                 S37C0_bit           _BIT_ACCESS(LCDDATA4,5)
// LCDDATA12<S37C1>
extern volatile __bit                   S37C1               __at(0x74D5);	// @ (0xE9A * 8 + 5)
#define                                 S37C1_bit           _BIT_ACCESS(LCDDATA12,5)
// LCDDATA20<S37C2>
extern volatile __bit                   S37C2               __at(0x7515);	// @ (0xEA2 * 8 + 5)
#define                                 S37C2_bit           _BIT_ACCESS(LCDDATA20,5)
// LCDDATA28<S37C3>
extern volatile __bit                   S37C3               __at(0x7555);	// @ (0xEAA * 8 + 5)
#define                                 S37C3_bit           _BIT_ACCESS(LCDDATA28,5)
// LCDDATA36<S37C4>
extern volatile __bit                   S37C4               __at(0x7595);	// @ (0xEB2 * 8 + 5)
#define                                 S37C4_bit           _BIT_ACCESS(LCDDATA36,5)
// LCDDATA44<S37C5>
extern volatile __bit                   S37C5               __at(0x75D5);	// @ (0xEBA * 8 + 5)
#define                                 S37C5_bit           _BIT_ACCESS(LCDDATA44,5)
// LCDDATA52<S37C6>
extern volatile __bit                   S37C6               __at(0x7615);	// @ (0xEC2 * 8 + 5)
#define                                 S37C6_bit           _BIT_ACCESS(LCDDATA52,5)
// LCDDATA60<S37C7>
extern volatile __bit                   S37C7               __at(0x7655);	// @ (0xECA * 8 + 5)
#define                                 S37C7_bit           _BIT_ACCESS(LCDDATA60,5)
// LCDDATA4<S38C0>
extern volatile __bit                   S38C0               __at(0x7496);	// @ (0xE92 * 8 + 6)
#define                                 S38C0_bit           _BIT_ACCESS(LCDDATA4,6)
// LCDDATA12<S38C1>
extern volatile __bit                   S38C1               __at(0x74D6);	// @ (0xE9A * 8 + 6)
#define                                 S38C1_bit           _BIT_ACCESS(LCDDATA12,6)
// LCDDATA20<S38C2>
extern volatile __bit                   S38C2               __at(0x7516);	// @ (0xEA2 * 8 + 6)
#define                                 S38C2_bit           _BIT_ACCESS(LCDDATA20,6)
// LCDDATA28<S38C3>
extern volatile __bit                   S38C3               __at(0x7556);	// @ (0xEAA * 8 + 6)
#define                                 S38C3_bit           _BIT_ACCESS(LCDDATA28,6)
// LCDDATA36<S38C4>
extern volatile __bit                   S38C4               __at(0x7596);	// @ (0xEB2 * 8 + 6)
#define                                 S38C4_bit           _BIT_ACCESS(LCDDATA36,6)
// LCDDATA44<S38C5>
extern volatile __bit                   S38C5               __at(0x75D6);	// @ (0xEBA * 8 + 6)
#define                                 S38C5_bit           _BIT_ACCESS(LCDDATA44,6)
// LCDDATA52<S38C6>
extern volatile __bit                   S38C6               __at(0x7616);	// @ (0xEC2 * 8 + 6)
#define                                 S38C6_bit           _BIT_ACCESS(LCDDATA52,6)
// LCDDATA60<S38C7>
extern volatile __bit                   S38C7               __at(0x7656);	// @ (0xECA * 8 + 6)
#define                                 S38C7_bit           _BIT_ACCESS(LCDDATA60,6)
// LCDDATA4<S39C0>
extern volatile __bit                   S39C0               __at(0x7497);	// @ (0xE92 * 8 + 7)
#define                                 S39C0_bit           _BIT_ACCESS(LCDDATA4,7)
// LCDDATA12<S39C1>
extern volatile __bit                   S39C1               __at(0x74D7);	// @ (0xE9A * 8 + 7)
#define                                 S39C1_bit           _BIT_ACCESS(LCDDATA12,7)
// LCDDATA20<S39C2>
extern volatile __bit                   S39C2               __at(0x7517);	// @ (0xEA2 * 8 + 7)
#define                                 S39C2_bit           _BIT_ACCESS(LCDDATA20,7)
// LCDDATA28<S39C3>
extern volatile __bit                   S39C3               __at(0x7557);	// @ (0xEAA * 8 + 7)
#define                                 S39C3_bit           _BIT_ACCESS(LCDDATA28,7)
// LCDDATA36<S39C4>
extern volatile __bit                   S39C4               __at(0x7597);	// @ (0xEB2 * 8 + 7)
#define                                 S39C4_bit           _BIT_ACCESS(LCDDATA36,7)
// LCDDATA44<S39C5>
extern volatile __bit                   S39C5               __at(0x75D7);	// @ (0xEBA * 8 + 7)
#define                                 S39C5_bit           _BIT_ACCESS(LCDDATA44,7)
// LCDDATA52<S39C6>
extern volatile __bit                   S39C6               __at(0x7617);	// @ (0xEC2 * 8 + 7)
#define                                 S39C6_bit           _BIT_ACCESS(LCDDATA52,7)
// LCDDATA60<S39C7>
extern volatile __bit                   S39C7               __at(0x7657);	// @ (0xECA * 8 + 7)
#define                                 S39C7_bit           _BIT_ACCESS(LCDDATA60,7)
// LCDDATA5<S40C0>
extern volatile __bit                   S40C0               __at(0x7498);	// @ (0xE93 * 8 + 0)
#define                                 S40C0_bit           _BIT_ACCESS(LCDDATA5,0)
// LCDDATA13<S40C1>
extern volatile __bit                   S40C1               __at(0x74D8);	// @ (0xE9B * 8 + 0)
#define                                 S40C1_bit           _BIT_ACCESS(LCDDATA13,0)
// LCDDATA5<S40C15>
extern volatile __bit                   S40C15              __at(0x7498);	// @ (0xE93 * 8 + 0)
#define                                 S40C15_bit          _BIT_ACCESS(LCDDATA5,0)
// LCDDATA21<S40C2>
extern volatile __bit                   S40C2               __at(0x7518);	// @ (0xEA3 * 8 + 0)
#define                                 S40C2_bit           _BIT_ACCESS(LCDDATA21,0)
// LCDDATA29<S40C3>
extern volatile __bit                   S40C3               __at(0x7558);	// @ (0xEAB * 8 + 0)
#define                                 S40C3_bit           _BIT_ACCESS(LCDDATA29,0)
// LCDDATA37<S40C4>
extern volatile __bit                   S40C4               __at(0x7598);	// @ (0xEB3 * 8 + 0)
#define                                 S40C4_bit           _BIT_ACCESS(LCDDATA37,0)
// LCDDATA45<S40C5>
extern volatile __bit                   S40C5               __at(0x75D8);	// @ (0xEBB * 8 + 0)
#define                                 S40C5_bit           _BIT_ACCESS(LCDDATA45,0)
// LCDDATA53<S40C6>
extern volatile __bit                   S40C6               __at(0x7618);	// @ (0xEC3 * 8 + 0)
#define                                 S40C6_bit           _BIT_ACCESS(LCDDATA53,0)
// LCDDATA61<S40C7>
extern volatile __bit                   S40C7               __at(0x7658);	// @ (0xECB * 8 + 0)
#define                                 S40C7_bit           _BIT_ACCESS(LCDDATA61,0)
// LCDDATA5<S41C0>
extern volatile __bit                   S41C0               __at(0x7499);	// @ (0xE93 * 8 + 1)
#define                                 S41C0_bit           _BIT_ACCESS(LCDDATA5,1)
// LCDDATA13<S41C1>
extern volatile __bit                   S41C1               __at(0x74D9);	// @ (0xE9B * 8 + 1)
#define                                 S41C1_bit           _BIT_ACCESS(LCDDATA13,1)
// LCDDATA21<S41C2>
extern volatile __bit                   S41C2               __at(0x7519);	// @ (0xEA3 * 8 + 1)
#define                                 S41C2_bit           _BIT_ACCESS(LCDDATA21,1)
// LCDDATA29<S41C3>
extern volatile __bit                   S41C3               __at(0x7559);	// @ (0xEAB * 8 + 1)
#define                                 S41C3_bit           _BIT_ACCESS(LCDDATA29,1)
// LCDDATA37<S41C4>
extern volatile __bit                   S41C4               __at(0x7599);	// @ (0xEB3 * 8 + 1)
#define                                 S41C4_bit           _BIT_ACCESS(LCDDATA37,1)
// LCDDATA45<S41C5>
extern volatile __bit                   S41C5               __at(0x75D9);	// @ (0xEBB * 8 + 1)
#define                                 S41C5_bit           _BIT_ACCESS(LCDDATA45,1)
// LCDDATA53<S41C6>
extern volatile __bit                   S41C6               __at(0x7619);	// @ (0xEC3 * 8 + 1)
#define                                 S41C6_bit           _BIT_ACCESS(LCDDATA53,1)
// LCDDATA61<S41C7>
extern volatile __bit                   S41C7               __at(0x7659);	// @ (0xECB * 8 + 1)
#define                                 S41C7_bit           _BIT_ACCESS(LCDDATA61,1)
// LCDDATA5<S42C0>
extern volatile __bit                   S42C0               __at(0x749A);	// @ (0xE93 * 8 + 2)
#define                                 S42C0_bit           _BIT_ACCESS(LCDDATA5,2)
// LCDDATA13<S42C1>
extern volatile __bit                   S42C1               __at(0x74DA);	// @ (0xE9B * 8 + 2)
#define                                 S42C1_bit           _BIT_ACCESS(LCDDATA13,2)
// LCDDATA21<S42C2>
extern volatile __bit                   S42C2               __at(0x751A);	// @ (0xEA3 * 8 + 2)
#define                                 S42C2_bit           _BIT_ACCESS(LCDDATA21,2)
// LCDDATA29<S42C3>
extern volatile __bit                   S42C3               __at(0x755A);	// @ (0xEAB * 8 + 2)
#define                                 S42C3_bit           _BIT_ACCESS(LCDDATA29,2)
// LCDDATA37<S42C4>
extern volatile __bit                   S42C4               __at(0x759A);	// @ (0xEB3 * 8 + 2)
#define                                 S42C4_bit           _BIT_ACCESS(LCDDATA37,2)
// LCDDATA45<S42C5>
extern volatile __bit                   S42C5               __at(0x75DA);	// @ (0xEBB * 8 + 2)
#define                                 S42C5_bit           _BIT_ACCESS(LCDDATA45,2)
// LCDDATA53<S42C6>
extern volatile __bit                   S42C6               __at(0x761A);	// @ (0xEC3 * 8 + 2)
#define                                 S42C6_bit           _BIT_ACCESS(LCDDATA53,2)
// LCDDATA61<S42C7>
extern volatile __bit                   S42C7               __at(0x765A);	// @ (0xECB * 8 + 2)
#define                                 S42C7_bit           _BIT_ACCESS(LCDDATA61,2)
// LCDDATA5<S43C0>
extern volatile __bit                   S43C0               __at(0x749B);	// @ (0xE93 * 8 + 3)
#define                                 S43C0_bit           _BIT_ACCESS(LCDDATA5,3)
// LCDDATA13<S43C1>
extern volatile __bit                   S43C1               __at(0x74DB);	// @ (0xE9B * 8 + 3)
#define                                 S43C1_bit           _BIT_ACCESS(LCDDATA13,3)
// LCDDATA21<S43C2>
extern volatile __bit                   S43C2               __at(0x751B);	// @ (0xEA3 * 8 + 3)
#define                                 S43C2_bit           _BIT_ACCESS(LCDDATA21,3)
// LCDDATA29<S43C3>
extern volatile __bit                   S43C3               __at(0x755B);	// @ (0xEAB * 8 + 3)
#define                                 S43C3_bit           _BIT_ACCESS(LCDDATA29,3)
// LCDDATA37<S43C4>
extern volatile __bit                   S43C4               __at(0x759B);	// @ (0xEB3 * 8 + 3)
#define                                 S43C4_bit           _BIT_ACCESS(LCDDATA37,3)
// LCDDATA45<S43C5>
extern volatile __bit                   S43C5               __at(0x75DB);	// @ (0xEBB * 8 + 3)
#define                                 S43C5_bit           _BIT_ACCESS(LCDDATA45,3)
// LCDDATA53<S43C6>
extern volatile __bit                   S43C6               __at(0x761B);	// @ (0xEC3 * 8 + 3)
#define                                 S43C6_bit           _BIT_ACCESS(LCDDATA53,3)
// LCDDATA61<S43C7>
extern volatile __bit                   S43C7               __at(0x765B);	// @ (0xECB * 8 + 3)
#define                                 S43C7_bit           _BIT_ACCESS(LCDDATA61,3)
// LCDDATA5<S44C0>
extern volatile __bit                   S44C0               __at(0x749C);	// @ (0xE93 * 8 + 4)
#define                                 S44C0_bit           _BIT_ACCESS(LCDDATA5,4)
// LCDDATA13<S44C1>
extern volatile __bit                   S44C1               __at(0x74DC);	// @ (0xE9B * 8 + 4)
#define                                 S44C1_bit           _BIT_ACCESS(LCDDATA13,4)
// LCDDATA21<S44C2>
extern volatile __bit                   S44C2               __at(0x751C);	// @ (0xEA3 * 8 + 4)
#define                                 S44C2_bit           _BIT_ACCESS(LCDDATA21,4)
// LCDDATA29<S44C3>
extern volatile __bit                   S44C3               __at(0x755C);	// @ (0xEAB * 8 + 4)
#define                                 S44C3_bit           _BIT_ACCESS(LCDDATA29,4)
// LCDDATA37<S44C4>
extern volatile __bit                   S44C4               __at(0x759C);	// @ (0xEB3 * 8 + 4)
#define                                 S44C4_bit           _BIT_ACCESS(LCDDATA37,4)
// LCDDATA45<S44C5>
extern volatile __bit                   S44C5               __at(0x75DC);	// @ (0xEBB * 8 + 4)
#define                                 S44C5_bit           _BIT_ACCESS(LCDDATA45,4)
// LCDDATA53<S44C6>
extern volatile __bit                   S44C6               __at(0x761C);	// @ (0xEC3 * 8 + 4)
#define                                 S44C6_bit           _BIT_ACCESS(LCDDATA53,4)
// LCDDATA61<S44C7>
extern volatile __bit                   S44C7               __at(0x765C);	// @ (0xECB * 8 + 4)
#define                                 S44C7_bit           _BIT_ACCESS(LCDDATA61,4)
// LCDDATA5<S45C0>
extern volatile __bit                   S45C0               __at(0x749D);	// @ (0xE93 * 8 + 5)
#define                                 S45C0_bit           _BIT_ACCESS(LCDDATA5,5)
// LCDDATA13<S45C1>
extern volatile __bit                   S45C1               __at(0x74DD);	// @ (0xE9B * 8 + 5)
#define                                 S45C1_bit           _BIT_ACCESS(LCDDATA13,5)
// LCDDATA21<S45C2>
extern volatile __bit                   S45C2               __at(0x751D);	// @ (0xEA3 * 8 + 5)
#define                                 S45C2_bit           _BIT_ACCESS(LCDDATA21,5)
// LCDDATA29<S45C3>
extern volatile __bit                   S45C3               __at(0x755D);	// @ (0xEAB * 8 + 5)
#define                                 S45C3_bit           _BIT_ACCESS(LCDDATA29,5)
// LCDDATA37<S45C4>
extern volatile __bit                   S45C4               __at(0x759D);	// @ (0xEB3 * 8 + 5)
#define                                 S45C4_bit           _BIT_ACCESS(LCDDATA37,5)
// LCDDATA45<S45C5>
extern volatile __bit                   S45C5               __at(0x75DD);	// @ (0xEBB * 8 + 5)
#define                                 S45C5_bit           _BIT_ACCESS(LCDDATA45,5)
// LCDDATA53<S45C6>
extern volatile __bit                   S45C6               __at(0x761D);	// @ (0xEC3 * 8 + 5)
#define                                 S45C6_bit           _BIT_ACCESS(LCDDATA53,5)
// LCDDATA61<S45C7>
extern volatile __bit                   S45C7               __at(0x765D);	// @ (0xECB * 8 + 5)
#define                                 S45C7_bit           _BIT_ACCESS(LCDDATA61,5)
// LCDDATA5<S46C0>
extern volatile __bit                   S46C0               __at(0x749E);	// @ (0xE93 * 8 + 6)
#define                                 S46C0_bit           _BIT_ACCESS(LCDDATA5,6)
// LCDDATA13<S46C1>
extern volatile __bit                   S46C1               __at(0x74DE);	// @ (0xE9B * 8 + 6)
#define                                 S46C1_bit           _BIT_ACCESS(LCDDATA13,6)
// LCDDATA21<S46C2>
extern volatile __bit                   S46C2               __at(0x751E);	// @ (0xEA3 * 8 + 6)
#define                                 S46C2_bit           _BIT_ACCESS(LCDDATA21,6)
// LCDDATA29<S46C3>
extern volatile __bit                   S46C3               __at(0x755E);	// @ (0xEAB * 8 + 6)
#define                                 S46C3_bit           _BIT_ACCESS(LCDDATA29,6)
// LCDDATA37<S46C4>
extern volatile __bit                   S46C4               __at(0x759E);	// @ (0xEB3 * 8 + 6)
#define                                 S46C4_bit           _BIT_ACCESS(LCDDATA37,6)
// LCDDATA45<S46C5>
extern volatile __bit                   S46C5               __at(0x75DE);	// @ (0xEBB * 8 + 6)
#define                                 S46C5_bit           _BIT_ACCESS(LCDDATA45,6)
// LCDDATA53<S46C6>
extern volatile __bit                   S46C6               __at(0x761E);	// @ (0xEC3 * 8 + 6)
#define                                 S46C6_bit           _BIT_ACCESS(LCDDATA53,6)
// LCDDATA61<S46C7>
extern volatile __bit                   S46C7               __at(0x765E);	// @ (0xECB * 8 + 6)
#define                                 S46C7_bit           _BIT_ACCESS(LCDDATA61,6)
// LCDDATA5<S47C0>
extern volatile __bit                   S47C0               __at(0x749F);	// @ (0xE93 * 8 + 7)
#define                                 S47C0_bit           _BIT_ACCESS(LCDDATA5,7)
// LCDDATA13<S47C1>
extern volatile __bit                   S47C1               __at(0x74DF);	// @ (0xE9B * 8 + 7)
#define                                 S47C1_bit           _BIT_ACCESS(LCDDATA13,7)
// LCDDATA21<S47C2>
extern volatile __bit                   S47C2               __at(0x751F);	// @ (0xEA3 * 8 + 7)
#define                                 S47C2_bit           _BIT_ACCESS(LCDDATA21,7)
// LCDDATA29<S47C3>
extern volatile __bit                   S47C3               __at(0x755F);	// @ (0xEAB * 8 + 7)
#define                                 S47C3_bit           _BIT_ACCESS(LCDDATA29,7)
// LCDDATA37<S47C4>
extern volatile __bit                   S47C4               __at(0x759F);	// @ (0xEB3 * 8 + 7)
#define                                 S47C4_bit           _BIT_ACCESS(LCDDATA37,7)
// LCDDATA45<S47C5>
extern volatile __bit                   S47C5               __at(0x75DF);	// @ (0xEBB * 8 + 7)
#define                                 S47C5_bit           _BIT_ACCESS(LCDDATA45,7)
// LCDDATA53<S47C6>
extern volatile __bit                   S47C6               __at(0x761F);	// @ (0xEC3 * 8 + 7)
#define                                 S47C6_bit           _BIT_ACCESS(LCDDATA53,7)
// LCDDATA61<S47C7>
extern volatile __bit                   S47C7               __at(0x765F);	// @ (0xECB * 8 + 7)
#define                                 S47C7_bit           _BIT_ACCESS(LCDDATA61,7)
// LCDDATA6<S48C0>
extern volatile __bit                   S48C0               __at(0x74A0);	// @ (0xE94 * 8 + 0)
#define                                 S48C0_bit           _BIT_ACCESS(LCDDATA6,0)
// LCDDATA14<S48C1>
extern volatile __bit                   S48C1               __at(0x74E0);	// @ (0xE9C * 8 + 0)
#define                                 S48C1_bit           _BIT_ACCESS(LCDDATA14,0)
// LCDDATA22<S48C2>
extern volatile __bit                   S48C2               __at(0x7520);	// @ (0xEA4 * 8 + 0)
#define                                 S48C2_bit           _BIT_ACCESS(LCDDATA22,0)
// LCDDATA30<S48C3>
extern volatile __bit                   S48C3               __at(0x7560);	// @ (0xEAC * 8 + 0)
#define                                 S48C3_bit           _BIT_ACCESS(LCDDATA30,0)
// LCDDATA38<S48C4>
extern volatile __bit                   S48C4               __at(0x75A0);	// @ (0xEB4 * 8 + 0)
#define                                 S48C4_bit           _BIT_ACCESS(LCDDATA38,0)
// LCDDATA46<S48C5>
extern volatile __bit                   S48C5               __at(0x75E0);	// @ (0xEBC * 8 + 0)
#define                                 S48C5_bit           _BIT_ACCESS(LCDDATA46,0)
// LCDDATA54<S48C6>
extern volatile __bit                   S48C6               __at(0x7620);	// @ (0xEC4 * 8 + 0)
#define                                 S48C6_bit           _BIT_ACCESS(LCDDATA54,0)
// LCDDATA62<S48C7>
extern volatile __bit                   S48C7               __at(0x7660);	// @ (0xECC * 8 + 0)
#define                                 S48C7_bit           _BIT_ACCESS(LCDDATA62,0)
// LCDDATA6<S49C0>
extern volatile __bit                   S49C0               __at(0x74A1);	// @ (0xE94 * 8 + 1)
#define                                 S49C0_bit           _BIT_ACCESS(LCDDATA6,1)
// LCDDATA14<S49C1>
extern volatile __bit                   S49C1               __at(0x74E1);	// @ (0xE9C * 8 + 1)
#define                                 S49C1_bit           _BIT_ACCESS(LCDDATA14,1)
// LCDDATA22<S49C2>
extern volatile __bit                   S49C2               __at(0x7521);	// @ (0xEA4 * 8 + 1)
#define                                 S49C2_bit           _BIT_ACCESS(LCDDATA22,1)
// LCDDATA30<S49C3>
extern volatile __bit                   S49C3               __at(0x7561);	// @ (0xEAC * 8 + 1)
#define                                 S49C3_bit           _BIT_ACCESS(LCDDATA30,1)
// LCDDATA38<S49C4>
extern volatile __bit                   S49C4               __at(0x75A1);	// @ (0xEB4 * 8 + 1)
#define                                 S49C4_bit           _BIT_ACCESS(LCDDATA38,1)
// LCDDATA46<S49C5>
extern volatile __bit                   S49C5               __at(0x75E1);	// @ (0xEBC * 8 + 1)
#define                                 S49C5_bit           _BIT_ACCESS(LCDDATA46,1)
// LCDDATA54<S49C6>
extern volatile __bit                   S49C6               __at(0x7621);	// @ (0xEC4 * 8 + 1)
#define                                 S49C6_bit           _BIT_ACCESS(LCDDATA54,1)
// LCDDATA62<S49C7>
extern volatile __bit                   S49C7               __at(0x7661);	// @ (0xECC * 8 + 1)
#define                                 S49C7_bit           _BIT_ACCESS(LCDDATA62,1)
// LCDDATA6<S50C0>
extern volatile __bit                   S50C0               __at(0x74A2);	// @ (0xE94 * 8 + 2)
#define                                 S50C0_bit           _BIT_ACCESS(LCDDATA6,2)
// LCDDATA14<S50C1>
extern volatile __bit                   S50C1               __at(0x74E2);	// @ (0xE9C * 8 + 2)
#define                                 S50C1_bit           _BIT_ACCESS(LCDDATA14,2)
// LCDDATA22<S50C2>
extern volatile __bit                   S50C2               __at(0x7522);	// @ (0xEA4 * 8 + 2)
#define                                 S50C2_bit           _BIT_ACCESS(LCDDATA22,2)
// LCDDATA30<S50C3>
extern volatile __bit                   S50C3               __at(0x7562);	// @ (0xEAC * 8 + 2)
#define                                 S50C3_bit           _BIT_ACCESS(LCDDATA30,2)
// LCDDATA38<S50C4>
extern volatile __bit                   S50C4               __at(0x75A2);	// @ (0xEB4 * 8 + 2)
#define                                 S50C4_bit           _BIT_ACCESS(LCDDATA38,2)
// LCDDATA46<S50C5>
extern volatile __bit                   S50C5               __at(0x75E2);	// @ (0xEBC * 8 + 2)
#define                                 S50C5_bit           _BIT_ACCESS(LCDDATA46,2)
// LCDDATA54<S50C6>
extern volatile __bit                   S50C6               __at(0x7622);	// @ (0xEC4 * 8 + 2)
#define                                 S50C6_bit           _BIT_ACCESS(LCDDATA54,2)
// LCDDATA62<S50C7>
extern volatile __bit                   S50C7               __at(0x7662);	// @ (0xECC * 8 + 2)
#define                                 S50C7_bit           _BIT_ACCESS(LCDDATA62,2)
// LCDDATA6<S51C0>
extern volatile __bit                   S51C0               __at(0x74A3);	// @ (0xE94 * 8 + 3)
#define                                 S51C0_bit           _BIT_ACCESS(LCDDATA6,3)
// LCDDATA14<S51C1>
extern volatile __bit                   S51C1               __at(0x74E3);	// @ (0xE9C * 8 + 3)
#define                                 S51C1_bit           _BIT_ACCESS(LCDDATA14,3)
// LCDDATA22<S51C2>
extern volatile __bit                   S51C2               __at(0x7523);	// @ (0xEA4 * 8 + 3)
#define                                 S51C2_bit           _BIT_ACCESS(LCDDATA22,3)
// LCDDATA30<S51C3>
extern volatile __bit                   S51C3               __at(0x7563);	// @ (0xEAC * 8 + 3)
#define                                 S51C3_bit           _BIT_ACCESS(LCDDATA30,3)
// LCDDATA38<S51C4>
extern volatile __bit                   S51C4               __at(0x75A3);	// @ (0xEB4 * 8 + 3)
#define                                 S51C4_bit           _BIT_ACCESS(LCDDATA38,3)
// LCDDATA46<S51C5>
extern volatile __bit                   S51C5               __at(0x75E3);	// @ (0xEBC * 8 + 3)
#define                                 S51C5_bit           _BIT_ACCESS(LCDDATA46,3)
// LCDDATA54<S51C6>
extern volatile __bit                   S51C6               __at(0x7623);	// @ (0xEC4 * 8 + 3)
#define                                 S51C6_bit           _BIT_ACCESS(LCDDATA54,3)
// LCDDATA62<S51C7>
extern volatile __bit                   S51C7               __at(0x7663);	// @ (0xECC * 8 + 3)
#define                                 S51C7_bit           _BIT_ACCESS(LCDDATA62,3)
// LCDDATA6<S52C0>
extern volatile __bit                   S52C0               __at(0x74A4);	// @ (0xE94 * 8 + 4)
#define                                 S52C0_bit           _BIT_ACCESS(LCDDATA6,4)
// LCDDATA14<S52C1>
extern volatile __bit                   S52C1               __at(0x74E4);	// @ (0xE9C * 8 + 4)
#define                                 S52C1_bit           _BIT_ACCESS(LCDDATA14,4)
// LCDDATA22<S52C2>
extern volatile __bit                   S52C2               __at(0x7524);	// @ (0xEA4 * 8 + 4)
#define                                 S52C2_bit           _BIT_ACCESS(LCDDATA22,4)
// LCDDATA30<S52C3>
extern volatile __bit                   S52C3               __at(0x7564);	// @ (0xEAC * 8 + 4)
#define                                 S52C3_bit           _BIT_ACCESS(LCDDATA30,4)
// LCDDATA38<S52C4>
extern volatile __bit                   S52C4               __at(0x75A4);	// @ (0xEB4 * 8 + 4)
#define                                 S52C4_bit           _BIT_ACCESS(LCDDATA38,4)
// LCDDATA46<S52C5>
extern volatile __bit                   S52C5               __at(0x75E4);	// @ (0xEBC * 8 + 4)
#define                                 S52C5_bit           _BIT_ACCESS(LCDDATA46,4)
// LCDDATA54<S52C6>
extern volatile __bit                   S52C6               __at(0x7624);	// @ (0xEC4 * 8 + 4)
#define                                 S52C6_bit           _BIT_ACCESS(LCDDATA54,4)
// LCDDATA62<S52C7>
extern volatile __bit                   S52C7               __at(0x7664);	// @ (0xECC * 8 + 4)
#define                                 S52C7_bit           _BIT_ACCESS(LCDDATA62,4)
// LCDDATA6<S53C0>
extern volatile __bit                   S53C0               __at(0x74A5);	// @ (0xE94 * 8 + 5)
#define                                 S53C0_bit           _BIT_ACCESS(LCDDATA6,5)
// LCDDATA14<S53C1>
extern volatile __bit                   S53C1               __at(0x74E5);	// @ (0xE9C * 8 + 5)
#define                                 S53C1_bit           _BIT_ACCESS(LCDDATA14,5)
// LCDDATA22<S53C2>
extern volatile __bit                   S53C2               __at(0x7525);	// @ (0xEA4 * 8 + 5)
#define                                 S53C2_bit           _BIT_ACCESS(LCDDATA22,5)
// LCDDATA30<S53C3>
extern volatile __bit                   S53C3               __at(0x7565);	// @ (0xEAC * 8 + 5)
#define                                 S53C3_bit           _BIT_ACCESS(LCDDATA30,5)
// LCDDATA38<S53C4>
extern volatile __bit                   S53C4               __at(0x75A5);	// @ (0xEB4 * 8 + 5)
#define                                 S53C4_bit           _BIT_ACCESS(LCDDATA38,5)
// LCDDATA46<S53C5>
extern volatile __bit                   S53C5               __at(0x75E5);	// @ (0xEBC * 8 + 5)
#define                                 S53C5_bit           _BIT_ACCESS(LCDDATA46,5)
// LCDDATA54<S53C6>
extern volatile __bit                   S53C6               __at(0x7625);	// @ (0xEC4 * 8 + 5)
#define                                 S53C6_bit           _BIT_ACCESS(LCDDATA54,5)
// LCDDATA62<S53C7>
extern volatile __bit                   S53C7               __at(0x7665);	// @ (0xECC * 8 + 5)
#define                                 S53C7_bit           _BIT_ACCESS(LCDDATA62,5)
// LCDDATA6<S54C0>
extern volatile __bit                   S54C0               __at(0x74A6);	// @ (0xE94 * 8 + 6)
#define                                 S54C0_bit           _BIT_ACCESS(LCDDATA6,6)
// LCDDATA14<S54C1>
extern volatile __bit                   S54C1               __at(0x74E6);	// @ (0xE9C * 8 + 6)
#define                                 S54C1_bit           _BIT_ACCESS(LCDDATA14,6)
// LCDDATA22<S54C2>
extern volatile __bit                   S54C2               __at(0x7526);	// @ (0xEA4 * 8 + 6)
#define                                 S54C2_bit           _BIT_ACCESS(LCDDATA22,6)
// LCDDATA30<S54C3>
extern volatile __bit                   S54C3               __at(0x7566);	// @ (0xEAC * 8 + 6)
#define                                 S54C3_bit           _BIT_ACCESS(LCDDATA30,6)
// LCDDATA38<S54C4>
extern volatile __bit                   S54C4               __at(0x75A6);	// @ (0xEB4 * 8 + 6)
#define                                 S54C4_bit           _BIT_ACCESS(LCDDATA38,6)
// LCDDATA46<S54C5>
extern volatile __bit                   S54C5               __at(0x75E6);	// @ (0xEBC * 8 + 6)
#define                                 S54C5_bit           _BIT_ACCESS(LCDDATA46,6)
// LCDDATA54<S54C6>
extern volatile __bit                   S54C6               __at(0x7626);	// @ (0xEC4 * 8 + 6)
#define                                 S54C6_bit           _BIT_ACCESS(LCDDATA54,6)
// LCDDATA62<S54C7>
extern volatile __bit                   S54C7               __at(0x7666);	// @ (0xECC * 8 + 6)
#define                                 S54C7_bit           _BIT_ACCESS(LCDDATA62,6)
// LCDDATA6<S55C0>
extern volatile __bit                   S55C0               __at(0x74A7);	// @ (0xE94 * 8 + 7)
#define                                 S55C0_bit           _BIT_ACCESS(LCDDATA6,7)
// LCDDATA14<S55C1>
extern volatile __bit                   S55C1               __at(0x74E7);	// @ (0xE9C * 8 + 7)
#define                                 S55C1_bit           _BIT_ACCESS(LCDDATA14,7)
// LCDDATA22<S55C2>
extern volatile __bit                   S55C2               __at(0x7527);	// @ (0xEA4 * 8 + 7)
#define                                 S55C2_bit           _BIT_ACCESS(LCDDATA22,7)
// LCDDATA30<S55C3>
extern volatile __bit                   S55C3               __at(0x7567);	// @ (0xEAC * 8 + 7)
#define                                 S55C3_bit           _BIT_ACCESS(LCDDATA30,7)
// LCDDATA38<S55C4>
extern volatile __bit                   S55C4               __at(0x75A7);	// @ (0xEB4 * 8 + 7)
#define                                 S55C4_bit           _BIT_ACCESS(LCDDATA38,7)
// LCDDATA46<S55C5>
extern volatile __bit                   S55C5               __at(0x75E7);	// @ (0xEBC * 8 + 7)
#define                                 S55C5_bit           _BIT_ACCESS(LCDDATA46,7)
// LCDDATA54<S55C6>
extern volatile __bit                   S55C6               __at(0x7627);	// @ (0xEC4 * 8 + 7)
#define                                 S55C6_bit           _BIT_ACCESS(LCDDATA54,7)
// LCDDATA62<S55C7>
extern volatile __bit                   S55C7               __at(0x7667);	// @ (0xECC * 8 + 7)
#define                                 S55C7_bit           _BIT_ACCESS(LCDDATA62,7)
// LCDDATA7<S56C0>
extern volatile __bit                   S56C0               __at(0x74A8);	// @ (0xE95 * 8 + 0)
#define                                 S56C0_bit           _BIT_ACCESS(LCDDATA7,0)
// LCDDATA15<S56C1>
extern volatile __bit                   S56C1               __at(0x74E8);	// @ (0xE9D * 8 + 0)
#define                                 S56C1_bit           _BIT_ACCESS(LCDDATA15,0)
// LCDDATA23<S56C2>
extern volatile __bit                   S56C2               __at(0x7528);	// @ (0xEA5 * 8 + 0)
#define                                 S56C2_bit           _BIT_ACCESS(LCDDATA23,0)
// LCDDATA31<S56C3>
extern volatile __bit                   S56C3               __at(0x7568);	// @ (0xEAD * 8 + 0)
#define                                 S56C3_bit           _BIT_ACCESS(LCDDATA31,0)
// LCDDATA39<S56C4>
extern volatile __bit                   S56C4               __at(0x75A8);	// @ (0xEB5 * 8 + 0)
#define                                 S56C4_bit           _BIT_ACCESS(LCDDATA39,0)
// LCDDATA47<S56C5>
extern volatile __bit                   S56C5               __at(0x75E8);	// @ (0xEBD * 8 + 0)
#define                                 S56C5_bit           _BIT_ACCESS(LCDDATA47,0)
// LCDDATA55<S56C6>
extern volatile __bit                   S56C6               __at(0x7628);	// @ (0xEC5 * 8 + 0)
#define                                 S56C6_bit           _BIT_ACCESS(LCDDATA55,0)
// LCDDATA63<S56C7>
extern volatile __bit                   S56C7               __at(0x7668);	// @ (0xECD * 8 + 0)
#define                                 S56C7_bit           _BIT_ACCESS(LCDDATA63,0)
// LCDDATA7<S57C0>
extern volatile __bit                   S57C0               __at(0x74A9);	// @ (0xE95 * 8 + 1)
#define                                 S57C0_bit           _BIT_ACCESS(LCDDATA7,1)
// LCDDATA15<S57C1>
extern volatile __bit                   S57C1               __at(0x74E9);	// @ (0xE9D * 8 + 1)
#define                                 S57C1_bit           _BIT_ACCESS(LCDDATA15,1)
// LCDDATA23<S57C2>
extern volatile __bit                   S57C2               __at(0x7529);	// @ (0xEA5 * 8 + 1)
#define                                 S57C2_bit           _BIT_ACCESS(LCDDATA23,1)
// LCDDATA31<S57C3>
extern volatile __bit                   S57C3               __at(0x7569);	// @ (0xEAD * 8 + 1)
#define                                 S57C3_bit           _BIT_ACCESS(LCDDATA31,1)
// LCDDATA39<S57C4>
extern volatile __bit                   S57C4               __at(0x75A9);	// @ (0xEB5 * 8 + 1)
#define                                 S57C4_bit           _BIT_ACCESS(LCDDATA39,1)
// LCDDATA47<S57C5>
extern volatile __bit                   S57C5               __at(0x75E9);	// @ (0xEBD * 8 + 1)
#define                                 S57C5_bit           _BIT_ACCESS(LCDDATA47,1)
// LCDDATA55<S57C6>
extern volatile __bit                   S57C6               __at(0x7629);	// @ (0xEC5 * 8 + 1)
#define                                 S57C6_bit           _BIT_ACCESS(LCDDATA55,1)
// LCDDATA63<S57C7>
extern volatile __bit                   S57C7               __at(0x7669);	// @ (0xECD * 8 + 1)
#define                                 S57C7_bit           _BIT_ACCESS(LCDDATA63,1)
// LCDDATA7<S58C0>
extern volatile __bit                   S58C0               __at(0x74AA);	// @ (0xE95 * 8 + 2)
#define                                 S58C0_bit           _BIT_ACCESS(LCDDATA7,2)
// LCDDATA15<S58C1>
extern volatile __bit                   S58C1               __at(0x74EA);	// @ (0xE9D * 8 + 2)
#define                                 S58C1_bit           _BIT_ACCESS(LCDDATA15,2)
// LCDDATA23<S58C2>
extern volatile __bit                   S58C2               __at(0x752A);	// @ (0xEA5 * 8 + 2)
#define                                 S58C2_bit           _BIT_ACCESS(LCDDATA23,2)
// LCDDATA31<S58C3>
extern volatile __bit                   S58C3               __at(0x756A);	// @ (0xEAD * 8 + 2)
#define                                 S58C3_bit           _BIT_ACCESS(LCDDATA31,2)
// LCDDATA39<S58C4>
extern volatile __bit                   S58C4               __at(0x75AA);	// @ (0xEB5 * 8 + 2)
#define                                 S58C4_bit           _BIT_ACCESS(LCDDATA39,2)
// LCDDATA47<S58C5>
extern volatile __bit                   S58C5               __at(0x75EA);	// @ (0xEBD * 8 + 2)
#define                                 S58C5_bit           _BIT_ACCESS(LCDDATA47,2)
// LCDDATA55<S58C6>
extern volatile __bit                   S58C6               __at(0x762A);	// @ (0xEC5 * 8 + 2)
#define                                 S58C6_bit           _BIT_ACCESS(LCDDATA55,2)
// LCDDATA63<S58C7>
extern volatile __bit                   S58C7               __at(0x766A);	// @ (0xECD * 8 + 2)
#define                                 S58C7_bit           _BIT_ACCESS(LCDDATA63,2)
// LCDDATA7<S59C0>
extern volatile __bit                   S59C0               __at(0x74AB);	// @ (0xE95 * 8 + 3)
#define                                 S59C0_bit           _BIT_ACCESS(LCDDATA7,3)
// LCDDATA15<S59C1>
extern volatile __bit                   S59C1               __at(0x74EB);	// @ (0xE9D * 8 + 3)
#define                                 S59C1_bit           _BIT_ACCESS(LCDDATA15,3)
// LCDDATA23<S59C2>
extern volatile __bit                   S59C2               __at(0x752B);	// @ (0xEA5 * 8 + 3)
#define                                 S59C2_bit           _BIT_ACCESS(LCDDATA23,3)
// LCDDATA31<S59C3>
extern volatile __bit                   S59C3               __at(0x756B);	// @ (0xEAD * 8 + 3)
#define                                 S59C3_bit           _BIT_ACCESS(LCDDATA31,3)
// LCDDATA39<S59C4>
extern volatile __bit                   S59C4               __at(0x75AB);	// @ (0xEB5 * 8 + 3)
#define                                 S59C4_bit           _BIT_ACCESS(LCDDATA39,3)
// LCDDATA47<S59C5>
extern volatile __bit                   S59C5               __at(0x75EB);	// @ (0xEBD * 8 + 3)
#define                                 S59C5_bit           _BIT_ACCESS(LCDDATA47,3)
// LCDDATA55<S59C6>
extern volatile __bit                   S59C6               __at(0x762B);	// @ (0xEC5 * 8 + 3)
#define                                 S59C6_bit           _BIT_ACCESS(LCDDATA55,3)
// LCDDATA63<S59C7>
extern volatile __bit                   S59C7               __at(0x766B);	// @ (0xECD * 8 + 3)
#define                                 S59C7_bit           _BIT_ACCESS(LCDDATA63,3)
// LCDDATA7<S60C0>
extern volatile __bit                   S60C0               __at(0x74AC);	// @ (0xE95 * 8 + 4)
#define                                 S60C0_bit           _BIT_ACCESS(LCDDATA7,4)
// LCDDATA15<S60C1>
extern volatile __bit                   S60C1               __at(0x74EC);	// @ (0xE9D * 8 + 4)
#define                                 S60C1_bit           _BIT_ACCESS(LCDDATA15,4)
// LCDDATA23<S60C2>
extern volatile __bit                   S60C2               __at(0x752C);	// @ (0xEA5 * 8 + 4)
#define                                 S60C2_bit           _BIT_ACCESS(LCDDATA23,4)
// LCDDATA31<S60C3>
extern volatile __bit                   S60C3               __at(0x756C);	// @ (0xEAD * 8 + 4)
#define                                 S60C3_bit           _BIT_ACCESS(LCDDATA31,4)
// LCDDATA39<S60C4>
extern volatile __bit                   S60C4               __at(0x75AC);	// @ (0xEB5 * 8 + 4)
#define                                 S60C4_bit           _BIT_ACCESS(LCDDATA39,4)
// LCDDATA47<S60C5>
extern volatile __bit                   S60C5               __at(0x75EC);	// @ (0xEBD * 8 + 4)
#define                                 S60C5_bit           _BIT_ACCESS(LCDDATA47,4)
// LCDDATA55<S60C6>
extern volatile __bit                   S60C6               __at(0x762C);	// @ (0xEC5 * 8 + 4)
#define                                 S60C6_bit           _BIT_ACCESS(LCDDATA55,4)
// LCDDATA63<S60C7>
extern volatile __bit                   S60C7               __at(0x766C);	// @ (0xECD * 8 + 4)
#define                                 S60C7_bit           _BIT_ACCESS(LCDDATA63,4)
// LCDDATA7<S61C0>
extern volatile __bit                   S61C0               __at(0x74AD);	// @ (0xE95 * 8 + 5)
#define                                 S61C0_bit           _BIT_ACCESS(LCDDATA7,5)
// LCDDATA15<S61C1>
extern volatile __bit                   S61C1               __at(0x74ED);	// @ (0xE9D * 8 + 5)
#define                                 S61C1_bit           _BIT_ACCESS(LCDDATA15,5)
// LCDDATA23<S61C2>
extern volatile __bit                   S61C2               __at(0x752D);	// @ (0xEA5 * 8 + 5)
#define                                 S61C2_bit           _BIT_ACCESS(LCDDATA23,5)
// LCDDATA31<S61C3>
extern volatile __bit                   S61C3               __at(0x756D);	// @ (0xEAD * 8 + 5)
#define                                 S61C3_bit           _BIT_ACCESS(LCDDATA31,5)
// LCDDATA39<S61C4>
extern volatile __bit                   S61C4               __at(0x75AD);	// @ (0xEB5 * 8 + 5)
#define                                 S61C4_bit           _BIT_ACCESS(LCDDATA39,5)
// LCDDATA47<S61C5>
extern volatile __bit                   S61C5               __at(0x75ED);	// @ (0xEBD * 8 + 5)
#define                                 S61C5_bit           _BIT_ACCESS(LCDDATA47,5)
// LCDDATA55<S61C6>
extern volatile __bit                   S61C6               __at(0x762D);	// @ (0xEC5 * 8 + 5)
#define                                 S61C6_bit           _BIT_ACCESS(LCDDATA55,5)
// LCDDATA63<S61C7>
extern volatile __bit                   S61C7               __at(0x766D);	// @ (0xECD * 8 + 5)
#define                                 S61C7_bit           _BIT_ACCESS(LCDDATA63,5)
// LCDDATA7<S62C0>
extern volatile __bit                   S62C0               __at(0x74AE);	// @ (0xE95 * 8 + 6)
#define                                 S62C0_bit           _BIT_ACCESS(LCDDATA7,6)
// LCDDATA15<S62C1>
extern volatile __bit                   S62C1               __at(0x74EE);	// @ (0xE9D * 8 + 6)
#define                                 S62C1_bit           _BIT_ACCESS(LCDDATA15,6)
// LCDDATA23<S62C2>
extern volatile __bit                   S62C2               __at(0x752E);	// @ (0xEA5 * 8 + 6)
#define                                 S62C2_bit           _BIT_ACCESS(LCDDATA23,6)
// LCDDATA31<S62C3>
extern volatile __bit                   S62C3               __at(0x756E);	// @ (0xEAD * 8 + 6)
#define                                 S62C3_bit           _BIT_ACCESS(LCDDATA31,6)
// LCDDATA39<S62C4>
extern volatile __bit                   S62C4               __at(0x75AE);	// @ (0xEB5 * 8 + 6)
#define                                 S62C4_bit           _BIT_ACCESS(LCDDATA39,6)
// LCDDATA47<S62C5>
extern volatile __bit                   S62C5               __at(0x75EE);	// @ (0xEBD * 8 + 6)
#define                                 S62C5_bit           _BIT_ACCESS(LCDDATA47,6)
// LCDDATA55<S62C6>
extern volatile __bit                   S62C6               __at(0x762E);	// @ (0xEC5 * 8 + 6)
#define                                 S62C6_bit           _BIT_ACCESS(LCDDATA55,6)
// LCDDATA63<S62C7>
extern volatile __bit                   S62C7               __at(0x766E);	// @ (0xECD * 8 + 6)
#define                                 S62C7_bit           _BIT_ACCESS(LCDDATA63,6)
// LCDDATA7<S63C0>
extern volatile __bit                   S63C0               __at(0x74AF);	// @ (0xE95 * 8 + 7)
#define                                 S63C0_bit           _BIT_ACCESS(LCDDATA7,7)
// LCDDATA15<S63C1>
extern volatile __bit                   S63C1               __at(0x74EF);	// @ (0xE9D * 8 + 7)
#define                                 S63C1_bit           _BIT_ACCESS(LCDDATA15,7)
// LCDDATA23<S63C2>
extern volatile __bit                   S63C2               __at(0x752F);	// @ (0xEA5 * 8 + 7)
#define                                 S63C2_bit           _BIT_ACCESS(LCDDATA23,7)
// LCDDATA31<S63C3>
extern volatile __bit                   S63C3               __at(0x756F);	// @ (0xEAD * 8 + 7)
#define                                 S63C3_bit           _BIT_ACCESS(LCDDATA31,7)
// LCDDATA39<S63C4>
extern volatile __bit                   S63C4               __at(0x75AF);	// @ (0xEB5 * 8 + 7)
#define                                 S63C4_bit           _BIT_ACCESS(LCDDATA39,7)
// LCDDATA47<S63C5>
extern volatile __bit                   S63C5               __at(0x75EF);	// @ (0xEBD * 8 + 7)
#define                                 S63C5_bit           _BIT_ACCESS(LCDDATA47,7)
// LCDDATA55<S63C6>
extern volatile __bit                   S63C6               __at(0x762F);	// @ (0xEC5 * 8 + 7)
#define                                 S63C6_bit           _BIT_ACCESS(LCDDATA55,7)
// LCDDATA63<S63C7>
extern volatile __bit                   S63C7               __at(0x766F);	// @ (0xECD * 8 + 7)
#define                                 S63C7_bit           _BIT_ACCESS(LCDDATA63,7)
// ADCON3H<SAMC0>
extern volatile __bit                   SAMC0               __at(0x7458);	// @ (0xE8B * 8 + 0)
#define                                 SAMC0_bit           _BIT_ACCESS(ADCON3H,0)
// ADCON3H<SAMC1>
extern volatile __bit                   SAMC1               __at(0x7459);	// @ (0xE8B * 8 + 1)
#define                                 SAMC1_bit           _BIT_ACCESS(ADCON3H,1)
// ADCON3H<SAMC2>
extern volatile __bit                   SAMC2               __at(0x745A);	// @ (0xE8B * 8 + 2)
#define                                 SAMC2_bit           _BIT_ACCESS(ADCON3H,2)
// ADCON3H<SAMC3>
extern volatile __bit                   SAMC3               __at(0x745B);	// @ (0xE8B * 8 + 3)
#define                                 SAMC3_bit           _BIT_ACCESS(ADCON3H,3)
// ADCON3H<SAMC4>
extern volatile __bit                   SAMC4               __at(0x745C);	// @ (0xE8B * 8 + 4)
#define                                 SAMC4_bit           _BIT_ACCESS(ADCON3H,4)
// ADCON1L<SAMP>
extern volatile __bit                   SAMP                __at(0x7E01);	// @ (0xFC0 * 8 + 1)
#define                                 SAMP_bit            _BIT_ACCESS(ADCON1L,1)
// RPINR8_9<SCK1R0>
extern volatile __bit                   SCK1R0              __at(0x7170);	// @ (0xE2E * 8 + 0)
#define                                 SCK1R0_bit          _BIT_ACCESS(RPINR8_9,0)
// RPINR8_9<SCK1R1>
extern volatile __bit                   SCK1R1              __at(0x7171);	// @ (0xE2E * 8 + 1)
#define                                 SCK1R1_bit          _BIT_ACCESS(RPINR8_9,1)
// RPINR8_9<SCK1R2>
extern volatile __bit                   SCK1R2              __at(0x7172);	// @ (0xE2E * 8 + 2)
#define                                 SCK1R2_bit          _BIT_ACCESS(RPINR8_9,2)
// RPINR8_9<SCK1R3>
extern volatile __bit                   SCK1R3              __at(0x7173);	// @ (0xE2E * 8 + 3)
#define                                 SCK1R3_bit          _BIT_ACCESS(RPINR8_9,3)
// RPINR10_11<SCK2R0>
extern volatile __bit                   SCK2R0              __at(0x717C);	// @ (0xE2F * 8 + 4)
#define                                 SCK2R0_bit          _BIT_ACCESS(RPINR10_11,4)
// RPINR10_11<SCK2R1>
extern volatile __bit                   SCK2R1              __at(0x717D);	// @ (0xE2F * 8 + 5)
#define                                 SCK2R1_bit          _BIT_ACCESS(RPINR10_11,5)
// RPINR10_11<SCK2R2>
extern volatile __bit                   SCK2R2              __at(0x717E);	// @ (0xE2F * 8 + 6)
#define                                 SCK2R2_bit          _BIT_ACCESS(RPINR10_11,6)
// RPINR10_11<SCK2R3>
extern volatile __bit                   SCK2R3              __at(0x717F);	// @ (0xE2F * 8 + 7)
#define                                 SCK2R3_bit          _BIT_ACCESS(RPINR10_11,7)
// BAUDCON1<SCKP>
extern volatile __bit                   SCKP                __at(0x7B3C);	// @ (0xF67 * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUDCON1,4)
// BAUDCON1<SCKP1>
extern volatile __bit                   SCKP1               __at(0x7B3C);	// @ (0xF67 * 8 + 4)
#define                                 SCKP1_bit           _BIT_ACCESS(BAUDCON1,4)
// BAUDCON2<SCKP2>
extern volatile __bit                   SCKP2               __at(0x798C);	// @ (0xF31 * 8 + 4)
#define                                 SCKP2_bit           _BIT_ACCESS(BAUDCON2,4)
// BAUDCON3<SCKP3>
extern volatile __bit                   SCKP3               __at(0x796C);	// @ (0xF2D * 8 + 4)
#define                                 SCKP3_bit           _BIT_ACCESS(BAUDCON3,4)
// BAUDCON4<SCKP4>
extern volatile __bit                   SCKP4               __at(0x77EC);	// @ (0xEFD * 8 + 4)
#define                                 SCKP4_bit           _BIT_ACCESS(BAUDCON4,4)
// OSCCON<SCS>
extern volatile __bit                   SCS                 __at(0x7E98);	// @ (0xFD3 * 8 + 0)
#define                                 SCS_bit             _BIT_ACCESS(OSCCON,0)
// RPINR8_9<SDI1R0>
extern volatile __bit                   SDI1R0              __at(0x7174);	// @ (0xE2E * 8 + 4)
#define                                 SDI1R0_bit          _BIT_ACCESS(RPINR8_9,4)
// RPINR8_9<SDI1R1>
extern volatile __bit                   SDI1R1              __at(0x7175);	// @ (0xE2E * 8 + 5)
#define                                 SDI1R1_bit          _BIT_ACCESS(RPINR8_9,5)
// RPINR8_9<SDI1R2>
extern volatile __bit                   SDI1R2              __at(0x7176);	// @ (0xE2E * 8 + 6)
#define                                 SDI1R2_bit          _BIT_ACCESS(RPINR8_9,6)
// RPINR8_9<SDI1R3>
extern volatile __bit                   SDI1R3              __at(0x7177);	// @ (0xE2E * 8 + 7)
#define                                 SDI1R3_bit          _BIT_ACCESS(RPINR8_9,7)
// RPINR12_13<SDI2R0>
extern volatile __bit                   SDI2R0              __at(0x7180);	// @ (0xE30 * 8 + 0)
#define                                 SDI2R0_bit          _BIT_ACCESS(RPINR12_13,0)
// RPINR12_13<SDI2R1>
extern volatile __bit                   SDI2R1              __at(0x7181);	// @ (0xE30 * 8 + 1)
#define                                 SDI2R1_bit          _BIT_ACCESS(RPINR12_13,1)
// RPINR12_13<SDI2R2>
extern volatile __bit                   SDI2R2              __at(0x7182);	// @ (0xE30 * 8 + 2)
#define                                 SDI2R2_bit          _BIT_ACCESS(RPINR12_13,2)
// RPINR12_13<SDI2R3>
extern volatile __bit                   SDI2R3              __at(0x7183);	// @ (0xE30 * 8 + 3)
#define                                 SDI2R3_bit          _BIT_ACCESS(RPINR12_13,3)
// UCON<SE0>
extern volatile __bit                   SE0                 __at(0x7BAD);	// @ (0xF75 * 8 + 5)
#define                                 SE0_bit             _BIT_ACCESS(UCON,5)
// LCDSE0<SE00>
extern volatile __bit                   SE00                __at(0x7670);	// @ (0xECE * 8 + 0)
#define                                 SE00_bit            _BIT_ACCESS(LCDSE0,0)
// LCDSE0<SE01>
extern volatile __bit                   SE01                __at(0x7671);	// @ (0xECE * 8 + 1)
#define                                 SE01_bit            _BIT_ACCESS(LCDSE0,1)
// LCDSE0<SE02>
extern volatile __bit                   SE02                __at(0x7672);	// @ (0xECE * 8 + 2)
#define                                 SE02_bit            _BIT_ACCESS(LCDSE0,2)
// LCDSE0<SE03>
extern volatile __bit                   SE03                __at(0x7673);	// @ (0xECE * 8 + 3)
#define                                 SE03_bit            _BIT_ACCESS(LCDSE0,3)
// LCDSE0<SE04>
extern volatile __bit                   SE04                __at(0x7674);	// @ (0xECE * 8 + 4)
#define                                 SE04_bit            _BIT_ACCESS(LCDSE0,4)
// LCDSE0<SE05>
extern volatile __bit                   SE05                __at(0x7675);	// @ (0xECE * 8 + 5)
#define                                 SE05_bit            _BIT_ACCESS(LCDSE0,5)
// LCDSE0<SE06>
extern volatile __bit                   SE06                __at(0x7676);	// @ (0xECE * 8 + 6)
#define                                 SE06_bit            _BIT_ACCESS(LCDSE0,6)
// LCDSE0<SE07>
extern volatile __bit                   SE07                __at(0x7677);	// @ (0xECE * 8 + 7)
#define                                 SE07_bit            _BIT_ACCESS(LCDSE0,7)
// LCDSE1<SE08>
extern volatile __bit                   SE08                __at(0x7678);	// @ (0xECF * 8 + 0)
#define                                 SE08_bit            _BIT_ACCESS(LCDSE1,0)
// LCDSE1<SE09>
extern volatile __bit                   SE09                __at(0x7679);	// @ (0xECF * 8 + 1)
#define                                 SE09_bit            _BIT_ACCESS(LCDSE1,1)
// LCDSE1<SE10>
extern volatile __bit                   SE10                __at(0x767A);	// @ (0xECF * 8 + 2)
#define                                 SE10_bit            _BIT_ACCESS(LCDSE1,2)
// LCDSE1<SE11>
extern volatile __bit                   SE11                __at(0x767B);	// @ (0xECF * 8 + 3)
#define                                 SE11_bit            _BIT_ACCESS(LCDSE1,3)
// LCDSE1<SE12>
extern volatile __bit                   SE12                __at(0x767C);	// @ (0xECF * 8 + 4)
#define                                 SE12_bit            _BIT_ACCESS(LCDSE1,4)
// LCDSE1<SE13>
extern volatile __bit                   SE13                __at(0x767D);	// @ (0xECF * 8 + 5)
#define                                 SE13_bit            _BIT_ACCESS(LCDSE1,5)
// LCDSE1<SE14>
extern volatile __bit                   SE14                __at(0x767E);	// @ (0xECF * 8 + 6)
#define                                 SE14_bit            _BIT_ACCESS(LCDSE1,6)
// LCDSE1<SE15>
extern volatile __bit                   SE15                __at(0x767F);	// @ (0xECF * 8 + 7)
#define                                 SE15_bit            _BIT_ACCESS(LCDSE1,7)
// LCDSE2<SE16>
extern volatile __bit                   SE16                __at(0x7680);	// @ (0xED0 * 8 + 0)
#define                                 SE16_bit            _BIT_ACCESS(LCDSE2,0)
// LCDSE2<SE17>
extern volatile __bit                   SE17                __at(0x7681);	// @ (0xED0 * 8 + 1)
#define                                 SE17_bit            _BIT_ACCESS(LCDSE2,1)
// LCDSE2<SE18>
extern volatile __bit                   SE18                __at(0x7682);	// @ (0xED0 * 8 + 2)
#define                                 SE18_bit            _BIT_ACCESS(LCDSE2,2)
// LCDSE2<SE19>
extern volatile __bit                   SE19                __at(0x7683);	// @ (0xED0 * 8 + 3)
#define                                 SE19_bit            _BIT_ACCESS(LCDSE2,3)
// LCDSE2<SE20>
extern volatile __bit                   SE20                __at(0x7684);	// @ (0xED0 * 8 + 4)
#define                                 SE20_bit            _BIT_ACCESS(LCDSE2,4)
// LCDSE2<SE21>
extern volatile __bit                   SE21                __at(0x7685);	// @ (0xED0 * 8 + 5)
#define                                 SE21_bit            _BIT_ACCESS(LCDSE2,5)
// LCDSE2<SE22>
extern volatile __bit                   SE22                __at(0x7686);	// @ (0xED0 * 8 + 6)
#define                                 SE22_bit            _BIT_ACCESS(LCDSE2,6)
// LCDSE2<SE23>
extern volatile __bit                   SE23                __at(0x7687);	// @ (0xED0 * 8 + 7)
#define                                 SE23_bit            _BIT_ACCESS(LCDSE2,7)
// LCDSE3<SE24>
extern volatile __bit                   SE24                __at(0x7688);	// @ (0xED1 * 8 + 0)
#define                                 SE24_bit            _BIT_ACCESS(LCDSE3,0)
// LCDSE3<SE25>
extern volatile __bit                   SE25                __at(0x7689);	// @ (0xED1 * 8 + 1)
#define                                 SE25_bit            _BIT_ACCESS(LCDSE3,1)
// LCDSE3<SE26>
extern volatile __bit                   SE26                __at(0x768A);	// @ (0xED1 * 8 + 2)
#define                                 SE26_bit            _BIT_ACCESS(LCDSE3,2)
// LCDSE3<SE27>
extern volatile __bit                   SE27                __at(0x768B);	// @ (0xED1 * 8 + 3)
#define                                 SE27_bit            _BIT_ACCESS(LCDSE3,3)
// LCDSE3<SE28>
extern volatile __bit                   SE28                __at(0x768C);	// @ (0xED1 * 8 + 4)
#define                                 SE28_bit            _BIT_ACCESS(LCDSE3,4)
// LCDSE3<SE29>
extern volatile __bit                   SE29                __at(0x768D);	// @ (0xED1 * 8 + 5)
#define                                 SE29_bit            _BIT_ACCESS(LCDSE3,5)
// LCDSE3<SE30>
extern volatile __bit                   SE30                __at(0x768E);	// @ (0xED1 * 8 + 6)
#define                                 SE30_bit            _BIT_ACCESS(LCDSE3,6)
// LCDSE3<SE31>
extern volatile __bit                   SE31                __at(0x768F);	// @ (0xED1 * 8 + 7)
#define                                 SE31_bit            _BIT_ACCESS(LCDSE3,7)
// LCDSE4<SE32>
extern volatile __bit                   SE32                __at(0x7690);	// @ (0xED2 * 8 + 0)
#define                                 SE32_bit            _BIT_ACCESS(LCDSE4,0)
// LCDSE4<SE33>
extern volatile __bit                   SE33                __at(0x7691);	// @ (0xED2 * 8 + 1)
#define                                 SE33_bit            _BIT_ACCESS(LCDSE4,1)
// LCDSE4<SE34>
extern volatile __bit                   SE34                __at(0x7692);	// @ (0xED2 * 8 + 2)
#define                                 SE34_bit            _BIT_ACCESS(LCDSE4,2)
// LCDSE4<SE35>
extern volatile __bit                   SE35                __at(0x7693);	// @ (0xED2 * 8 + 3)
#define                                 SE35_bit            _BIT_ACCESS(LCDSE4,3)
// LCDSE4<SE36>
extern volatile __bit                   SE36                __at(0x7694);	// @ (0xED2 * 8 + 4)
#define                                 SE36_bit            _BIT_ACCESS(LCDSE4,4)
// LCDSE4<SE37>
extern volatile __bit                   SE37                __at(0x7695);	// @ (0xED2 * 8 + 5)
#define                                 SE37_bit            _BIT_ACCESS(LCDSE4,5)
// LCDSE4<SE38>
extern volatile __bit                   SE38                __at(0x7696);	// @ (0xED2 * 8 + 6)
#define                                 SE38_bit            _BIT_ACCESS(LCDSE4,6)
// LCDSE4<SE39>
extern volatile __bit                   SE39                __at(0x7697);	// @ (0xED2 * 8 + 7)
#define                                 SE39_bit            _BIT_ACCESS(LCDSE4,7)
// LCDSE5<SE40>
extern volatile __bit                   SE40                __at(0x7698);	// @ (0xED3 * 8 + 0)
#define                                 SE40_bit            _BIT_ACCESS(LCDSE5,0)
// LCDSE5<SE41>
extern volatile __bit                   SE41                __at(0x7699);	// @ (0xED3 * 8 + 1)
#define                                 SE41_bit            _BIT_ACCESS(LCDSE5,1)
// LCDSE5<SE42>
extern volatile __bit                   SE42                __at(0x769A);	// @ (0xED3 * 8 + 2)
#define                                 SE42_bit            _BIT_ACCESS(LCDSE5,2)
// LCDSE5<SE43>
extern volatile __bit                   SE43                __at(0x769B);	// @ (0xED3 * 8 + 3)
#define                                 SE43_bit            _BIT_ACCESS(LCDSE5,3)
// LCDSE5<SE44>
extern volatile __bit                   SE44                __at(0x769C);	// @ (0xED3 * 8 + 4)
#define                                 SE44_bit            _BIT_ACCESS(LCDSE5,4)
// LCDSE5<SE45>
extern volatile __bit                   SE45                __at(0x769D);	// @ (0xED3 * 8 + 5)
#define                                 SE45_bit            _BIT_ACCESS(LCDSE5,5)
// LCDSE5<SE46>
extern volatile __bit                   SE46                __at(0x769E);	// @ (0xED3 * 8 + 6)
#define                                 SE46_bit            _BIT_ACCESS(LCDSE5,6)
// LCDSE5<SE47>
extern volatile __bit                   SE47                __at(0x769F);	// @ (0xED3 * 8 + 7)
#define                                 SE47_bit            _BIT_ACCESS(LCDSE5,7)
// LCDSE6<SE48>
extern volatile __bit                   SE48                __at(0x76A0);	// @ (0xED4 * 8 + 0)
#define                                 SE48_bit            _BIT_ACCESS(LCDSE6,0)
// LCDSE6<SE49>
extern volatile __bit                   SE49                __at(0x76A1);	// @ (0xED4 * 8 + 1)
#define                                 SE49_bit            _BIT_ACCESS(LCDSE6,1)
// LCDSE6<SE50>
extern volatile __bit                   SE50                __at(0x76A2);	// @ (0xED4 * 8 + 2)
#define                                 SE50_bit            _BIT_ACCESS(LCDSE6,2)
// LCDSE6<SE51>
extern volatile __bit                   SE51                __at(0x76A3);	// @ (0xED4 * 8 + 3)
#define                                 SE51_bit            _BIT_ACCESS(LCDSE6,3)
// LCDSE6<SE52>
extern volatile __bit                   SE52                __at(0x76A4);	// @ (0xED4 * 8 + 4)
#define                                 SE52_bit            _BIT_ACCESS(LCDSE6,4)
// LCDSE6<SE53>
extern volatile __bit                   SE53                __at(0x76A5);	// @ (0xED4 * 8 + 5)
#define                                 SE53_bit            _BIT_ACCESS(LCDSE6,5)
// LCDSE6<SE54>
extern volatile __bit                   SE54                __at(0x76A6);	// @ (0xED4 * 8 + 6)
#define                                 SE54_bit            _BIT_ACCESS(LCDSE6,6)
// LCDSE6<SE55>
extern volatile __bit                   SE55                __at(0x76A7);	// @ (0xED4 * 8 + 7)
#define                                 SE55_bit            _BIT_ACCESS(LCDSE6,7)
// LCDSE7<SE56>
extern volatile __bit                   SE56                __at(0x76A8);	// @ (0xED5 * 8 + 0)
#define                                 SE56_bit            _BIT_ACCESS(LCDSE7,0)
// LCDSE7<SE57>
extern volatile __bit                   SE57                __at(0x76A9);	// @ (0xED5 * 8 + 1)
#define                                 SE57_bit            _BIT_ACCESS(LCDSE7,1)
// LCDSE7<SE58>
extern volatile __bit                   SE58                __at(0x76AA);	// @ (0xED5 * 8 + 2)
#define                                 SE58_bit            _BIT_ACCESS(LCDSE7,2)
// LCDSE7<SE59>
extern volatile __bit                   SE59                __at(0x76AB);	// @ (0xED5 * 8 + 3)
#define                                 SE59_bit            _BIT_ACCESS(LCDSE7,3)
// LCDSE7<SE60>
extern volatile __bit                   SE60                __at(0x76AC);	// @ (0xED5 * 8 + 4)
#define                                 SE60_bit            _BIT_ACCESS(LCDSE7,4)
// LCDSE7<SE61>
extern volatile __bit                   SE61                __at(0x76AD);	// @ (0xED5 * 8 + 5)
#define                                 SE61_bit            _BIT_ACCESS(LCDSE7,5)
// LCDSE7<SE62>
extern volatile __bit                   SE62                __at(0x76AE);	// @ (0xED5 * 8 + 6)
#define                                 SE62_bit            _BIT_ACCESS(LCDSE7,6)
// LCDSE7<SE63>
extern volatile __bit                   SE63                __at(0x76AF);	// @ (0xED5 * 8 + 7)
#define                                 SE63_bit            _BIT_ACCESS(LCDSE7,7)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0x7E28);	// @ (0xFC5 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// SSP2CON2<SEN2>
extern volatile __bit                   SEN2                __at(0x78C0);	// @ (0xF18 * 8 + 0)
#define                                 SEN2_bit            _BIT_ACCESS(SSP2CON2,0)
// TXSTA1<SENDB1>
extern volatile __bit                   SENDB1              __at(0x7D63);	// @ (0xFAC * 8 + 3)
#define                                 SENDB1_bit          _BIT_ACCESS(TXSTA1,3)
// LCDCON<SLPEN>
extern volatile __bit                   SLPEN               __at(0x76CE);	// @ (0xED9 * 8 + 6)
#define                                 SLPEN_bit           _BIT_ACCESS(LCDCON,6)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0x7E3F);	// @ (0xFC7 * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// SSP2STAT<SMP2>
extern volatile __bit                   SMP2                __at(0x78D7);	// @ (0xF1A * 8 + 7)
#define                                 SMP2_bit            _BIT_ACCESS(SSP2STAT,7)
// ADCON2L<SMPI0>
extern volatile __bit                   SMPI0               __at(0x7462);	// @ (0xE8C * 8 + 2)
#define                                 SMPI0_bit           _BIT_ACCESS(ADCON2L,2)
// ADCON2L<SMPI1>
extern volatile __bit                   SMPI1               __at(0x7463);	// @ (0xE8C * 8 + 3)
#define                                 SMPI1_bit           _BIT_ACCESS(ADCON2L,3)
// ADCON2L<SMPI2>
extern volatile __bit                   SMPI2               __at(0x7464);	// @ (0xE8C * 8 + 4)
#define                                 SMPI2_bit           _BIT_ACCESS(ADCON2L,4)
// ADCON2L<SMPI3>
extern volatile __bit                   SMPI3               __at(0x7465);	// @ (0xE8C * 8 + 5)
#define                                 SMPI3_bit           _BIT_ACCESS(ADCON2L,5)
// ADCON2L<SMPI4>
extern volatile __bit                   SMPI4               __at(0x7466);	// @ (0xE8C * 8 + 6)
#define                                 SMPI4_bit           _BIT_ACCESS(ADCON2L,6)
// UIE<SOFIE>
extern volatile __bit                   SOFIE               __at(0x7086);	// @ (0xE10 * 8 + 6)
#define                                 SOFIE_bit           _BIT_ACCESS(UIE,6)
// UIR<SOFIF>
extern volatile __bit                   SOFIF               __at(0x7BC6);	// @ (0xF78 * 8 + 6)
#define                                 SOFIF_bit           _BIT_ACCESS(UIR,6)
// T1CON<SOSCEN1>
extern volatile __bit                   SOSCEN1             __at(0x7E6B);	// @ (0xFCD * 8 + 3)
#define                                 SOSCEN1_bit         _BIT_ACCESS(T1CON,3)
// T3CON<SOSCEN3>
extern volatile __bit                   SOSCEN3             __at(0x7D8B);	// @ (0xFB1 * 8 + 3)
#define                                 SOSCEN3_bit         _BIT_ACCESS(T3CON,3)
// T5CON<SOSCEN5>
extern volatile __bit                   SOSCEN5             __at(0x78A3);	// @ (0xF14 * 8 + 3)
#define                                 SOSCEN5_bit         _BIT_ACCESS(T5CON,3)
// OSCCON2<SOSCGO>
extern volatile __bit                   SOSCGO              __at(0x7B31);	// @ (0xF66 * 8 + 1)
#define                                 SOSCGO_bit          _BIT_ACCESS(OSCCON2,1)
// STKPTR<SP0>
extern volatile __bit                   SP0                 __at(0x7FE0);	// @ (0xFFC * 8 + 0)
#define                                 SP0_bit             _BIT_ACCESS(STKPTR,0)
// STKPTR<SP1>
extern volatile __bit                   SP1                 __at(0x7FE1);	// @ (0xFFC * 8 + 1)
#define                                 SP1_bit             _BIT_ACCESS(STKPTR,1)
// STKPTR<SP2>
extern volatile __bit                   SP2                 __at(0x7FE2);	// @ (0xFFC * 8 + 2)
#define                                 SP2_bit             _BIT_ACCESS(STKPTR,2)
// STKPTR<SP3>
extern volatile __bit                   SP3                 __at(0x7FE3);	// @ (0xFFC * 8 + 3)
#define                                 SP3_bit             _BIT_ACCESS(STKPTR,3)
// STKPTR<SP4>
extern volatile __bit                   SP4                 __at(0x7FE4);	// @ (0xFFC * 8 + 4)
#define                                 SP4_bit             _BIT_ACCESS(STKPTR,4)
// PMD0<SPI1MD>
extern volatile __bit                   SPI1MD              __at(0x77A1);	// @ (0xEF4 * 8 + 1)
#define                                 SPI1MD_bit          _BIT_ACCESS(PMD0,1)
// PMD0<SPI2MD>
extern volatile __bit                   SPI2MD              __at(0x77A2);	// @ (0xEF4 * 8 + 2)
#define                                 SPI2MD_bit          _BIT_ACCESS(PMD0,2)
// RCSTA1<SRENA>
extern volatile __bit                   SRENA               __at(0x7D5D);	// @ (0xFAB * 8 + 5)
#define                                 SRENA_bit           _BIT_ACCESS(RCSTA1,5)
// RCON4<SRETEN>
extern volatile __bit                   SRETEN              __at(0x7BDC);	// @ (0xF7B * 8 + 4)
#define                                 SRETEN_bit          _BIT_ACCESS(RCON4,4)
// RPINR10_11<SS1R0>
extern volatile __bit                   SS1R0               __at(0x7178);	// @ (0xE2F * 8 + 0)
#define                                 SS1R0_bit           _BIT_ACCESS(RPINR10_11,0)
// RPINR10_11<SS1R1>
extern volatile __bit                   SS1R1               __at(0x7179);	// @ (0xE2F * 8 + 1)
#define                                 SS1R1_bit           _BIT_ACCESS(RPINR10_11,1)
// RPINR10_11<SS1R2>
extern volatile __bit                   SS1R2               __at(0x717A);	// @ (0xE2F * 8 + 2)
#define                                 SS1R2_bit           _BIT_ACCESS(RPINR10_11,2)
// RPINR10_11<SS1R3>
extern volatile __bit                   SS1R3               __at(0x717B);	// @ (0xE2F * 8 + 3)
#define                                 SS1R3_bit           _BIT_ACCESS(RPINR10_11,3)
// PORTD<SS2>
extern volatile __bit                   SS2                 __at(0x7C1F);	// @ (0xF83 * 8 + 7)
#define                                 SS2_bit             _BIT_ACCESS(PORTD,7)
// RPINR12_13<SS2R0>
extern volatile __bit                   SS2R0               __at(0x7184);	// @ (0xE30 * 8 + 4)
#define                                 SS2R0_bit           _BIT_ACCESS(RPINR12_13,4)
// RPINR12_13<SS2R1>
extern volatile __bit                   SS2R1               __at(0x7185);	// @ (0xE30 * 8 + 5)
#define                                 SS2R1_bit           _BIT_ACCESS(RPINR12_13,5)
// RPINR12_13<SS2R2>
extern volatile __bit                   SS2R2               __at(0x7186);	// @ (0xE30 * 8 + 6)
#define                                 SS2R2_bit           _BIT_ACCESS(RPINR12_13,6)
// RPINR12_13<SS2R3>
extern volatile __bit                   SS2R3               __at(0x7187);	// @ (0xE30 * 8 + 7)
#define                                 SS2R3_bit           _BIT_ACCESS(RPINR12_13,7)
// DMACON1<SSCON0>
extern volatile __bit                   SSCON0              __at(0x7B06);	// @ (0xF60 * 8 + 6)
#define                                 SSCON0_bit          _BIT_ACCESS(DMACON1,6)
// DMACON1<SSCON1>
extern volatile __bit                   SSCON1              __at(0x7B07);	// @ (0xF60 * 8 + 7)
#define                                 SSCON1_bit          _BIT_ACCESS(DMACON1,7)
// PIE1<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x7CEB);	// @ (0xF9D * 8 + 3)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE1,3)
// PIR1<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x7CF3);	// @ (0xF9E * 8 + 3)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR1,3)
// IPR1<SSP1IP>
extern volatile __bit                   SSP1IP              __at(0x7CFB);	// @ (0xF9F * 8 + 3)
#define                                 SSP1IP_bit          _BIT_ACCESS(IPR1,3)
// PMD1<SSP1MD>
extern volatile __bit                   SSP1MD              __at(0x7798);	// @ (0xEF3 * 8 + 0)
#define                                 SSP1MD_bit          _BIT_ACCESS(PMD1,0)
// ODCON1<SSP1OD>
extern volatile __bit                   SSP1OD              __at(0x7758);	// @ (0xEEB * 8 + 0)
#define                                 SSP1OD_bit          _BIT_ACCESS(ODCON1,0)
// PIE2<SSP2IE>
extern volatile __bit                   SSP2IE              __at(0x7D06);	// @ (0xFA0 * 8 + 6)
#define                                 SSP2IE_bit          _BIT_ACCESS(PIE2,6)
// PIR2<SSP2IF>
extern volatile __bit                   SSP2IF              __at(0x7D0E);	// @ (0xFA1 * 8 + 6)
#define                                 SSP2IF_bit          _BIT_ACCESS(PIR2,6)
// IPR2<SSP2IP>
extern volatile __bit                   SSP2IP              __at(0x7D16);	// @ (0xFA2 * 8 + 6)
#define                                 SSP2IP_bit          _BIT_ACCESS(IPR2,6)
// PMD1<SSP2MD>
extern volatile __bit                   SSP2MD              __at(0x7799);	// @ (0xEF3 * 8 + 1)
#define                                 SSP2MD_bit          _BIT_ACCESS(PMD1,1)
// ODCON1<SSP2OD>
extern volatile __bit                   SSP2OD              __at(0x7759);	// @ (0xEEB * 8 + 1)
#define                                 SSP2OD_bit          _BIT_ACCESS(ODCON1,1)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0x7E35);	// @ (0xFC6 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// SSP2CON1<SSPEN2>
extern volatile __bit                   SSPEN2              __at(0x78CD);	// @ (0xF19 * 8 + 5)
#define                                 SSPEN2_bit          _BIT_ACCESS(SSP2CON1,5)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0x7E30);	// @ (0xFC6 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// LCDDATA12<SSPM012>
extern volatile __bit                   SSPM012             __at(0x74D0);	// @ (0xE9A * 8 + 0)
#define                                 SSPM012_bit         _BIT_ACCESS(LCDDATA12,0)
// SSP2CON1<SSPM02>
extern volatile __bit                   SSPM02              __at(0x78C8);	// @ (0xF19 * 8 + 0)
#define                                 SSPM02_bit          _BIT_ACCESS(SSP2CON1,0)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0x7E31);	// @ (0xFC6 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// LCDDATA12<SSPM112>
extern volatile __bit                   SSPM112             __at(0x74D1);	// @ (0xE9A * 8 + 1)
#define                                 SSPM112_bit         _BIT_ACCESS(LCDDATA12,1)
// SSP2CON1<SSPM12>
extern volatile __bit                   SSPM12              __at(0x78C9);	// @ (0xF19 * 8 + 1)
#define                                 SSPM12_bit          _BIT_ACCESS(SSP2CON1,1)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0x7E32);	// @ (0xFC6 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// LCDDATA12<SSPM212>
extern volatile __bit                   SSPM212             __at(0x74D2);	// @ (0xE9A * 8 + 2)
#define                                 SSPM212_bit         _BIT_ACCESS(LCDDATA12,2)
// SSP2CON1<SSPM22>
extern volatile __bit                   SSPM22              __at(0x78CA);	// @ (0xF19 * 8 + 2)
#define                                 SSPM22_bit          _BIT_ACCESS(SSP2CON1,2)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0x7E33);	// @ (0xFC6 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// LCDDATA12<SSPM312>
extern volatile __bit                   SSPM312             __at(0x74D3);	// @ (0xE9A * 8 + 3)
#define                                 SSPM312_bit         _BIT_ACCESS(LCDDATA12,3)
// SSP2CON1<SSPM32>
extern volatile __bit                   SSPM32              __at(0x78CB);	// @ (0xF19 * 8 + 3)
#define                                 SSPM32_bit          _BIT_ACCESS(SSP2CON1,3)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0x7E36);	// @ (0xFC6 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// SSP2CON1<SSPOV2>
extern volatile __bit                   SSPOV2              __at(0x78CE);	// @ (0xF19 * 8 + 6)
#define                                 SSPOV2_bit          _BIT_ACCESS(SSP2CON1,6)
// ADCON1L<SSRC0>
extern volatile __bit                   SSRC0               __at(0x7E04);	// @ (0xFC0 * 8 + 4)
#define                                 SSRC0_bit           _BIT_ACCESS(ADCON1L,4)
// ADCON1L<SSRC1>
extern volatile __bit                   SSRC1               __at(0x7E05);	// @ (0xFC0 * 8 + 5)
#define                                 SSRC1_bit           _BIT_ACCESS(ADCON1L,5)
// ADCON1L<SSRC2>
extern volatile __bit                   SSRC2               __at(0x7E06);	// @ (0xFC0 * 8 + 6)
#define                                 SSRC2_bit           _BIT_ACCESS(ADCON1L,6)
// ADCON1L<SSRC3>
extern volatile __bit                   SSRC3               __at(0x7E07);	// @ (0xFC0 * 8 + 7)
#define                                 SSRC3_bit           _BIT_ACCESS(ADCON1L,7)
// UIE<STALLIE>
extern volatile __bit                   STALLIE             __at(0x7085);	// @ (0xE10 * 8 + 5)
#define                                 STALLIE_bit         _BIT_ACCESS(UIE,5)
// UIR<STALLIF>
extern volatile __bit                   STALLIF             __at(0x7BC5);	// @ (0xF78 * 8 + 5)
#define                                 STALLIF_bit         _BIT_ACCESS(UIR,5)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0x7E3B);	// @ (0xFC7 * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// SSP2STAT<START2>
extern volatile __bit                   START2              __at(0x78D3);	// @ (0xF1A * 8 + 3)
#define                                 START2_bit          _BIT_ACCESS(SSP2STAT,3)
// RCON3<STKERR>
extern volatile __bit                   STKERR              __at(0x7BE7);	// @ (0xF7C * 8 + 7)
#define                                 STKERR_bit          _BIT_ACCESS(RCON3,7)
// STKPTR<STKFUL>
extern volatile __bit                   STKFUL              __at(0x7FE7);	// @ (0xFFC * 8 + 7)
#define                                 STKFUL_bit          _BIT_ACCESS(STKPTR,7)
// STKPTR<STKOVF>
extern volatile __bit                   STKOVF              __at(0x7FE7);	// @ (0xFFC * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(STKPTR,7)
// STKPTR<STKUNF>
extern volatile __bit                   STKUNF              __at(0x7FE6);	// @ (0xFFC * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(STKPTR,6)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0x7E3C);	// @ (0xFC7 * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// SSP2STAT<STOP2>
extern volatile __bit                   STOP2               __at(0x78D4);	// @ (0xF1A * 8 + 4)
#define                                 STOP2_bit           _BIT_ACCESS(SSP2STAT,4)
// PSTR1CON<STRA1>
extern volatile __bit                   STRA1               __at(0x7CE0);	// @ (0xF9C * 8 + 0)
#define                                 STRA1_bit           _BIT_ACCESS(PSTR1CON,0)
// PSTR2CON<STRA2>
extern volatile __bit                   STRA2               __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 STRA2_bit           _BIT_ACCESS(PSTR2CON,0)
// PSTR3CON<STRA3>
extern volatile __bit                   STRA3               __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 STRA3_bit           _BIT_ACCESS(PSTR3CON,0)
// PSTR1CON<STRB1>
extern volatile __bit                   STRB1               __at(0x7CE1);	// @ (0xF9C * 8 + 1)
#define                                 STRB1_bit           _BIT_ACCESS(PSTR1CON,1)
// PSTR2CON<STRB2>
extern volatile __bit                   STRB2               __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 STRB2_bit           _BIT_ACCESS(PSTR2CON,1)
// PSTR3CON<STRB3>
extern volatile __bit                   STRB3               __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 STRB3_bit           _BIT_ACCESS(PSTR3CON,1)
// PSTR1CON<STRC1>
extern volatile __bit                   STRC1               __at(0x7CE2);	// @ (0xF9C * 8 + 2)
#define                                 STRC1_bit           _BIT_ACCESS(PSTR1CON,2)
// PSTR2CON<STRC2>
extern volatile __bit                   STRC2               __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 STRC2_bit           _BIT_ACCESS(PSTR2CON,2)
// PSTR3CON<STRC3>
extern volatile __bit                   STRC3               __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 STRC3_bit           _BIT_ACCESS(PSTR3CON,2)
// PSTR1CON<STRD1>
extern volatile __bit                   STRD1               __at(0x7CE3);	// @ (0xF9C * 8 + 3)
#define                                 STRD1_bit           _BIT_ACCESS(PSTR1CON,3)
// PSTR2CON<STRD2>
extern volatile __bit                   STRD2               __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 STRD2_bit           _BIT_ACCESS(PSTR2CON,3)
// PSTR3CON<STRD3>
extern volatile __bit                   STRD3               __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 STRD3_bit           _BIT_ACCESS(PSTR3CON,3)
// PSTR1CON<STRSYNC1>
extern volatile __bit                   STRSYNC1            __at(0x7CE4);	// @ (0xF9C * 8 + 4)
#define                                 STRSYNC1_bit        _BIT_ACCESS(PSTR1CON,4)
// PSTR2CON<STRSYNC2>
extern volatile __bit                   STRSYNC2            __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 STRSYNC2_bit        _BIT_ACCESS(PSTR2CON,4)
// PSTR3CON<STRSYNC3>
extern volatile __bit                   STRSYNC3            __at(0x78DC);	// @ (0xF1B * 8 + 4)
#define                                 STRSYNC3_bit        _BIT_ACCESS(PSTR3CON,4)
// UCON<SUSPND>
extern volatile __bit                   SUSPND              __at(0x7BA9);	// @ (0xF75 * 8 + 1)
#define                                 SUSPND_bit          _BIT_ACCESS(UCON,1)
// RCON2<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x7BED);	// @ (0xF7D * 8 + 5)
#define                                 SWDTEN_bit          _BIT_ACCESS(RCON2,5)
// TXSTA1<SYNC1>
extern volatile __bit                   SYNC1               __at(0x7D64);	// @ (0xFAC * 8 + 4)
#define                                 SYNC1_bit           _BIT_ACCESS(TXSTA1,4)
// T0CON<T08BIT>
extern volatile __bit                   T08BIT              __at(0x7EAE);	// @ (0xFD5 * 8 + 6)
#define                                 T08BIT_bit          _BIT_ACCESS(T0CON,6)
// RPINR38_39<T0CKIR0>
extern volatile __bit                   T0CKIR0             __at(0x71EC);	// @ (0xE3D * 8 + 4)
#define                                 T0CKIR0_bit         _BIT_ACCESS(RPINR38_39,4)
// RPINR38_39<T0CKIR1>
extern volatile __bit                   T0CKIR1             __at(0x71ED);	// @ (0xE3D * 8 + 5)
#define                                 T0CKIR1_bit         _BIT_ACCESS(RPINR38_39,5)
// RPINR38_39<T0CKIR2>
extern volatile __bit                   T0CKIR2             __at(0x71EE);	// @ (0xE3D * 8 + 6)
#define                                 T0CKIR2_bit         _BIT_ACCESS(RPINR38_39,6)
// RPINR38_39<T0CKIR3>
extern volatile __bit                   T0CKIR3             __at(0x71EF);	// @ (0xE3D * 8 + 7)
#define                                 T0CKIR3_bit         _BIT_ACCESS(RPINR38_39,7)
// T0CON<T0CS0>
extern volatile __bit                   T0CS0               __at(0x7EAC);	// @ (0xFD5 * 8 + 4)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON,4)
// T0CON<T0CS1>
extern volatile __bit                   T0CS1               __at(0x7EAD);	// @ (0xFD5 * 8 + 5)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON,5)
// INTCON<T0IE>
extern volatile __bit                   T0IE                __at(0x7F95);	// @ (0xFF2 * 8 + 5)
#define                                 T0IE_bit            _BIT_ACCESS(INTCON,5)
// INTCON<T0IF>
extern volatile __bit                   T0IF                __at(0x7F92);	// @ (0xFF2 * 8 + 2)
#define                                 T0IF_bit            _BIT_ACCESS(INTCON,2)
// INTCON2<T0IP>
extern volatile __bit                   T0IP                __at(0x7F8A);	// @ (0xFF1 * 8 + 2)
#define                                 T0IP_bit            _BIT_ACCESS(INTCON2,2)
// T0CON<T0PS0>
extern volatile __bit                   T0PS0               __at(0x7EA8);	// @ (0xFD5 * 8 + 0)
#define                                 T0PS0_bit           _BIT_ACCESS(T0CON,0)
// T0CON<T0PS1>
extern volatile __bit                   T0PS1               __at(0x7EA9);	// @ (0xFD5 * 8 + 1)
#define                                 T0PS1_bit           _BIT_ACCESS(T0CON,1)
// T0CON<T0PS2>
extern volatile __bit                   T0PS2               __at(0x7EAA);	// @ (0xFD5 * 8 + 2)
#define                                 T0PS2_bit           _BIT_ACCESS(T0CON,2)
// RPINR40_41<T1CKIR0>
extern volatile __bit                   T1CKIR0             __at(0x71F4);	// @ (0xE3E * 8 + 4)
#define                                 T1CKIR0_bit         _BIT_ACCESS(RPINR40_41,4)
// RPINR40_41<T1CKIR1>
extern volatile __bit                   T1CKIR1             __at(0x71F5);	// @ (0xE3E * 8 + 5)
#define                                 T1CKIR1_bit         _BIT_ACCESS(RPINR40_41,5)
// RPINR40_41<T1CKIR2>
extern volatile __bit                   T1CKIR2             __at(0x71F6);	// @ (0xE3E * 8 + 6)
#define                                 T1CKIR2_bit         _BIT_ACCESS(RPINR40_41,6)
// RPINR40_41<T1CKIR3>
extern volatile __bit                   T1CKIR3             __at(0x71F7);	// @ (0xE3E * 8 + 7)
#define                                 T1CKIR3_bit         _BIT_ACCESS(RPINR40_41,7)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x7E6C);	// @ (0xFCD * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x7E6D);	// @ (0xFCD * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x7D53);	// @ (0xFAA * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_NOT_T1DONE>
extern volatile __bit                   T1GGO_NOT_T1DONE    __at(0x7D53);	// @ (0xFAA * 8 + 3)
#define                                 T1GGO_NOT_T1DONE_bit _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nT1DONE>
extern volatile __bit                   T1GGO_nT1DONE       __at(0x7D53);	// @ (0xFAA * 8 + 3)
#define                                 T1GGO_nT1DONE_bit   _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x7D56);	// @ (0xFAA * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// RPINR40_41<T1GR0>
extern volatile __bit                   T1GR0               __at(0x71F0);	// @ (0xE3E * 8 + 0)
#define                                 T1GR0_bit           _BIT_ACCESS(RPINR40_41,0)
// RPINR40_41<T1GR1>
extern volatile __bit                   T1GR1               __at(0x71F1);	// @ (0xE3E * 8 + 1)
#define                                 T1GR1_bit           _BIT_ACCESS(RPINR40_41,1)
// RPINR40_41<T1GR2>
extern volatile __bit                   T1GR2               __at(0x71F2);	// @ (0xE3E * 8 + 2)
#define                                 T1GR2_bit           _BIT_ACCESS(RPINR40_41,2)
// RPINR40_41<T1GR3>
extern volatile __bit                   T1GR3               __at(0x71F3);	// @ (0xE3E * 8 + 3)
#define                                 T1GR3_bit           _BIT_ACCESS(RPINR40_41,3)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x7D54);	// @ (0xFAA * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GCON<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x7D50);	// @ (0xFAA * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GCON,0)
// T1GCON<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x7D51);	// @ (0xFAA * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GCON,1)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x7D55);	// @ (0xFAA * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x7D52);	// @ (0xFAA * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1OSCEN>
extern volatile __bit                   T1OSCEN             __at(0x7E6B);	// @ (0xFCD * 8 + 3)
#define                                 T1OSCEN_bit         _BIT_ACCESS(T1CON,3)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x7E6F);	// @ (0xFCD * 8 + 7)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,7)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x7E50);	// @ (0xFCA * 8 + 0)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,0)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x7E51);	// @ (0xFCA * 8 + 1)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x7E53);	// @ (0xFCA * 8 + 3)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,3)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x7E54);	// @ (0xFCA * 8 + 4)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,4)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x7E55);	// @ (0xFCA * 8 + 5)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,5)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x7E56);	// @ (0xFCA * 8 + 6)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,6)
// RPINR42_43<T3CKIR0>
extern volatile __bit                   T3CKIR0             __at(0x71FC);	// @ (0xE3F * 8 + 4)
#define                                 T3CKIR0_bit         _BIT_ACCESS(RPINR42_43,4)
// RPINR42_43<T3CKIR1>
extern volatile __bit                   T3CKIR1             __at(0x71FD);	// @ (0xE3F * 8 + 5)
#define                                 T3CKIR1_bit         _BIT_ACCESS(RPINR42_43,5)
// RPINR42_43<T3CKIR2>
extern volatile __bit                   T3CKIR2             __at(0x71FE);	// @ (0xE3F * 8 + 6)
#define                                 T3CKIR2_bit         _BIT_ACCESS(RPINR42_43,6)
// RPINR42_43<T3CKIR3>
extern volatile __bit                   T3CKIR3             __at(0x71FF);	// @ (0xE3F * 8 + 7)
#define                                 T3CKIR3_bit         _BIT_ACCESS(RPINR42_43,7)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x7D8C);	// @ (0xFB1 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// LCDDATA19<T3CKPS019>
extern volatile __bit                   T3CKPS019           __at(0x750C);	// @ (0xEA1 * 8 + 4)
#define                                 T3CKPS019_bit       _BIT_ACCESS(LCDDATA19,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x7D8D);	// @ (0xFB1 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// LCDDATA19<T3CKPS119>
extern volatile __bit                   T3CKPS119           __at(0x750D);	// @ (0xEA1 * 8 + 5)
#define                                 T3CKPS119_bit       _BIT_ACCESS(LCDDATA19,5)
// T3GCON<T3GGO>
extern volatile __bit                   T3GGO               __at(0x7D83);	// @ (0xFB0 * 8 + 3)
#define                                 T3GGO_bit           _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GGO_NOT_T3DONE>
extern volatile __bit                   T3GGO_NOT_T3DONE    __at(0x7D83);	// @ (0xFB0 * 8 + 3)
#define                                 T3GGO_NOT_T3DONE_bit _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GGO_nT3DONE>
extern volatile __bit                   T3GGO_nT3DONE       __at(0x7D83);	// @ (0xFB0 * 8 + 3)
#define                                 T3GGO_nT3DONE_bit   _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x7D86);	// @ (0xFB0 * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// RPINR42_43<T3GR0>
extern volatile __bit                   T3GR0               __at(0x71F8);	// @ (0xE3F * 8 + 0)
#define                                 T3GR0_bit           _BIT_ACCESS(RPINR42_43,0)
// RPINR42_43<T3GR1>
extern volatile __bit                   T3GR1               __at(0x71F9);	// @ (0xE3F * 8 + 1)
#define                                 T3GR1_bit           _BIT_ACCESS(RPINR42_43,1)
// RPINR42_43<T3GR2>
extern volatile __bit                   T3GR2               __at(0x71FA);	// @ (0xE3F * 8 + 2)
#define                                 T3GR2_bit           _BIT_ACCESS(RPINR42_43,2)
// RPINR42_43<T3GR3>
extern volatile __bit                   T3GR3               __at(0x71FB);	// @ (0xE3F * 8 + 3)
#define                                 T3GR3_bit           _BIT_ACCESS(RPINR42_43,3)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x7D84);	// @ (0xFB0 * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GCON<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x7D80);	// @ (0xFB0 * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GCON,0)
// T3GCON<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x7D81);	// @ (0xFB0 * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GCON,1)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x7D85);	// @ (0xFB0 * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x7D82);	// @ (0xFB0 * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3OSCEN>
extern volatile __bit                   T3OSCEN             __at(0x7D8B);	// @ (0xFB1 * 8 + 3)
#define                                 T3OSCEN_bit         _BIT_ACCESS(T3CON,3)
// T3CON<T3RD16>
extern volatile __bit                   T3RD16              __at(0x7D8F);	// @ (0xFB1 * 8 + 7)
#define                                 T3RD16_bit          _BIT_ACCESS(T3CON,7)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x7820);	// @ (0xF04 * 8 + 0)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,0)
// LCDDATA16<T4CKPS016>
extern volatile __bit                   T4CKPS016           __at(0x74F0);	// @ (0xE9E * 8 + 0)
#define                                 T4CKPS016_bit       _BIT_ACCESS(LCDDATA16,0)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x7821);	// @ (0xF04 * 8 + 1)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,1)
// LCDDATA16<T4CKPS116>
extern volatile __bit                   T4CKPS116           __at(0x74F1);	// @ (0xE9E * 8 + 1)
#define                                 T4CKPS116_bit       _BIT_ACCESS(LCDDATA16,1)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x7823);	// @ (0xF04 * 8 + 3)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,3)
// LCDDATA16<T4OUTPS016>
extern volatile __bit                   T4OUTPS016          __at(0x74F3);	// @ (0xE9E * 8 + 3)
#define                                 T4OUTPS016_bit      _BIT_ACCESS(LCDDATA16,3)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x7824);	// @ (0xF04 * 8 + 4)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,4)
// LCDDATA16<T4OUTPS116>
extern volatile __bit                   T4OUTPS116          __at(0x74F4);	// @ (0xE9E * 8 + 4)
#define                                 T4OUTPS116_bit      _BIT_ACCESS(LCDDATA16,4)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x7825);	// @ (0xF04 * 8 + 5)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,5)
// LCDDATA16<T4OUTPS216>
extern volatile __bit                   T4OUTPS216          __at(0x74F5);	// @ (0xE9E * 8 + 5)
#define                                 T4OUTPS216_bit      _BIT_ACCESS(LCDDATA16,5)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x7826);	// @ (0xF04 * 8 + 6)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,6)
// LCDDATA16<T4OUTPS316>
extern volatile __bit                   T4OUTPS316          __at(0x74F6);	// @ (0xE9E * 8 + 6)
#define                                 T4OUTPS316_bit      _BIT_ACCESS(LCDDATA16,6)
// RPINR44_45<T5CKIR0>
extern volatile __bit                   T5CKIR0             __at(0x7204);	// @ (0xE40 * 8 + 4)
#define                                 T5CKIR0_bit         _BIT_ACCESS(RPINR44_45,4)
// RPINR44_45<T5CKIR1>
extern volatile __bit                   T5CKIR1             __at(0x7205);	// @ (0xE40 * 8 + 5)
#define                                 T5CKIR1_bit         _BIT_ACCESS(RPINR44_45,5)
// RPINR44_45<T5CKIR2>
extern volatile __bit                   T5CKIR2             __at(0x7206);	// @ (0xE40 * 8 + 6)
#define                                 T5CKIR2_bit         _BIT_ACCESS(RPINR44_45,6)
// RPINR44_45<T5CKIR3>
extern volatile __bit                   T5CKIR3             __at(0x7207);	// @ (0xE40 * 8 + 7)
#define                                 T5CKIR3_bit         _BIT_ACCESS(RPINR44_45,7)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x78A4);	// @ (0xF14 * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x78A5);	// @ (0xF14 * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5GCON<T5GGO>
extern volatile __bit                   T5GGO               __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 T5GGO_bit           _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GGO_NOT_T5DONE>
extern volatile __bit                   T5GGO_NOT_T5DONE    __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 T5GGO_NOT_T5DONE_bit _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GGO_nT5DONE>
extern volatile __bit                   T5GGO_nT5DONE       __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 T5GGO_nT5DONE_bit   _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x789E);	// @ (0xF13 * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// RPINR44_45<T5GR0>
extern volatile __bit                   T5GR0               __at(0x7200);	// @ (0xE40 * 8 + 0)
#define                                 T5GR0_bit           _BIT_ACCESS(RPINR44_45,0)
// RPINR44_45<T5GR1>
extern volatile __bit                   T5GR1               __at(0x7201);	// @ (0xE40 * 8 + 1)
#define                                 T5GR1_bit           _BIT_ACCESS(RPINR44_45,1)
// RPINR44_45<T5GR2>
extern volatile __bit                   T5GR2               __at(0x7202);	// @ (0xE40 * 8 + 2)
#define                                 T5GR2_bit           _BIT_ACCESS(RPINR44_45,2)
// RPINR44_45<T5GR3>
extern volatile __bit                   T5GR3               __at(0x7203);	// @ (0xE40 * 8 + 3)
#define                                 T5GR3_bit           _BIT_ACCESS(RPINR44_45,3)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x789C);	// @ (0xF13 * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GCON<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x7898);	// @ (0xF13 * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GCON,0)
// T5GCON<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x7899);	// @ (0xF13 * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GCON,1)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x789D);	// @ (0xF13 * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x789A);	// @ (0xF13 * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5OSCEN>
extern volatile __bit                   T5OSCEN             __at(0x78A3);	// @ (0xF14 * 8 + 3)
#define                                 T5OSCEN_bit         _BIT_ACCESS(T5CON,3)
// T5CON<T5RD16>
extern volatile __bit                   T5RD16              __at(0x78A7);	// @ (0xF14 * 8 + 7)
#define                                 T5RD16_bit          _BIT_ACCESS(T5CON,7)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x79E8);	// @ (0xF3D * 8 + 0)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,0)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x79E9);	// @ (0xF3D * 8 + 1)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x79EB);	// @ (0xF3D * 8 + 3)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,3)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x79EC);	// @ (0xF3D * 8 + 4)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,4)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x79ED);	// @ (0xF3D * 8 + 5)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,5)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x79EE);	// @ (0xF3D * 8 + 6)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,6)
// T8CON<T8CKPS0>
extern volatile __bit                   T8CKPS0             __at(0x79D0);	// @ (0xF3A * 8 + 0)
#define                                 T8CKPS0_bit         _BIT_ACCESS(T8CON,0)
// T8CON<T8CKPS1>
extern volatile __bit                   T8CKPS1             __at(0x79D1);	// @ (0xF3A * 8 + 1)
#define                                 T8CKPS1_bit         _BIT_ACCESS(T8CON,1)
// T8CON<T8OUTPS0>
extern volatile __bit                   T8OUTPS0            __at(0x79D3);	// @ (0xF3A * 8 + 3)
#define                                 T8OUTPS0_bit        _BIT_ACCESS(T8CON,3)
// T8CON<T8OUTPS1>
extern volatile __bit                   T8OUTPS1            __at(0x79D4);	// @ (0xF3A * 8 + 4)
#define                                 T8OUTPS1_bit        _BIT_ACCESS(T8CON,4)
// T8CON<T8OUTPS2>
extern volatile __bit                   T8OUTPS2            __at(0x79D5);	// @ (0xF3A * 8 + 5)
#define                                 T8OUTPS2_bit        _BIT_ACCESS(T8CON,5)
// T8CON<T8OUTPS3>
extern volatile __bit                   T8OUTPS3            __at(0x79D6);	// @ (0xF3A * 8 + 6)
#define                                 T8OUTPS3_bit        _BIT_ACCESS(T8CON,6)
// CTMUCON1<TGEN>
extern volatile __bit                   TGEN                __at(0x77C4);	// @ (0xEF8 * 8 + 4)
#define                                 TGEN_bit            _BIT_ACCESS(CTMUCON1,4)
// INTCON<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x7F95);	// @ (0xFF2 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(INTCON,5)
// INTCON<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x7F92);	// @ (0xFF2 * 8 + 2)
#define                                 TMR0IF_bit          _BIT_ACCESS(INTCON,2)
// INTCON2<TMR0IP>
extern volatile __bit                   TMR0IP              __at(0x7F8A);	// @ (0xFF1 * 8 + 2)
#define                                 TMR0IP_bit          _BIT_ACCESS(INTCON2,2)
// PMD2<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x7790);	// @ (0xEF2 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD2,0)
// T0CON<TMR0ON>
extern volatile __bit                   TMR0ON              __at(0x7EAF);	// @ (0xFD5 * 8 + 7)
#define                                 TMR0ON_bit          _BIT_ACCESS(T0CON,7)
// T1CON<TMR1CS0>
extern volatile __bit                   TMR1CS0             __at(0x7E6E);	// @ (0xFCD * 8 + 6)
#define                                 TMR1CS0_bit         _BIT_ACCESS(T1CON,6)
// T1CON<TMR1CS1>
extern volatile __bit                   TMR1CS1             __at(0x7E6F);	// @ (0xFCD * 8 + 7)
#define                                 TMR1CS1_bit         _BIT_ACCESS(T1CON,7)
// T1GCON<TMR1GE>
extern volatile __bit                   TMR1GE              __at(0x7D57);	// @ (0xFAA * 8 + 7)
#define                                 TMR1GE_bit          _BIT_ACCESS(T1GCON,7)
// PIE1<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x7CEA);	// @ (0xF9D * 8 + 2)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE1,2)
// PIR1<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x7CF2);	// @ (0xF9E * 8 + 2)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR1,2)
// IPR1<TMR1GIP>
extern volatile __bit                   TMR1GIP             __at(0x7CFA);	// @ (0xF9F * 8 + 2)
#define                                 TMR1GIP_bit         _BIT_ACCESS(IPR1,2)
// PIE1<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x7CE8);	// @ (0xF9D * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE1,0)
// PIR1<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x7CF0);	// @ (0xF9E * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR1,0)
// IPR1<TMR1IP>
extern volatile __bit                   TMR1IP              __at(0x7CF8);	// @ (0xF9F * 8 + 0)
#define                                 TMR1IP_bit          _BIT_ACCESS(IPR1,0)
// PMD2<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x7791);	// @ (0xEF2 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD2,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x7E68);	// @ (0xFCD * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE1<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x7CE9);	// @ (0xF9D * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE1,1)
// PIR1<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x7CF1);	// @ (0xF9E * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR1,1)
// IPR1<TMR2IP>
extern volatile __bit                   TMR2IP              __at(0x7CF9);	// @ (0xF9F * 8 + 1)
#define                                 TMR2IP_bit          _BIT_ACCESS(IPR1,1)
// PMD2<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x7792);	// @ (0xEF2 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD2,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x7E52);	// @ (0xFCA * 8 + 2)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,2)
// T3CON<TMR3CS0>
extern volatile __bit                   TMR3CS0             __at(0x7D8E);	// @ (0xFB1 * 8 + 6)
#define                                 TMR3CS0_bit         _BIT_ACCESS(T3CON,6)
// LCDDATA19<TMR3CS019>
extern volatile __bit                   TMR3CS019           __at(0x750E);	// @ (0xEA1 * 8 + 6)
#define                                 TMR3CS019_bit       _BIT_ACCESS(LCDDATA19,6)
// T3CON<TMR3CS1>
extern volatile __bit                   TMR3CS1             __at(0x7D8F);	// @ (0xFB1 * 8 + 7)
#define                                 TMR3CS1_bit         _BIT_ACCESS(T3CON,7)
// LCDDATA19<TMR3CS119>
extern volatile __bit                   TMR3CS119           __at(0x750F);	// @ (0xEA1 * 8 + 7)
#define                                 TMR3CS119_bit       _BIT_ACCESS(LCDDATA19,7)
// T3GCON<TMR3GE>
extern volatile __bit                   TMR3GE              __at(0x7D87);	// @ (0xFB0 * 8 + 7)
#define                                 TMR3GE_bit          _BIT_ACCESS(T3GCON,7)
// PIE2<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x7D00);	// @ (0xFA0 * 8 + 0)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE2,0)
// PIR2<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0x7D08);	// @ (0xFA1 * 8 + 0)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR2,0)
// IPR2<TMR3GIP>
extern volatile __bit                   TMR3GIP             __at(0x7D10);	// @ (0xFA2 * 8 + 0)
#define                                 TMR3GIP_bit         _BIT_ACCESS(IPR2,0)
// PIE2<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x7D01);	// @ (0xFA0 * 8 + 1)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE2,1)
// PIR2<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0x7D09);	// @ (0xFA1 * 8 + 1)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR2,1)
// IPR2<TMR3IP>
extern volatile __bit                   TMR3IP              __at(0x7D11);	// @ (0xFA2 * 8 + 1)
#define                                 TMR3IP_bit          _BIT_ACCESS(IPR2,1)
// PMD2<TMR3MD>
extern volatile __bit                   TMR3MD              __at(0x7793);	// @ (0xEF2 * 8 + 3)
#define                                 TMR3MD_bit          _BIT_ACCESS(PMD2,3)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x7D88);	// @ (0xFB1 * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// PIE5<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x7DB8);	// @ (0xFB7 * 8 + 0)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE5,0)
// PIR5<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x7DC0);	// @ (0xFB8 * 8 + 0)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR5,0)
// IPR5<TMR4IP>
extern volatile __bit                   TMR4IP              __at(0x7E90);	// @ (0xFD2 * 8 + 0)
#define                                 TMR4IP_bit          _BIT_ACCESS(IPR5,0)
// PMD2<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x7794);	// @ (0xEF2 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD2,4)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x7822);	// @ (0xF04 * 8 + 2)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,2)
// T5CON<TMR5CS0>
extern volatile __bit                   TMR5CS0             __at(0x78A6);	// @ (0xF14 * 8 + 6)
#define                                 TMR5CS0_bit         _BIT_ACCESS(T5CON,6)
// T5CON<TMR5CS1>
extern volatile __bit                   TMR5CS1             __at(0x78A7);	// @ (0xF14 * 8 + 7)
#define                                 TMR5CS1_bit         _BIT_ACCESS(T5CON,7)
// T5GCON<TMR5GE>
extern volatile __bit                   TMR5GE              __at(0x789F);	// @ (0xF13 * 8 + 7)
#define                                 TMR5GE_bit          _BIT_ACCESS(T5GCON,7)
// PIE3<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x7D1F);	// @ (0xFA3 * 8 + 7)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE3,7)
// PIR3<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0x7D27);	// @ (0xFA4 * 8 + 7)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR3,7)
// IPR3<TMR5GIP>
extern volatile __bit                   TMR5GIP             __at(0x7D2F);	// @ (0xFA5 * 8 + 7)
#define                                 TMR5GIP_bit         _BIT_ACCESS(IPR3,7)
// PIE5<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x7DB9);	// @ (0xFB7 * 8 + 1)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE5,1)
// PIR5<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0x7DC1);	// @ (0xFB8 * 8 + 1)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR5,1)
// IPR5<TMR5IP>
extern volatile __bit                   TMR5IP              __at(0x7E91);	// @ (0xFD2 * 8 + 1)
#define                                 TMR5IP_bit          _BIT_ACCESS(IPR5,1)
// PMD2<TMR5MD>
extern volatile __bit                   TMR5MD              __at(0x7795);	// @ (0xEF2 * 8 + 5)
#define                                 TMR5MD_bit          _BIT_ACCESS(PMD2,5)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x78A0);	// @ (0xF14 * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// PIE5<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x7DBA);	// @ (0xFB7 * 8 + 2)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE5,2)
// PIR5<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0x7DC2);	// @ (0xFB8 * 8 + 2)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR5,2)
// IPR5<TMR6IP>
extern volatile __bit                   TMR6IP              __at(0x7E92);	// @ (0xFD2 * 8 + 2)
#define                                 TMR6IP_bit          _BIT_ACCESS(IPR5,2)
// PMD2<TMR6MD>
extern volatile __bit                   TMR6MD              __at(0x7796);	// @ (0xEF2 * 8 + 6)
#define                                 TMR6MD_bit          _BIT_ACCESS(PMD2,6)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x79EA);	// @ (0xF3D * 8 + 2)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,2)
// PIE5<TMR8IE>
extern volatile __bit                   TMR8IE              __at(0x7DBC);	// @ (0xFB7 * 8 + 4)
#define                                 TMR8IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<TMR8IF>
extern volatile __bit                   TMR8IF              __at(0x7DC4);	// @ (0xFB8 * 8 + 4)
#define                                 TMR8IF_bit          _BIT_ACCESS(PIR5,4)
// IPR5<TMR8IP>
extern volatile __bit                   TMR8IP              __at(0x7E94);	// @ (0xFD2 * 8 + 4)
#define                                 TMR8IP_bit          _BIT_ACCESS(IPR5,4)
// PMD2<TMR8MD>
extern volatile __bit                   TMR8MD              __at(0x7797);	// @ (0xEF2 * 8 + 7)
#define                                 TMR8MD_bit          _BIT_ACCESS(PMD2,7)
// T8CON<TMR8ON>
extern volatile __bit                   TMR8ON              __at(0x79D2);	// @ (0xF3A * 8 + 2)
#define                                 TMR8ON_bit          _BIT_ACCESS(T8CON,2)
// RCON<TO>
extern volatile __bit                   TO                  __at(0x7E83);	// @ (0xFD0 * 8 + 3)
#define                                 TO_bit              _BIT_ACCESS(RCON,3)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x7C90);	// @ (0xF92 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x7C91);	// @ (0xF92 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x7C92);	// @ (0xF92 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x7C93);	// @ (0xF92 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x7C94);	// @ (0xF92 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x7C95);	// @ (0xF92 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x7C96);	// @ (0xF92 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x7C97);	// @ (0xF92 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x7C98);	// @ (0xF93 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x7C99);	// @ (0xF93 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x7C9A);	// @ (0xF93 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x7C9B);	// @ (0xF93 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x7C9C);	// @ (0xF93 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x7C9D);	// @ (0xF93 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x7C9E);	// @ (0xF93 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x7C9F);	// @ (0xF93 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x7CA0);	// @ (0xF94 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x7CA1);	// @ (0xF94 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x7CA2);	// @ (0xF94 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x7CA3);	// @ (0xF94 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x7CA4);	// @ (0xF94 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x7CA5);	// @ (0xF94 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x7CA6);	// @ (0xF94 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x7CA7);	// @ (0xF94 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// TRISD<TRISD0>
extern volatile __bit                   TRISD0              __at(0x7CA8);	// @ (0xF95 * 8 + 0)
#define                                 TRISD0_bit          _BIT_ACCESS(TRISD,0)
// TRISD<TRISD1>
extern volatile __bit                   TRISD1              __at(0x7CA9);	// @ (0xF95 * 8 + 1)
#define                                 TRISD1_bit          _BIT_ACCESS(TRISD,1)
// TRISD<TRISD2>
extern volatile __bit                   TRISD2              __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 TRISD2_bit          _BIT_ACCESS(TRISD,2)
// TRISD<TRISD3>
extern volatile __bit                   TRISD3              __at(0x7CAB);	// @ (0xF95 * 8 + 3)
#define                                 TRISD3_bit          _BIT_ACCESS(TRISD,3)
// TRISD<TRISD4>
extern volatile __bit                   TRISD4              __at(0x7CAC);	// @ (0xF95 * 8 + 4)
#define                                 TRISD4_bit          _BIT_ACCESS(TRISD,4)
// TRISD<TRISD5>
extern volatile __bit                   TRISD5              __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 TRISD5_bit          _BIT_ACCESS(TRISD,5)
// TRISD<TRISD6>
extern volatile __bit                   TRISD6              __at(0x7CAE);	// @ (0xF95 * 8 + 6)
#define                                 TRISD6_bit          _BIT_ACCESS(TRISD,6)
// TRISD<TRISD7>
extern volatile __bit                   TRISD7              __at(0x7CAF);	// @ (0xF95 * 8 + 7)
#define                                 TRISD7_bit          _BIT_ACCESS(TRISD,7)
// TRISE<TRISE0>
extern volatile __bit                   TRISE0              __at(0x7CB0);	// @ (0xF96 * 8 + 0)
#define                                 TRISE0_bit          _BIT_ACCESS(TRISE,0)
// TRISE<TRISE1>
extern volatile __bit                   TRISE1              __at(0x7CB1);	// @ (0xF96 * 8 + 1)
#define                                 TRISE1_bit          _BIT_ACCESS(TRISE,1)
// TRISE<TRISE2>
extern volatile __bit                   TRISE2              __at(0x7CB2);	// @ (0xF96 * 8 + 2)
#define                                 TRISE2_bit          _BIT_ACCESS(TRISE,2)
// TRISE<TRISE3>
extern volatile __bit                   TRISE3              __at(0x7CB3);	// @ (0xF96 * 8 + 3)
#define                                 TRISE3_bit          _BIT_ACCESS(TRISE,3)
// TRISE<TRISE4>
extern volatile __bit                   TRISE4              __at(0x7CB4);	// @ (0xF96 * 8 + 4)
#define                                 TRISE4_bit          _BIT_ACCESS(TRISE,4)
// TRISE<TRISE5>
extern volatile __bit                   TRISE5              __at(0x7CB5);	// @ (0xF96 * 8 + 5)
#define                                 TRISE5_bit          _BIT_ACCESS(TRISE,5)
// TRISE<TRISE6>
extern volatile __bit                   TRISE6              __at(0x7CB6);	// @ (0xF96 * 8 + 6)
#define                                 TRISE6_bit          _BIT_ACCESS(TRISE,6)
// TRISE<TRISE7>
extern volatile __bit                   TRISE7              __at(0x7CB7);	// @ (0xF96 * 8 + 7)
#define                                 TRISE7_bit          _BIT_ACCESS(TRISE,7)
// TRISF<TRISF2>
extern volatile __bit                   TRISF2              __at(0x7CBA);	// @ (0xF97 * 8 + 2)
#define                                 TRISF2_bit          _BIT_ACCESS(TRISF,2)
// TRISF<TRISF3>
extern volatile __bit                   TRISF3              __at(0x7CBB);	// @ (0xF97 * 8 + 3)
#define                                 TRISF3_bit          _BIT_ACCESS(TRISF,3)
// TRISF<TRISF4>
extern volatile __bit                   TRISF4              __at(0x7CBC);	// @ (0xF97 * 8 + 4)
#define                                 TRISF4_bit          _BIT_ACCESS(TRISF,4)
// TRISF<TRISF5>
extern volatile __bit                   TRISF5              __at(0x7CBD);	// @ (0xF97 * 8 + 5)
#define                                 TRISF5_bit          _BIT_ACCESS(TRISF,5)
// TRISF<TRISF6>
extern volatile __bit                   TRISF6              __at(0x7CBE);	// @ (0xF97 * 8 + 6)
#define                                 TRISF6_bit          _BIT_ACCESS(TRISF,6)
// TRISF<TRISF7>
extern volatile __bit                   TRISF7              __at(0x7CBF);	// @ (0xF97 * 8 + 7)
#define                                 TRISF7_bit          _BIT_ACCESS(TRISF,7)
// TRISG<TRISG0>
extern volatile __bit                   TRISG0              __at(0x7CC0);	// @ (0xF98 * 8 + 0)
#define                                 TRISG0_bit          _BIT_ACCESS(TRISG,0)
// TRISG<TRISG1>
extern volatile __bit                   TRISG1              __at(0x7CC1);	// @ (0xF98 * 8 + 1)
#define                                 TRISG1_bit          _BIT_ACCESS(TRISG,1)
// TRISG<TRISG2>
extern volatile __bit                   TRISG2              __at(0x7CC2);	// @ (0xF98 * 8 + 2)
#define                                 TRISG2_bit          _BIT_ACCESS(TRISG,2)
// TRISG<TRISG3>
extern volatile __bit                   TRISG3              __at(0x7CC3);	// @ (0xF98 * 8 + 3)
#define                                 TRISG3_bit          _BIT_ACCESS(TRISG,3)
// TRISG<TRISG4>
extern volatile __bit                   TRISG4              __at(0x7CC4);	// @ (0xF98 * 8 + 4)
#define                                 TRISG4_bit          _BIT_ACCESS(TRISG,4)
// TRISH<TRISH0>
extern volatile __bit                   TRISH0              __at(0x7CC8);	// @ (0xF99 * 8 + 0)
#define                                 TRISH0_bit          _BIT_ACCESS(TRISH,0)
// TRISH<TRISH1>
extern volatile __bit                   TRISH1              __at(0x7CC9);	// @ (0xF99 * 8 + 1)
#define                                 TRISH1_bit          _BIT_ACCESS(TRISH,1)
// TRISH<TRISH2>
extern volatile __bit                   TRISH2              __at(0x7CCA);	// @ (0xF99 * 8 + 2)
#define                                 TRISH2_bit          _BIT_ACCESS(TRISH,2)
// TRISH<TRISH3>
extern volatile __bit                   TRISH3              __at(0x7CCB);	// @ (0xF99 * 8 + 3)
#define                                 TRISH3_bit          _BIT_ACCESS(TRISH,3)
// TRISH<TRISH4>
extern volatile __bit                   TRISH4              __at(0x7CCC);	// @ (0xF99 * 8 + 4)
#define                                 TRISH4_bit          _BIT_ACCESS(TRISH,4)
// TRISH<TRISH5>
extern volatile __bit                   TRISH5              __at(0x7CCD);	// @ (0xF99 * 8 + 5)
#define                                 TRISH5_bit          _BIT_ACCESS(TRISH,5)
// TRISH<TRISH6>
extern volatile __bit                   TRISH6              __at(0x7CCE);	// @ (0xF99 * 8 + 6)
#define                                 TRISH6_bit          _BIT_ACCESS(TRISH,6)
// TRISH<TRISH7>
extern volatile __bit                   TRISH7              __at(0x7CCF);	// @ (0xF99 * 8 + 7)
#define                                 TRISH7_bit          _BIT_ACCESS(TRISH,7)
// TRISJ<TRISJ0>
extern volatile __bit                   TRISJ0              __at(0x7CD0);	// @ (0xF9A * 8 + 0)
#define                                 TRISJ0_bit          _BIT_ACCESS(TRISJ,0)
// TRISJ<TRISJ1>
extern volatile __bit                   TRISJ1              __at(0x7CD1);	// @ (0xF9A * 8 + 1)
#define                                 TRISJ1_bit          _BIT_ACCESS(TRISJ,1)
// TRISJ<TRISJ2>
extern volatile __bit                   TRISJ2              __at(0x7CD2);	// @ (0xF9A * 8 + 2)
#define                                 TRISJ2_bit          _BIT_ACCESS(TRISJ,2)
// TRISJ<TRISJ3>
extern volatile __bit                   TRISJ3              __at(0x7CD3);	// @ (0xF9A * 8 + 3)
#define                                 TRISJ3_bit          _BIT_ACCESS(TRISJ,3)
// TRISJ<TRISJ4>
extern volatile __bit                   TRISJ4              __at(0x7CD4);	// @ (0xF9A * 8 + 4)
#define                                 TRISJ4_bit          _BIT_ACCESS(TRISJ,4)
// TRISJ<TRISJ5>
extern volatile __bit                   TRISJ5              __at(0x7CD5);	// @ (0xF9A * 8 + 5)
#define                                 TRISJ5_bit          _BIT_ACCESS(TRISJ,5)
// TRISJ<TRISJ6>
extern volatile __bit                   TRISJ6              __at(0x7CD6);	// @ (0xF9A * 8 + 6)
#define                                 TRISJ6_bit          _BIT_ACCESS(TRISJ,6)
// TRISJ<TRISJ7>
extern volatile __bit                   TRISJ7              __at(0x7CD7);	// @ (0xF9A * 8 + 7)
#define                                 TRISJ7_bit          _BIT_ACCESS(TRISJ,7)
// TRISVP<TRISVP0>
extern volatile __bit                   TRISVP0             __at(0x7B98);	// @ (0xF73 * 8 + 0)
#define                                 TRISVP0_bit         _BIT_ACCESS(TRISVP,0)
// TRISVP<TRISVP1>
extern volatile __bit                   TRISVP1             __at(0x7B99);	// @ (0xF73 * 8 + 1)
#define                                 TRISVP1_bit         _BIT_ACCESS(TRISVP,1)
// TRISVP<TRISVP2>
extern volatile __bit                   TRISVP2             __at(0x7B9A);	// @ (0xF73 * 8 + 2)
#define                                 TRISVP2_bit         _BIT_ACCESS(TRISVP,2)
// TRISVP<TRISVP3>
extern volatile __bit                   TRISVP3             __at(0x7B9B);	// @ (0xF73 * 8 + 3)
#define                                 TRISVP3_bit         _BIT_ACCESS(TRISVP,3)
// TRISVP<TRISVP4>
extern volatile __bit                   TRISVP4             __at(0x7B9C);	// @ (0xF73 * 8 + 4)
#define                                 TRISVP4_bit         _BIT_ACCESS(TRISVP,4)
// TRISVP<TRISVP5>
extern volatile __bit                   TRISVP5             __at(0x7B9D);	// @ (0xF73 * 8 + 5)
#define                                 TRISVP5_bit         _BIT_ACCESS(TRISVP,5)
// TRISVP<TRISVP6>
extern volatile __bit                   TRISVP6             __at(0x7B9E);	// @ (0xF73 * 8 + 6)
#define                                 TRISVP6_bit         _BIT_ACCESS(TRISVP,6)
// TRISVP<TRISVP7>
extern volatile __bit                   TRISVP7             __at(0x7B9F);	// @ (0xF73 * 8 + 7)
#define                                 TRISVP7_bit         _BIT_ACCESS(TRISVP,7)
// TXSTA1<TRMT1>
extern volatile __bit                   TRMT1               __at(0x7D61);	// @ (0xFAC * 8 + 1)
#define                                 TRMT1_bit           _BIT_ACCESS(TXSTA1,1)
// UIE<TRNIE>
extern volatile __bit                   TRNIE               __at(0x7083);	// @ (0xE10 * 8 + 3)
#define                                 TRNIE_bit           _BIT_ACCESS(UIE,3)
// UIR<TRNIF>
extern volatile __bit                   TRNIF               __at(0x7BC3);	// @ (0xF78 * 8 + 3)
#define                                 TRNIF_bit           _BIT_ACCESS(UIR,3)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x7CD8);	// @ (0xF9B * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x7CD9);	// @ (0xF9B * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x7CDA);	// @ (0xF9B * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x7CDB);	// @ (0xF9B * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x7CDC);	// @ (0xF9B * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x7CDD);	// @ (0xF9B * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// PIE1<TX1IE>
extern volatile __bit                   TX1IE               __at(0x7CEC);	// @ (0xF9D * 8 + 4)
#define                                 TX1IE_bit           _BIT_ACCESS(PIE1,4)
// PIR1<TX1IF>
extern volatile __bit                   TX1IF               __at(0x7CF4);	// @ (0xF9E * 8 + 4)
#define                                 TX1IF_bit           _BIT_ACCESS(PIR1,4)
// IPR1<TX1IP>
extern volatile __bit                   TX1IP               __at(0x7CFC);	// @ (0xF9F * 8 + 4)
#define                                 TX1IP_bit           _BIT_ACCESS(IPR1,4)
// PIE3<TX2IE>
extern volatile __bit                   TX2IE               __at(0x7D1C);	// @ (0xFA3 * 8 + 4)
#define                                 TX2IE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<TX2IF>
extern volatile __bit                   TX2IF               __at(0x7D24);	// @ (0xFA4 * 8 + 4)
#define                                 TX2IF_bit           _BIT_ACCESS(PIR3,4)
// IPR3<TX2IP>
extern volatile __bit                   TX2IP               __at(0x7D2C);	// @ (0xFA5 * 8 + 4)
#define                                 TX2IP_bit           _BIT_ACCESS(IPR3,4)
// PIE6<TX3IE>
extern volatile __bit                   TX3IE               __at(0x7B0C);	// @ (0xF61 * 8 + 4)
#define                                 TX3IE_bit           _BIT_ACCESS(PIE6,4)
// PIR6<TX3IF>
extern volatile __bit                   TX3IF               __at(0x7D34);	// @ (0xFA6 * 8 + 4)
#define                                 TX3IF_bit           _BIT_ACCESS(PIR6,4)
// IPR6<TX3IP>
extern volatile __bit                   TX3IP               __at(0x7D4C);	// @ (0xFA9 * 8 + 4)
#define                                 TX3IP_bit           _BIT_ACCESS(IPR6,4)
// PIE6<TX4IE>
extern volatile __bit                   TX4IE               __at(0x7B0E);	// @ (0xF61 * 8 + 6)
#define                                 TX4IE_bit           _BIT_ACCESS(PIE6,6)
// PIR6<TX4IF>
extern volatile __bit                   TX4IF               __at(0x7D36);	// @ (0xFA6 * 8 + 6)
#define                                 TX4IF_bit           _BIT_ACCESS(PIR6,6)
// IPR6<TX4IP>
extern volatile __bit                   TX4IP               __at(0x7D4E);	// @ (0xFA9 * 8 + 6)
#define                                 TX4IP_bit           _BIT_ACCESS(IPR6,6)
// TXSTA1<TX8_9>
extern volatile __bit                   TX8_9               __at(0x7D66);	// @ (0xFAC * 8 + 6)
#define                                 TX8_9_bit           _BIT_ACCESS(TXSTA1,6)
// TXSTA2<TX8_92>
extern volatile __bit                   TX8_92              __at(0x7996);	// @ (0xF32 * 8 + 6)
#define                                 TX8_92_bit          _BIT_ACCESS(TXSTA2,6)
// TXSTA3<TX8_93>
extern volatile __bit                   TX8_93              __at(0x7976);	// @ (0xF2E * 8 + 6)
#define                                 TX8_93_bit          _BIT_ACCESS(TXSTA3,6)
// TXSTA4<TX8_94>
extern volatile __bit                   TX8_94              __at(0x77F6);	// @ (0xEFE * 8 + 6)
#define                                 TX8_94_bit          _BIT_ACCESS(TXSTA4,6)
// TXSTA1<TX91>
extern volatile __bit                   TX91                __at(0x7D66);	// @ (0xFAC * 8 + 6)
#define                                 TX91_bit            _BIT_ACCESS(TXSTA1,6)
// TXSTA1<TX9D1>
extern volatile __bit                   TX9D1               __at(0x7D60);	// @ (0xFAC * 8 + 0)
#define                                 TX9D1_bit           _BIT_ACCESS(TXSTA1,0)
// TXADDRL<TXADDR0>
extern volatile __bit                   TXADDR0             __at(0x7B80);	// @ (0xF70 * 8 + 0)
#define                                 TXADDR0_bit         _BIT_ACCESS(TXADDRL,0)
// TXADDRL<TXADDR1>
extern volatile __bit                   TXADDR1             __at(0x7B81);	// @ (0xF70 * 8 + 1)
#define                                 TXADDR1_bit         _BIT_ACCESS(TXADDRL,1)
// TXADDRH<TXADDR10>
extern volatile __bit                   TXADDR10            __at(0x7B7A);	// @ (0xF6F * 8 + 2)
#define                                 TXADDR10_bit        _BIT_ACCESS(TXADDRH,2)
// TXADDRH<TXADDR11>
extern volatile __bit                   TXADDR11            __at(0x7B7B);	// @ (0xF6F * 8 + 3)
#define                                 TXADDR11_bit        _BIT_ACCESS(TXADDRH,3)
// TXADDRL<TXADDR2>
extern volatile __bit                   TXADDR2             __at(0x7B82);	// @ (0xF70 * 8 + 2)
#define                                 TXADDR2_bit         _BIT_ACCESS(TXADDRL,2)
// TXADDRL<TXADDR3>
extern volatile __bit                   TXADDR3             __at(0x7B83);	// @ (0xF70 * 8 + 3)
#define                                 TXADDR3_bit         _BIT_ACCESS(TXADDRL,3)
// TXADDRL<TXADDR4>
extern volatile __bit                   TXADDR4             __at(0x7B84);	// @ (0xF70 * 8 + 4)
#define                                 TXADDR4_bit         _BIT_ACCESS(TXADDRL,4)
// TXADDRL<TXADDR5>
extern volatile __bit                   TXADDR5             __at(0x7B85);	// @ (0xF70 * 8 + 5)
#define                                 TXADDR5_bit         _BIT_ACCESS(TXADDRL,5)
// TXADDRL<TXADDR6>
extern volatile __bit                   TXADDR6             __at(0x7B86);	// @ (0xF70 * 8 + 6)
#define                                 TXADDR6_bit         _BIT_ACCESS(TXADDRL,6)
// TXADDRL<TXADDR7>
extern volatile __bit                   TXADDR7             __at(0x7B87);	// @ (0xF70 * 8 + 7)
#define                                 TXADDR7_bit         _BIT_ACCESS(TXADDRL,7)
// TXADDRH<TXADDR8>
extern volatile __bit                   TXADDR8             __at(0x7B78);	// @ (0xF6F * 8 + 0)
#define                                 TXADDR8_bit         _BIT_ACCESS(TXADDRH,0)
// TXADDRH<TXADDR9>
extern volatile __bit                   TXADDR9             __at(0x7B79);	// @ (0xF6F * 8 + 1)
#define                                 TXADDR9_bit         _BIT_ACCESS(TXADDRH,1)
// PIE3<TXB0IE>
extern volatile __bit                   TXB0IE              __at(0x7D1A);	// @ (0xFA3 * 8 + 2)
#define                                 TXB0IE_bit          _BIT_ACCESS(PIE3,2)
// PIE3<TXB1IE>
extern volatile __bit                   TXB1IE              __at(0x7D1B);	// @ (0xFA3 * 8 + 3)
#define                                 TXB1IE_bit          _BIT_ACCESS(PIE3,3)
// PIE3<TXB2IE>
extern volatile __bit                   TXB2IE              __at(0x7D1C);	// @ (0xFA3 * 8 + 4)
#define                                 TXB2IE_bit          _BIT_ACCESS(PIE3,4)
// PIE3<TXBNIE>
extern volatile __bit                   TXBNIE              __at(0x7D1C);	// @ (0xFA3 * 8 + 4)
#define                                 TXBNIE_bit          _BIT_ACCESS(PIE3,4)
// PIR3<TXBNIF>
extern volatile __bit                   TXBNIF              __at(0x7D24);	// @ (0xFA4 * 8 + 4)
#define                                 TXBNIF_bit          _BIT_ACCESS(PIR3,4)
// IPR3<TXBNIP>
extern volatile __bit                   TXBNIP              __at(0x7D2C);	// @ (0xFA5 * 8 + 4)
#define                                 TXBNIP_bit          _BIT_ACCESS(IPR3,4)
// TXBUF<TXBUF0>
extern volatile __bit                   TXBUF0              __at(0x7B50);	// @ (0xF6A * 8 + 0)
#define                                 TXBUF0_bit          _BIT_ACCESS(TXBUF,0)
// TXBUF<TXBUF1>
extern volatile __bit                   TXBUF1              __at(0x7B51);	// @ (0xF6A * 8 + 1)
#define                                 TXBUF1_bit          _BIT_ACCESS(TXBUF,1)
// TXBUF<TXBUF2>
extern volatile __bit                   TXBUF2              __at(0x7B52);	// @ (0xF6A * 8 + 2)
#define                                 TXBUF2_bit          _BIT_ACCESS(TXBUF,2)
// TXBUF<TXBUF3>
extern volatile __bit                   TXBUF3              __at(0x7B53);	// @ (0xF6A * 8 + 3)
#define                                 TXBUF3_bit          _BIT_ACCESS(TXBUF,3)
// TXBUF<TXBUF4>
extern volatile __bit                   TXBUF4              __at(0x7B54);	// @ (0xF6A * 8 + 4)
#define                                 TXBUF4_bit          _BIT_ACCESS(TXBUF,4)
// TXBUF<TXBUF5>
extern volatile __bit                   TXBUF5              __at(0x7B55);	// @ (0xF6A * 8 + 5)
#define                                 TXBUF5_bit          _BIT_ACCESS(TXBUF,5)
// TXBUF<TXBUF6>
extern volatile __bit                   TXBUF6              __at(0x7B56);	// @ (0xF6A * 8 + 6)
#define                                 TXBUF6_bit          _BIT_ACCESS(TXBUF,6)
// TXBUF<TXBUF7>
extern volatile __bit                   TXBUF7              __at(0x7B57);	// @ (0xF6A * 8 + 7)
#define                                 TXBUF7_bit          _BIT_ACCESS(TXBUF,7)
// BAUDCON1<TXCKP1>
extern volatile __bit                   TXCKP1              __at(0x7B3C);	// @ (0xF67 * 8 + 4)
#define                                 TXCKP1_bit          _BIT_ACCESS(BAUDCON1,4)
// BAUDCON2<TXCKP2>
extern volatile __bit                   TXCKP2              __at(0x798C);	// @ (0xF31 * 8 + 4)
#define                                 TXCKP2_bit          _BIT_ACCESS(BAUDCON2,4)
// BAUDCON3<TXCKP3>
extern volatile __bit                   TXCKP3              __at(0x796C);	// @ (0xF2D * 8 + 4)
#define                                 TXCKP3_bit          _BIT_ACCESS(BAUDCON3,4)
// BAUDCON4<TXCKP4>
extern volatile __bit                   TXCKP4              __at(0x77EC);	// @ (0xEFD * 8 + 4)
#define                                 TXCKP4_bit          _BIT_ACCESS(BAUDCON4,4)
// TXSTA1<TXD8>
extern volatile __bit                   TXD8                __at(0x7D60);	// @ (0xFAC * 8 + 0)
#define                                 TXD8_bit            _BIT_ACCESS(TXSTA1,0)
// TXSTA2<TXD82>
extern volatile __bit                   TXD82               __at(0x7990);	// @ (0xF32 * 8 + 0)
#define                                 TXD82_bit           _BIT_ACCESS(TXSTA2,0)
// TXSTA3<TXD83>
extern volatile __bit                   TXD83               __at(0x7970);	// @ (0xF2E * 8 + 0)
#define                                 TXD83_bit           _BIT_ACCESS(TXSTA3,0)
// TXSTA4<TXD84>
extern volatile __bit                   TXD84               __at(0x77F0);	// @ (0xEFE * 8 + 0)
#define                                 TXD84_bit           _BIT_ACCESS(TXSTA4,0)
// TXSTA1<TXEN1>
extern volatile __bit                   TXEN1               __at(0x7D65);	// @ (0xFAC * 8 + 5)
#define                                 TXEN1_bit           _BIT_ACCESS(TXSTA1,5)
// PIE1<TXIE>
extern volatile __bit                   TXIE                __at(0x7CEC);	// @ (0xF9D * 8 + 4)
#define                                 TXIE_bit            _BIT_ACCESS(PIE1,4)
// PIR1<TXIF>
extern volatile __bit                   TXIF                __at(0x7CF4);	// @ (0xF9E * 8 + 4)
#define                                 TXIF_bit            _BIT_ACCESS(PIR1,4)
// DMACON1<TXINC>
extern volatile __bit                   TXINC               __at(0x7B05);	// @ (0xF60 * 8 + 5)
#define                                 TXINC_bit           _BIT_ACCESS(DMACON1,5)
// PMD3<TXMMD>
extern volatile __bit                   TXMMD               __at(0x778F);	// @ (0xEF1 * 8 + 7)
#define                                 TXMMD_bit           _BIT_ACCESS(PMD3,7)
// RPINR0_1<U1RXR0>
extern volatile __bit                   U1RXR0              __at(0x7150);	// @ (0xE2A * 8 + 0)
#define                                 U1RXR0_bit          _BIT_ACCESS(RPINR0_1,0)
// RPINR0_1<U1RXR1>
extern volatile __bit                   U1RXR1              __at(0x7151);	// @ (0xE2A * 8 + 1)
#define                                 U1RXR1_bit          _BIT_ACCESS(RPINR0_1,1)
// RPINR0_1<U1RXR2>
extern volatile __bit                   U1RXR2              __at(0x7152);	// @ (0xE2A * 8 + 2)
#define                                 U1RXR2_bit          _BIT_ACCESS(RPINR0_1,2)
// RPINR0_1<U1RXR3>
extern volatile __bit                   U1RXR3              __at(0x7153);	// @ (0xE2A * 8 + 3)
#define                                 U1RXR3_bit          _BIT_ACCESS(RPINR0_1,3)
// RPINR0_1<U1TXR0>
extern volatile __bit                   U1TXR0              __at(0x7154);	// @ (0xE2A * 8 + 4)
#define                                 U1TXR0_bit          _BIT_ACCESS(RPINR0_1,4)
// RPINR0_1<U1TXR1>
extern volatile __bit                   U1TXR1              __at(0x7155);	// @ (0xE2A * 8 + 5)
#define                                 U1TXR1_bit          _BIT_ACCESS(RPINR0_1,5)
// RPINR0_1<U1TXR2>
extern volatile __bit                   U1TXR2              __at(0x7156);	// @ (0xE2A * 8 + 6)
#define                                 U1TXR2_bit          _BIT_ACCESS(RPINR0_1,6)
// RPINR0_1<U1TXR3>
extern volatile __bit                   U1TXR3              __at(0x7157);	// @ (0xE2A * 8 + 7)
#define                                 U1TXR3_bit          _BIT_ACCESS(RPINR0_1,7)
// RPINR2_3<U2RXR0>
extern volatile __bit                   U2RXR0              __at(0x7158);	// @ (0xE2B * 8 + 0)
#define                                 U2RXR0_bit          _BIT_ACCESS(RPINR2_3,0)
// RPINR2_3<U2RXR1>
extern volatile __bit                   U2RXR1              __at(0x7159);	// @ (0xE2B * 8 + 1)
#define                                 U2RXR1_bit          _BIT_ACCESS(RPINR2_3,1)
// RPINR2_3<U2RXR2>
extern volatile __bit                   U2RXR2              __at(0x715A);	// @ (0xE2B * 8 + 2)
#define                                 U2RXR2_bit          _BIT_ACCESS(RPINR2_3,2)
// RPINR2_3<U2RXR3>
extern volatile __bit                   U2RXR3              __at(0x715B);	// @ (0xE2B * 8 + 3)
#define                                 U2RXR3_bit          _BIT_ACCESS(RPINR2_3,3)
// RPINR2_3<U2TXR0>
extern volatile __bit                   U2TXR0              __at(0x715C);	// @ (0xE2B * 8 + 4)
#define                                 U2TXR0_bit          _BIT_ACCESS(RPINR2_3,4)
// RPINR2_3<U2TXR1>
extern volatile __bit                   U2TXR1              __at(0x715D);	// @ (0xE2B * 8 + 5)
#define                                 U2TXR1_bit          _BIT_ACCESS(RPINR2_3,5)
// RPINR2_3<U2TXR2>
extern volatile __bit                   U2TXR2              __at(0x715E);	// @ (0xE2B * 8 + 6)
#define                                 U2TXR2_bit          _BIT_ACCESS(RPINR2_3,6)
// RPINR2_3<U2TXR3>
extern volatile __bit                   U2TXR3              __at(0x715F);	// @ (0xE2B * 8 + 7)
#define                                 U2TXR3_bit          _BIT_ACCESS(RPINR2_3,7)
// RPINR4_5<U3RXR0>
extern volatile __bit                   U3RXR0              __at(0x7160);	// @ (0xE2C * 8 + 0)
#define                                 U3RXR0_bit          _BIT_ACCESS(RPINR4_5,0)
// RPINR4_5<U3RXR1>
extern volatile __bit                   U3RXR1              __at(0x7161);	// @ (0xE2C * 8 + 1)
#define                                 U3RXR1_bit          _BIT_ACCESS(RPINR4_5,1)
// RPINR4_5<U3RXR2>
extern volatile __bit                   U3RXR2              __at(0x7162);	// @ (0xE2C * 8 + 2)
#define                                 U3RXR2_bit          _BIT_ACCESS(RPINR4_5,2)
// RPINR4_5<U3RXR3>
extern volatile __bit                   U3RXR3              __at(0x7163);	// @ (0xE2C * 8 + 3)
#define                                 U3RXR3_bit          _BIT_ACCESS(RPINR4_5,3)
// RPINR4_5<U3TXR0>
extern volatile __bit                   U3TXR0              __at(0x7164);	// @ (0xE2C * 8 + 4)
#define                                 U3TXR0_bit          _BIT_ACCESS(RPINR4_5,4)
// RPINR4_5<U3TXR1>
extern volatile __bit                   U3TXR1              __at(0x7165);	// @ (0xE2C * 8 + 5)
#define                                 U3TXR1_bit          _BIT_ACCESS(RPINR4_5,5)
// RPINR4_5<U3TXR2>
extern volatile __bit                   U3TXR2              __at(0x7166);	// @ (0xE2C * 8 + 6)
#define                                 U3TXR2_bit          _BIT_ACCESS(RPINR4_5,6)
// RPINR4_5<U3TXR3>
extern volatile __bit                   U3TXR3              __at(0x7167);	// @ (0xE2C * 8 + 7)
#define                                 U3TXR3_bit          _BIT_ACCESS(RPINR4_5,7)
// RPINR6_7<U4RXR0>
extern volatile __bit                   U4RXR0              __at(0x7168);	// @ (0xE2D * 8 + 0)
#define                                 U4RXR0_bit          _BIT_ACCESS(RPINR6_7,0)
// RPINR6_7<U4RXR1>
extern volatile __bit                   U4RXR1              __at(0x7169);	// @ (0xE2D * 8 + 1)
#define                                 U4RXR1_bit          _BIT_ACCESS(RPINR6_7,1)
// RPINR6_7<U4RXR2>
extern volatile __bit                   U4RXR2              __at(0x716A);	// @ (0xE2D * 8 + 2)
#define                                 U4RXR2_bit          _BIT_ACCESS(RPINR6_7,2)
// RPINR6_7<U4RXR3>
extern volatile __bit                   U4RXR3              __at(0x716B);	// @ (0xE2D * 8 + 3)
#define                                 U4RXR3_bit          _BIT_ACCESS(RPINR6_7,3)
// RPINR6_7<U4TXR0>
extern volatile __bit                   U4TXR0              __at(0x716C);	// @ (0xE2D * 8 + 4)
#define                                 U4TXR0_bit          _BIT_ACCESS(RPINR6_7,4)
// RPINR6_7<U4TXR1>
extern volatile __bit                   U4TXR1              __at(0x716D);	// @ (0xE2D * 8 + 5)
#define                                 U4TXR1_bit          _BIT_ACCESS(RPINR6_7,5)
// RPINR6_7<U4TXR2>
extern volatile __bit                   U4TXR2              __at(0x716E);	// @ (0xE2D * 8 + 6)
#define                                 U4TXR2_bit          _BIT_ACCESS(RPINR6_7,6)
// RPINR6_7<U4TXR3>
extern volatile __bit                   U4TXR3              __at(0x716F);	// @ (0xE2D * 8 + 7)
#define                                 U4TXR3_bit          _BIT_ACCESS(RPINR6_7,7)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0x7E39);	// @ (0xFC7 * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// SSP2STAT<UA2>
extern volatile __bit                   UA2                 __at(0x78D1);	// @ (0xF1A * 8 + 1)
#define                                 UA2_bit             _BIT_ACCESS(SSP2STAT,1)
// PMD1<UART1MD>
extern volatile __bit                   UART1MD             __at(0x779A);	// @ (0xEF3 * 8 + 2)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD1,2)
// PMD1<UART2MD>
extern volatile __bit                   UART2MD             __at(0x779B);	// @ (0xEF3 * 8 + 3)
#define                                 UART2MD_bit         _BIT_ACCESS(PMD1,3)
// PMD1<UART3MD>
extern volatile __bit                   UART3MD             __at(0x779C);	// @ (0xEF3 * 8 + 4)
#define                                 UART3MD_bit         _BIT_ACCESS(PMD1,4)
// PMD1<UART4MD>
extern volatile __bit                   UART4MD             __at(0x779D);	// @ (0xEF3 * 8 + 5)
#define                                 UART4MD_bit         _BIT_ACCESS(PMD1,5)
// UIE<UERRIE>
extern volatile __bit                   UERRIE              __at(0x7081);	// @ (0xE10 * 8 + 1)
#define                                 UERRIE_bit          _BIT_ACCESS(UIE,1)
// UIR<UERRIF>
extern volatile __bit                   UERRIF              __at(0x7BC1);	// @ (0xF78 * 8 + 1)
#define                                 UERRIF_bit          _BIT_ACCESS(UIR,1)
// DSCONL<ULPWDIS>
extern volatile __bit                   ULPWDIS             __at(0x7942);	// @ (0xF28 * 8 + 2)
#define                                 ULPWDIS_bit         _BIT_ACCESS(DSCONL,2)
// PORTA<ULPWUIN>
extern volatile __bit                   ULPWUIN             __at(0x7C00);	// @ (0xF80 * 8 + 0)
#define                                 ULPWUIN_bit         _BIT_ACCESS(PORTA,0)
// UCFG<UOEMON>
extern volatile __bit                   UOEMON              __at(0x708E);	// @ (0xE11 * 8 + 6)
#define                                 UOEMON_bit          _BIT_ACCESS(UCFG,6)
// UCFG<UPP0>
extern volatile __bit                   UPP0                __at(0x7088);	// @ (0xE11 * 8 + 0)
#define                                 UPP0_bit            _BIT_ACCESS(UCFG,0)
// UCFG<UPP1>
extern volatile __bit                   UPP1                __at(0x7089);	// @ (0xE11 * 8 + 1)
#define                                 UPP1_bit            _BIT_ACCESS(UCFG,1)
// UCFG<UPUEN>
extern volatile __bit                   UPUEN               __at(0x708C);	// @ (0xE11 * 8 + 4)
#define                                 UPUEN_bit           _BIT_ACCESS(UCFG,4)
// UIE<URSTIE>
extern volatile __bit                   URSTIE              __at(0x7080);	// @ (0xE10 * 8 + 0)
#define                                 URSTIE_bit          _BIT_ACCESS(UIE,0)
// UIR<URSTIF>
extern volatile __bit                   URSTIF              __at(0x7BC0);	// @ (0xF78 * 8 + 0)
#define                                 URSTIF_bit          _BIT_ACCESS(UIR,0)
// ODCON1<USART1OD>
extern volatile __bit                   USART1OD            __at(0x775A);	// @ (0xEEB * 8 + 2)
#define                                 USART1OD_bit        _BIT_ACCESS(ODCON1,2)
// ODCON1<USART2OD>
extern volatile __bit                   USART2OD            __at(0x775B);	// @ (0xEEB * 8 + 3)
#define                                 USART2OD_bit        _BIT_ACCESS(ODCON1,3)
// ODCON1<USART3OD>
extern volatile __bit                   USART3OD            __at(0x775C);	// @ (0xEEB * 8 + 4)
#define                                 USART3OD_bit        _BIT_ACCESS(ODCON1,4)
// ODCON1<USART4OD>
extern volatile __bit                   USART4OD            __at(0x775D);	// @ (0xEEB * 8 + 5)
#define                                 USART4OD_bit        _BIT_ACCESS(ODCON1,5)
// UCON<USBEN>
extern volatile __bit                   USBEN               __at(0x7BAB);	// @ (0xF75 * 8 + 3)
#define                                 USBEN_bit           _BIT_ACCESS(UCON,3)
// PIE2<USBIE>
extern volatile __bit                   USBIE               __at(0x7D04);	// @ (0xFA0 * 8 + 4)
#define                                 USBIE_bit           _BIT_ACCESS(PIE2,4)
// PIR2<USBIF>
extern volatile __bit                   USBIF               __at(0x7D0C);	// @ (0xFA1 * 8 + 4)
#define                                 USBIF_bit           _BIT_ACCESS(PIR2,4)
// IPR2<USBIP>
extern volatile __bit                   USBIP               __at(0x7D14);	// @ (0xFA2 * 8 + 4)
#define                                 USBIP_bit           _BIT_ACCESS(IPR2,4)
// PMD4<USBMD>
extern volatile __bit                   USBMD               __at(0x7784);	// @ (0xEF0 * 8 + 4)
#define                                 USBMD_bit           _BIT_ACCESS(PMD4,4)
// UCFG<UTEYE>
extern volatile __bit                   UTEYE               __at(0x708F);	// @ (0xE11 * 8 + 7)
#define                                 UTEYE_bit           _BIT_ACCESS(UCFG,7)
// UCFG<UTRDIS>
extern volatile __bit                   UTRDIS              __at(0x708B);	// @ (0xE11 * 8 + 3)
#define                                 UTRDIS_bit          _BIT_ACCESS(UCFG,3)
// RCON3<VBAT>
extern volatile __bit                   VBAT                __at(0x7BE0);	// @ (0xF7C * 8 + 0)
#define                                 VBAT_bit            _BIT_ACCESS(RCON3,0)
// ANCFG<VBG2EN>
extern volatile __bit                   VBG2EN              __at(0x7809);	// @ (0xF01 * 8 + 1)
#define                                 VBG2EN_bit          _BIT_ACCESS(ANCFG,1)
// ANCFG<VBG6EN>
extern volatile __bit                   VBG6EN              __at(0x780A);	// @ (0xF01 * 8 + 2)
#define                                 VBG6EN_bit          _BIT_ACCESS(ANCFG,2)
// ANCFG<VBGEN>
extern volatile __bit                   VBGEN               __at(0x7808);	// @ (0xF01 * 8 + 0)
#define                                 VBGEN_bit           _BIT_ACCESS(ANCFG,0)
// RCON3<VBPOR>
extern volatile __bit                   VBPOR               __at(0x7BE1);	// @ (0xF7C * 8 + 1)
#define                                 VBPOR_bit           _BIT_ACCESS(RCON3,1)
// RCON3<VDDBOR>
extern volatile __bit                   VDDBOR              __at(0x7BE3);	// @ (0xF7C * 8 + 3)
#define                                 VDDBOR_bit          _BIT_ACCESS(RCON3,3)
// RCON3<VDDPOR>
extern volatile __bit                   VDDPOR              __at(0x7BE2);	// @ (0xF7C * 8 + 2)
#define                                 VDDPOR_bit          _BIT_ACCESS(RCON3,2)
// HLVDCON<VDIRMAG>
extern volatile __bit                   VDIRMAG             __at(0x7D47);	// @ (0xFA8 * 8 + 7)
#define                                 VDIRMAG_bit         _BIT_ACCESS(HLVDCON,7)
// LCDREF<VLCD1PE>
extern volatile __bit                   VLCD1PE             __at(0x76B8);	// @ (0xED7 * 8 + 0)
#define                                 VLCD1PE_bit         _BIT_ACCESS(LCDREF,0)
// LCDREF<VLCD2PE>
extern volatile __bit                   VLCD2PE             __at(0x76B9);	// @ (0xED7 * 8 + 1)
#define                                 VLCD2PE_bit         _BIT_ACCESS(LCDREF,1)
// LCDREF<VLCD3PE>
extern volatile __bit                   VLCD3PE             __at(0x76BA);	// @ (0xED7 * 8 + 2)
#define                                 VLCD3PE_bit         _BIT_ACCESS(LCDREF,2)
// LCDPS<WA>
extern volatile __bit                   WA                  __at(0x76D4);	// @ (0xEDA * 8 + 4)
#define                                 WA_bit              _BIT_ACCESS(LCDPS,4)
// MEMCON<WAIT0>
extern volatile __bit                   WAIT0               __at(0x771C);	// @ (0xEE3 * 8 + 4)
#define                                 WAIT0_bit           _BIT_ACCESS(MEMCON,4)
// MEMCON<WAIT1>
extern volatile __bit                   WAIT1               __at(0x771D);	// @ (0xEE3 * 8 + 5)
#define                                 WAIT1_bit           _BIT_ACCESS(MEMCON,5)
// RTCVALH<WAITB0>
extern volatile __bit                   WAITB0              __at(0x7AEE);	// @ (0xF5D * 8 + 6)
#define                                 WAITB0_bit          _BIT_ACCESS(RTCVALH,6)
// RTCVALH<WAITB1>
extern volatile __bit                   WAITB1              __at(0x7AEF);	// @ (0xF5D * 8 + 7)
#define                                 WAITB1_bit          _BIT_ACCESS(RTCVALH,7)
// RTCVALH<WAITE0>
extern volatile __bit                   WAITE0              __at(0x7AE8);	// @ (0xF5D * 8 + 0)
#define                                 WAITE0_bit          _BIT_ACCESS(RTCVALH,0)
// RTCVALH<WAITE1>
extern volatile __bit                   WAITE1              __at(0x7AE9);	// @ (0xF5D * 8 + 1)
#define                                 WAITE1_bit          _BIT_ACCESS(RTCVALH,1)
// RTCVALH<WAITM0>
extern volatile __bit                   WAITM0              __at(0x7AEA);	// @ (0xF5D * 8 + 2)
#define                                 WAITM0_bit          _BIT_ACCESS(RTCVALH,2)
// RTCVALH<WAITM1>
extern volatile __bit                   WAITM1              __at(0x7AEB);	// @ (0xF5D * 8 + 3)
#define                                 WAITM1_bit          _BIT_ACCESS(RTCVALH,3)
// RTCVALH<WAITM2>
extern volatile __bit                   WAITM2              __at(0x7AEC);	// @ (0xF5D * 8 + 4)
#define                                 WAITM2_bit          _BIT_ACCESS(RTCVALH,4)
// RTCVALH<WAITM3>
extern volatile __bit                   WAITM3              __at(0x7AED);	// @ (0xF5D * 8 + 5)
#define                                 WAITM3_bit          _BIT_ACCESS(RTCVALH,5)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0x7E37);	// @ (0xFC6 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// SSP2CON1<WCOL2>
extern volatile __bit                   WCOL2               __at(0x78CF);	// @ (0xF19 * 8 + 7)
#define                                 WCOL2_bit           _BIT_ACCESS(SSP2CON1,7)
// LCDCON<WERR>
extern volatile __bit                   WERR                __at(0x76CD);	// @ (0xED9 * 8 + 5)
#define                                 WERR_bit            _BIT_ACCESS(LCDCON,5)
// LCDPS<WFT>
extern volatile __bit                   WFT                 __at(0x76D7);	// @ (0xEDA * 8 + 7)
#define                                 WFT_bit             _BIT_ACCESS(LCDPS,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0x7B10);	// @ (0xF62 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0x7B11);	// @ (0xF62 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0x7B12);	// @ (0xF62 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0x7B13);	// @ (0xF62 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0x7B14);	// @ (0xF62 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0x7B15);	// @ (0xF62 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0x7B16);	// @ (0xF62 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0x7B17);	// @ (0xF62 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// EECON1<WR>
extern volatile __bit                   WR                  __at(0x7BF9);	// @ (0xF7F * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(EECON1,1)
// PORTE<WRE>
extern volatile __bit                   WRE                 __at(0x7C21);	// @ (0xF84 * 8 + 1)
#define                                 WRE_bit             _BIT_ACCESS(PORTE,1)
// EECON1<WREN>
extern volatile __bit                   WREN                __at(0x7BFA);	// @ (0xF7F * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(EECON1,2)
// EECON1<WRERR>
extern volatile __bit                   WRERR               __at(0x7BFB);	// @ (0xF7F * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(EECON1,3)
// BAUDCON1<WUE1>
extern volatile __bit                   WUE1                __at(0x7B39);	// @ (0xF67 * 8 + 1)
#define                                 WUE1_bit            _BIT_ACCESS(BAUDCON1,1)
// BAUDCON2<WUE2>
extern volatile __bit                   WUE2                __at(0x7989);	// @ (0xF31 * 8 + 1)
#define                                 WUE2_bit            _BIT_ACCESS(BAUDCON2,1)
// BAUDCON3<WUE3>
extern volatile __bit                   WUE3                __at(0x7969);	// @ (0xF2D * 8 + 1)
#define                                 WUE3_bit            _BIT_ACCESS(BAUDCON3,1)
// BAUDCON4<WUE4>
extern volatile __bit                   WUE4                __at(0x77E9);	// @ (0xEFD * 8 + 1)
#define                                 WUE4_bit            _BIT_ACCESS(BAUDCON4,1)
// EECON1<WWPROG>
extern volatile __bit                   WWPROG              __at(0x7BFD);	// @ (0xF7F * 8 + 5)
#define                                 WWPROG_bit          _BIT_ACCESS(EECON1,5)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x7EC2);	// @ (0xFD8 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<nADDRESS2>
extern volatile __bit                   nADDRESS2           __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 nADDRESS2_bit       _BIT_ACCESS(SSP2STAT,5)
// RCON<nBOR>
extern volatile __bit                   nBOR                __at(0x7E80);	// @ (0xFD0 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(RCON,0)
// RCON<nCM>
extern volatile __bit                   nCM                 __at(0x7E85);	// @ (0xFD0 * 8 + 5)
#define                                 nCM_bit             _BIT_ACCESS(RCON,5)
// RCON<nPD>
extern volatile __bit                   nPD                 __at(0x7E82);	// @ (0xFD0 * 8 + 2)
#define                                 nPD_bit             _BIT_ACCESS(RCON,2)
// RCON<nPOR>
extern volatile __bit                   nPOR                __at(0x7E81);	// @ (0xFD0 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(RCON,1)
// INTCON2<nRBPU>
extern volatile __bit                   nRBPU               __at(0x7F8F);	// @ (0xFF1 * 8 + 7)
#define                                 nRBPU_bit           _BIT_ACCESS(INTCON2,7)
// RCON<nRI>
extern volatile __bit                   nRI                 __at(0x7E84);	// @ (0xFD0 * 8 + 4)
#define                                 nRI_bit             _BIT_ACCESS(RCON,4)
// T1GCON<nT1DONE>
extern volatile __bit                   nT1DONE             __at(0x7D53);	// @ (0xFAA * 8 + 3)
#define                                 nT1DONE_bit         _BIT_ACCESS(T1GCON,3)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x7E6A);	// @ (0xFCD * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// T3GCON<nT3DONE>
extern volatile __bit                   nT3DONE             __at(0x7D83);	// @ (0xFB0 * 8 + 3)
#define                                 nT3DONE_bit         _BIT_ACCESS(T3GCON,3)
// T3CON<nT3SYNC>
extern volatile __bit                   nT3SYNC             __at(0x7D8A);	// @ (0xFB1 * 8 + 2)
#define                                 nT3SYNC_bit         _BIT_ACCESS(T3CON,2)
// T5GCON<nT5DONE>
extern volatile __bit                   nT5DONE             __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 nT5DONE_bit         _BIT_ACCESS(T5GCON,3)
// T5CON<nT5SYNC>
extern volatile __bit                   nT5SYNC             __at(0x78A2);	// @ (0xF14 * 8 + 2)
#define                                 nT5SYNC_bit         _BIT_ACCESS(T5CON,2)
// RCON<nTO>
extern volatile __bit                   nTO                 __at(0x7E83);	// @ (0xFD0 * 8 + 3)
#define                                 nTO_bit             _BIT_ACCESS(RCON,3)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<nWRITE2>
extern volatile __bit                   nWRITE2             __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 nWRITE2_bit         _BIT_ACCESS(SSP2STAT,2)

#endif // _PIC18F87J94_H_
