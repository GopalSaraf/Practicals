// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC16F18857_H_
#define _PIC16F18857_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC16F18857
 */
#ifndef _XC_H_
#warning Header file pic16f18857.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :6;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
        unsigned BSR5                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x6
#define _BSR_BSR_LENGTH                                     0x6
#define _BSR_BSR_MASK                                       0x3F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10
#define _BSR_BSR5_POSN                                      0x5
#define _BSR_BSR5_POSITION                                  0x5
#define _BSR_BSR5_SIZE                                      0x1
#define _BSR_BSR5_LENGTH                                    0x1
#define _BSR_BSR5_MASK                                      0x20

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTEDG                 :1;
        unsigned                        :5;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_INTEDG_POSN                                 0x0
#define _INTCON_INTEDG_POSITION                             0x0
#define _INTCON_INTEDG_SIZE                                 0x1
#define _INTCON_INTEDG_LENGTH                               0x1
#define _INTCON_INTEDG_MASK                                 0x1
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0x00D);
#ifndef _LIB_BUILD
asm("PORTB equ 0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0x00D);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0x010);
#ifndef _LIB_BUILD
asm("PORTE equ 010h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned RE3                    :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0x010);
// bitfield macros
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x011);
#ifndef _LIB_BUILD
asm("TRISA equ 011h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x011);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0x012);
#ifndef _LIB_BUILD
asm("TRISB equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0x012);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x013);
#ifndef _LIB_BUILD
asm("TRISC equ 013h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x013);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x016);
#ifndef _LIB_BUILD
asm("LATA equ 016h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x016);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0x017);
#ifndef _LIB_BUILD
asm("LATB equ 017h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0x017);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x018);
#ifndef _LIB_BUILD
asm("LATC equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x018);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x01C);
#ifndef _LIB_BUILD
asm("TMR0L equ 01Ch");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x01C);
#ifndef _LIB_BUILD
asm("TMR0 equ 01Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x01C);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x01C);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x01D);
#ifndef _LIB_BUILD
asm("TMR0H equ 01Dh");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x01D);
#ifndef _LIB_BUILD
asm("PR0 equ 01Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x01D);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x01D);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x01E);
#ifndef _LIB_BUILD
asm("T0CON0 equ 01Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0OUTPS                :4;
        unsigned T016BIT                :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x01E);
// bitfield macros
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x01F);
#ifndef _LIB_BUILD
asm("T0CON1 equ 01Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKPS                 :4;
        unsigned T0ASYNC                :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
    struct {
        unsigned T0PS0                  :1;
        unsigned T0PS1                  :1;
        unsigned T0PS2                  :1;
        unsigned T0PS3                  :1;
    };
    struct {
        unsigned T0PS                   :4;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x01F);
// bitfield macros
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80
#define _T0CON1_T0PS0_POSN                                  0x0
#define _T0CON1_T0PS0_POSITION                              0x0
#define _T0CON1_T0PS0_SIZE                                  0x1
#define _T0CON1_T0PS0_LENGTH                                0x1
#define _T0CON1_T0PS0_MASK                                  0x1
#define _T0CON1_T0PS1_POSN                                  0x1
#define _T0CON1_T0PS1_POSITION                              0x1
#define _T0CON1_T0PS1_SIZE                                  0x1
#define _T0CON1_T0PS1_LENGTH                                0x1
#define _T0CON1_T0PS1_MASK                                  0x2
#define _T0CON1_T0PS2_POSN                                  0x2
#define _T0CON1_T0PS2_POSITION                              0x2
#define _T0CON1_T0PS2_SIZE                                  0x1
#define _T0CON1_T0PS2_LENGTH                                0x1
#define _T0CON1_T0PS2_MASK                                  0x4
#define _T0CON1_T0PS3_POSN                                  0x3
#define _T0CON1_T0PS3_POSITION                              0x3
#define _T0CON1_T0PS3_SIZE                                  0x1
#define _T0CON1_T0PS3_LENGTH                                0x1
#define _T0CON1_T0PS3_MASK                                  0x8
#define _T0CON1_T0PS_POSN                                   0x0
#define _T0CON1_T0PS_POSITION                               0x0
#define _T0CON1_T0PS_SIZE                                   0x4
#define _T0CON1_T0PS_LENGTH                                 0x4
#define _T0CON1_T0PS_MASK                                   0xF

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x08C);
#ifndef _LIB_BUILD
asm("ADRES equ 08Ch");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x08C);
#ifndef _LIB_BUILD
asm("ADRESL equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESL                 :8;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x08C);
// bitfield macros
#define _ADRESL_ADRESL_POSN                                 0x0
#define _ADRESL_ADRESL_POSITION                             0x0
#define _ADRESL_ADRESL_SIZE                                 0x8
#define _ADRESL_ADRESL_LENGTH                               0x8
#define _ADRESL_ADRESL_MASK                                 0xFF

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x08D);
#ifndef _LIB_BUILD
asm("ADRESH equ 08Dh");
#endif

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0x08E);
#ifndef _LIB_BUILD
asm("ADPREV equ 08Eh");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0x08E);
#ifndef _LIB_BUILD
asm("ADPREVL equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREVL                :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0x08E);
// bitfield macros
#define _ADPREVL_ADPREVL_POSN                               0x0
#define _ADPREVL_ADPREVL_POSITION                           0x0
#define _ADPREVL_ADPREVL_SIZE                               0x8
#define _ADPREVL_ADPREVL_LENGTH                             0x8
#define _ADPREVL_ADPREVL_MASK                               0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0x08F);
#ifndef _LIB_BUILD
asm("ADPREVH equ 08Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREVH                :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0x08F);
// bitfield macros
#define _ADPREVH_ADPREVH_POSN                               0x0
#define _ADPREVH_ADPREVH_POSITION                           0x0
#define _ADPREVH_ADPREVH_SIZE                               0x8
#define _ADPREVH_ADPREVH_LENGTH                             0x8
#define _ADPREVH_ADPREVH_MASK                               0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80

// Register: ADACC
#define ADACC ADACC
extern volatile unsigned short          ADACC               __at(0x090);
#ifndef _LIB_BUILD
asm("ADACC equ 090h");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0x090);
#ifndef _LIB_BUILD
asm("ADACCL equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACCL                 :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0x090);
// bitfield macros
#define _ADACCL_ADACCL_POSN                                 0x0
#define _ADACCL_ADACCL_POSITION                             0x0
#define _ADACCL_ADACCL_SIZE                                 0x8
#define _ADACCL_ADACCL_LENGTH                               0x8
#define _ADACCL_ADACCL_MASK                                 0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0x091);
#ifndef _LIB_BUILD
asm("ADACCH equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACCH                 :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0x091);
// bitfield macros
#define _ADACCH_ADACCH_POSN                                 0x0
#define _ADACCH_ADACCH_POSITION                             0x0
#define _ADACCH_ADACCH_SIZE                                 0x8
#define _ADACCH_ADACCH_LENGTH                               0x8
#define _ADACCH_ADACCH_MASK                                 0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x093);
#ifndef _LIB_BUILD
asm("ADCON0 equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :2;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned DONE                   :1;
        unsigned                        :1;
        unsigned ADFRM                  :2;
    };
    struct {
        unsigned nDONE                  :1;
    };
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned ADFM0                  :1;
    };
    struct {
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned ADFRM0                 :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x093);
// bitfield macros
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x2
#define _ADCON0_ADFM_LENGTH                                 0x2
#define _ADCON0_ADFM_MASK                                   0xC
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_ADFRM_POSN                                  0x2
#define _ADCON0_ADFRM_POSITION                              0x2
#define _ADCON0_ADFRM_SIZE                                  0x2
#define _ADCON0_ADFRM_LENGTH                                0x2
#define _ADCON0_ADFRM_MASK                                  0xC
#define _ADCON0_nDONE_POSN                                  0x0
#define _ADCON0_nDONE_POSITION                              0x0
#define _ADCON0_nDONE_SIZE                                  0x1
#define _ADCON0_nDONE_LENGTH                                0x1
#define _ADCON0_nDONE_MASK                                  0x1
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_ADFM0_POSN                                  0x2
#define _ADCON0_ADFM0_POSITION                              0x2
#define _ADCON0_ADFM0_SIZE                                  0x1
#define _ADCON0_ADFM0_LENGTH                                0x1
#define _ADCON0_ADFM0_MASK                                  0x4
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1
#define _ADCON0_ADFRM0_POSN                                 0x2
#define _ADCON0_ADFRM0_POSITION                             0x2
#define _ADCON0_ADFRM0_SIZE                                 0x1
#define _ADCON0_ADFRM0_LENGTH                               0x1
#define _ADCON0_ADFRM0_MASK                                 0x4

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x094);
#ifndef _LIB_BUILD
asm("ADCON1 equ 094h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADDSEN                 :1;
        unsigned                        :4;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x094);
// bitfield macros
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x095);
#ifndef _LIB_BUILD
asm("ADCON2 equ 095h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADMD                   :3;
        unsigned ADACLR                 :1;
        unsigned ADCRS                  :3;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned                        :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x095);
// bitfield macros
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0x096);
#ifndef _LIB_BUILD
asm("ADCON3 equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned                        :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
    struct {
        unsigned ADTMD                  :3;
        unsigned ADSOI                  :1;
        unsigned ADCALC                 :3;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0x096);
// bitfield macros
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0x097);
#ifndef _LIB_BUILD
asm("ADSTAT equ 097h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADSTAT                 :3;
        unsigned ADMACT                 :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0x097);
// bitfield macros
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_ADMACT_POSN                                 0x3
#define _ADSTAT_ADMACT_POSITION                             0x3
#define _ADSTAT_ADMACT_SIZE                                 0x1
#define _ADSTAT_ADMACT_LENGTH                               0x1
#define _ADSTAT_ADMACT_MASK                                 0x8
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0x098);
#ifndef _LIB_BUILD
asm("ADCLK equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCCS                  :6;
    };
    struct {
        unsigned ADCCS0                 :1;
        unsigned ADCCS1                 :1;
        unsigned ADCCS2                 :1;
        unsigned ADCCS3                 :1;
        unsigned ADCCS4                 :1;
        unsigned ADCCS5                 :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0x098);
// bitfield macros
#define _ADCLK_ADCCS_POSN                                   0x0
#define _ADCLK_ADCCS_POSITION                               0x0
#define _ADCLK_ADCCS_SIZE                                   0x6
#define _ADCLK_ADCCS_LENGTH                                 0x6
#define _ADCLK_ADCCS_MASK                                   0x3F
#define _ADCLK_ADCCS0_POSN                                  0x0
#define _ADCLK_ADCCS0_POSITION                              0x0
#define _ADCLK_ADCCS0_SIZE                                  0x1
#define _ADCLK_ADCCS0_LENGTH                                0x1
#define _ADCLK_ADCCS0_MASK                                  0x1
#define _ADCLK_ADCCS1_POSN                                  0x1
#define _ADCLK_ADCCS1_POSITION                              0x1
#define _ADCLK_ADCCS1_SIZE                                  0x1
#define _ADCLK_ADCCS1_LENGTH                                0x1
#define _ADCLK_ADCCS1_MASK                                  0x2
#define _ADCLK_ADCCS2_POSN                                  0x2
#define _ADCLK_ADCCS2_POSITION                              0x2
#define _ADCLK_ADCCS2_SIZE                                  0x1
#define _ADCLK_ADCCS2_LENGTH                                0x1
#define _ADCLK_ADCCS2_MASK                                  0x4
#define _ADCLK_ADCCS3_POSN                                  0x3
#define _ADCLK_ADCCS3_POSITION                              0x3
#define _ADCLK_ADCCS3_SIZE                                  0x1
#define _ADCLK_ADCCS3_LENGTH                                0x1
#define _ADCLK_ADCCS3_MASK                                  0x8
#define _ADCLK_ADCCS4_POSN                                  0x4
#define _ADCLK_ADCCS4_POSITION                              0x4
#define _ADCLK_ADCCS4_SIZE                                  0x1
#define _ADCLK_ADCCS4_LENGTH                                0x1
#define _ADCLK_ADCCS4_MASK                                  0x10
#define _ADCLK_ADCCS5_POSN                                  0x5
#define _ADCLK_ADCCS5_POSITION                              0x5
#define _ADCLK_ADCCS5_SIZE                                  0x1
#define _ADCLK_ADCCS5_LENGTH                                0x1
#define _ADCLK_ADCCS5_MASK                                  0x20

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x099);
#ifndef _LIB_BUILD
asm("ADACT equ 099h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACT                  :5;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x099);
// bitfield macros
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x5
#define _ADACT_ADACT_LENGTH                                 0x5
#define _ADACT_ADACT_MASK                                   0x1F
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0x09A);
#ifndef _LIB_BUILD
asm("ADREF equ 09Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREF                 :2;
        unsigned                        :2;
        unsigned ADNREF                 :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0x09A);
// bitfield macros
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x2
#define _ADREF_ADPREF_LENGTH                                0x2
#define _ADREF_ADPREF_MASK                                  0x3
#define _ADREF_ADNREF_POSN                                  0x4
#define _ADREF_ADNREF_POSITION                              0x4
#define _ADREF_ADNREF_SIZE                                  0x1
#define _ADREF_ADNREF_LENGTH                                0x1
#define _ADREF_ADNREF_MASK                                  0x10
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0x09B);
#ifndef _LIB_BUILD
asm("ADCAP equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCAP                  :5;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0x09B);
// bitfield macros
#define _ADCAP_ADCAP_POSN                                   0x0
#define _ADCAP_ADCAP_POSITION                               0x0
#define _ADCAP_ADCAP_SIZE                                   0x5
#define _ADCAP_ADCAP_LENGTH                                 0x5
#define _ADCAP_ADCAP_MASK                                   0x1F
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned char           ADPRE               __at(0x09C);
#ifndef _LIB_BUILD
asm("ADPRE equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPREbits_t;
extern volatile ADPREbits_t ADPREbits __at(0x09C);
// bitfield macros
#define _ADPRE_ADPRE_POSN                                   0x0
#define _ADPRE_ADPRE_POSITION                               0x0
#define _ADPRE_ADPRE_SIZE                                   0x8
#define _ADPRE_ADPRE_LENGTH                                 0x8
#define _ADPRE_ADPRE_MASK                                   0xFF
#define _ADPRE_ADPRE0_POSN                                  0x0
#define _ADPRE_ADPRE0_POSITION                              0x0
#define _ADPRE_ADPRE0_SIZE                                  0x1
#define _ADPRE_ADPRE0_LENGTH                                0x1
#define _ADPRE_ADPRE0_MASK                                  0x1
#define _ADPRE_ADPRE1_POSN                                  0x1
#define _ADPRE_ADPRE1_POSITION                              0x1
#define _ADPRE_ADPRE1_SIZE                                  0x1
#define _ADPRE_ADPRE1_LENGTH                                0x1
#define _ADPRE_ADPRE1_MASK                                  0x2
#define _ADPRE_ADPRE2_POSN                                  0x2
#define _ADPRE_ADPRE2_POSITION                              0x2
#define _ADPRE_ADPRE2_SIZE                                  0x1
#define _ADPRE_ADPRE2_LENGTH                                0x1
#define _ADPRE_ADPRE2_MASK                                  0x4
#define _ADPRE_ADPRE3_POSN                                  0x3
#define _ADPRE_ADPRE3_POSITION                              0x3
#define _ADPRE_ADPRE3_SIZE                                  0x1
#define _ADPRE_ADPRE3_LENGTH                                0x1
#define _ADPRE_ADPRE3_MASK                                  0x8
#define _ADPRE_ADPRE4_POSN                                  0x4
#define _ADPRE_ADPRE4_POSITION                              0x4
#define _ADPRE_ADPRE4_SIZE                                  0x1
#define _ADPRE_ADPRE4_LENGTH                                0x1
#define _ADPRE_ADPRE4_MASK                                  0x10
#define _ADPRE_ADPRE5_POSN                                  0x5
#define _ADPRE_ADPRE5_POSITION                              0x5
#define _ADPRE_ADPRE5_SIZE                                  0x1
#define _ADPRE_ADPRE5_LENGTH                                0x1
#define _ADPRE_ADPRE5_MASK                                  0x20
#define _ADPRE_ADPRE6_POSN                                  0x6
#define _ADPRE_ADPRE6_POSITION                              0x6
#define _ADPRE_ADPRE6_SIZE                                  0x1
#define _ADPRE_ADPRE6_LENGTH                                0x1
#define _ADPRE_ADPRE6_MASK                                  0x40
#define _ADPRE_ADPRE7_POSN                                  0x7
#define _ADPRE_ADPRE7_POSITION                              0x7
#define _ADPRE_ADPRE7_SIZE                                  0x1
#define _ADPRE_ADPRE7_LENGTH                                0x1
#define _ADPRE_ADPRE7_MASK                                  0x80

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned char           ADACQ               __at(0x09D);
#ifndef _LIB_BUILD
asm("ADACQ equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
} ADACQbits_t;
extern volatile ADACQbits_t ADACQbits __at(0x09D);
// bitfield macros
#define _ADACQ_ADACQ_POSN                                   0x0
#define _ADACQ_ADACQ_POSITION                               0x0
#define _ADACQ_ADACQ_SIZE                                   0x8
#define _ADACQ_ADACQ_LENGTH                                 0x8
#define _ADACQ_ADACQ_MASK                                   0xFF
#define _ADACQ_ADACQ0_POSN                                  0x0
#define _ADACQ_ADACQ0_POSITION                              0x0
#define _ADACQ_ADACQ0_SIZE                                  0x1
#define _ADACQ_ADACQ0_LENGTH                                0x1
#define _ADACQ_ADACQ0_MASK                                  0x1
#define _ADACQ_ADACQ1_POSN                                  0x1
#define _ADACQ_ADACQ1_POSITION                              0x1
#define _ADACQ_ADACQ1_SIZE                                  0x1
#define _ADACQ_ADACQ1_LENGTH                                0x1
#define _ADACQ_ADACQ1_MASK                                  0x2
#define _ADACQ_ADACQ2_POSN                                  0x2
#define _ADACQ_ADACQ2_POSITION                              0x2
#define _ADACQ_ADACQ2_SIZE                                  0x1
#define _ADACQ_ADACQ2_LENGTH                                0x1
#define _ADACQ_ADACQ2_MASK                                  0x4
#define _ADACQ_ADACQ3_POSN                                  0x3
#define _ADACQ_ADACQ3_POSITION                              0x3
#define _ADACQ_ADACQ3_SIZE                                  0x1
#define _ADACQ_ADACQ3_LENGTH                                0x1
#define _ADACQ_ADACQ3_MASK                                  0x8
#define _ADACQ_ADACQ4_POSN                                  0x4
#define _ADACQ_ADACQ4_POSITION                              0x4
#define _ADACQ_ADACQ4_SIZE                                  0x1
#define _ADACQ_ADACQ4_LENGTH                                0x1
#define _ADACQ_ADACQ4_MASK                                  0x10
#define _ADACQ_ADACQ5_POSN                                  0x5
#define _ADACQ_ADACQ5_POSITION                              0x5
#define _ADACQ_ADACQ5_SIZE                                  0x1
#define _ADACQ_ADACQ5_LENGTH                                0x1
#define _ADACQ_ADACQ5_MASK                                  0x20
#define _ADACQ_ADACQ6_POSN                                  0x6
#define _ADACQ_ADACQ6_POSITION                              0x6
#define _ADACQ_ADACQ6_SIZE                                  0x1
#define _ADACQ_ADACQ6_LENGTH                                0x1
#define _ADACQ_ADACQ6_MASK                                  0x40
#define _ADACQ_ADACQ7_POSN                                  0x7
#define _ADACQ_ADACQ7_POSITION                              0x7
#define _ADACQ_ADACQ7_SIZE                                  0x1
#define _ADACQ_ADACQ7_LENGTH                                0x1
#define _ADACQ_ADACQ7_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0x09E);
#ifndef _LIB_BUILD
asm("ADPCH equ 09Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPCH                  :6;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0x09E);
// bitfield macros
#define _ADPCH_ADPCH_POSN                                   0x0
#define _ADPCH_ADPCH_POSITION                               0x0
#define _ADPCH_ADPCH_SIZE                                   0x6
#define _ADPCH_ADPCH_LENGTH                                 0x6
#define _ADPCH_ADPCH_MASK                                   0x3F
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0x10C);
#ifndef _LIB_BUILD
asm("ADCNT equ 010Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0x10C);
// bitfield macros
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0x10D);
#ifndef _LIB_BUILD
asm("ADRPT equ 010Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0x10D);
// bitfield macros
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0x10E);
#ifndef _LIB_BUILD
asm("ADLTH equ 010Eh");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0x10E);
#ifndef _LIB_BUILD
asm("ADLTHL equ 010Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADLTHL                 :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0x10E);
// bitfield macros
#define _ADLTHL_ADLTHL_POSN                                 0x0
#define _ADLTHL_ADLTHL_POSITION                             0x0
#define _ADLTHL_ADLTHL_SIZE                                 0x8
#define _ADLTHL_ADLTHL_LENGTH                               0x8
#define _ADLTHL_ADLTHL_MASK                                 0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0x10F);
#ifndef _LIB_BUILD
asm("ADLTHH equ 010Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADLTHH                 :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0x10F);
// bitfield macros
#define _ADLTHH_ADLTHH_POSN                                 0x0
#define _ADLTHH_ADLTHH_POSITION                             0x0
#define _ADLTHH_ADLTHH_SIZE                                 0x8
#define _ADLTHH_ADLTHH_LENGTH                               0x8
#define _ADLTHH_ADLTHH_MASK                                 0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0x110);
#ifndef _LIB_BUILD
asm("ADUTH equ 0110h");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0x110);
#ifndef _LIB_BUILD
asm("ADUTHL equ 0110h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADUTHL                 :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0x110);
// bitfield macros
#define _ADUTHL_ADUTHL_POSN                                 0x0
#define _ADUTHL_ADUTHL_POSITION                             0x0
#define _ADUTHL_ADUTHL_SIZE                                 0x8
#define _ADUTHL_ADUTHL_LENGTH                               0x8
#define _ADUTHL_ADUTHL_MASK                                 0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0x111);
#ifndef _LIB_BUILD
asm("ADUTHH equ 0111h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADUTHH                 :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0x111);
// bitfield macros
#define _ADUTHH_ADUTHH_POSN                                 0x0
#define _ADUTHH_ADUTHH_POSITION                             0x0
#define _ADUTHH_ADUTHH_SIZE                                 0x8
#define _ADUTHH_ADUTHH_LENGTH                               0x8
#define _ADUTHH_ADUTHH_MASK                                 0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0x112);
#ifndef _LIB_BUILD
asm("ADSTPT equ 0112h");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0x112);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 0112h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADSTPTL                :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0x112);
// bitfield macros
#define _ADSTPTL_ADSTPTL_POSN                               0x0
#define _ADSTPTL_ADSTPTL_POSITION                           0x0
#define _ADSTPTL_ADSTPTL_SIZE                               0x8
#define _ADSTPTL_ADSTPTL_LENGTH                             0x8
#define _ADSTPTL_ADSTPTL_MASK                               0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0x113);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 0113h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADSTPTH                :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0x113);
// bitfield macros
#define _ADSTPTH_ADSTPTH_POSN                               0x0
#define _ADSTPTH_ADSTPTH_POSITION                           0x0
#define _ADSTPTH_ADSTPTH_SIZE                               0x8
#define _ADSTPTH_ADSTPTH_LENGTH                             0x8
#define _ADSTPTH_ADSTPTH_MASK                               0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0x114);
#ifndef _LIB_BUILD
asm("ADFLTR equ 0114h");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0x114);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 0114h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFLTRL                :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0x114);
// bitfield macros
#define _ADFLTRL_ADFLTRL_POSN                               0x0
#define _ADFLTRL_ADFLTRL_POSITION                           0x0
#define _ADFLTRL_ADFLTRL_SIZE                               0x8
#define _ADFLTRL_ADFLTRL_LENGTH                             0x8
#define _ADFLTRL_ADFLTRL_MASK                               0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0x115);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 0115h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFLTRH                :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0x115);
// bitfield macros
#define _ADFLTRH_ADFLTRH_POSN                               0x0
#define _ADFLTRH_ADFLTRH_POSITION                           0x0
#define _ADFLTRH_ADFLTRH_SIZE                               0x8
#define _ADFLTRH_ADFLTRH_LENGTH                             0x8
#define _ADFLTRH_ADFLTRH_MASK                               0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0x116);
#ifndef _LIB_BUILD
asm("ADERR equ 0116h");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0x116);
#ifndef _LIB_BUILD
asm("ADERRL equ 0116h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADERRL                 :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0x116);
// bitfield macros
#define _ADERRL_ADERRL_POSN                                 0x0
#define _ADERRL_ADERRL_POSITION                             0x0
#define _ADERRL_ADERRL_SIZE                                 0x8
#define _ADERRL_ADERRL_LENGTH                               0x8
#define _ADERRL_ADERRL_MASK                                 0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0x117);
#ifndef _LIB_BUILD
asm("ADERRH equ 0117h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADERRH                 :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0x117);
// bitfield macros
#define _ADERRH_ADERRH_POSN                                 0x0
#define _ADERRH_ADERRH_POSITION                             0x0
#define _ADERRH_ADERRH_SIZE                                 0x8
#define _ADERRH_ADERRH_LENGTH                               0x8
#define _ADERRH_ADERRH_MASK                                 0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x119);
#ifndef _LIB_BUILD
asm("RC1REG equ 0119h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG equ 0119h");
#endif
extern volatile unsigned char           RCREG1              __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0119h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x119);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0x119);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0x119);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x11A);
#ifndef _LIB_BUILD
asm("TX1REG equ 011Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 011Ah");
#endif
extern volatile unsigned char           TXREG               __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG equ 011Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x11A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0x11A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0x11A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 011Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 011Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG equ 011Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 011Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 011Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x11B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0x11B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0x11B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0x11B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x11C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 011Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 011Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 011Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x11C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0x11C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0x11C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x11D);
#ifndef _LIB_BUILD
asm("RC1STA equ 011Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 011Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA equ 011Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x11D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0x11D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0x11D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x11E);
#ifndef _LIB_BUILD
asm("TX1STA equ 011Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 011Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA equ 011Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x11E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0x11E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0x11E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 011Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 011Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x11F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0x11F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0x11F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0x11F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0x11F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x18C);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x18C);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x18D);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 018Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x18D);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x18E);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x18E);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x18F);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 018Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ1              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned                        :2;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned                        :2;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x18F);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x190);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0190h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x190);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x191);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x191);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x192);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x192);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: SSP2BUF
#define SSP2BUF SSP2BUF
extern volatile unsigned char           SSP2BUF             __at(0x196);
#ifndef _LIB_BUILD
asm("SSP2BUF equ 0196h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP2BUFbits_t;
extern volatile SSP2BUFbits_t SSP2BUFbits __at(0x196);
// bitfield macros
#define _SSP2BUF_SSPBUF_POSN                                0x0
#define _SSP2BUF_SSPBUF_POSITION                            0x0
#define _SSP2BUF_SSPBUF_SIZE                                0x8
#define _SSP2BUF_SSPBUF_LENGTH                              0x8
#define _SSP2BUF_SSPBUF_MASK                                0xFF

// Register: SSP2ADD
#define SSP2ADD SSP2ADD
extern volatile unsigned char           SSP2ADD             __at(0x197);
#ifndef _LIB_BUILD
asm("SSP2ADD equ 0197h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK02                  :1;
        unsigned MSK12                  :1;
        unsigned MSK22                  :1;
        unsigned MSK32                  :1;
        unsigned MSK42                  :1;
        unsigned MSK52                  :1;
        unsigned MSK62                  :1;
        unsigned MSK72                  :1;
    };
} SSP2ADDbits_t;
extern volatile SSP2ADDbits_t SSP2ADDbits __at(0x197);
// bitfield macros
#define _SSP2ADD_SSPADD_POSN                                0x0
#define _SSP2ADD_SSPADD_POSITION                            0x0
#define _SSP2ADD_SSPADD_SIZE                                0x8
#define _SSP2ADD_SSPADD_LENGTH                              0x8
#define _SSP2ADD_SSPADD_MASK                                0xFF
#define _SSP2ADD_MSK0_POSN                                  0x0
#define _SSP2ADD_MSK0_POSITION                              0x0
#define _SSP2ADD_MSK0_SIZE                                  0x1
#define _SSP2ADD_MSK0_LENGTH                                0x1
#define _SSP2ADD_MSK0_MASK                                  0x1
#define _SSP2ADD_MSK1_POSN                                  0x1
#define _SSP2ADD_MSK1_POSITION                              0x1
#define _SSP2ADD_MSK1_SIZE                                  0x1
#define _SSP2ADD_MSK1_LENGTH                                0x1
#define _SSP2ADD_MSK1_MASK                                  0x2
#define _SSP2ADD_MSK2_POSN                                  0x2
#define _SSP2ADD_MSK2_POSITION                              0x2
#define _SSP2ADD_MSK2_SIZE                                  0x1
#define _SSP2ADD_MSK2_LENGTH                                0x1
#define _SSP2ADD_MSK2_MASK                                  0x4
#define _SSP2ADD_MSK3_POSN                                  0x3
#define _SSP2ADD_MSK3_POSITION                              0x3
#define _SSP2ADD_MSK3_SIZE                                  0x1
#define _SSP2ADD_MSK3_LENGTH                                0x1
#define _SSP2ADD_MSK3_MASK                                  0x8
#define _SSP2ADD_MSK4_POSN                                  0x4
#define _SSP2ADD_MSK4_POSITION                              0x4
#define _SSP2ADD_MSK4_SIZE                                  0x1
#define _SSP2ADD_MSK4_LENGTH                                0x1
#define _SSP2ADD_MSK4_MASK                                  0x10
#define _SSP2ADD_MSK5_POSN                                  0x5
#define _SSP2ADD_MSK5_POSITION                              0x5
#define _SSP2ADD_MSK5_SIZE                                  0x1
#define _SSP2ADD_MSK5_LENGTH                                0x1
#define _SSP2ADD_MSK5_MASK                                  0x20
#define _SSP2ADD_MSK6_POSN                                  0x6
#define _SSP2ADD_MSK6_POSITION                              0x6
#define _SSP2ADD_MSK6_SIZE                                  0x1
#define _SSP2ADD_MSK6_LENGTH                                0x1
#define _SSP2ADD_MSK6_MASK                                  0x40
#define _SSP2ADD_MSK7_POSN                                  0x7
#define _SSP2ADD_MSK7_POSITION                              0x7
#define _SSP2ADD_MSK7_SIZE                                  0x1
#define _SSP2ADD_MSK7_LENGTH                                0x1
#define _SSP2ADD_MSK7_MASK                                  0x80
#define _SSP2ADD_MSK02_POSN                                 0x0
#define _SSP2ADD_MSK02_POSITION                             0x0
#define _SSP2ADD_MSK02_SIZE                                 0x1
#define _SSP2ADD_MSK02_LENGTH                               0x1
#define _SSP2ADD_MSK02_MASK                                 0x1
#define _SSP2ADD_MSK12_POSN                                 0x1
#define _SSP2ADD_MSK12_POSITION                             0x1
#define _SSP2ADD_MSK12_SIZE                                 0x1
#define _SSP2ADD_MSK12_LENGTH                               0x1
#define _SSP2ADD_MSK12_MASK                                 0x2
#define _SSP2ADD_MSK22_POSN                                 0x2
#define _SSP2ADD_MSK22_POSITION                             0x2
#define _SSP2ADD_MSK22_SIZE                                 0x1
#define _SSP2ADD_MSK22_LENGTH                               0x1
#define _SSP2ADD_MSK22_MASK                                 0x4
#define _SSP2ADD_MSK32_POSN                                 0x3
#define _SSP2ADD_MSK32_POSITION                             0x3
#define _SSP2ADD_MSK32_SIZE                                 0x1
#define _SSP2ADD_MSK32_LENGTH                               0x1
#define _SSP2ADD_MSK32_MASK                                 0x8
#define _SSP2ADD_MSK42_POSN                                 0x4
#define _SSP2ADD_MSK42_POSITION                             0x4
#define _SSP2ADD_MSK42_SIZE                                 0x1
#define _SSP2ADD_MSK42_LENGTH                               0x1
#define _SSP2ADD_MSK42_MASK                                 0x10
#define _SSP2ADD_MSK52_POSN                                 0x5
#define _SSP2ADD_MSK52_POSITION                             0x5
#define _SSP2ADD_MSK52_SIZE                                 0x1
#define _SSP2ADD_MSK52_LENGTH                               0x1
#define _SSP2ADD_MSK52_MASK                                 0x20
#define _SSP2ADD_MSK62_POSN                                 0x6
#define _SSP2ADD_MSK62_POSITION                             0x6
#define _SSP2ADD_MSK62_SIZE                                 0x1
#define _SSP2ADD_MSK62_LENGTH                               0x1
#define _SSP2ADD_MSK62_MASK                                 0x40
#define _SSP2ADD_MSK72_POSN                                 0x7
#define _SSP2ADD_MSK72_POSITION                             0x7
#define _SSP2ADD_MSK72_SIZE                                 0x1
#define _SSP2ADD_MSK72_LENGTH                               0x1
#define _SSP2ADD_MSK72_MASK                                 0x80

// Register: SSP2MSK
#define SSP2MSK SSP2MSK
extern volatile unsigned char           SSP2MSK             __at(0x198);
#ifndef _LIB_BUILD
asm("SSP2MSK equ 0198h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP2MSKbits_t;
extern volatile SSP2MSKbits_t SSP2MSKbits __at(0x198);
// bitfield macros
#define _SSP2MSK_SSPMSK_POSN                                0x0
#define _SSP2MSK_SSPMSK_POSITION                            0x0
#define _SSP2MSK_SSPMSK_SIZE                                0x8
#define _SSP2MSK_SSPMSK_LENGTH                              0x8
#define _SSP2MSK_SSPMSK_MASK                                0xFF
#define _SSP2MSK_MSK0_POSN                                  0x0
#define _SSP2MSK_MSK0_POSITION                              0x0
#define _SSP2MSK_MSK0_SIZE                                  0x1
#define _SSP2MSK_MSK0_LENGTH                                0x1
#define _SSP2MSK_MSK0_MASK                                  0x1
#define _SSP2MSK_MSK1_POSN                                  0x1
#define _SSP2MSK_MSK1_POSITION                              0x1
#define _SSP2MSK_MSK1_SIZE                                  0x1
#define _SSP2MSK_MSK1_LENGTH                                0x1
#define _SSP2MSK_MSK1_MASK                                  0x2
#define _SSP2MSK_MSK2_POSN                                  0x2
#define _SSP2MSK_MSK2_POSITION                              0x2
#define _SSP2MSK_MSK2_SIZE                                  0x1
#define _SSP2MSK_MSK2_LENGTH                                0x1
#define _SSP2MSK_MSK2_MASK                                  0x4
#define _SSP2MSK_MSK3_POSN                                  0x3
#define _SSP2MSK_MSK3_POSITION                              0x3
#define _SSP2MSK_MSK3_SIZE                                  0x1
#define _SSP2MSK_MSK3_LENGTH                                0x1
#define _SSP2MSK_MSK3_MASK                                  0x8
#define _SSP2MSK_MSK4_POSN                                  0x4
#define _SSP2MSK_MSK4_POSITION                              0x4
#define _SSP2MSK_MSK4_SIZE                                  0x1
#define _SSP2MSK_MSK4_LENGTH                                0x1
#define _SSP2MSK_MSK4_MASK                                  0x10
#define _SSP2MSK_MSK5_POSN                                  0x5
#define _SSP2MSK_MSK5_POSITION                              0x5
#define _SSP2MSK_MSK5_SIZE                                  0x1
#define _SSP2MSK_MSK5_LENGTH                                0x1
#define _SSP2MSK_MSK5_MASK                                  0x20
#define _SSP2MSK_MSK6_POSN                                  0x6
#define _SSP2MSK_MSK6_POSITION                              0x6
#define _SSP2MSK_MSK6_SIZE                                  0x1
#define _SSP2MSK_MSK6_LENGTH                                0x1
#define _SSP2MSK_MSK6_MASK                                  0x40
#define _SSP2MSK_MSK7_POSN                                  0x7
#define _SSP2MSK_MSK7_POSITION                              0x7
#define _SSP2MSK_MSK7_SIZE                                  0x1
#define _SSP2MSK_MSK7_LENGTH                                0x1
#define _SSP2MSK_MSK7_MASK                                  0x80

// Register: SSP2STAT
#define SSP2STAT SSP2STAT
extern volatile unsigned char           SSP2STAT            __at(0x199);
#ifndef _LIB_BUILD
asm("SSP2STAT equ 0199h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF2                    :1;
        unsigned UA2                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE2                   :1;
        unsigned SMP2                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START2                 :1;
        unsigned STOP2                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW2                    :1;
        unsigned I2C_START2             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ2              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS2          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE2            :1;
        unsigned                        :2;
        unsigned D_A2                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W2                   :1;
        unsigned                        :2;
        unsigned D_nA2                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW2                  :1;
        unsigned                        :2;
        unsigned I2C_DAT2               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE2                :1;
        unsigned                        :2;
        unsigned nADDRESS2              :1;
    };
} SSP2STATbits_t;
extern volatile SSP2STATbits_t SSP2STATbits __at(0x199);
// bitfield macros
#define _SSP2STAT_BF_POSN                                   0x0
#define _SSP2STAT_BF_POSITION                               0x0
#define _SSP2STAT_BF_SIZE                                   0x1
#define _SSP2STAT_BF_LENGTH                                 0x1
#define _SSP2STAT_BF_MASK                                   0x1
#define _SSP2STAT_UA_POSN                                   0x1
#define _SSP2STAT_UA_POSITION                               0x1
#define _SSP2STAT_UA_SIZE                                   0x1
#define _SSP2STAT_UA_LENGTH                                 0x1
#define _SSP2STAT_UA_MASK                                   0x2
#define _SSP2STAT_R_nW_POSN                                 0x2
#define _SSP2STAT_R_nW_POSITION                             0x2
#define _SSP2STAT_R_nW_SIZE                                 0x1
#define _SSP2STAT_R_nW_LENGTH                               0x1
#define _SSP2STAT_R_nW_MASK                                 0x4
#define _SSP2STAT_S_POSN                                    0x3
#define _SSP2STAT_S_POSITION                                0x3
#define _SSP2STAT_S_SIZE                                    0x1
#define _SSP2STAT_S_LENGTH                                  0x1
#define _SSP2STAT_S_MASK                                    0x8
#define _SSP2STAT_P_POSN                                    0x4
#define _SSP2STAT_P_POSITION                                0x4
#define _SSP2STAT_P_SIZE                                    0x1
#define _SSP2STAT_P_LENGTH                                  0x1
#define _SSP2STAT_P_MASK                                    0x10
#define _SSP2STAT_D_nA_POSN                                 0x5
#define _SSP2STAT_D_nA_POSITION                             0x5
#define _SSP2STAT_D_nA_SIZE                                 0x1
#define _SSP2STAT_D_nA_LENGTH                               0x1
#define _SSP2STAT_D_nA_MASK                                 0x20
#define _SSP2STAT_CKE_POSN                                  0x6
#define _SSP2STAT_CKE_POSITION                              0x6
#define _SSP2STAT_CKE_SIZE                                  0x1
#define _SSP2STAT_CKE_LENGTH                                0x1
#define _SSP2STAT_CKE_MASK                                  0x40
#define _SSP2STAT_SMP_POSN                                  0x7
#define _SSP2STAT_SMP_POSITION                              0x7
#define _SSP2STAT_SMP_SIZE                                  0x1
#define _SSP2STAT_SMP_LENGTH                                0x1
#define _SSP2STAT_SMP_MASK                                  0x80
#define _SSP2STAT_R_W_POSN                                  0x2
#define _SSP2STAT_R_W_POSITION                              0x2
#define _SSP2STAT_R_W_SIZE                                  0x1
#define _SSP2STAT_R_W_LENGTH                                0x1
#define _SSP2STAT_R_W_MASK                                  0x4
#define _SSP2STAT_D_A_POSN                                  0x5
#define _SSP2STAT_D_A_POSITION                              0x5
#define _SSP2STAT_D_A_SIZE                                  0x1
#define _SSP2STAT_D_A_LENGTH                                0x1
#define _SSP2STAT_D_A_MASK                                  0x20
#define _SSP2STAT_nW_POSN                                   0x2
#define _SSP2STAT_nW_POSITION                               0x2
#define _SSP2STAT_nW_SIZE                                   0x1
#define _SSP2STAT_nW_LENGTH                                 0x1
#define _SSP2STAT_nW_MASK                                   0x4
#define _SSP2STAT_nA_POSN                                   0x5
#define _SSP2STAT_nA_POSITION                               0x5
#define _SSP2STAT_nA_SIZE                                   0x1
#define _SSP2STAT_nA_LENGTH                                 0x1
#define _SSP2STAT_nA_MASK                                   0x20
#define _SSP2STAT_nWRITE_POSN                               0x2
#define _SSP2STAT_nWRITE_POSITION                           0x2
#define _SSP2STAT_nWRITE_SIZE                               0x1
#define _SSP2STAT_nWRITE_LENGTH                             0x1
#define _SSP2STAT_nWRITE_MASK                               0x4
#define _SSP2STAT_nADDRESS_POSN                             0x5
#define _SSP2STAT_nADDRESS_POSITION                         0x5
#define _SSP2STAT_nADDRESS_SIZE                             0x1
#define _SSP2STAT_nADDRESS_LENGTH                           0x1
#define _SSP2STAT_nADDRESS_MASK                             0x20
#define _SSP2STAT_READ_WRITE_POSN                           0x2
#define _SSP2STAT_READ_WRITE_POSITION                       0x2
#define _SSP2STAT_READ_WRITE_SIZE                           0x1
#define _SSP2STAT_READ_WRITE_LENGTH                         0x1
#define _SSP2STAT_READ_WRITE_MASK                           0x4
#define _SSP2STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP2STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP2STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP2STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP2STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP2STAT_I2C_READ_POSN                             0x2
#define _SSP2STAT_I2C_READ_POSITION                         0x2
#define _SSP2STAT_I2C_READ_SIZE                             0x1
#define _SSP2STAT_I2C_READ_LENGTH                           0x1
#define _SSP2STAT_I2C_READ_MASK                             0x4
#define _SSP2STAT_I2C_START_POSN                            0x3
#define _SSP2STAT_I2C_START_POSITION                        0x3
#define _SSP2STAT_I2C_START_SIZE                            0x1
#define _SSP2STAT_I2C_START_LENGTH                          0x1
#define _SSP2STAT_I2C_START_MASK                            0x8
#define _SSP2STAT_I2C_STOP_POSN                             0x4
#define _SSP2STAT_I2C_STOP_POSITION                         0x4
#define _SSP2STAT_I2C_STOP_SIZE                             0x1
#define _SSP2STAT_I2C_STOP_LENGTH                           0x1
#define _SSP2STAT_I2C_STOP_MASK                             0x10
#define _SSP2STAT_I2C_DAT_POSN                              0x5
#define _SSP2STAT_I2C_DAT_POSITION                          0x5
#define _SSP2STAT_I2C_DAT_SIZE                              0x1
#define _SSP2STAT_I2C_DAT_LENGTH                            0x1
#define _SSP2STAT_I2C_DAT_MASK                              0x20
#define _SSP2STAT_BF2_POSN                                  0x0
#define _SSP2STAT_BF2_POSITION                              0x0
#define _SSP2STAT_BF2_SIZE                                  0x1
#define _SSP2STAT_BF2_LENGTH                                0x1
#define _SSP2STAT_BF2_MASK                                  0x1
#define _SSP2STAT_UA2_POSN                                  0x1
#define _SSP2STAT_UA2_POSITION                              0x1
#define _SSP2STAT_UA2_SIZE                                  0x1
#define _SSP2STAT_UA2_LENGTH                                0x1
#define _SSP2STAT_UA2_MASK                                  0x2
#define _SSP2STAT_R_POSN                                    0x2
#define _SSP2STAT_R_POSITION                                0x2
#define _SSP2STAT_R_SIZE                                    0x1
#define _SSP2STAT_R_LENGTH                                  0x1
#define _SSP2STAT_R_MASK                                    0x4
#define _SSP2STAT_START_POSN                                0x3
#define _SSP2STAT_START_POSITION                            0x3
#define _SSP2STAT_START_SIZE                                0x1
#define _SSP2STAT_START_LENGTH                              0x1
#define _SSP2STAT_START_MASK                                0x8
#define _SSP2STAT_STOP_POSN                                 0x4
#define _SSP2STAT_STOP_POSITION                             0x4
#define _SSP2STAT_STOP_SIZE                                 0x1
#define _SSP2STAT_STOP_LENGTH                               0x1
#define _SSP2STAT_STOP_MASK                                 0x10
#define _SSP2STAT_D_POSN                                    0x5
#define _SSP2STAT_D_POSITION                                0x5
#define _SSP2STAT_D_SIZE                                    0x1
#define _SSP2STAT_D_LENGTH                                  0x1
#define _SSP2STAT_D_MASK                                    0x20
#define _SSP2STAT_CKE2_POSN                                 0x6
#define _SSP2STAT_CKE2_POSITION                             0x6
#define _SSP2STAT_CKE2_SIZE                                 0x1
#define _SSP2STAT_CKE2_LENGTH                               0x1
#define _SSP2STAT_CKE2_MASK                                 0x40
#define _SSP2STAT_SMP2_POSN                                 0x7
#define _SSP2STAT_SMP2_POSITION                             0x7
#define _SSP2STAT_SMP2_SIZE                                 0x1
#define _SSP2STAT_SMP2_LENGTH                               0x1
#define _SSP2STAT_SMP2_MASK                                 0x80
#define _SSP2STAT_RW_POSN                                   0x2
#define _SSP2STAT_RW_POSITION                               0x2
#define _SSP2STAT_RW_SIZE                                   0x1
#define _SSP2STAT_RW_LENGTH                                 0x1
#define _SSP2STAT_RW_MASK                                   0x4
#define _SSP2STAT_START2_POSN                               0x3
#define _SSP2STAT_START2_POSITION                           0x3
#define _SSP2STAT_START2_SIZE                               0x1
#define _SSP2STAT_START2_LENGTH                             0x1
#define _SSP2STAT_START2_MASK                               0x8
#define _SSP2STAT_STOP2_POSN                                0x4
#define _SSP2STAT_STOP2_POSITION                            0x4
#define _SSP2STAT_STOP2_SIZE                                0x1
#define _SSP2STAT_STOP2_LENGTH                              0x1
#define _SSP2STAT_STOP2_MASK                                0x10
#define _SSP2STAT_DA_POSN                                   0x5
#define _SSP2STAT_DA_POSITION                               0x5
#define _SSP2STAT_DA_SIZE                                   0x1
#define _SSP2STAT_DA_LENGTH                                 0x1
#define _SSP2STAT_DA_MASK                                   0x20
#define _SSP2STAT_RW2_POSN                                  0x2
#define _SSP2STAT_RW2_POSITION                              0x2
#define _SSP2STAT_RW2_SIZE                                  0x1
#define _SSP2STAT_RW2_LENGTH                                0x1
#define _SSP2STAT_RW2_MASK                                  0x4
#define _SSP2STAT_I2C_START2_POSN                           0x3
#define _SSP2STAT_I2C_START2_POSITION                       0x3
#define _SSP2STAT_I2C_START2_SIZE                           0x1
#define _SSP2STAT_I2C_START2_LENGTH                         0x1
#define _SSP2STAT_I2C_START2_MASK                           0x8
#define _SSP2STAT_I2C_STOP2_POSN                            0x4
#define _SSP2STAT_I2C_STOP2_POSITION                        0x4
#define _SSP2STAT_I2C_STOP2_SIZE                            0x1
#define _SSP2STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP2STAT_I2C_STOP2_MASK                            0x10
#define _SSP2STAT_DA2_POSN                                  0x5
#define _SSP2STAT_DA2_POSITION                              0x5
#define _SSP2STAT_DA2_SIZE                                  0x1
#define _SSP2STAT_DA2_LENGTH                                0x1
#define _SSP2STAT_DA2_MASK                                  0x20
#define _SSP2STAT_I2C_READ2_POSN                            0x2
#define _SSP2STAT_I2C_READ2_POSITION                        0x2
#define _SSP2STAT_I2C_READ2_SIZE                            0x1
#define _SSP2STAT_I2C_READ2_LENGTH                          0x1
#define _SSP2STAT_I2C_READ2_MASK                            0x4
#define _SSP2STAT_S2_POSN                                   0x3
#define _SSP2STAT_S2_POSITION                               0x3
#define _SSP2STAT_S2_SIZE                                   0x1
#define _SSP2STAT_S2_LENGTH                                 0x1
#define _SSP2STAT_S2_MASK                                   0x8
#define _SSP2STAT_P2_POSN                                   0x4
#define _SSP2STAT_P2_POSITION                               0x4
#define _SSP2STAT_P2_SIZE                                   0x1
#define _SSP2STAT_P2_LENGTH                                 0x1
#define _SSP2STAT_P2_MASK                                   0x10
#define _SSP2STAT_DATA_ADDRESS2_POSN                        0x5
#define _SSP2STAT_DATA_ADDRESS2_POSITION                    0x5
#define _SSP2STAT_DATA_ADDRESS2_SIZE                        0x1
#define _SSP2STAT_DATA_ADDRESS2_LENGTH                      0x1
#define _SSP2STAT_DATA_ADDRESS2_MASK                        0x20
#define _SSP2STAT_READ_WRITE2_POSN                          0x2
#define _SSP2STAT_READ_WRITE2_POSITION                      0x2
#define _SSP2STAT_READ_WRITE2_SIZE                          0x1
#define _SSP2STAT_READ_WRITE2_LENGTH                        0x1
#define _SSP2STAT_READ_WRITE2_MASK                          0x4
#define _SSP2STAT_D_A2_POSN                                 0x5
#define _SSP2STAT_D_A2_POSITION                             0x5
#define _SSP2STAT_D_A2_SIZE                                 0x1
#define _SSP2STAT_D_A2_LENGTH                               0x1
#define _SSP2STAT_D_A2_MASK                                 0x20
#define _SSP2STAT_R_W2_POSN                                 0x2
#define _SSP2STAT_R_W2_POSITION                             0x2
#define _SSP2STAT_R_W2_SIZE                                 0x1
#define _SSP2STAT_R_W2_LENGTH                               0x1
#define _SSP2STAT_R_W2_MASK                                 0x4
#define _SSP2STAT_D_nA2_POSN                                0x5
#define _SSP2STAT_D_nA2_POSITION                            0x5
#define _SSP2STAT_D_nA2_SIZE                                0x1
#define _SSP2STAT_D_nA2_LENGTH                              0x1
#define _SSP2STAT_D_nA2_MASK                                0x20
#define _SSP2STAT_R_nW2_POSN                                0x2
#define _SSP2STAT_R_nW2_POSITION                            0x2
#define _SSP2STAT_R_nW2_SIZE                                0x1
#define _SSP2STAT_R_nW2_LENGTH                              0x1
#define _SSP2STAT_R_nW2_MASK                                0x4
#define _SSP2STAT_I2C_DAT2_POSN                             0x5
#define _SSP2STAT_I2C_DAT2_POSITION                         0x5
#define _SSP2STAT_I2C_DAT2_SIZE                             0x1
#define _SSP2STAT_I2C_DAT2_LENGTH                           0x1
#define _SSP2STAT_I2C_DAT2_MASK                             0x20
#define _SSP2STAT_nW2_POSN                                  0x2
#define _SSP2STAT_nW2_POSITION                              0x2
#define _SSP2STAT_nW2_SIZE                                  0x1
#define _SSP2STAT_nW2_LENGTH                                0x1
#define _SSP2STAT_nW2_MASK                                  0x4
#define _SSP2STAT_nA2_POSN                                  0x5
#define _SSP2STAT_nA2_POSITION                              0x5
#define _SSP2STAT_nA2_SIZE                                  0x1
#define _SSP2STAT_nA2_LENGTH                                0x1
#define _SSP2STAT_nA2_MASK                                  0x20
#define _SSP2STAT_nWRITE2_POSN                              0x2
#define _SSP2STAT_nWRITE2_POSITION                          0x2
#define _SSP2STAT_nWRITE2_SIZE                              0x1
#define _SSP2STAT_nWRITE2_LENGTH                            0x1
#define _SSP2STAT_nWRITE2_MASK                              0x4
#define _SSP2STAT_nADDRESS2_POSN                            0x5
#define _SSP2STAT_nADDRESS2_POSITION                        0x5
#define _SSP2STAT_nADDRESS2_SIZE                            0x1
#define _SSP2STAT_nADDRESS2_LENGTH                          0x1
#define _SSP2STAT_nADDRESS2_MASK                            0x20

// Register: SSP2CON1
#define SSP2CON1 SSP2CON1
extern volatile unsigned char           SSP2CON1            __at(0x19A);
#ifndef _LIB_BUILD
asm("SSP2CON1 equ 019Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM02                 :1;
        unsigned SSPM12                 :1;
        unsigned SSPM22                 :1;
        unsigned SSPM32                 :1;
        unsigned CKP2                   :1;
        unsigned SSPEN2                 :1;
        unsigned SSPOV2                 :1;
        unsigned WCOL2                  :1;
    };
} SSP2CON1bits_t;
extern volatile SSP2CON1bits_t SSP2CON1bits __at(0x19A);
// bitfield macros
#define _SSP2CON1_SSPM_POSN                                 0x0
#define _SSP2CON1_SSPM_POSITION                             0x0
#define _SSP2CON1_SSPM_SIZE                                 0x4
#define _SSP2CON1_SSPM_LENGTH                               0x4
#define _SSP2CON1_SSPM_MASK                                 0xF
#define _SSP2CON1_CKP_POSN                                  0x4
#define _SSP2CON1_CKP_POSITION                              0x4
#define _SSP2CON1_CKP_SIZE                                  0x1
#define _SSP2CON1_CKP_LENGTH                                0x1
#define _SSP2CON1_CKP_MASK                                  0x10
#define _SSP2CON1_SSPEN_POSN                                0x5
#define _SSP2CON1_SSPEN_POSITION                            0x5
#define _SSP2CON1_SSPEN_SIZE                                0x1
#define _SSP2CON1_SSPEN_LENGTH                              0x1
#define _SSP2CON1_SSPEN_MASK                                0x20
#define _SSP2CON1_SSPOV_POSN                                0x6
#define _SSP2CON1_SSPOV_POSITION                            0x6
#define _SSP2CON1_SSPOV_SIZE                                0x1
#define _SSP2CON1_SSPOV_LENGTH                              0x1
#define _SSP2CON1_SSPOV_MASK                                0x40
#define _SSP2CON1_WCOL_POSN                                 0x7
#define _SSP2CON1_WCOL_POSITION                             0x7
#define _SSP2CON1_WCOL_SIZE                                 0x1
#define _SSP2CON1_WCOL_LENGTH                               0x1
#define _SSP2CON1_WCOL_MASK                                 0x80
#define _SSP2CON1_SSPM0_POSN                                0x0
#define _SSP2CON1_SSPM0_POSITION                            0x0
#define _SSP2CON1_SSPM0_SIZE                                0x1
#define _SSP2CON1_SSPM0_LENGTH                              0x1
#define _SSP2CON1_SSPM0_MASK                                0x1
#define _SSP2CON1_SSPM1_POSN                                0x1
#define _SSP2CON1_SSPM1_POSITION                            0x1
#define _SSP2CON1_SSPM1_SIZE                                0x1
#define _SSP2CON1_SSPM1_LENGTH                              0x1
#define _SSP2CON1_SSPM1_MASK                                0x2
#define _SSP2CON1_SSPM2_POSN                                0x2
#define _SSP2CON1_SSPM2_POSITION                            0x2
#define _SSP2CON1_SSPM2_SIZE                                0x1
#define _SSP2CON1_SSPM2_LENGTH                              0x1
#define _SSP2CON1_SSPM2_MASK                                0x4
#define _SSP2CON1_SSPM3_POSN                                0x3
#define _SSP2CON1_SSPM3_POSITION                            0x3
#define _SSP2CON1_SSPM3_SIZE                                0x1
#define _SSP2CON1_SSPM3_LENGTH                              0x1
#define _SSP2CON1_SSPM3_MASK                                0x8
#define _SSP2CON1_SSPM02_POSN                               0x0
#define _SSP2CON1_SSPM02_POSITION                           0x0
#define _SSP2CON1_SSPM02_SIZE                               0x1
#define _SSP2CON1_SSPM02_LENGTH                             0x1
#define _SSP2CON1_SSPM02_MASK                               0x1
#define _SSP2CON1_SSPM12_POSN                               0x1
#define _SSP2CON1_SSPM12_POSITION                           0x1
#define _SSP2CON1_SSPM12_SIZE                               0x1
#define _SSP2CON1_SSPM12_LENGTH                             0x1
#define _SSP2CON1_SSPM12_MASK                               0x2
#define _SSP2CON1_SSPM22_POSN                               0x2
#define _SSP2CON1_SSPM22_POSITION                           0x2
#define _SSP2CON1_SSPM22_SIZE                               0x1
#define _SSP2CON1_SSPM22_LENGTH                             0x1
#define _SSP2CON1_SSPM22_MASK                               0x4
#define _SSP2CON1_SSPM32_POSN                               0x3
#define _SSP2CON1_SSPM32_POSITION                           0x3
#define _SSP2CON1_SSPM32_SIZE                               0x1
#define _SSP2CON1_SSPM32_LENGTH                             0x1
#define _SSP2CON1_SSPM32_MASK                               0x8
#define _SSP2CON1_CKP2_POSN                                 0x4
#define _SSP2CON1_CKP2_POSITION                             0x4
#define _SSP2CON1_CKP2_SIZE                                 0x1
#define _SSP2CON1_CKP2_LENGTH                               0x1
#define _SSP2CON1_CKP2_MASK                                 0x10
#define _SSP2CON1_SSPEN2_POSN                               0x5
#define _SSP2CON1_SSPEN2_POSITION                           0x5
#define _SSP2CON1_SSPEN2_SIZE                               0x1
#define _SSP2CON1_SSPEN2_LENGTH                             0x1
#define _SSP2CON1_SSPEN2_MASK                               0x20
#define _SSP2CON1_SSPOV2_POSN                               0x6
#define _SSP2CON1_SSPOV2_POSITION                           0x6
#define _SSP2CON1_SSPOV2_SIZE                               0x1
#define _SSP2CON1_SSPOV2_LENGTH                             0x1
#define _SSP2CON1_SSPOV2_MASK                               0x40
#define _SSP2CON1_WCOL2_POSN                                0x7
#define _SSP2CON1_WCOL2_POSITION                            0x7
#define _SSP2CON1_WCOL2_SIZE                                0x1
#define _SSP2CON1_WCOL2_LENGTH                              0x1
#define _SSP2CON1_WCOL2_MASK                                0x80

// Register: SSP2CON2
#define SSP2CON2 SSP2CON2
extern volatile unsigned char           SSP2CON2            __at(0x19B);
#ifndef _LIB_BUILD
asm("SSP2CON2 equ 019Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN2                   :1;
        unsigned ADMSK12                :1;
        unsigned ADMSK22                :1;
        unsigned ADMSK32                :1;
        unsigned ACKEN2                 :1;
        unsigned ACKDT2                 :1;
        unsigned ACKSTAT2               :1;
        unsigned GCEN2                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN2                  :1;
        unsigned PEN2                   :1;
        unsigned RCEN2                  :1;
        unsigned ADMSK42                :1;
        unsigned ADMSK52                :1;
    };
} SSP2CON2bits_t;
extern volatile SSP2CON2bits_t SSP2CON2bits __at(0x19B);
// bitfield macros
#define _SSP2CON2_SEN_POSN                                  0x0
#define _SSP2CON2_SEN_POSITION                              0x0
#define _SSP2CON2_SEN_SIZE                                  0x1
#define _SSP2CON2_SEN_LENGTH                                0x1
#define _SSP2CON2_SEN_MASK                                  0x1
#define _SSP2CON2_RSEN_POSN                                 0x1
#define _SSP2CON2_RSEN_POSITION                             0x1
#define _SSP2CON2_RSEN_SIZE                                 0x1
#define _SSP2CON2_RSEN_LENGTH                               0x1
#define _SSP2CON2_RSEN_MASK                                 0x2
#define _SSP2CON2_PEN_POSN                                  0x2
#define _SSP2CON2_PEN_POSITION                              0x2
#define _SSP2CON2_PEN_SIZE                                  0x1
#define _SSP2CON2_PEN_LENGTH                                0x1
#define _SSP2CON2_PEN_MASK                                  0x4
#define _SSP2CON2_RCEN_POSN                                 0x3
#define _SSP2CON2_RCEN_POSITION                             0x3
#define _SSP2CON2_RCEN_SIZE                                 0x1
#define _SSP2CON2_RCEN_LENGTH                               0x1
#define _SSP2CON2_RCEN_MASK                                 0x8
#define _SSP2CON2_ACKEN_POSN                                0x4
#define _SSP2CON2_ACKEN_POSITION                            0x4
#define _SSP2CON2_ACKEN_SIZE                                0x1
#define _SSP2CON2_ACKEN_LENGTH                              0x1
#define _SSP2CON2_ACKEN_MASK                                0x10
#define _SSP2CON2_ACKDT_POSN                                0x5
#define _SSP2CON2_ACKDT_POSITION                            0x5
#define _SSP2CON2_ACKDT_SIZE                                0x1
#define _SSP2CON2_ACKDT_LENGTH                              0x1
#define _SSP2CON2_ACKDT_MASK                                0x20
#define _SSP2CON2_ACKSTAT_POSN                              0x6
#define _SSP2CON2_ACKSTAT_POSITION                          0x6
#define _SSP2CON2_ACKSTAT_SIZE                              0x1
#define _SSP2CON2_ACKSTAT_LENGTH                            0x1
#define _SSP2CON2_ACKSTAT_MASK                              0x40
#define _SSP2CON2_GCEN_POSN                                 0x7
#define _SSP2CON2_GCEN_POSITION                             0x7
#define _SSP2CON2_GCEN_SIZE                                 0x1
#define _SSP2CON2_GCEN_LENGTH                               0x1
#define _SSP2CON2_GCEN_MASK                                 0x80
#define _SSP2CON2_ADMSK_POSN                                0x1
#define _SSP2CON2_ADMSK_POSITION                            0x1
#define _SSP2CON2_ADMSK_SIZE                                0x5
#define _SSP2CON2_ADMSK_LENGTH                              0x5
#define _SSP2CON2_ADMSK_MASK                                0x3E
#define _SSP2CON2_ADMSK1_POSN                               0x1
#define _SSP2CON2_ADMSK1_POSITION                           0x1
#define _SSP2CON2_ADMSK1_SIZE                               0x1
#define _SSP2CON2_ADMSK1_LENGTH                             0x1
#define _SSP2CON2_ADMSK1_MASK                               0x2
#define _SSP2CON2_ADMSK2_POSN                               0x2
#define _SSP2CON2_ADMSK2_POSITION                           0x2
#define _SSP2CON2_ADMSK2_SIZE                               0x1
#define _SSP2CON2_ADMSK2_LENGTH                             0x1
#define _SSP2CON2_ADMSK2_MASK                               0x4
#define _SSP2CON2_ADMSK3_POSN                               0x3
#define _SSP2CON2_ADMSK3_POSITION                           0x3
#define _SSP2CON2_ADMSK3_SIZE                               0x1
#define _SSP2CON2_ADMSK3_LENGTH                             0x1
#define _SSP2CON2_ADMSK3_MASK                               0x8
#define _SSP2CON2_ADMSK4_POSN                               0x4
#define _SSP2CON2_ADMSK4_POSITION                           0x4
#define _SSP2CON2_ADMSK4_SIZE                               0x1
#define _SSP2CON2_ADMSK4_LENGTH                             0x1
#define _SSP2CON2_ADMSK4_MASK                               0x10
#define _SSP2CON2_ADMSK5_POSN                               0x5
#define _SSP2CON2_ADMSK5_POSITION                           0x5
#define _SSP2CON2_ADMSK5_SIZE                               0x1
#define _SSP2CON2_ADMSK5_LENGTH                             0x1
#define _SSP2CON2_ADMSK5_MASK                               0x20
#define _SSP2CON2_SEN2_POSN                                 0x0
#define _SSP2CON2_SEN2_POSITION                             0x0
#define _SSP2CON2_SEN2_SIZE                                 0x1
#define _SSP2CON2_SEN2_LENGTH                               0x1
#define _SSP2CON2_SEN2_MASK                                 0x1
#define _SSP2CON2_ADMSK12_POSN                              0x1
#define _SSP2CON2_ADMSK12_POSITION                          0x1
#define _SSP2CON2_ADMSK12_SIZE                              0x1
#define _SSP2CON2_ADMSK12_LENGTH                            0x1
#define _SSP2CON2_ADMSK12_MASK                              0x2
#define _SSP2CON2_ADMSK22_POSN                              0x2
#define _SSP2CON2_ADMSK22_POSITION                          0x2
#define _SSP2CON2_ADMSK22_SIZE                              0x1
#define _SSP2CON2_ADMSK22_LENGTH                            0x1
#define _SSP2CON2_ADMSK22_MASK                              0x4
#define _SSP2CON2_ADMSK32_POSN                              0x3
#define _SSP2CON2_ADMSK32_POSITION                          0x3
#define _SSP2CON2_ADMSK32_SIZE                              0x1
#define _SSP2CON2_ADMSK32_LENGTH                            0x1
#define _SSP2CON2_ADMSK32_MASK                              0x8
#define _SSP2CON2_ACKEN2_POSN                               0x4
#define _SSP2CON2_ACKEN2_POSITION                           0x4
#define _SSP2CON2_ACKEN2_SIZE                               0x1
#define _SSP2CON2_ACKEN2_LENGTH                             0x1
#define _SSP2CON2_ACKEN2_MASK                               0x10
#define _SSP2CON2_ACKDT2_POSN                               0x5
#define _SSP2CON2_ACKDT2_POSITION                           0x5
#define _SSP2CON2_ACKDT2_SIZE                               0x1
#define _SSP2CON2_ACKDT2_LENGTH                             0x1
#define _SSP2CON2_ACKDT2_MASK                               0x20
#define _SSP2CON2_ACKSTAT2_POSN                             0x6
#define _SSP2CON2_ACKSTAT2_POSITION                         0x6
#define _SSP2CON2_ACKSTAT2_SIZE                             0x1
#define _SSP2CON2_ACKSTAT2_LENGTH                           0x1
#define _SSP2CON2_ACKSTAT2_MASK                             0x40
#define _SSP2CON2_GCEN2_POSN                                0x7
#define _SSP2CON2_GCEN2_POSITION                            0x7
#define _SSP2CON2_GCEN2_SIZE                                0x1
#define _SSP2CON2_GCEN2_LENGTH                              0x1
#define _SSP2CON2_GCEN2_MASK                                0x80
#define _SSP2CON2_RSEN2_POSN                                0x1
#define _SSP2CON2_RSEN2_POSITION                            0x1
#define _SSP2CON2_RSEN2_SIZE                                0x1
#define _SSP2CON2_RSEN2_LENGTH                              0x1
#define _SSP2CON2_RSEN2_MASK                                0x2
#define _SSP2CON2_PEN2_POSN                                 0x2
#define _SSP2CON2_PEN2_POSITION                             0x2
#define _SSP2CON2_PEN2_SIZE                                 0x1
#define _SSP2CON2_PEN2_LENGTH                               0x1
#define _SSP2CON2_PEN2_MASK                                 0x4
#define _SSP2CON2_RCEN2_POSN                                0x3
#define _SSP2CON2_RCEN2_POSITION                            0x3
#define _SSP2CON2_RCEN2_SIZE                                0x1
#define _SSP2CON2_RCEN2_LENGTH                              0x1
#define _SSP2CON2_RCEN2_MASK                                0x8
#define _SSP2CON2_ADMSK42_POSN                              0x4
#define _SSP2CON2_ADMSK42_POSITION                          0x4
#define _SSP2CON2_ADMSK42_SIZE                              0x1
#define _SSP2CON2_ADMSK42_LENGTH                            0x1
#define _SSP2CON2_ADMSK42_MASK                              0x10
#define _SSP2CON2_ADMSK52_POSN                              0x5
#define _SSP2CON2_ADMSK52_POSITION                          0x5
#define _SSP2CON2_ADMSK52_SIZE                              0x1
#define _SSP2CON2_ADMSK52_LENGTH                            0x1
#define _SSP2CON2_ADMSK52_MASK                              0x20

// Register: SSP2CON3
#define SSP2CON3 SSP2CON3
extern volatile unsigned char           SSP2CON3            __at(0x19C);
#ifndef _LIB_BUILD
asm("SSP2CON3 equ 019Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP2CON3bits_t;
extern volatile SSP2CON3bits_t SSP2CON3bits __at(0x19C);
// bitfield macros
#define _SSP2CON3_DHEN_POSN                                 0x0
#define _SSP2CON3_DHEN_POSITION                             0x0
#define _SSP2CON3_DHEN_SIZE                                 0x1
#define _SSP2CON3_DHEN_LENGTH                               0x1
#define _SSP2CON3_DHEN_MASK                                 0x1
#define _SSP2CON3_AHEN_POSN                                 0x1
#define _SSP2CON3_AHEN_POSITION                             0x1
#define _SSP2CON3_AHEN_SIZE                                 0x1
#define _SSP2CON3_AHEN_LENGTH                               0x1
#define _SSP2CON3_AHEN_MASK                                 0x2
#define _SSP2CON3_SBCDE_POSN                                0x2
#define _SSP2CON3_SBCDE_POSITION                            0x2
#define _SSP2CON3_SBCDE_SIZE                                0x1
#define _SSP2CON3_SBCDE_LENGTH                              0x1
#define _SSP2CON3_SBCDE_MASK                                0x4
#define _SSP2CON3_SDAHT_POSN                                0x3
#define _SSP2CON3_SDAHT_POSITION                            0x3
#define _SSP2CON3_SDAHT_SIZE                                0x1
#define _SSP2CON3_SDAHT_LENGTH                              0x1
#define _SSP2CON3_SDAHT_MASK                                0x8
#define _SSP2CON3_BOEN_POSN                                 0x4
#define _SSP2CON3_BOEN_POSITION                             0x4
#define _SSP2CON3_BOEN_SIZE                                 0x1
#define _SSP2CON3_BOEN_LENGTH                               0x1
#define _SSP2CON3_BOEN_MASK                                 0x10
#define _SSP2CON3_SCIE_POSN                                 0x5
#define _SSP2CON3_SCIE_POSITION                             0x5
#define _SSP2CON3_SCIE_SIZE                                 0x1
#define _SSP2CON3_SCIE_LENGTH                               0x1
#define _SSP2CON3_SCIE_MASK                                 0x20
#define _SSP2CON3_PCIE_POSN                                 0x6
#define _SSP2CON3_PCIE_POSITION                             0x6
#define _SSP2CON3_PCIE_SIZE                                 0x1
#define _SSP2CON3_PCIE_LENGTH                               0x1
#define _SSP2CON3_PCIE_MASK                                 0x40
#define _SSP2CON3_ACKTIM_POSN                               0x7
#define _SSP2CON3_ACKTIM_POSITION                           0x7
#define _SSP2CON3_ACKTIM_SIZE                               0x1
#define _SSP2CON3_ACKTIM_LENGTH                             0x1
#define _SSP2CON3_ACKTIM_MASK                               0x80

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1 equ 020Ch");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1L equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
    };
    struct {
        unsigned CAL01                  :1;
        unsigned CAL11                  :1;
        unsigned CAL21                  :1;
        unsigned CAL31                  :1;
        unsigned CAL41                  :1;
        unsigned CAL51                  :1;
        unsigned CAL61                  :1;
        unsigned CAL71                  :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x20C);
// bitfield macros
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR10_POSN                                   0x0
#define _TMR1L_TMR10_POSITION                               0x0
#define _TMR1L_TMR10_SIZE                                   0x1
#define _TMR1L_TMR10_LENGTH                                 0x1
#define _TMR1L_TMR10_MASK                                   0x1
#define _TMR1L_TMR11_POSN                                   0x1
#define _TMR1L_TMR11_POSITION                               0x1
#define _TMR1L_TMR11_SIZE                                   0x1
#define _TMR1L_TMR11_LENGTH                                 0x1
#define _TMR1L_TMR11_MASK                                   0x2
#define _TMR1L_TMR12_POSN                                   0x2
#define _TMR1L_TMR12_POSITION                               0x2
#define _TMR1L_TMR12_SIZE                                   0x1
#define _TMR1L_TMR12_LENGTH                                 0x1
#define _TMR1L_TMR12_MASK                                   0x4
#define _TMR1L_TMR13_POSN                                   0x3
#define _TMR1L_TMR13_POSITION                               0x3
#define _TMR1L_TMR13_SIZE                                   0x1
#define _TMR1L_TMR13_LENGTH                                 0x1
#define _TMR1L_TMR13_MASK                                   0x8
#define _TMR1L_TMR14_POSN                                   0x4
#define _TMR1L_TMR14_POSITION                               0x4
#define _TMR1L_TMR14_SIZE                                   0x1
#define _TMR1L_TMR14_LENGTH                                 0x1
#define _TMR1L_TMR14_MASK                                   0x10
#define _TMR1L_TMR15_POSN                                   0x5
#define _TMR1L_TMR15_POSITION                               0x5
#define _TMR1L_TMR15_SIZE                                   0x1
#define _TMR1L_TMR15_LENGTH                                 0x1
#define _TMR1L_TMR15_MASK                                   0x20
#define _TMR1L_TMR16_POSN                                   0x6
#define _TMR1L_TMR16_POSITION                               0x6
#define _TMR1L_TMR16_SIZE                                   0x1
#define _TMR1L_TMR16_LENGTH                                 0x1
#define _TMR1L_TMR16_MASK                                   0x40
#define _TMR1L_TMR17_POSN                                   0x7
#define _TMR1L_TMR17_POSITION                               0x7
#define _TMR1L_TMR17_SIZE                                   0x1
#define _TMR1L_TMR17_LENGTH                                 0x1
#define _TMR1L_TMR17_MASK                                   0x80
#define _TMR1L_CAL01_POSN                                   0x0
#define _TMR1L_CAL01_POSITION                               0x0
#define _TMR1L_CAL01_SIZE                                   0x1
#define _TMR1L_CAL01_LENGTH                                 0x1
#define _TMR1L_CAL01_MASK                                   0x1
#define _TMR1L_CAL11_POSN                                   0x1
#define _TMR1L_CAL11_POSITION                               0x1
#define _TMR1L_CAL11_SIZE                                   0x1
#define _TMR1L_CAL11_LENGTH                                 0x1
#define _TMR1L_CAL11_MASK                                   0x2
#define _TMR1L_CAL21_POSN                                   0x2
#define _TMR1L_CAL21_POSITION                               0x2
#define _TMR1L_CAL21_SIZE                                   0x1
#define _TMR1L_CAL21_LENGTH                                 0x1
#define _TMR1L_CAL21_MASK                                   0x4
#define _TMR1L_CAL31_POSN                                   0x3
#define _TMR1L_CAL31_POSITION                               0x3
#define _TMR1L_CAL31_SIZE                                   0x1
#define _TMR1L_CAL31_LENGTH                                 0x1
#define _TMR1L_CAL31_MASK                                   0x8
#define _TMR1L_CAL41_POSN                                   0x4
#define _TMR1L_CAL41_POSITION                               0x4
#define _TMR1L_CAL41_SIZE                                   0x1
#define _TMR1L_CAL41_LENGTH                                 0x1
#define _TMR1L_CAL41_MASK                                   0x10
#define _TMR1L_CAL51_POSN                                   0x5
#define _TMR1L_CAL51_POSITION                               0x5
#define _TMR1L_CAL51_SIZE                                   0x1
#define _TMR1L_CAL51_LENGTH                                 0x1
#define _TMR1L_CAL51_MASK                                   0x20
#define _TMR1L_CAL61_POSN                                   0x6
#define _TMR1L_CAL61_POSITION                               0x6
#define _TMR1L_CAL61_SIZE                                   0x1
#define _TMR1L_CAL61_LENGTH                                 0x1
#define _TMR1L_CAL61_MASK                                   0x40
#define _TMR1L_CAL71_POSN                                   0x7
#define _TMR1L_CAL71_POSITION                               0x7
#define _TMR1L_CAL71_SIZE                                   0x1
#define _TMR1L_CAL71_LENGTH                                 0x1
#define _TMR1L_CAL71_MASK                                   0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x20D);
#ifndef _LIB_BUILD
asm("TMR1H equ 020Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR110                 :1;
        unsigned TMR111                 :1;
        unsigned TMR112                 :1;
        unsigned TMR113                 :1;
        unsigned TMR114                 :1;
        unsigned TMR115                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x20D);
// bitfield macros
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR18_POSN                                   0x0
#define _TMR1H_TMR18_POSITION                               0x0
#define _TMR1H_TMR18_SIZE                                   0x1
#define _TMR1H_TMR18_LENGTH                                 0x1
#define _TMR1H_TMR18_MASK                                   0x1
#define _TMR1H_TMR19_POSN                                   0x1
#define _TMR1H_TMR19_POSITION                               0x1
#define _TMR1H_TMR19_SIZE                                   0x1
#define _TMR1H_TMR19_LENGTH                                 0x1
#define _TMR1H_TMR19_MASK                                   0x2
#define _TMR1H_TMR110_POSN                                  0x2
#define _TMR1H_TMR110_POSITION                              0x2
#define _TMR1H_TMR110_SIZE                                  0x1
#define _TMR1H_TMR110_LENGTH                                0x1
#define _TMR1H_TMR110_MASK                                  0x4
#define _TMR1H_TMR111_POSN                                  0x3
#define _TMR1H_TMR111_POSITION                              0x3
#define _TMR1H_TMR111_SIZE                                  0x1
#define _TMR1H_TMR111_LENGTH                                0x1
#define _TMR1H_TMR111_MASK                                  0x8
#define _TMR1H_TMR112_POSN                                  0x4
#define _TMR1H_TMR112_POSITION                              0x4
#define _TMR1H_TMR112_SIZE                                  0x1
#define _TMR1H_TMR112_LENGTH                                0x1
#define _TMR1H_TMR112_MASK                                  0x10
#define _TMR1H_TMR113_POSN                                  0x5
#define _TMR1H_TMR113_POSITION                              0x5
#define _TMR1H_TMR113_SIZE                                  0x1
#define _TMR1H_TMR113_LENGTH                                0x1
#define _TMR1H_TMR113_MASK                                  0x20
#define _TMR1H_TMR114_POSN                                  0x6
#define _TMR1H_TMR114_POSITION                              0x6
#define _TMR1H_TMR114_SIZE                                  0x1
#define _TMR1H_TMR114_LENGTH                                0x1
#define _TMR1H_TMR114_MASK                                  0x40
#define _TMR1H_TMR115_POSN                                  0x7
#define _TMR1H_TMR115_POSITION                              0x7
#define _TMR1H_TMR115_SIZE                                  0x1
#define _TMR1H_TMR115_LENGTH                                0x1
#define _TMR1H_TMR115_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x20E);
#ifndef _LIB_BUILD
asm("T1CON equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned nT1SYNC                :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x20E);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x20F);
#ifndef _LIB_BUILD
asm("T1GCON equ 020Fh");
#endif
// aliases
extern volatile unsigned char           PR1                 __at(0x20F);
#ifndef _LIB_BUILD
asm("PR1 equ 020Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x20F);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} PR1bits_t;
extern volatile PR1bits_t PR1bits __at(0x20F);
// bitfield macros
#define _PR1_GVAL_POSN                                      0x2
#define _PR1_GVAL_POSITION                                  0x2
#define _PR1_GVAL_SIZE                                      0x1
#define _PR1_GVAL_LENGTH                                    0x1
#define _PR1_GVAL_MASK                                      0x4
#define _PR1_GGO_nDONE_POSN                                 0x3
#define _PR1_GGO_nDONE_POSITION                             0x3
#define _PR1_GGO_nDONE_SIZE                                 0x1
#define _PR1_GGO_nDONE_LENGTH                               0x1
#define _PR1_GGO_nDONE_MASK                                 0x8
#define _PR1_GSPM_POSN                                      0x4
#define _PR1_GSPM_POSITION                                  0x4
#define _PR1_GSPM_SIZE                                      0x1
#define _PR1_GSPM_LENGTH                                    0x1
#define _PR1_GSPM_MASK                                      0x10
#define _PR1_GTM_POSN                                       0x5
#define _PR1_GTM_POSITION                                   0x5
#define _PR1_GTM_SIZE                                       0x1
#define _PR1_GTM_LENGTH                                     0x1
#define _PR1_GTM_MASK                                       0x20
#define _PR1_GPOL_POSN                                      0x6
#define _PR1_GPOL_POSITION                                  0x6
#define _PR1_GPOL_SIZE                                      0x1
#define _PR1_GPOL_LENGTH                                    0x1
#define _PR1_GPOL_MASK                                      0x40
#define _PR1_GE_POSN                                        0x7
#define _PR1_GE_POSITION                                    0x7
#define _PR1_GE_SIZE                                        0x1
#define _PR1_GE_LENGTH                                      0x1
#define _PR1_GE_MASK                                        0x80
#define _PR1_T1GVAL_POSN                                    0x2
#define _PR1_T1GVAL_POSITION                                0x2
#define _PR1_T1GVAL_SIZE                                    0x1
#define _PR1_T1GVAL_LENGTH                                  0x1
#define _PR1_T1GVAL_MASK                                    0x4
#define _PR1_T1GGO_nDONE_POSN                               0x3
#define _PR1_T1GGO_nDONE_POSITION                           0x3
#define _PR1_T1GGO_nDONE_SIZE                               0x1
#define _PR1_T1GGO_nDONE_LENGTH                             0x1
#define _PR1_T1GGO_nDONE_MASK                               0x8
#define _PR1_T1GSPM_POSN                                    0x4
#define _PR1_T1GSPM_POSITION                                0x4
#define _PR1_T1GSPM_SIZE                                    0x1
#define _PR1_T1GSPM_LENGTH                                  0x1
#define _PR1_T1GSPM_MASK                                    0x10
#define _PR1_T1GTM_POSN                                     0x5
#define _PR1_T1GTM_POSITION                                 0x5
#define _PR1_T1GTM_SIZE                                     0x1
#define _PR1_T1GTM_LENGTH                                   0x1
#define _PR1_T1GTM_MASK                                     0x20
#define _PR1_T1GPOL_POSN                                    0x6
#define _PR1_T1GPOL_POSITION                                0x6
#define _PR1_T1GPOL_SIZE                                    0x1
#define _PR1_T1GPOL_LENGTH                                  0x1
#define _PR1_T1GPOL_MASK                                    0x40
#define _PR1_T1GE_POSN                                      0x7
#define _PR1_T1GE_POSITION                                  0x7
#define _PR1_T1GE_SIZE                                      0x1
#define _PR1_T1GE_LENGTH                                    0x1
#define _PR1_T1GE_MASK                                      0x80
#define _PR1_T1GGO_POSN                                     0x3
#define _PR1_T1GGO_POSITION                                 0x3
#define _PR1_T1GGO_SIZE                                     0x1
#define _PR1_T1GGO_LENGTH                                   0x1
#define _PR1_T1GGO_MASK                                     0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x210);
#ifndef _LIB_BUILD
asm("T1GATE equ 0210h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x210);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 0210h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x210);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x5
#define _T1GATE_GSS_LENGTH                                  0x5
#define _T1GATE_GSS_MASK                                    0x1F
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_GSS4_POSN                                   0x4
#define _T1GATE_GSS4_POSITION                               0x4
#define _T1GATE_GSS4_SIZE                                   0x1
#define _T1GATE_GSS4_LENGTH                                 0x1
#define _T1GATE_GSS4_MASK                                   0x10
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
#define _T1GATE_T1GSS4_POSN                                 0x4
#define _T1GATE_T1GSS4_POSITION                             0x4
#define _T1GATE_T1GSS4_SIZE                                 0x1
#define _T1GATE_T1GSS4_LENGTH                               0x1
#define _T1GATE_T1GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x210);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x5
#define _TMR1GATE_GSS_LENGTH                                0x5
#define _TMR1GATE_GSS_MASK                                  0x1F
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_GSS4_POSN                                 0x4
#define _TMR1GATE_GSS4_POSITION                             0x4
#define _TMR1GATE_GSS4_SIZE                                 0x1
#define _TMR1GATE_GSS4_LENGTH                               0x1
#define _TMR1GATE_GSS4_MASK                                 0x10
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8
#define _TMR1GATE_T1GSS4_POSN                               0x4
#define _TMR1GATE_T1GSS4_POSITION                           0x4
#define _TMR1GATE_T1GSS4_SIZE                               0x1
#define _TMR1GATE_T1GSS4_LENGTH                             0x1
#define _TMR1GATE_T1GSS4_MASK                               0x10

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x211);
#ifndef _LIB_BUILD
asm("T1CLK equ 0211h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x211);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x211);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x4
#define _T1CLK_CS_LENGTH                                    0x4
#define _T1CLK_CS_MASK                                      0xF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x211);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x4
#define _TMR1CLK_CS_LENGTH                                  0x4
#define _TMR1CLK_CS_MASK                                    0xF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8

// Register: TMR3
#define TMR3 TMR3
extern volatile unsigned short          TMR3                __at(0x212);
#ifndef _LIB_BUILD
asm("TMR3 equ 0212h");
#endif

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0x212);
#ifndef _LIB_BUILD
asm("TMR3L equ 0212h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L0                 :1;
        unsigned TMR3L1                 :1;
        unsigned TMR3L2                 :1;
        unsigned TMR3L3                 :1;
        unsigned TMR3L4                 :1;
        unsigned TMR3L5                 :1;
        unsigned TMR3L6                 :1;
        unsigned TMR3L7                 :1;
    };
    struct {
        unsigned TMR3L                  :8;
    };
    struct {
        unsigned TMR30                  :1;
        unsigned TMR31                  :1;
        unsigned TMR32                  :1;
        unsigned TMR33                  :1;
        unsigned TMR34                  :1;
        unsigned TMR35                  :1;
        unsigned TMR36                  :1;
        unsigned TMR37                  :1;
    };
    struct {
        unsigned CAL03                  :1;
        unsigned CAL13                  :1;
        unsigned CAL23                  :1;
        unsigned CAL33                  :1;
        unsigned CAL43                  :1;
        unsigned CAL53                  :1;
        unsigned CAL63                  :1;
        unsigned CAL73                  :1;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0x212);
// bitfield macros
#define _TMR3L_TMR3L0_POSN                                  0x0
#define _TMR3L_TMR3L0_POSITION                              0x0
#define _TMR3L_TMR3L0_SIZE                                  0x1
#define _TMR3L_TMR3L0_LENGTH                                0x1
#define _TMR3L_TMR3L0_MASK                                  0x1
#define _TMR3L_TMR3L1_POSN                                  0x1
#define _TMR3L_TMR3L1_POSITION                              0x1
#define _TMR3L_TMR3L1_SIZE                                  0x1
#define _TMR3L_TMR3L1_LENGTH                                0x1
#define _TMR3L_TMR3L1_MASK                                  0x2
#define _TMR3L_TMR3L2_POSN                                  0x2
#define _TMR3L_TMR3L2_POSITION                              0x2
#define _TMR3L_TMR3L2_SIZE                                  0x1
#define _TMR3L_TMR3L2_LENGTH                                0x1
#define _TMR3L_TMR3L2_MASK                                  0x4
#define _TMR3L_TMR3L3_POSN                                  0x3
#define _TMR3L_TMR3L3_POSITION                              0x3
#define _TMR3L_TMR3L3_SIZE                                  0x1
#define _TMR3L_TMR3L3_LENGTH                                0x1
#define _TMR3L_TMR3L3_MASK                                  0x8
#define _TMR3L_TMR3L4_POSN                                  0x4
#define _TMR3L_TMR3L4_POSITION                              0x4
#define _TMR3L_TMR3L4_SIZE                                  0x1
#define _TMR3L_TMR3L4_LENGTH                                0x1
#define _TMR3L_TMR3L4_MASK                                  0x10
#define _TMR3L_TMR3L5_POSN                                  0x5
#define _TMR3L_TMR3L5_POSITION                              0x5
#define _TMR3L_TMR3L5_SIZE                                  0x1
#define _TMR3L_TMR3L5_LENGTH                                0x1
#define _TMR3L_TMR3L5_MASK                                  0x20
#define _TMR3L_TMR3L6_POSN                                  0x6
#define _TMR3L_TMR3L6_POSITION                              0x6
#define _TMR3L_TMR3L6_SIZE                                  0x1
#define _TMR3L_TMR3L6_LENGTH                                0x1
#define _TMR3L_TMR3L6_MASK                                  0x40
#define _TMR3L_TMR3L7_POSN                                  0x7
#define _TMR3L_TMR3L7_POSITION                              0x7
#define _TMR3L_TMR3L7_SIZE                                  0x1
#define _TMR3L_TMR3L7_LENGTH                                0x1
#define _TMR3L_TMR3L7_MASK                                  0x80
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF
#define _TMR3L_TMR30_POSN                                   0x0
#define _TMR3L_TMR30_POSITION                               0x0
#define _TMR3L_TMR30_SIZE                                   0x1
#define _TMR3L_TMR30_LENGTH                                 0x1
#define _TMR3L_TMR30_MASK                                   0x1
#define _TMR3L_TMR31_POSN                                   0x1
#define _TMR3L_TMR31_POSITION                               0x1
#define _TMR3L_TMR31_SIZE                                   0x1
#define _TMR3L_TMR31_LENGTH                                 0x1
#define _TMR3L_TMR31_MASK                                   0x2
#define _TMR3L_TMR32_POSN                                   0x2
#define _TMR3L_TMR32_POSITION                               0x2
#define _TMR3L_TMR32_SIZE                                   0x1
#define _TMR3L_TMR32_LENGTH                                 0x1
#define _TMR3L_TMR32_MASK                                   0x4
#define _TMR3L_TMR33_POSN                                   0x3
#define _TMR3L_TMR33_POSITION                               0x3
#define _TMR3L_TMR33_SIZE                                   0x1
#define _TMR3L_TMR33_LENGTH                                 0x1
#define _TMR3L_TMR33_MASK                                   0x8
#define _TMR3L_TMR34_POSN                                   0x4
#define _TMR3L_TMR34_POSITION                               0x4
#define _TMR3L_TMR34_SIZE                                   0x1
#define _TMR3L_TMR34_LENGTH                                 0x1
#define _TMR3L_TMR34_MASK                                   0x10
#define _TMR3L_TMR35_POSN                                   0x5
#define _TMR3L_TMR35_POSITION                               0x5
#define _TMR3L_TMR35_SIZE                                   0x1
#define _TMR3L_TMR35_LENGTH                                 0x1
#define _TMR3L_TMR35_MASK                                   0x20
#define _TMR3L_TMR36_POSN                                   0x6
#define _TMR3L_TMR36_POSITION                               0x6
#define _TMR3L_TMR36_SIZE                                   0x1
#define _TMR3L_TMR36_LENGTH                                 0x1
#define _TMR3L_TMR36_MASK                                   0x40
#define _TMR3L_TMR37_POSN                                   0x7
#define _TMR3L_TMR37_POSITION                               0x7
#define _TMR3L_TMR37_SIZE                                   0x1
#define _TMR3L_TMR37_LENGTH                                 0x1
#define _TMR3L_TMR37_MASK                                   0x80
#define _TMR3L_CAL03_POSN                                   0x0
#define _TMR3L_CAL03_POSITION                               0x0
#define _TMR3L_CAL03_SIZE                                   0x1
#define _TMR3L_CAL03_LENGTH                                 0x1
#define _TMR3L_CAL03_MASK                                   0x1
#define _TMR3L_CAL13_POSN                                   0x1
#define _TMR3L_CAL13_POSITION                               0x1
#define _TMR3L_CAL13_SIZE                                   0x1
#define _TMR3L_CAL13_LENGTH                                 0x1
#define _TMR3L_CAL13_MASK                                   0x2
#define _TMR3L_CAL23_POSN                                   0x2
#define _TMR3L_CAL23_POSITION                               0x2
#define _TMR3L_CAL23_SIZE                                   0x1
#define _TMR3L_CAL23_LENGTH                                 0x1
#define _TMR3L_CAL23_MASK                                   0x4
#define _TMR3L_CAL33_POSN                                   0x3
#define _TMR3L_CAL33_POSITION                               0x3
#define _TMR3L_CAL33_SIZE                                   0x1
#define _TMR3L_CAL33_LENGTH                                 0x1
#define _TMR3L_CAL33_MASK                                   0x8
#define _TMR3L_CAL43_POSN                                   0x4
#define _TMR3L_CAL43_POSITION                               0x4
#define _TMR3L_CAL43_SIZE                                   0x1
#define _TMR3L_CAL43_LENGTH                                 0x1
#define _TMR3L_CAL43_MASK                                   0x10
#define _TMR3L_CAL53_POSN                                   0x5
#define _TMR3L_CAL53_POSITION                               0x5
#define _TMR3L_CAL53_SIZE                                   0x1
#define _TMR3L_CAL53_LENGTH                                 0x1
#define _TMR3L_CAL53_MASK                                   0x20
#define _TMR3L_CAL63_POSN                                   0x6
#define _TMR3L_CAL63_POSITION                               0x6
#define _TMR3L_CAL63_SIZE                                   0x1
#define _TMR3L_CAL63_LENGTH                                 0x1
#define _TMR3L_CAL63_MASK                                   0x40
#define _TMR3L_CAL73_POSN                                   0x7
#define _TMR3L_CAL73_POSITION                               0x7
#define _TMR3L_CAL73_SIZE                                   0x1
#define _TMR3L_CAL73_LENGTH                                 0x1
#define _TMR3L_CAL73_MASK                                   0x80

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0x213);
#ifndef _LIB_BUILD
asm("TMR3H equ 0213h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H0                 :1;
        unsigned TMR3H1                 :1;
        unsigned TMR3H2                 :1;
        unsigned TMR3H3                 :1;
        unsigned TMR3H4                 :1;
        unsigned TMR3H5                 :1;
        unsigned TMR3H6                 :1;
        unsigned TMR3H7                 :1;
    };
    struct {
        unsigned TMR3H                  :8;
    };
    struct {
        unsigned TMR38                  :1;
        unsigned TMR39                  :1;
        unsigned TMR310                 :1;
        unsigned TMR311                 :1;
        unsigned TMR312                 :1;
        unsigned TMR313                 :1;
        unsigned TMR314                 :1;
        unsigned TMR315                 :1;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0x213);
// bitfield macros
#define _TMR3H_TMR3H0_POSN                                  0x0
#define _TMR3H_TMR3H0_POSITION                              0x0
#define _TMR3H_TMR3H0_SIZE                                  0x1
#define _TMR3H_TMR3H0_LENGTH                                0x1
#define _TMR3H_TMR3H0_MASK                                  0x1
#define _TMR3H_TMR3H1_POSN                                  0x1
#define _TMR3H_TMR3H1_POSITION                              0x1
#define _TMR3H_TMR3H1_SIZE                                  0x1
#define _TMR3H_TMR3H1_LENGTH                                0x1
#define _TMR3H_TMR3H1_MASK                                  0x2
#define _TMR3H_TMR3H2_POSN                                  0x2
#define _TMR3H_TMR3H2_POSITION                              0x2
#define _TMR3H_TMR3H2_SIZE                                  0x1
#define _TMR3H_TMR3H2_LENGTH                                0x1
#define _TMR3H_TMR3H2_MASK                                  0x4
#define _TMR3H_TMR3H3_POSN                                  0x3
#define _TMR3H_TMR3H3_POSITION                              0x3
#define _TMR3H_TMR3H3_SIZE                                  0x1
#define _TMR3H_TMR3H3_LENGTH                                0x1
#define _TMR3H_TMR3H3_MASK                                  0x8
#define _TMR3H_TMR3H4_POSN                                  0x4
#define _TMR3H_TMR3H4_POSITION                              0x4
#define _TMR3H_TMR3H4_SIZE                                  0x1
#define _TMR3H_TMR3H4_LENGTH                                0x1
#define _TMR3H_TMR3H4_MASK                                  0x10
#define _TMR3H_TMR3H5_POSN                                  0x5
#define _TMR3H_TMR3H5_POSITION                              0x5
#define _TMR3H_TMR3H5_SIZE                                  0x1
#define _TMR3H_TMR3H5_LENGTH                                0x1
#define _TMR3H_TMR3H5_MASK                                  0x20
#define _TMR3H_TMR3H6_POSN                                  0x6
#define _TMR3H_TMR3H6_POSITION                              0x6
#define _TMR3H_TMR3H6_SIZE                                  0x1
#define _TMR3H_TMR3H6_LENGTH                                0x1
#define _TMR3H_TMR3H6_MASK                                  0x40
#define _TMR3H_TMR3H7_POSN                                  0x7
#define _TMR3H_TMR3H7_POSITION                              0x7
#define _TMR3H_TMR3H7_SIZE                                  0x1
#define _TMR3H_TMR3H7_LENGTH                                0x1
#define _TMR3H_TMR3H7_MASK                                  0x80
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF
#define _TMR3H_TMR38_POSN                                   0x0
#define _TMR3H_TMR38_POSITION                               0x0
#define _TMR3H_TMR38_SIZE                                   0x1
#define _TMR3H_TMR38_LENGTH                                 0x1
#define _TMR3H_TMR38_MASK                                   0x1
#define _TMR3H_TMR39_POSN                                   0x1
#define _TMR3H_TMR39_POSITION                               0x1
#define _TMR3H_TMR39_SIZE                                   0x1
#define _TMR3H_TMR39_LENGTH                                 0x1
#define _TMR3H_TMR39_MASK                                   0x2
#define _TMR3H_TMR310_POSN                                  0x2
#define _TMR3H_TMR310_POSITION                              0x2
#define _TMR3H_TMR310_SIZE                                  0x1
#define _TMR3H_TMR310_LENGTH                                0x1
#define _TMR3H_TMR310_MASK                                  0x4
#define _TMR3H_TMR311_POSN                                  0x3
#define _TMR3H_TMR311_POSITION                              0x3
#define _TMR3H_TMR311_SIZE                                  0x1
#define _TMR3H_TMR311_LENGTH                                0x1
#define _TMR3H_TMR311_MASK                                  0x8
#define _TMR3H_TMR312_POSN                                  0x4
#define _TMR3H_TMR312_POSITION                              0x4
#define _TMR3H_TMR312_SIZE                                  0x1
#define _TMR3H_TMR312_LENGTH                                0x1
#define _TMR3H_TMR312_MASK                                  0x10
#define _TMR3H_TMR313_POSN                                  0x5
#define _TMR3H_TMR313_POSITION                              0x5
#define _TMR3H_TMR313_SIZE                                  0x1
#define _TMR3H_TMR313_LENGTH                                0x1
#define _TMR3H_TMR313_MASK                                  0x20
#define _TMR3H_TMR314_POSN                                  0x6
#define _TMR3H_TMR314_POSITION                              0x6
#define _TMR3H_TMR314_SIZE                                  0x1
#define _TMR3H_TMR314_LENGTH                                0x1
#define _TMR3H_TMR314_MASK                                  0x40
#define _TMR3H_TMR315_POSN                                  0x7
#define _TMR3H_TMR315_POSITION                              0x7
#define _TMR3H_TMR315_SIZE                                  0x1
#define _TMR3H_TMR315_LENGTH                                0x1
#define _TMR3H_TMR315_MASK                                  0x80

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0x214);
#ifndef _LIB_BUILD
asm("T3CON equ 0214h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned T3RD16                 :1;
        unsigned nT3SYNC                :1;
        unsigned                        :1;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0x214);
// bitfield macros
#define _T3CON_ON_POSN                                      0x0
#define _T3CON_ON_POSITION                                  0x0
#define _T3CON_ON_SIZE                                      0x1
#define _T3CON_ON_LENGTH                                    0x1
#define _T3CON_ON_MASK                                      0x1
#define _T3CON_RD16_POSN                                    0x1
#define _T3CON_RD16_POSITION                                0x1
#define _T3CON_RD16_SIZE                                    0x1
#define _T3CON_RD16_LENGTH                                  0x1
#define _T3CON_RD16_MASK                                    0x2
#define _T3CON_nSYNC_POSN                                   0x2
#define _T3CON_nSYNC_POSITION                               0x2
#define _T3CON_nSYNC_SIZE                                   0x1
#define _T3CON_nSYNC_LENGTH                                 0x1
#define _T3CON_nSYNC_MASK                                   0x4
#define _T3CON_CKPS_POSN                                    0x4
#define _T3CON_CKPS_POSITION                                0x4
#define _T3CON_CKPS_SIZE                                    0x2
#define _T3CON_CKPS_LENGTH                                  0x2
#define _T3CON_CKPS_MASK                                    0x30
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_T3RD16_POSN                                  0x1
#define _T3CON_T3RD16_POSITION                              0x1
#define _T3CON_T3RD16_SIZE                                  0x1
#define _T3CON_T3RD16_LENGTH                                0x1
#define _T3CON_T3RD16_MASK                                  0x2
#define _T3CON_nT3SYNC_POSN                                 0x2
#define _T3CON_nT3SYNC_POSITION                             0x2
#define _T3CON_nT3SYNC_SIZE                                 0x1
#define _T3CON_nT3SYNC_LENGTH                               0x1
#define _T3CON_nT3SYNC_MASK                                 0x4
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_CKPS0_POSN                                   0x4
#define _T3CON_CKPS0_POSITION                               0x4
#define _T3CON_CKPS0_SIZE                                   0x1
#define _T3CON_CKPS0_LENGTH                                 0x1
#define _T3CON_CKPS0_MASK                                   0x10
#define _T3CON_CKPS1_POSN                                   0x5
#define _T3CON_CKPS1_POSITION                               0x5
#define _T3CON_CKPS1_SIZE                                   0x1
#define _T3CON_CKPS1_LENGTH                                 0x1
#define _T3CON_CKPS1_MASK                                   0x20
#define _T3CON_RD163_POSN                                   0x1
#define _T3CON_RD163_POSITION                               0x1
#define _T3CON_RD163_SIZE                                   0x1
#define _T3CON_RD163_LENGTH                                 0x1
#define _T3CON_RD163_MASK                                   0x2

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0x215);
#ifndef _LIB_BUILD
asm("T3GCON equ 0215h");
#endif
// aliases
extern volatile unsigned char           PR3                 __at(0x215);
#ifndef _LIB_BUILD
asm("PR3 equ 0215h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nDONE            :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3GGO                  :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0x215);
// bitfield macros
#define _T3GCON_GVAL_POSN                                   0x2
#define _T3GCON_GVAL_POSITION                               0x2
#define _T3GCON_GVAL_SIZE                                   0x1
#define _T3GCON_GVAL_LENGTH                                 0x1
#define _T3GCON_GVAL_MASK                                   0x4
#define _T3GCON_GGO_nDONE_POSN                              0x3
#define _T3GCON_GGO_nDONE_POSITION                          0x3
#define _T3GCON_GGO_nDONE_SIZE                              0x1
#define _T3GCON_GGO_nDONE_LENGTH                            0x1
#define _T3GCON_GGO_nDONE_MASK                              0x8
#define _T3GCON_GSPM_POSN                                   0x4
#define _T3GCON_GSPM_POSITION                               0x4
#define _T3GCON_GSPM_SIZE                                   0x1
#define _T3GCON_GSPM_LENGTH                                 0x1
#define _T3GCON_GSPM_MASK                                   0x10
#define _T3GCON_GTM_POSN                                    0x5
#define _T3GCON_GTM_POSITION                                0x5
#define _T3GCON_GTM_SIZE                                    0x1
#define _T3GCON_GTM_LENGTH                                  0x1
#define _T3GCON_GTM_MASK                                    0x20
#define _T3GCON_GPOL_POSN                                   0x6
#define _T3GCON_GPOL_POSITION                               0x6
#define _T3GCON_GPOL_SIZE                                   0x1
#define _T3GCON_GPOL_LENGTH                                 0x1
#define _T3GCON_GPOL_MASK                                   0x40
#define _T3GCON_GE_POSN                                     0x7
#define _T3GCON_GE_POSITION                                 0x7
#define _T3GCON_GE_SIZE                                     0x1
#define _T3GCON_GE_LENGTH                                   0x1
#define _T3GCON_GE_MASK                                     0x80
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_nDONE_POSN                            0x3
#define _T3GCON_T3GGO_nDONE_POSITION                        0x3
#define _T3GCON_T3GGO_nDONE_SIZE                            0x1
#define _T3GCON_T3GGO_nDONE_LENGTH                          0x1
#define _T3GCON_T3GGO_nDONE_MASK                            0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_T3GE_POSN                                   0x7
#define _T3GCON_T3GE_POSITION                               0x7
#define _T3GCON_T3GE_SIZE                                   0x1
#define _T3GCON_T3GE_LENGTH                                 0x1
#define _T3GCON_T3GE_MASK                                   0x80
#define _T3GCON_T3GGO_POSN                                  0x3
#define _T3GCON_T3GGO_POSITION                              0x3
#define _T3GCON_T3GGO_SIZE                                  0x1
#define _T3GCON_T3GGO_LENGTH                                0x1
#define _T3GCON_T3GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nDONE            :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3GGO                  :1;
    };
} PR3bits_t;
extern volatile PR3bits_t PR3bits __at(0x215);
// bitfield macros
#define _PR3_GVAL_POSN                                      0x2
#define _PR3_GVAL_POSITION                                  0x2
#define _PR3_GVAL_SIZE                                      0x1
#define _PR3_GVAL_LENGTH                                    0x1
#define _PR3_GVAL_MASK                                      0x4
#define _PR3_GGO_nDONE_POSN                                 0x3
#define _PR3_GGO_nDONE_POSITION                             0x3
#define _PR3_GGO_nDONE_SIZE                                 0x1
#define _PR3_GGO_nDONE_LENGTH                               0x1
#define _PR3_GGO_nDONE_MASK                                 0x8
#define _PR3_GSPM_POSN                                      0x4
#define _PR3_GSPM_POSITION                                  0x4
#define _PR3_GSPM_SIZE                                      0x1
#define _PR3_GSPM_LENGTH                                    0x1
#define _PR3_GSPM_MASK                                      0x10
#define _PR3_GTM_POSN                                       0x5
#define _PR3_GTM_POSITION                                   0x5
#define _PR3_GTM_SIZE                                       0x1
#define _PR3_GTM_LENGTH                                     0x1
#define _PR3_GTM_MASK                                       0x20
#define _PR3_GPOL_POSN                                      0x6
#define _PR3_GPOL_POSITION                                  0x6
#define _PR3_GPOL_SIZE                                      0x1
#define _PR3_GPOL_LENGTH                                    0x1
#define _PR3_GPOL_MASK                                      0x40
#define _PR3_GE_POSN                                        0x7
#define _PR3_GE_POSITION                                    0x7
#define _PR3_GE_SIZE                                        0x1
#define _PR3_GE_LENGTH                                      0x1
#define _PR3_GE_MASK                                        0x80
#define _PR3_T3GVAL_POSN                                    0x2
#define _PR3_T3GVAL_POSITION                                0x2
#define _PR3_T3GVAL_SIZE                                    0x1
#define _PR3_T3GVAL_LENGTH                                  0x1
#define _PR3_T3GVAL_MASK                                    0x4
#define _PR3_T3GGO_nDONE_POSN                               0x3
#define _PR3_T3GGO_nDONE_POSITION                           0x3
#define _PR3_T3GGO_nDONE_SIZE                               0x1
#define _PR3_T3GGO_nDONE_LENGTH                             0x1
#define _PR3_T3GGO_nDONE_MASK                               0x8
#define _PR3_T3GSPM_POSN                                    0x4
#define _PR3_T3GSPM_POSITION                                0x4
#define _PR3_T3GSPM_SIZE                                    0x1
#define _PR3_T3GSPM_LENGTH                                  0x1
#define _PR3_T3GSPM_MASK                                    0x10
#define _PR3_T3GTM_POSN                                     0x5
#define _PR3_T3GTM_POSITION                                 0x5
#define _PR3_T3GTM_SIZE                                     0x1
#define _PR3_T3GTM_LENGTH                                   0x1
#define _PR3_T3GTM_MASK                                     0x20
#define _PR3_T3GPOL_POSN                                    0x6
#define _PR3_T3GPOL_POSITION                                0x6
#define _PR3_T3GPOL_SIZE                                    0x1
#define _PR3_T3GPOL_LENGTH                                  0x1
#define _PR3_T3GPOL_MASK                                    0x40
#define _PR3_T3GE_POSN                                      0x7
#define _PR3_T3GE_POSITION                                  0x7
#define _PR3_T3GE_SIZE                                      0x1
#define _PR3_T3GE_LENGTH                                    0x1
#define _PR3_T3GE_MASK                                      0x80
#define _PR3_T3GGO_POSN                                     0x3
#define _PR3_T3GGO_POSITION                                 0x3
#define _PR3_T3GGO_SIZE                                     0x1
#define _PR3_T3GGO_LENGTH                                   0x1
#define _PR3_T3GGO_MASK                                     0x8

// Register: T3GATE
#define T3GATE T3GATE
extern volatile unsigned char           T3GATE              __at(0x216);
#ifndef _LIB_BUILD
asm("T3GATE equ 0216h");
#endif
// aliases
extern volatile unsigned char           TMR3GATE            __at(0x216);
#ifndef _LIB_BUILD
asm("TMR3GATE equ 0216h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
        unsigned T3GSS4                 :1;
    };
} T3GATEbits_t;
extern volatile T3GATEbits_t T3GATEbits __at(0x216);
// bitfield macros
#define _T3GATE_GSS_POSN                                    0x0
#define _T3GATE_GSS_POSITION                                0x0
#define _T3GATE_GSS_SIZE                                    0x5
#define _T3GATE_GSS_LENGTH                                  0x5
#define _T3GATE_GSS_MASK                                    0x1F
#define _T3GATE_GSS0_POSN                                   0x0
#define _T3GATE_GSS0_POSITION                               0x0
#define _T3GATE_GSS0_SIZE                                   0x1
#define _T3GATE_GSS0_LENGTH                                 0x1
#define _T3GATE_GSS0_MASK                                   0x1
#define _T3GATE_GSS1_POSN                                   0x1
#define _T3GATE_GSS1_POSITION                               0x1
#define _T3GATE_GSS1_SIZE                                   0x1
#define _T3GATE_GSS1_LENGTH                                 0x1
#define _T3GATE_GSS1_MASK                                   0x2
#define _T3GATE_GSS2_POSN                                   0x2
#define _T3GATE_GSS2_POSITION                               0x2
#define _T3GATE_GSS2_SIZE                                   0x1
#define _T3GATE_GSS2_LENGTH                                 0x1
#define _T3GATE_GSS2_MASK                                   0x4
#define _T3GATE_GSS3_POSN                                   0x3
#define _T3GATE_GSS3_POSITION                               0x3
#define _T3GATE_GSS3_SIZE                                   0x1
#define _T3GATE_GSS3_LENGTH                                 0x1
#define _T3GATE_GSS3_MASK                                   0x8
#define _T3GATE_GSS4_POSN                                   0x4
#define _T3GATE_GSS4_POSITION                               0x4
#define _T3GATE_GSS4_SIZE                                   0x1
#define _T3GATE_GSS4_LENGTH                                 0x1
#define _T3GATE_GSS4_MASK                                   0x10
#define _T3GATE_T3GSS0_POSN                                 0x0
#define _T3GATE_T3GSS0_POSITION                             0x0
#define _T3GATE_T3GSS0_SIZE                                 0x1
#define _T3GATE_T3GSS0_LENGTH                               0x1
#define _T3GATE_T3GSS0_MASK                                 0x1
#define _T3GATE_T3GSS1_POSN                                 0x1
#define _T3GATE_T3GSS1_POSITION                             0x1
#define _T3GATE_T3GSS1_SIZE                                 0x1
#define _T3GATE_T3GSS1_LENGTH                               0x1
#define _T3GATE_T3GSS1_MASK                                 0x2
#define _T3GATE_T3GSS2_POSN                                 0x2
#define _T3GATE_T3GSS2_POSITION                             0x2
#define _T3GATE_T3GSS2_SIZE                                 0x1
#define _T3GATE_T3GSS2_LENGTH                               0x1
#define _T3GATE_T3GSS2_MASK                                 0x4
#define _T3GATE_T3GSS3_POSN                                 0x3
#define _T3GATE_T3GSS3_POSITION                             0x3
#define _T3GATE_T3GSS3_SIZE                                 0x1
#define _T3GATE_T3GSS3_LENGTH                               0x1
#define _T3GATE_T3GSS3_MASK                                 0x8
#define _T3GATE_T3GSS4_POSN                                 0x4
#define _T3GATE_T3GSS4_POSITION                             0x4
#define _T3GATE_T3GSS4_SIZE                                 0x1
#define _T3GATE_T3GSS4_LENGTH                               0x1
#define _T3GATE_T3GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
        unsigned T3GSS4                 :1;
    };
} TMR3GATEbits_t;
extern volatile TMR3GATEbits_t TMR3GATEbits __at(0x216);
// bitfield macros
#define _TMR3GATE_GSS_POSN                                  0x0
#define _TMR3GATE_GSS_POSITION                              0x0
#define _TMR3GATE_GSS_SIZE                                  0x5
#define _TMR3GATE_GSS_LENGTH                                0x5
#define _TMR3GATE_GSS_MASK                                  0x1F
#define _TMR3GATE_GSS0_POSN                                 0x0
#define _TMR3GATE_GSS0_POSITION                             0x0
#define _TMR3GATE_GSS0_SIZE                                 0x1
#define _TMR3GATE_GSS0_LENGTH                               0x1
#define _TMR3GATE_GSS0_MASK                                 0x1
#define _TMR3GATE_GSS1_POSN                                 0x1
#define _TMR3GATE_GSS1_POSITION                             0x1
#define _TMR3GATE_GSS1_SIZE                                 0x1
#define _TMR3GATE_GSS1_LENGTH                               0x1
#define _TMR3GATE_GSS1_MASK                                 0x2
#define _TMR3GATE_GSS2_POSN                                 0x2
#define _TMR3GATE_GSS2_POSITION                             0x2
#define _TMR3GATE_GSS2_SIZE                                 0x1
#define _TMR3GATE_GSS2_LENGTH                               0x1
#define _TMR3GATE_GSS2_MASK                                 0x4
#define _TMR3GATE_GSS3_POSN                                 0x3
#define _TMR3GATE_GSS3_POSITION                             0x3
#define _TMR3GATE_GSS3_SIZE                                 0x1
#define _TMR3GATE_GSS3_LENGTH                               0x1
#define _TMR3GATE_GSS3_MASK                                 0x8
#define _TMR3GATE_GSS4_POSN                                 0x4
#define _TMR3GATE_GSS4_POSITION                             0x4
#define _TMR3GATE_GSS4_SIZE                                 0x1
#define _TMR3GATE_GSS4_LENGTH                               0x1
#define _TMR3GATE_GSS4_MASK                                 0x10
#define _TMR3GATE_T3GSS0_POSN                               0x0
#define _TMR3GATE_T3GSS0_POSITION                           0x0
#define _TMR3GATE_T3GSS0_SIZE                               0x1
#define _TMR3GATE_T3GSS0_LENGTH                             0x1
#define _TMR3GATE_T3GSS0_MASK                               0x1
#define _TMR3GATE_T3GSS1_POSN                               0x1
#define _TMR3GATE_T3GSS1_POSITION                           0x1
#define _TMR3GATE_T3GSS1_SIZE                               0x1
#define _TMR3GATE_T3GSS1_LENGTH                             0x1
#define _TMR3GATE_T3GSS1_MASK                               0x2
#define _TMR3GATE_T3GSS2_POSN                               0x2
#define _TMR3GATE_T3GSS2_POSITION                           0x2
#define _TMR3GATE_T3GSS2_SIZE                               0x1
#define _TMR3GATE_T3GSS2_LENGTH                             0x1
#define _TMR3GATE_T3GSS2_MASK                               0x4
#define _TMR3GATE_T3GSS3_POSN                               0x3
#define _TMR3GATE_T3GSS3_POSITION                           0x3
#define _TMR3GATE_T3GSS3_SIZE                               0x1
#define _TMR3GATE_T3GSS3_LENGTH                             0x1
#define _TMR3GATE_T3GSS3_MASK                               0x8
#define _TMR3GATE_T3GSS4_POSN                               0x4
#define _TMR3GATE_T3GSS4_POSITION                           0x4
#define _TMR3GATE_T3GSS4_SIZE                               0x1
#define _TMR3GATE_T3GSS4_LENGTH                             0x1
#define _TMR3GATE_T3GSS4_MASK                               0x10

// Register: T3CLK
#define T3CLK T3CLK
extern volatile unsigned char           T3CLK               __at(0x217);
#ifndef _LIB_BUILD
asm("T3CLK equ 0217h");
#endif
// aliases
extern volatile unsigned char           TMR3CLK             __at(0x217);
#ifndef _LIB_BUILD
asm("TMR3CLK equ 0217h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T3CLKbits_t;
extern volatile T3CLKbits_t T3CLKbits __at(0x217);
// bitfield macros
#define _T3CLK_CS_POSN                                      0x0
#define _T3CLK_CS_POSITION                                  0x0
#define _T3CLK_CS_SIZE                                      0x4
#define _T3CLK_CS_LENGTH                                    0x4
#define _T3CLK_CS_MASK                                      0xF
#define _T3CLK_T3CS0_POSN                                   0x0
#define _T3CLK_T3CS0_POSITION                               0x0
#define _T3CLK_T3CS0_SIZE                                   0x1
#define _T3CLK_T3CS0_LENGTH                                 0x1
#define _T3CLK_T3CS0_MASK                                   0x1
#define _T3CLK_T3CS1_POSN                                   0x1
#define _T3CLK_T3CS1_POSITION                               0x1
#define _T3CLK_T3CS1_SIZE                                   0x1
#define _T3CLK_T3CS1_LENGTH                                 0x1
#define _T3CLK_T3CS1_MASK                                   0x2
#define _T3CLK_T3CS2_POSN                                   0x2
#define _T3CLK_T3CS2_POSITION                               0x2
#define _T3CLK_T3CS2_SIZE                                   0x1
#define _T3CLK_T3CS2_LENGTH                                 0x1
#define _T3CLK_T3CS2_MASK                                   0x4
#define _T3CLK_T3CS3_POSN                                   0x3
#define _T3CLK_T3CS3_POSITION                               0x3
#define _T3CLK_T3CS3_SIZE                                   0x1
#define _T3CLK_T3CS3_LENGTH                                 0x1
#define _T3CLK_T3CS3_MASK                                   0x8
#define _T3CLK_CS0_POSN                                     0x0
#define _T3CLK_CS0_POSITION                                 0x0
#define _T3CLK_CS0_SIZE                                     0x1
#define _T3CLK_CS0_LENGTH                                   0x1
#define _T3CLK_CS0_MASK                                     0x1
#define _T3CLK_CS1_POSN                                     0x1
#define _T3CLK_CS1_POSITION                                 0x1
#define _T3CLK_CS1_SIZE                                     0x1
#define _T3CLK_CS1_LENGTH                                   0x1
#define _T3CLK_CS1_MASK                                     0x2
#define _T3CLK_CS2_POSN                                     0x2
#define _T3CLK_CS2_POSITION                                 0x2
#define _T3CLK_CS2_SIZE                                     0x1
#define _T3CLK_CS2_LENGTH                                   0x1
#define _T3CLK_CS2_MASK                                     0x4
#define _T3CLK_CS3_POSN                                     0x3
#define _T3CLK_CS3_POSITION                                 0x3
#define _T3CLK_CS3_SIZE                                     0x1
#define _T3CLK_CS3_LENGTH                                   0x1
#define _T3CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR3CLKbits_t;
extern volatile TMR3CLKbits_t TMR3CLKbits __at(0x217);
// bitfield macros
#define _TMR3CLK_CS_POSN                                    0x0
#define _TMR3CLK_CS_POSITION                                0x0
#define _TMR3CLK_CS_SIZE                                    0x4
#define _TMR3CLK_CS_LENGTH                                  0x4
#define _TMR3CLK_CS_MASK                                    0xF
#define _TMR3CLK_T3CS0_POSN                                 0x0
#define _TMR3CLK_T3CS0_POSITION                             0x0
#define _TMR3CLK_T3CS0_SIZE                                 0x1
#define _TMR3CLK_T3CS0_LENGTH                               0x1
#define _TMR3CLK_T3CS0_MASK                                 0x1
#define _TMR3CLK_T3CS1_POSN                                 0x1
#define _TMR3CLK_T3CS1_POSITION                             0x1
#define _TMR3CLK_T3CS1_SIZE                                 0x1
#define _TMR3CLK_T3CS1_LENGTH                               0x1
#define _TMR3CLK_T3CS1_MASK                                 0x2
#define _TMR3CLK_T3CS2_POSN                                 0x2
#define _TMR3CLK_T3CS2_POSITION                             0x2
#define _TMR3CLK_T3CS2_SIZE                                 0x1
#define _TMR3CLK_T3CS2_LENGTH                               0x1
#define _TMR3CLK_T3CS2_MASK                                 0x4
#define _TMR3CLK_T3CS3_POSN                                 0x3
#define _TMR3CLK_T3CS3_POSITION                             0x3
#define _TMR3CLK_T3CS3_SIZE                                 0x1
#define _TMR3CLK_T3CS3_LENGTH                               0x1
#define _TMR3CLK_T3CS3_MASK                                 0x8
#define _TMR3CLK_CS0_POSN                                   0x0
#define _TMR3CLK_CS0_POSITION                               0x0
#define _TMR3CLK_CS0_SIZE                                   0x1
#define _TMR3CLK_CS0_LENGTH                                 0x1
#define _TMR3CLK_CS0_MASK                                   0x1
#define _TMR3CLK_CS1_POSN                                   0x1
#define _TMR3CLK_CS1_POSITION                               0x1
#define _TMR3CLK_CS1_SIZE                                   0x1
#define _TMR3CLK_CS1_LENGTH                                 0x1
#define _TMR3CLK_CS1_MASK                                   0x2
#define _TMR3CLK_CS2_POSN                                   0x2
#define _TMR3CLK_CS2_POSITION                               0x2
#define _TMR3CLK_CS2_SIZE                                   0x1
#define _TMR3CLK_CS2_LENGTH                                 0x1
#define _TMR3CLK_CS2_MASK                                   0x4
#define _TMR3CLK_CS3_POSN                                   0x3
#define _TMR3CLK_CS3_POSITION                               0x3
#define _TMR3CLK_CS3_SIZE                                   0x1
#define _TMR3CLK_CS3_LENGTH                                 0x1
#define _TMR3CLK_CS3_MASK                                   0x8

// Register: TMR5
#define TMR5 TMR5
extern volatile unsigned short          TMR5                __at(0x218);
#ifndef _LIB_BUILD
asm("TMR5 equ 0218h");
#endif

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0x218);
#ifndef _LIB_BUILD
asm("TMR5L equ 0218h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5L0                 :1;
        unsigned TMR5L1                 :1;
        unsigned TMR5L2                 :1;
        unsigned TMR5L3                 :1;
        unsigned TMR5L4                 :1;
        unsigned TMR5L5                 :1;
        unsigned TMR5L6                 :1;
        unsigned TMR5L7                 :1;
    };
    struct {
        unsigned TMR5L                  :8;
    };
    struct {
        unsigned TMR50                  :1;
        unsigned TMR51                  :1;
        unsigned TMR52                  :1;
        unsigned TMR53                  :1;
        unsigned TMR54                  :1;
        unsigned TMR55                  :1;
        unsigned TMR56                  :1;
        unsigned TMR57                  :1;
    };
    struct {
        unsigned CAL05                  :1;
        unsigned CAL15                  :1;
        unsigned CAL25                  :1;
        unsigned CAL35                  :1;
        unsigned CAL45                  :1;
        unsigned CAL55                  :1;
        unsigned CAL65                  :1;
        unsigned CAL75                  :1;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0x218);
// bitfield macros
#define _TMR5L_TMR5L0_POSN                                  0x0
#define _TMR5L_TMR5L0_POSITION                              0x0
#define _TMR5L_TMR5L0_SIZE                                  0x1
#define _TMR5L_TMR5L0_LENGTH                                0x1
#define _TMR5L_TMR5L0_MASK                                  0x1
#define _TMR5L_TMR5L1_POSN                                  0x1
#define _TMR5L_TMR5L1_POSITION                              0x1
#define _TMR5L_TMR5L1_SIZE                                  0x1
#define _TMR5L_TMR5L1_LENGTH                                0x1
#define _TMR5L_TMR5L1_MASK                                  0x2
#define _TMR5L_TMR5L2_POSN                                  0x2
#define _TMR5L_TMR5L2_POSITION                              0x2
#define _TMR5L_TMR5L2_SIZE                                  0x1
#define _TMR5L_TMR5L2_LENGTH                                0x1
#define _TMR5L_TMR5L2_MASK                                  0x4
#define _TMR5L_TMR5L3_POSN                                  0x3
#define _TMR5L_TMR5L3_POSITION                              0x3
#define _TMR5L_TMR5L3_SIZE                                  0x1
#define _TMR5L_TMR5L3_LENGTH                                0x1
#define _TMR5L_TMR5L3_MASK                                  0x8
#define _TMR5L_TMR5L4_POSN                                  0x4
#define _TMR5L_TMR5L4_POSITION                              0x4
#define _TMR5L_TMR5L4_SIZE                                  0x1
#define _TMR5L_TMR5L4_LENGTH                                0x1
#define _TMR5L_TMR5L4_MASK                                  0x10
#define _TMR5L_TMR5L5_POSN                                  0x5
#define _TMR5L_TMR5L5_POSITION                              0x5
#define _TMR5L_TMR5L5_SIZE                                  0x1
#define _TMR5L_TMR5L5_LENGTH                                0x1
#define _TMR5L_TMR5L5_MASK                                  0x20
#define _TMR5L_TMR5L6_POSN                                  0x6
#define _TMR5L_TMR5L6_POSITION                              0x6
#define _TMR5L_TMR5L6_SIZE                                  0x1
#define _TMR5L_TMR5L6_LENGTH                                0x1
#define _TMR5L_TMR5L6_MASK                                  0x40
#define _TMR5L_TMR5L7_POSN                                  0x7
#define _TMR5L_TMR5L7_POSITION                              0x7
#define _TMR5L_TMR5L7_SIZE                                  0x1
#define _TMR5L_TMR5L7_LENGTH                                0x1
#define _TMR5L_TMR5L7_MASK                                  0x80
#define _TMR5L_TMR5L_POSN                                   0x0
#define _TMR5L_TMR5L_POSITION                               0x0
#define _TMR5L_TMR5L_SIZE                                   0x8
#define _TMR5L_TMR5L_LENGTH                                 0x8
#define _TMR5L_TMR5L_MASK                                   0xFF
#define _TMR5L_TMR50_POSN                                   0x0
#define _TMR5L_TMR50_POSITION                               0x0
#define _TMR5L_TMR50_SIZE                                   0x1
#define _TMR5L_TMR50_LENGTH                                 0x1
#define _TMR5L_TMR50_MASK                                   0x1
#define _TMR5L_TMR51_POSN                                   0x1
#define _TMR5L_TMR51_POSITION                               0x1
#define _TMR5L_TMR51_SIZE                                   0x1
#define _TMR5L_TMR51_LENGTH                                 0x1
#define _TMR5L_TMR51_MASK                                   0x2
#define _TMR5L_TMR52_POSN                                   0x2
#define _TMR5L_TMR52_POSITION                               0x2
#define _TMR5L_TMR52_SIZE                                   0x1
#define _TMR5L_TMR52_LENGTH                                 0x1
#define _TMR5L_TMR52_MASK                                   0x4
#define _TMR5L_TMR53_POSN                                   0x3
#define _TMR5L_TMR53_POSITION                               0x3
#define _TMR5L_TMR53_SIZE                                   0x1
#define _TMR5L_TMR53_LENGTH                                 0x1
#define _TMR5L_TMR53_MASK                                   0x8
#define _TMR5L_TMR54_POSN                                   0x4
#define _TMR5L_TMR54_POSITION                               0x4
#define _TMR5L_TMR54_SIZE                                   0x1
#define _TMR5L_TMR54_LENGTH                                 0x1
#define _TMR5L_TMR54_MASK                                   0x10
#define _TMR5L_TMR55_POSN                                   0x5
#define _TMR5L_TMR55_POSITION                               0x5
#define _TMR5L_TMR55_SIZE                                   0x1
#define _TMR5L_TMR55_LENGTH                                 0x1
#define _TMR5L_TMR55_MASK                                   0x20
#define _TMR5L_TMR56_POSN                                   0x6
#define _TMR5L_TMR56_POSITION                               0x6
#define _TMR5L_TMR56_SIZE                                   0x1
#define _TMR5L_TMR56_LENGTH                                 0x1
#define _TMR5L_TMR56_MASK                                   0x40
#define _TMR5L_TMR57_POSN                                   0x7
#define _TMR5L_TMR57_POSITION                               0x7
#define _TMR5L_TMR57_SIZE                                   0x1
#define _TMR5L_TMR57_LENGTH                                 0x1
#define _TMR5L_TMR57_MASK                                   0x80
#define _TMR5L_CAL05_POSN                                   0x0
#define _TMR5L_CAL05_POSITION                               0x0
#define _TMR5L_CAL05_SIZE                                   0x1
#define _TMR5L_CAL05_LENGTH                                 0x1
#define _TMR5L_CAL05_MASK                                   0x1
#define _TMR5L_CAL15_POSN                                   0x1
#define _TMR5L_CAL15_POSITION                               0x1
#define _TMR5L_CAL15_SIZE                                   0x1
#define _TMR5L_CAL15_LENGTH                                 0x1
#define _TMR5L_CAL15_MASK                                   0x2
#define _TMR5L_CAL25_POSN                                   0x2
#define _TMR5L_CAL25_POSITION                               0x2
#define _TMR5L_CAL25_SIZE                                   0x1
#define _TMR5L_CAL25_LENGTH                                 0x1
#define _TMR5L_CAL25_MASK                                   0x4
#define _TMR5L_CAL35_POSN                                   0x3
#define _TMR5L_CAL35_POSITION                               0x3
#define _TMR5L_CAL35_SIZE                                   0x1
#define _TMR5L_CAL35_LENGTH                                 0x1
#define _TMR5L_CAL35_MASK                                   0x8
#define _TMR5L_CAL45_POSN                                   0x4
#define _TMR5L_CAL45_POSITION                               0x4
#define _TMR5L_CAL45_SIZE                                   0x1
#define _TMR5L_CAL45_LENGTH                                 0x1
#define _TMR5L_CAL45_MASK                                   0x10
#define _TMR5L_CAL55_POSN                                   0x5
#define _TMR5L_CAL55_POSITION                               0x5
#define _TMR5L_CAL55_SIZE                                   0x1
#define _TMR5L_CAL55_LENGTH                                 0x1
#define _TMR5L_CAL55_MASK                                   0x20
#define _TMR5L_CAL65_POSN                                   0x6
#define _TMR5L_CAL65_POSITION                               0x6
#define _TMR5L_CAL65_SIZE                                   0x1
#define _TMR5L_CAL65_LENGTH                                 0x1
#define _TMR5L_CAL65_MASK                                   0x40
#define _TMR5L_CAL75_POSN                                   0x7
#define _TMR5L_CAL75_POSITION                               0x7
#define _TMR5L_CAL75_SIZE                                   0x1
#define _TMR5L_CAL75_LENGTH                                 0x1
#define _TMR5L_CAL75_MASK                                   0x80

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0x219);
#ifndef _LIB_BUILD
asm("TMR5H equ 0219h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5H0                 :1;
        unsigned TMR5H1                 :1;
        unsigned TMR5H2                 :1;
        unsigned TMR5H3                 :1;
        unsigned TMR5H4                 :1;
        unsigned TMR5H5                 :1;
        unsigned TMR5H6                 :1;
        unsigned TMR5H7                 :1;
    };
    struct {
        unsigned TMR5H                  :8;
    };
    struct {
        unsigned TMR58                  :1;
        unsigned TMR59                  :1;
        unsigned TMR510                 :1;
        unsigned TMR511                 :1;
        unsigned TMR512                 :1;
        unsigned TMR513                 :1;
        unsigned TMR514                 :1;
        unsigned TMR515                 :1;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0x219);
// bitfield macros
#define _TMR5H_TMR5H0_POSN                                  0x0
#define _TMR5H_TMR5H0_POSITION                              0x0
#define _TMR5H_TMR5H0_SIZE                                  0x1
#define _TMR5H_TMR5H0_LENGTH                                0x1
#define _TMR5H_TMR5H0_MASK                                  0x1
#define _TMR5H_TMR5H1_POSN                                  0x1
#define _TMR5H_TMR5H1_POSITION                              0x1
#define _TMR5H_TMR5H1_SIZE                                  0x1
#define _TMR5H_TMR5H1_LENGTH                                0x1
#define _TMR5H_TMR5H1_MASK                                  0x2
#define _TMR5H_TMR5H2_POSN                                  0x2
#define _TMR5H_TMR5H2_POSITION                              0x2
#define _TMR5H_TMR5H2_SIZE                                  0x1
#define _TMR5H_TMR5H2_LENGTH                                0x1
#define _TMR5H_TMR5H2_MASK                                  0x4
#define _TMR5H_TMR5H3_POSN                                  0x3
#define _TMR5H_TMR5H3_POSITION                              0x3
#define _TMR5H_TMR5H3_SIZE                                  0x1
#define _TMR5H_TMR5H3_LENGTH                                0x1
#define _TMR5H_TMR5H3_MASK                                  0x8
#define _TMR5H_TMR5H4_POSN                                  0x4
#define _TMR5H_TMR5H4_POSITION                              0x4
#define _TMR5H_TMR5H4_SIZE                                  0x1
#define _TMR5H_TMR5H4_LENGTH                                0x1
#define _TMR5H_TMR5H4_MASK                                  0x10
#define _TMR5H_TMR5H5_POSN                                  0x5
#define _TMR5H_TMR5H5_POSITION                              0x5
#define _TMR5H_TMR5H5_SIZE                                  0x1
#define _TMR5H_TMR5H5_LENGTH                                0x1
#define _TMR5H_TMR5H5_MASK                                  0x20
#define _TMR5H_TMR5H6_POSN                                  0x6
#define _TMR5H_TMR5H6_POSITION                              0x6
#define _TMR5H_TMR5H6_SIZE                                  0x1
#define _TMR5H_TMR5H6_LENGTH                                0x1
#define _TMR5H_TMR5H6_MASK                                  0x40
#define _TMR5H_TMR5H7_POSN                                  0x7
#define _TMR5H_TMR5H7_POSITION                              0x7
#define _TMR5H_TMR5H7_SIZE                                  0x1
#define _TMR5H_TMR5H7_LENGTH                                0x1
#define _TMR5H_TMR5H7_MASK                                  0x80
#define _TMR5H_TMR5H_POSN                                   0x0
#define _TMR5H_TMR5H_POSITION                               0x0
#define _TMR5H_TMR5H_SIZE                                   0x8
#define _TMR5H_TMR5H_LENGTH                                 0x8
#define _TMR5H_TMR5H_MASK                                   0xFF
#define _TMR5H_TMR58_POSN                                   0x0
#define _TMR5H_TMR58_POSITION                               0x0
#define _TMR5H_TMR58_SIZE                                   0x1
#define _TMR5H_TMR58_LENGTH                                 0x1
#define _TMR5H_TMR58_MASK                                   0x1
#define _TMR5H_TMR59_POSN                                   0x1
#define _TMR5H_TMR59_POSITION                               0x1
#define _TMR5H_TMR59_SIZE                                   0x1
#define _TMR5H_TMR59_LENGTH                                 0x1
#define _TMR5H_TMR59_MASK                                   0x2
#define _TMR5H_TMR510_POSN                                  0x2
#define _TMR5H_TMR510_POSITION                              0x2
#define _TMR5H_TMR510_SIZE                                  0x1
#define _TMR5H_TMR510_LENGTH                                0x1
#define _TMR5H_TMR510_MASK                                  0x4
#define _TMR5H_TMR511_POSN                                  0x3
#define _TMR5H_TMR511_POSITION                              0x3
#define _TMR5H_TMR511_SIZE                                  0x1
#define _TMR5H_TMR511_LENGTH                                0x1
#define _TMR5H_TMR511_MASK                                  0x8
#define _TMR5H_TMR512_POSN                                  0x4
#define _TMR5H_TMR512_POSITION                              0x4
#define _TMR5H_TMR512_SIZE                                  0x1
#define _TMR5H_TMR512_LENGTH                                0x1
#define _TMR5H_TMR512_MASK                                  0x10
#define _TMR5H_TMR513_POSN                                  0x5
#define _TMR5H_TMR513_POSITION                              0x5
#define _TMR5H_TMR513_SIZE                                  0x1
#define _TMR5H_TMR513_LENGTH                                0x1
#define _TMR5H_TMR513_MASK                                  0x20
#define _TMR5H_TMR514_POSN                                  0x6
#define _TMR5H_TMR514_POSITION                              0x6
#define _TMR5H_TMR514_SIZE                                  0x1
#define _TMR5H_TMR514_LENGTH                                0x1
#define _TMR5H_TMR514_MASK                                  0x40
#define _TMR5H_TMR515_POSN                                  0x7
#define _TMR5H_TMR515_POSITION                              0x7
#define _TMR5H_TMR515_SIZE                                  0x1
#define _TMR5H_TMR515_LENGTH                                0x1
#define _TMR5H_TMR515_MASK                                  0x80

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0x21A);
#ifndef _LIB_BUILD
asm("T5CON equ 021Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned T5RD16                 :1;
        unsigned nT5SYNC                :1;
        unsigned                        :1;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0x21A);
// bitfield macros
#define _T5CON_ON_POSN                                      0x0
#define _T5CON_ON_POSITION                                  0x0
#define _T5CON_ON_SIZE                                      0x1
#define _T5CON_ON_LENGTH                                    0x1
#define _T5CON_ON_MASK                                      0x1
#define _T5CON_RD16_POSN                                    0x1
#define _T5CON_RD16_POSITION                                0x1
#define _T5CON_RD16_SIZE                                    0x1
#define _T5CON_RD16_LENGTH                                  0x1
#define _T5CON_RD16_MASK                                    0x2
#define _T5CON_nSYNC_POSN                                   0x2
#define _T5CON_nSYNC_POSITION                               0x2
#define _T5CON_nSYNC_SIZE                                   0x1
#define _T5CON_nSYNC_LENGTH                                 0x1
#define _T5CON_nSYNC_MASK                                   0x4
#define _T5CON_CKPS_POSN                                    0x4
#define _T5CON_CKPS_POSITION                                0x4
#define _T5CON_CKPS_SIZE                                    0x2
#define _T5CON_CKPS_LENGTH                                  0x2
#define _T5CON_CKPS_MASK                                    0x30
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_T5RD16_POSN                                  0x1
#define _T5CON_T5RD16_POSITION                              0x1
#define _T5CON_T5RD16_SIZE                                  0x1
#define _T5CON_T5RD16_LENGTH                                0x1
#define _T5CON_T5RD16_MASK                                  0x2
#define _T5CON_nT5SYNC_POSN                                 0x2
#define _T5CON_nT5SYNC_POSITION                             0x2
#define _T5CON_nT5SYNC_SIZE                                 0x1
#define _T5CON_nT5SYNC_LENGTH                               0x1
#define _T5CON_nT5SYNC_MASK                                 0x4
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_CKPS0_POSN                                   0x4
#define _T5CON_CKPS0_POSITION                               0x4
#define _T5CON_CKPS0_SIZE                                   0x1
#define _T5CON_CKPS0_LENGTH                                 0x1
#define _T5CON_CKPS0_MASK                                   0x10
#define _T5CON_CKPS1_POSN                                   0x5
#define _T5CON_CKPS1_POSITION                               0x5
#define _T5CON_CKPS1_SIZE                                   0x1
#define _T5CON_CKPS1_LENGTH                                 0x1
#define _T5CON_CKPS1_MASK                                   0x20
#define _T5CON_RD165_POSN                                   0x1
#define _T5CON_RD165_POSITION                               0x1
#define _T5CON_RD165_SIZE                                   0x1
#define _T5CON_RD165_LENGTH                                 0x1
#define _T5CON_RD165_MASK                                   0x2

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0x21B);
#ifndef _LIB_BUILD
asm("T5GCON equ 021Bh");
#endif
// aliases
extern volatile unsigned char           PR5                 __at(0x21B);
#ifndef _LIB_BUILD
asm("PR5 equ 021Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nDONE            :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5GGO                  :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0x21B);
// bitfield macros
#define _T5GCON_GVAL_POSN                                   0x2
#define _T5GCON_GVAL_POSITION                               0x2
#define _T5GCON_GVAL_SIZE                                   0x1
#define _T5GCON_GVAL_LENGTH                                 0x1
#define _T5GCON_GVAL_MASK                                   0x4
#define _T5GCON_GGO_nDONE_POSN                              0x3
#define _T5GCON_GGO_nDONE_POSITION                          0x3
#define _T5GCON_GGO_nDONE_SIZE                              0x1
#define _T5GCON_GGO_nDONE_LENGTH                            0x1
#define _T5GCON_GGO_nDONE_MASK                              0x8
#define _T5GCON_GSPM_POSN                                   0x4
#define _T5GCON_GSPM_POSITION                               0x4
#define _T5GCON_GSPM_SIZE                                   0x1
#define _T5GCON_GSPM_LENGTH                                 0x1
#define _T5GCON_GSPM_MASK                                   0x10
#define _T5GCON_GTM_POSN                                    0x5
#define _T5GCON_GTM_POSITION                                0x5
#define _T5GCON_GTM_SIZE                                    0x1
#define _T5GCON_GTM_LENGTH                                  0x1
#define _T5GCON_GTM_MASK                                    0x20
#define _T5GCON_GPOL_POSN                                   0x6
#define _T5GCON_GPOL_POSITION                               0x6
#define _T5GCON_GPOL_SIZE                                   0x1
#define _T5GCON_GPOL_LENGTH                                 0x1
#define _T5GCON_GPOL_MASK                                   0x40
#define _T5GCON_GE_POSN                                     0x7
#define _T5GCON_GE_POSITION                                 0x7
#define _T5GCON_GE_SIZE                                     0x1
#define _T5GCON_GE_LENGTH                                   0x1
#define _T5GCON_GE_MASK                                     0x80
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_nDONE_POSN                            0x3
#define _T5GCON_T5GGO_nDONE_POSITION                        0x3
#define _T5GCON_T5GGO_nDONE_SIZE                            0x1
#define _T5GCON_T5GGO_nDONE_LENGTH                          0x1
#define _T5GCON_T5GGO_nDONE_MASK                            0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_T5GE_POSN                                   0x7
#define _T5GCON_T5GE_POSITION                               0x7
#define _T5GCON_T5GE_SIZE                                   0x1
#define _T5GCON_T5GE_LENGTH                                 0x1
#define _T5GCON_T5GE_MASK                                   0x80
#define _T5GCON_T5GGO_POSN                                  0x3
#define _T5GCON_T5GGO_POSITION                              0x3
#define _T5GCON_T5GGO_SIZE                                  0x1
#define _T5GCON_T5GGO_LENGTH                                0x1
#define _T5GCON_T5GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nDONE            :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5GGO                  :1;
    };
} PR5bits_t;
extern volatile PR5bits_t PR5bits __at(0x21B);
// bitfield macros
#define _PR5_GVAL_POSN                                      0x2
#define _PR5_GVAL_POSITION                                  0x2
#define _PR5_GVAL_SIZE                                      0x1
#define _PR5_GVAL_LENGTH                                    0x1
#define _PR5_GVAL_MASK                                      0x4
#define _PR5_GGO_nDONE_POSN                                 0x3
#define _PR5_GGO_nDONE_POSITION                             0x3
#define _PR5_GGO_nDONE_SIZE                                 0x1
#define _PR5_GGO_nDONE_LENGTH                               0x1
#define _PR5_GGO_nDONE_MASK                                 0x8
#define _PR5_GSPM_POSN                                      0x4
#define _PR5_GSPM_POSITION                                  0x4
#define _PR5_GSPM_SIZE                                      0x1
#define _PR5_GSPM_LENGTH                                    0x1
#define _PR5_GSPM_MASK                                      0x10
#define _PR5_GTM_POSN                                       0x5
#define _PR5_GTM_POSITION                                   0x5
#define _PR5_GTM_SIZE                                       0x1
#define _PR5_GTM_LENGTH                                     0x1
#define _PR5_GTM_MASK                                       0x20
#define _PR5_GPOL_POSN                                      0x6
#define _PR5_GPOL_POSITION                                  0x6
#define _PR5_GPOL_SIZE                                      0x1
#define _PR5_GPOL_LENGTH                                    0x1
#define _PR5_GPOL_MASK                                      0x40
#define _PR5_GE_POSN                                        0x7
#define _PR5_GE_POSITION                                    0x7
#define _PR5_GE_SIZE                                        0x1
#define _PR5_GE_LENGTH                                      0x1
#define _PR5_GE_MASK                                        0x80
#define _PR5_T5GVAL_POSN                                    0x2
#define _PR5_T5GVAL_POSITION                                0x2
#define _PR5_T5GVAL_SIZE                                    0x1
#define _PR5_T5GVAL_LENGTH                                  0x1
#define _PR5_T5GVAL_MASK                                    0x4
#define _PR5_T5GGO_nDONE_POSN                               0x3
#define _PR5_T5GGO_nDONE_POSITION                           0x3
#define _PR5_T5GGO_nDONE_SIZE                               0x1
#define _PR5_T5GGO_nDONE_LENGTH                             0x1
#define _PR5_T5GGO_nDONE_MASK                               0x8
#define _PR5_T5GSPM_POSN                                    0x4
#define _PR5_T5GSPM_POSITION                                0x4
#define _PR5_T5GSPM_SIZE                                    0x1
#define _PR5_T5GSPM_LENGTH                                  0x1
#define _PR5_T5GSPM_MASK                                    0x10
#define _PR5_T5GTM_POSN                                     0x5
#define _PR5_T5GTM_POSITION                                 0x5
#define _PR5_T5GTM_SIZE                                     0x1
#define _PR5_T5GTM_LENGTH                                   0x1
#define _PR5_T5GTM_MASK                                     0x20
#define _PR5_T5GPOL_POSN                                    0x6
#define _PR5_T5GPOL_POSITION                                0x6
#define _PR5_T5GPOL_SIZE                                    0x1
#define _PR5_T5GPOL_LENGTH                                  0x1
#define _PR5_T5GPOL_MASK                                    0x40
#define _PR5_T5GE_POSN                                      0x7
#define _PR5_T5GE_POSITION                                  0x7
#define _PR5_T5GE_SIZE                                      0x1
#define _PR5_T5GE_LENGTH                                    0x1
#define _PR5_T5GE_MASK                                      0x80
#define _PR5_T5GGO_POSN                                     0x3
#define _PR5_T5GGO_POSITION                                 0x3
#define _PR5_T5GGO_SIZE                                     0x1
#define _PR5_T5GGO_LENGTH                                   0x1
#define _PR5_T5GGO_MASK                                     0x8

// Register: T5GATE
#define T5GATE T5GATE
extern volatile unsigned char           T5GATE              __at(0x21C);
#ifndef _LIB_BUILD
asm("T5GATE equ 021Ch");
#endif
// aliases
extern volatile unsigned char           TMR5GATE            __at(0x21C);
#ifndef _LIB_BUILD
asm("TMR5GATE equ 021Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
        unsigned T5GSS4                 :1;
    };
} T5GATEbits_t;
extern volatile T5GATEbits_t T5GATEbits __at(0x21C);
// bitfield macros
#define _T5GATE_GSS_POSN                                    0x0
#define _T5GATE_GSS_POSITION                                0x0
#define _T5GATE_GSS_SIZE                                    0x5
#define _T5GATE_GSS_LENGTH                                  0x5
#define _T5GATE_GSS_MASK                                    0x1F
#define _T5GATE_GSS0_POSN                                   0x0
#define _T5GATE_GSS0_POSITION                               0x0
#define _T5GATE_GSS0_SIZE                                   0x1
#define _T5GATE_GSS0_LENGTH                                 0x1
#define _T5GATE_GSS0_MASK                                   0x1
#define _T5GATE_GSS1_POSN                                   0x1
#define _T5GATE_GSS1_POSITION                               0x1
#define _T5GATE_GSS1_SIZE                                   0x1
#define _T5GATE_GSS1_LENGTH                                 0x1
#define _T5GATE_GSS1_MASK                                   0x2
#define _T5GATE_GSS2_POSN                                   0x2
#define _T5GATE_GSS2_POSITION                               0x2
#define _T5GATE_GSS2_SIZE                                   0x1
#define _T5GATE_GSS2_LENGTH                                 0x1
#define _T5GATE_GSS2_MASK                                   0x4
#define _T5GATE_GSS3_POSN                                   0x3
#define _T5GATE_GSS3_POSITION                               0x3
#define _T5GATE_GSS3_SIZE                                   0x1
#define _T5GATE_GSS3_LENGTH                                 0x1
#define _T5GATE_GSS3_MASK                                   0x8
#define _T5GATE_GSS4_POSN                                   0x4
#define _T5GATE_GSS4_POSITION                               0x4
#define _T5GATE_GSS4_SIZE                                   0x1
#define _T5GATE_GSS4_LENGTH                                 0x1
#define _T5GATE_GSS4_MASK                                   0x10
#define _T5GATE_T5GSS0_POSN                                 0x0
#define _T5GATE_T5GSS0_POSITION                             0x0
#define _T5GATE_T5GSS0_SIZE                                 0x1
#define _T5GATE_T5GSS0_LENGTH                               0x1
#define _T5GATE_T5GSS0_MASK                                 0x1
#define _T5GATE_T5GSS1_POSN                                 0x1
#define _T5GATE_T5GSS1_POSITION                             0x1
#define _T5GATE_T5GSS1_SIZE                                 0x1
#define _T5GATE_T5GSS1_LENGTH                               0x1
#define _T5GATE_T5GSS1_MASK                                 0x2
#define _T5GATE_T5GSS2_POSN                                 0x2
#define _T5GATE_T5GSS2_POSITION                             0x2
#define _T5GATE_T5GSS2_SIZE                                 0x1
#define _T5GATE_T5GSS2_LENGTH                               0x1
#define _T5GATE_T5GSS2_MASK                                 0x4
#define _T5GATE_T5GSS3_POSN                                 0x3
#define _T5GATE_T5GSS3_POSITION                             0x3
#define _T5GATE_T5GSS3_SIZE                                 0x1
#define _T5GATE_T5GSS3_LENGTH                               0x1
#define _T5GATE_T5GSS3_MASK                                 0x8
#define _T5GATE_T5GSS4_POSN                                 0x4
#define _T5GATE_T5GSS4_POSITION                             0x4
#define _T5GATE_T5GSS4_SIZE                                 0x1
#define _T5GATE_T5GSS4_LENGTH                               0x1
#define _T5GATE_T5GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
        unsigned T5GSS4                 :1;
    };
} TMR5GATEbits_t;
extern volatile TMR5GATEbits_t TMR5GATEbits __at(0x21C);
// bitfield macros
#define _TMR5GATE_GSS_POSN                                  0x0
#define _TMR5GATE_GSS_POSITION                              0x0
#define _TMR5GATE_GSS_SIZE                                  0x5
#define _TMR5GATE_GSS_LENGTH                                0x5
#define _TMR5GATE_GSS_MASK                                  0x1F
#define _TMR5GATE_GSS0_POSN                                 0x0
#define _TMR5GATE_GSS0_POSITION                             0x0
#define _TMR5GATE_GSS0_SIZE                                 0x1
#define _TMR5GATE_GSS0_LENGTH                               0x1
#define _TMR5GATE_GSS0_MASK                                 0x1
#define _TMR5GATE_GSS1_POSN                                 0x1
#define _TMR5GATE_GSS1_POSITION                             0x1
#define _TMR5GATE_GSS1_SIZE                                 0x1
#define _TMR5GATE_GSS1_LENGTH                               0x1
#define _TMR5GATE_GSS1_MASK                                 0x2
#define _TMR5GATE_GSS2_POSN                                 0x2
#define _TMR5GATE_GSS2_POSITION                             0x2
#define _TMR5GATE_GSS2_SIZE                                 0x1
#define _TMR5GATE_GSS2_LENGTH                               0x1
#define _TMR5GATE_GSS2_MASK                                 0x4
#define _TMR5GATE_GSS3_POSN                                 0x3
#define _TMR5GATE_GSS3_POSITION                             0x3
#define _TMR5GATE_GSS3_SIZE                                 0x1
#define _TMR5GATE_GSS3_LENGTH                               0x1
#define _TMR5GATE_GSS3_MASK                                 0x8
#define _TMR5GATE_GSS4_POSN                                 0x4
#define _TMR5GATE_GSS4_POSITION                             0x4
#define _TMR5GATE_GSS4_SIZE                                 0x1
#define _TMR5GATE_GSS4_LENGTH                               0x1
#define _TMR5GATE_GSS4_MASK                                 0x10
#define _TMR5GATE_T5GSS0_POSN                               0x0
#define _TMR5GATE_T5GSS0_POSITION                           0x0
#define _TMR5GATE_T5GSS0_SIZE                               0x1
#define _TMR5GATE_T5GSS0_LENGTH                             0x1
#define _TMR5GATE_T5GSS0_MASK                               0x1
#define _TMR5GATE_T5GSS1_POSN                               0x1
#define _TMR5GATE_T5GSS1_POSITION                           0x1
#define _TMR5GATE_T5GSS1_SIZE                               0x1
#define _TMR5GATE_T5GSS1_LENGTH                             0x1
#define _TMR5GATE_T5GSS1_MASK                               0x2
#define _TMR5GATE_T5GSS2_POSN                               0x2
#define _TMR5GATE_T5GSS2_POSITION                           0x2
#define _TMR5GATE_T5GSS2_SIZE                               0x1
#define _TMR5GATE_T5GSS2_LENGTH                             0x1
#define _TMR5GATE_T5GSS2_MASK                               0x4
#define _TMR5GATE_T5GSS3_POSN                               0x3
#define _TMR5GATE_T5GSS3_POSITION                           0x3
#define _TMR5GATE_T5GSS3_SIZE                               0x1
#define _TMR5GATE_T5GSS3_LENGTH                             0x1
#define _TMR5GATE_T5GSS3_MASK                               0x8
#define _TMR5GATE_T5GSS4_POSN                               0x4
#define _TMR5GATE_T5GSS4_POSITION                           0x4
#define _TMR5GATE_T5GSS4_SIZE                               0x1
#define _TMR5GATE_T5GSS4_LENGTH                             0x1
#define _TMR5GATE_T5GSS4_MASK                               0x10

// Register: T5CLK
#define T5CLK T5CLK
extern volatile unsigned char           T5CLK               __at(0x21D);
#ifndef _LIB_BUILD
asm("T5CLK equ 021Dh");
#endif
// aliases
extern volatile unsigned char           TMR5CLK             __at(0x21D);
#ifndef _LIB_BUILD
asm("TMR5CLK equ 021Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T5CLKbits_t;
extern volatile T5CLKbits_t T5CLKbits __at(0x21D);
// bitfield macros
#define _T5CLK_CS_POSN                                      0x0
#define _T5CLK_CS_POSITION                                  0x0
#define _T5CLK_CS_SIZE                                      0x4
#define _T5CLK_CS_LENGTH                                    0x4
#define _T5CLK_CS_MASK                                      0xF
#define _T5CLK_T5CS0_POSN                                   0x0
#define _T5CLK_T5CS0_POSITION                               0x0
#define _T5CLK_T5CS0_SIZE                                   0x1
#define _T5CLK_T5CS0_LENGTH                                 0x1
#define _T5CLK_T5CS0_MASK                                   0x1
#define _T5CLK_T5CS1_POSN                                   0x1
#define _T5CLK_T5CS1_POSITION                               0x1
#define _T5CLK_T5CS1_SIZE                                   0x1
#define _T5CLK_T5CS1_LENGTH                                 0x1
#define _T5CLK_T5CS1_MASK                                   0x2
#define _T5CLK_T5CS2_POSN                                   0x2
#define _T5CLK_T5CS2_POSITION                               0x2
#define _T5CLK_T5CS2_SIZE                                   0x1
#define _T5CLK_T5CS2_LENGTH                                 0x1
#define _T5CLK_T5CS2_MASK                                   0x4
#define _T5CLK_T5CS3_POSN                                   0x3
#define _T5CLK_T5CS3_POSITION                               0x3
#define _T5CLK_T5CS3_SIZE                                   0x1
#define _T5CLK_T5CS3_LENGTH                                 0x1
#define _T5CLK_T5CS3_MASK                                   0x8
#define _T5CLK_CS0_POSN                                     0x0
#define _T5CLK_CS0_POSITION                                 0x0
#define _T5CLK_CS0_SIZE                                     0x1
#define _T5CLK_CS0_LENGTH                                   0x1
#define _T5CLK_CS0_MASK                                     0x1
#define _T5CLK_CS1_POSN                                     0x1
#define _T5CLK_CS1_POSITION                                 0x1
#define _T5CLK_CS1_SIZE                                     0x1
#define _T5CLK_CS1_LENGTH                                   0x1
#define _T5CLK_CS1_MASK                                     0x2
#define _T5CLK_CS2_POSN                                     0x2
#define _T5CLK_CS2_POSITION                                 0x2
#define _T5CLK_CS2_SIZE                                     0x1
#define _T5CLK_CS2_LENGTH                                   0x1
#define _T5CLK_CS2_MASK                                     0x4
#define _T5CLK_CS3_POSN                                     0x3
#define _T5CLK_CS3_POSITION                                 0x3
#define _T5CLK_CS3_SIZE                                     0x1
#define _T5CLK_CS3_LENGTH                                   0x1
#define _T5CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR5CLKbits_t;
extern volatile TMR5CLKbits_t TMR5CLKbits __at(0x21D);
// bitfield macros
#define _TMR5CLK_CS_POSN                                    0x0
#define _TMR5CLK_CS_POSITION                                0x0
#define _TMR5CLK_CS_SIZE                                    0x4
#define _TMR5CLK_CS_LENGTH                                  0x4
#define _TMR5CLK_CS_MASK                                    0xF
#define _TMR5CLK_T5CS0_POSN                                 0x0
#define _TMR5CLK_T5CS0_POSITION                             0x0
#define _TMR5CLK_T5CS0_SIZE                                 0x1
#define _TMR5CLK_T5CS0_LENGTH                               0x1
#define _TMR5CLK_T5CS0_MASK                                 0x1
#define _TMR5CLK_T5CS1_POSN                                 0x1
#define _TMR5CLK_T5CS1_POSITION                             0x1
#define _TMR5CLK_T5CS1_SIZE                                 0x1
#define _TMR5CLK_T5CS1_LENGTH                               0x1
#define _TMR5CLK_T5CS1_MASK                                 0x2
#define _TMR5CLK_T5CS2_POSN                                 0x2
#define _TMR5CLK_T5CS2_POSITION                             0x2
#define _TMR5CLK_T5CS2_SIZE                                 0x1
#define _TMR5CLK_T5CS2_LENGTH                               0x1
#define _TMR5CLK_T5CS2_MASK                                 0x4
#define _TMR5CLK_T5CS3_POSN                                 0x3
#define _TMR5CLK_T5CS3_POSITION                             0x3
#define _TMR5CLK_T5CS3_SIZE                                 0x1
#define _TMR5CLK_T5CS3_LENGTH                               0x1
#define _TMR5CLK_T5CS3_MASK                                 0x8
#define _TMR5CLK_CS0_POSN                                   0x0
#define _TMR5CLK_CS0_POSITION                               0x0
#define _TMR5CLK_CS0_SIZE                                   0x1
#define _TMR5CLK_CS0_LENGTH                                 0x1
#define _TMR5CLK_CS0_MASK                                   0x1
#define _TMR5CLK_CS1_POSN                                   0x1
#define _TMR5CLK_CS1_POSITION                               0x1
#define _TMR5CLK_CS1_SIZE                                   0x1
#define _TMR5CLK_CS1_LENGTH                                 0x1
#define _TMR5CLK_CS1_MASK                                   0x2
#define _TMR5CLK_CS2_POSN                                   0x2
#define _TMR5CLK_CS2_POSITION                               0x2
#define _TMR5CLK_CS2_SIZE                                   0x1
#define _TMR5CLK_CS2_LENGTH                                 0x1
#define _TMR5CLK_CS2_MASK                                   0x4
#define _TMR5CLK_CS3_POSN                                   0x3
#define _TMR5CLK_CS3_POSITION                               0x3
#define _TMR5CLK_CS3_SIZE                                   0x1
#define _TMR5CLK_CS3_LENGTH                                 0x1
#define _TMR5CLK_CS3_MASK                                   0x8

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x21E);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 021Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
        unsigned C3TSEL                 :2;
        unsigned C4TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C2TSEL0                :1;
        unsigned C2TSEL1                :1;
        unsigned C3TSEL0                :1;
        unsigned C3TSEL1                :1;
        unsigned C4TSEL0                :1;
        unsigned C4TSEL1                :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x21E);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x2
#define _CCPTMRS0_C1TSEL_LENGTH                             0x2
#define _CCPTMRS0_C1TSEL_MASK                               0x3
#define _CCPTMRS0_C2TSEL_POSN                               0x2
#define _CCPTMRS0_C2TSEL_POSITION                           0x2
#define _CCPTMRS0_C2TSEL_SIZE                               0x2
#define _CCPTMRS0_C2TSEL_LENGTH                             0x2
#define _CCPTMRS0_C2TSEL_MASK                               0xC
#define _CCPTMRS0_C3TSEL_POSN                               0x4
#define _CCPTMRS0_C3TSEL_POSITION                           0x4
#define _CCPTMRS0_C3TSEL_SIZE                               0x2
#define _CCPTMRS0_C3TSEL_LENGTH                             0x2
#define _CCPTMRS0_C3TSEL_MASK                               0x30
#define _CCPTMRS0_C4TSEL_POSN                               0x6
#define _CCPTMRS0_C4TSEL_POSITION                           0x6
#define _CCPTMRS0_C4TSEL_SIZE                               0x2
#define _CCPTMRS0_C4TSEL_LENGTH                             0x2
#define _CCPTMRS0_C4TSEL_MASK                               0xC0
#define _CCPTMRS0_C1TSEL0_POSN                              0x0
#define _CCPTMRS0_C1TSEL0_POSITION                          0x0
#define _CCPTMRS0_C1TSEL0_SIZE                              0x1
#define _CCPTMRS0_C1TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL0_MASK                              0x1
#define _CCPTMRS0_C1TSEL1_POSN                              0x1
#define _CCPTMRS0_C1TSEL1_POSITION                          0x1
#define _CCPTMRS0_C1TSEL1_SIZE                              0x1
#define _CCPTMRS0_C1TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL1_MASK                              0x2
#define _CCPTMRS0_C2TSEL0_POSN                              0x2
#define _CCPTMRS0_C2TSEL0_POSITION                          0x2
#define _CCPTMRS0_C2TSEL0_SIZE                              0x1
#define _CCPTMRS0_C2TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL0_MASK                              0x4
#define _CCPTMRS0_C2TSEL1_POSN                              0x3
#define _CCPTMRS0_C2TSEL1_POSITION                          0x3
#define _CCPTMRS0_C2TSEL1_SIZE                              0x1
#define _CCPTMRS0_C2TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL1_MASK                              0x8
#define _CCPTMRS0_C3TSEL0_POSN                              0x4
#define _CCPTMRS0_C3TSEL0_POSITION                          0x4
#define _CCPTMRS0_C3TSEL0_SIZE                              0x1
#define _CCPTMRS0_C3TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL0_MASK                              0x10
#define _CCPTMRS0_C3TSEL1_POSN                              0x5
#define _CCPTMRS0_C3TSEL1_POSITION                          0x5
#define _CCPTMRS0_C3TSEL1_SIZE                              0x1
#define _CCPTMRS0_C3TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL1_MASK                              0x20
#define _CCPTMRS0_C4TSEL0_POSN                              0x6
#define _CCPTMRS0_C4TSEL0_POSITION                          0x6
#define _CCPTMRS0_C4TSEL0_SIZE                              0x1
#define _CCPTMRS0_C4TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C4TSEL0_MASK                              0x40
#define _CCPTMRS0_C4TSEL1_POSN                              0x7
#define _CCPTMRS0_C4TSEL1_POSITION                          0x7
#define _CCPTMRS0_C4TSEL1_SIZE                              0x1
#define _CCPTMRS0_C4TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C4TSEL1_MASK                              0x80

// Register: CCPTMRS1
#define CCPTMRS1 CCPTMRS1
extern volatile unsigned char           CCPTMRS1            __at(0x21F);
#ifndef _LIB_BUILD
asm("CCPTMRS1 equ 021Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C5TSEL                 :2;
        unsigned P6TSEL                 :2;
        unsigned P7TSEL                 :2;
    };
    struct {
        unsigned C5TSEL0                :1;
        unsigned C5TSEL1                :1;
        unsigned P6TSEL0                :1;
        unsigned P6TSEL1                :1;
        unsigned P7TSEL0                :1;
        unsigned P7TSEL1                :1;
    };
} CCPTMRS1bits_t;
extern volatile CCPTMRS1bits_t CCPTMRS1bits __at(0x21F);
// bitfield macros
#define _CCPTMRS1_C5TSEL_POSN                               0x0
#define _CCPTMRS1_C5TSEL_POSITION                           0x0
#define _CCPTMRS1_C5TSEL_SIZE                               0x2
#define _CCPTMRS1_C5TSEL_LENGTH                             0x2
#define _CCPTMRS1_C5TSEL_MASK                               0x3
#define _CCPTMRS1_P6TSEL_POSN                               0x2
#define _CCPTMRS1_P6TSEL_POSITION                           0x2
#define _CCPTMRS1_P6TSEL_SIZE                               0x2
#define _CCPTMRS1_P6TSEL_LENGTH                             0x2
#define _CCPTMRS1_P6TSEL_MASK                               0xC
#define _CCPTMRS1_P7TSEL_POSN                               0x4
#define _CCPTMRS1_P7TSEL_POSITION                           0x4
#define _CCPTMRS1_P7TSEL_SIZE                               0x2
#define _CCPTMRS1_P7TSEL_LENGTH                             0x2
#define _CCPTMRS1_P7TSEL_MASK                               0x30
#define _CCPTMRS1_C5TSEL0_POSN                              0x0
#define _CCPTMRS1_C5TSEL0_POSITION                          0x0
#define _CCPTMRS1_C5TSEL0_SIZE                              0x1
#define _CCPTMRS1_C5TSEL0_LENGTH                            0x1
#define _CCPTMRS1_C5TSEL0_MASK                              0x1
#define _CCPTMRS1_C5TSEL1_POSN                              0x1
#define _CCPTMRS1_C5TSEL1_POSITION                          0x1
#define _CCPTMRS1_C5TSEL1_SIZE                              0x1
#define _CCPTMRS1_C5TSEL1_LENGTH                            0x1
#define _CCPTMRS1_C5TSEL1_MASK                              0x2
#define _CCPTMRS1_P6TSEL0_POSN                              0x2
#define _CCPTMRS1_P6TSEL0_POSITION                          0x2
#define _CCPTMRS1_P6TSEL0_SIZE                              0x1
#define _CCPTMRS1_P6TSEL0_LENGTH                            0x1
#define _CCPTMRS1_P6TSEL0_MASK                              0x4
#define _CCPTMRS1_P6TSEL1_POSN                              0x3
#define _CCPTMRS1_P6TSEL1_POSITION                          0x3
#define _CCPTMRS1_P6TSEL1_SIZE                              0x1
#define _CCPTMRS1_P6TSEL1_LENGTH                            0x1
#define _CCPTMRS1_P6TSEL1_MASK                              0x8
#define _CCPTMRS1_P7TSEL0_POSN                              0x4
#define _CCPTMRS1_P7TSEL0_POSITION                          0x4
#define _CCPTMRS1_P7TSEL0_SIZE                              0x1
#define _CCPTMRS1_P7TSEL0_LENGTH                            0x1
#define _CCPTMRS1_P7TSEL0_MASK                              0x10
#define _CCPTMRS1_P7TSEL1_POSN                              0x5
#define _CCPTMRS1_P7TSEL1_POSITION                          0x5
#define _CCPTMRS1_P7TSEL1_SIZE                              0x1
#define _CCPTMRS1_P7TSEL1_LENGTH                            0x1
#define _CCPTMRS1_P7TSEL1_MASK                              0x20

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x28C);
#ifndef _LIB_BUILD
asm("T2TMR equ 028Ch");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x28C);
#ifndef _LIB_BUILD
asm("TMR2 equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x28C);
// bitfield macros
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x28C);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x28D);
#ifndef _LIB_BUILD
asm("T2PR equ 028Dh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x28D);
#ifndef _LIB_BUILD
asm("PR2 equ 028Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x28D);
// bitfield macros
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x28D);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x28E);
#ifndef _LIB_BUILD
asm("T2CON equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x28E);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x28F);
#ifndef _LIB_BUILD
asm("T2HLT equ 028Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x28F);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x290);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0290h");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0x290);
#ifndef _LIB_BUILD
asm("T2CLK equ 0290h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x290);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0x290);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x4
#define _T2CLK_CS_LENGTH                                    0x4
#define _T2CLK_CS_MASK                                      0xF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x4
#define _T2CLK_T2CS_LENGTH                                  0x4
#define _T2CLK_T2CS_MASK                                    0xF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x291);
#ifndef _LIB_BUILD
asm("T2RST equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T2RSEL                 :5;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
        unsigned T2RSEL4                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x291);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x5
#define _T2RST_RSEL_LENGTH                                  0x5
#define _T2RST_RSEL_MASK                                    0x1F
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_RSEL4_POSN                                   0x4
#define _T2RST_RSEL4_POSITION                               0x4
#define _T2RST_RSEL4_SIZE                                   0x1
#define _T2RST_RSEL4_LENGTH                                 0x1
#define _T2RST_RSEL4_MASK                                   0x10
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x5
#define _T2RST_T2RSEL_LENGTH                                0x5
#define _T2RST_T2RSEL_MASK                                  0x1F
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8
#define _T2RST_T2RSEL4_POSN                                 0x4
#define _T2RST_T2RSEL4_POSITION                             0x4
#define _T2RST_T2RSEL4_SIZE                                 0x1
#define _T2RST_T2RSEL4_LENGTH                               0x1
#define _T2RST_T2RSEL4_MASK                                 0x10

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x292);
#ifndef _LIB_BUILD
asm("T4TMR equ 0292h");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x292);
#ifndef _LIB_BUILD
asm("TMR4 equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x292);
// bitfield macros
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x292);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x293);
#ifndef _LIB_BUILD
asm("T4PR equ 0293h");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x293);
#ifndef _LIB_BUILD
asm("PR4 equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x293);
// bitfield macros
#define _T4PR_PR4_POSN                                      0x0
#define _T4PR_PR4_POSITION                                  0x0
#define _T4PR_PR4_SIZE                                      0x8
#define _T4PR_PR4_LENGTH                                    0x8
#define _T4PR_PR4_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x293);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x294);
#ifndef _LIB_BUILD
asm("T4CON equ 0294h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x294);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x295);
#ifndef _LIB_BUILD
asm("T4HLT equ 0295h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x295);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x296);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0296h");
#endif
// aliases
extern volatile unsigned char           T4CLK               __at(0x296);
#ifndef _LIB_BUILD
asm("T4CLK equ 0296h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x296);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x4
#define _T4CLKCON_CS_LENGTH                                 0x4
#define _T4CLKCON_CS_MASK                                   0xF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x4
#define _T4CLKCON_T4CS_LENGTH                               0x4
#define _T4CLKCON_T4CS_MASK                                 0xF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKbits_t;
extern volatile T4CLKbits_t T4CLKbits __at(0x296);
// bitfield macros
#define _T4CLK_CS_POSN                                      0x0
#define _T4CLK_CS_POSITION                                  0x0
#define _T4CLK_CS_SIZE                                      0x4
#define _T4CLK_CS_LENGTH                                    0x4
#define _T4CLK_CS_MASK                                      0xF
#define _T4CLK_CS0_POSN                                     0x0
#define _T4CLK_CS0_POSITION                                 0x0
#define _T4CLK_CS0_SIZE                                     0x1
#define _T4CLK_CS0_LENGTH                                   0x1
#define _T4CLK_CS0_MASK                                     0x1
#define _T4CLK_CS1_POSN                                     0x1
#define _T4CLK_CS1_POSITION                                 0x1
#define _T4CLK_CS1_SIZE                                     0x1
#define _T4CLK_CS1_LENGTH                                   0x1
#define _T4CLK_CS1_MASK                                     0x2
#define _T4CLK_CS2_POSN                                     0x2
#define _T4CLK_CS2_POSITION                                 0x2
#define _T4CLK_CS2_SIZE                                     0x1
#define _T4CLK_CS2_LENGTH                                   0x1
#define _T4CLK_CS2_MASK                                     0x4
#define _T4CLK_CS3_POSN                                     0x3
#define _T4CLK_CS3_POSITION                                 0x3
#define _T4CLK_CS3_SIZE                                     0x1
#define _T4CLK_CS3_LENGTH                                   0x1
#define _T4CLK_CS3_MASK                                     0x8
#define _T4CLK_T4CS_POSN                                    0x0
#define _T4CLK_T4CS_POSITION                                0x0
#define _T4CLK_T4CS_SIZE                                    0x4
#define _T4CLK_T4CS_LENGTH                                  0x4
#define _T4CLK_T4CS_MASK                                    0xF
#define _T4CLK_T4CS0_POSN                                   0x0
#define _T4CLK_T4CS0_POSITION                               0x0
#define _T4CLK_T4CS0_SIZE                                   0x1
#define _T4CLK_T4CS0_LENGTH                                 0x1
#define _T4CLK_T4CS0_MASK                                   0x1
#define _T4CLK_T4CS1_POSN                                   0x1
#define _T4CLK_T4CS1_POSITION                               0x1
#define _T4CLK_T4CS1_SIZE                                   0x1
#define _T4CLK_T4CS1_LENGTH                                 0x1
#define _T4CLK_T4CS1_MASK                                   0x2
#define _T4CLK_T4CS2_POSN                                   0x2
#define _T4CLK_T4CS2_POSITION                               0x2
#define _T4CLK_T4CS2_SIZE                                   0x1
#define _T4CLK_T4CS2_LENGTH                                 0x1
#define _T4CLK_T4CS2_MASK                                   0x4
#define _T4CLK_T4CS3_POSN                                   0x3
#define _T4CLK_T4CS3_POSITION                               0x3
#define _T4CLK_T4CS3_SIZE                                   0x1
#define _T4CLK_T4CS3_LENGTH                                 0x1
#define _T4CLK_T4CS3_MASK                                   0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x297);
#ifndef _LIB_BUILD
asm("T4RST equ 0297h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T4RSEL                 :5;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
        unsigned T4RSEL4                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x297);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x5
#define _T4RST_RSEL_LENGTH                                  0x5
#define _T4RST_RSEL_MASK                                    0x1F
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_RSEL4_POSN                                   0x4
#define _T4RST_RSEL4_POSITION                               0x4
#define _T4RST_RSEL4_SIZE                                   0x1
#define _T4RST_RSEL4_LENGTH                                 0x1
#define _T4RST_RSEL4_MASK                                   0x10
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x5
#define _T4RST_T4RSEL_LENGTH                                0x5
#define _T4RST_T4RSEL_MASK                                  0x1F
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8
#define _T4RST_T4RSEL4_POSN                                 0x4
#define _T4RST_T4RSEL4_POSITION                             0x4
#define _T4RST_T4RSEL4_SIZE                                 0x1
#define _T4RST_T4RSEL4_LENGTH                               0x1
#define _T4RST_T4RSEL4_MASK                                 0x10

// Register: T6TMR
#define T6TMR T6TMR
extern volatile unsigned char           T6TMR               __at(0x298);
#ifndef _LIB_BUILD
asm("T6TMR equ 0298h");
#endif
// aliases
extern volatile unsigned char           TMR6                __at(0x298);
#ifndef _LIB_BUILD
asm("TMR6 equ 0298h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} T6TMRbits_t;
extern volatile T6TMRbits_t T6TMRbits __at(0x298);
// bitfield macros
#define _T6TMR_TMR6_POSN                                    0x0
#define _T6TMR_TMR6_POSITION                                0x0
#define _T6TMR_TMR6_SIZE                                    0x8
#define _T6TMR_TMR6_LENGTH                                  0x8
#define _T6TMR_TMR6_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0x298);
// bitfield macros
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: T6PR
#define T6PR T6PR
extern volatile unsigned char           T6PR                __at(0x299);
#ifndef _LIB_BUILD
asm("T6PR equ 0299h");
#endif
// aliases
extern volatile unsigned char           PR6                 __at(0x299);
#ifndef _LIB_BUILD
asm("PR6 equ 0299h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} T6PRbits_t;
extern volatile T6PRbits_t T6PRbits __at(0x299);
// bitfield macros
#define _T6PR_PR6_POSN                                      0x0
#define _T6PR_PR6_POSITION                                  0x0
#define _T6PR_PR6_SIZE                                      0x8
#define _T6PR_PR6_LENGTH                                    0x8
#define _T6PR_PR6_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0x299);
// bitfield macros
#define _PR6_PR6_POSN                                       0x0
#define _PR6_PR6_POSITION                                   0x0
#define _PR6_PR6_SIZE                                       0x8
#define _PR6_PR6_LENGTH                                     0x8
#define _PR6_PR6_MASK                                       0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0x29A);
#ifndef _LIB_BUILD
asm("T6CON equ 029Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T6OUTPS                :4;
        unsigned T6CKPS                 :3;
        unsigned T6ON                   :1;
    };
    struct {
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned T6CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR6ON                 :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0x29A);
// bitfield macros
#define _T6CON_OUTPS_POSN                                   0x0
#define _T6CON_OUTPS_POSITION                               0x0
#define _T6CON_OUTPS_SIZE                                   0x4
#define _T6CON_OUTPS_LENGTH                                 0x4
#define _T6CON_OUTPS_MASK                                   0xF
#define _T6CON_CKPS_POSN                                    0x4
#define _T6CON_CKPS_POSITION                                0x4
#define _T6CON_CKPS_SIZE                                    0x3
#define _T6CON_CKPS_LENGTH                                  0x3
#define _T6CON_CKPS_MASK                                    0x70
#define _T6CON_ON_POSN                                      0x7
#define _T6CON_ON_POSITION                                  0x7
#define _T6CON_ON_SIZE                                      0x1
#define _T6CON_ON_LENGTH                                    0x1
#define _T6CON_ON_MASK                                      0x80
#define _T6CON_T6OUTPS_POSN                                 0x0
#define _T6CON_T6OUTPS_POSITION                             0x0
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0xF
#define _T6CON_T6CKPS_POSN                                  0x4
#define _T6CON_T6CKPS_POSITION                              0x4
#define _T6CON_T6CKPS_SIZE                                  0x3
#define _T6CON_T6CKPS_LENGTH                                0x3
#define _T6CON_T6CKPS_MASK                                  0x70
#define _T6CON_T6ON_POSN                                    0x7
#define _T6CON_T6ON_POSITION                                0x7
#define _T6CON_T6ON_SIZE                                    0x1
#define _T6CON_T6ON_LENGTH                                  0x1
#define _T6CON_T6ON_MASK                                    0x80
#define _T6CON_T6OUTPS0_POSN                                0x0
#define _T6CON_T6OUTPS0_POSITION                            0x0
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x1
#define _T6CON_T6OUTPS1_POSN                                0x1
#define _T6CON_T6OUTPS1_POSITION                            0x1
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x2
#define _T6CON_T6OUTPS2_POSN                                0x2
#define _T6CON_T6OUTPS2_POSITION                            0x2
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x4
#define _T6CON_T6OUTPS3_POSN                                0x3
#define _T6CON_T6OUTPS3_POSITION                            0x3
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x8
#define _T6CON_T6CKPS0_POSN                                 0x4
#define _T6CON_T6CKPS0_POSITION                             0x4
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x10
#define _T6CON_T6CKPS1_POSN                                 0x5
#define _T6CON_T6CKPS1_POSITION                             0x5
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x20
#define _T6CON_T6CKPS2_POSN                                 0x6
#define _T6CON_T6CKPS2_POSITION                             0x6
#define _T6CON_T6CKPS2_SIZE                                 0x1
#define _T6CON_T6CKPS2_LENGTH                               0x1
#define _T6CON_T6CKPS2_MASK                                 0x40
#define _T6CON_OUTPS0_POSN                                  0x0
#define _T6CON_OUTPS0_POSITION                              0x0
#define _T6CON_OUTPS0_SIZE                                  0x1
#define _T6CON_OUTPS0_LENGTH                                0x1
#define _T6CON_OUTPS0_MASK                                  0x1
#define _T6CON_OUTPS1_POSN                                  0x1
#define _T6CON_OUTPS1_POSITION                              0x1
#define _T6CON_OUTPS1_SIZE                                  0x1
#define _T6CON_OUTPS1_LENGTH                                0x1
#define _T6CON_OUTPS1_MASK                                  0x2
#define _T6CON_OUTPS2_POSN                                  0x2
#define _T6CON_OUTPS2_POSITION                              0x2
#define _T6CON_OUTPS2_SIZE                                  0x1
#define _T6CON_OUTPS2_LENGTH                                0x1
#define _T6CON_OUTPS2_MASK                                  0x4
#define _T6CON_OUTPS3_POSN                                  0x3
#define _T6CON_OUTPS3_POSITION                              0x3
#define _T6CON_OUTPS3_SIZE                                  0x1
#define _T6CON_OUTPS3_LENGTH                                0x1
#define _T6CON_OUTPS3_MASK                                  0x8
#define _T6CON_CKPS0_POSN                                   0x4
#define _T6CON_CKPS0_POSITION                               0x4
#define _T6CON_CKPS0_SIZE                                   0x1
#define _T6CON_CKPS0_LENGTH                                 0x1
#define _T6CON_CKPS0_MASK                                   0x10
#define _T6CON_CKPS1_POSN                                   0x5
#define _T6CON_CKPS1_POSITION                               0x5
#define _T6CON_CKPS1_SIZE                                   0x1
#define _T6CON_CKPS1_LENGTH                                 0x1
#define _T6CON_CKPS1_MASK                                   0x20
#define _T6CON_CKPS2_POSN                                   0x6
#define _T6CON_CKPS2_POSITION                               0x6
#define _T6CON_CKPS2_SIZE                                   0x1
#define _T6CON_CKPS2_LENGTH                                 0x1
#define _T6CON_CKPS2_MASK                                   0x40
#define _T6CON_TMR6ON_POSN                                  0x7
#define _T6CON_TMR6ON_POSITION                              0x7
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x80

// Register: T6HLT
#define T6HLT T6HLT
extern volatile unsigned char           T6HLT               __at(0x29B);
#ifndef _LIB_BUILD
asm("T6HLT equ 029Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T6MODE                 :5;
        unsigned T6CKSYNC               :1;
        unsigned T6CKPOL                :1;
        unsigned T6PSYNC                :1;
    };
    struct {
        unsigned T6MODE0                :1;
        unsigned T6MODE1                :1;
        unsigned T6MODE2                :1;
        unsigned T6MODE3                :1;
        unsigned T6MODE4                :1;
    };
} T6HLTbits_t;
extern volatile T6HLTbits_t T6HLTbits __at(0x29B);
// bitfield macros
#define _T6HLT_MODE_POSN                                    0x0
#define _T6HLT_MODE_POSITION                                0x0
#define _T6HLT_MODE_SIZE                                    0x5
#define _T6HLT_MODE_LENGTH                                  0x5
#define _T6HLT_MODE_MASK                                    0x1F
#define _T6HLT_CKSYNC_POSN                                  0x5
#define _T6HLT_CKSYNC_POSITION                              0x5
#define _T6HLT_CKSYNC_SIZE                                  0x1
#define _T6HLT_CKSYNC_LENGTH                                0x1
#define _T6HLT_CKSYNC_MASK                                  0x20
#define _T6HLT_CKPOL_POSN                                   0x6
#define _T6HLT_CKPOL_POSITION                               0x6
#define _T6HLT_CKPOL_SIZE                                   0x1
#define _T6HLT_CKPOL_LENGTH                                 0x1
#define _T6HLT_CKPOL_MASK                                   0x40
#define _T6HLT_PSYNC_POSN                                   0x7
#define _T6HLT_PSYNC_POSITION                               0x7
#define _T6HLT_PSYNC_SIZE                                   0x1
#define _T6HLT_PSYNC_LENGTH                                 0x1
#define _T6HLT_PSYNC_MASK                                   0x80
#define _T6HLT_MODE0_POSN                                   0x0
#define _T6HLT_MODE0_POSITION                               0x0
#define _T6HLT_MODE0_SIZE                                   0x1
#define _T6HLT_MODE0_LENGTH                                 0x1
#define _T6HLT_MODE0_MASK                                   0x1
#define _T6HLT_MODE1_POSN                                   0x1
#define _T6HLT_MODE1_POSITION                               0x1
#define _T6HLT_MODE1_SIZE                                   0x1
#define _T6HLT_MODE1_LENGTH                                 0x1
#define _T6HLT_MODE1_MASK                                   0x2
#define _T6HLT_MODE2_POSN                                   0x2
#define _T6HLT_MODE2_POSITION                               0x2
#define _T6HLT_MODE2_SIZE                                   0x1
#define _T6HLT_MODE2_LENGTH                                 0x1
#define _T6HLT_MODE2_MASK                                   0x4
#define _T6HLT_MODE3_POSN                                   0x3
#define _T6HLT_MODE3_POSITION                               0x3
#define _T6HLT_MODE3_SIZE                                   0x1
#define _T6HLT_MODE3_LENGTH                                 0x1
#define _T6HLT_MODE3_MASK                                   0x8
#define _T6HLT_MODE4_POSN                                   0x4
#define _T6HLT_MODE4_POSITION                               0x4
#define _T6HLT_MODE4_SIZE                                   0x1
#define _T6HLT_MODE4_LENGTH                                 0x1
#define _T6HLT_MODE4_MASK                                   0x10
#define _T6HLT_T6MODE_POSN                                  0x0
#define _T6HLT_T6MODE_POSITION                              0x0
#define _T6HLT_T6MODE_SIZE                                  0x5
#define _T6HLT_T6MODE_LENGTH                                0x5
#define _T6HLT_T6MODE_MASK                                  0x1F
#define _T6HLT_T6CKSYNC_POSN                                0x5
#define _T6HLT_T6CKSYNC_POSITION                            0x5
#define _T6HLT_T6CKSYNC_SIZE                                0x1
#define _T6HLT_T6CKSYNC_LENGTH                              0x1
#define _T6HLT_T6CKSYNC_MASK                                0x20
#define _T6HLT_T6CKPOL_POSN                                 0x6
#define _T6HLT_T6CKPOL_POSITION                             0x6
#define _T6HLT_T6CKPOL_SIZE                                 0x1
#define _T6HLT_T6CKPOL_LENGTH                               0x1
#define _T6HLT_T6CKPOL_MASK                                 0x40
#define _T6HLT_T6PSYNC_POSN                                 0x7
#define _T6HLT_T6PSYNC_POSITION                             0x7
#define _T6HLT_T6PSYNC_SIZE                                 0x1
#define _T6HLT_T6PSYNC_LENGTH                               0x1
#define _T6HLT_T6PSYNC_MASK                                 0x80
#define _T6HLT_T6MODE0_POSN                                 0x0
#define _T6HLT_T6MODE0_POSITION                             0x0
#define _T6HLT_T6MODE0_SIZE                                 0x1
#define _T6HLT_T6MODE0_LENGTH                               0x1
#define _T6HLT_T6MODE0_MASK                                 0x1
#define _T6HLT_T6MODE1_POSN                                 0x1
#define _T6HLT_T6MODE1_POSITION                             0x1
#define _T6HLT_T6MODE1_SIZE                                 0x1
#define _T6HLT_T6MODE1_LENGTH                               0x1
#define _T6HLT_T6MODE1_MASK                                 0x2
#define _T6HLT_T6MODE2_POSN                                 0x2
#define _T6HLT_T6MODE2_POSITION                             0x2
#define _T6HLT_T6MODE2_SIZE                                 0x1
#define _T6HLT_T6MODE2_LENGTH                               0x1
#define _T6HLT_T6MODE2_MASK                                 0x4
#define _T6HLT_T6MODE3_POSN                                 0x3
#define _T6HLT_T6MODE3_POSITION                             0x3
#define _T6HLT_T6MODE3_SIZE                                 0x1
#define _T6HLT_T6MODE3_LENGTH                               0x1
#define _T6HLT_T6MODE3_MASK                                 0x8
#define _T6HLT_T6MODE4_POSN                                 0x4
#define _T6HLT_T6MODE4_POSITION                             0x4
#define _T6HLT_T6MODE4_SIZE                                 0x1
#define _T6HLT_T6MODE4_LENGTH                               0x1
#define _T6HLT_T6MODE4_MASK                                 0x10

// Register: T6CLKCON
#define T6CLKCON T6CLKCON
extern volatile unsigned char           T6CLKCON            __at(0x29C);
#ifndef _LIB_BUILD
asm("T6CLKCON equ 029Ch");
#endif
// aliases
extern volatile unsigned char           T6CLK               __at(0x29C);
#ifndef _LIB_BUILD
asm("T6CLK equ 029Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKCONbits_t;
extern volatile T6CLKCONbits_t T6CLKCONbits __at(0x29C);
// bitfield macros
#define _T6CLKCON_CS_POSN                                   0x0
#define _T6CLKCON_CS_POSITION                               0x0
#define _T6CLKCON_CS_SIZE                                   0x4
#define _T6CLKCON_CS_LENGTH                                 0x4
#define _T6CLKCON_CS_MASK                                   0xF
#define _T6CLKCON_CS0_POSN                                  0x0
#define _T6CLKCON_CS0_POSITION                              0x0
#define _T6CLKCON_CS0_SIZE                                  0x1
#define _T6CLKCON_CS0_LENGTH                                0x1
#define _T6CLKCON_CS0_MASK                                  0x1
#define _T6CLKCON_CS1_POSN                                  0x1
#define _T6CLKCON_CS1_POSITION                              0x1
#define _T6CLKCON_CS1_SIZE                                  0x1
#define _T6CLKCON_CS1_LENGTH                                0x1
#define _T6CLKCON_CS1_MASK                                  0x2
#define _T6CLKCON_CS2_POSN                                  0x2
#define _T6CLKCON_CS2_POSITION                              0x2
#define _T6CLKCON_CS2_SIZE                                  0x1
#define _T6CLKCON_CS2_LENGTH                                0x1
#define _T6CLKCON_CS2_MASK                                  0x4
#define _T6CLKCON_CS3_POSN                                  0x3
#define _T6CLKCON_CS3_POSITION                              0x3
#define _T6CLKCON_CS3_SIZE                                  0x1
#define _T6CLKCON_CS3_LENGTH                                0x1
#define _T6CLKCON_CS3_MASK                                  0x8
#define _T6CLKCON_T6CS_POSN                                 0x0
#define _T6CLKCON_T6CS_POSITION                             0x0
#define _T6CLKCON_T6CS_SIZE                                 0x4
#define _T6CLKCON_T6CS_LENGTH                               0x4
#define _T6CLKCON_T6CS_MASK                                 0xF
#define _T6CLKCON_T6CS0_POSN                                0x0
#define _T6CLKCON_T6CS0_POSITION                            0x0
#define _T6CLKCON_T6CS0_SIZE                                0x1
#define _T6CLKCON_T6CS0_LENGTH                              0x1
#define _T6CLKCON_T6CS0_MASK                                0x1
#define _T6CLKCON_T6CS1_POSN                                0x1
#define _T6CLKCON_T6CS1_POSITION                            0x1
#define _T6CLKCON_T6CS1_SIZE                                0x1
#define _T6CLKCON_T6CS1_LENGTH                              0x1
#define _T6CLKCON_T6CS1_MASK                                0x2
#define _T6CLKCON_T6CS2_POSN                                0x2
#define _T6CLKCON_T6CS2_POSITION                            0x2
#define _T6CLKCON_T6CS2_SIZE                                0x1
#define _T6CLKCON_T6CS2_LENGTH                              0x1
#define _T6CLKCON_T6CS2_MASK                                0x4
#define _T6CLKCON_T6CS3_POSN                                0x3
#define _T6CLKCON_T6CS3_POSITION                            0x3
#define _T6CLKCON_T6CS3_SIZE                                0x1
#define _T6CLKCON_T6CS3_LENGTH                              0x1
#define _T6CLKCON_T6CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKbits_t;
extern volatile T6CLKbits_t T6CLKbits __at(0x29C);
// bitfield macros
#define _T6CLK_CS_POSN                                      0x0
#define _T6CLK_CS_POSITION                                  0x0
#define _T6CLK_CS_SIZE                                      0x4
#define _T6CLK_CS_LENGTH                                    0x4
#define _T6CLK_CS_MASK                                      0xF
#define _T6CLK_CS0_POSN                                     0x0
#define _T6CLK_CS0_POSITION                                 0x0
#define _T6CLK_CS0_SIZE                                     0x1
#define _T6CLK_CS0_LENGTH                                   0x1
#define _T6CLK_CS0_MASK                                     0x1
#define _T6CLK_CS1_POSN                                     0x1
#define _T6CLK_CS1_POSITION                                 0x1
#define _T6CLK_CS1_SIZE                                     0x1
#define _T6CLK_CS1_LENGTH                                   0x1
#define _T6CLK_CS1_MASK                                     0x2
#define _T6CLK_CS2_POSN                                     0x2
#define _T6CLK_CS2_POSITION                                 0x2
#define _T6CLK_CS2_SIZE                                     0x1
#define _T6CLK_CS2_LENGTH                                   0x1
#define _T6CLK_CS2_MASK                                     0x4
#define _T6CLK_CS3_POSN                                     0x3
#define _T6CLK_CS3_POSITION                                 0x3
#define _T6CLK_CS3_SIZE                                     0x1
#define _T6CLK_CS3_LENGTH                                   0x1
#define _T6CLK_CS3_MASK                                     0x8
#define _T6CLK_T6CS_POSN                                    0x0
#define _T6CLK_T6CS_POSITION                                0x0
#define _T6CLK_T6CS_SIZE                                    0x4
#define _T6CLK_T6CS_LENGTH                                  0x4
#define _T6CLK_T6CS_MASK                                    0xF
#define _T6CLK_T6CS0_POSN                                   0x0
#define _T6CLK_T6CS0_POSITION                               0x0
#define _T6CLK_T6CS0_SIZE                                   0x1
#define _T6CLK_T6CS0_LENGTH                                 0x1
#define _T6CLK_T6CS0_MASK                                   0x1
#define _T6CLK_T6CS1_POSN                                   0x1
#define _T6CLK_T6CS1_POSITION                               0x1
#define _T6CLK_T6CS1_SIZE                                   0x1
#define _T6CLK_T6CS1_LENGTH                                 0x1
#define _T6CLK_T6CS1_MASK                                   0x2
#define _T6CLK_T6CS2_POSN                                   0x2
#define _T6CLK_T6CS2_POSITION                               0x2
#define _T6CLK_T6CS2_SIZE                                   0x1
#define _T6CLK_T6CS2_LENGTH                                 0x1
#define _T6CLK_T6CS2_MASK                                   0x4
#define _T6CLK_T6CS3_POSN                                   0x3
#define _T6CLK_T6CS3_POSITION                               0x3
#define _T6CLK_T6CS3_SIZE                                   0x1
#define _T6CLK_T6CS3_LENGTH                                 0x1
#define _T6CLK_T6CS3_MASK                                   0x8

// Register: T6RST
#define T6RST T6RST
extern volatile unsigned char           T6RST               __at(0x29D);
#ifndef _LIB_BUILD
asm("T6RST equ 029Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T6RSEL                 :5;
    };
    struct {
        unsigned T6RSEL0                :1;
        unsigned T6RSEL1                :1;
        unsigned T6RSEL2                :1;
        unsigned T6RSEL3                :1;
        unsigned T6RSEL4                :1;
    };
} T6RSTbits_t;
extern volatile T6RSTbits_t T6RSTbits __at(0x29D);
// bitfield macros
#define _T6RST_RSEL_POSN                                    0x0
#define _T6RST_RSEL_POSITION                                0x0
#define _T6RST_RSEL_SIZE                                    0x5
#define _T6RST_RSEL_LENGTH                                  0x5
#define _T6RST_RSEL_MASK                                    0x1F
#define _T6RST_RSEL0_POSN                                   0x0
#define _T6RST_RSEL0_POSITION                               0x0
#define _T6RST_RSEL0_SIZE                                   0x1
#define _T6RST_RSEL0_LENGTH                                 0x1
#define _T6RST_RSEL0_MASK                                   0x1
#define _T6RST_RSEL1_POSN                                   0x1
#define _T6RST_RSEL1_POSITION                               0x1
#define _T6RST_RSEL1_SIZE                                   0x1
#define _T6RST_RSEL1_LENGTH                                 0x1
#define _T6RST_RSEL1_MASK                                   0x2
#define _T6RST_RSEL2_POSN                                   0x2
#define _T6RST_RSEL2_POSITION                               0x2
#define _T6RST_RSEL2_SIZE                                   0x1
#define _T6RST_RSEL2_LENGTH                                 0x1
#define _T6RST_RSEL2_MASK                                   0x4
#define _T6RST_RSEL3_POSN                                   0x3
#define _T6RST_RSEL3_POSITION                               0x3
#define _T6RST_RSEL3_SIZE                                   0x1
#define _T6RST_RSEL3_LENGTH                                 0x1
#define _T6RST_RSEL3_MASK                                   0x8
#define _T6RST_RSEL4_POSN                                   0x4
#define _T6RST_RSEL4_POSITION                               0x4
#define _T6RST_RSEL4_SIZE                                   0x1
#define _T6RST_RSEL4_LENGTH                                 0x1
#define _T6RST_RSEL4_MASK                                   0x10
#define _T6RST_T6RSEL_POSN                                  0x0
#define _T6RST_T6RSEL_POSITION                              0x0
#define _T6RST_T6RSEL_SIZE                                  0x5
#define _T6RST_T6RSEL_LENGTH                                0x5
#define _T6RST_T6RSEL_MASK                                  0x1F
#define _T6RST_T6RSEL0_POSN                                 0x0
#define _T6RST_T6RSEL0_POSITION                             0x0
#define _T6RST_T6RSEL0_SIZE                                 0x1
#define _T6RST_T6RSEL0_LENGTH                               0x1
#define _T6RST_T6RSEL0_MASK                                 0x1
#define _T6RST_T6RSEL1_POSN                                 0x1
#define _T6RST_T6RSEL1_POSITION                             0x1
#define _T6RST_T6RSEL1_SIZE                                 0x1
#define _T6RST_T6RSEL1_LENGTH                               0x1
#define _T6RST_T6RSEL1_MASK                                 0x2
#define _T6RST_T6RSEL2_POSN                                 0x2
#define _T6RST_T6RSEL2_POSITION                             0x2
#define _T6RST_T6RSEL2_SIZE                                 0x1
#define _T6RST_T6RSEL2_LENGTH                               0x1
#define _T6RST_T6RSEL2_MASK                                 0x4
#define _T6RST_T6RSEL3_POSN                                 0x3
#define _T6RST_T6RSEL3_POSITION                             0x3
#define _T6RST_T6RSEL3_SIZE                                 0x1
#define _T6RST_T6RSEL3_LENGTH                               0x1
#define _T6RST_T6RSEL3_MASK                                 0x8
#define _T6RST_T6RSEL4_POSN                                 0x4
#define _T6RST_T6RSEL4_POSITION                             0x4
#define _T6RST_T6RSEL4_SIZE                                 0x1
#define _T6RST_T6RSEL4_LENGTH                               0x1
#define _T6RST_T6RSEL4_MASK                                 0x10

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x30C);
#ifndef _LIB_BUILD
asm("CCPR1 equ 030Ch");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x30C);
#ifndef _LIB_BUILD
asm("CCPR1L equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x30C);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x30D);
#ifndef _LIB_BUILD
asm("CCPR1H equ 030Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x30D);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x30E);
#ifndef _LIB_BUILD
asm("CCP1CON equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x30E);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x30F);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 030Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x30F);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x310);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0310h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x310);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0310h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x310);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x311);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0311h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x311);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x312);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0312h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x312);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x313);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0313h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x313);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4

// Register: CCPR3
#define CCPR3 CCPR3
extern volatile unsigned short          CCPR3               __at(0x314);
#ifndef _LIB_BUILD
asm("CCPR3 equ 0314h");
#endif

// Register: CCPR3L
#define CCPR3L CCPR3L
extern volatile unsigned char           CCPR3L              __at(0x314);
#ifndef _LIB_BUILD
asm("CCPR3L equ 0314h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR3Lbits_t;
extern volatile CCPR3Lbits_t CCPR3Lbits __at(0x314);
// bitfield macros
#define _CCPR3L_RL_POSN                                     0x0
#define _CCPR3L_RL_POSITION                                 0x0
#define _CCPR3L_RL_SIZE                                     0x8
#define _CCPR3L_RL_LENGTH                                   0x8
#define _CCPR3L_RL_MASK                                     0xFF

// Register: CCPR3H
#define CCPR3H CCPR3H
extern volatile unsigned char           CCPR3H              __at(0x315);
#ifndef _LIB_BUILD
asm("CCPR3H equ 0315h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR3Hbits_t;
extern volatile CCPR3Hbits_t CCPR3Hbits __at(0x315);
// bitfield macros
#define _CCPR3H_RH_POSN                                     0x0
#define _CCPR3H_RH_POSITION                                 0x0
#define _CCPR3H_RH_SIZE                                     0x8
#define _CCPR3H_RH_LENGTH                                   0x8
#define _CCPR3H_RH_MASK                                     0xFF

// Register: CCP3CON
#define CCP3CON CCP3CON
extern volatile unsigned char           CCP3CON             __at(0x316);
#ifndef _LIB_BUILD
asm("CCP3CON equ 0316h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP3MODE               :4;
        unsigned CCP3FMT                :1;
        unsigned CCP3OUT                :1;
        unsigned                        :1;
        unsigned CCP3EN                 :1;
    };
    struct {
        unsigned CCP3MODE0              :1;
        unsigned CCP3MODE1              :1;
        unsigned CCP3MODE2              :1;
        unsigned CCP3MODE3              :1;
    };
} CCP3CONbits_t;
extern volatile CCP3CONbits_t CCP3CONbits __at(0x316);
// bitfield macros
#define _CCP3CON_MODE_POSN                                  0x0
#define _CCP3CON_MODE_POSITION                              0x0
#define _CCP3CON_MODE_SIZE                                  0x4
#define _CCP3CON_MODE_LENGTH                                0x4
#define _CCP3CON_MODE_MASK                                  0xF
#define _CCP3CON_FMT_POSN                                   0x4
#define _CCP3CON_FMT_POSITION                               0x4
#define _CCP3CON_FMT_SIZE                                   0x1
#define _CCP3CON_FMT_LENGTH                                 0x1
#define _CCP3CON_FMT_MASK                                   0x10
#define _CCP3CON_OUT_POSN                                   0x5
#define _CCP3CON_OUT_POSITION                               0x5
#define _CCP3CON_OUT_SIZE                                   0x1
#define _CCP3CON_OUT_LENGTH                                 0x1
#define _CCP3CON_OUT_MASK                                   0x20
#define _CCP3CON_EN_POSN                                    0x7
#define _CCP3CON_EN_POSITION                                0x7
#define _CCP3CON_EN_SIZE                                    0x1
#define _CCP3CON_EN_LENGTH                                  0x1
#define _CCP3CON_EN_MASK                                    0x80
#define _CCP3CON_MODE0_POSN                                 0x0
#define _CCP3CON_MODE0_POSITION                             0x0
#define _CCP3CON_MODE0_SIZE                                 0x1
#define _CCP3CON_MODE0_LENGTH                               0x1
#define _CCP3CON_MODE0_MASK                                 0x1
#define _CCP3CON_MODE1_POSN                                 0x1
#define _CCP3CON_MODE1_POSITION                             0x1
#define _CCP3CON_MODE1_SIZE                                 0x1
#define _CCP3CON_MODE1_LENGTH                               0x1
#define _CCP3CON_MODE1_MASK                                 0x2
#define _CCP3CON_MODE2_POSN                                 0x2
#define _CCP3CON_MODE2_POSITION                             0x2
#define _CCP3CON_MODE2_SIZE                                 0x1
#define _CCP3CON_MODE2_LENGTH                               0x1
#define _CCP3CON_MODE2_MASK                                 0x4
#define _CCP3CON_MODE3_POSN                                 0x3
#define _CCP3CON_MODE3_POSITION                             0x3
#define _CCP3CON_MODE3_SIZE                                 0x1
#define _CCP3CON_MODE3_LENGTH                               0x1
#define _CCP3CON_MODE3_MASK                                 0x8
#define _CCP3CON_CCP3MODE_POSN                              0x0
#define _CCP3CON_CCP3MODE_POSITION                          0x0
#define _CCP3CON_CCP3MODE_SIZE                              0x4
#define _CCP3CON_CCP3MODE_LENGTH                            0x4
#define _CCP3CON_CCP3MODE_MASK                              0xF
#define _CCP3CON_CCP3FMT_POSN                               0x4
#define _CCP3CON_CCP3FMT_POSITION                           0x4
#define _CCP3CON_CCP3FMT_SIZE                               0x1
#define _CCP3CON_CCP3FMT_LENGTH                             0x1
#define _CCP3CON_CCP3FMT_MASK                               0x10
#define _CCP3CON_CCP3OUT_POSN                               0x5
#define _CCP3CON_CCP3OUT_POSITION                           0x5
#define _CCP3CON_CCP3OUT_SIZE                               0x1
#define _CCP3CON_CCP3OUT_LENGTH                             0x1
#define _CCP3CON_CCP3OUT_MASK                               0x20
#define _CCP3CON_CCP3EN_POSN                                0x7
#define _CCP3CON_CCP3EN_POSITION                            0x7
#define _CCP3CON_CCP3EN_SIZE                                0x1
#define _CCP3CON_CCP3EN_LENGTH                              0x1
#define _CCP3CON_CCP3EN_MASK                                0x80
#define _CCP3CON_CCP3MODE0_POSN                             0x0
#define _CCP3CON_CCP3MODE0_POSITION                         0x0
#define _CCP3CON_CCP3MODE0_SIZE                             0x1
#define _CCP3CON_CCP3MODE0_LENGTH                           0x1
#define _CCP3CON_CCP3MODE0_MASK                             0x1
#define _CCP3CON_CCP3MODE1_POSN                             0x1
#define _CCP3CON_CCP3MODE1_POSITION                         0x1
#define _CCP3CON_CCP3MODE1_SIZE                             0x1
#define _CCP3CON_CCP3MODE1_LENGTH                           0x1
#define _CCP3CON_CCP3MODE1_MASK                             0x2
#define _CCP3CON_CCP3MODE2_POSN                             0x2
#define _CCP3CON_CCP3MODE2_POSITION                         0x2
#define _CCP3CON_CCP3MODE2_SIZE                             0x1
#define _CCP3CON_CCP3MODE2_LENGTH                           0x1
#define _CCP3CON_CCP3MODE2_MASK                             0x4
#define _CCP3CON_CCP3MODE3_POSN                             0x3
#define _CCP3CON_CCP3MODE3_POSITION                         0x3
#define _CCP3CON_CCP3MODE3_SIZE                             0x1
#define _CCP3CON_CCP3MODE3_LENGTH                           0x1
#define _CCP3CON_CCP3MODE3_MASK                             0x8

// Register: CCP3CAP
#define CCP3CAP CCP3CAP
extern volatile unsigned char           CCP3CAP             __at(0x317);
#ifndef _LIB_BUILD
asm("CCP3CAP equ 0317h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP3CTS                :8;
    };
    struct {
        unsigned CCP3CTS0               :1;
        unsigned CCP3CTS1               :1;
        unsigned CCP3CTS2               :1;
    };
} CCP3CAPbits_t;
extern volatile CCP3CAPbits_t CCP3CAPbits __at(0x317);
// bitfield macros
#define _CCP3CAP_CTS_POSN                                   0x0
#define _CCP3CAP_CTS_POSITION                               0x0
#define _CCP3CAP_CTS_SIZE                                   0x8
#define _CCP3CAP_CTS_LENGTH                                 0x8
#define _CCP3CAP_CTS_MASK                                   0xFF
#define _CCP3CAP_CTS0_POSN                                  0x0
#define _CCP3CAP_CTS0_POSITION                              0x0
#define _CCP3CAP_CTS0_SIZE                                  0x1
#define _CCP3CAP_CTS0_LENGTH                                0x1
#define _CCP3CAP_CTS0_MASK                                  0x1
#define _CCP3CAP_CTS1_POSN                                  0x1
#define _CCP3CAP_CTS1_POSITION                              0x1
#define _CCP3CAP_CTS1_SIZE                                  0x1
#define _CCP3CAP_CTS1_LENGTH                                0x1
#define _CCP3CAP_CTS1_MASK                                  0x2
#define _CCP3CAP_CTS2_POSN                                  0x2
#define _CCP3CAP_CTS2_POSITION                              0x2
#define _CCP3CAP_CTS2_SIZE                                  0x1
#define _CCP3CAP_CTS2_LENGTH                                0x1
#define _CCP3CAP_CTS2_MASK                                  0x4
#define _CCP3CAP_CCP3CTS_POSN                               0x0
#define _CCP3CAP_CCP3CTS_POSITION                           0x0
#define _CCP3CAP_CCP3CTS_SIZE                               0x8
#define _CCP3CAP_CCP3CTS_LENGTH                             0x8
#define _CCP3CAP_CCP3CTS_MASK                               0xFF
#define _CCP3CAP_CCP3CTS0_POSN                              0x0
#define _CCP3CAP_CCP3CTS0_POSITION                          0x0
#define _CCP3CAP_CCP3CTS0_SIZE                              0x1
#define _CCP3CAP_CCP3CTS0_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS0_MASK                              0x1
#define _CCP3CAP_CCP3CTS1_POSN                              0x1
#define _CCP3CAP_CCP3CTS1_POSITION                          0x1
#define _CCP3CAP_CCP3CTS1_SIZE                              0x1
#define _CCP3CAP_CCP3CTS1_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS1_MASK                              0x2
#define _CCP3CAP_CCP3CTS2_POSN                              0x2
#define _CCP3CAP_CCP3CTS2_POSITION                          0x2
#define _CCP3CAP_CCP3CTS2_SIZE                              0x1
#define _CCP3CAP_CCP3CTS2_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS2_MASK                              0x4

// Register: CCPR4
#define CCPR4 CCPR4
extern volatile unsigned short          CCPR4               __at(0x318);
#ifndef _LIB_BUILD
asm("CCPR4 equ 0318h");
#endif

// Register: CCPR4L
#define CCPR4L CCPR4L
extern volatile unsigned char           CCPR4L              __at(0x318);
#ifndef _LIB_BUILD
asm("CCPR4L equ 0318h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR4Lbits_t;
extern volatile CCPR4Lbits_t CCPR4Lbits __at(0x318);
// bitfield macros
#define _CCPR4L_RL_POSN                                     0x0
#define _CCPR4L_RL_POSITION                                 0x0
#define _CCPR4L_RL_SIZE                                     0x8
#define _CCPR4L_RL_LENGTH                                   0x8
#define _CCPR4L_RL_MASK                                     0xFF

// Register: CCPR4H
#define CCPR4H CCPR4H
extern volatile unsigned char           CCPR4H              __at(0x319);
#ifndef _LIB_BUILD
asm("CCPR4H equ 0319h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR4Hbits_t;
extern volatile CCPR4Hbits_t CCPR4Hbits __at(0x319);
// bitfield macros
#define _CCPR4H_RH_POSN                                     0x0
#define _CCPR4H_RH_POSITION                                 0x0
#define _CCPR4H_RH_SIZE                                     0x8
#define _CCPR4H_RH_LENGTH                                   0x8
#define _CCPR4H_RH_MASK                                     0xFF

// Register: CCP4CON
#define CCP4CON CCP4CON
extern volatile unsigned char           CCP4CON             __at(0x31A);
#ifndef _LIB_BUILD
asm("CCP4CON equ 031Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP4MODE               :4;
        unsigned CCP4FMT                :1;
        unsigned CCP4OUT                :1;
        unsigned                        :1;
        unsigned CCP4EN                 :1;
    };
    struct {
        unsigned CCP4MODE0              :1;
        unsigned CCP4MODE1              :1;
        unsigned CCP4MODE2              :1;
        unsigned CCP4MODE3              :1;
    };
} CCP4CONbits_t;
extern volatile CCP4CONbits_t CCP4CONbits __at(0x31A);
// bitfield macros
#define _CCP4CON_MODE_POSN                                  0x0
#define _CCP4CON_MODE_POSITION                              0x0
#define _CCP4CON_MODE_SIZE                                  0x4
#define _CCP4CON_MODE_LENGTH                                0x4
#define _CCP4CON_MODE_MASK                                  0xF
#define _CCP4CON_FMT_POSN                                   0x4
#define _CCP4CON_FMT_POSITION                               0x4
#define _CCP4CON_FMT_SIZE                                   0x1
#define _CCP4CON_FMT_LENGTH                                 0x1
#define _CCP4CON_FMT_MASK                                   0x10
#define _CCP4CON_OUT_POSN                                   0x5
#define _CCP4CON_OUT_POSITION                               0x5
#define _CCP4CON_OUT_SIZE                                   0x1
#define _CCP4CON_OUT_LENGTH                                 0x1
#define _CCP4CON_OUT_MASK                                   0x20
#define _CCP4CON_EN_POSN                                    0x7
#define _CCP4CON_EN_POSITION                                0x7
#define _CCP4CON_EN_SIZE                                    0x1
#define _CCP4CON_EN_LENGTH                                  0x1
#define _CCP4CON_EN_MASK                                    0x80
#define _CCP4CON_MODE0_POSN                                 0x0
#define _CCP4CON_MODE0_POSITION                             0x0
#define _CCP4CON_MODE0_SIZE                                 0x1
#define _CCP4CON_MODE0_LENGTH                               0x1
#define _CCP4CON_MODE0_MASK                                 0x1
#define _CCP4CON_MODE1_POSN                                 0x1
#define _CCP4CON_MODE1_POSITION                             0x1
#define _CCP4CON_MODE1_SIZE                                 0x1
#define _CCP4CON_MODE1_LENGTH                               0x1
#define _CCP4CON_MODE1_MASK                                 0x2
#define _CCP4CON_MODE2_POSN                                 0x2
#define _CCP4CON_MODE2_POSITION                             0x2
#define _CCP4CON_MODE2_SIZE                                 0x1
#define _CCP4CON_MODE2_LENGTH                               0x1
#define _CCP4CON_MODE2_MASK                                 0x4
#define _CCP4CON_MODE3_POSN                                 0x3
#define _CCP4CON_MODE3_POSITION                             0x3
#define _CCP4CON_MODE3_SIZE                                 0x1
#define _CCP4CON_MODE3_LENGTH                               0x1
#define _CCP4CON_MODE3_MASK                                 0x8
#define _CCP4CON_CCP4MODE_POSN                              0x0
#define _CCP4CON_CCP4MODE_POSITION                          0x0
#define _CCP4CON_CCP4MODE_SIZE                              0x4
#define _CCP4CON_CCP4MODE_LENGTH                            0x4
#define _CCP4CON_CCP4MODE_MASK                              0xF
#define _CCP4CON_CCP4FMT_POSN                               0x4
#define _CCP4CON_CCP4FMT_POSITION                           0x4
#define _CCP4CON_CCP4FMT_SIZE                               0x1
#define _CCP4CON_CCP4FMT_LENGTH                             0x1
#define _CCP4CON_CCP4FMT_MASK                               0x10
#define _CCP4CON_CCP4OUT_POSN                               0x5
#define _CCP4CON_CCP4OUT_POSITION                           0x5
#define _CCP4CON_CCP4OUT_SIZE                               0x1
#define _CCP4CON_CCP4OUT_LENGTH                             0x1
#define _CCP4CON_CCP4OUT_MASK                               0x20
#define _CCP4CON_CCP4EN_POSN                                0x7
#define _CCP4CON_CCP4EN_POSITION                            0x7
#define _CCP4CON_CCP4EN_SIZE                                0x1
#define _CCP4CON_CCP4EN_LENGTH                              0x1
#define _CCP4CON_CCP4EN_MASK                                0x80
#define _CCP4CON_CCP4MODE0_POSN                             0x0
#define _CCP4CON_CCP4MODE0_POSITION                         0x0
#define _CCP4CON_CCP4MODE0_SIZE                             0x1
#define _CCP4CON_CCP4MODE0_LENGTH                           0x1
#define _CCP4CON_CCP4MODE0_MASK                             0x1
#define _CCP4CON_CCP4MODE1_POSN                             0x1
#define _CCP4CON_CCP4MODE1_POSITION                         0x1
#define _CCP4CON_CCP4MODE1_SIZE                             0x1
#define _CCP4CON_CCP4MODE1_LENGTH                           0x1
#define _CCP4CON_CCP4MODE1_MASK                             0x2
#define _CCP4CON_CCP4MODE2_POSN                             0x2
#define _CCP4CON_CCP4MODE2_POSITION                         0x2
#define _CCP4CON_CCP4MODE2_SIZE                             0x1
#define _CCP4CON_CCP4MODE2_LENGTH                           0x1
#define _CCP4CON_CCP4MODE2_MASK                             0x4
#define _CCP4CON_CCP4MODE3_POSN                             0x3
#define _CCP4CON_CCP4MODE3_POSITION                         0x3
#define _CCP4CON_CCP4MODE3_SIZE                             0x1
#define _CCP4CON_CCP4MODE3_LENGTH                           0x1
#define _CCP4CON_CCP4MODE3_MASK                             0x8

// Register: CCP4CAP
#define CCP4CAP CCP4CAP
extern volatile unsigned char           CCP4CAP             __at(0x31B);
#ifndef _LIB_BUILD
asm("CCP4CAP equ 031Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP4CTS                :8;
    };
    struct {
        unsigned CCP4CTS0               :1;
        unsigned CCP4CTS1               :1;
        unsigned CCP4CTS2               :1;
    };
} CCP4CAPbits_t;
extern volatile CCP4CAPbits_t CCP4CAPbits __at(0x31B);
// bitfield macros
#define _CCP4CAP_CTS_POSN                                   0x0
#define _CCP4CAP_CTS_POSITION                               0x0
#define _CCP4CAP_CTS_SIZE                                   0x8
#define _CCP4CAP_CTS_LENGTH                                 0x8
#define _CCP4CAP_CTS_MASK                                   0xFF
#define _CCP4CAP_CTS0_POSN                                  0x0
#define _CCP4CAP_CTS0_POSITION                              0x0
#define _CCP4CAP_CTS0_SIZE                                  0x1
#define _CCP4CAP_CTS0_LENGTH                                0x1
#define _CCP4CAP_CTS0_MASK                                  0x1
#define _CCP4CAP_CTS1_POSN                                  0x1
#define _CCP4CAP_CTS1_POSITION                              0x1
#define _CCP4CAP_CTS1_SIZE                                  0x1
#define _CCP4CAP_CTS1_LENGTH                                0x1
#define _CCP4CAP_CTS1_MASK                                  0x2
#define _CCP4CAP_CTS2_POSN                                  0x2
#define _CCP4CAP_CTS2_POSITION                              0x2
#define _CCP4CAP_CTS2_SIZE                                  0x1
#define _CCP4CAP_CTS2_LENGTH                                0x1
#define _CCP4CAP_CTS2_MASK                                  0x4
#define _CCP4CAP_CCP4CTS_POSN                               0x0
#define _CCP4CAP_CCP4CTS_POSITION                           0x0
#define _CCP4CAP_CCP4CTS_SIZE                               0x8
#define _CCP4CAP_CCP4CTS_LENGTH                             0x8
#define _CCP4CAP_CCP4CTS_MASK                               0xFF
#define _CCP4CAP_CCP4CTS0_POSN                              0x0
#define _CCP4CAP_CCP4CTS0_POSITION                          0x0
#define _CCP4CAP_CCP4CTS0_SIZE                              0x1
#define _CCP4CAP_CCP4CTS0_LENGTH                            0x1
#define _CCP4CAP_CCP4CTS0_MASK                              0x1
#define _CCP4CAP_CCP4CTS1_POSN                              0x1
#define _CCP4CAP_CCP4CTS1_POSITION                          0x1
#define _CCP4CAP_CCP4CTS1_SIZE                              0x1
#define _CCP4CAP_CCP4CTS1_LENGTH                            0x1
#define _CCP4CAP_CCP4CTS1_MASK                              0x2
#define _CCP4CAP_CCP4CTS2_POSN                              0x2
#define _CCP4CAP_CCP4CTS2_POSITION                          0x2
#define _CCP4CAP_CCP4CTS2_SIZE                              0x1
#define _CCP4CAP_CCP4CTS2_LENGTH                            0x1
#define _CCP4CAP_CCP4CTS2_MASK                              0x4

// Register: CCPR5
#define CCPR5 CCPR5
extern volatile unsigned short          CCPR5               __at(0x31C);
#ifndef _LIB_BUILD
asm("CCPR5 equ 031Ch");
#endif

// Register: CCPR5L
#define CCPR5L CCPR5L
extern volatile unsigned char           CCPR5L              __at(0x31C);
#ifndef _LIB_BUILD
asm("CCPR5L equ 031Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR5Lbits_t;
extern volatile CCPR5Lbits_t CCPR5Lbits __at(0x31C);
// bitfield macros
#define _CCPR5L_RL_POSN                                     0x0
#define _CCPR5L_RL_POSITION                                 0x0
#define _CCPR5L_RL_SIZE                                     0x8
#define _CCPR5L_RL_LENGTH                                   0x8
#define _CCPR5L_RL_MASK                                     0xFF

// Register: CCPR5H
#define CCPR5H CCPR5H
extern volatile unsigned char           CCPR5H              __at(0x31D);
#ifndef _LIB_BUILD
asm("CCPR5H equ 031Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR5Hbits_t;
extern volatile CCPR5Hbits_t CCPR5Hbits __at(0x31D);
// bitfield macros
#define _CCPR5H_RH_POSN                                     0x0
#define _CCPR5H_RH_POSITION                                 0x0
#define _CCPR5H_RH_SIZE                                     0x8
#define _CCPR5H_RH_LENGTH                                   0x8
#define _CCPR5H_RH_MASK                                     0xFF

// Register: CCP5CON
#define CCP5CON CCP5CON
extern volatile unsigned char           CCP5CON             __at(0x31E);
#ifndef _LIB_BUILD
asm("CCP5CON equ 031Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP5MODE               :4;
        unsigned CCP5FMT                :1;
        unsigned CCP5OUT                :1;
        unsigned                        :1;
        unsigned CCP5EN                 :1;
    };
    struct {
        unsigned CCP5MODE0              :1;
        unsigned CCP5MODE1              :1;
        unsigned CCP5MODE2              :1;
        unsigned CCP5MODE3              :1;
    };
} CCP5CONbits_t;
extern volatile CCP5CONbits_t CCP5CONbits __at(0x31E);
// bitfield macros
#define _CCP5CON_MODE_POSN                                  0x0
#define _CCP5CON_MODE_POSITION                              0x0
#define _CCP5CON_MODE_SIZE                                  0x4
#define _CCP5CON_MODE_LENGTH                                0x4
#define _CCP5CON_MODE_MASK                                  0xF
#define _CCP5CON_FMT_POSN                                   0x4
#define _CCP5CON_FMT_POSITION                               0x4
#define _CCP5CON_FMT_SIZE                                   0x1
#define _CCP5CON_FMT_LENGTH                                 0x1
#define _CCP5CON_FMT_MASK                                   0x10
#define _CCP5CON_OUT_POSN                                   0x5
#define _CCP5CON_OUT_POSITION                               0x5
#define _CCP5CON_OUT_SIZE                                   0x1
#define _CCP5CON_OUT_LENGTH                                 0x1
#define _CCP5CON_OUT_MASK                                   0x20
#define _CCP5CON_EN_POSN                                    0x7
#define _CCP5CON_EN_POSITION                                0x7
#define _CCP5CON_EN_SIZE                                    0x1
#define _CCP5CON_EN_LENGTH                                  0x1
#define _CCP5CON_EN_MASK                                    0x80
#define _CCP5CON_MODE0_POSN                                 0x0
#define _CCP5CON_MODE0_POSITION                             0x0
#define _CCP5CON_MODE0_SIZE                                 0x1
#define _CCP5CON_MODE0_LENGTH                               0x1
#define _CCP5CON_MODE0_MASK                                 0x1
#define _CCP5CON_MODE1_POSN                                 0x1
#define _CCP5CON_MODE1_POSITION                             0x1
#define _CCP5CON_MODE1_SIZE                                 0x1
#define _CCP5CON_MODE1_LENGTH                               0x1
#define _CCP5CON_MODE1_MASK                                 0x2
#define _CCP5CON_MODE2_POSN                                 0x2
#define _CCP5CON_MODE2_POSITION                             0x2
#define _CCP5CON_MODE2_SIZE                                 0x1
#define _CCP5CON_MODE2_LENGTH                               0x1
#define _CCP5CON_MODE2_MASK                                 0x4
#define _CCP5CON_MODE3_POSN                                 0x3
#define _CCP5CON_MODE3_POSITION                             0x3
#define _CCP5CON_MODE3_SIZE                                 0x1
#define _CCP5CON_MODE3_LENGTH                               0x1
#define _CCP5CON_MODE3_MASK                                 0x8
#define _CCP5CON_CCP5MODE_POSN                              0x0
#define _CCP5CON_CCP5MODE_POSITION                          0x0
#define _CCP5CON_CCP5MODE_SIZE                              0x4
#define _CCP5CON_CCP5MODE_LENGTH                            0x4
#define _CCP5CON_CCP5MODE_MASK                              0xF
#define _CCP5CON_CCP5FMT_POSN                               0x4
#define _CCP5CON_CCP5FMT_POSITION                           0x4
#define _CCP5CON_CCP5FMT_SIZE                               0x1
#define _CCP5CON_CCP5FMT_LENGTH                             0x1
#define _CCP5CON_CCP5FMT_MASK                               0x10
#define _CCP5CON_CCP5OUT_POSN                               0x5
#define _CCP5CON_CCP5OUT_POSITION                           0x5
#define _CCP5CON_CCP5OUT_SIZE                               0x1
#define _CCP5CON_CCP5OUT_LENGTH                             0x1
#define _CCP5CON_CCP5OUT_MASK                               0x20
#define _CCP5CON_CCP5EN_POSN                                0x7
#define _CCP5CON_CCP5EN_POSITION                            0x7
#define _CCP5CON_CCP5EN_SIZE                                0x1
#define _CCP5CON_CCP5EN_LENGTH                              0x1
#define _CCP5CON_CCP5EN_MASK                                0x80
#define _CCP5CON_CCP5MODE0_POSN                             0x0
#define _CCP5CON_CCP5MODE0_POSITION                         0x0
#define _CCP5CON_CCP5MODE0_SIZE                             0x1
#define _CCP5CON_CCP5MODE0_LENGTH                           0x1
#define _CCP5CON_CCP5MODE0_MASK                             0x1
#define _CCP5CON_CCP5MODE1_POSN                             0x1
#define _CCP5CON_CCP5MODE1_POSITION                         0x1
#define _CCP5CON_CCP5MODE1_SIZE                             0x1
#define _CCP5CON_CCP5MODE1_LENGTH                           0x1
#define _CCP5CON_CCP5MODE1_MASK                             0x2
#define _CCP5CON_CCP5MODE2_POSN                             0x2
#define _CCP5CON_CCP5MODE2_POSITION                         0x2
#define _CCP5CON_CCP5MODE2_SIZE                             0x1
#define _CCP5CON_CCP5MODE2_LENGTH                           0x1
#define _CCP5CON_CCP5MODE2_MASK                             0x4
#define _CCP5CON_CCP5MODE3_POSN                             0x3
#define _CCP5CON_CCP5MODE3_POSITION                         0x3
#define _CCP5CON_CCP5MODE3_SIZE                             0x1
#define _CCP5CON_CCP5MODE3_LENGTH                           0x1
#define _CCP5CON_CCP5MODE3_MASK                             0x8

// Register: CCP5CAP
#define CCP5CAP CCP5CAP
extern volatile unsigned char           CCP5CAP             __at(0x31F);
#ifndef _LIB_BUILD
asm("CCP5CAP equ 031Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP5CTS                :8;
    };
    struct {
        unsigned CCP5CTS0               :1;
        unsigned CCP5CTS1               :1;
        unsigned CCP5CTS2               :1;
    };
} CCP5CAPbits_t;
extern volatile CCP5CAPbits_t CCP5CAPbits __at(0x31F);
// bitfield macros
#define _CCP5CAP_CTS_POSN                                   0x0
#define _CCP5CAP_CTS_POSITION                               0x0
#define _CCP5CAP_CTS_SIZE                                   0x8
#define _CCP5CAP_CTS_LENGTH                                 0x8
#define _CCP5CAP_CTS_MASK                                   0xFF
#define _CCP5CAP_CTS0_POSN                                  0x0
#define _CCP5CAP_CTS0_POSITION                              0x0
#define _CCP5CAP_CTS0_SIZE                                  0x1
#define _CCP5CAP_CTS0_LENGTH                                0x1
#define _CCP5CAP_CTS0_MASK                                  0x1
#define _CCP5CAP_CTS1_POSN                                  0x1
#define _CCP5CAP_CTS1_POSITION                              0x1
#define _CCP5CAP_CTS1_SIZE                                  0x1
#define _CCP5CAP_CTS1_LENGTH                                0x1
#define _CCP5CAP_CTS1_MASK                                  0x2
#define _CCP5CAP_CTS2_POSN                                  0x2
#define _CCP5CAP_CTS2_POSITION                              0x2
#define _CCP5CAP_CTS2_SIZE                                  0x1
#define _CCP5CAP_CTS2_LENGTH                                0x1
#define _CCP5CAP_CTS2_MASK                                  0x4
#define _CCP5CAP_CCP5CTS_POSN                               0x0
#define _CCP5CAP_CCP5CTS_POSITION                           0x0
#define _CCP5CAP_CCP5CTS_SIZE                               0x8
#define _CCP5CAP_CCP5CTS_LENGTH                             0x8
#define _CCP5CAP_CCP5CTS_MASK                               0xFF
#define _CCP5CAP_CCP5CTS0_POSN                              0x0
#define _CCP5CAP_CCP5CTS0_POSITION                          0x0
#define _CCP5CAP_CCP5CTS0_SIZE                              0x1
#define _CCP5CAP_CCP5CTS0_LENGTH                            0x1
#define _CCP5CAP_CCP5CTS0_MASK                              0x1
#define _CCP5CAP_CCP5CTS1_POSN                              0x1
#define _CCP5CAP_CCP5CTS1_POSITION                          0x1
#define _CCP5CAP_CCP5CTS1_SIZE                              0x1
#define _CCP5CAP_CCP5CTS1_LENGTH                            0x1
#define _CCP5CAP_CCP5CTS1_MASK                              0x2
#define _CCP5CAP_CCP5CTS2_POSN                              0x2
#define _CCP5CAP_CCP5CTS2_POSITION                          0x2
#define _CCP5CAP_CCP5CTS2_SIZE                              0x1
#define _CCP5CAP_CCP5CTS2_LENGTH                            0x1
#define _CCP5CAP_CCP5CTS2_MASK                              0x4

// Register: PWM6DC
#define PWM6DC PWM6DC
extern volatile unsigned short          PWM6DC              __at(0x38C);
#ifndef _LIB_BUILD
asm("PWM6DC equ 038Ch");
#endif

// Register: PWM6DCL
#define PWM6DCL PWM6DCL
extern volatile unsigned char           PWM6DCL             __at(0x38C);
#ifndef _LIB_BUILD
asm("PWM6DCL equ 038Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM6DC0                :1;
        unsigned PWM6DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM6DCLbits_t;
extern volatile PWM6DCLbits_t PWM6DCLbits __at(0x38C);
// bitfield macros
#define _PWM6DCL_DC_POSN                                    0x6
#define _PWM6DCL_DC_POSITION                                0x6
#define _PWM6DCL_DC_SIZE                                    0x2
#define _PWM6DCL_DC_LENGTH                                  0x2
#define _PWM6DCL_DC_MASK                                    0xC0
#define _PWM6DCL_DC0_POSN                                   0x6
#define _PWM6DCL_DC0_POSITION                               0x6
#define _PWM6DCL_DC0_SIZE                                   0x1
#define _PWM6DCL_DC0_LENGTH                                 0x1
#define _PWM6DCL_DC0_MASK                                   0x40
#define _PWM6DCL_DC1_POSN                                   0x7
#define _PWM6DCL_DC1_POSITION                               0x7
#define _PWM6DCL_DC1_SIZE                                   0x1
#define _PWM6DCL_DC1_LENGTH                                 0x1
#define _PWM6DCL_DC1_MASK                                   0x80
#define _PWM6DCL_PWM6DC0_POSN                               0x6
#define _PWM6DCL_PWM6DC0_POSITION                           0x6
#define _PWM6DCL_PWM6DC0_SIZE                               0x1
#define _PWM6DCL_PWM6DC0_LENGTH                             0x1
#define _PWM6DCL_PWM6DC0_MASK                               0x40
#define _PWM6DCL_PWM6DC1_POSN                               0x7
#define _PWM6DCL_PWM6DC1_POSITION                           0x7
#define _PWM6DCL_PWM6DC1_SIZE                               0x1
#define _PWM6DCL_PWM6DC1_LENGTH                             0x1
#define _PWM6DCL_PWM6DC1_MASK                               0x80
#define _PWM6DCL_PWMPW0_POSN                                0x6
#define _PWM6DCL_PWMPW0_POSITION                            0x6
#define _PWM6DCL_PWMPW0_SIZE                                0x1
#define _PWM6DCL_PWMPW0_LENGTH                              0x1
#define _PWM6DCL_PWMPW0_MASK                                0x40
#define _PWM6DCL_PWMPW1_POSN                                0x7
#define _PWM6DCL_PWMPW1_POSITION                            0x7
#define _PWM6DCL_PWMPW1_SIZE                                0x1
#define _PWM6DCL_PWMPW1_LENGTH                              0x1
#define _PWM6DCL_PWMPW1_MASK                                0x80

// Register: PWM6DCH
#define PWM6DCH PWM6DCH
extern volatile unsigned char           PWM6DCH             __at(0x38D);
#ifndef _LIB_BUILD
asm("PWM6DCH equ 038Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM6DC2                :1;
        unsigned PWM6DC3                :1;
        unsigned PWM6DC4                :1;
        unsigned PWM6DC5                :1;
        unsigned PWM6DC6                :1;
        unsigned PWM6DC7                :1;
        unsigned PWM6DC8                :1;
        unsigned PWM6DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM6DCHbits_t;
extern volatile PWM6DCHbits_t PWM6DCHbits __at(0x38D);
// bitfield macros
#define _PWM6DCH_DC_POSN                                    0x0
#define _PWM6DCH_DC_POSITION                                0x0
#define _PWM6DCH_DC_SIZE                                    0x8
#define _PWM6DCH_DC_LENGTH                                  0x8
#define _PWM6DCH_DC_MASK                                    0xFF
#define _PWM6DCH_DC2_POSN                                   0x0
#define _PWM6DCH_DC2_POSITION                               0x0
#define _PWM6DCH_DC2_SIZE                                   0x1
#define _PWM6DCH_DC2_LENGTH                                 0x1
#define _PWM6DCH_DC2_MASK                                   0x1
#define _PWM6DCH_DC3_POSN                                   0x1
#define _PWM6DCH_DC3_POSITION                               0x1
#define _PWM6DCH_DC3_SIZE                                   0x1
#define _PWM6DCH_DC3_LENGTH                                 0x1
#define _PWM6DCH_DC3_MASK                                   0x2
#define _PWM6DCH_DC4_POSN                                   0x2
#define _PWM6DCH_DC4_POSITION                               0x2
#define _PWM6DCH_DC4_SIZE                                   0x1
#define _PWM6DCH_DC4_LENGTH                                 0x1
#define _PWM6DCH_DC4_MASK                                   0x4
#define _PWM6DCH_DC5_POSN                                   0x3
#define _PWM6DCH_DC5_POSITION                               0x3
#define _PWM6DCH_DC5_SIZE                                   0x1
#define _PWM6DCH_DC5_LENGTH                                 0x1
#define _PWM6DCH_DC5_MASK                                   0x8
#define _PWM6DCH_DC6_POSN                                   0x4
#define _PWM6DCH_DC6_POSITION                               0x4
#define _PWM6DCH_DC6_SIZE                                   0x1
#define _PWM6DCH_DC6_LENGTH                                 0x1
#define _PWM6DCH_DC6_MASK                                   0x10
#define _PWM6DCH_DC7_POSN                                   0x5
#define _PWM6DCH_DC7_POSITION                               0x5
#define _PWM6DCH_DC7_SIZE                                   0x1
#define _PWM6DCH_DC7_LENGTH                                 0x1
#define _PWM6DCH_DC7_MASK                                   0x20
#define _PWM6DCH_DC8_POSN                                   0x6
#define _PWM6DCH_DC8_POSITION                               0x6
#define _PWM6DCH_DC8_SIZE                                   0x1
#define _PWM6DCH_DC8_LENGTH                                 0x1
#define _PWM6DCH_DC8_MASK                                   0x40
#define _PWM6DCH_DC9_POSN                                   0x7
#define _PWM6DCH_DC9_POSITION                               0x7
#define _PWM6DCH_DC9_SIZE                                   0x1
#define _PWM6DCH_DC9_LENGTH                                 0x1
#define _PWM6DCH_DC9_MASK                                   0x80
#define _PWM6DCH_PWM6DC2_POSN                               0x0
#define _PWM6DCH_PWM6DC2_POSITION                           0x0
#define _PWM6DCH_PWM6DC2_SIZE                               0x1
#define _PWM6DCH_PWM6DC2_LENGTH                             0x1
#define _PWM6DCH_PWM6DC2_MASK                               0x1
#define _PWM6DCH_PWM6DC3_POSN                               0x1
#define _PWM6DCH_PWM6DC3_POSITION                           0x1
#define _PWM6DCH_PWM6DC3_SIZE                               0x1
#define _PWM6DCH_PWM6DC3_LENGTH                             0x1
#define _PWM6DCH_PWM6DC3_MASK                               0x2
#define _PWM6DCH_PWM6DC4_POSN                               0x2
#define _PWM6DCH_PWM6DC4_POSITION                           0x2
#define _PWM6DCH_PWM6DC4_SIZE                               0x1
#define _PWM6DCH_PWM6DC4_LENGTH                             0x1
#define _PWM6DCH_PWM6DC4_MASK                               0x4
#define _PWM6DCH_PWM6DC5_POSN                               0x3
#define _PWM6DCH_PWM6DC5_POSITION                           0x3
#define _PWM6DCH_PWM6DC5_SIZE                               0x1
#define _PWM6DCH_PWM6DC5_LENGTH                             0x1
#define _PWM6DCH_PWM6DC5_MASK                               0x8
#define _PWM6DCH_PWM6DC6_POSN                               0x4
#define _PWM6DCH_PWM6DC6_POSITION                           0x4
#define _PWM6DCH_PWM6DC6_SIZE                               0x1
#define _PWM6DCH_PWM6DC6_LENGTH                             0x1
#define _PWM6DCH_PWM6DC6_MASK                               0x10
#define _PWM6DCH_PWM6DC7_POSN                               0x5
#define _PWM6DCH_PWM6DC7_POSITION                           0x5
#define _PWM6DCH_PWM6DC7_SIZE                               0x1
#define _PWM6DCH_PWM6DC7_LENGTH                             0x1
#define _PWM6DCH_PWM6DC7_MASK                               0x20
#define _PWM6DCH_PWM6DC8_POSN                               0x6
#define _PWM6DCH_PWM6DC8_POSITION                           0x6
#define _PWM6DCH_PWM6DC8_SIZE                               0x1
#define _PWM6DCH_PWM6DC8_LENGTH                             0x1
#define _PWM6DCH_PWM6DC8_MASK                               0x40
#define _PWM6DCH_PWM6DC9_POSN                               0x7
#define _PWM6DCH_PWM6DC9_POSITION                           0x7
#define _PWM6DCH_PWM6DC9_SIZE                               0x1
#define _PWM6DCH_PWM6DC9_LENGTH                             0x1
#define _PWM6DCH_PWM6DC9_MASK                               0x80
#define _PWM6DCH_PWMPW2_POSN                                0x0
#define _PWM6DCH_PWMPW2_POSITION                            0x0
#define _PWM6DCH_PWMPW2_SIZE                                0x1
#define _PWM6DCH_PWMPW2_LENGTH                              0x1
#define _PWM6DCH_PWMPW2_MASK                                0x1
#define _PWM6DCH_PWMPW3_POSN                                0x1
#define _PWM6DCH_PWMPW3_POSITION                            0x1
#define _PWM6DCH_PWMPW3_SIZE                                0x1
#define _PWM6DCH_PWMPW3_LENGTH                              0x1
#define _PWM6DCH_PWMPW3_MASK                                0x2
#define _PWM6DCH_PWMPW4_POSN                                0x2
#define _PWM6DCH_PWMPW4_POSITION                            0x2
#define _PWM6DCH_PWMPW4_SIZE                                0x1
#define _PWM6DCH_PWMPW4_LENGTH                              0x1
#define _PWM6DCH_PWMPW4_MASK                                0x4
#define _PWM6DCH_PWMPW5_POSN                                0x3
#define _PWM6DCH_PWMPW5_POSITION                            0x3
#define _PWM6DCH_PWMPW5_SIZE                                0x1
#define _PWM6DCH_PWMPW5_LENGTH                              0x1
#define _PWM6DCH_PWMPW5_MASK                                0x8
#define _PWM6DCH_PWMPW6_POSN                                0x4
#define _PWM6DCH_PWMPW6_POSITION                            0x4
#define _PWM6DCH_PWMPW6_SIZE                                0x1
#define _PWM6DCH_PWMPW6_LENGTH                              0x1
#define _PWM6DCH_PWMPW6_MASK                                0x10
#define _PWM6DCH_PWMPW7_POSN                                0x5
#define _PWM6DCH_PWMPW7_POSITION                            0x5
#define _PWM6DCH_PWMPW7_SIZE                                0x1
#define _PWM6DCH_PWMPW7_LENGTH                              0x1
#define _PWM6DCH_PWMPW7_MASK                                0x20
#define _PWM6DCH_PWMPW8_POSN                                0x6
#define _PWM6DCH_PWMPW8_POSITION                            0x6
#define _PWM6DCH_PWMPW8_SIZE                                0x1
#define _PWM6DCH_PWMPW8_LENGTH                              0x1
#define _PWM6DCH_PWMPW8_MASK                                0x40
#define _PWM6DCH_PWMPW9_POSN                                0x7
#define _PWM6DCH_PWMPW9_POSITION                            0x7
#define _PWM6DCH_PWMPW9_SIZE                                0x1
#define _PWM6DCH_PWMPW9_LENGTH                              0x1
#define _PWM6DCH_PWMPW9_MASK                                0x80

// Register: PWM6CON
#define PWM6CON PWM6CON
extern volatile unsigned char           PWM6CON             __at(0x38E);
#ifndef _LIB_BUILD
asm("PWM6CON equ 038Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM6POL                :1;
        unsigned PWM6OUT                :1;
        unsigned                        :1;
        unsigned PWM6EN                 :1;
    };
} PWM6CONbits_t;
extern volatile PWM6CONbits_t PWM6CONbits __at(0x38E);
// bitfield macros
#define _PWM6CON_POL_POSN                                   0x4
#define _PWM6CON_POL_POSITION                               0x4
#define _PWM6CON_POL_SIZE                                   0x1
#define _PWM6CON_POL_LENGTH                                 0x1
#define _PWM6CON_POL_MASK                                   0x10
#define _PWM6CON_OUT_POSN                                   0x5
#define _PWM6CON_OUT_POSITION                               0x5
#define _PWM6CON_OUT_SIZE                                   0x1
#define _PWM6CON_OUT_LENGTH                                 0x1
#define _PWM6CON_OUT_MASK                                   0x20
#define _PWM6CON_EN_POSN                                    0x7
#define _PWM6CON_EN_POSITION                                0x7
#define _PWM6CON_EN_SIZE                                    0x1
#define _PWM6CON_EN_LENGTH                                  0x1
#define _PWM6CON_EN_MASK                                    0x80
#define _PWM6CON_PWM6POL_POSN                               0x4
#define _PWM6CON_PWM6POL_POSITION                           0x4
#define _PWM6CON_PWM6POL_SIZE                               0x1
#define _PWM6CON_PWM6POL_LENGTH                             0x1
#define _PWM6CON_PWM6POL_MASK                               0x10
#define _PWM6CON_PWM6OUT_POSN                               0x5
#define _PWM6CON_PWM6OUT_POSITION                           0x5
#define _PWM6CON_PWM6OUT_SIZE                               0x1
#define _PWM6CON_PWM6OUT_LENGTH                             0x1
#define _PWM6CON_PWM6OUT_MASK                               0x20
#define _PWM6CON_PWM6EN_POSN                                0x7
#define _PWM6CON_PWM6EN_POSITION                            0x7
#define _PWM6CON_PWM6EN_SIZE                                0x1
#define _PWM6CON_PWM6EN_LENGTH                              0x1
#define _PWM6CON_PWM6EN_MASK                                0x80

// Register: PWM7DC
#define PWM7DC PWM7DC
extern volatile unsigned short          PWM7DC              __at(0x390);
#ifndef _LIB_BUILD
asm("PWM7DC equ 0390h");
#endif

// Register: PWM7DCL
#define PWM7DCL PWM7DCL
extern volatile unsigned char           PWM7DCL             __at(0x390);
#ifndef _LIB_BUILD
asm("PWM7DCL equ 0390h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM7DC0                :1;
        unsigned PWM7DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM7DCLbits_t;
extern volatile PWM7DCLbits_t PWM7DCLbits __at(0x390);
// bitfield macros
#define _PWM7DCL_DC_POSN                                    0x6
#define _PWM7DCL_DC_POSITION                                0x6
#define _PWM7DCL_DC_SIZE                                    0x2
#define _PWM7DCL_DC_LENGTH                                  0x2
#define _PWM7DCL_DC_MASK                                    0xC0
#define _PWM7DCL_DC0_POSN                                   0x6
#define _PWM7DCL_DC0_POSITION                               0x6
#define _PWM7DCL_DC0_SIZE                                   0x1
#define _PWM7DCL_DC0_LENGTH                                 0x1
#define _PWM7DCL_DC0_MASK                                   0x40
#define _PWM7DCL_DC1_POSN                                   0x7
#define _PWM7DCL_DC1_POSITION                               0x7
#define _PWM7DCL_DC1_SIZE                                   0x1
#define _PWM7DCL_DC1_LENGTH                                 0x1
#define _PWM7DCL_DC1_MASK                                   0x80
#define _PWM7DCL_PWM7DC0_POSN                               0x6
#define _PWM7DCL_PWM7DC0_POSITION                           0x6
#define _PWM7DCL_PWM7DC0_SIZE                               0x1
#define _PWM7DCL_PWM7DC0_LENGTH                             0x1
#define _PWM7DCL_PWM7DC0_MASK                               0x40
#define _PWM7DCL_PWM7DC1_POSN                               0x7
#define _PWM7DCL_PWM7DC1_POSITION                           0x7
#define _PWM7DCL_PWM7DC1_SIZE                               0x1
#define _PWM7DCL_PWM7DC1_LENGTH                             0x1
#define _PWM7DCL_PWM7DC1_MASK                               0x80
#define _PWM7DCL_PWMPW0_POSN                                0x6
#define _PWM7DCL_PWMPW0_POSITION                            0x6
#define _PWM7DCL_PWMPW0_SIZE                                0x1
#define _PWM7DCL_PWMPW0_LENGTH                              0x1
#define _PWM7DCL_PWMPW0_MASK                                0x40
#define _PWM7DCL_PWMPW1_POSN                                0x7
#define _PWM7DCL_PWMPW1_POSITION                            0x7
#define _PWM7DCL_PWMPW1_SIZE                                0x1
#define _PWM7DCL_PWMPW1_LENGTH                              0x1
#define _PWM7DCL_PWMPW1_MASK                                0x80

// Register: PWM7DCH
#define PWM7DCH PWM7DCH
extern volatile unsigned char           PWM7DCH             __at(0x391);
#ifndef _LIB_BUILD
asm("PWM7DCH equ 0391h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM7DC2                :1;
        unsigned PWM7DC3                :1;
        unsigned PWM7DC4                :1;
        unsigned PWM7DC5                :1;
        unsigned PWM7DC6                :1;
        unsigned PWM7DC7                :1;
        unsigned PWM7DC8                :1;
        unsigned PWM7DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM7DCHbits_t;
extern volatile PWM7DCHbits_t PWM7DCHbits __at(0x391);
// bitfield macros
#define _PWM7DCH_DC_POSN                                    0x0
#define _PWM7DCH_DC_POSITION                                0x0
#define _PWM7DCH_DC_SIZE                                    0x8
#define _PWM7DCH_DC_LENGTH                                  0x8
#define _PWM7DCH_DC_MASK                                    0xFF
#define _PWM7DCH_DC2_POSN                                   0x0
#define _PWM7DCH_DC2_POSITION                               0x0
#define _PWM7DCH_DC2_SIZE                                   0x1
#define _PWM7DCH_DC2_LENGTH                                 0x1
#define _PWM7DCH_DC2_MASK                                   0x1
#define _PWM7DCH_DC3_POSN                                   0x1
#define _PWM7DCH_DC3_POSITION                               0x1
#define _PWM7DCH_DC3_SIZE                                   0x1
#define _PWM7DCH_DC3_LENGTH                                 0x1
#define _PWM7DCH_DC3_MASK                                   0x2
#define _PWM7DCH_DC4_POSN                                   0x2
#define _PWM7DCH_DC4_POSITION                               0x2
#define _PWM7DCH_DC4_SIZE                                   0x1
#define _PWM7DCH_DC4_LENGTH                                 0x1
#define _PWM7DCH_DC4_MASK                                   0x4
#define _PWM7DCH_DC5_POSN                                   0x3
#define _PWM7DCH_DC5_POSITION                               0x3
#define _PWM7DCH_DC5_SIZE                                   0x1
#define _PWM7DCH_DC5_LENGTH                                 0x1
#define _PWM7DCH_DC5_MASK                                   0x8
#define _PWM7DCH_DC6_POSN                                   0x4
#define _PWM7DCH_DC6_POSITION                               0x4
#define _PWM7DCH_DC6_SIZE                                   0x1
#define _PWM7DCH_DC6_LENGTH                                 0x1
#define _PWM7DCH_DC6_MASK                                   0x10
#define _PWM7DCH_DC7_POSN                                   0x5
#define _PWM7DCH_DC7_POSITION                               0x5
#define _PWM7DCH_DC7_SIZE                                   0x1
#define _PWM7DCH_DC7_LENGTH                                 0x1
#define _PWM7DCH_DC7_MASK                                   0x20
#define _PWM7DCH_DC8_POSN                                   0x6
#define _PWM7DCH_DC8_POSITION                               0x6
#define _PWM7DCH_DC8_SIZE                                   0x1
#define _PWM7DCH_DC8_LENGTH                                 0x1
#define _PWM7DCH_DC8_MASK                                   0x40
#define _PWM7DCH_DC9_POSN                                   0x7
#define _PWM7DCH_DC9_POSITION                               0x7
#define _PWM7DCH_DC9_SIZE                                   0x1
#define _PWM7DCH_DC9_LENGTH                                 0x1
#define _PWM7DCH_DC9_MASK                                   0x80
#define _PWM7DCH_PWM7DC2_POSN                               0x0
#define _PWM7DCH_PWM7DC2_POSITION                           0x0
#define _PWM7DCH_PWM7DC2_SIZE                               0x1
#define _PWM7DCH_PWM7DC2_LENGTH                             0x1
#define _PWM7DCH_PWM7DC2_MASK                               0x1
#define _PWM7DCH_PWM7DC3_POSN                               0x1
#define _PWM7DCH_PWM7DC3_POSITION                           0x1
#define _PWM7DCH_PWM7DC3_SIZE                               0x1
#define _PWM7DCH_PWM7DC3_LENGTH                             0x1
#define _PWM7DCH_PWM7DC3_MASK                               0x2
#define _PWM7DCH_PWM7DC4_POSN                               0x2
#define _PWM7DCH_PWM7DC4_POSITION                           0x2
#define _PWM7DCH_PWM7DC4_SIZE                               0x1
#define _PWM7DCH_PWM7DC4_LENGTH                             0x1
#define _PWM7DCH_PWM7DC4_MASK                               0x4
#define _PWM7DCH_PWM7DC5_POSN                               0x3
#define _PWM7DCH_PWM7DC5_POSITION                           0x3
#define _PWM7DCH_PWM7DC5_SIZE                               0x1
#define _PWM7DCH_PWM7DC5_LENGTH                             0x1
#define _PWM7DCH_PWM7DC5_MASK                               0x8
#define _PWM7DCH_PWM7DC6_POSN                               0x4
#define _PWM7DCH_PWM7DC6_POSITION                           0x4
#define _PWM7DCH_PWM7DC6_SIZE                               0x1
#define _PWM7DCH_PWM7DC6_LENGTH                             0x1
#define _PWM7DCH_PWM7DC6_MASK                               0x10
#define _PWM7DCH_PWM7DC7_POSN                               0x5
#define _PWM7DCH_PWM7DC7_POSITION                           0x5
#define _PWM7DCH_PWM7DC7_SIZE                               0x1
#define _PWM7DCH_PWM7DC7_LENGTH                             0x1
#define _PWM7DCH_PWM7DC7_MASK                               0x20
#define _PWM7DCH_PWM7DC8_POSN                               0x6
#define _PWM7DCH_PWM7DC8_POSITION                           0x6
#define _PWM7DCH_PWM7DC8_SIZE                               0x1
#define _PWM7DCH_PWM7DC8_LENGTH                             0x1
#define _PWM7DCH_PWM7DC8_MASK                               0x40
#define _PWM7DCH_PWM7DC9_POSN                               0x7
#define _PWM7DCH_PWM7DC9_POSITION                           0x7
#define _PWM7DCH_PWM7DC9_SIZE                               0x1
#define _PWM7DCH_PWM7DC9_LENGTH                             0x1
#define _PWM7DCH_PWM7DC9_MASK                               0x80
#define _PWM7DCH_PWMPW2_POSN                                0x0
#define _PWM7DCH_PWMPW2_POSITION                            0x0
#define _PWM7DCH_PWMPW2_SIZE                                0x1
#define _PWM7DCH_PWMPW2_LENGTH                              0x1
#define _PWM7DCH_PWMPW2_MASK                                0x1
#define _PWM7DCH_PWMPW3_POSN                                0x1
#define _PWM7DCH_PWMPW3_POSITION                            0x1
#define _PWM7DCH_PWMPW3_SIZE                                0x1
#define _PWM7DCH_PWMPW3_LENGTH                              0x1
#define _PWM7DCH_PWMPW3_MASK                                0x2
#define _PWM7DCH_PWMPW4_POSN                                0x2
#define _PWM7DCH_PWMPW4_POSITION                            0x2
#define _PWM7DCH_PWMPW4_SIZE                                0x1
#define _PWM7DCH_PWMPW4_LENGTH                              0x1
#define _PWM7DCH_PWMPW4_MASK                                0x4
#define _PWM7DCH_PWMPW5_POSN                                0x3
#define _PWM7DCH_PWMPW5_POSITION                            0x3
#define _PWM7DCH_PWMPW5_SIZE                                0x1
#define _PWM7DCH_PWMPW5_LENGTH                              0x1
#define _PWM7DCH_PWMPW5_MASK                                0x8
#define _PWM7DCH_PWMPW6_POSN                                0x4
#define _PWM7DCH_PWMPW6_POSITION                            0x4
#define _PWM7DCH_PWMPW6_SIZE                                0x1
#define _PWM7DCH_PWMPW6_LENGTH                              0x1
#define _PWM7DCH_PWMPW6_MASK                                0x10
#define _PWM7DCH_PWMPW7_POSN                                0x5
#define _PWM7DCH_PWMPW7_POSITION                            0x5
#define _PWM7DCH_PWMPW7_SIZE                                0x1
#define _PWM7DCH_PWMPW7_LENGTH                              0x1
#define _PWM7DCH_PWMPW7_MASK                                0x20
#define _PWM7DCH_PWMPW8_POSN                                0x6
#define _PWM7DCH_PWMPW8_POSITION                            0x6
#define _PWM7DCH_PWMPW8_SIZE                                0x1
#define _PWM7DCH_PWMPW8_LENGTH                              0x1
#define _PWM7DCH_PWMPW8_MASK                                0x40
#define _PWM7DCH_PWMPW9_POSN                                0x7
#define _PWM7DCH_PWMPW9_POSITION                            0x7
#define _PWM7DCH_PWMPW9_SIZE                                0x1
#define _PWM7DCH_PWMPW9_LENGTH                              0x1
#define _PWM7DCH_PWMPW9_MASK                                0x80

// Register: PWM7CON
#define PWM7CON PWM7CON
extern volatile unsigned char           PWM7CON             __at(0x392);
#ifndef _LIB_BUILD
asm("PWM7CON equ 0392h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM7POL                :1;
        unsigned PWM7OUT                :1;
        unsigned                        :1;
        unsigned PWM7EN                 :1;
    };
} PWM7CONbits_t;
extern volatile PWM7CONbits_t PWM7CONbits __at(0x392);
// bitfield macros
#define _PWM7CON_POL_POSN                                   0x4
#define _PWM7CON_POL_POSITION                               0x4
#define _PWM7CON_POL_SIZE                                   0x1
#define _PWM7CON_POL_LENGTH                                 0x1
#define _PWM7CON_POL_MASK                                   0x10
#define _PWM7CON_OUT_POSN                                   0x5
#define _PWM7CON_OUT_POSITION                               0x5
#define _PWM7CON_OUT_SIZE                                   0x1
#define _PWM7CON_OUT_LENGTH                                 0x1
#define _PWM7CON_OUT_MASK                                   0x20
#define _PWM7CON_EN_POSN                                    0x7
#define _PWM7CON_EN_POSITION                                0x7
#define _PWM7CON_EN_SIZE                                    0x1
#define _PWM7CON_EN_LENGTH                                  0x1
#define _PWM7CON_EN_MASK                                    0x80
#define _PWM7CON_PWM7POL_POSN                               0x4
#define _PWM7CON_PWM7POL_POSITION                           0x4
#define _PWM7CON_PWM7POL_SIZE                               0x1
#define _PWM7CON_PWM7POL_LENGTH                             0x1
#define _PWM7CON_PWM7POL_MASK                               0x10
#define _PWM7CON_PWM7OUT_POSN                               0x5
#define _PWM7CON_PWM7OUT_POSITION                           0x5
#define _PWM7CON_PWM7OUT_SIZE                               0x1
#define _PWM7CON_PWM7OUT_LENGTH                             0x1
#define _PWM7CON_PWM7OUT_MASK                               0x20
#define _PWM7CON_PWM7EN_POSN                                0x7
#define _PWM7CON_PWM7EN_POSITION                            0x7
#define _PWM7CON_PWM7EN_SIZE                                0x1
#define _PWM7CON_PWM7EN_LENGTH                              0x1
#define _PWM7CON_PWM7EN_MASK                                0x80

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x40C);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 040Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADRL                  :8;
    };
    struct {
        unsigned LADR0                  :1;
        unsigned LADR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
    struct {
        unsigned SCANLADRL              :8;
    };
    struct {
        unsigned SCANLADR0              :1;
        unsigned SCANLADR1              :1;
        unsigned SCANLADR2              :1;
        unsigned SCANLADR3              :1;
        unsigned SCANLADR4              :1;
        unsigned SCANLADR5              :1;
        unsigned SCANLADR6              :1;
        unsigned SCANLADR7              :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x40C);
// bitfield macros
#define _SCANLADRL_LADRL_POSN                               0x0
#define _SCANLADRL_LADRL_POSITION                           0x0
#define _SCANLADRL_LADRL_SIZE                               0x8
#define _SCANLADRL_LADRL_LENGTH                             0x8
#define _SCANLADRL_LADRL_MASK                               0xFF
#define _SCANLADRL_LADR0_POSN                               0x0
#define _SCANLADRL_LADR0_POSITION                           0x0
#define _SCANLADRL_LADR0_SIZE                               0x1
#define _SCANLADRL_LADR0_LENGTH                             0x1
#define _SCANLADRL_LADR0_MASK                               0x1
#define _SCANLADRL_LADR1_POSN                               0x1
#define _SCANLADRL_LADR1_POSITION                           0x1
#define _SCANLADRL_LADR1_SIZE                               0x1
#define _SCANLADRL_LADR1_LENGTH                             0x1
#define _SCANLADRL_LADR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80
#define _SCANLADRL_SCANLADRL_POSN                           0x0
#define _SCANLADRL_SCANLADRL_POSITION                       0x0
#define _SCANLADRL_SCANLADRL_SIZE                           0x8
#define _SCANLADRL_SCANLADRL_LENGTH                         0x8
#define _SCANLADRL_SCANLADRL_MASK                           0xFF
#define _SCANLADRL_SCANLADR0_POSN                           0x0
#define _SCANLADRL_SCANLADR0_POSITION                       0x0
#define _SCANLADRL_SCANLADR0_SIZE                           0x1
#define _SCANLADRL_SCANLADR0_LENGTH                         0x1
#define _SCANLADRL_SCANLADR0_MASK                           0x1
#define _SCANLADRL_SCANLADR1_POSN                           0x1
#define _SCANLADRL_SCANLADR1_POSITION                       0x1
#define _SCANLADRL_SCANLADR1_SIZE                           0x1
#define _SCANLADRL_SCANLADR1_LENGTH                         0x1
#define _SCANLADRL_SCANLADR1_MASK                           0x2
#define _SCANLADRL_SCANLADR2_POSN                           0x2
#define _SCANLADRL_SCANLADR2_POSITION                       0x2
#define _SCANLADRL_SCANLADR2_SIZE                           0x1
#define _SCANLADRL_SCANLADR2_LENGTH                         0x1
#define _SCANLADRL_SCANLADR2_MASK                           0x4
#define _SCANLADRL_SCANLADR3_POSN                           0x3
#define _SCANLADRL_SCANLADR3_POSITION                       0x3
#define _SCANLADRL_SCANLADR3_SIZE                           0x1
#define _SCANLADRL_SCANLADR3_LENGTH                         0x1
#define _SCANLADRL_SCANLADR3_MASK                           0x8
#define _SCANLADRL_SCANLADR4_POSN                           0x4
#define _SCANLADRL_SCANLADR4_POSITION                       0x4
#define _SCANLADRL_SCANLADR4_SIZE                           0x1
#define _SCANLADRL_SCANLADR4_LENGTH                         0x1
#define _SCANLADRL_SCANLADR4_MASK                           0x10
#define _SCANLADRL_SCANLADR5_POSN                           0x5
#define _SCANLADRL_SCANLADR5_POSITION                       0x5
#define _SCANLADRL_SCANLADR5_SIZE                           0x1
#define _SCANLADRL_SCANLADR5_LENGTH                         0x1
#define _SCANLADRL_SCANLADR5_MASK                           0x20
#define _SCANLADRL_SCANLADR6_POSN                           0x6
#define _SCANLADRL_SCANLADR6_POSITION                       0x6
#define _SCANLADRL_SCANLADR6_SIZE                           0x1
#define _SCANLADRL_SCANLADR6_LENGTH                         0x1
#define _SCANLADRL_SCANLADR6_MASK                           0x40
#define _SCANLADRL_SCANLADR7_POSN                           0x7
#define _SCANLADRL_SCANLADR7_POSITION                       0x7
#define _SCANLADRL_SCANLADR7_SIZE                           0x1
#define _SCANLADRL_SCANLADR7_LENGTH                         0x1
#define _SCANLADRL_SCANLADR7_MASK                           0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x40D);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 040Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADRH                  :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
    struct {
        unsigned SCANLADRH              :8;
    };
    struct {
        unsigned SCANLADR8              :1;
        unsigned SCANLADR9              :1;
        unsigned SCANLADR10             :1;
        unsigned SCANLADR11             :1;
        unsigned SCANLADR12             :1;
        unsigned SCANLADR13             :1;
        unsigned SCANLADR14             :1;
        unsigned SCANLADR15             :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x40D);
// bitfield macros
#define _SCANLADRH_LADRH_POSN                               0x0
#define _SCANLADRH_LADRH_POSITION                           0x0
#define _SCANLADRH_LADRH_SIZE                               0x8
#define _SCANLADRH_LADRH_LENGTH                             0x8
#define _SCANLADRH_LADRH_MASK                               0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80
#define _SCANLADRH_SCANLADRH_POSN                           0x0
#define _SCANLADRH_SCANLADRH_POSITION                       0x0
#define _SCANLADRH_SCANLADRH_SIZE                           0x8
#define _SCANLADRH_SCANLADRH_LENGTH                         0x8
#define _SCANLADRH_SCANLADRH_MASK                           0xFF
#define _SCANLADRH_SCANLADR8_POSN                           0x0
#define _SCANLADRH_SCANLADR8_POSITION                       0x0
#define _SCANLADRH_SCANLADR8_SIZE                           0x1
#define _SCANLADRH_SCANLADR8_LENGTH                         0x1
#define _SCANLADRH_SCANLADR8_MASK                           0x1
#define _SCANLADRH_SCANLADR9_POSN                           0x1
#define _SCANLADRH_SCANLADR9_POSITION                       0x1
#define _SCANLADRH_SCANLADR9_SIZE                           0x1
#define _SCANLADRH_SCANLADR9_LENGTH                         0x1
#define _SCANLADRH_SCANLADR9_MASK                           0x2
#define _SCANLADRH_SCANLADR10_POSN                          0x2
#define _SCANLADRH_SCANLADR10_POSITION                      0x2
#define _SCANLADRH_SCANLADR10_SIZE                          0x1
#define _SCANLADRH_SCANLADR10_LENGTH                        0x1
#define _SCANLADRH_SCANLADR10_MASK                          0x4
#define _SCANLADRH_SCANLADR11_POSN                          0x3
#define _SCANLADRH_SCANLADR11_POSITION                      0x3
#define _SCANLADRH_SCANLADR11_SIZE                          0x1
#define _SCANLADRH_SCANLADR11_LENGTH                        0x1
#define _SCANLADRH_SCANLADR11_MASK                          0x8
#define _SCANLADRH_SCANLADR12_POSN                          0x4
#define _SCANLADRH_SCANLADR12_POSITION                      0x4
#define _SCANLADRH_SCANLADR12_SIZE                          0x1
#define _SCANLADRH_SCANLADR12_LENGTH                        0x1
#define _SCANLADRH_SCANLADR12_MASK                          0x10
#define _SCANLADRH_SCANLADR13_POSN                          0x5
#define _SCANLADRH_SCANLADR13_POSITION                      0x5
#define _SCANLADRH_SCANLADR13_SIZE                          0x1
#define _SCANLADRH_SCANLADR13_LENGTH                        0x1
#define _SCANLADRH_SCANLADR13_MASK                          0x20
#define _SCANLADRH_SCANLADR14_POSN                          0x6
#define _SCANLADRH_SCANLADR14_POSITION                      0x6
#define _SCANLADRH_SCANLADR14_SIZE                          0x1
#define _SCANLADRH_SCANLADR14_LENGTH                        0x1
#define _SCANLADRH_SCANLADR14_MASK                          0x40
#define _SCANLADRH_SCANLADR15_POSN                          0x7
#define _SCANLADRH_SCANLADR15_POSITION                      0x7
#define _SCANLADRH_SCANLADR15_SIZE                          0x1
#define _SCANLADRH_SCANLADR15_LENGTH                        0x1
#define _SCANLADRH_SCANLADR15_MASK                          0x80

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x40E);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 040Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADRL                  :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HADR2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
    struct {
        unsigned SCANHADRL              :8;
    };
    struct {
        unsigned SCANHADR0              :1;
        unsigned SCANHADR1              :1;
        unsigned SCANHADR2              :1;
        unsigned SCANHADR3              :1;
        unsigned SCANHADR4              :1;
        unsigned SCANHADR5              :1;
        unsigned SCANHADR6              :1;
        unsigned SCANHADR7              :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x40E);
// bitfield macros
#define _SCANHADRL_HADRL_POSN                               0x0
#define _SCANHADRL_HADRL_POSITION                           0x0
#define _SCANHADRL_HADRL_SIZE                               0x8
#define _SCANHADRL_HADRL_LENGTH                             0x8
#define _SCANHADRL_HADRL_MASK                               0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HADR2_POSN                               0x2
#define _SCANHADRL_HADR2_POSITION                           0x2
#define _SCANHADRL_HADR2_SIZE                               0x1
#define _SCANHADRL_HADR2_LENGTH                             0x1
#define _SCANHADRL_HADR2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80
#define _SCANHADRL_SCANHADRL_POSN                           0x0
#define _SCANHADRL_SCANHADRL_POSITION                       0x0
#define _SCANHADRL_SCANHADRL_SIZE                           0x8
#define _SCANHADRL_SCANHADRL_LENGTH                         0x8
#define _SCANHADRL_SCANHADRL_MASK                           0xFF
#define _SCANHADRL_SCANHADR0_POSN                           0x0
#define _SCANHADRL_SCANHADR0_POSITION                       0x0
#define _SCANHADRL_SCANHADR0_SIZE                           0x1
#define _SCANHADRL_SCANHADR0_LENGTH                         0x1
#define _SCANHADRL_SCANHADR0_MASK                           0x1
#define _SCANHADRL_SCANHADR1_POSN                           0x1
#define _SCANHADRL_SCANHADR1_POSITION                       0x1
#define _SCANHADRL_SCANHADR1_SIZE                           0x1
#define _SCANHADRL_SCANHADR1_LENGTH                         0x1
#define _SCANHADRL_SCANHADR1_MASK                           0x2
#define _SCANHADRL_SCANHADR2_POSN                           0x2
#define _SCANHADRL_SCANHADR2_POSITION                       0x2
#define _SCANHADRL_SCANHADR2_SIZE                           0x1
#define _SCANHADRL_SCANHADR2_LENGTH                         0x1
#define _SCANHADRL_SCANHADR2_MASK                           0x4
#define _SCANHADRL_SCANHADR3_POSN                           0x3
#define _SCANHADRL_SCANHADR3_POSITION                       0x3
#define _SCANHADRL_SCANHADR3_SIZE                           0x1
#define _SCANHADRL_SCANHADR3_LENGTH                         0x1
#define _SCANHADRL_SCANHADR3_MASK                           0x8
#define _SCANHADRL_SCANHADR4_POSN                           0x4
#define _SCANHADRL_SCANHADR4_POSITION                       0x4
#define _SCANHADRL_SCANHADR4_SIZE                           0x1
#define _SCANHADRL_SCANHADR4_LENGTH                         0x1
#define _SCANHADRL_SCANHADR4_MASK                           0x10
#define _SCANHADRL_SCANHADR5_POSN                           0x5
#define _SCANHADRL_SCANHADR5_POSITION                       0x5
#define _SCANHADRL_SCANHADR5_SIZE                           0x1
#define _SCANHADRL_SCANHADR5_LENGTH                         0x1
#define _SCANHADRL_SCANHADR5_MASK                           0x20
#define _SCANHADRL_SCANHADR6_POSN                           0x6
#define _SCANHADRL_SCANHADR6_POSITION                       0x6
#define _SCANHADRL_SCANHADR6_SIZE                           0x1
#define _SCANHADRL_SCANHADR6_LENGTH                         0x1
#define _SCANHADRL_SCANHADR6_MASK                           0x40
#define _SCANHADRL_SCANHADR7_POSN                           0x7
#define _SCANHADRL_SCANHADR7_POSITION                       0x7
#define _SCANHADRL_SCANHADR7_SIZE                           0x1
#define _SCANHADRL_SCANHADR7_LENGTH                         0x1
#define _SCANHADRL_SCANHADR7_MASK                           0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x40F);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 040Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADRH                  :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
    struct {
        unsigned SCANHADRH              :8;
    };
    struct {
        unsigned SCANHADR8              :1;
        unsigned SCANHADR9              :1;
        unsigned SCANHADR10             :1;
        unsigned SCANHADR11             :1;
        unsigned SCANHADR12             :1;
        unsigned SCANHADR13             :1;
        unsigned SCANHADR14             :1;
        unsigned SCANHADR15             :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x40F);
// bitfield macros
#define _SCANHADRH_HADRH_POSN                               0x0
#define _SCANHADRH_HADRH_POSITION                           0x0
#define _SCANHADRH_HADRH_SIZE                               0x8
#define _SCANHADRH_HADRH_LENGTH                             0x8
#define _SCANHADRH_HADRH_MASK                               0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80
#define _SCANHADRH_SCANHADRH_POSN                           0x0
#define _SCANHADRH_SCANHADRH_POSITION                       0x0
#define _SCANHADRH_SCANHADRH_SIZE                           0x8
#define _SCANHADRH_SCANHADRH_LENGTH                         0x8
#define _SCANHADRH_SCANHADRH_MASK                           0xFF
#define _SCANHADRH_SCANHADR8_POSN                           0x0
#define _SCANHADRH_SCANHADR8_POSITION                       0x0
#define _SCANHADRH_SCANHADR8_SIZE                           0x1
#define _SCANHADRH_SCANHADR8_LENGTH                         0x1
#define _SCANHADRH_SCANHADR8_MASK                           0x1
#define _SCANHADRH_SCANHADR9_POSN                           0x1
#define _SCANHADRH_SCANHADR9_POSITION                       0x1
#define _SCANHADRH_SCANHADR9_SIZE                           0x1
#define _SCANHADRH_SCANHADR9_LENGTH                         0x1
#define _SCANHADRH_SCANHADR9_MASK                           0x2
#define _SCANHADRH_SCANHADR10_POSN                          0x2
#define _SCANHADRH_SCANHADR10_POSITION                      0x2
#define _SCANHADRH_SCANHADR10_SIZE                          0x1
#define _SCANHADRH_SCANHADR10_LENGTH                        0x1
#define _SCANHADRH_SCANHADR10_MASK                          0x4
#define _SCANHADRH_SCANHADR11_POSN                          0x3
#define _SCANHADRH_SCANHADR11_POSITION                      0x3
#define _SCANHADRH_SCANHADR11_SIZE                          0x1
#define _SCANHADRH_SCANHADR11_LENGTH                        0x1
#define _SCANHADRH_SCANHADR11_MASK                          0x8
#define _SCANHADRH_SCANHADR12_POSN                          0x4
#define _SCANHADRH_SCANHADR12_POSITION                      0x4
#define _SCANHADRH_SCANHADR12_SIZE                          0x1
#define _SCANHADRH_SCANHADR12_LENGTH                        0x1
#define _SCANHADRH_SCANHADR12_MASK                          0x10
#define _SCANHADRH_SCANHADR13_POSN                          0x5
#define _SCANHADRH_SCANHADR13_POSITION                      0x5
#define _SCANHADRH_SCANHADR13_SIZE                          0x1
#define _SCANHADRH_SCANHADR13_LENGTH                        0x1
#define _SCANHADRH_SCANHADR13_MASK                          0x20
#define _SCANHADRH_SCANHADR14_POSN                          0x6
#define _SCANHADRH_SCANHADR14_POSITION                      0x6
#define _SCANHADRH_SCANHADR14_SIZE                          0x1
#define _SCANHADRH_SCANHADR14_LENGTH                        0x1
#define _SCANHADRH_SCANHADR14_MASK                          0x40
#define _SCANHADRH_SCANHADR15_POSN                          0x7
#define _SCANHADRH_SCANHADR15_POSITION                      0x7
#define _SCANHADRH_SCANHADR15_SIZE                          0x1
#define _SCANHADRH_SCANHADR15_LENGTH                        0x1
#define _SCANHADRH_SCANHADR15_MASK                          0x80

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x410);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 0410h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :2;
        unsigned                        :1;
        unsigned INTM                   :1;
        unsigned INVALID                :1;
        unsigned BUSY                   :1;
        unsigned SCANGO                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
    };
    struct {
        unsigned SCANMODE               :2;
        unsigned                        :1;
        unsigned SCANINTM               :1;
        unsigned SCANINVALID            :1;
        unsigned SCANBUSY               :1;
        unsigned                        :1;
        unsigned SCANEN                 :1;
    };
    struct {
        unsigned SCANMODE0              :1;
        unsigned SCANMODE1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned DABORT                 :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x410);
// bitfield macros
#define _SCANCON0_MODE_POSN                                 0x0
#define _SCANCON0_MODE_POSITION                             0x0
#define _SCANCON0_MODE_SIZE                                 0x2
#define _SCANCON0_MODE_LENGTH                               0x2
#define _SCANCON0_MODE_MASK                                 0x3
#define _SCANCON0_INTM_POSN                                 0x3
#define _SCANCON0_INTM_POSITION                             0x3
#define _SCANCON0_INTM_SIZE                                 0x1
#define _SCANCON0_INTM_LENGTH                               0x1
#define _SCANCON0_INTM_MASK                                 0x8
#define _SCANCON0_INVALID_POSN                              0x4
#define _SCANCON0_INVALID_POSITION                          0x4
#define _SCANCON0_INVALID_SIZE                              0x1
#define _SCANCON0_INVALID_LENGTH                            0x1
#define _SCANCON0_INVALID_MASK                              0x10
#define _SCANCON0_BUSY_POSN                                 0x5
#define _SCANCON0_BUSY_POSITION                             0x5
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x20
#define _SCANCON0_SCANGO_POSN                               0x6
#define _SCANCON0_SCANGO_POSITION                           0x6
#define _SCANCON0_SCANGO_SIZE                               0x1
#define _SCANCON0_SCANGO_LENGTH                             0x1
#define _SCANCON0_SCANGO_MASK                               0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80
#define _SCANCON0_MODE0_POSN                                0x0
#define _SCANCON0_MODE0_POSITION                            0x0
#define _SCANCON0_MODE0_SIZE                                0x1
#define _SCANCON0_MODE0_LENGTH                              0x1
#define _SCANCON0_MODE0_MASK                                0x1
#define _SCANCON0_MODE1_POSN                                0x1
#define _SCANCON0_MODE1_POSITION                            0x1
#define _SCANCON0_MODE1_SIZE                                0x1
#define _SCANCON0_MODE1_LENGTH                              0x1
#define _SCANCON0_MODE1_MASK                                0x2
#define _SCANCON0_SCANMODE_POSN                             0x0
#define _SCANCON0_SCANMODE_POSITION                         0x0
#define _SCANCON0_SCANMODE_SIZE                             0x2
#define _SCANCON0_SCANMODE_LENGTH                           0x2
#define _SCANCON0_SCANMODE_MASK                             0x3
#define _SCANCON0_SCANINTM_POSN                             0x3
#define _SCANCON0_SCANINTM_POSITION                         0x3
#define _SCANCON0_SCANINTM_SIZE                             0x1
#define _SCANCON0_SCANINTM_LENGTH                           0x1
#define _SCANCON0_SCANINTM_MASK                             0x8
#define _SCANCON0_SCANINVALID_POSN                          0x4
#define _SCANCON0_SCANINVALID_POSITION                      0x4
#define _SCANCON0_SCANINVALID_SIZE                          0x1
#define _SCANCON0_SCANINVALID_LENGTH                        0x1
#define _SCANCON0_SCANINVALID_MASK                          0x10
#define _SCANCON0_SCANBUSY_POSN                             0x5
#define _SCANCON0_SCANBUSY_POSITION                         0x5
#define _SCANCON0_SCANBUSY_SIZE                             0x1
#define _SCANCON0_SCANBUSY_LENGTH                           0x1
#define _SCANCON0_SCANBUSY_MASK                             0x20
#define _SCANCON0_SCANEN_POSN                               0x7
#define _SCANCON0_SCANEN_POSITION                           0x7
#define _SCANCON0_SCANEN_SIZE                               0x1
#define _SCANCON0_SCANEN_LENGTH                             0x1
#define _SCANCON0_SCANEN_MASK                               0x80
#define _SCANCON0_SCANMODE0_POSN                            0x0
#define _SCANCON0_SCANMODE0_POSITION                        0x0
#define _SCANCON0_SCANMODE0_SIZE                            0x1
#define _SCANCON0_SCANMODE0_LENGTH                          0x1
#define _SCANCON0_SCANMODE0_MASK                            0x1
#define _SCANCON0_SCANMODE1_POSN                            0x1
#define _SCANCON0_SCANMODE1_POSITION                        0x1
#define _SCANCON0_SCANMODE1_SIZE                            0x1
#define _SCANCON0_SCANMODE1_LENGTH                          0x1
#define _SCANCON0_SCANMODE1_MASK                            0x2
#define _SCANCON0_DABORT_POSN                               0x4
#define _SCANCON0_DABORT_POSITION                           0x4
#define _SCANCON0_DABORT_SIZE                               0x1
#define _SCANCON0_DABORT_LENGTH                             0x1
#define _SCANCON0_DABORT_MASK                               0x10

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0x411);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 0411h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :4;
    };
    struct {
        unsigned TSEL0                  :1;
        unsigned TSEL1                  :1;
        unsigned TSEL2                  :1;
        unsigned TSEL3                  :1;
    };
    struct {
        unsigned SCANTSEL               :4;
    };
    struct {
        unsigned SCANTSEL0              :1;
        unsigned SCANTSEL1              :1;
        unsigned SCANTSEL2              :1;
        unsigned SCANTSEL3              :1;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0x411);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x4
#define _SCANTRIG_TSEL_LENGTH                               0x4
#define _SCANTRIG_TSEL_MASK                                 0xF
#define _SCANTRIG_TSEL0_POSN                                0x0
#define _SCANTRIG_TSEL0_POSITION                            0x0
#define _SCANTRIG_TSEL0_SIZE                                0x1
#define _SCANTRIG_TSEL0_LENGTH                              0x1
#define _SCANTRIG_TSEL0_MASK                                0x1
#define _SCANTRIG_TSEL1_POSN                                0x1
#define _SCANTRIG_TSEL1_POSITION                            0x1
#define _SCANTRIG_TSEL1_SIZE                                0x1
#define _SCANTRIG_TSEL1_LENGTH                              0x1
#define _SCANTRIG_TSEL1_MASK                                0x2
#define _SCANTRIG_TSEL2_POSN                                0x2
#define _SCANTRIG_TSEL2_POSITION                            0x2
#define _SCANTRIG_TSEL2_SIZE                                0x1
#define _SCANTRIG_TSEL2_LENGTH                              0x1
#define _SCANTRIG_TSEL2_MASK                                0x4
#define _SCANTRIG_TSEL3_POSN                                0x3
#define _SCANTRIG_TSEL3_POSITION                            0x3
#define _SCANTRIG_TSEL3_SIZE                                0x1
#define _SCANTRIG_TSEL3_LENGTH                              0x1
#define _SCANTRIG_TSEL3_MASK                                0x8
#define _SCANTRIG_SCANTSEL_POSN                             0x0
#define _SCANTRIG_SCANTSEL_POSITION                         0x0
#define _SCANTRIG_SCANTSEL_SIZE                             0x4
#define _SCANTRIG_SCANTSEL_LENGTH                           0x4
#define _SCANTRIG_SCANTSEL_MASK                             0xF
#define _SCANTRIG_SCANTSEL0_POSN                            0x0
#define _SCANTRIG_SCANTSEL0_POSITION                        0x0
#define _SCANTRIG_SCANTSEL0_SIZE                            0x1
#define _SCANTRIG_SCANTSEL0_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL0_MASK                            0x1
#define _SCANTRIG_SCANTSEL1_POSN                            0x1
#define _SCANTRIG_SCANTSEL1_POSITION                        0x1
#define _SCANTRIG_SCANTSEL1_SIZE                            0x1
#define _SCANTRIG_SCANTSEL1_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL1_MASK                            0x2
#define _SCANTRIG_SCANTSEL2_POSN                            0x2
#define _SCANTRIG_SCANTSEL2_POSITION                        0x2
#define _SCANTRIG_SCANTSEL2_SIZE                            0x1
#define _SCANTRIG_SCANTSEL2_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL2_MASK                            0x4
#define _SCANTRIG_SCANTSEL3_POSN                            0x3
#define _SCANTRIG_SCANTSEL3_POSITION                        0x3
#define _SCANTRIG_SCANTSEL3_SIZE                            0x1
#define _SCANTRIG_SCANTSEL3_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL3_MASK                            0x8

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned short          CRCDATA             __at(0x416);
#ifndef _LIB_BUILD
asm("CRCDATA equ 0416h");
#endif

// Register: CRCDATL
#define CRCDATL CRCDATL
extern volatile unsigned char           CRCDATL             __at(0x416);
#ifndef _LIB_BUILD
asm("CRCDATL equ 0416h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATLbits_t;
extern volatile CRCDATLbits_t CRCDATLbits __at(0x416);
// bitfield macros
#define _CRCDATL_DATA0_POSN                                 0x0
#define _CRCDATL_DATA0_POSITION                             0x0
#define _CRCDATL_DATA0_SIZE                                 0x1
#define _CRCDATL_DATA0_LENGTH                               0x1
#define _CRCDATL_DATA0_MASK                                 0x1
#define _CRCDATL_DATA1_POSN                                 0x1
#define _CRCDATL_DATA1_POSITION                             0x1
#define _CRCDATL_DATA1_SIZE                                 0x1
#define _CRCDATL_DATA1_LENGTH                               0x1
#define _CRCDATL_DATA1_MASK                                 0x2
#define _CRCDATL_DATA2_POSN                                 0x2
#define _CRCDATL_DATA2_POSITION                             0x2
#define _CRCDATL_DATA2_SIZE                                 0x1
#define _CRCDATL_DATA2_LENGTH                               0x1
#define _CRCDATL_DATA2_MASK                                 0x4
#define _CRCDATL_DATA3_POSN                                 0x3
#define _CRCDATL_DATA3_POSITION                             0x3
#define _CRCDATL_DATA3_SIZE                                 0x1
#define _CRCDATL_DATA3_LENGTH                               0x1
#define _CRCDATL_DATA3_MASK                                 0x8
#define _CRCDATL_DATA4_POSN                                 0x4
#define _CRCDATL_DATA4_POSITION                             0x4
#define _CRCDATL_DATA4_SIZE                                 0x1
#define _CRCDATL_DATA4_LENGTH                               0x1
#define _CRCDATL_DATA4_MASK                                 0x10
#define _CRCDATL_DATA5_POSN                                 0x5
#define _CRCDATL_DATA5_POSITION                             0x5
#define _CRCDATL_DATA5_SIZE                                 0x1
#define _CRCDATL_DATA5_LENGTH                               0x1
#define _CRCDATL_DATA5_MASK                                 0x20
#define _CRCDATL_DATA6_POSN                                 0x6
#define _CRCDATL_DATA6_POSITION                             0x6
#define _CRCDATL_DATA6_SIZE                                 0x1
#define _CRCDATL_DATA6_LENGTH                               0x1
#define _CRCDATL_DATA6_MASK                                 0x40
#define _CRCDATL_DATA7_POSN                                 0x7
#define _CRCDATL_DATA7_POSITION                             0x7
#define _CRCDATL_DATA7_SIZE                                 0x1
#define _CRCDATL_DATA7_LENGTH                               0x1
#define _CRCDATL_DATA7_MASK                                 0x80

// Register: CRCDATH
#define CRCDATH CRCDATH
extern volatile unsigned char           CRCDATH             __at(0x417);
#ifndef _LIB_BUILD
asm("CRCDATH equ 0417h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATHbits_t;
extern volatile CRCDATHbits_t CRCDATHbits __at(0x417);
// bitfield macros
#define _CRCDATH_DATA8_POSN                                 0x0
#define _CRCDATH_DATA8_POSITION                             0x0
#define _CRCDATH_DATA8_SIZE                                 0x1
#define _CRCDATH_DATA8_LENGTH                               0x1
#define _CRCDATH_DATA8_MASK                                 0x1
#define _CRCDATH_DATA9_POSN                                 0x1
#define _CRCDATH_DATA9_POSITION                             0x1
#define _CRCDATH_DATA9_SIZE                                 0x1
#define _CRCDATH_DATA9_LENGTH                               0x1
#define _CRCDATH_DATA9_MASK                                 0x2
#define _CRCDATH_DATA10_POSN                                0x2
#define _CRCDATH_DATA10_POSITION                            0x2
#define _CRCDATH_DATA10_SIZE                                0x1
#define _CRCDATH_DATA10_LENGTH                              0x1
#define _CRCDATH_DATA10_MASK                                0x4
#define _CRCDATH_DATA11_POSN                                0x3
#define _CRCDATH_DATA11_POSITION                            0x3
#define _CRCDATH_DATA11_SIZE                                0x1
#define _CRCDATH_DATA11_LENGTH                              0x1
#define _CRCDATH_DATA11_MASK                                0x8
#define _CRCDATH_DATA12_POSN                                0x4
#define _CRCDATH_DATA12_POSITION                            0x4
#define _CRCDATH_DATA12_SIZE                                0x1
#define _CRCDATH_DATA12_LENGTH                              0x1
#define _CRCDATH_DATA12_MASK                                0x10
#define _CRCDATH_DATA13_POSN                                0x5
#define _CRCDATH_DATA13_POSITION                            0x5
#define _CRCDATH_DATA13_SIZE                                0x1
#define _CRCDATH_DATA13_LENGTH                              0x1
#define _CRCDATH_DATA13_MASK                                0x20
#define _CRCDATH_DATA14_POSN                                0x6
#define _CRCDATH_DATA14_POSITION                            0x6
#define _CRCDATH_DATA14_SIZE                                0x1
#define _CRCDATH_DATA14_LENGTH                              0x1
#define _CRCDATH_DATA14_MASK                                0x40
#define _CRCDATH_DATA15_POSN                                0x7
#define _CRCDATH_DATA15_POSITION                            0x7
#define _CRCDATH_DATA15_SIZE                                0x1
#define _CRCDATH_DATA15_LENGTH                              0x1
#define _CRCDATH_DATA15_MASK                                0x80

// Register: CRCACC
#define CRCACC CRCACC
extern volatile unsigned short          CRCACC              __at(0x418);
#ifndef _LIB_BUILD
asm("CRCACC equ 0418h");
#endif

// Register: CRCACCL
#define CRCACCL CRCACCL
extern volatile unsigned char           CRCACCL             __at(0x418);
#ifndef _LIB_BUILD
asm("CRCACCL equ 0418h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} CRCACCLbits_t;
extern volatile CRCACCLbits_t CRCACCLbits __at(0x418);
// bitfield macros
#define _CRCACCL_ACC0_POSN                                  0x0
#define _CRCACCL_ACC0_POSITION                              0x0
#define _CRCACCL_ACC0_SIZE                                  0x1
#define _CRCACCL_ACC0_LENGTH                                0x1
#define _CRCACCL_ACC0_MASK                                  0x1
#define _CRCACCL_ACC1_POSN                                  0x1
#define _CRCACCL_ACC1_POSITION                              0x1
#define _CRCACCL_ACC1_SIZE                                  0x1
#define _CRCACCL_ACC1_LENGTH                                0x1
#define _CRCACCL_ACC1_MASK                                  0x2
#define _CRCACCL_ACC2_POSN                                  0x2
#define _CRCACCL_ACC2_POSITION                              0x2
#define _CRCACCL_ACC2_SIZE                                  0x1
#define _CRCACCL_ACC2_LENGTH                                0x1
#define _CRCACCL_ACC2_MASK                                  0x4
#define _CRCACCL_ACC3_POSN                                  0x3
#define _CRCACCL_ACC3_POSITION                              0x3
#define _CRCACCL_ACC3_SIZE                                  0x1
#define _CRCACCL_ACC3_LENGTH                                0x1
#define _CRCACCL_ACC3_MASK                                  0x8
#define _CRCACCL_ACC4_POSN                                  0x4
#define _CRCACCL_ACC4_POSITION                              0x4
#define _CRCACCL_ACC4_SIZE                                  0x1
#define _CRCACCL_ACC4_LENGTH                                0x1
#define _CRCACCL_ACC4_MASK                                  0x10
#define _CRCACCL_ACC5_POSN                                  0x5
#define _CRCACCL_ACC5_POSITION                              0x5
#define _CRCACCL_ACC5_SIZE                                  0x1
#define _CRCACCL_ACC5_LENGTH                                0x1
#define _CRCACCL_ACC5_MASK                                  0x20
#define _CRCACCL_ACC6_POSN                                  0x6
#define _CRCACCL_ACC6_POSITION                              0x6
#define _CRCACCL_ACC6_SIZE                                  0x1
#define _CRCACCL_ACC6_LENGTH                                0x1
#define _CRCACCL_ACC6_MASK                                  0x40
#define _CRCACCL_ACC7_POSN                                  0x7
#define _CRCACCL_ACC7_POSITION                              0x7
#define _CRCACCL_ACC7_SIZE                                  0x1
#define _CRCACCL_ACC7_LENGTH                                0x1
#define _CRCACCL_ACC7_MASK                                  0x80

// Register: CRCACCH
#define CRCACCH CRCACCH
extern volatile unsigned char           CRCACCH             __at(0x419);
#ifndef _LIB_BUILD
asm("CRCACCH equ 0419h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} CRCACCHbits_t;
extern volatile CRCACCHbits_t CRCACCHbits __at(0x419);
// bitfield macros
#define _CRCACCH_ACC8_POSN                                  0x0
#define _CRCACCH_ACC8_POSITION                              0x0
#define _CRCACCH_ACC8_SIZE                                  0x1
#define _CRCACCH_ACC8_LENGTH                                0x1
#define _CRCACCH_ACC8_MASK                                  0x1
#define _CRCACCH_ACC9_POSN                                  0x1
#define _CRCACCH_ACC9_POSITION                              0x1
#define _CRCACCH_ACC9_SIZE                                  0x1
#define _CRCACCH_ACC9_LENGTH                                0x1
#define _CRCACCH_ACC9_MASK                                  0x2
#define _CRCACCH_ACC10_POSN                                 0x2
#define _CRCACCH_ACC10_POSITION                             0x2
#define _CRCACCH_ACC10_SIZE                                 0x1
#define _CRCACCH_ACC10_LENGTH                               0x1
#define _CRCACCH_ACC10_MASK                                 0x4
#define _CRCACCH_ACC11_POSN                                 0x3
#define _CRCACCH_ACC11_POSITION                             0x3
#define _CRCACCH_ACC11_SIZE                                 0x1
#define _CRCACCH_ACC11_LENGTH                               0x1
#define _CRCACCH_ACC11_MASK                                 0x8
#define _CRCACCH_ACC12_POSN                                 0x4
#define _CRCACCH_ACC12_POSITION                             0x4
#define _CRCACCH_ACC12_SIZE                                 0x1
#define _CRCACCH_ACC12_LENGTH                               0x1
#define _CRCACCH_ACC12_MASK                                 0x10
#define _CRCACCH_ACC13_POSN                                 0x5
#define _CRCACCH_ACC13_POSITION                             0x5
#define _CRCACCH_ACC13_SIZE                                 0x1
#define _CRCACCH_ACC13_LENGTH                               0x1
#define _CRCACCH_ACC13_MASK                                 0x20
#define _CRCACCH_ACC14_POSN                                 0x6
#define _CRCACCH_ACC14_POSITION                             0x6
#define _CRCACCH_ACC14_SIZE                                 0x1
#define _CRCACCH_ACC14_LENGTH                               0x1
#define _CRCACCH_ACC14_MASK                                 0x40
#define _CRCACCH_ACC15_POSN                                 0x7
#define _CRCACCH_ACC15_POSITION                             0x7
#define _CRCACCH_ACC15_SIZE                                 0x1
#define _CRCACCH_ACC15_LENGTH                               0x1
#define _CRCACCH_ACC15_MASK                                 0x80

// Register: CRCSHFT
#define CRCSHFT CRCSHFT
extern volatile unsigned short          CRCSHFT             __at(0x41A);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 041Ah");
#endif

// Register: CRCSHIFTL
#define CRCSHIFTL CRCSHIFTL
extern volatile unsigned char           CRCSHIFTL           __at(0x41A);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 041Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT0                  :1;
        unsigned SHFT1                  :1;
        unsigned SHFT2                  :1;
        unsigned SHFT3                  :1;
        unsigned SHFT4                  :1;
        unsigned SHFT5                  :1;
        unsigned SHFT6                  :1;
        unsigned SHFT7                  :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x41A);
// bitfield macros
#define _CRCSHIFTL_SHFT0_POSN                               0x0
#define _CRCSHIFTL_SHFT0_POSITION                           0x0
#define _CRCSHIFTL_SHFT0_SIZE                               0x1
#define _CRCSHIFTL_SHFT0_LENGTH                             0x1
#define _CRCSHIFTL_SHFT0_MASK                               0x1
#define _CRCSHIFTL_SHFT1_POSN                               0x1
#define _CRCSHIFTL_SHFT1_POSITION                           0x1
#define _CRCSHIFTL_SHFT1_SIZE                               0x1
#define _CRCSHIFTL_SHFT1_LENGTH                             0x1
#define _CRCSHIFTL_SHFT1_MASK                               0x2
#define _CRCSHIFTL_SHFT2_POSN                               0x2
#define _CRCSHIFTL_SHFT2_POSITION                           0x2
#define _CRCSHIFTL_SHFT2_SIZE                               0x1
#define _CRCSHIFTL_SHFT2_LENGTH                             0x1
#define _CRCSHIFTL_SHFT2_MASK                               0x4
#define _CRCSHIFTL_SHFT3_POSN                               0x3
#define _CRCSHIFTL_SHFT3_POSITION                           0x3
#define _CRCSHIFTL_SHFT3_SIZE                               0x1
#define _CRCSHIFTL_SHFT3_LENGTH                             0x1
#define _CRCSHIFTL_SHFT3_MASK                               0x8
#define _CRCSHIFTL_SHFT4_POSN                               0x4
#define _CRCSHIFTL_SHFT4_POSITION                           0x4
#define _CRCSHIFTL_SHFT4_SIZE                               0x1
#define _CRCSHIFTL_SHFT4_LENGTH                             0x1
#define _CRCSHIFTL_SHFT4_MASK                               0x10
#define _CRCSHIFTL_SHFT5_POSN                               0x5
#define _CRCSHIFTL_SHFT5_POSITION                           0x5
#define _CRCSHIFTL_SHFT5_SIZE                               0x1
#define _CRCSHIFTL_SHFT5_LENGTH                             0x1
#define _CRCSHIFTL_SHFT5_MASK                               0x20
#define _CRCSHIFTL_SHFT6_POSN                               0x6
#define _CRCSHIFTL_SHFT6_POSITION                           0x6
#define _CRCSHIFTL_SHFT6_SIZE                               0x1
#define _CRCSHIFTL_SHFT6_LENGTH                             0x1
#define _CRCSHIFTL_SHFT6_MASK                               0x40
#define _CRCSHIFTL_SHFT7_POSN                               0x7
#define _CRCSHIFTL_SHFT7_POSITION                           0x7
#define _CRCSHIFTL_SHFT7_SIZE                               0x1
#define _CRCSHIFTL_SHFT7_LENGTH                             0x1
#define _CRCSHIFTL_SHFT7_MASK                               0x80

// Register: CRCSHIFTH
#define CRCSHIFTH CRCSHIFTH
extern volatile unsigned char           CRCSHIFTH           __at(0x41B);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 041Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT8                  :1;
        unsigned SHFT9                  :1;
        unsigned SHFT10                 :1;
        unsigned SHFT11                 :1;
        unsigned SHFT12                 :1;
        unsigned SHFT13                 :1;
        unsigned SHFT14                 :1;
        unsigned SHFT15                 :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x41B);
// bitfield macros
#define _CRCSHIFTH_SHFT8_POSN                               0x0
#define _CRCSHIFTH_SHFT8_POSITION                           0x0
#define _CRCSHIFTH_SHFT8_SIZE                               0x1
#define _CRCSHIFTH_SHFT8_LENGTH                             0x1
#define _CRCSHIFTH_SHFT8_MASK                               0x1
#define _CRCSHIFTH_SHFT9_POSN                               0x1
#define _CRCSHIFTH_SHFT9_POSITION                           0x1
#define _CRCSHIFTH_SHFT9_SIZE                               0x1
#define _CRCSHIFTH_SHFT9_LENGTH                             0x1
#define _CRCSHIFTH_SHFT9_MASK                               0x2
#define _CRCSHIFTH_SHFT10_POSN                              0x2
#define _CRCSHIFTH_SHFT10_POSITION                          0x2
#define _CRCSHIFTH_SHFT10_SIZE                              0x1
#define _CRCSHIFTH_SHFT10_LENGTH                            0x1
#define _CRCSHIFTH_SHFT10_MASK                              0x4
#define _CRCSHIFTH_SHFT11_POSN                              0x3
#define _CRCSHIFTH_SHFT11_POSITION                          0x3
#define _CRCSHIFTH_SHFT11_SIZE                              0x1
#define _CRCSHIFTH_SHFT11_LENGTH                            0x1
#define _CRCSHIFTH_SHFT11_MASK                              0x8
#define _CRCSHIFTH_SHFT12_POSN                              0x4
#define _CRCSHIFTH_SHFT12_POSITION                          0x4
#define _CRCSHIFTH_SHFT12_SIZE                              0x1
#define _CRCSHIFTH_SHFT12_LENGTH                            0x1
#define _CRCSHIFTH_SHFT12_MASK                              0x10
#define _CRCSHIFTH_SHFT13_POSN                              0x5
#define _CRCSHIFTH_SHFT13_POSITION                          0x5
#define _CRCSHIFTH_SHFT13_SIZE                              0x1
#define _CRCSHIFTH_SHFT13_LENGTH                            0x1
#define _CRCSHIFTH_SHFT13_MASK                              0x20
#define _CRCSHIFTH_SHFT14_POSN                              0x6
#define _CRCSHIFTH_SHFT14_POSITION                          0x6
#define _CRCSHIFTH_SHFT14_SIZE                              0x1
#define _CRCSHIFTH_SHFT14_LENGTH                            0x1
#define _CRCSHIFTH_SHFT14_MASK                              0x40
#define _CRCSHIFTH_SHFT15_POSN                              0x7
#define _CRCSHIFTH_SHFT15_POSITION                          0x7
#define _CRCSHIFTH_SHFT15_SIZE                              0x1
#define _CRCSHIFTH_SHFT15_LENGTH                            0x1
#define _CRCSHIFTH_SHFT15_MASK                              0x80

// Register: CRCXOR
#define CRCXOR CRCXOR
extern volatile unsigned short          CRCXOR              __at(0x41C);
#ifndef _LIB_BUILD
asm("CRCXOR equ 041Ch");
#endif

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x41C);
#ifndef _LIB_BUILD
asm("CRCXORL equ 041Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned X1                     :1;
        unsigned X2                     :1;
        unsigned X3                     :1;
        unsigned X4                     :1;
        unsigned X5                     :1;
        unsigned X6                     :1;
        unsigned X7                     :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x41C);
// bitfield macros
#define _CRCXORL_X1_POSN                                    0x1
#define _CRCXORL_X1_POSITION                                0x1
#define _CRCXORL_X1_SIZE                                    0x1
#define _CRCXORL_X1_LENGTH                                  0x1
#define _CRCXORL_X1_MASK                                    0x2
#define _CRCXORL_X2_POSN                                    0x2
#define _CRCXORL_X2_POSITION                                0x2
#define _CRCXORL_X2_SIZE                                    0x1
#define _CRCXORL_X2_LENGTH                                  0x1
#define _CRCXORL_X2_MASK                                    0x4
#define _CRCXORL_X3_POSN                                    0x3
#define _CRCXORL_X3_POSITION                                0x3
#define _CRCXORL_X3_SIZE                                    0x1
#define _CRCXORL_X3_LENGTH                                  0x1
#define _CRCXORL_X3_MASK                                    0x8
#define _CRCXORL_X4_POSN                                    0x4
#define _CRCXORL_X4_POSITION                                0x4
#define _CRCXORL_X4_SIZE                                    0x1
#define _CRCXORL_X4_LENGTH                                  0x1
#define _CRCXORL_X4_MASK                                    0x10
#define _CRCXORL_X5_POSN                                    0x5
#define _CRCXORL_X5_POSITION                                0x5
#define _CRCXORL_X5_SIZE                                    0x1
#define _CRCXORL_X5_LENGTH                                  0x1
#define _CRCXORL_X5_MASK                                    0x20
#define _CRCXORL_X6_POSN                                    0x6
#define _CRCXORL_X6_POSITION                                0x6
#define _CRCXORL_X6_SIZE                                    0x1
#define _CRCXORL_X6_LENGTH                                  0x1
#define _CRCXORL_X6_MASK                                    0x40
#define _CRCXORL_X7_POSN                                    0x7
#define _CRCXORL_X7_POSITION                                0x7
#define _CRCXORL_X7_SIZE                                    0x1
#define _CRCXORL_X7_LENGTH                                  0x1
#define _CRCXORL_X7_MASK                                    0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x41D);
#ifndef _LIB_BUILD
asm("CRCXORH equ 041Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned X8                     :1;
        unsigned X9                     :1;
        unsigned X10                    :1;
        unsigned X11                    :1;
        unsigned X12                    :1;
        unsigned X13                    :1;
        unsigned X14                    :1;
        unsigned X15                    :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x41D);
// bitfield macros
#define _CRCXORH_X8_POSN                                    0x0
#define _CRCXORH_X8_POSITION                                0x0
#define _CRCXORH_X8_SIZE                                    0x1
#define _CRCXORH_X8_LENGTH                                  0x1
#define _CRCXORH_X8_MASK                                    0x1
#define _CRCXORH_X9_POSN                                    0x1
#define _CRCXORH_X9_POSITION                                0x1
#define _CRCXORH_X9_SIZE                                    0x1
#define _CRCXORH_X9_LENGTH                                  0x1
#define _CRCXORH_X9_MASK                                    0x2
#define _CRCXORH_X10_POSN                                   0x2
#define _CRCXORH_X10_POSITION                               0x2
#define _CRCXORH_X10_SIZE                                   0x1
#define _CRCXORH_X10_LENGTH                                 0x1
#define _CRCXORH_X10_MASK                                   0x4
#define _CRCXORH_X11_POSN                                   0x3
#define _CRCXORH_X11_POSITION                               0x3
#define _CRCXORH_X11_SIZE                                   0x1
#define _CRCXORH_X11_LENGTH                                 0x1
#define _CRCXORH_X11_MASK                                   0x8
#define _CRCXORH_X12_POSN                                   0x4
#define _CRCXORH_X12_POSITION                               0x4
#define _CRCXORH_X12_SIZE                                   0x1
#define _CRCXORH_X12_LENGTH                                 0x1
#define _CRCXORH_X12_MASK                                   0x10
#define _CRCXORH_X13_POSN                                   0x5
#define _CRCXORH_X13_POSITION                               0x5
#define _CRCXORH_X13_SIZE                                   0x1
#define _CRCXORH_X13_LENGTH                                 0x1
#define _CRCXORH_X13_MASK                                   0x20
#define _CRCXORH_X14_POSN                                   0x6
#define _CRCXORH_X14_POSITION                               0x6
#define _CRCXORH_X14_SIZE                                   0x1
#define _CRCXORH_X14_LENGTH                                 0x1
#define _CRCXORH_X14_MASK                                   0x40
#define _CRCXORH_X15_POSN                                   0x7
#define _CRCXORH_X15_POSITION                               0x7
#define _CRCXORH_X15_SIZE                                   0x1
#define _CRCXORH_X15_LENGTH                                 0x1
#define _CRCXORH_X15_MASK                                   0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x41E);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 041Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned                        :2;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned CRCGO                  :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned CRCEN                  :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x41E);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x41F);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 041Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :4;
        unsigned DLEN                   :4;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x41F);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x4
#define _CRCCON1_PLEN_LENGTH                                0x4
#define _CRCCON1_PLEN_MASK                                  0xF
#define _CRCCON1_DLEN_POSN                                  0x4
#define _CRCCON1_DLEN_POSITION                              0x4
#define _CRCCON1_DLEN_SIZE                                  0x4
#define _CRCCON1_DLEN_LENGTH                                0x4
#define _CRCCON1_DLEN_MASK                                  0xF0
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_DLEN0_POSN                                 0x4
#define _CRCCON1_DLEN0_POSITION                             0x4
#define _CRCCON1_DLEN0_SIZE                                 0x1
#define _CRCCON1_DLEN0_LENGTH                               0x1
#define _CRCCON1_DLEN0_MASK                                 0x10
#define _CRCCON1_DLEN1_POSN                                 0x5
#define _CRCCON1_DLEN1_POSITION                             0x5
#define _CRCCON1_DLEN1_SIZE                                 0x1
#define _CRCCON1_DLEN1_LENGTH                               0x1
#define _CRCCON1_DLEN1_MASK                                 0x20
#define _CRCCON1_DLEN2_POSN                                 0x6
#define _CRCCON1_DLEN2_POSITION                             0x6
#define _CRCCON1_DLEN2_SIZE                                 0x1
#define _CRCCON1_DLEN2_LENGTH                               0x1
#define _CRCCON1_DLEN2_MASK                                 0x40
#define _CRCCON1_DLEN3_POSN                                 0x7
#define _CRCCON1_DLEN3_POSITION                             0x7
#define _CRCCON1_DLEN3_SIZE                                 0x1
#define _CRCCON1_DLEN3_LENGTH                               0x1
#define _CRCCON1_DLEN3_MASK                                 0x80

// Register: SMT1TMR
#define SMT1TMR SMT1TMR
#ifndef __CCI__
extern volatile __uint24                SMT1TMR             __at(0x48C);
#endif
#ifndef _LIB_BUILD
asm("SMT1TMR equ 048Ch");
#endif

// Register: SMT1TMRL
#define SMT1TMRL SMT1TMRL
extern volatile unsigned char           SMT1TMRL            __at(0x48C);
#ifndef _LIB_BUILD
asm("SMT1TMRL equ 048Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR0                   :1;
        unsigned TMR1                   :1;
        unsigned TMR2                   :1;
        unsigned TMR3                   :1;
        unsigned TMR4                   :1;
        unsigned TMR5                   :1;
        unsigned TMR6                   :1;
        unsigned TMR7                   :1;
    };
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR0               :1;
        unsigned SMT1TMR1               :1;
        unsigned SMT1TMR2               :1;
        unsigned SMT1TMR3               :1;
        unsigned SMT1TMR4               :1;
        unsigned SMT1TMR5               :1;
        unsigned SMT1TMR6               :1;
        unsigned SMT1TMR7               :1;
    };
} SMT1TMRLbits_t;
extern volatile SMT1TMRLbits_t SMT1TMRLbits __at(0x48C);
// bitfield macros
#define _SMT1TMRL_TMR_POSN                                  0x0
#define _SMT1TMRL_TMR_POSITION                              0x0
#define _SMT1TMRL_TMR_SIZE                                  0x8
#define _SMT1TMRL_TMR_LENGTH                                0x8
#define _SMT1TMRL_TMR_MASK                                  0xFF
#define _SMT1TMRL_TMR0_POSN                                 0x0
#define _SMT1TMRL_TMR0_POSITION                             0x0
#define _SMT1TMRL_TMR0_SIZE                                 0x1
#define _SMT1TMRL_TMR0_LENGTH                               0x1
#define _SMT1TMRL_TMR0_MASK                                 0x1
#define _SMT1TMRL_TMR1_POSN                                 0x1
#define _SMT1TMRL_TMR1_POSITION                             0x1
#define _SMT1TMRL_TMR1_SIZE                                 0x1
#define _SMT1TMRL_TMR1_LENGTH                               0x1
#define _SMT1TMRL_TMR1_MASK                                 0x2
#define _SMT1TMRL_TMR2_POSN                                 0x2
#define _SMT1TMRL_TMR2_POSITION                             0x2
#define _SMT1TMRL_TMR2_SIZE                                 0x1
#define _SMT1TMRL_TMR2_LENGTH                               0x1
#define _SMT1TMRL_TMR2_MASK                                 0x4
#define _SMT1TMRL_TMR3_POSN                                 0x3
#define _SMT1TMRL_TMR3_POSITION                             0x3
#define _SMT1TMRL_TMR3_SIZE                                 0x1
#define _SMT1TMRL_TMR3_LENGTH                               0x1
#define _SMT1TMRL_TMR3_MASK                                 0x8
#define _SMT1TMRL_TMR4_POSN                                 0x4
#define _SMT1TMRL_TMR4_POSITION                             0x4
#define _SMT1TMRL_TMR4_SIZE                                 0x1
#define _SMT1TMRL_TMR4_LENGTH                               0x1
#define _SMT1TMRL_TMR4_MASK                                 0x10
#define _SMT1TMRL_TMR5_POSN                                 0x5
#define _SMT1TMRL_TMR5_POSITION                             0x5
#define _SMT1TMRL_TMR5_SIZE                                 0x1
#define _SMT1TMRL_TMR5_LENGTH                               0x1
#define _SMT1TMRL_TMR5_MASK                                 0x20
#define _SMT1TMRL_TMR6_POSN                                 0x6
#define _SMT1TMRL_TMR6_POSITION                             0x6
#define _SMT1TMRL_TMR6_SIZE                                 0x1
#define _SMT1TMRL_TMR6_LENGTH                               0x1
#define _SMT1TMRL_TMR6_MASK                                 0x40
#define _SMT1TMRL_TMR7_POSN                                 0x7
#define _SMT1TMRL_TMR7_POSITION                             0x7
#define _SMT1TMRL_TMR7_SIZE                                 0x1
#define _SMT1TMRL_TMR7_LENGTH                               0x1
#define _SMT1TMRL_TMR7_MASK                                 0x80
#define _SMT1TMRL_SMT1TMR_POSN                              0x0
#define _SMT1TMRL_SMT1TMR_POSITION                          0x0
#define _SMT1TMRL_SMT1TMR_SIZE                              0x8
#define _SMT1TMRL_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRL_SMT1TMR_MASK                              0xFF
#define _SMT1TMRL_SMT1TMR0_POSN                             0x0
#define _SMT1TMRL_SMT1TMR0_POSITION                         0x0
#define _SMT1TMRL_SMT1TMR0_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR0_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR0_MASK                             0x1
#define _SMT1TMRL_SMT1TMR1_POSN                             0x1
#define _SMT1TMRL_SMT1TMR1_POSITION                         0x1
#define _SMT1TMRL_SMT1TMR1_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR1_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR1_MASK                             0x2
#define _SMT1TMRL_SMT1TMR2_POSN                             0x2
#define _SMT1TMRL_SMT1TMR2_POSITION                         0x2
#define _SMT1TMRL_SMT1TMR2_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR2_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR2_MASK                             0x4
#define _SMT1TMRL_SMT1TMR3_POSN                             0x3
#define _SMT1TMRL_SMT1TMR3_POSITION                         0x3
#define _SMT1TMRL_SMT1TMR3_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR3_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR3_MASK                             0x8
#define _SMT1TMRL_SMT1TMR4_POSN                             0x4
#define _SMT1TMRL_SMT1TMR4_POSITION                         0x4
#define _SMT1TMRL_SMT1TMR4_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR4_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR4_MASK                             0x10
#define _SMT1TMRL_SMT1TMR5_POSN                             0x5
#define _SMT1TMRL_SMT1TMR5_POSITION                         0x5
#define _SMT1TMRL_SMT1TMR5_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR5_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR5_MASK                             0x20
#define _SMT1TMRL_SMT1TMR6_POSN                             0x6
#define _SMT1TMRL_SMT1TMR6_POSITION                         0x6
#define _SMT1TMRL_SMT1TMR6_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR6_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR6_MASK                             0x40
#define _SMT1TMRL_SMT1TMR7_POSN                             0x7
#define _SMT1TMRL_SMT1TMR7_POSITION                         0x7
#define _SMT1TMRL_SMT1TMR7_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR7_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR7_MASK                             0x80

// Register: SMT1TMRH
#define SMT1TMRH SMT1TMRH
extern volatile unsigned char           SMT1TMRH            __at(0x48D);
#ifndef _LIB_BUILD
asm("SMT1TMRH equ 048Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR8                   :1;
        unsigned TMR9                   :1;
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
    };
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR8               :1;
        unsigned SMT1TMR9               :1;
        unsigned SMT1TMR10              :1;
        unsigned SMT1TMR11              :1;
        unsigned SMT1TMR12              :1;
        unsigned SMT1TMR13              :1;
        unsigned SMT1TMR14              :1;
        unsigned SMT1TMR15              :1;
    };
} SMT1TMRHbits_t;
extern volatile SMT1TMRHbits_t SMT1TMRHbits __at(0x48D);
// bitfield macros
#define _SMT1TMRH_TMR_POSN                                  0x0
#define _SMT1TMRH_TMR_POSITION                              0x0
#define _SMT1TMRH_TMR_SIZE                                  0x8
#define _SMT1TMRH_TMR_LENGTH                                0x8
#define _SMT1TMRH_TMR_MASK                                  0xFF
#define _SMT1TMRH_TMR8_POSN                                 0x0
#define _SMT1TMRH_TMR8_POSITION                             0x0
#define _SMT1TMRH_TMR8_SIZE                                 0x1
#define _SMT1TMRH_TMR8_LENGTH                               0x1
#define _SMT1TMRH_TMR8_MASK                                 0x1
#define _SMT1TMRH_TMR9_POSN                                 0x1
#define _SMT1TMRH_TMR9_POSITION                             0x1
#define _SMT1TMRH_TMR9_SIZE                                 0x1
#define _SMT1TMRH_TMR9_LENGTH                               0x1
#define _SMT1TMRH_TMR9_MASK                                 0x2
#define _SMT1TMRH_TMR10_POSN                                0x2
#define _SMT1TMRH_TMR10_POSITION                            0x2
#define _SMT1TMRH_TMR10_SIZE                                0x1
#define _SMT1TMRH_TMR10_LENGTH                              0x1
#define _SMT1TMRH_TMR10_MASK                                0x4
#define _SMT1TMRH_TMR11_POSN                                0x3
#define _SMT1TMRH_TMR11_POSITION                            0x3
#define _SMT1TMRH_TMR11_SIZE                                0x1
#define _SMT1TMRH_TMR11_LENGTH                              0x1
#define _SMT1TMRH_TMR11_MASK                                0x8
#define _SMT1TMRH_TMR12_POSN                                0x4
#define _SMT1TMRH_TMR12_POSITION                            0x4
#define _SMT1TMRH_TMR12_SIZE                                0x1
#define _SMT1TMRH_TMR12_LENGTH                              0x1
#define _SMT1TMRH_TMR12_MASK                                0x10
#define _SMT1TMRH_TMR13_POSN                                0x5
#define _SMT1TMRH_TMR13_POSITION                            0x5
#define _SMT1TMRH_TMR13_SIZE                                0x1
#define _SMT1TMRH_TMR13_LENGTH                              0x1
#define _SMT1TMRH_TMR13_MASK                                0x20
#define _SMT1TMRH_TMR14_POSN                                0x6
#define _SMT1TMRH_TMR14_POSITION                            0x6
#define _SMT1TMRH_TMR14_SIZE                                0x1
#define _SMT1TMRH_TMR14_LENGTH                              0x1
#define _SMT1TMRH_TMR14_MASK                                0x40
#define _SMT1TMRH_TMR15_POSN                                0x7
#define _SMT1TMRH_TMR15_POSITION                            0x7
#define _SMT1TMRH_TMR15_SIZE                                0x1
#define _SMT1TMRH_TMR15_LENGTH                              0x1
#define _SMT1TMRH_TMR15_MASK                                0x80
#define _SMT1TMRH_SMT1TMR_POSN                              0x0
#define _SMT1TMRH_SMT1TMR_POSITION                          0x0
#define _SMT1TMRH_SMT1TMR_SIZE                              0x8
#define _SMT1TMRH_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRH_SMT1TMR_MASK                              0xFF
#define _SMT1TMRH_SMT1TMR8_POSN                             0x0
#define _SMT1TMRH_SMT1TMR8_POSITION                         0x0
#define _SMT1TMRH_SMT1TMR8_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR8_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR8_MASK                             0x1
#define _SMT1TMRH_SMT1TMR9_POSN                             0x1
#define _SMT1TMRH_SMT1TMR9_POSITION                         0x1
#define _SMT1TMRH_SMT1TMR9_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR9_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR9_MASK                             0x2
#define _SMT1TMRH_SMT1TMR10_POSN                            0x2
#define _SMT1TMRH_SMT1TMR10_POSITION                        0x2
#define _SMT1TMRH_SMT1TMR10_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR10_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR10_MASK                            0x4
#define _SMT1TMRH_SMT1TMR11_POSN                            0x3
#define _SMT1TMRH_SMT1TMR11_POSITION                        0x3
#define _SMT1TMRH_SMT1TMR11_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR11_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR11_MASK                            0x8
#define _SMT1TMRH_SMT1TMR12_POSN                            0x4
#define _SMT1TMRH_SMT1TMR12_POSITION                        0x4
#define _SMT1TMRH_SMT1TMR12_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR12_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR12_MASK                            0x10
#define _SMT1TMRH_SMT1TMR13_POSN                            0x5
#define _SMT1TMRH_SMT1TMR13_POSITION                        0x5
#define _SMT1TMRH_SMT1TMR13_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR13_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR13_MASK                            0x20
#define _SMT1TMRH_SMT1TMR14_POSN                            0x6
#define _SMT1TMRH_SMT1TMR14_POSITION                        0x6
#define _SMT1TMRH_SMT1TMR14_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR14_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR14_MASK                            0x40
#define _SMT1TMRH_SMT1TMR15_POSN                            0x7
#define _SMT1TMRH_SMT1TMR15_POSITION                        0x7
#define _SMT1TMRH_SMT1TMR15_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR15_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR15_MASK                            0x80

// Register: SMT1TMRU
#define SMT1TMRU SMT1TMRU
extern volatile unsigned char           SMT1TMRU            __at(0x48E);
#ifndef _LIB_BUILD
asm("SMT1TMRU equ 048Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR20                  :1;
        unsigned TMR21                  :1;
        unsigned TMR22                  :1;
        unsigned TMR23                  :1;
    };
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR16              :1;
        unsigned SMT1TMR17              :1;
        unsigned SMT1TMR18              :1;
        unsigned SMT1TMR19              :1;
        unsigned SMT1TMR20              :1;
        unsigned SMT1TMR21              :1;
        unsigned SMT1TMR22              :1;
        unsigned SMT1TMR23              :1;
    };
} SMT1TMRUbits_t;
extern volatile SMT1TMRUbits_t SMT1TMRUbits __at(0x48E);
// bitfield macros
#define _SMT1TMRU_TMR_POSN                                  0x0
#define _SMT1TMRU_TMR_POSITION                              0x0
#define _SMT1TMRU_TMR_SIZE                                  0x8
#define _SMT1TMRU_TMR_LENGTH                                0x8
#define _SMT1TMRU_TMR_MASK                                  0xFF
#define _SMT1TMRU_TMR16_POSN                                0x0
#define _SMT1TMRU_TMR16_POSITION                            0x0
#define _SMT1TMRU_TMR16_SIZE                                0x1
#define _SMT1TMRU_TMR16_LENGTH                              0x1
#define _SMT1TMRU_TMR16_MASK                                0x1
#define _SMT1TMRU_TMR17_POSN                                0x1
#define _SMT1TMRU_TMR17_POSITION                            0x1
#define _SMT1TMRU_TMR17_SIZE                                0x1
#define _SMT1TMRU_TMR17_LENGTH                              0x1
#define _SMT1TMRU_TMR17_MASK                                0x2
#define _SMT1TMRU_TMR18_POSN                                0x2
#define _SMT1TMRU_TMR18_POSITION                            0x2
#define _SMT1TMRU_TMR18_SIZE                                0x1
#define _SMT1TMRU_TMR18_LENGTH                              0x1
#define _SMT1TMRU_TMR18_MASK                                0x4
#define _SMT1TMRU_TMR19_POSN                                0x3
#define _SMT1TMRU_TMR19_POSITION                            0x3
#define _SMT1TMRU_TMR19_SIZE                                0x1
#define _SMT1TMRU_TMR19_LENGTH                              0x1
#define _SMT1TMRU_TMR19_MASK                                0x8
#define _SMT1TMRU_TMR20_POSN                                0x4
#define _SMT1TMRU_TMR20_POSITION                            0x4
#define _SMT1TMRU_TMR20_SIZE                                0x1
#define _SMT1TMRU_TMR20_LENGTH                              0x1
#define _SMT1TMRU_TMR20_MASK                                0x10
#define _SMT1TMRU_TMR21_POSN                                0x5
#define _SMT1TMRU_TMR21_POSITION                            0x5
#define _SMT1TMRU_TMR21_SIZE                                0x1
#define _SMT1TMRU_TMR21_LENGTH                              0x1
#define _SMT1TMRU_TMR21_MASK                                0x20
#define _SMT1TMRU_TMR22_POSN                                0x6
#define _SMT1TMRU_TMR22_POSITION                            0x6
#define _SMT1TMRU_TMR22_SIZE                                0x1
#define _SMT1TMRU_TMR22_LENGTH                              0x1
#define _SMT1TMRU_TMR22_MASK                                0x40
#define _SMT1TMRU_TMR23_POSN                                0x7
#define _SMT1TMRU_TMR23_POSITION                            0x7
#define _SMT1TMRU_TMR23_SIZE                                0x1
#define _SMT1TMRU_TMR23_LENGTH                              0x1
#define _SMT1TMRU_TMR23_MASK                                0x80
#define _SMT1TMRU_SMT1TMR_POSN                              0x0
#define _SMT1TMRU_SMT1TMR_POSITION                          0x0
#define _SMT1TMRU_SMT1TMR_SIZE                              0x8
#define _SMT1TMRU_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRU_SMT1TMR_MASK                              0xFF
#define _SMT1TMRU_SMT1TMR16_POSN                            0x0
#define _SMT1TMRU_SMT1TMR16_POSITION                        0x0
#define _SMT1TMRU_SMT1TMR16_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR16_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR16_MASK                            0x1
#define _SMT1TMRU_SMT1TMR17_POSN                            0x1
#define _SMT1TMRU_SMT1TMR17_POSITION                        0x1
#define _SMT1TMRU_SMT1TMR17_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR17_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR17_MASK                            0x2
#define _SMT1TMRU_SMT1TMR18_POSN                            0x2
#define _SMT1TMRU_SMT1TMR18_POSITION                        0x2
#define _SMT1TMRU_SMT1TMR18_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR18_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR18_MASK                            0x4
#define _SMT1TMRU_SMT1TMR19_POSN                            0x3
#define _SMT1TMRU_SMT1TMR19_POSITION                        0x3
#define _SMT1TMRU_SMT1TMR19_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR19_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR19_MASK                            0x8
#define _SMT1TMRU_SMT1TMR20_POSN                            0x4
#define _SMT1TMRU_SMT1TMR20_POSITION                        0x4
#define _SMT1TMRU_SMT1TMR20_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR20_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR20_MASK                            0x10
#define _SMT1TMRU_SMT1TMR21_POSN                            0x5
#define _SMT1TMRU_SMT1TMR21_POSITION                        0x5
#define _SMT1TMRU_SMT1TMR21_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR21_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR21_MASK                            0x20
#define _SMT1TMRU_SMT1TMR22_POSN                            0x6
#define _SMT1TMRU_SMT1TMR22_POSITION                        0x6
#define _SMT1TMRU_SMT1TMR22_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR22_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR22_MASK                            0x40
#define _SMT1TMRU_SMT1TMR23_POSN                            0x7
#define _SMT1TMRU_SMT1TMR23_POSITION                        0x7
#define _SMT1TMRU_SMT1TMR23_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR23_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR23_MASK                            0x80

// Register: SMT1CPR
#define SMT1CPR SMT1CPR
#ifndef __CCI__
extern volatile __uint24                SMT1CPR             __at(0x48F);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPR equ 048Fh");
#endif

// Register: SMT1CPRL
#define SMT1CPRL SMT1CPRL
extern volatile unsigned char           SMT1CPRL            __at(0x48F);
#ifndef _LIB_BUILD
asm("SMT1CPRL equ 048Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR0                   :1;
        unsigned CPR1                   :1;
        unsigned CPR2                   :1;
        unsigned CPR3                   :1;
        unsigned CPR4                   :1;
        unsigned CPR5                   :1;
        unsigned CPR6                   :1;
        unsigned CPR7                   :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR0               :1;
        unsigned SMT1CPR1               :1;
        unsigned SMT1CPR2               :1;
        unsigned SMT1CPR3               :1;
        unsigned SMT1CPR4               :1;
        unsigned SMT1CPR5               :1;
        unsigned SMT1CPR6               :1;
        unsigned SMT1CPR7               :1;
    };
} SMT1CPRLbits_t;
extern volatile SMT1CPRLbits_t SMT1CPRLbits __at(0x48F);
// bitfield macros
#define _SMT1CPRL_CPR_POSN                                  0x0
#define _SMT1CPRL_CPR_POSITION                              0x0
#define _SMT1CPRL_CPR_SIZE                                  0x8
#define _SMT1CPRL_CPR_LENGTH                                0x8
#define _SMT1CPRL_CPR_MASK                                  0xFF
#define _SMT1CPRL_CPR0_POSN                                 0x0
#define _SMT1CPRL_CPR0_POSITION                             0x0
#define _SMT1CPRL_CPR0_SIZE                                 0x1
#define _SMT1CPRL_CPR0_LENGTH                               0x1
#define _SMT1CPRL_CPR0_MASK                                 0x1
#define _SMT1CPRL_CPR1_POSN                                 0x1
#define _SMT1CPRL_CPR1_POSITION                             0x1
#define _SMT1CPRL_CPR1_SIZE                                 0x1
#define _SMT1CPRL_CPR1_LENGTH                               0x1
#define _SMT1CPRL_CPR1_MASK                                 0x2
#define _SMT1CPRL_CPR2_POSN                                 0x2
#define _SMT1CPRL_CPR2_POSITION                             0x2
#define _SMT1CPRL_CPR2_SIZE                                 0x1
#define _SMT1CPRL_CPR2_LENGTH                               0x1
#define _SMT1CPRL_CPR2_MASK                                 0x4
#define _SMT1CPRL_CPR3_POSN                                 0x3
#define _SMT1CPRL_CPR3_POSITION                             0x3
#define _SMT1CPRL_CPR3_SIZE                                 0x1
#define _SMT1CPRL_CPR3_LENGTH                               0x1
#define _SMT1CPRL_CPR3_MASK                                 0x8
#define _SMT1CPRL_CPR4_POSN                                 0x4
#define _SMT1CPRL_CPR4_POSITION                             0x4
#define _SMT1CPRL_CPR4_SIZE                                 0x1
#define _SMT1CPRL_CPR4_LENGTH                               0x1
#define _SMT1CPRL_CPR4_MASK                                 0x10
#define _SMT1CPRL_CPR5_POSN                                 0x5
#define _SMT1CPRL_CPR5_POSITION                             0x5
#define _SMT1CPRL_CPR5_SIZE                                 0x1
#define _SMT1CPRL_CPR5_LENGTH                               0x1
#define _SMT1CPRL_CPR5_MASK                                 0x20
#define _SMT1CPRL_CPR6_POSN                                 0x6
#define _SMT1CPRL_CPR6_POSITION                             0x6
#define _SMT1CPRL_CPR6_SIZE                                 0x1
#define _SMT1CPRL_CPR6_LENGTH                               0x1
#define _SMT1CPRL_CPR6_MASK                                 0x40
#define _SMT1CPRL_CPR7_POSN                                 0x7
#define _SMT1CPRL_CPR7_POSITION                             0x7
#define _SMT1CPRL_CPR7_SIZE                                 0x1
#define _SMT1CPRL_CPR7_LENGTH                               0x1
#define _SMT1CPRL_CPR7_MASK                                 0x80
#define _SMT1CPRL_SMT1CPR_POSN                              0x0
#define _SMT1CPRL_SMT1CPR_POSITION                          0x0
#define _SMT1CPRL_SMT1CPR_SIZE                              0x8
#define _SMT1CPRL_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRL_SMT1CPR_MASK                              0xFF
#define _SMT1CPRL_SMT1CPR0_POSN                             0x0
#define _SMT1CPRL_SMT1CPR0_POSITION                         0x0
#define _SMT1CPRL_SMT1CPR0_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR0_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR0_MASK                             0x1
#define _SMT1CPRL_SMT1CPR1_POSN                             0x1
#define _SMT1CPRL_SMT1CPR1_POSITION                         0x1
#define _SMT1CPRL_SMT1CPR1_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR1_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR1_MASK                             0x2
#define _SMT1CPRL_SMT1CPR2_POSN                             0x2
#define _SMT1CPRL_SMT1CPR2_POSITION                         0x2
#define _SMT1CPRL_SMT1CPR2_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR2_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR2_MASK                             0x4
#define _SMT1CPRL_SMT1CPR3_POSN                             0x3
#define _SMT1CPRL_SMT1CPR3_POSITION                         0x3
#define _SMT1CPRL_SMT1CPR3_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR3_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR3_MASK                             0x8
#define _SMT1CPRL_SMT1CPR4_POSN                             0x4
#define _SMT1CPRL_SMT1CPR4_POSITION                         0x4
#define _SMT1CPRL_SMT1CPR4_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR4_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR4_MASK                             0x10
#define _SMT1CPRL_SMT1CPR5_POSN                             0x5
#define _SMT1CPRL_SMT1CPR5_POSITION                         0x5
#define _SMT1CPRL_SMT1CPR5_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR5_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR5_MASK                             0x20
#define _SMT1CPRL_SMT1CPR6_POSN                             0x6
#define _SMT1CPRL_SMT1CPR6_POSITION                         0x6
#define _SMT1CPRL_SMT1CPR6_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR6_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR6_MASK                             0x40
#define _SMT1CPRL_SMT1CPR7_POSN                             0x7
#define _SMT1CPRL_SMT1CPR7_POSITION                         0x7
#define _SMT1CPRL_SMT1CPR7_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR7_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR7_MASK                             0x80

// Register: SMT1CPRH
#define SMT1CPRH SMT1CPRH
extern volatile unsigned char           SMT1CPRH            __at(0x490);
#ifndef _LIB_BUILD
asm("SMT1CPRH equ 0490h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR8                   :1;
        unsigned CPR9                   :1;
        unsigned CPR10                  :1;
        unsigned CPR11                  :1;
        unsigned CPR12                  :1;
        unsigned CPR13                  :1;
        unsigned CPR14                  :1;
        unsigned CPR15                  :1;
    };
    struct {
        unsigned SMT1CPR8               :1;
        unsigned SMT1CPR9               :1;
        unsigned SMT1CPR10              :1;
        unsigned SMT1CPR11              :1;
        unsigned SMT1CPR12              :1;
        unsigned SMT1CPR13              :1;
        unsigned SMT1CPR14              :1;
        unsigned SMT1CPR15              :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRHbits_t;
extern volatile SMT1CPRHbits_t SMT1CPRHbits __at(0x490);
// bitfield macros
#define _SMT1CPRH_CPR_POSN                                  0x0
#define _SMT1CPRH_CPR_POSITION                              0x0
#define _SMT1CPRH_CPR_SIZE                                  0x8
#define _SMT1CPRH_CPR_LENGTH                                0x8
#define _SMT1CPRH_CPR_MASK                                  0xFF
#define _SMT1CPRH_CPR8_POSN                                 0x0
#define _SMT1CPRH_CPR8_POSITION                             0x0
#define _SMT1CPRH_CPR8_SIZE                                 0x1
#define _SMT1CPRH_CPR8_LENGTH                               0x1
#define _SMT1CPRH_CPR8_MASK                                 0x1
#define _SMT1CPRH_CPR9_POSN                                 0x1
#define _SMT1CPRH_CPR9_POSITION                             0x1
#define _SMT1CPRH_CPR9_SIZE                                 0x1
#define _SMT1CPRH_CPR9_LENGTH                               0x1
#define _SMT1CPRH_CPR9_MASK                                 0x2
#define _SMT1CPRH_CPR10_POSN                                0x2
#define _SMT1CPRH_CPR10_POSITION                            0x2
#define _SMT1CPRH_CPR10_SIZE                                0x1
#define _SMT1CPRH_CPR10_LENGTH                              0x1
#define _SMT1CPRH_CPR10_MASK                                0x4
#define _SMT1CPRH_CPR11_POSN                                0x3
#define _SMT1CPRH_CPR11_POSITION                            0x3
#define _SMT1CPRH_CPR11_SIZE                                0x1
#define _SMT1CPRH_CPR11_LENGTH                              0x1
#define _SMT1CPRH_CPR11_MASK                                0x8
#define _SMT1CPRH_CPR12_POSN                                0x4
#define _SMT1CPRH_CPR12_POSITION                            0x4
#define _SMT1CPRH_CPR12_SIZE                                0x1
#define _SMT1CPRH_CPR12_LENGTH                              0x1
#define _SMT1CPRH_CPR12_MASK                                0x10
#define _SMT1CPRH_CPR13_POSN                                0x5
#define _SMT1CPRH_CPR13_POSITION                            0x5
#define _SMT1CPRH_CPR13_SIZE                                0x1
#define _SMT1CPRH_CPR13_LENGTH                              0x1
#define _SMT1CPRH_CPR13_MASK                                0x20
#define _SMT1CPRH_CPR14_POSN                                0x6
#define _SMT1CPRH_CPR14_POSITION                            0x6
#define _SMT1CPRH_CPR14_SIZE                                0x1
#define _SMT1CPRH_CPR14_LENGTH                              0x1
#define _SMT1CPRH_CPR14_MASK                                0x40
#define _SMT1CPRH_CPR15_POSN                                0x7
#define _SMT1CPRH_CPR15_POSITION                            0x7
#define _SMT1CPRH_CPR15_SIZE                                0x1
#define _SMT1CPRH_CPR15_LENGTH                              0x1
#define _SMT1CPRH_CPR15_MASK                                0x80
#define _SMT1CPRH_SMT1CPR8_POSN                             0x0
#define _SMT1CPRH_SMT1CPR8_POSITION                         0x0
#define _SMT1CPRH_SMT1CPR8_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR8_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR8_MASK                             0x1
#define _SMT1CPRH_SMT1CPR9_POSN                             0x1
#define _SMT1CPRH_SMT1CPR9_POSITION                         0x1
#define _SMT1CPRH_SMT1CPR9_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR9_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR9_MASK                             0x2
#define _SMT1CPRH_SMT1CPR10_POSN                            0x2
#define _SMT1CPRH_SMT1CPR10_POSITION                        0x2
#define _SMT1CPRH_SMT1CPR10_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR10_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR10_MASK                            0x4
#define _SMT1CPRH_SMT1CPR11_POSN                            0x3
#define _SMT1CPRH_SMT1CPR11_POSITION                        0x3
#define _SMT1CPRH_SMT1CPR11_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR11_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR11_MASK                            0x8
#define _SMT1CPRH_SMT1CPR12_POSN                            0x4
#define _SMT1CPRH_SMT1CPR12_POSITION                        0x4
#define _SMT1CPRH_SMT1CPR12_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR12_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR12_MASK                            0x10
#define _SMT1CPRH_SMT1CPR13_POSN                            0x5
#define _SMT1CPRH_SMT1CPR13_POSITION                        0x5
#define _SMT1CPRH_SMT1CPR13_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR13_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR13_MASK                            0x20
#define _SMT1CPRH_SMT1CPR14_POSN                            0x6
#define _SMT1CPRH_SMT1CPR14_POSITION                        0x6
#define _SMT1CPRH_SMT1CPR14_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR14_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR14_MASK                            0x40
#define _SMT1CPRH_SMT1CPR15_POSN                            0x7
#define _SMT1CPRH_SMT1CPR15_POSITION                        0x7
#define _SMT1CPRH_SMT1CPR15_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR15_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR15_MASK                            0x80
#define _SMT1CPRH_SMT1CPR_POSN                              0x0
#define _SMT1CPRH_SMT1CPR_POSITION                          0x0
#define _SMT1CPRH_SMT1CPR_SIZE                              0x8
#define _SMT1CPRH_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRH_SMT1CPR_MASK                              0xFF

// Register: SMT1CPRU
#define SMT1CPRU SMT1CPRU
extern volatile unsigned char           SMT1CPRU            __at(0x491);
#ifndef _LIB_BUILD
asm("SMT1CPRU equ 0491h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR16                  :1;
        unsigned CPR17                  :1;
        unsigned CPR18                  :1;
        unsigned CPR19                  :1;
        unsigned CPR20                  :1;
        unsigned CPR21                  :1;
        unsigned CPR22                  :1;
        unsigned CPR23                  :1;
    };
    struct {
        unsigned SMT1CPR16              :1;
        unsigned SMT1CPR17              :1;
        unsigned SMT1CPR18              :1;
        unsigned SMT1CPR19              :1;
        unsigned SMT1CPR20              :1;
        unsigned SMT1CPR21              :1;
        unsigned SMT1CPR22              :1;
        unsigned SMT1CPR23              :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRUbits_t;
extern volatile SMT1CPRUbits_t SMT1CPRUbits __at(0x491);
// bitfield macros
#define _SMT1CPRU_CPR_POSN                                  0x0
#define _SMT1CPRU_CPR_POSITION                              0x0
#define _SMT1CPRU_CPR_SIZE                                  0x8
#define _SMT1CPRU_CPR_LENGTH                                0x8
#define _SMT1CPRU_CPR_MASK                                  0xFF
#define _SMT1CPRU_CPR16_POSN                                0x0
#define _SMT1CPRU_CPR16_POSITION                            0x0
#define _SMT1CPRU_CPR16_SIZE                                0x1
#define _SMT1CPRU_CPR16_LENGTH                              0x1
#define _SMT1CPRU_CPR16_MASK                                0x1
#define _SMT1CPRU_CPR17_POSN                                0x1
#define _SMT1CPRU_CPR17_POSITION                            0x1
#define _SMT1CPRU_CPR17_SIZE                                0x1
#define _SMT1CPRU_CPR17_LENGTH                              0x1
#define _SMT1CPRU_CPR17_MASK                                0x2
#define _SMT1CPRU_CPR18_POSN                                0x2
#define _SMT1CPRU_CPR18_POSITION                            0x2
#define _SMT1CPRU_CPR18_SIZE                                0x1
#define _SMT1CPRU_CPR18_LENGTH                              0x1
#define _SMT1CPRU_CPR18_MASK                                0x4
#define _SMT1CPRU_CPR19_POSN                                0x3
#define _SMT1CPRU_CPR19_POSITION                            0x3
#define _SMT1CPRU_CPR19_SIZE                                0x1
#define _SMT1CPRU_CPR19_LENGTH                              0x1
#define _SMT1CPRU_CPR19_MASK                                0x8
#define _SMT1CPRU_CPR20_POSN                                0x4
#define _SMT1CPRU_CPR20_POSITION                            0x4
#define _SMT1CPRU_CPR20_SIZE                                0x1
#define _SMT1CPRU_CPR20_LENGTH                              0x1
#define _SMT1CPRU_CPR20_MASK                                0x10
#define _SMT1CPRU_CPR21_POSN                                0x5
#define _SMT1CPRU_CPR21_POSITION                            0x5
#define _SMT1CPRU_CPR21_SIZE                                0x1
#define _SMT1CPRU_CPR21_LENGTH                              0x1
#define _SMT1CPRU_CPR21_MASK                                0x20
#define _SMT1CPRU_CPR22_POSN                                0x6
#define _SMT1CPRU_CPR22_POSITION                            0x6
#define _SMT1CPRU_CPR22_SIZE                                0x1
#define _SMT1CPRU_CPR22_LENGTH                              0x1
#define _SMT1CPRU_CPR22_MASK                                0x40
#define _SMT1CPRU_CPR23_POSN                                0x7
#define _SMT1CPRU_CPR23_POSITION                            0x7
#define _SMT1CPRU_CPR23_SIZE                                0x1
#define _SMT1CPRU_CPR23_LENGTH                              0x1
#define _SMT1CPRU_CPR23_MASK                                0x80
#define _SMT1CPRU_SMT1CPR16_POSN                            0x0
#define _SMT1CPRU_SMT1CPR16_POSITION                        0x0
#define _SMT1CPRU_SMT1CPR16_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR16_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR16_MASK                            0x1
#define _SMT1CPRU_SMT1CPR17_POSN                            0x1
#define _SMT1CPRU_SMT1CPR17_POSITION                        0x1
#define _SMT1CPRU_SMT1CPR17_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR17_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR17_MASK                            0x2
#define _SMT1CPRU_SMT1CPR18_POSN                            0x2
#define _SMT1CPRU_SMT1CPR18_POSITION                        0x2
#define _SMT1CPRU_SMT1CPR18_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR18_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR18_MASK                            0x4
#define _SMT1CPRU_SMT1CPR19_POSN                            0x3
#define _SMT1CPRU_SMT1CPR19_POSITION                        0x3
#define _SMT1CPRU_SMT1CPR19_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR19_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR19_MASK                            0x8
#define _SMT1CPRU_SMT1CPR20_POSN                            0x4
#define _SMT1CPRU_SMT1CPR20_POSITION                        0x4
#define _SMT1CPRU_SMT1CPR20_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR20_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR20_MASK                            0x10
#define _SMT1CPRU_SMT1CPR21_POSN                            0x5
#define _SMT1CPRU_SMT1CPR21_POSITION                        0x5
#define _SMT1CPRU_SMT1CPR21_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR21_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR21_MASK                            0x20
#define _SMT1CPRU_SMT1CPR22_POSN                            0x6
#define _SMT1CPRU_SMT1CPR22_POSITION                        0x6
#define _SMT1CPRU_SMT1CPR22_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR22_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR22_MASK                            0x40
#define _SMT1CPRU_SMT1CPR23_POSN                            0x7
#define _SMT1CPRU_SMT1CPR23_POSITION                        0x7
#define _SMT1CPRU_SMT1CPR23_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR23_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR23_MASK                            0x80
#define _SMT1CPRU_SMT1CPR_POSN                              0x0
#define _SMT1CPRU_SMT1CPR_POSITION                          0x0
#define _SMT1CPRU_SMT1CPR_SIZE                              0x8
#define _SMT1CPRU_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRU_SMT1CPR_MASK                              0xFF

// Register: SMT1CPW
#define SMT1CPW SMT1CPW
#ifndef __CCI__
extern volatile __uint24                SMT1CPW             __at(0x492);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPW equ 0492h");
#endif

// Register: SMT1CPWL
#define SMT1CPWL SMT1CPWL
extern volatile unsigned char           SMT1CPWL            __at(0x492);
#ifndef _LIB_BUILD
asm("SMT1CPWL equ 0492h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW0                   :1;
        unsigned CPW1                   :1;
        unsigned CPW2                   :1;
        unsigned CPW3                   :1;
        unsigned CPW4                   :1;
        unsigned CPW5                   :1;
        unsigned CPW6                   :1;
        unsigned CPW7                   :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW0               :1;
        unsigned SMT1CPW1               :1;
        unsigned SMT1CPW2               :1;
        unsigned SMT1CPW3               :1;
        unsigned SMT1CPW4               :1;
        unsigned SMT1CPW5               :1;
        unsigned SMT1CPW6               :1;
        unsigned SMT1CPW7               :1;
    };
} SMT1CPWLbits_t;
extern volatile SMT1CPWLbits_t SMT1CPWLbits __at(0x492);
// bitfield macros
#define _SMT1CPWL_CPW_POSN                                  0x0
#define _SMT1CPWL_CPW_POSITION                              0x0
#define _SMT1CPWL_CPW_SIZE                                  0x8
#define _SMT1CPWL_CPW_LENGTH                                0x8
#define _SMT1CPWL_CPW_MASK                                  0xFF
#define _SMT1CPWL_CPW0_POSN                                 0x0
#define _SMT1CPWL_CPW0_POSITION                             0x0
#define _SMT1CPWL_CPW0_SIZE                                 0x1
#define _SMT1CPWL_CPW0_LENGTH                               0x1
#define _SMT1CPWL_CPW0_MASK                                 0x1
#define _SMT1CPWL_CPW1_POSN                                 0x1
#define _SMT1CPWL_CPW1_POSITION                             0x1
#define _SMT1CPWL_CPW1_SIZE                                 0x1
#define _SMT1CPWL_CPW1_LENGTH                               0x1
#define _SMT1CPWL_CPW1_MASK                                 0x2
#define _SMT1CPWL_CPW2_POSN                                 0x2
#define _SMT1CPWL_CPW2_POSITION                             0x2
#define _SMT1CPWL_CPW2_SIZE                                 0x1
#define _SMT1CPWL_CPW2_LENGTH                               0x1
#define _SMT1CPWL_CPW2_MASK                                 0x4
#define _SMT1CPWL_CPW3_POSN                                 0x3
#define _SMT1CPWL_CPW3_POSITION                             0x3
#define _SMT1CPWL_CPW3_SIZE                                 0x1
#define _SMT1CPWL_CPW3_LENGTH                               0x1
#define _SMT1CPWL_CPW3_MASK                                 0x8
#define _SMT1CPWL_CPW4_POSN                                 0x4
#define _SMT1CPWL_CPW4_POSITION                             0x4
#define _SMT1CPWL_CPW4_SIZE                                 0x1
#define _SMT1CPWL_CPW4_LENGTH                               0x1
#define _SMT1CPWL_CPW4_MASK                                 0x10
#define _SMT1CPWL_CPW5_POSN                                 0x5
#define _SMT1CPWL_CPW5_POSITION                             0x5
#define _SMT1CPWL_CPW5_SIZE                                 0x1
#define _SMT1CPWL_CPW5_LENGTH                               0x1
#define _SMT1CPWL_CPW5_MASK                                 0x20
#define _SMT1CPWL_CPW6_POSN                                 0x6
#define _SMT1CPWL_CPW6_POSITION                             0x6
#define _SMT1CPWL_CPW6_SIZE                                 0x1
#define _SMT1CPWL_CPW6_LENGTH                               0x1
#define _SMT1CPWL_CPW6_MASK                                 0x40
#define _SMT1CPWL_CPW7_POSN                                 0x7
#define _SMT1CPWL_CPW7_POSITION                             0x7
#define _SMT1CPWL_CPW7_SIZE                                 0x1
#define _SMT1CPWL_CPW7_LENGTH                               0x1
#define _SMT1CPWL_CPW7_MASK                                 0x80
#define _SMT1CPWL_SMT1CPW_POSN                              0x0
#define _SMT1CPWL_SMT1CPW_POSITION                          0x0
#define _SMT1CPWL_SMT1CPW_SIZE                              0x8
#define _SMT1CPWL_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWL_SMT1CPW_MASK                              0xFF
#define _SMT1CPWL_SMT1CPW0_POSN                             0x0
#define _SMT1CPWL_SMT1CPW0_POSITION                         0x0
#define _SMT1CPWL_SMT1CPW0_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW0_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW0_MASK                             0x1
#define _SMT1CPWL_SMT1CPW1_POSN                             0x1
#define _SMT1CPWL_SMT1CPW1_POSITION                         0x1
#define _SMT1CPWL_SMT1CPW1_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW1_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW1_MASK                             0x2
#define _SMT1CPWL_SMT1CPW2_POSN                             0x2
#define _SMT1CPWL_SMT1CPW2_POSITION                         0x2
#define _SMT1CPWL_SMT1CPW2_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW2_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW2_MASK                             0x4
#define _SMT1CPWL_SMT1CPW3_POSN                             0x3
#define _SMT1CPWL_SMT1CPW3_POSITION                         0x3
#define _SMT1CPWL_SMT1CPW3_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW3_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW3_MASK                             0x8
#define _SMT1CPWL_SMT1CPW4_POSN                             0x4
#define _SMT1CPWL_SMT1CPW4_POSITION                         0x4
#define _SMT1CPWL_SMT1CPW4_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW4_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW4_MASK                             0x10
#define _SMT1CPWL_SMT1CPW5_POSN                             0x5
#define _SMT1CPWL_SMT1CPW5_POSITION                         0x5
#define _SMT1CPWL_SMT1CPW5_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW5_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW5_MASK                             0x20
#define _SMT1CPWL_SMT1CPW6_POSN                             0x6
#define _SMT1CPWL_SMT1CPW6_POSITION                         0x6
#define _SMT1CPWL_SMT1CPW6_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW6_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW6_MASK                             0x40
#define _SMT1CPWL_SMT1CPW7_POSN                             0x7
#define _SMT1CPWL_SMT1CPW7_POSITION                         0x7
#define _SMT1CPWL_SMT1CPW7_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW7_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW7_MASK                             0x80

// Register: SMT1CPWH
#define SMT1CPWH SMT1CPWH
extern volatile unsigned char           SMT1CPWH            __at(0x493);
#ifndef _LIB_BUILD
asm("SMT1CPWH equ 0493h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW8                   :1;
        unsigned CPW9                   :1;
        unsigned CPW10                  :1;
        unsigned CPW11                  :1;
        unsigned CPW12                  :1;
        unsigned CPW13                  :1;
        unsigned CPW14                  :1;
        unsigned CPW15                  :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW8               :1;
        unsigned SMT1CPW9               :1;
        unsigned SMT1CPW10              :1;
        unsigned SMT1CPW11              :1;
        unsigned SMT1CPW12              :1;
        unsigned SMT1CPW13              :1;
        unsigned SMT1CPW14              :1;
        unsigned SMT1CPW15              :1;
    };
} SMT1CPWHbits_t;
extern volatile SMT1CPWHbits_t SMT1CPWHbits __at(0x493);
// bitfield macros
#define _SMT1CPWH_CPW_POSN                                  0x0
#define _SMT1CPWH_CPW_POSITION                              0x0
#define _SMT1CPWH_CPW_SIZE                                  0x8
#define _SMT1CPWH_CPW_LENGTH                                0x8
#define _SMT1CPWH_CPW_MASK                                  0xFF
#define _SMT1CPWH_CPW8_POSN                                 0x0
#define _SMT1CPWH_CPW8_POSITION                             0x0
#define _SMT1CPWH_CPW8_SIZE                                 0x1
#define _SMT1CPWH_CPW8_LENGTH                               0x1
#define _SMT1CPWH_CPW8_MASK                                 0x1
#define _SMT1CPWH_CPW9_POSN                                 0x1
#define _SMT1CPWH_CPW9_POSITION                             0x1
#define _SMT1CPWH_CPW9_SIZE                                 0x1
#define _SMT1CPWH_CPW9_LENGTH                               0x1
#define _SMT1CPWH_CPW9_MASK                                 0x2
#define _SMT1CPWH_CPW10_POSN                                0x2
#define _SMT1CPWH_CPW10_POSITION                            0x2
#define _SMT1CPWH_CPW10_SIZE                                0x1
#define _SMT1CPWH_CPW10_LENGTH                              0x1
#define _SMT1CPWH_CPW10_MASK                                0x4
#define _SMT1CPWH_CPW11_POSN                                0x3
#define _SMT1CPWH_CPW11_POSITION                            0x3
#define _SMT1CPWH_CPW11_SIZE                                0x1
#define _SMT1CPWH_CPW11_LENGTH                              0x1
#define _SMT1CPWH_CPW11_MASK                                0x8
#define _SMT1CPWH_CPW12_POSN                                0x4
#define _SMT1CPWH_CPW12_POSITION                            0x4
#define _SMT1CPWH_CPW12_SIZE                                0x1
#define _SMT1CPWH_CPW12_LENGTH                              0x1
#define _SMT1CPWH_CPW12_MASK                                0x10
#define _SMT1CPWH_CPW13_POSN                                0x5
#define _SMT1CPWH_CPW13_POSITION                            0x5
#define _SMT1CPWH_CPW13_SIZE                                0x1
#define _SMT1CPWH_CPW13_LENGTH                              0x1
#define _SMT1CPWH_CPW13_MASK                                0x20
#define _SMT1CPWH_CPW14_POSN                                0x6
#define _SMT1CPWH_CPW14_POSITION                            0x6
#define _SMT1CPWH_CPW14_SIZE                                0x1
#define _SMT1CPWH_CPW14_LENGTH                              0x1
#define _SMT1CPWH_CPW14_MASK                                0x40
#define _SMT1CPWH_CPW15_POSN                                0x7
#define _SMT1CPWH_CPW15_POSITION                            0x7
#define _SMT1CPWH_CPW15_SIZE                                0x1
#define _SMT1CPWH_CPW15_LENGTH                              0x1
#define _SMT1CPWH_CPW15_MASK                                0x80
#define _SMT1CPWH_SMT1CPW_POSN                              0x0
#define _SMT1CPWH_SMT1CPW_POSITION                          0x0
#define _SMT1CPWH_SMT1CPW_SIZE                              0x8
#define _SMT1CPWH_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWH_SMT1CPW_MASK                              0xFF
#define _SMT1CPWH_SMT1CPW8_POSN                             0x0
#define _SMT1CPWH_SMT1CPW8_POSITION                         0x0
#define _SMT1CPWH_SMT1CPW8_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW8_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW8_MASK                             0x1
#define _SMT1CPWH_SMT1CPW9_POSN                             0x1
#define _SMT1CPWH_SMT1CPW9_POSITION                         0x1
#define _SMT1CPWH_SMT1CPW9_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW9_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW9_MASK                             0x2
#define _SMT1CPWH_SMT1CPW10_POSN                            0x2
#define _SMT1CPWH_SMT1CPW10_POSITION                        0x2
#define _SMT1CPWH_SMT1CPW10_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW10_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW10_MASK                            0x4
#define _SMT1CPWH_SMT1CPW11_POSN                            0x3
#define _SMT1CPWH_SMT1CPW11_POSITION                        0x3
#define _SMT1CPWH_SMT1CPW11_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW11_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW11_MASK                            0x8
#define _SMT1CPWH_SMT1CPW12_POSN                            0x4
#define _SMT1CPWH_SMT1CPW12_POSITION                        0x4
#define _SMT1CPWH_SMT1CPW12_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW12_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW12_MASK                            0x10
#define _SMT1CPWH_SMT1CPW13_POSN                            0x5
#define _SMT1CPWH_SMT1CPW13_POSITION                        0x5
#define _SMT1CPWH_SMT1CPW13_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW13_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW13_MASK                            0x20
#define _SMT1CPWH_SMT1CPW14_POSN                            0x6
#define _SMT1CPWH_SMT1CPW14_POSITION                        0x6
#define _SMT1CPWH_SMT1CPW14_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW14_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW14_MASK                            0x40
#define _SMT1CPWH_SMT1CPW15_POSN                            0x7
#define _SMT1CPWH_SMT1CPW15_POSITION                        0x7
#define _SMT1CPWH_SMT1CPW15_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW15_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW15_MASK                            0x80

// Register: SMT1CPWU
#define SMT1CPWU SMT1CPWU
extern volatile unsigned char           SMT1CPWU            __at(0x494);
#ifndef _LIB_BUILD
asm("SMT1CPWU equ 0494h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW16                  :1;
        unsigned CPW17                  :1;
        unsigned CPW18                  :1;
        unsigned CPW19                  :1;
        unsigned CPW20                  :1;
        unsigned CPW21                  :1;
        unsigned CPW22                  :1;
        unsigned CPW23                  :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW16              :1;
        unsigned SMT1CPW17              :1;
        unsigned SMT1CPW18              :1;
        unsigned SMT1CPW19              :1;
        unsigned SMT1CPW20              :1;
        unsigned SMT1CPW21              :1;
        unsigned SMT1CPW22              :1;
        unsigned SMT1CPW23              :1;
    };
} SMT1CPWUbits_t;
extern volatile SMT1CPWUbits_t SMT1CPWUbits __at(0x494);
// bitfield macros
#define _SMT1CPWU_CPW_POSN                                  0x0
#define _SMT1CPWU_CPW_POSITION                              0x0
#define _SMT1CPWU_CPW_SIZE                                  0x8
#define _SMT1CPWU_CPW_LENGTH                                0x8
#define _SMT1CPWU_CPW_MASK                                  0xFF
#define _SMT1CPWU_CPW16_POSN                                0x0
#define _SMT1CPWU_CPW16_POSITION                            0x0
#define _SMT1CPWU_CPW16_SIZE                                0x1
#define _SMT1CPWU_CPW16_LENGTH                              0x1
#define _SMT1CPWU_CPW16_MASK                                0x1
#define _SMT1CPWU_CPW17_POSN                                0x1
#define _SMT1CPWU_CPW17_POSITION                            0x1
#define _SMT1CPWU_CPW17_SIZE                                0x1
#define _SMT1CPWU_CPW17_LENGTH                              0x1
#define _SMT1CPWU_CPW17_MASK                                0x2
#define _SMT1CPWU_CPW18_POSN                                0x2
#define _SMT1CPWU_CPW18_POSITION                            0x2
#define _SMT1CPWU_CPW18_SIZE                                0x1
#define _SMT1CPWU_CPW18_LENGTH                              0x1
#define _SMT1CPWU_CPW18_MASK                                0x4
#define _SMT1CPWU_CPW19_POSN                                0x3
#define _SMT1CPWU_CPW19_POSITION                            0x3
#define _SMT1CPWU_CPW19_SIZE                                0x1
#define _SMT1CPWU_CPW19_LENGTH                              0x1
#define _SMT1CPWU_CPW19_MASK                                0x8
#define _SMT1CPWU_CPW20_POSN                                0x4
#define _SMT1CPWU_CPW20_POSITION                            0x4
#define _SMT1CPWU_CPW20_SIZE                                0x1
#define _SMT1CPWU_CPW20_LENGTH                              0x1
#define _SMT1CPWU_CPW20_MASK                                0x10
#define _SMT1CPWU_CPW21_POSN                                0x5
#define _SMT1CPWU_CPW21_POSITION                            0x5
#define _SMT1CPWU_CPW21_SIZE                                0x1
#define _SMT1CPWU_CPW21_LENGTH                              0x1
#define _SMT1CPWU_CPW21_MASK                                0x20
#define _SMT1CPWU_CPW22_POSN                                0x6
#define _SMT1CPWU_CPW22_POSITION                            0x6
#define _SMT1CPWU_CPW22_SIZE                                0x1
#define _SMT1CPWU_CPW22_LENGTH                              0x1
#define _SMT1CPWU_CPW22_MASK                                0x40
#define _SMT1CPWU_CPW23_POSN                                0x7
#define _SMT1CPWU_CPW23_POSITION                            0x7
#define _SMT1CPWU_CPW23_SIZE                                0x1
#define _SMT1CPWU_CPW23_LENGTH                              0x1
#define _SMT1CPWU_CPW23_MASK                                0x80
#define _SMT1CPWU_SMT1CPW_POSN                              0x0
#define _SMT1CPWU_SMT1CPW_POSITION                          0x0
#define _SMT1CPWU_SMT1CPW_SIZE                              0x8
#define _SMT1CPWU_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWU_SMT1CPW_MASK                              0xFF
#define _SMT1CPWU_SMT1CPW16_POSN                            0x0
#define _SMT1CPWU_SMT1CPW16_POSITION                        0x0
#define _SMT1CPWU_SMT1CPW16_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW16_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW16_MASK                            0x1
#define _SMT1CPWU_SMT1CPW17_POSN                            0x1
#define _SMT1CPWU_SMT1CPW17_POSITION                        0x1
#define _SMT1CPWU_SMT1CPW17_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW17_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW17_MASK                            0x2
#define _SMT1CPWU_SMT1CPW18_POSN                            0x2
#define _SMT1CPWU_SMT1CPW18_POSITION                        0x2
#define _SMT1CPWU_SMT1CPW18_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW18_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW18_MASK                            0x4
#define _SMT1CPWU_SMT1CPW19_POSN                            0x3
#define _SMT1CPWU_SMT1CPW19_POSITION                        0x3
#define _SMT1CPWU_SMT1CPW19_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW19_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW19_MASK                            0x8
#define _SMT1CPWU_SMT1CPW20_POSN                            0x4
#define _SMT1CPWU_SMT1CPW20_POSITION                        0x4
#define _SMT1CPWU_SMT1CPW20_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW20_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW20_MASK                            0x10
#define _SMT1CPWU_SMT1CPW21_POSN                            0x5
#define _SMT1CPWU_SMT1CPW21_POSITION                        0x5
#define _SMT1CPWU_SMT1CPW21_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW21_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW21_MASK                            0x20
#define _SMT1CPWU_SMT1CPW22_POSN                            0x6
#define _SMT1CPWU_SMT1CPW22_POSITION                        0x6
#define _SMT1CPWU_SMT1CPW22_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW22_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW22_MASK                            0x40
#define _SMT1CPWU_SMT1CPW23_POSN                            0x7
#define _SMT1CPWU_SMT1CPW23_POSITION                        0x7
#define _SMT1CPWU_SMT1CPW23_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW23_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW23_MASK                            0x80

// Register: SMT1PR
#define SMT1PR SMT1PR
#ifndef __CCI__
extern volatile __uint24                SMT1PR              __at(0x495);
#endif
#ifndef _LIB_BUILD
asm("SMT1PR equ 0495h");
#endif

// Register: SMT1PRL
#define SMT1PRL SMT1PRL
extern volatile unsigned char           SMT1PRL             __at(0x495);
#ifndef _LIB_BUILD
asm("SMT1PRL equ 0495h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
        unsigned PR3                    :1;
        unsigned PR4                    :1;
        unsigned PR5                    :1;
        unsigned PR6                    :1;
        unsigned PR7                    :1;
    };
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR0                :1;
        unsigned SMT1PR1                :1;
        unsigned SMT1PR2                :1;
        unsigned SMT1PR3                :1;
        unsigned SMT1PR4                :1;
        unsigned SMT1PR5                :1;
        unsigned SMT1PR6                :1;
        unsigned SMT1PR7                :1;
    };
} SMT1PRLbits_t;
extern volatile SMT1PRLbits_t SMT1PRLbits __at(0x495);
// bitfield macros
#define _SMT1PRL_PR_POSN                                    0x0
#define _SMT1PRL_PR_POSITION                                0x0
#define _SMT1PRL_PR_SIZE                                    0x8
#define _SMT1PRL_PR_LENGTH                                  0x8
#define _SMT1PRL_PR_MASK                                    0xFF
#define _SMT1PRL_PR0_POSN                                   0x0
#define _SMT1PRL_PR0_POSITION                               0x0
#define _SMT1PRL_PR0_SIZE                                   0x1
#define _SMT1PRL_PR0_LENGTH                                 0x1
#define _SMT1PRL_PR0_MASK                                   0x1
#define _SMT1PRL_PR1_POSN                                   0x1
#define _SMT1PRL_PR1_POSITION                               0x1
#define _SMT1PRL_PR1_SIZE                                   0x1
#define _SMT1PRL_PR1_LENGTH                                 0x1
#define _SMT1PRL_PR1_MASK                                   0x2
#define _SMT1PRL_PR2_POSN                                   0x2
#define _SMT1PRL_PR2_POSITION                               0x2
#define _SMT1PRL_PR2_SIZE                                   0x1
#define _SMT1PRL_PR2_LENGTH                                 0x1
#define _SMT1PRL_PR2_MASK                                   0x4
#define _SMT1PRL_PR3_POSN                                   0x3
#define _SMT1PRL_PR3_POSITION                               0x3
#define _SMT1PRL_PR3_SIZE                                   0x1
#define _SMT1PRL_PR3_LENGTH                                 0x1
#define _SMT1PRL_PR3_MASK                                   0x8
#define _SMT1PRL_PR4_POSN                                   0x4
#define _SMT1PRL_PR4_POSITION                               0x4
#define _SMT1PRL_PR4_SIZE                                   0x1
#define _SMT1PRL_PR4_LENGTH                                 0x1
#define _SMT1PRL_PR4_MASK                                   0x10
#define _SMT1PRL_PR5_POSN                                   0x5
#define _SMT1PRL_PR5_POSITION                               0x5
#define _SMT1PRL_PR5_SIZE                                   0x1
#define _SMT1PRL_PR5_LENGTH                                 0x1
#define _SMT1PRL_PR5_MASK                                   0x20
#define _SMT1PRL_PR6_POSN                                   0x6
#define _SMT1PRL_PR6_POSITION                               0x6
#define _SMT1PRL_PR6_SIZE                                   0x1
#define _SMT1PRL_PR6_LENGTH                                 0x1
#define _SMT1PRL_PR6_MASK                                   0x40
#define _SMT1PRL_PR7_POSN                                   0x7
#define _SMT1PRL_PR7_POSITION                               0x7
#define _SMT1PRL_PR7_SIZE                                   0x1
#define _SMT1PRL_PR7_LENGTH                                 0x1
#define _SMT1PRL_PR7_MASK                                   0x80
#define _SMT1PRL_SMT1PR_POSN                                0x0
#define _SMT1PRL_SMT1PR_POSITION                            0x0
#define _SMT1PRL_SMT1PR_SIZE                                0x8
#define _SMT1PRL_SMT1PR_LENGTH                              0x8
#define _SMT1PRL_SMT1PR_MASK                                0xFF
#define _SMT1PRL_SMT1PR0_POSN                               0x0
#define _SMT1PRL_SMT1PR0_POSITION                           0x0
#define _SMT1PRL_SMT1PR0_SIZE                               0x1
#define _SMT1PRL_SMT1PR0_LENGTH                             0x1
#define _SMT1PRL_SMT1PR0_MASK                               0x1
#define _SMT1PRL_SMT1PR1_POSN                               0x1
#define _SMT1PRL_SMT1PR1_POSITION                           0x1
#define _SMT1PRL_SMT1PR1_SIZE                               0x1
#define _SMT1PRL_SMT1PR1_LENGTH                             0x1
#define _SMT1PRL_SMT1PR1_MASK                               0x2
#define _SMT1PRL_SMT1PR2_POSN                               0x2
#define _SMT1PRL_SMT1PR2_POSITION                           0x2
#define _SMT1PRL_SMT1PR2_SIZE                               0x1
#define _SMT1PRL_SMT1PR2_LENGTH                             0x1
#define _SMT1PRL_SMT1PR2_MASK                               0x4
#define _SMT1PRL_SMT1PR3_POSN                               0x3
#define _SMT1PRL_SMT1PR3_POSITION                           0x3
#define _SMT1PRL_SMT1PR3_SIZE                               0x1
#define _SMT1PRL_SMT1PR3_LENGTH                             0x1
#define _SMT1PRL_SMT1PR3_MASK                               0x8
#define _SMT1PRL_SMT1PR4_POSN                               0x4
#define _SMT1PRL_SMT1PR4_POSITION                           0x4
#define _SMT1PRL_SMT1PR4_SIZE                               0x1
#define _SMT1PRL_SMT1PR4_LENGTH                             0x1
#define _SMT1PRL_SMT1PR4_MASK                               0x10
#define _SMT1PRL_SMT1PR5_POSN                               0x5
#define _SMT1PRL_SMT1PR5_POSITION                           0x5
#define _SMT1PRL_SMT1PR5_SIZE                               0x1
#define _SMT1PRL_SMT1PR5_LENGTH                             0x1
#define _SMT1PRL_SMT1PR5_MASK                               0x20
#define _SMT1PRL_SMT1PR6_POSN                               0x6
#define _SMT1PRL_SMT1PR6_POSITION                           0x6
#define _SMT1PRL_SMT1PR6_SIZE                               0x1
#define _SMT1PRL_SMT1PR6_LENGTH                             0x1
#define _SMT1PRL_SMT1PR6_MASK                               0x40
#define _SMT1PRL_SMT1PR7_POSN                               0x7
#define _SMT1PRL_SMT1PR7_POSITION                           0x7
#define _SMT1PRL_SMT1PR7_SIZE                               0x1
#define _SMT1PRL_SMT1PR7_LENGTH                             0x1
#define _SMT1PRL_SMT1PR7_MASK                               0x80

// Register: SMT1PRH
#define SMT1PRH SMT1PRH
extern volatile unsigned char           SMT1PRH             __at(0x496);
#ifndef _LIB_BUILD
asm("SMT1PRH equ 0496h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR8                    :1;
        unsigned PR9                    :1;
        unsigned PR10                   :1;
        unsigned PR11                   :1;
        unsigned PR12                   :1;
        unsigned PR13                   :1;
        unsigned PR14                   :1;
        unsigned PR15                   :1;
    };
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR8                :1;
        unsigned SMT1PR9                :1;
        unsigned SMT1PR10               :1;
        unsigned SMT1PR11               :1;
        unsigned SMT1PR12               :1;
        unsigned SMT1PR13               :1;
        unsigned SMT1PR14               :1;
        unsigned SMT1PR15               :1;
    };
} SMT1PRHbits_t;
extern volatile SMT1PRHbits_t SMT1PRHbits __at(0x496);
// bitfield macros
#define _SMT1PRH_PR_POSN                                    0x0
#define _SMT1PRH_PR_POSITION                                0x0
#define _SMT1PRH_PR_SIZE                                    0x8
#define _SMT1PRH_PR_LENGTH                                  0x8
#define _SMT1PRH_PR_MASK                                    0xFF
#define _SMT1PRH_PR8_POSN                                   0x0
#define _SMT1PRH_PR8_POSITION                               0x0
#define _SMT1PRH_PR8_SIZE                                   0x1
#define _SMT1PRH_PR8_LENGTH                                 0x1
#define _SMT1PRH_PR8_MASK                                   0x1
#define _SMT1PRH_PR9_POSN                                   0x1
#define _SMT1PRH_PR9_POSITION                               0x1
#define _SMT1PRH_PR9_SIZE                                   0x1
#define _SMT1PRH_PR9_LENGTH                                 0x1
#define _SMT1PRH_PR9_MASK                                   0x2
#define _SMT1PRH_PR10_POSN                                  0x2
#define _SMT1PRH_PR10_POSITION                              0x2
#define _SMT1PRH_PR10_SIZE                                  0x1
#define _SMT1PRH_PR10_LENGTH                                0x1
#define _SMT1PRH_PR10_MASK                                  0x4
#define _SMT1PRH_PR11_POSN                                  0x3
#define _SMT1PRH_PR11_POSITION                              0x3
#define _SMT1PRH_PR11_SIZE                                  0x1
#define _SMT1PRH_PR11_LENGTH                                0x1
#define _SMT1PRH_PR11_MASK                                  0x8
#define _SMT1PRH_PR12_POSN                                  0x4
#define _SMT1PRH_PR12_POSITION                              0x4
#define _SMT1PRH_PR12_SIZE                                  0x1
#define _SMT1PRH_PR12_LENGTH                                0x1
#define _SMT1PRH_PR12_MASK                                  0x10
#define _SMT1PRH_PR13_POSN                                  0x5
#define _SMT1PRH_PR13_POSITION                              0x5
#define _SMT1PRH_PR13_SIZE                                  0x1
#define _SMT1PRH_PR13_LENGTH                                0x1
#define _SMT1PRH_PR13_MASK                                  0x20
#define _SMT1PRH_PR14_POSN                                  0x6
#define _SMT1PRH_PR14_POSITION                              0x6
#define _SMT1PRH_PR14_SIZE                                  0x1
#define _SMT1PRH_PR14_LENGTH                                0x1
#define _SMT1PRH_PR14_MASK                                  0x40
#define _SMT1PRH_PR15_POSN                                  0x7
#define _SMT1PRH_PR15_POSITION                              0x7
#define _SMT1PRH_PR15_SIZE                                  0x1
#define _SMT1PRH_PR15_LENGTH                                0x1
#define _SMT1PRH_PR15_MASK                                  0x80
#define _SMT1PRH_SMT1PR_POSN                                0x0
#define _SMT1PRH_SMT1PR_POSITION                            0x0
#define _SMT1PRH_SMT1PR_SIZE                                0x8
#define _SMT1PRH_SMT1PR_LENGTH                              0x8
#define _SMT1PRH_SMT1PR_MASK                                0xFF
#define _SMT1PRH_SMT1PR8_POSN                               0x0
#define _SMT1PRH_SMT1PR8_POSITION                           0x0
#define _SMT1PRH_SMT1PR8_SIZE                               0x1
#define _SMT1PRH_SMT1PR8_LENGTH                             0x1
#define _SMT1PRH_SMT1PR8_MASK                               0x1
#define _SMT1PRH_SMT1PR9_POSN                               0x1
#define _SMT1PRH_SMT1PR9_POSITION                           0x1
#define _SMT1PRH_SMT1PR9_SIZE                               0x1
#define _SMT1PRH_SMT1PR9_LENGTH                             0x1
#define _SMT1PRH_SMT1PR9_MASK                               0x2
#define _SMT1PRH_SMT1PR10_POSN                              0x2
#define _SMT1PRH_SMT1PR10_POSITION                          0x2
#define _SMT1PRH_SMT1PR10_SIZE                              0x1
#define _SMT1PRH_SMT1PR10_LENGTH                            0x1
#define _SMT1PRH_SMT1PR10_MASK                              0x4
#define _SMT1PRH_SMT1PR11_POSN                              0x3
#define _SMT1PRH_SMT1PR11_POSITION                          0x3
#define _SMT1PRH_SMT1PR11_SIZE                              0x1
#define _SMT1PRH_SMT1PR11_LENGTH                            0x1
#define _SMT1PRH_SMT1PR11_MASK                              0x8
#define _SMT1PRH_SMT1PR12_POSN                              0x4
#define _SMT1PRH_SMT1PR12_POSITION                          0x4
#define _SMT1PRH_SMT1PR12_SIZE                              0x1
#define _SMT1PRH_SMT1PR12_LENGTH                            0x1
#define _SMT1PRH_SMT1PR12_MASK                              0x10
#define _SMT1PRH_SMT1PR13_POSN                              0x5
#define _SMT1PRH_SMT1PR13_POSITION                          0x5
#define _SMT1PRH_SMT1PR13_SIZE                              0x1
#define _SMT1PRH_SMT1PR13_LENGTH                            0x1
#define _SMT1PRH_SMT1PR13_MASK                              0x20
#define _SMT1PRH_SMT1PR14_POSN                              0x6
#define _SMT1PRH_SMT1PR14_POSITION                          0x6
#define _SMT1PRH_SMT1PR14_SIZE                              0x1
#define _SMT1PRH_SMT1PR14_LENGTH                            0x1
#define _SMT1PRH_SMT1PR14_MASK                              0x40
#define _SMT1PRH_SMT1PR15_POSN                              0x7
#define _SMT1PRH_SMT1PR15_POSITION                          0x7
#define _SMT1PRH_SMT1PR15_SIZE                              0x1
#define _SMT1PRH_SMT1PR15_LENGTH                            0x1
#define _SMT1PRH_SMT1PR15_MASK                              0x80

// Register: SMT1PRU
#define SMT1PRU SMT1PRU
extern volatile unsigned char           SMT1PRU             __at(0x497);
#ifndef _LIB_BUILD
asm("SMT1PRU equ 0497h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR16                   :1;
        unsigned PR17                   :1;
        unsigned PR18                   :1;
        unsigned PR19                   :1;
        unsigned PR20                   :1;
        unsigned PR21                   :1;
        unsigned PR22                   :1;
        unsigned PR23                   :1;
    };
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR16               :1;
        unsigned SMT1PR17               :1;
        unsigned SMT1PR18               :1;
        unsigned SMT1PR19               :1;
        unsigned SMT1PR20               :1;
        unsigned SMT1PR21               :1;
        unsigned SMT1PR22               :1;
        unsigned SMT1PR23               :1;
    };
} SMT1PRUbits_t;
extern volatile SMT1PRUbits_t SMT1PRUbits __at(0x497);
// bitfield macros
#define _SMT1PRU_PR_POSN                                    0x0
#define _SMT1PRU_PR_POSITION                                0x0
#define _SMT1PRU_PR_SIZE                                    0x8
#define _SMT1PRU_PR_LENGTH                                  0x8
#define _SMT1PRU_PR_MASK                                    0xFF
#define _SMT1PRU_PR16_POSN                                  0x0
#define _SMT1PRU_PR16_POSITION                              0x0
#define _SMT1PRU_PR16_SIZE                                  0x1
#define _SMT1PRU_PR16_LENGTH                                0x1
#define _SMT1PRU_PR16_MASK                                  0x1
#define _SMT1PRU_PR17_POSN                                  0x1
#define _SMT1PRU_PR17_POSITION                              0x1
#define _SMT1PRU_PR17_SIZE                                  0x1
#define _SMT1PRU_PR17_LENGTH                                0x1
#define _SMT1PRU_PR17_MASK                                  0x2
#define _SMT1PRU_PR18_POSN                                  0x2
#define _SMT1PRU_PR18_POSITION                              0x2
#define _SMT1PRU_PR18_SIZE                                  0x1
#define _SMT1PRU_PR18_LENGTH                                0x1
#define _SMT1PRU_PR18_MASK                                  0x4
#define _SMT1PRU_PR19_POSN                                  0x3
#define _SMT1PRU_PR19_POSITION                              0x3
#define _SMT1PRU_PR19_SIZE                                  0x1
#define _SMT1PRU_PR19_LENGTH                                0x1
#define _SMT1PRU_PR19_MASK                                  0x8
#define _SMT1PRU_PR20_POSN                                  0x4
#define _SMT1PRU_PR20_POSITION                              0x4
#define _SMT1PRU_PR20_SIZE                                  0x1
#define _SMT1PRU_PR20_LENGTH                                0x1
#define _SMT1PRU_PR20_MASK                                  0x10
#define _SMT1PRU_PR21_POSN                                  0x5
#define _SMT1PRU_PR21_POSITION                              0x5
#define _SMT1PRU_PR21_SIZE                                  0x1
#define _SMT1PRU_PR21_LENGTH                                0x1
#define _SMT1PRU_PR21_MASK                                  0x20
#define _SMT1PRU_PR22_POSN                                  0x6
#define _SMT1PRU_PR22_POSITION                              0x6
#define _SMT1PRU_PR22_SIZE                                  0x1
#define _SMT1PRU_PR22_LENGTH                                0x1
#define _SMT1PRU_PR22_MASK                                  0x40
#define _SMT1PRU_PR23_POSN                                  0x7
#define _SMT1PRU_PR23_POSITION                              0x7
#define _SMT1PRU_PR23_SIZE                                  0x1
#define _SMT1PRU_PR23_LENGTH                                0x1
#define _SMT1PRU_PR23_MASK                                  0x80
#define _SMT1PRU_SMT1PR_POSN                                0x0
#define _SMT1PRU_SMT1PR_POSITION                            0x0
#define _SMT1PRU_SMT1PR_SIZE                                0x8
#define _SMT1PRU_SMT1PR_LENGTH                              0x8
#define _SMT1PRU_SMT1PR_MASK                                0xFF
#define _SMT1PRU_SMT1PR16_POSN                              0x0
#define _SMT1PRU_SMT1PR16_POSITION                          0x0
#define _SMT1PRU_SMT1PR16_SIZE                              0x1
#define _SMT1PRU_SMT1PR16_LENGTH                            0x1
#define _SMT1PRU_SMT1PR16_MASK                              0x1
#define _SMT1PRU_SMT1PR17_POSN                              0x1
#define _SMT1PRU_SMT1PR17_POSITION                          0x1
#define _SMT1PRU_SMT1PR17_SIZE                              0x1
#define _SMT1PRU_SMT1PR17_LENGTH                            0x1
#define _SMT1PRU_SMT1PR17_MASK                              0x2
#define _SMT1PRU_SMT1PR18_POSN                              0x2
#define _SMT1PRU_SMT1PR18_POSITION                          0x2
#define _SMT1PRU_SMT1PR18_SIZE                              0x1
#define _SMT1PRU_SMT1PR18_LENGTH                            0x1
#define _SMT1PRU_SMT1PR18_MASK                              0x4
#define _SMT1PRU_SMT1PR19_POSN                              0x3
#define _SMT1PRU_SMT1PR19_POSITION                          0x3
#define _SMT1PRU_SMT1PR19_SIZE                              0x1
#define _SMT1PRU_SMT1PR19_LENGTH                            0x1
#define _SMT1PRU_SMT1PR19_MASK                              0x8
#define _SMT1PRU_SMT1PR20_POSN                              0x4
#define _SMT1PRU_SMT1PR20_POSITION                          0x4
#define _SMT1PRU_SMT1PR20_SIZE                              0x1
#define _SMT1PRU_SMT1PR20_LENGTH                            0x1
#define _SMT1PRU_SMT1PR20_MASK                              0x10
#define _SMT1PRU_SMT1PR21_POSN                              0x5
#define _SMT1PRU_SMT1PR21_POSITION                          0x5
#define _SMT1PRU_SMT1PR21_SIZE                              0x1
#define _SMT1PRU_SMT1PR21_LENGTH                            0x1
#define _SMT1PRU_SMT1PR21_MASK                              0x20
#define _SMT1PRU_SMT1PR22_POSN                              0x6
#define _SMT1PRU_SMT1PR22_POSITION                          0x6
#define _SMT1PRU_SMT1PR22_SIZE                              0x1
#define _SMT1PRU_SMT1PR22_LENGTH                            0x1
#define _SMT1PRU_SMT1PR22_MASK                              0x40
#define _SMT1PRU_SMT1PR23_POSN                              0x7
#define _SMT1PRU_SMT1PR23_POSITION                          0x7
#define _SMT1PRU_SMT1PR23_SIZE                              0x1
#define _SMT1PRU_SMT1PR23_LENGTH                            0x1
#define _SMT1PRU_SMT1PR23_MASK                              0x80

// Register: SMT1CON0
#define SMT1CON0 SMT1CON0
extern volatile unsigned char           SMT1CON0            __at(0x498);
#ifndef _LIB_BUILD
asm("SMT1CON0 equ 0498h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT1PS                 :2;
        unsigned SMT1CPOL               :1;
        unsigned SMT1SPOL               :1;
        unsigned SMT1WOL                :1;
        unsigned SMT1STP                :1;
        unsigned                        :1;
        unsigned SMT1EN                 :1;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
    };
    struct {
        unsigned SMT1PS0                :1;
        unsigned SMT1PS1                :1;
    };
} SMT1CON0bits_t;
extern volatile SMT1CON0bits_t SMT1CON0bits __at(0x498);
// bitfield macros
#define _SMT1CON0_PS_POSN                                   0x0
#define _SMT1CON0_PS_POSITION                               0x0
#define _SMT1CON0_PS_SIZE                                   0x2
#define _SMT1CON0_PS_LENGTH                                 0x2
#define _SMT1CON0_PS_MASK                                   0x3
#define _SMT1CON0_CPOL_POSN                                 0x2
#define _SMT1CON0_CPOL_POSITION                             0x2
#define _SMT1CON0_CPOL_SIZE                                 0x1
#define _SMT1CON0_CPOL_LENGTH                               0x1
#define _SMT1CON0_CPOL_MASK                                 0x4
#define _SMT1CON0_SPOL_POSN                                 0x3
#define _SMT1CON0_SPOL_POSITION                             0x3
#define _SMT1CON0_SPOL_SIZE                                 0x1
#define _SMT1CON0_SPOL_LENGTH                               0x1
#define _SMT1CON0_SPOL_MASK                                 0x8
#define _SMT1CON0_WPOL_POSN                                 0x4
#define _SMT1CON0_WPOL_POSITION                             0x4
#define _SMT1CON0_WPOL_SIZE                                 0x1
#define _SMT1CON0_WPOL_LENGTH                               0x1
#define _SMT1CON0_WPOL_MASK                                 0x10
#define _SMT1CON0_STP_POSN                                  0x5
#define _SMT1CON0_STP_POSITION                              0x5
#define _SMT1CON0_STP_SIZE                                  0x1
#define _SMT1CON0_STP_LENGTH                                0x1
#define _SMT1CON0_STP_MASK                                  0x20
#define _SMT1CON0_EN_POSN                                   0x7
#define _SMT1CON0_EN_POSITION                               0x7
#define _SMT1CON0_EN_SIZE                                   0x1
#define _SMT1CON0_EN_LENGTH                                 0x1
#define _SMT1CON0_EN_MASK                                   0x80
#define _SMT1CON0_SMT1PS_POSN                               0x0
#define _SMT1CON0_SMT1PS_POSITION                           0x0
#define _SMT1CON0_SMT1PS_SIZE                               0x2
#define _SMT1CON0_SMT1PS_LENGTH                             0x2
#define _SMT1CON0_SMT1PS_MASK                               0x3
#define _SMT1CON0_SMT1CPOL_POSN                             0x2
#define _SMT1CON0_SMT1CPOL_POSITION                         0x2
#define _SMT1CON0_SMT1CPOL_SIZE                             0x1
#define _SMT1CON0_SMT1CPOL_LENGTH                           0x1
#define _SMT1CON0_SMT1CPOL_MASK                             0x4
#define _SMT1CON0_SMT1SPOL_POSN                             0x3
#define _SMT1CON0_SMT1SPOL_POSITION                         0x3
#define _SMT1CON0_SMT1SPOL_SIZE                             0x1
#define _SMT1CON0_SMT1SPOL_LENGTH                           0x1
#define _SMT1CON0_SMT1SPOL_MASK                             0x8
#define _SMT1CON0_SMT1WOL_POSN                              0x4
#define _SMT1CON0_SMT1WOL_POSITION                          0x4
#define _SMT1CON0_SMT1WOL_SIZE                              0x1
#define _SMT1CON0_SMT1WOL_LENGTH                            0x1
#define _SMT1CON0_SMT1WOL_MASK                              0x10
#define _SMT1CON0_SMT1STP_POSN                              0x5
#define _SMT1CON0_SMT1STP_POSITION                          0x5
#define _SMT1CON0_SMT1STP_SIZE                              0x1
#define _SMT1CON0_SMT1STP_LENGTH                            0x1
#define _SMT1CON0_SMT1STP_MASK                              0x20
#define _SMT1CON0_SMT1EN_POSN                               0x7
#define _SMT1CON0_SMT1EN_POSITION                           0x7
#define _SMT1CON0_SMT1EN_SIZE                               0x1
#define _SMT1CON0_SMT1EN_LENGTH                             0x1
#define _SMT1CON0_SMT1EN_MASK                               0x80
#define _SMT1CON0_PS0_POSN                                  0x0
#define _SMT1CON0_PS0_POSITION                              0x0
#define _SMT1CON0_PS0_SIZE                                  0x1
#define _SMT1CON0_PS0_LENGTH                                0x1
#define _SMT1CON0_PS0_MASK                                  0x1
#define _SMT1CON0_PS1_POSN                                  0x1
#define _SMT1CON0_PS1_POSITION                              0x1
#define _SMT1CON0_PS1_SIZE                                  0x1
#define _SMT1CON0_PS1_LENGTH                                0x1
#define _SMT1CON0_PS1_MASK                                  0x2
#define _SMT1CON0_SMT1PS0_POSN                              0x0
#define _SMT1CON0_SMT1PS0_POSITION                          0x0
#define _SMT1CON0_SMT1PS0_SIZE                              0x1
#define _SMT1CON0_SMT1PS0_LENGTH                            0x1
#define _SMT1CON0_SMT1PS0_MASK                              0x1
#define _SMT1CON0_SMT1PS1_POSN                              0x1
#define _SMT1CON0_SMT1PS1_POSITION                          0x1
#define _SMT1CON0_SMT1PS1_SIZE                              0x1
#define _SMT1CON0_SMT1PS1_LENGTH                            0x1
#define _SMT1CON0_SMT1PS1_MASK                              0x2

// Register: SMT1CON1
#define SMT1CON1 SMT1CON1
extern volatile unsigned char           SMT1CON1            __at(0x499);
#ifndef _LIB_BUILD
asm("SMT1CON1 equ 0499h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned GO                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned                        :2;
        unsigned SMT1REPEAT             :1;
        unsigned SMT1GO                 :1;
    };
    struct {
        unsigned SMT1MODE               :4;
    };
} SMT1CON1bits_t;
extern volatile SMT1CON1bits_t SMT1CON1bits __at(0x499);
// bitfield macros
#define _SMT1CON1_MODE_POSN                                 0x0
#define _SMT1CON1_MODE_POSITION                             0x0
#define _SMT1CON1_MODE_SIZE                                 0x4
#define _SMT1CON1_MODE_LENGTH                               0x4
#define _SMT1CON1_MODE_MASK                                 0xF
#define _SMT1CON1_REPEAT_POSN                               0x6
#define _SMT1CON1_REPEAT_POSITION                           0x6
#define _SMT1CON1_REPEAT_SIZE                               0x1
#define _SMT1CON1_REPEAT_LENGTH                             0x1
#define _SMT1CON1_REPEAT_MASK                               0x40
#define _SMT1CON1_GO_POSN                                   0x7
#define _SMT1CON1_GO_POSITION                               0x7
#define _SMT1CON1_GO_SIZE                                   0x1
#define _SMT1CON1_GO_LENGTH                                 0x1
#define _SMT1CON1_GO_MASK                                   0x80
#define _SMT1CON1_MODE0_POSN                                0x0
#define _SMT1CON1_MODE0_POSITION                            0x0
#define _SMT1CON1_MODE0_SIZE                                0x1
#define _SMT1CON1_MODE0_LENGTH                              0x1
#define _SMT1CON1_MODE0_MASK                                0x1
#define _SMT1CON1_MODE1_POSN                                0x1
#define _SMT1CON1_MODE1_POSITION                            0x1
#define _SMT1CON1_MODE1_SIZE                                0x1
#define _SMT1CON1_MODE1_LENGTH                              0x1
#define _SMT1CON1_MODE1_MASK                                0x2
#define _SMT1CON1_MODE2_POSN                                0x2
#define _SMT1CON1_MODE2_POSITION                            0x2
#define _SMT1CON1_MODE2_SIZE                                0x1
#define _SMT1CON1_MODE2_LENGTH                              0x1
#define _SMT1CON1_MODE2_MASK                                0x4
#define _SMT1CON1_MODE3_POSN                                0x3
#define _SMT1CON1_MODE3_POSITION                            0x3
#define _SMT1CON1_MODE3_SIZE                                0x1
#define _SMT1CON1_MODE3_LENGTH                              0x1
#define _SMT1CON1_MODE3_MASK                                0x8
#define _SMT1CON1_SMT1REPEAT_POSN                           0x6
#define _SMT1CON1_SMT1REPEAT_POSITION                       0x6
#define _SMT1CON1_SMT1REPEAT_SIZE                           0x1
#define _SMT1CON1_SMT1REPEAT_LENGTH                         0x1
#define _SMT1CON1_SMT1REPEAT_MASK                           0x40
#define _SMT1CON1_SMT1GO_POSN                               0x7
#define _SMT1CON1_SMT1GO_POSITION                           0x7
#define _SMT1CON1_SMT1GO_SIZE                               0x1
#define _SMT1CON1_SMT1GO_LENGTH                             0x1
#define _SMT1CON1_SMT1GO_MASK                               0x80
#define _SMT1CON1_SMT1MODE_POSN                             0x0
#define _SMT1CON1_SMT1MODE_POSITION                         0x0
#define _SMT1CON1_SMT1MODE_SIZE                             0x4
#define _SMT1CON1_SMT1MODE_LENGTH                           0x4
#define _SMT1CON1_SMT1MODE_MASK                             0xF

// Register: SMT1STAT
#define SMT1STAT SMT1STAT
extern volatile unsigned char           SMT1STAT            __at(0x49A);
#ifndef _LIB_BUILD
asm("SMT1STAT equ 049Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT1AS                 :1;
        unsigned SMT1WS                 :1;
        unsigned SMT1TS                 :1;
        unsigned                        :2;
        unsigned SMT1RESET              :1;
        unsigned SMT1CPWUP              :1;
        unsigned SMT1CPRUP              :1;
    };
    struct {
        unsigned                        :5;
        unsigned SMT1RST                :1;
    };
} SMT1STATbits_t;
extern volatile SMT1STATbits_t SMT1STATbits __at(0x49A);
// bitfield macros
#define _SMT1STAT_AS_POSN                                   0x0
#define _SMT1STAT_AS_POSITION                               0x0
#define _SMT1STAT_AS_SIZE                                   0x1
#define _SMT1STAT_AS_LENGTH                                 0x1
#define _SMT1STAT_AS_MASK                                   0x1
#define _SMT1STAT_WS_POSN                                   0x1
#define _SMT1STAT_WS_POSITION                               0x1
#define _SMT1STAT_WS_SIZE                                   0x1
#define _SMT1STAT_WS_LENGTH                                 0x1
#define _SMT1STAT_WS_MASK                                   0x2
#define _SMT1STAT_TS_POSN                                   0x2
#define _SMT1STAT_TS_POSITION                               0x2
#define _SMT1STAT_TS_SIZE                                   0x1
#define _SMT1STAT_TS_LENGTH                                 0x1
#define _SMT1STAT_TS_MASK                                   0x4
#define _SMT1STAT_RST_POSN                                  0x5
#define _SMT1STAT_RST_POSITION                              0x5
#define _SMT1STAT_RST_SIZE                                  0x1
#define _SMT1STAT_RST_LENGTH                                0x1
#define _SMT1STAT_RST_MASK                                  0x20
#define _SMT1STAT_CPWUP_POSN                                0x6
#define _SMT1STAT_CPWUP_POSITION                            0x6
#define _SMT1STAT_CPWUP_SIZE                                0x1
#define _SMT1STAT_CPWUP_LENGTH                              0x1
#define _SMT1STAT_CPWUP_MASK                                0x40
#define _SMT1STAT_CPRUP_POSN                                0x7
#define _SMT1STAT_CPRUP_POSITION                            0x7
#define _SMT1STAT_CPRUP_SIZE                                0x1
#define _SMT1STAT_CPRUP_LENGTH                              0x1
#define _SMT1STAT_CPRUP_MASK                                0x80
#define _SMT1STAT_SMT1AS_POSN                               0x0
#define _SMT1STAT_SMT1AS_POSITION                           0x0
#define _SMT1STAT_SMT1AS_SIZE                               0x1
#define _SMT1STAT_SMT1AS_LENGTH                             0x1
#define _SMT1STAT_SMT1AS_MASK                               0x1
#define _SMT1STAT_SMT1WS_POSN                               0x1
#define _SMT1STAT_SMT1WS_POSITION                           0x1
#define _SMT1STAT_SMT1WS_SIZE                               0x1
#define _SMT1STAT_SMT1WS_LENGTH                             0x1
#define _SMT1STAT_SMT1WS_MASK                               0x2
#define _SMT1STAT_SMT1TS_POSN                               0x2
#define _SMT1STAT_SMT1TS_POSITION                           0x2
#define _SMT1STAT_SMT1TS_SIZE                               0x1
#define _SMT1STAT_SMT1TS_LENGTH                             0x1
#define _SMT1STAT_SMT1TS_MASK                               0x4
#define _SMT1STAT_SMT1RESET_POSN                            0x5
#define _SMT1STAT_SMT1RESET_POSITION                        0x5
#define _SMT1STAT_SMT1RESET_SIZE                            0x1
#define _SMT1STAT_SMT1RESET_LENGTH                          0x1
#define _SMT1STAT_SMT1RESET_MASK                            0x20
#define _SMT1STAT_SMT1CPWUP_POSN                            0x6
#define _SMT1STAT_SMT1CPWUP_POSITION                        0x6
#define _SMT1STAT_SMT1CPWUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPWUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPWUP_MASK                            0x40
#define _SMT1STAT_SMT1CPRUP_POSN                            0x7
#define _SMT1STAT_SMT1CPRUP_POSITION                        0x7
#define _SMT1STAT_SMT1CPRUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPRUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPRUP_MASK                            0x80
#define _SMT1STAT_SMT1RST_POSN                              0x5
#define _SMT1STAT_SMT1RST_POSITION                          0x5
#define _SMT1STAT_SMT1RST_SIZE                              0x1
#define _SMT1STAT_SMT1RST_LENGTH                            0x1
#define _SMT1STAT_SMT1RST_MASK                              0x20

// Register: SMT1CLK
#define SMT1CLK SMT1CLK
extern volatile unsigned char           SMT1CLK             __at(0x49B);
#ifndef _LIB_BUILD
asm("SMT1CLK equ 049Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :3;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
    };
    struct {
        unsigned SMT1CSEL               :3;
    };
    struct {
        unsigned SMT1CSEL0              :1;
        unsigned SMT1CSEL1              :1;
        unsigned SMT1CSEL2              :1;
    };
} SMT1CLKbits_t;
extern volatile SMT1CLKbits_t SMT1CLKbits __at(0x49B);
// bitfield macros
#define _SMT1CLK_CSEL_POSN                                  0x0
#define _SMT1CLK_CSEL_POSITION                              0x0
#define _SMT1CLK_CSEL_SIZE                                  0x3
#define _SMT1CLK_CSEL_LENGTH                                0x3
#define _SMT1CLK_CSEL_MASK                                  0x7
#define _SMT1CLK_CSEL0_POSN                                 0x0
#define _SMT1CLK_CSEL0_POSITION                             0x0
#define _SMT1CLK_CSEL0_SIZE                                 0x1
#define _SMT1CLK_CSEL0_LENGTH                               0x1
#define _SMT1CLK_CSEL0_MASK                                 0x1
#define _SMT1CLK_CSEL1_POSN                                 0x1
#define _SMT1CLK_CSEL1_POSITION                             0x1
#define _SMT1CLK_CSEL1_SIZE                                 0x1
#define _SMT1CLK_CSEL1_LENGTH                               0x1
#define _SMT1CLK_CSEL1_MASK                                 0x2
#define _SMT1CLK_CSEL2_POSN                                 0x2
#define _SMT1CLK_CSEL2_POSITION                             0x2
#define _SMT1CLK_CSEL2_SIZE                                 0x1
#define _SMT1CLK_CSEL2_LENGTH                               0x1
#define _SMT1CLK_CSEL2_MASK                                 0x4
#define _SMT1CLK_SMT1CSEL_POSN                              0x0
#define _SMT1CLK_SMT1CSEL_POSITION                          0x0
#define _SMT1CLK_SMT1CSEL_SIZE                              0x3
#define _SMT1CLK_SMT1CSEL_LENGTH                            0x3
#define _SMT1CLK_SMT1CSEL_MASK                              0x7
#define _SMT1CLK_SMT1CSEL0_POSN                             0x0
#define _SMT1CLK_SMT1CSEL0_POSITION                         0x0
#define _SMT1CLK_SMT1CSEL0_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL0_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL0_MASK                             0x1
#define _SMT1CLK_SMT1CSEL1_POSN                             0x1
#define _SMT1CLK_SMT1CSEL1_POSITION                         0x1
#define _SMT1CLK_SMT1CSEL1_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL1_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL1_MASK                             0x2
#define _SMT1CLK_SMT1CSEL2_POSN                             0x2
#define _SMT1CLK_SMT1CSEL2_POSITION                         0x2
#define _SMT1CLK_SMT1CSEL2_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL2_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL2_MASK                             0x4

// Register: SMT1SIG
#define SMT1SIG SMT1SIG
extern volatile unsigned char           SMT1SIG             __at(0x49C);
#ifndef _LIB_BUILD
asm("SMT1SIG equ 049Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :5;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
    };
    struct {
        unsigned SMT1SSEL               :5;
    };
    struct {
        unsigned SMT1SSEL0              :1;
        unsigned SMT1SSEL1              :1;
        unsigned SMT1SSEL2              :1;
        unsigned SMT1SSEL3              :1;
        unsigned SMT1SSEL4              :1;
    };
} SMT1SIGbits_t;
extern volatile SMT1SIGbits_t SMT1SIGbits __at(0x49C);
// bitfield macros
#define _SMT1SIG_SSEL_POSN                                  0x0
#define _SMT1SIG_SSEL_POSITION                              0x0
#define _SMT1SIG_SSEL_SIZE                                  0x5
#define _SMT1SIG_SSEL_LENGTH                                0x5
#define _SMT1SIG_SSEL_MASK                                  0x1F
#define _SMT1SIG_SSEL0_POSN                                 0x0
#define _SMT1SIG_SSEL0_POSITION                             0x0
#define _SMT1SIG_SSEL0_SIZE                                 0x1
#define _SMT1SIG_SSEL0_LENGTH                               0x1
#define _SMT1SIG_SSEL0_MASK                                 0x1
#define _SMT1SIG_SSEL1_POSN                                 0x1
#define _SMT1SIG_SSEL1_POSITION                             0x1
#define _SMT1SIG_SSEL1_SIZE                                 0x1
#define _SMT1SIG_SSEL1_LENGTH                               0x1
#define _SMT1SIG_SSEL1_MASK                                 0x2
#define _SMT1SIG_SSEL2_POSN                                 0x2
#define _SMT1SIG_SSEL2_POSITION                             0x2
#define _SMT1SIG_SSEL2_SIZE                                 0x1
#define _SMT1SIG_SSEL2_LENGTH                               0x1
#define _SMT1SIG_SSEL2_MASK                                 0x4
#define _SMT1SIG_SSEL3_POSN                                 0x3
#define _SMT1SIG_SSEL3_POSITION                             0x3
#define _SMT1SIG_SSEL3_SIZE                                 0x1
#define _SMT1SIG_SSEL3_LENGTH                               0x1
#define _SMT1SIG_SSEL3_MASK                                 0x8
#define _SMT1SIG_SSEL4_POSN                                 0x4
#define _SMT1SIG_SSEL4_POSITION                             0x4
#define _SMT1SIG_SSEL4_SIZE                                 0x1
#define _SMT1SIG_SSEL4_LENGTH                               0x1
#define _SMT1SIG_SSEL4_MASK                                 0x10
#define _SMT1SIG_SMT1SSEL_POSN                              0x0
#define _SMT1SIG_SMT1SSEL_POSITION                          0x0
#define _SMT1SIG_SMT1SSEL_SIZE                              0x5
#define _SMT1SIG_SMT1SSEL_LENGTH                            0x5
#define _SMT1SIG_SMT1SSEL_MASK                              0x1F
#define _SMT1SIG_SMT1SSEL0_POSN                             0x0
#define _SMT1SIG_SMT1SSEL0_POSITION                         0x0
#define _SMT1SIG_SMT1SSEL0_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL0_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL0_MASK                             0x1
#define _SMT1SIG_SMT1SSEL1_POSN                             0x1
#define _SMT1SIG_SMT1SSEL1_POSITION                         0x1
#define _SMT1SIG_SMT1SSEL1_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL1_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL1_MASK                             0x2
#define _SMT1SIG_SMT1SSEL2_POSN                             0x2
#define _SMT1SIG_SMT1SSEL2_POSITION                         0x2
#define _SMT1SIG_SMT1SSEL2_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL2_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL2_MASK                             0x4
#define _SMT1SIG_SMT1SSEL3_POSN                             0x3
#define _SMT1SIG_SMT1SSEL3_POSITION                         0x3
#define _SMT1SIG_SMT1SSEL3_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL3_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL3_MASK                             0x8
#define _SMT1SIG_SMT1SSEL4_POSN                             0x4
#define _SMT1SIG_SMT1SSEL4_POSITION                         0x4
#define _SMT1SIG_SMT1SSEL4_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL4_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL4_MASK                             0x10

// Register: SMT1WIN
#define SMT1WIN SMT1WIN
extern volatile unsigned char           SMT1WIN             __at(0x49D);
#ifndef _LIB_BUILD
asm("SMT1WIN equ 049Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :5;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
    };
    struct {
        unsigned SMT1WSEL               :5;
    };
    struct {
        unsigned SMT1WSEL0              :1;
        unsigned SMT1WSEL1              :1;
        unsigned SMT1WSEL2              :1;
        unsigned SMT1WSEL3              :1;
        unsigned SMT1WSEL4              :1;
    };
} SMT1WINbits_t;
extern volatile SMT1WINbits_t SMT1WINbits __at(0x49D);
// bitfield macros
#define _SMT1WIN_WSEL_POSN                                  0x0
#define _SMT1WIN_WSEL_POSITION                              0x0
#define _SMT1WIN_WSEL_SIZE                                  0x5
#define _SMT1WIN_WSEL_LENGTH                                0x5
#define _SMT1WIN_WSEL_MASK                                  0x1F
#define _SMT1WIN_WSEL0_POSN                                 0x0
#define _SMT1WIN_WSEL0_POSITION                             0x0
#define _SMT1WIN_WSEL0_SIZE                                 0x1
#define _SMT1WIN_WSEL0_LENGTH                               0x1
#define _SMT1WIN_WSEL0_MASK                                 0x1
#define _SMT1WIN_WSEL1_POSN                                 0x1
#define _SMT1WIN_WSEL1_POSITION                             0x1
#define _SMT1WIN_WSEL1_SIZE                                 0x1
#define _SMT1WIN_WSEL1_LENGTH                               0x1
#define _SMT1WIN_WSEL1_MASK                                 0x2
#define _SMT1WIN_WSEL2_POSN                                 0x2
#define _SMT1WIN_WSEL2_POSITION                             0x2
#define _SMT1WIN_WSEL2_SIZE                                 0x1
#define _SMT1WIN_WSEL2_LENGTH                               0x1
#define _SMT1WIN_WSEL2_MASK                                 0x4
#define _SMT1WIN_WSEL3_POSN                                 0x3
#define _SMT1WIN_WSEL3_POSITION                             0x3
#define _SMT1WIN_WSEL3_SIZE                                 0x1
#define _SMT1WIN_WSEL3_LENGTH                               0x1
#define _SMT1WIN_WSEL3_MASK                                 0x8
#define _SMT1WIN_WSEL4_POSN                                 0x4
#define _SMT1WIN_WSEL4_POSITION                             0x4
#define _SMT1WIN_WSEL4_SIZE                                 0x1
#define _SMT1WIN_WSEL4_LENGTH                               0x1
#define _SMT1WIN_WSEL4_MASK                                 0x10
#define _SMT1WIN_SMT1WSEL_POSN                              0x0
#define _SMT1WIN_SMT1WSEL_POSITION                          0x0
#define _SMT1WIN_SMT1WSEL_SIZE                              0x5
#define _SMT1WIN_SMT1WSEL_LENGTH                            0x5
#define _SMT1WIN_SMT1WSEL_MASK                              0x1F
#define _SMT1WIN_SMT1WSEL0_POSN                             0x0
#define _SMT1WIN_SMT1WSEL0_POSITION                         0x0
#define _SMT1WIN_SMT1WSEL0_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL0_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL0_MASK                             0x1
#define _SMT1WIN_SMT1WSEL1_POSN                             0x1
#define _SMT1WIN_SMT1WSEL1_POSITION                         0x1
#define _SMT1WIN_SMT1WSEL1_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL1_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL1_MASK                             0x2
#define _SMT1WIN_SMT1WSEL2_POSN                             0x2
#define _SMT1WIN_SMT1WSEL2_POSITION                         0x2
#define _SMT1WIN_SMT1WSEL2_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL2_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL2_MASK                             0x4
#define _SMT1WIN_SMT1WSEL3_POSN                             0x3
#define _SMT1WIN_SMT1WSEL3_POSITION                         0x3
#define _SMT1WIN_SMT1WSEL3_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL3_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL3_MASK                             0x8
#define _SMT1WIN_SMT1WSEL4_POSN                             0x4
#define _SMT1WIN_SMT1WSEL4_POSITION                         0x4
#define _SMT1WIN_SMT1WSEL4_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL4_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL4_MASK                             0x10

// Register: SMT2TMR
#define SMT2TMR SMT2TMR
#ifndef __CCI__
extern volatile __uint24                SMT2TMR             __at(0x50C);
#endif
#ifndef _LIB_BUILD
asm("SMT2TMR equ 050Ch");
#endif

// Register: SMT2TMRL
#define SMT2TMRL SMT2TMRL
extern volatile unsigned char           SMT2TMRL            __at(0x50C);
#ifndef _LIB_BUILD
asm("SMT2TMRL equ 050Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR0                   :1;
        unsigned TMR1                   :1;
        unsigned TMR2                   :1;
        unsigned TMR3                   :1;
        unsigned TMR4                   :1;
        unsigned TMR5                   :1;
        unsigned TMR6                   :1;
        unsigned TMR7                   :1;
    };
    struct {
        unsigned SMT2TMR                :8;
    };
    struct {
        unsigned SMT2TMR0               :1;
        unsigned SMT2TMR1               :1;
        unsigned SMT2TMR2               :1;
        unsigned SMT2TMR3               :1;
        unsigned SMT2TMR4               :1;
        unsigned SMT2TMR5               :1;
        unsigned SMT2TMR6               :1;
        unsigned SMT2TMR7               :1;
    };
} SMT2TMRLbits_t;
extern volatile SMT2TMRLbits_t SMT2TMRLbits __at(0x50C);
// bitfield macros
#define _SMT2TMRL_TMR_POSN                                  0x0
#define _SMT2TMRL_TMR_POSITION                              0x0
#define _SMT2TMRL_TMR_SIZE                                  0x8
#define _SMT2TMRL_TMR_LENGTH                                0x8
#define _SMT2TMRL_TMR_MASK                                  0xFF
#define _SMT2TMRL_TMR0_POSN                                 0x0
#define _SMT2TMRL_TMR0_POSITION                             0x0
#define _SMT2TMRL_TMR0_SIZE                                 0x1
#define _SMT2TMRL_TMR0_LENGTH                               0x1
#define _SMT2TMRL_TMR0_MASK                                 0x1
#define _SMT2TMRL_TMR1_POSN                                 0x1
#define _SMT2TMRL_TMR1_POSITION                             0x1
#define _SMT2TMRL_TMR1_SIZE                                 0x1
#define _SMT2TMRL_TMR1_LENGTH                               0x1
#define _SMT2TMRL_TMR1_MASK                                 0x2
#define _SMT2TMRL_TMR2_POSN                                 0x2
#define _SMT2TMRL_TMR2_POSITION                             0x2
#define _SMT2TMRL_TMR2_SIZE                                 0x1
#define _SMT2TMRL_TMR2_LENGTH                               0x1
#define _SMT2TMRL_TMR2_MASK                                 0x4
#define _SMT2TMRL_TMR3_POSN                                 0x3
#define _SMT2TMRL_TMR3_POSITION                             0x3
#define _SMT2TMRL_TMR3_SIZE                                 0x1
#define _SMT2TMRL_TMR3_LENGTH                               0x1
#define _SMT2TMRL_TMR3_MASK                                 0x8
#define _SMT2TMRL_TMR4_POSN                                 0x4
#define _SMT2TMRL_TMR4_POSITION                             0x4
#define _SMT2TMRL_TMR4_SIZE                                 0x1
#define _SMT2TMRL_TMR4_LENGTH                               0x1
#define _SMT2TMRL_TMR4_MASK                                 0x10
#define _SMT2TMRL_TMR5_POSN                                 0x5
#define _SMT2TMRL_TMR5_POSITION                             0x5
#define _SMT2TMRL_TMR5_SIZE                                 0x1
#define _SMT2TMRL_TMR5_LENGTH                               0x1
#define _SMT2TMRL_TMR5_MASK                                 0x20
#define _SMT2TMRL_TMR6_POSN                                 0x6
#define _SMT2TMRL_TMR6_POSITION                             0x6
#define _SMT2TMRL_TMR6_SIZE                                 0x1
#define _SMT2TMRL_TMR6_LENGTH                               0x1
#define _SMT2TMRL_TMR6_MASK                                 0x40
#define _SMT2TMRL_TMR7_POSN                                 0x7
#define _SMT2TMRL_TMR7_POSITION                             0x7
#define _SMT2TMRL_TMR7_SIZE                                 0x1
#define _SMT2TMRL_TMR7_LENGTH                               0x1
#define _SMT2TMRL_TMR7_MASK                                 0x80
#define _SMT2TMRL_SMT2TMR_POSN                              0x0
#define _SMT2TMRL_SMT2TMR_POSITION                          0x0
#define _SMT2TMRL_SMT2TMR_SIZE                              0x8
#define _SMT2TMRL_SMT2TMR_LENGTH                            0x8
#define _SMT2TMRL_SMT2TMR_MASK                              0xFF
#define _SMT2TMRL_SMT2TMR0_POSN                             0x0
#define _SMT2TMRL_SMT2TMR0_POSITION                         0x0
#define _SMT2TMRL_SMT2TMR0_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR0_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR0_MASK                             0x1
#define _SMT2TMRL_SMT2TMR1_POSN                             0x1
#define _SMT2TMRL_SMT2TMR1_POSITION                         0x1
#define _SMT2TMRL_SMT2TMR1_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR1_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR1_MASK                             0x2
#define _SMT2TMRL_SMT2TMR2_POSN                             0x2
#define _SMT2TMRL_SMT2TMR2_POSITION                         0x2
#define _SMT2TMRL_SMT2TMR2_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR2_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR2_MASK                             0x4
#define _SMT2TMRL_SMT2TMR3_POSN                             0x3
#define _SMT2TMRL_SMT2TMR3_POSITION                         0x3
#define _SMT2TMRL_SMT2TMR3_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR3_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR3_MASK                             0x8
#define _SMT2TMRL_SMT2TMR4_POSN                             0x4
#define _SMT2TMRL_SMT2TMR4_POSITION                         0x4
#define _SMT2TMRL_SMT2TMR4_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR4_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR4_MASK                             0x10
#define _SMT2TMRL_SMT2TMR5_POSN                             0x5
#define _SMT2TMRL_SMT2TMR5_POSITION                         0x5
#define _SMT2TMRL_SMT2TMR5_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR5_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR5_MASK                             0x20
#define _SMT2TMRL_SMT2TMR6_POSN                             0x6
#define _SMT2TMRL_SMT2TMR6_POSITION                         0x6
#define _SMT2TMRL_SMT2TMR6_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR6_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR6_MASK                             0x40
#define _SMT2TMRL_SMT2TMR7_POSN                             0x7
#define _SMT2TMRL_SMT2TMR7_POSITION                         0x7
#define _SMT2TMRL_SMT2TMR7_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR7_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR7_MASK                             0x80

// Register: SMT2TMRH
#define SMT2TMRH SMT2TMRH
extern volatile unsigned char           SMT2TMRH            __at(0x50D);
#ifndef _LIB_BUILD
asm("SMT2TMRH equ 050Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR8                   :1;
        unsigned TMR9                   :1;
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
    };
    struct {
        unsigned SMT2TMR                :8;
    };
    struct {
        unsigned SMT2TMR8               :1;
        unsigned SMT2TMR9               :1;
        unsigned SMT2TMR10              :1;
        unsigned SMT2TMR11              :1;
        unsigned SMT2TMR12              :1;
        unsigned SMT2TMR13              :1;
        unsigned SMT2TMR14              :1;
        unsigned SMT2TMR15              :1;
    };
} SMT2TMRHbits_t;
extern volatile SMT2TMRHbits_t SMT2TMRHbits __at(0x50D);
// bitfield macros
#define _SMT2TMRH_TMR_POSN                                  0x0
#define _SMT2TMRH_TMR_POSITION                              0x0
#define _SMT2TMRH_TMR_SIZE                                  0x8
#define _SMT2TMRH_TMR_LENGTH                                0x8
#define _SMT2TMRH_TMR_MASK                                  0xFF
#define _SMT2TMRH_TMR8_POSN                                 0x0
#define _SMT2TMRH_TMR8_POSITION                             0x0
#define _SMT2TMRH_TMR8_SIZE                                 0x1
#define _SMT2TMRH_TMR8_LENGTH                               0x1
#define _SMT2TMRH_TMR8_MASK                                 0x1
#define _SMT2TMRH_TMR9_POSN                                 0x1
#define _SMT2TMRH_TMR9_POSITION                             0x1
#define _SMT2TMRH_TMR9_SIZE                                 0x1
#define _SMT2TMRH_TMR9_LENGTH                               0x1
#define _SMT2TMRH_TMR9_MASK                                 0x2
#define _SMT2TMRH_TMR10_POSN                                0x2
#define _SMT2TMRH_TMR10_POSITION                            0x2
#define _SMT2TMRH_TMR10_SIZE                                0x1
#define _SMT2TMRH_TMR10_LENGTH                              0x1
#define _SMT2TMRH_TMR10_MASK                                0x4
#define _SMT2TMRH_TMR11_POSN                                0x3
#define _SMT2TMRH_TMR11_POSITION                            0x3
#define _SMT2TMRH_TMR11_SIZE                                0x1
#define _SMT2TMRH_TMR11_LENGTH                              0x1
#define _SMT2TMRH_TMR11_MASK                                0x8
#define _SMT2TMRH_TMR12_POSN                                0x4
#define _SMT2TMRH_TMR12_POSITION                            0x4
#define _SMT2TMRH_TMR12_SIZE                                0x1
#define _SMT2TMRH_TMR12_LENGTH                              0x1
#define _SMT2TMRH_TMR12_MASK                                0x10
#define _SMT2TMRH_TMR13_POSN                                0x5
#define _SMT2TMRH_TMR13_POSITION                            0x5
#define _SMT2TMRH_TMR13_SIZE                                0x1
#define _SMT2TMRH_TMR13_LENGTH                              0x1
#define _SMT2TMRH_TMR13_MASK                                0x20
#define _SMT2TMRH_TMR14_POSN                                0x6
#define _SMT2TMRH_TMR14_POSITION                            0x6
#define _SMT2TMRH_TMR14_SIZE                                0x1
#define _SMT2TMRH_TMR14_LENGTH                              0x1
#define _SMT2TMRH_TMR14_MASK                                0x40
#define _SMT2TMRH_TMR15_POSN                                0x7
#define _SMT2TMRH_TMR15_POSITION                            0x7
#define _SMT2TMRH_TMR15_SIZE                                0x1
#define _SMT2TMRH_TMR15_LENGTH                              0x1
#define _SMT2TMRH_TMR15_MASK                                0x80
#define _SMT2TMRH_SMT2TMR_POSN                              0x0
#define _SMT2TMRH_SMT2TMR_POSITION                          0x0
#define _SMT2TMRH_SMT2TMR_SIZE                              0x8
#define _SMT2TMRH_SMT2TMR_LENGTH                            0x8
#define _SMT2TMRH_SMT2TMR_MASK                              0xFF
#define _SMT2TMRH_SMT2TMR8_POSN                             0x0
#define _SMT2TMRH_SMT2TMR8_POSITION                         0x0
#define _SMT2TMRH_SMT2TMR8_SIZE                             0x1
#define _SMT2TMRH_SMT2TMR8_LENGTH                           0x1
#define _SMT2TMRH_SMT2TMR8_MASK                             0x1
#define _SMT2TMRH_SMT2TMR9_POSN                             0x1
#define _SMT2TMRH_SMT2TMR9_POSITION                         0x1
#define _SMT2TMRH_SMT2TMR9_SIZE                             0x1
#define _SMT2TMRH_SMT2TMR9_LENGTH                           0x1
#define _SMT2TMRH_SMT2TMR9_MASK                             0x2
#define _SMT2TMRH_SMT2TMR10_POSN                            0x2
#define _SMT2TMRH_SMT2TMR10_POSITION                        0x2
#define _SMT2TMRH_SMT2TMR10_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR10_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR10_MASK                            0x4
#define _SMT2TMRH_SMT2TMR11_POSN                            0x3
#define _SMT2TMRH_SMT2TMR11_POSITION                        0x3
#define _SMT2TMRH_SMT2TMR11_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR11_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR11_MASK                            0x8
#define _SMT2TMRH_SMT2TMR12_POSN                            0x4
#define _SMT2TMRH_SMT2TMR12_POSITION                        0x4
#define _SMT2TMRH_SMT2TMR12_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR12_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR12_MASK                            0x10
#define _SMT2TMRH_SMT2TMR13_POSN                            0x5
#define _SMT2TMRH_SMT2TMR13_POSITION                        0x5
#define _SMT2TMRH_SMT2TMR13_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR13_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR13_MASK                            0x20
#define _SMT2TMRH_SMT2TMR14_POSN                            0x6
#define _SMT2TMRH_SMT2TMR14_POSITION                        0x6
#define _SMT2TMRH_SMT2TMR14_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR14_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR14_MASK                            0x40
#define _SMT2TMRH_SMT2TMR15_POSN                            0x7
#define _SMT2TMRH_SMT2TMR15_POSITION                        0x7
#define _SMT2TMRH_SMT2TMR15_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR15_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR15_MASK                            0x80

// Register: SMT2TMRU
#define SMT2TMRU SMT2TMRU
extern volatile unsigned char           SMT2TMRU            __at(0x50E);
#ifndef _LIB_BUILD
asm("SMT2TMRU equ 050Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR20                  :1;
        unsigned TMR21                  :1;
        unsigned TMR22                  :1;
        unsigned TMR23                  :1;
    };
    struct {
        unsigned SMT2TMR                :8;
    };
    struct {
        unsigned SMT2TMR16              :1;
        unsigned SMT2TMR17              :1;
        unsigned SMT2TMR18              :1;
        unsigned SMT2TMR19              :1;
        unsigned SMT2TMR20              :1;
        unsigned SMT2TMR21              :1;
        unsigned SMT2TMR22              :1;
        unsigned SMT2TMR23              :1;
    };
} SMT2TMRUbits_t;
extern volatile SMT2TMRUbits_t SMT2TMRUbits __at(0x50E);
// bitfield macros
#define _SMT2TMRU_TMR_POSN                                  0x0
#define _SMT2TMRU_TMR_POSITION                              0x0
#define _SMT2TMRU_TMR_SIZE                                  0x8
#define _SMT2TMRU_TMR_LENGTH                                0x8
#define _SMT2TMRU_TMR_MASK                                  0xFF
#define _SMT2TMRU_TMR16_POSN                                0x0
#define _SMT2TMRU_TMR16_POSITION                            0x0
#define _SMT2TMRU_TMR16_SIZE                                0x1
#define _SMT2TMRU_TMR16_LENGTH                              0x1
#define _SMT2TMRU_TMR16_MASK                                0x1
#define _SMT2TMRU_TMR17_POSN                                0x1
#define _SMT2TMRU_TMR17_POSITION                            0x1
#define _SMT2TMRU_TMR17_SIZE                                0x1
#define _SMT2TMRU_TMR17_LENGTH                              0x1
#define _SMT2TMRU_TMR17_MASK                                0x2
#define _SMT2TMRU_TMR18_POSN                                0x2
#define _SMT2TMRU_TMR18_POSITION                            0x2
#define _SMT2TMRU_TMR18_SIZE                                0x1
#define _SMT2TMRU_TMR18_LENGTH                              0x1
#define _SMT2TMRU_TMR18_MASK                                0x4
#define _SMT2TMRU_TMR19_POSN                                0x3
#define _SMT2TMRU_TMR19_POSITION                            0x3
#define _SMT2TMRU_TMR19_SIZE                                0x1
#define _SMT2TMRU_TMR19_LENGTH                              0x1
#define _SMT2TMRU_TMR19_MASK                                0x8
#define _SMT2TMRU_TMR20_POSN                                0x4
#define _SMT2TMRU_TMR20_POSITION                            0x4
#define _SMT2TMRU_TMR20_SIZE                                0x1
#define _SMT2TMRU_TMR20_LENGTH                              0x1
#define _SMT2TMRU_TMR20_MASK                                0x10
#define _SMT2TMRU_TMR21_POSN                                0x5
#define _SMT2TMRU_TMR21_POSITION                            0x5
#define _SMT2TMRU_TMR21_SIZE                                0x1
#define _SMT2TMRU_TMR21_LENGTH                              0x1
#define _SMT2TMRU_TMR21_MASK                                0x20
#define _SMT2TMRU_TMR22_POSN                                0x6
#define _SMT2TMRU_TMR22_POSITION                            0x6
#define _SMT2TMRU_TMR22_SIZE                                0x1
#define _SMT2TMRU_TMR22_LENGTH                              0x1
#define _SMT2TMRU_TMR22_MASK                                0x40
#define _SMT2TMRU_TMR23_POSN                                0x7
#define _SMT2TMRU_TMR23_POSITION                            0x7
#define _SMT2TMRU_TMR23_SIZE                                0x1
#define _SMT2TMRU_TMR23_LENGTH                              0x1
#define _SMT2TMRU_TMR23_MASK                                0x80
#define _SMT2TMRU_SMT2TMR_POSN                              0x0
#define _SMT2TMRU_SMT2TMR_POSITION                          0x0
#define _SMT2TMRU_SMT2TMR_SIZE                              0x8
#define _SMT2TMRU_SMT2TMR_LENGTH                            0x8
#define _SMT2TMRU_SMT2TMR_MASK                              0xFF
#define _SMT2TMRU_SMT2TMR16_POSN                            0x0
#define _SMT2TMRU_SMT2TMR16_POSITION                        0x0
#define _SMT2TMRU_SMT2TMR16_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR16_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR16_MASK                            0x1
#define _SMT2TMRU_SMT2TMR17_POSN                            0x1
#define _SMT2TMRU_SMT2TMR17_POSITION                        0x1
#define _SMT2TMRU_SMT2TMR17_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR17_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR17_MASK                            0x2
#define _SMT2TMRU_SMT2TMR18_POSN                            0x2
#define _SMT2TMRU_SMT2TMR18_POSITION                        0x2
#define _SMT2TMRU_SMT2TMR18_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR18_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR18_MASK                            0x4
#define _SMT2TMRU_SMT2TMR19_POSN                            0x3
#define _SMT2TMRU_SMT2TMR19_POSITION                        0x3
#define _SMT2TMRU_SMT2TMR19_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR19_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR19_MASK                            0x8
#define _SMT2TMRU_SMT2TMR20_POSN                            0x4
#define _SMT2TMRU_SMT2TMR20_POSITION                        0x4
#define _SMT2TMRU_SMT2TMR20_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR20_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR20_MASK                            0x10
#define _SMT2TMRU_SMT2TMR21_POSN                            0x5
#define _SMT2TMRU_SMT2TMR21_POSITION                        0x5
#define _SMT2TMRU_SMT2TMR21_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR21_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR21_MASK                            0x20
#define _SMT2TMRU_SMT2TMR22_POSN                            0x6
#define _SMT2TMRU_SMT2TMR22_POSITION                        0x6
#define _SMT2TMRU_SMT2TMR22_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR22_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR22_MASK                            0x40
#define _SMT2TMRU_SMT2TMR23_POSN                            0x7
#define _SMT2TMRU_SMT2TMR23_POSITION                        0x7
#define _SMT2TMRU_SMT2TMR23_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR23_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR23_MASK                            0x80

// Register: SMT2CPR
#define SMT2CPR SMT2CPR
#ifndef __CCI__
extern volatile __uint24                SMT2CPR             __at(0x50F);
#endif
#ifndef _LIB_BUILD
asm("SMT2CPR equ 050Fh");
#endif

// Register: SMT2CPRL
#define SMT2CPRL SMT2CPRL
extern volatile unsigned char           SMT2CPRL            __at(0x50F);
#ifndef _LIB_BUILD
asm("SMT2CPRL equ 050Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR0                   :1;
        unsigned CPR1                   :1;
        unsigned CPR2                   :1;
        unsigned CPR3                   :1;
        unsigned CPR4                   :1;
        unsigned CPR5                   :1;
        unsigned CPR6                   :1;
        unsigned CPR7                   :1;
    };
    struct {
        unsigned SMT2CPR                :8;
    };
    struct {
        unsigned SMT2CPR0               :1;
        unsigned SMT2CPR1               :1;
        unsigned SMT2CPR2               :1;
        unsigned SMT2CPR3               :1;
        unsigned SMT2CPR4               :1;
        unsigned SMT2CPR5               :1;
        unsigned SMT2CPR6               :1;
        unsigned SMT2CPR7               :1;
    };
} SMT2CPRLbits_t;
extern volatile SMT2CPRLbits_t SMT2CPRLbits __at(0x50F);
// bitfield macros
#define _SMT2CPRL_CPR_POSN                                  0x0
#define _SMT2CPRL_CPR_POSITION                              0x0
#define _SMT2CPRL_CPR_SIZE                                  0x8
#define _SMT2CPRL_CPR_LENGTH                                0x8
#define _SMT2CPRL_CPR_MASK                                  0xFF
#define _SMT2CPRL_CPR0_POSN                                 0x0
#define _SMT2CPRL_CPR0_POSITION                             0x0
#define _SMT2CPRL_CPR0_SIZE                                 0x1
#define _SMT2CPRL_CPR0_LENGTH                               0x1
#define _SMT2CPRL_CPR0_MASK                                 0x1
#define _SMT2CPRL_CPR1_POSN                                 0x1
#define _SMT2CPRL_CPR1_POSITION                             0x1
#define _SMT2CPRL_CPR1_SIZE                                 0x1
#define _SMT2CPRL_CPR1_LENGTH                               0x1
#define _SMT2CPRL_CPR1_MASK                                 0x2
#define _SMT2CPRL_CPR2_POSN                                 0x2
#define _SMT2CPRL_CPR2_POSITION                             0x2
#define _SMT2CPRL_CPR2_SIZE                                 0x1
#define _SMT2CPRL_CPR2_LENGTH                               0x1
#define _SMT2CPRL_CPR2_MASK                                 0x4
#define _SMT2CPRL_CPR3_POSN                                 0x3
#define _SMT2CPRL_CPR3_POSITION                             0x3
#define _SMT2CPRL_CPR3_SIZE                                 0x1
#define _SMT2CPRL_CPR3_LENGTH                               0x1
#define _SMT2CPRL_CPR3_MASK                                 0x8
#define _SMT2CPRL_CPR4_POSN                                 0x4
#define _SMT2CPRL_CPR4_POSITION                             0x4
#define _SMT2CPRL_CPR4_SIZE                                 0x1
#define _SMT2CPRL_CPR4_LENGTH                               0x1
#define _SMT2CPRL_CPR4_MASK                                 0x10
#define _SMT2CPRL_CPR5_POSN                                 0x5
#define _SMT2CPRL_CPR5_POSITION                             0x5
#define _SMT2CPRL_CPR5_SIZE                                 0x1
#define _SMT2CPRL_CPR5_LENGTH                               0x1
#define _SMT2CPRL_CPR5_MASK                                 0x20
#define _SMT2CPRL_CPR6_POSN                                 0x6
#define _SMT2CPRL_CPR6_POSITION                             0x6
#define _SMT2CPRL_CPR6_SIZE                                 0x1
#define _SMT2CPRL_CPR6_LENGTH                               0x1
#define _SMT2CPRL_CPR6_MASK                                 0x40
#define _SMT2CPRL_CPR7_POSN                                 0x7
#define _SMT2CPRL_CPR7_POSITION                             0x7
#define _SMT2CPRL_CPR7_SIZE                                 0x1
#define _SMT2CPRL_CPR7_LENGTH                               0x1
#define _SMT2CPRL_CPR7_MASK                                 0x80
#define _SMT2CPRL_SMT2CPR_POSN                              0x0
#define _SMT2CPRL_SMT2CPR_POSITION                          0x0
#define _SMT2CPRL_SMT2CPR_SIZE                              0x8
#define _SMT2CPRL_SMT2CPR_LENGTH                            0x8
#define _SMT2CPRL_SMT2CPR_MASK                              0xFF
#define _SMT2CPRL_SMT2CPR0_POSN                             0x0
#define _SMT2CPRL_SMT2CPR0_POSITION                         0x0
#define _SMT2CPRL_SMT2CPR0_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR0_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR0_MASK                             0x1
#define _SMT2CPRL_SMT2CPR1_POSN                             0x1
#define _SMT2CPRL_SMT2CPR1_POSITION                         0x1
#define _SMT2CPRL_SMT2CPR1_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR1_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR1_MASK                             0x2
#define _SMT2CPRL_SMT2CPR2_POSN                             0x2
#define _SMT2CPRL_SMT2CPR2_POSITION                         0x2
#define _SMT2CPRL_SMT2CPR2_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR2_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR2_MASK                             0x4
#define _SMT2CPRL_SMT2CPR3_POSN                             0x3
#define _SMT2CPRL_SMT2CPR3_POSITION                         0x3
#define _SMT2CPRL_SMT2CPR3_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR3_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR3_MASK                             0x8
#define _SMT2CPRL_SMT2CPR4_POSN                             0x4
#define _SMT2CPRL_SMT2CPR4_POSITION                         0x4
#define _SMT2CPRL_SMT2CPR4_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR4_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR4_MASK                             0x10
#define _SMT2CPRL_SMT2CPR5_POSN                             0x5
#define _SMT2CPRL_SMT2CPR5_POSITION                         0x5
#define _SMT2CPRL_SMT2CPR5_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR5_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR5_MASK                             0x20
#define _SMT2CPRL_SMT2CPR6_POSN                             0x6
#define _SMT2CPRL_SMT2CPR6_POSITION                         0x6
#define _SMT2CPRL_SMT2CPR6_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR6_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR6_MASK                             0x40
#define _SMT2CPRL_SMT2CPR7_POSN                             0x7
#define _SMT2CPRL_SMT2CPR7_POSITION                         0x7
#define _SMT2CPRL_SMT2CPR7_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR7_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR7_MASK                             0x80

// Register: SMT2CPRH
#define SMT2CPRH SMT2CPRH
extern volatile unsigned char           SMT2CPRH            __at(0x510);
#ifndef _LIB_BUILD
asm("SMT2CPRH equ 0510h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR8                   :1;
        unsigned CPR9                   :1;
        unsigned CPR10                  :1;
        unsigned CPR11                  :1;
        unsigned CPR12                  :1;
        unsigned CPR13                  :1;
        unsigned CPR14                  :1;
        unsigned CPR15                  :1;
    };
    struct {
        unsigned SMT2CPR8               :1;
        unsigned SMT2CPR9               :1;
        unsigned SMT2CPR10              :1;
        unsigned SMT2CPR11              :1;
        unsigned SMT2CPR12              :1;
        unsigned SMT2CPR13              :1;
        unsigned SMT2CPR14              :1;
        unsigned SMT2CPR15              :1;
    };
    struct {
        unsigned SMT2CPR                :8;
    };
} SMT2CPRHbits_t;
extern volatile SMT2CPRHbits_t SMT2CPRHbits __at(0x510);
// bitfield macros
#define _SMT2CPRH_CPR_POSN                                  0x0
#define _SMT2CPRH_CPR_POSITION                              0x0
#define _SMT2CPRH_CPR_SIZE                                  0x8
#define _SMT2CPRH_CPR_LENGTH                                0x8
#define _SMT2CPRH_CPR_MASK                                  0xFF
#define _SMT2CPRH_CPR8_POSN                                 0x0
#define _SMT2CPRH_CPR8_POSITION                             0x0
#define _SMT2CPRH_CPR8_SIZE                                 0x1
#define _SMT2CPRH_CPR8_LENGTH                               0x1
#define _SMT2CPRH_CPR8_MASK                                 0x1
#define _SMT2CPRH_CPR9_POSN                                 0x1
#define _SMT2CPRH_CPR9_POSITION                             0x1
#define _SMT2CPRH_CPR9_SIZE                                 0x1
#define _SMT2CPRH_CPR9_LENGTH                               0x1
#define _SMT2CPRH_CPR9_MASK                                 0x2
#define _SMT2CPRH_CPR10_POSN                                0x2
#define _SMT2CPRH_CPR10_POSITION                            0x2
#define _SMT2CPRH_CPR10_SIZE                                0x1
#define _SMT2CPRH_CPR10_LENGTH                              0x1
#define _SMT2CPRH_CPR10_MASK                                0x4
#define _SMT2CPRH_CPR11_POSN                                0x3
#define _SMT2CPRH_CPR11_POSITION                            0x3
#define _SMT2CPRH_CPR11_SIZE                                0x1
#define _SMT2CPRH_CPR11_LENGTH                              0x1
#define _SMT2CPRH_CPR11_MASK                                0x8
#define _SMT2CPRH_CPR12_POSN                                0x4
#define _SMT2CPRH_CPR12_POSITION                            0x4
#define _SMT2CPRH_CPR12_SIZE                                0x1
#define _SMT2CPRH_CPR12_LENGTH                              0x1
#define _SMT2CPRH_CPR12_MASK                                0x10
#define _SMT2CPRH_CPR13_POSN                                0x5
#define _SMT2CPRH_CPR13_POSITION                            0x5
#define _SMT2CPRH_CPR13_SIZE                                0x1
#define _SMT2CPRH_CPR13_LENGTH                              0x1
#define _SMT2CPRH_CPR13_MASK                                0x20
#define _SMT2CPRH_CPR14_POSN                                0x6
#define _SMT2CPRH_CPR14_POSITION                            0x6
#define _SMT2CPRH_CPR14_SIZE                                0x1
#define _SMT2CPRH_CPR14_LENGTH                              0x1
#define _SMT2CPRH_CPR14_MASK                                0x40
#define _SMT2CPRH_CPR15_POSN                                0x7
#define _SMT2CPRH_CPR15_POSITION                            0x7
#define _SMT2CPRH_CPR15_SIZE                                0x1
#define _SMT2CPRH_CPR15_LENGTH                              0x1
#define _SMT2CPRH_CPR15_MASK                                0x80
#define _SMT2CPRH_SMT2CPR8_POSN                             0x0
#define _SMT2CPRH_SMT2CPR8_POSITION                         0x0
#define _SMT2CPRH_SMT2CPR8_SIZE                             0x1
#define _SMT2CPRH_SMT2CPR8_LENGTH                           0x1
#define _SMT2CPRH_SMT2CPR8_MASK                             0x1
#define _SMT2CPRH_SMT2CPR9_POSN                             0x1
#define _SMT2CPRH_SMT2CPR9_POSITION                         0x1
#define _SMT2CPRH_SMT2CPR9_SIZE                             0x1
#define _SMT2CPRH_SMT2CPR9_LENGTH                           0x1
#define _SMT2CPRH_SMT2CPR9_MASK                             0x2
#define _SMT2CPRH_SMT2CPR10_POSN                            0x2
#define _SMT2CPRH_SMT2CPR10_POSITION                        0x2
#define _SMT2CPRH_SMT2CPR10_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR10_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR10_MASK                            0x4
#define _SMT2CPRH_SMT2CPR11_POSN                            0x3
#define _SMT2CPRH_SMT2CPR11_POSITION                        0x3
#define _SMT2CPRH_SMT2CPR11_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR11_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR11_MASK                            0x8
#define _SMT2CPRH_SMT2CPR12_POSN                            0x4
#define _SMT2CPRH_SMT2CPR12_POSITION                        0x4
#define _SMT2CPRH_SMT2CPR12_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR12_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR12_MASK                            0x10
#define _SMT2CPRH_SMT2CPR13_POSN                            0x5
#define _SMT2CPRH_SMT2CPR13_POSITION                        0x5
#define _SMT2CPRH_SMT2CPR13_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR13_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR13_MASK                            0x20
#define _SMT2CPRH_SMT2CPR14_POSN                            0x6
#define _SMT2CPRH_SMT2CPR14_POSITION                        0x6
#define _SMT2CPRH_SMT2CPR14_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR14_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR14_MASK                            0x40
#define _SMT2CPRH_SMT2CPR15_POSN                            0x7
#define _SMT2CPRH_SMT2CPR15_POSITION                        0x7
#define _SMT2CPRH_SMT2CPR15_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR15_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR15_MASK                            0x80
#define _SMT2CPRH_SMT2CPR_POSN                              0x0
#define _SMT2CPRH_SMT2CPR_POSITION                          0x0
#define _SMT2CPRH_SMT2CPR_SIZE                              0x8
#define _SMT2CPRH_SMT2CPR_LENGTH                            0x8
#define _SMT2CPRH_SMT2CPR_MASK                              0xFF

// Register: SMT2CPRU
#define SMT2CPRU SMT2CPRU
extern volatile unsigned char           SMT2CPRU            __at(0x511);
#ifndef _LIB_BUILD
asm("SMT2CPRU equ 0511h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR16                  :1;
        unsigned CPR17                  :1;
        unsigned CPR18                  :1;
        unsigned CPR19                  :1;
        unsigned CPR20                  :1;
        unsigned CPR21                  :1;
        unsigned CPR22                  :1;
        unsigned CPR23                  :1;
    };
    struct {
        unsigned SMT2CPR16              :1;
        unsigned SMT2CPR17              :1;
        unsigned SMT2CPR18              :1;
        unsigned SMT2CPR19              :1;
        unsigned SMT2CPR20              :1;
        unsigned SMT2CPR21              :1;
        unsigned SMT2CPR22              :1;
        unsigned SMT2CPR23              :1;
    };
    struct {
        unsigned SMT2CPR                :8;
    };
} SMT2CPRUbits_t;
extern volatile SMT2CPRUbits_t SMT2CPRUbits __at(0x511);
// bitfield macros
#define _SMT2CPRU_CPR_POSN                                  0x0
#define _SMT2CPRU_CPR_POSITION                              0x0
#define _SMT2CPRU_CPR_SIZE                                  0x8
#define _SMT2CPRU_CPR_LENGTH                                0x8
#define _SMT2CPRU_CPR_MASK                                  0xFF
#define _SMT2CPRU_CPR16_POSN                                0x0
#define _SMT2CPRU_CPR16_POSITION                            0x0
#define _SMT2CPRU_CPR16_SIZE                                0x1
#define _SMT2CPRU_CPR16_LENGTH                              0x1
#define _SMT2CPRU_CPR16_MASK                                0x1
#define _SMT2CPRU_CPR17_POSN                                0x1
#define _SMT2CPRU_CPR17_POSITION                            0x1
#define _SMT2CPRU_CPR17_SIZE                                0x1
#define _SMT2CPRU_CPR17_LENGTH                              0x1
#define _SMT2CPRU_CPR17_MASK                                0x2
#define _SMT2CPRU_CPR18_POSN                                0x2
#define _SMT2CPRU_CPR18_POSITION                            0x2
#define _SMT2CPRU_CPR18_SIZE                                0x1
#define _SMT2CPRU_CPR18_LENGTH                              0x1
#define _SMT2CPRU_CPR18_MASK                                0x4
#define _SMT2CPRU_CPR19_POSN                                0x3
#define _SMT2CPRU_CPR19_POSITION                            0x3
#define _SMT2CPRU_CPR19_SIZE                                0x1
#define _SMT2CPRU_CPR19_LENGTH                              0x1
#define _SMT2CPRU_CPR19_MASK                                0x8
#define _SMT2CPRU_CPR20_POSN                                0x4
#define _SMT2CPRU_CPR20_POSITION                            0x4
#define _SMT2CPRU_CPR20_SIZE                                0x1
#define _SMT2CPRU_CPR20_LENGTH                              0x1
#define _SMT2CPRU_CPR20_MASK                                0x10
#define _SMT2CPRU_CPR21_POSN                                0x5
#define _SMT2CPRU_CPR21_POSITION                            0x5
#define _SMT2CPRU_CPR21_SIZE                                0x1
#define _SMT2CPRU_CPR21_LENGTH                              0x1
#define _SMT2CPRU_CPR21_MASK                                0x20
#define _SMT2CPRU_CPR22_POSN                                0x6
#define _SMT2CPRU_CPR22_POSITION                            0x6
#define _SMT2CPRU_CPR22_SIZE                                0x1
#define _SMT2CPRU_CPR22_LENGTH                              0x1
#define _SMT2CPRU_CPR22_MASK                                0x40
#define _SMT2CPRU_CPR23_POSN                                0x7
#define _SMT2CPRU_CPR23_POSITION                            0x7
#define _SMT2CPRU_CPR23_SIZE                                0x1
#define _SMT2CPRU_CPR23_LENGTH                              0x1
#define _SMT2CPRU_CPR23_MASK                                0x80
#define _SMT2CPRU_SMT2CPR16_POSN                            0x0
#define _SMT2CPRU_SMT2CPR16_POSITION                        0x0
#define _SMT2CPRU_SMT2CPR16_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR16_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR16_MASK                            0x1
#define _SMT2CPRU_SMT2CPR17_POSN                            0x1
#define _SMT2CPRU_SMT2CPR17_POSITION                        0x1
#define _SMT2CPRU_SMT2CPR17_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR17_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR17_MASK                            0x2
#define _SMT2CPRU_SMT2CPR18_POSN                            0x2
#define _SMT2CPRU_SMT2CPR18_POSITION                        0x2
#define _SMT2CPRU_SMT2CPR18_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR18_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR18_MASK                            0x4
#define _SMT2CPRU_SMT2CPR19_POSN                            0x3
#define _SMT2CPRU_SMT2CPR19_POSITION                        0x3
#define _SMT2CPRU_SMT2CPR19_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR19_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR19_MASK                            0x8
#define _SMT2CPRU_SMT2CPR20_POSN                            0x4
#define _SMT2CPRU_SMT2CPR20_POSITION                        0x4
#define _SMT2CPRU_SMT2CPR20_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR20_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR20_MASK                            0x10
#define _SMT2CPRU_SMT2CPR21_POSN                            0x5
#define _SMT2CPRU_SMT2CPR21_POSITION                        0x5
#define _SMT2CPRU_SMT2CPR21_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR21_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR21_MASK                            0x20
#define _SMT2CPRU_SMT2CPR22_POSN                            0x6
#define _SMT2CPRU_SMT2CPR22_POSITION                        0x6
#define _SMT2CPRU_SMT2CPR22_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR22_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR22_MASK                            0x40
#define _SMT2CPRU_SMT2CPR23_POSN                            0x7
#define _SMT2CPRU_SMT2CPR23_POSITION                        0x7
#define _SMT2CPRU_SMT2CPR23_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR23_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR23_MASK                            0x80
#define _SMT2CPRU_SMT2CPR_POSN                              0x0
#define _SMT2CPRU_SMT2CPR_POSITION                          0x0
#define _SMT2CPRU_SMT2CPR_SIZE                              0x8
#define _SMT2CPRU_SMT2CPR_LENGTH                            0x8
#define _SMT2CPRU_SMT2CPR_MASK                              0xFF

// Register: SMT2CPW
#define SMT2CPW SMT2CPW
#ifndef __CCI__
extern volatile __uint24                SMT2CPW             __at(0x512);
#endif
#ifndef _LIB_BUILD
asm("SMT2CPW equ 0512h");
#endif

// Register: SMT2CPWL
#define SMT2CPWL SMT2CPWL
extern volatile unsigned char           SMT2CPWL            __at(0x512);
#ifndef _LIB_BUILD
asm("SMT2CPWL equ 0512h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW0                   :1;
        unsigned CPW1                   :1;
        unsigned CPW2                   :1;
        unsigned CPW3                   :1;
        unsigned CPW4                   :1;
        unsigned CPW5                   :1;
        unsigned CPW6                   :1;
        unsigned CPW7                   :1;
    };
    struct {
        unsigned SMT2CPW                :8;
    };
    struct {
        unsigned SMT2CPW0               :1;
        unsigned SMT2CPW1               :1;
        unsigned SMT2CPW2               :1;
        unsigned SMT2CPW3               :1;
        unsigned SMT2CPW4               :1;
        unsigned SMT2CPW5               :1;
        unsigned SMT2CPW6               :1;
        unsigned SMT2CPW7               :1;
    };
} SMT2CPWLbits_t;
extern volatile SMT2CPWLbits_t SMT2CPWLbits __at(0x512);
// bitfield macros
#define _SMT2CPWL_CPW_POSN                                  0x0
#define _SMT2CPWL_CPW_POSITION                              0x0
#define _SMT2CPWL_CPW_SIZE                                  0x8
#define _SMT2CPWL_CPW_LENGTH                                0x8
#define _SMT2CPWL_CPW_MASK                                  0xFF
#define _SMT2CPWL_CPW0_POSN                                 0x0
#define _SMT2CPWL_CPW0_POSITION                             0x0
#define _SMT2CPWL_CPW0_SIZE                                 0x1
#define _SMT2CPWL_CPW0_LENGTH                               0x1
#define _SMT2CPWL_CPW0_MASK                                 0x1
#define _SMT2CPWL_CPW1_POSN                                 0x1
#define _SMT2CPWL_CPW1_POSITION                             0x1
#define _SMT2CPWL_CPW1_SIZE                                 0x1
#define _SMT2CPWL_CPW1_LENGTH                               0x1
#define _SMT2CPWL_CPW1_MASK                                 0x2
#define _SMT2CPWL_CPW2_POSN                                 0x2
#define _SMT2CPWL_CPW2_POSITION                             0x2
#define _SMT2CPWL_CPW2_SIZE                                 0x1
#define _SMT2CPWL_CPW2_LENGTH                               0x1
#define _SMT2CPWL_CPW2_MASK                                 0x4
#define _SMT2CPWL_CPW3_POSN                                 0x3
#define _SMT2CPWL_CPW3_POSITION                             0x3
#define _SMT2CPWL_CPW3_SIZE                                 0x1
#define _SMT2CPWL_CPW3_LENGTH                               0x1
#define _SMT2CPWL_CPW3_MASK                                 0x8
#define _SMT2CPWL_CPW4_POSN                                 0x4
#define _SMT2CPWL_CPW4_POSITION                             0x4
#define _SMT2CPWL_CPW4_SIZE                                 0x1
#define _SMT2CPWL_CPW4_LENGTH                               0x1
#define _SMT2CPWL_CPW4_MASK                                 0x10
#define _SMT2CPWL_CPW5_POSN                                 0x5
#define _SMT2CPWL_CPW5_POSITION                             0x5
#define _SMT2CPWL_CPW5_SIZE                                 0x1
#define _SMT2CPWL_CPW5_LENGTH                               0x1
#define _SMT2CPWL_CPW5_MASK                                 0x20
#define _SMT2CPWL_CPW6_POSN                                 0x6
#define _SMT2CPWL_CPW6_POSITION                             0x6
#define _SMT2CPWL_CPW6_SIZE                                 0x1
#define _SMT2CPWL_CPW6_LENGTH                               0x1
#define _SMT2CPWL_CPW6_MASK                                 0x40
#define _SMT2CPWL_CPW7_POSN                                 0x7
#define _SMT2CPWL_CPW7_POSITION                             0x7
#define _SMT2CPWL_CPW7_SIZE                                 0x1
#define _SMT2CPWL_CPW7_LENGTH                               0x1
#define _SMT2CPWL_CPW7_MASK                                 0x80
#define _SMT2CPWL_SMT2CPW_POSN                              0x0
#define _SMT2CPWL_SMT2CPW_POSITION                          0x0
#define _SMT2CPWL_SMT2CPW_SIZE                              0x8
#define _SMT2CPWL_SMT2CPW_LENGTH                            0x8
#define _SMT2CPWL_SMT2CPW_MASK                              0xFF
#define _SMT2CPWL_SMT2CPW0_POSN                             0x0
#define _SMT2CPWL_SMT2CPW0_POSITION                         0x0
#define _SMT2CPWL_SMT2CPW0_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW0_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW0_MASK                             0x1
#define _SMT2CPWL_SMT2CPW1_POSN                             0x1
#define _SMT2CPWL_SMT2CPW1_POSITION                         0x1
#define _SMT2CPWL_SMT2CPW1_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW1_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW1_MASK                             0x2
#define _SMT2CPWL_SMT2CPW2_POSN                             0x2
#define _SMT2CPWL_SMT2CPW2_POSITION                         0x2
#define _SMT2CPWL_SMT2CPW2_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW2_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW2_MASK                             0x4
#define _SMT2CPWL_SMT2CPW3_POSN                             0x3
#define _SMT2CPWL_SMT2CPW3_POSITION                         0x3
#define _SMT2CPWL_SMT2CPW3_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW3_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW3_MASK                             0x8
#define _SMT2CPWL_SMT2CPW4_POSN                             0x4
#define _SMT2CPWL_SMT2CPW4_POSITION                         0x4
#define _SMT2CPWL_SMT2CPW4_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW4_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW4_MASK                             0x10
#define _SMT2CPWL_SMT2CPW5_POSN                             0x5
#define _SMT2CPWL_SMT2CPW5_POSITION                         0x5
#define _SMT2CPWL_SMT2CPW5_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW5_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW5_MASK                             0x20
#define _SMT2CPWL_SMT2CPW6_POSN                             0x6
#define _SMT2CPWL_SMT2CPW6_POSITION                         0x6
#define _SMT2CPWL_SMT2CPW6_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW6_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW6_MASK                             0x40
#define _SMT2CPWL_SMT2CPW7_POSN                             0x7
#define _SMT2CPWL_SMT2CPW7_POSITION                         0x7
#define _SMT2CPWL_SMT2CPW7_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW7_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW7_MASK                             0x80

// Register: SMT2CPWH
#define SMT2CPWH SMT2CPWH
extern volatile unsigned char           SMT2CPWH            __at(0x513);
#ifndef _LIB_BUILD
asm("SMT2CPWH equ 0513h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW8                   :1;
        unsigned CPW9                   :1;
        unsigned CPW10                  :1;
        unsigned CPW11                  :1;
        unsigned CPW12                  :1;
        unsigned CPW13                  :1;
        unsigned CPW14                  :1;
        unsigned CPW15                  :1;
    };
    struct {
        unsigned SMT2CPW                :8;
    };
    struct {
        unsigned SMT2CPW8               :1;
        unsigned SMT2CPW9               :1;
        unsigned SMT2CPW10              :1;
        unsigned SMT2CPW11              :1;
        unsigned SMT2CPW12              :1;
        unsigned SMT2CPW13              :1;
        unsigned SMT2CPW14              :1;
        unsigned SMT2CPW15              :1;
    };
} SMT2CPWHbits_t;
extern volatile SMT2CPWHbits_t SMT2CPWHbits __at(0x513);
// bitfield macros
#define _SMT2CPWH_CPW_POSN                                  0x0
#define _SMT2CPWH_CPW_POSITION                              0x0
#define _SMT2CPWH_CPW_SIZE                                  0x8
#define _SMT2CPWH_CPW_LENGTH                                0x8
#define _SMT2CPWH_CPW_MASK                                  0xFF
#define _SMT2CPWH_CPW8_POSN                                 0x0
#define _SMT2CPWH_CPW8_POSITION                             0x0
#define _SMT2CPWH_CPW8_SIZE                                 0x1
#define _SMT2CPWH_CPW8_LENGTH                               0x1
#define _SMT2CPWH_CPW8_MASK                                 0x1
#define _SMT2CPWH_CPW9_POSN                                 0x1
#define _SMT2CPWH_CPW9_POSITION                             0x1
#define _SMT2CPWH_CPW9_SIZE                                 0x1
#define _SMT2CPWH_CPW9_LENGTH                               0x1
#define _SMT2CPWH_CPW9_MASK                                 0x2
#define _SMT2CPWH_CPW10_POSN                                0x2
#define _SMT2CPWH_CPW10_POSITION                            0x2
#define _SMT2CPWH_CPW10_SIZE                                0x1
#define _SMT2CPWH_CPW10_LENGTH                              0x1
#define _SMT2CPWH_CPW10_MASK                                0x4
#define _SMT2CPWH_CPW11_POSN                                0x3
#define _SMT2CPWH_CPW11_POSITION                            0x3
#define _SMT2CPWH_CPW11_SIZE                                0x1
#define _SMT2CPWH_CPW11_LENGTH                              0x1
#define _SMT2CPWH_CPW11_MASK                                0x8
#define _SMT2CPWH_CPW12_POSN                                0x4
#define _SMT2CPWH_CPW12_POSITION                            0x4
#define _SMT2CPWH_CPW12_SIZE                                0x1
#define _SMT2CPWH_CPW12_LENGTH                              0x1
#define _SMT2CPWH_CPW12_MASK                                0x10
#define _SMT2CPWH_CPW13_POSN                                0x5
#define _SMT2CPWH_CPW13_POSITION                            0x5
#define _SMT2CPWH_CPW13_SIZE                                0x1
#define _SMT2CPWH_CPW13_LENGTH                              0x1
#define _SMT2CPWH_CPW13_MASK                                0x20
#define _SMT2CPWH_CPW14_POSN                                0x6
#define _SMT2CPWH_CPW14_POSITION                            0x6
#define _SMT2CPWH_CPW14_SIZE                                0x1
#define _SMT2CPWH_CPW14_LENGTH                              0x1
#define _SMT2CPWH_CPW14_MASK                                0x40
#define _SMT2CPWH_CPW15_POSN                                0x7
#define _SMT2CPWH_CPW15_POSITION                            0x7
#define _SMT2CPWH_CPW15_SIZE                                0x1
#define _SMT2CPWH_CPW15_LENGTH                              0x1
#define _SMT2CPWH_CPW15_MASK                                0x80
#define _SMT2CPWH_SMT2CPW_POSN                              0x0
#define _SMT2CPWH_SMT2CPW_POSITION                          0x0
#define _SMT2CPWH_SMT2CPW_SIZE                              0x8
#define _SMT2CPWH_SMT2CPW_LENGTH                            0x8
#define _SMT2CPWH_SMT2CPW_MASK                              0xFF
#define _SMT2CPWH_SMT2CPW8_POSN                             0x0
#define _SMT2CPWH_SMT2CPW8_POSITION                         0x0
#define _SMT2CPWH_SMT2CPW8_SIZE                             0x1
#define _SMT2CPWH_SMT2CPW8_LENGTH                           0x1
#define _SMT2CPWH_SMT2CPW8_MASK                             0x1
#define _SMT2CPWH_SMT2CPW9_POSN                             0x1
#define _SMT2CPWH_SMT2CPW9_POSITION                         0x1
#define _SMT2CPWH_SMT2CPW9_SIZE                             0x1
#define _SMT2CPWH_SMT2CPW9_LENGTH                           0x1
#define _SMT2CPWH_SMT2CPW9_MASK                             0x2
#define _SMT2CPWH_SMT2CPW10_POSN                            0x2
#define _SMT2CPWH_SMT2CPW10_POSITION                        0x2
#define _SMT2CPWH_SMT2CPW10_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW10_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW10_MASK                            0x4
#define _SMT2CPWH_SMT2CPW11_POSN                            0x3
#define _SMT2CPWH_SMT2CPW11_POSITION                        0x3
#define _SMT2CPWH_SMT2CPW11_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW11_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW11_MASK                            0x8
#define _SMT2CPWH_SMT2CPW12_POSN                            0x4
#define _SMT2CPWH_SMT2CPW12_POSITION                        0x4
#define _SMT2CPWH_SMT2CPW12_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW12_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW12_MASK                            0x10
#define _SMT2CPWH_SMT2CPW13_POSN                            0x5
#define _SMT2CPWH_SMT2CPW13_POSITION                        0x5
#define _SMT2CPWH_SMT2CPW13_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW13_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW13_MASK                            0x20
#define _SMT2CPWH_SMT2CPW14_POSN                            0x6
#define _SMT2CPWH_SMT2CPW14_POSITION                        0x6
#define _SMT2CPWH_SMT2CPW14_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW14_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW14_MASK                            0x40
#define _SMT2CPWH_SMT2CPW15_POSN                            0x7
#define _SMT2CPWH_SMT2CPW15_POSITION                        0x7
#define _SMT2CPWH_SMT2CPW15_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW15_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW15_MASK                            0x80

// Register: SMT2CPWU
#define SMT2CPWU SMT2CPWU
extern volatile unsigned char           SMT2CPWU            __at(0x514);
#ifndef _LIB_BUILD
asm("SMT2CPWU equ 0514h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW16                  :1;
        unsigned CPW17                  :1;
        unsigned CPW18                  :1;
        unsigned CPW19                  :1;
        unsigned CPW20                  :1;
        unsigned CPW21                  :1;
        unsigned CPW22                  :1;
        unsigned CPW23                  :1;
    };
    struct {
        unsigned SMT2CPW                :8;
    };
    struct {
        unsigned SMT2CPW16              :1;
        unsigned SMT2CPW17              :1;
        unsigned SMT2CPW18              :1;
        unsigned SMT2CPW19              :1;
        unsigned SMT2CPW20              :1;
        unsigned SMT2CPW21              :1;
        unsigned SMT2CPW22              :1;
        unsigned SMT2CPW23              :1;
    };
} SMT2CPWUbits_t;
extern volatile SMT2CPWUbits_t SMT2CPWUbits __at(0x514);
// bitfield macros
#define _SMT2CPWU_CPW_POSN                                  0x0
#define _SMT2CPWU_CPW_POSITION                              0x0
#define _SMT2CPWU_CPW_SIZE                                  0x8
#define _SMT2CPWU_CPW_LENGTH                                0x8
#define _SMT2CPWU_CPW_MASK                                  0xFF
#define _SMT2CPWU_CPW16_POSN                                0x0
#define _SMT2CPWU_CPW16_POSITION                            0x0
#define _SMT2CPWU_CPW16_SIZE                                0x1
#define _SMT2CPWU_CPW16_LENGTH                              0x1
#define _SMT2CPWU_CPW16_MASK                                0x1
#define _SMT2CPWU_CPW17_POSN                                0x1
#define _SMT2CPWU_CPW17_POSITION                            0x1
#define _SMT2CPWU_CPW17_SIZE                                0x1
#define _SMT2CPWU_CPW17_LENGTH                              0x1
#define _SMT2CPWU_CPW17_MASK                                0x2
#define _SMT2CPWU_CPW18_POSN                                0x2
#define _SMT2CPWU_CPW18_POSITION                            0x2
#define _SMT2CPWU_CPW18_SIZE                                0x1
#define _SMT2CPWU_CPW18_LENGTH                              0x1
#define _SMT2CPWU_CPW18_MASK                                0x4
#define _SMT2CPWU_CPW19_POSN                                0x3
#define _SMT2CPWU_CPW19_POSITION                            0x3
#define _SMT2CPWU_CPW19_SIZE                                0x1
#define _SMT2CPWU_CPW19_LENGTH                              0x1
#define _SMT2CPWU_CPW19_MASK                                0x8
#define _SMT2CPWU_CPW20_POSN                                0x4
#define _SMT2CPWU_CPW20_POSITION                            0x4
#define _SMT2CPWU_CPW20_SIZE                                0x1
#define _SMT2CPWU_CPW20_LENGTH                              0x1
#define _SMT2CPWU_CPW20_MASK                                0x10
#define _SMT2CPWU_CPW21_POSN                                0x5
#define _SMT2CPWU_CPW21_POSITION                            0x5
#define _SMT2CPWU_CPW21_SIZE                                0x1
#define _SMT2CPWU_CPW21_LENGTH                              0x1
#define _SMT2CPWU_CPW21_MASK                                0x20
#define _SMT2CPWU_CPW22_POSN                                0x6
#define _SMT2CPWU_CPW22_POSITION                            0x6
#define _SMT2CPWU_CPW22_SIZE                                0x1
#define _SMT2CPWU_CPW22_LENGTH                              0x1
#define _SMT2CPWU_CPW22_MASK                                0x40
#define _SMT2CPWU_CPW23_POSN                                0x7
#define _SMT2CPWU_CPW23_POSITION                            0x7
#define _SMT2CPWU_CPW23_SIZE                                0x1
#define _SMT2CPWU_CPW23_LENGTH                              0x1
#define _SMT2CPWU_CPW23_MASK                                0x80
#define _SMT2CPWU_SMT2CPW_POSN                              0x0
#define _SMT2CPWU_SMT2CPW_POSITION                          0x0
#define _SMT2CPWU_SMT2CPW_SIZE                              0x8
#define _SMT2CPWU_SMT2CPW_LENGTH                            0x8
#define _SMT2CPWU_SMT2CPW_MASK                              0xFF
#define _SMT2CPWU_SMT2CPW16_POSN                            0x0
#define _SMT2CPWU_SMT2CPW16_POSITION                        0x0
#define _SMT2CPWU_SMT2CPW16_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW16_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW16_MASK                            0x1
#define _SMT2CPWU_SMT2CPW17_POSN                            0x1
#define _SMT2CPWU_SMT2CPW17_POSITION                        0x1
#define _SMT2CPWU_SMT2CPW17_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW17_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW17_MASK                            0x2
#define _SMT2CPWU_SMT2CPW18_POSN                            0x2
#define _SMT2CPWU_SMT2CPW18_POSITION                        0x2
#define _SMT2CPWU_SMT2CPW18_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW18_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW18_MASK                            0x4
#define _SMT2CPWU_SMT2CPW19_POSN                            0x3
#define _SMT2CPWU_SMT2CPW19_POSITION                        0x3
#define _SMT2CPWU_SMT2CPW19_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW19_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW19_MASK                            0x8
#define _SMT2CPWU_SMT2CPW20_POSN                            0x4
#define _SMT2CPWU_SMT2CPW20_POSITION                        0x4
#define _SMT2CPWU_SMT2CPW20_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW20_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW20_MASK                            0x10
#define _SMT2CPWU_SMT2CPW21_POSN                            0x5
#define _SMT2CPWU_SMT2CPW21_POSITION                        0x5
#define _SMT2CPWU_SMT2CPW21_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW21_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW21_MASK                            0x20
#define _SMT2CPWU_SMT2CPW22_POSN                            0x6
#define _SMT2CPWU_SMT2CPW22_POSITION                        0x6
#define _SMT2CPWU_SMT2CPW22_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW22_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW22_MASK                            0x40
#define _SMT2CPWU_SMT2CPW23_POSN                            0x7
#define _SMT2CPWU_SMT2CPW23_POSITION                        0x7
#define _SMT2CPWU_SMT2CPW23_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW23_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW23_MASK                            0x80

// Register: SMT2PR
#define SMT2PR SMT2PR
#ifndef __CCI__
extern volatile __uint24                SMT2PR              __at(0x515);
#endif
#ifndef _LIB_BUILD
asm("SMT2PR equ 0515h");
#endif

// Register: SMT2PRL
#define SMT2PRL SMT2PRL
extern volatile unsigned char           SMT2PRL             __at(0x515);
#ifndef _LIB_BUILD
asm("SMT2PRL equ 0515h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
        unsigned PR3                    :1;
        unsigned PR4                    :1;
        unsigned PR5                    :1;
        unsigned PR6                    :1;
        unsigned PR7                    :1;
    };
    struct {
        unsigned SMT2PR                 :8;
    };
    struct {
        unsigned SMT2PR0                :1;
        unsigned SMT2PR1                :1;
        unsigned SMT2PR2                :1;
        unsigned SMT2PR3                :1;
        unsigned SMT2PR4                :1;
        unsigned SMT2PR5                :1;
        unsigned SMT2PR6                :1;
        unsigned SMT2PR7                :1;
    };
} SMT2PRLbits_t;
extern volatile SMT2PRLbits_t SMT2PRLbits __at(0x515);
// bitfield macros
#define _SMT2PRL_PR_POSN                                    0x0
#define _SMT2PRL_PR_POSITION                                0x0
#define _SMT2PRL_PR_SIZE                                    0x8
#define _SMT2PRL_PR_LENGTH                                  0x8
#define _SMT2PRL_PR_MASK                                    0xFF
#define _SMT2PRL_PR0_POSN                                   0x0
#define _SMT2PRL_PR0_POSITION                               0x0
#define _SMT2PRL_PR0_SIZE                                   0x1
#define _SMT2PRL_PR0_LENGTH                                 0x1
#define _SMT2PRL_PR0_MASK                                   0x1
#define _SMT2PRL_PR1_POSN                                   0x1
#define _SMT2PRL_PR1_POSITION                               0x1
#define _SMT2PRL_PR1_SIZE                                   0x1
#define _SMT2PRL_PR1_LENGTH                                 0x1
#define _SMT2PRL_PR1_MASK                                   0x2
#define _SMT2PRL_PR2_POSN                                   0x2
#define _SMT2PRL_PR2_POSITION                               0x2
#define _SMT2PRL_PR2_SIZE                                   0x1
#define _SMT2PRL_PR2_LENGTH                                 0x1
#define _SMT2PRL_PR2_MASK                                   0x4
#define _SMT2PRL_PR3_POSN                                   0x3
#define _SMT2PRL_PR3_POSITION                               0x3
#define _SMT2PRL_PR3_SIZE                                   0x1
#define _SMT2PRL_PR3_LENGTH                                 0x1
#define _SMT2PRL_PR3_MASK                                   0x8
#define _SMT2PRL_PR4_POSN                                   0x4
#define _SMT2PRL_PR4_POSITION                               0x4
#define _SMT2PRL_PR4_SIZE                                   0x1
#define _SMT2PRL_PR4_LENGTH                                 0x1
#define _SMT2PRL_PR4_MASK                                   0x10
#define _SMT2PRL_PR5_POSN                                   0x5
#define _SMT2PRL_PR5_POSITION                               0x5
#define _SMT2PRL_PR5_SIZE                                   0x1
#define _SMT2PRL_PR5_LENGTH                                 0x1
#define _SMT2PRL_PR5_MASK                                   0x20
#define _SMT2PRL_PR6_POSN                                   0x6
#define _SMT2PRL_PR6_POSITION                               0x6
#define _SMT2PRL_PR6_SIZE                                   0x1
#define _SMT2PRL_PR6_LENGTH                                 0x1
#define _SMT2PRL_PR6_MASK                                   0x40
#define _SMT2PRL_PR7_POSN                                   0x7
#define _SMT2PRL_PR7_POSITION                               0x7
#define _SMT2PRL_PR7_SIZE                                   0x1
#define _SMT2PRL_PR7_LENGTH                                 0x1
#define _SMT2PRL_PR7_MASK                                   0x80
#define _SMT2PRL_SMT2PR_POSN                                0x0
#define _SMT2PRL_SMT2PR_POSITION                            0x0
#define _SMT2PRL_SMT2PR_SIZE                                0x8
#define _SMT2PRL_SMT2PR_LENGTH                              0x8
#define _SMT2PRL_SMT2PR_MASK                                0xFF
#define _SMT2PRL_SMT2PR0_POSN                               0x0
#define _SMT2PRL_SMT2PR0_POSITION                           0x0
#define _SMT2PRL_SMT2PR0_SIZE                               0x1
#define _SMT2PRL_SMT2PR0_LENGTH                             0x1
#define _SMT2PRL_SMT2PR0_MASK                               0x1
#define _SMT2PRL_SMT2PR1_POSN                               0x1
#define _SMT2PRL_SMT2PR1_POSITION                           0x1
#define _SMT2PRL_SMT2PR1_SIZE                               0x1
#define _SMT2PRL_SMT2PR1_LENGTH                             0x1
#define _SMT2PRL_SMT2PR1_MASK                               0x2
#define _SMT2PRL_SMT2PR2_POSN                               0x2
#define _SMT2PRL_SMT2PR2_POSITION                           0x2
#define _SMT2PRL_SMT2PR2_SIZE                               0x1
#define _SMT2PRL_SMT2PR2_LENGTH                             0x1
#define _SMT2PRL_SMT2PR2_MASK                               0x4
#define _SMT2PRL_SMT2PR3_POSN                               0x3
#define _SMT2PRL_SMT2PR3_POSITION                           0x3
#define _SMT2PRL_SMT2PR3_SIZE                               0x1
#define _SMT2PRL_SMT2PR3_LENGTH                             0x1
#define _SMT2PRL_SMT2PR3_MASK                               0x8
#define _SMT2PRL_SMT2PR4_POSN                               0x4
#define _SMT2PRL_SMT2PR4_POSITION                           0x4
#define _SMT2PRL_SMT2PR4_SIZE                               0x1
#define _SMT2PRL_SMT2PR4_LENGTH                             0x1
#define _SMT2PRL_SMT2PR4_MASK                               0x10
#define _SMT2PRL_SMT2PR5_POSN                               0x5
#define _SMT2PRL_SMT2PR5_POSITION                           0x5
#define _SMT2PRL_SMT2PR5_SIZE                               0x1
#define _SMT2PRL_SMT2PR5_LENGTH                             0x1
#define _SMT2PRL_SMT2PR5_MASK                               0x20
#define _SMT2PRL_SMT2PR6_POSN                               0x6
#define _SMT2PRL_SMT2PR6_POSITION                           0x6
#define _SMT2PRL_SMT2PR6_SIZE                               0x1
#define _SMT2PRL_SMT2PR6_LENGTH                             0x1
#define _SMT2PRL_SMT2PR6_MASK                               0x40
#define _SMT2PRL_SMT2PR7_POSN                               0x7
#define _SMT2PRL_SMT2PR7_POSITION                           0x7
#define _SMT2PRL_SMT2PR7_SIZE                               0x1
#define _SMT2PRL_SMT2PR7_LENGTH                             0x1
#define _SMT2PRL_SMT2PR7_MASK                               0x80

// Register: SMT2PRH
#define SMT2PRH SMT2PRH
extern volatile unsigned char           SMT2PRH             __at(0x516);
#ifndef _LIB_BUILD
asm("SMT2PRH equ 0516h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR8                    :1;
        unsigned PR9                    :1;
        unsigned PR10                   :1;
        unsigned PR11                   :1;
        unsigned PR12                   :1;
        unsigned PR13                   :1;
        unsigned PR14                   :1;
        unsigned PR15                   :1;
    };
    struct {
        unsigned SMT2PR                 :8;
    };
    struct {
        unsigned SMT2PR8                :1;
        unsigned SMT2PR9                :1;
        unsigned SMT2PR10               :1;
        unsigned SMT2PR11               :1;
        unsigned SMT2PR12               :1;
        unsigned SMT2PR13               :1;
        unsigned SMT2PR14               :1;
        unsigned SMT2PR15               :1;
    };
} SMT2PRHbits_t;
extern volatile SMT2PRHbits_t SMT2PRHbits __at(0x516);
// bitfield macros
#define _SMT2PRH_PR_POSN                                    0x0
#define _SMT2PRH_PR_POSITION                                0x0
#define _SMT2PRH_PR_SIZE                                    0x8
#define _SMT2PRH_PR_LENGTH                                  0x8
#define _SMT2PRH_PR_MASK                                    0xFF
#define _SMT2PRH_PR8_POSN                                   0x0
#define _SMT2PRH_PR8_POSITION                               0x0
#define _SMT2PRH_PR8_SIZE                                   0x1
#define _SMT2PRH_PR8_LENGTH                                 0x1
#define _SMT2PRH_PR8_MASK                                   0x1
#define _SMT2PRH_PR9_POSN                                   0x1
#define _SMT2PRH_PR9_POSITION                               0x1
#define _SMT2PRH_PR9_SIZE                                   0x1
#define _SMT2PRH_PR9_LENGTH                                 0x1
#define _SMT2PRH_PR9_MASK                                   0x2
#define _SMT2PRH_PR10_POSN                                  0x2
#define _SMT2PRH_PR10_POSITION                              0x2
#define _SMT2PRH_PR10_SIZE                                  0x1
#define _SMT2PRH_PR10_LENGTH                                0x1
#define _SMT2PRH_PR10_MASK                                  0x4
#define _SMT2PRH_PR11_POSN                                  0x3
#define _SMT2PRH_PR11_POSITION                              0x3
#define _SMT2PRH_PR11_SIZE                                  0x1
#define _SMT2PRH_PR11_LENGTH                                0x1
#define _SMT2PRH_PR11_MASK                                  0x8
#define _SMT2PRH_PR12_POSN                                  0x4
#define _SMT2PRH_PR12_POSITION                              0x4
#define _SMT2PRH_PR12_SIZE                                  0x1
#define _SMT2PRH_PR12_LENGTH                                0x1
#define _SMT2PRH_PR12_MASK                                  0x10
#define _SMT2PRH_PR13_POSN                                  0x5
#define _SMT2PRH_PR13_POSITION                              0x5
#define _SMT2PRH_PR13_SIZE                                  0x1
#define _SMT2PRH_PR13_LENGTH                                0x1
#define _SMT2PRH_PR13_MASK                                  0x20
#define _SMT2PRH_PR14_POSN                                  0x6
#define _SMT2PRH_PR14_POSITION                              0x6
#define _SMT2PRH_PR14_SIZE                                  0x1
#define _SMT2PRH_PR14_LENGTH                                0x1
#define _SMT2PRH_PR14_MASK                                  0x40
#define _SMT2PRH_PR15_POSN                                  0x7
#define _SMT2PRH_PR15_POSITION                              0x7
#define _SMT2PRH_PR15_SIZE                                  0x1
#define _SMT2PRH_PR15_LENGTH                                0x1
#define _SMT2PRH_PR15_MASK                                  0x80
#define _SMT2PRH_SMT2PR_POSN                                0x0
#define _SMT2PRH_SMT2PR_POSITION                            0x0
#define _SMT2PRH_SMT2PR_SIZE                                0x8
#define _SMT2PRH_SMT2PR_LENGTH                              0x8
#define _SMT2PRH_SMT2PR_MASK                                0xFF
#define _SMT2PRH_SMT2PR8_POSN                               0x0
#define _SMT2PRH_SMT2PR8_POSITION                           0x0
#define _SMT2PRH_SMT2PR8_SIZE                               0x1
#define _SMT2PRH_SMT2PR8_LENGTH                             0x1
#define _SMT2PRH_SMT2PR8_MASK                               0x1
#define _SMT2PRH_SMT2PR9_POSN                               0x1
#define _SMT2PRH_SMT2PR9_POSITION                           0x1
#define _SMT2PRH_SMT2PR9_SIZE                               0x1
#define _SMT2PRH_SMT2PR9_LENGTH                             0x1
#define _SMT2PRH_SMT2PR9_MASK                               0x2
#define _SMT2PRH_SMT2PR10_POSN                              0x2
#define _SMT2PRH_SMT2PR10_POSITION                          0x2
#define _SMT2PRH_SMT2PR10_SIZE                              0x1
#define _SMT2PRH_SMT2PR10_LENGTH                            0x1
#define _SMT2PRH_SMT2PR10_MASK                              0x4
#define _SMT2PRH_SMT2PR11_POSN                              0x3
#define _SMT2PRH_SMT2PR11_POSITION                          0x3
#define _SMT2PRH_SMT2PR11_SIZE                              0x1
#define _SMT2PRH_SMT2PR11_LENGTH                            0x1
#define _SMT2PRH_SMT2PR11_MASK                              0x8
#define _SMT2PRH_SMT2PR12_POSN                              0x4
#define _SMT2PRH_SMT2PR12_POSITION                          0x4
#define _SMT2PRH_SMT2PR12_SIZE                              0x1
#define _SMT2PRH_SMT2PR12_LENGTH                            0x1
#define _SMT2PRH_SMT2PR12_MASK                              0x10
#define _SMT2PRH_SMT2PR13_POSN                              0x5
#define _SMT2PRH_SMT2PR13_POSITION                          0x5
#define _SMT2PRH_SMT2PR13_SIZE                              0x1
#define _SMT2PRH_SMT2PR13_LENGTH                            0x1
#define _SMT2PRH_SMT2PR13_MASK                              0x20
#define _SMT2PRH_SMT2PR14_POSN                              0x6
#define _SMT2PRH_SMT2PR14_POSITION                          0x6
#define _SMT2PRH_SMT2PR14_SIZE                              0x1
#define _SMT2PRH_SMT2PR14_LENGTH                            0x1
#define _SMT2PRH_SMT2PR14_MASK                              0x40
#define _SMT2PRH_SMT2PR15_POSN                              0x7
#define _SMT2PRH_SMT2PR15_POSITION                          0x7
#define _SMT2PRH_SMT2PR15_SIZE                              0x1
#define _SMT2PRH_SMT2PR15_LENGTH                            0x1
#define _SMT2PRH_SMT2PR15_MASK                              0x80

// Register: SMT2PRU
#define SMT2PRU SMT2PRU
extern volatile unsigned char           SMT2PRU             __at(0x517);
#ifndef _LIB_BUILD
asm("SMT2PRU equ 0517h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR16                   :1;
        unsigned PR17                   :1;
        unsigned PR18                   :1;
        unsigned PR19                   :1;
        unsigned PR20                   :1;
        unsigned PR21                   :1;
        unsigned PR22                   :1;
        unsigned PR23                   :1;
    };
    struct {
        unsigned SMT2PR                 :8;
    };
    struct {
        unsigned SMT2PR16               :1;
        unsigned SMT2PR17               :1;
        unsigned SMT2PR18               :1;
        unsigned SMT2PR19               :1;
        unsigned SMT2PR20               :1;
        unsigned SMT2PR21               :1;
        unsigned SMT2PR22               :1;
        unsigned SMT2PR23               :1;
    };
} SMT2PRUbits_t;
extern volatile SMT2PRUbits_t SMT2PRUbits __at(0x517);
// bitfield macros
#define _SMT2PRU_PR_POSN                                    0x0
#define _SMT2PRU_PR_POSITION                                0x0
#define _SMT2PRU_PR_SIZE                                    0x8
#define _SMT2PRU_PR_LENGTH                                  0x8
#define _SMT2PRU_PR_MASK                                    0xFF
#define _SMT2PRU_PR16_POSN                                  0x0
#define _SMT2PRU_PR16_POSITION                              0x0
#define _SMT2PRU_PR16_SIZE                                  0x1
#define _SMT2PRU_PR16_LENGTH                                0x1
#define _SMT2PRU_PR16_MASK                                  0x1
#define _SMT2PRU_PR17_POSN                                  0x1
#define _SMT2PRU_PR17_POSITION                              0x1
#define _SMT2PRU_PR17_SIZE                                  0x1
#define _SMT2PRU_PR17_LENGTH                                0x1
#define _SMT2PRU_PR17_MASK                                  0x2
#define _SMT2PRU_PR18_POSN                                  0x2
#define _SMT2PRU_PR18_POSITION                              0x2
#define _SMT2PRU_PR18_SIZE                                  0x1
#define _SMT2PRU_PR18_LENGTH                                0x1
#define _SMT2PRU_PR18_MASK                                  0x4
#define _SMT2PRU_PR19_POSN                                  0x3
#define _SMT2PRU_PR19_POSITION                              0x3
#define _SMT2PRU_PR19_SIZE                                  0x1
#define _SMT2PRU_PR19_LENGTH                                0x1
#define _SMT2PRU_PR19_MASK                                  0x8
#define _SMT2PRU_PR20_POSN                                  0x4
#define _SMT2PRU_PR20_POSITION                              0x4
#define _SMT2PRU_PR20_SIZE                                  0x1
#define _SMT2PRU_PR20_LENGTH                                0x1
#define _SMT2PRU_PR20_MASK                                  0x10
#define _SMT2PRU_PR21_POSN                                  0x5
#define _SMT2PRU_PR21_POSITION                              0x5
#define _SMT2PRU_PR21_SIZE                                  0x1
#define _SMT2PRU_PR21_LENGTH                                0x1
#define _SMT2PRU_PR21_MASK                                  0x20
#define _SMT2PRU_PR22_POSN                                  0x6
#define _SMT2PRU_PR22_POSITION                              0x6
#define _SMT2PRU_PR22_SIZE                                  0x1
#define _SMT2PRU_PR22_LENGTH                                0x1
#define _SMT2PRU_PR22_MASK                                  0x40
#define _SMT2PRU_PR23_POSN                                  0x7
#define _SMT2PRU_PR23_POSITION                              0x7
#define _SMT2PRU_PR23_SIZE                                  0x1
#define _SMT2PRU_PR23_LENGTH                                0x1
#define _SMT2PRU_PR23_MASK                                  0x80
#define _SMT2PRU_SMT2PR_POSN                                0x0
#define _SMT2PRU_SMT2PR_POSITION                            0x0
#define _SMT2PRU_SMT2PR_SIZE                                0x8
#define _SMT2PRU_SMT2PR_LENGTH                              0x8
#define _SMT2PRU_SMT2PR_MASK                                0xFF
#define _SMT2PRU_SMT2PR16_POSN                              0x0
#define _SMT2PRU_SMT2PR16_POSITION                          0x0
#define _SMT2PRU_SMT2PR16_SIZE                              0x1
#define _SMT2PRU_SMT2PR16_LENGTH                            0x1
#define _SMT2PRU_SMT2PR16_MASK                              0x1
#define _SMT2PRU_SMT2PR17_POSN                              0x1
#define _SMT2PRU_SMT2PR17_POSITION                          0x1
#define _SMT2PRU_SMT2PR17_SIZE                              0x1
#define _SMT2PRU_SMT2PR17_LENGTH                            0x1
#define _SMT2PRU_SMT2PR17_MASK                              0x2
#define _SMT2PRU_SMT2PR18_POSN                              0x2
#define _SMT2PRU_SMT2PR18_POSITION                          0x2
#define _SMT2PRU_SMT2PR18_SIZE                              0x1
#define _SMT2PRU_SMT2PR18_LENGTH                            0x1
#define _SMT2PRU_SMT2PR18_MASK                              0x4
#define _SMT2PRU_SMT2PR19_POSN                              0x3
#define _SMT2PRU_SMT2PR19_POSITION                          0x3
#define _SMT2PRU_SMT2PR19_SIZE                              0x1
#define _SMT2PRU_SMT2PR19_LENGTH                            0x1
#define _SMT2PRU_SMT2PR19_MASK                              0x8
#define _SMT2PRU_SMT2PR20_POSN                              0x4
#define _SMT2PRU_SMT2PR20_POSITION                          0x4
#define _SMT2PRU_SMT2PR20_SIZE                              0x1
#define _SMT2PRU_SMT2PR20_LENGTH                            0x1
#define _SMT2PRU_SMT2PR20_MASK                              0x10
#define _SMT2PRU_SMT2PR21_POSN                              0x5
#define _SMT2PRU_SMT2PR21_POSITION                          0x5
#define _SMT2PRU_SMT2PR21_SIZE                              0x1
#define _SMT2PRU_SMT2PR21_LENGTH                            0x1
#define _SMT2PRU_SMT2PR21_MASK                              0x20
#define _SMT2PRU_SMT2PR22_POSN                              0x6
#define _SMT2PRU_SMT2PR22_POSITION                          0x6
#define _SMT2PRU_SMT2PR22_SIZE                              0x1
#define _SMT2PRU_SMT2PR22_LENGTH                            0x1
#define _SMT2PRU_SMT2PR22_MASK                              0x40
#define _SMT2PRU_SMT2PR23_POSN                              0x7
#define _SMT2PRU_SMT2PR23_POSITION                          0x7
#define _SMT2PRU_SMT2PR23_SIZE                              0x1
#define _SMT2PRU_SMT2PR23_LENGTH                            0x1
#define _SMT2PRU_SMT2PR23_MASK                              0x80

// Register: SMT2CON0
#define SMT2CON0 SMT2CON0
extern volatile unsigned char           SMT2CON0            __at(0x518);
#ifndef _LIB_BUILD
asm("SMT2CON0 equ 0518h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT2PS                 :2;
        unsigned SMT2CPOL               :1;
        unsigned SMT2SPOL               :1;
        unsigned SMT2WOL                :1;
        unsigned SMT2STP                :1;
        unsigned                        :1;
        unsigned SMT2EN                 :1;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
    };
    struct {
        unsigned SMT2PS0                :1;
        unsigned SMT2PS1                :1;
    };
} SMT2CON0bits_t;
extern volatile SMT2CON0bits_t SMT2CON0bits __at(0x518);
// bitfield macros
#define _SMT2CON0_PS_POSN                                   0x0
#define _SMT2CON0_PS_POSITION                               0x0
#define _SMT2CON0_PS_SIZE                                   0x2
#define _SMT2CON0_PS_LENGTH                                 0x2
#define _SMT2CON0_PS_MASK                                   0x3
#define _SMT2CON0_CPOL_POSN                                 0x2
#define _SMT2CON0_CPOL_POSITION                             0x2
#define _SMT2CON0_CPOL_SIZE                                 0x1
#define _SMT2CON0_CPOL_LENGTH                               0x1
#define _SMT2CON0_CPOL_MASK                                 0x4
#define _SMT2CON0_SPOL_POSN                                 0x3
#define _SMT2CON0_SPOL_POSITION                             0x3
#define _SMT2CON0_SPOL_SIZE                                 0x1
#define _SMT2CON0_SPOL_LENGTH                               0x1
#define _SMT2CON0_SPOL_MASK                                 0x8
#define _SMT2CON0_WPOL_POSN                                 0x4
#define _SMT2CON0_WPOL_POSITION                             0x4
#define _SMT2CON0_WPOL_SIZE                                 0x1
#define _SMT2CON0_WPOL_LENGTH                               0x1
#define _SMT2CON0_WPOL_MASK                                 0x10
#define _SMT2CON0_STP_POSN                                  0x5
#define _SMT2CON0_STP_POSITION                              0x5
#define _SMT2CON0_STP_SIZE                                  0x1
#define _SMT2CON0_STP_LENGTH                                0x1
#define _SMT2CON0_STP_MASK                                  0x20
#define _SMT2CON0_EN_POSN                                   0x7
#define _SMT2CON0_EN_POSITION                               0x7
#define _SMT2CON0_EN_SIZE                                   0x1
#define _SMT2CON0_EN_LENGTH                                 0x1
#define _SMT2CON0_EN_MASK                                   0x80
#define _SMT2CON0_SMT2PS_POSN                               0x0
#define _SMT2CON0_SMT2PS_POSITION                           0x0
#define _SMT2CON0_SMT2PS_SIZE                               0x2
#define _SMT2CON0_SMT2PS_LENGTH                             0x2
#define _SMT2CON0_SMT2PS_MASK                               0x3
#define _SMT2CON0_SMT2CPOL_POSN                             0x2
#define _SMT2CON0_SMT2CPOL_POSITION                         0x2
#define _SMT2CON0_SMT2CPOL_SIZE                             0x1
#define _SMT2CON0_SMT2CPOL_LENGTH                           0x1
#define _SMT2CON0_SMT2CPOL_MASK                             0x4
#define _SMT2CON0_SMT2SPOL_POSN                             0x3
#define _SMT2CON0_SMT2SPOL_POSITION                         0x3
#define _SMT2CON0_SMT2SPOL_SIZE                             0x1
#define _SMT2CON0_SMT2SPOL_LENGTH                           0x1
#define _SMT2CON0_SMT2SPOL_MASK                             0x8
#define _SMT2CON0_SMT2WOL_POSN                              0x4
#define _SMT2CON0_SMT2WOL_POSITION                          0x4
#define _SMT2CON0_SMT2WOL_SIZE                              0x1
#define _SMT2CON0_SMT2WOL_LENGTH                            0x1
#define _SMT2CON0_SMT2WOL_MASK                              0x10
#define _SMT2CON0_SMT2STP_POSN                              0x5
#define _SMT2CON0_SMT2STP_POSITION                          0x5
#define _SMT2CON0_SMT2STP_SIZE                              0x1
#define _SMT2CON0_SMT2STP_LENGTH                            0x1
#define _SMT2CON0_SMT2STP_MASK                              0x20
#define _SMT2CON0_SMT2EN_POSN                               0x7
#define _SMT2CON0_SMT2EN_POSITION                           0x7
#define _SMT2CON0_SMT2EN_SIZE                               0x1
#define _SMT2CON0_SMT2EN_LENGTH                             0x1
#define _SMT2CON0_SMT2EN_MASK                               0x80
#define _SMT2CON0_PS0_POSN                                  0x0
#define _SMT2CON0_PS0_POSITION                              0x0
#define _SMT2CON0_PS0_SIZE                                  0x1
#define _SMT2CON0_PS0_LENGTH                                0x1
#define _SMT2CON0_PS0_MASK                                  0x1
#define _SMT2CON0_PS1_POSN                                  0x1
#define _SMT2CON0_PS1_POSITION                              0x1
#define _SMT2CON0_PS1_SIZE                                  0x1
#define _SMT2CON0_PS1_LENGTH                                0x1
#define _SMT2CON0_PS1_MASK                                  0x2
#define _SMT2CON0_SMT2PS0_POSN                              0x0
#define _SMT2CON0_SMT2PS0_POSITION                          0x0
#define _SMT2CON0_SMT2PS0_SIZE                              0x1
#define _SMT2CON0_SMT2PS0_LENGTH                            0x1
#define _SMT2CON0_SMT2PS0_MASK                              0x1
#define _SMT2CON0_SMT2PS1_POSN                              0x1
#define _SMT2CON0_SMT2PS1_POSITION                          0x1
#define _SMT2CON0_SMT2PS1_SIZE                              0x1
#define _SMT2CON0_SMT2PS1_LENGTH                            0x1
#define _SMT2CON0_SMT2PS1_MASK                              0x2

// Register: SMT2CON1
#define SMT2CON1 SMT2CON1
extern volatile unsigned char           SMT2CON1            __at(0x519);
#ifndef _LIB_BUILD
asm("SMT2CON1 equ 0519h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned GO                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned                        :2;
        unsigned SMT2REPEAT             :1;
        unsigned SMT2GO                 :1;
    };
    struct {
        unsigned SMT2MODE               :4;
    };
} SMT2CON1bits_t;
extern volatile SMT2CON1bits_t SMT2CON1bits __at(0x519);
// bitfield macros
#define _SMT2CON1_MODE_POSN                                 0x0
#define _SMT2CON1_MODE_POSITION                             0x0
#define _SMT2CON1_MODE_SIZE                                 0x4
#define _SMT2CON1_MODE_LENGTH                               0x4
#define _SMT2CON1_MODE_MASK                                 0xF
#define _SMT2CON1_REPEAT_POSN                               0x6
#define _SMT2CON1_REPEAT_POSITION                           0x6
#define _SMT2CON1_REPEAT_SIZE                               0x1
#define _SMT2CON1_REPEAT_LENGTH                             0x1
#define _SMT2CON1_REPEAT_MASK                               0x40
#define _SMT2CON1_GO_POSN                                   0x7
#define _SMT2CON1_GO_POSITION                               0x7
#define _SMT2CON1_GO_SIZE                                   0x1
#define _SMT2CON1_GO_LENGTH                                 0x1
#define _SMT2CON1_GO_MASK                                   0x80
#define _SMT2CON1_MODE0_POSN                                0x0
#define _SMT2CON1_MODE0_POSITION                            0x0
#define _SMT2CON1_MODE0_SIZE                                0x1
#define _SMT2CON1_MODE0_LENGTH                              0x1
#define _SMT2CON1_MODE0_MASK                                0x1
#define _SMT2CON1_MODE1_POSN                                0x1
#define _SMT2CON1_MODE1_POSITION                            0x1
#define _SMT2CON1_MODE1_SIZE                                0x1
#define _SMT2CON1_MODE1_LENGTH                              0x1
#define _SMT2CON1_MODE1_MASK                                0x2
#define _SMT2CON1_MODE2_POSN                                0x2
#define _SMT2CON1_MODE2_POSITION                            0x2
#define _SMT2CON1_MODE2_SIZE                                0x1
#define _SMT2CON1_MODE2_LENGTH                              0x1
#define _SMT2CON1_MODE2_MASK                                0x4
#define _SMT2CON1_MODE3_POSN                                0x3
#define _SMT2CON1_MODE3_POSITION                            0x3
#define _SMT2CON1_MODE3_SIZE                                0x1
#define _SMT2CON1_MODE3_LENGTH                              0x1
#define _SMT2CON1_MODE3_MASK                                0x8
#define _SMT2CON1_SMT2REPEAT_POSN                           0x6
#define _SMT2CON1_SMT2REPEAT_POSITION                       0x6
#define _SMT2CON1_SMT2REPEAT_SIZE                           0x1
#define _SMT2CON1_SMT2REPEAT_LENGTH                         0x1
#define _SMT2CON1_SMT2REPEAT_MASK                           0x40
#define _SMT2CON1_SMT2GO_POSN                               0x7
#define _SMT2CON1_SMT2GO_POSITION                           0x7
#define _SMT2CON1_SMT2GO_SIZE                               0x1
#define _SMT2CON1_SMT2GO_LENGTH                             0x1
#define _SMT2CON1_SMT2GO_MASK                               0x80
#define _SMT2CON1_SMT2MODE_POSN                             0x0
#define _SMT2CON1_SMT2MODE_POSITION                         0x0
#define _SMT2CON1_SMT2MODE_SIZE                             0x4
#define _SMT2CON1_SMT2MODE_LENGTH                           0x4
#define _SMT2CON1_SMT2MODE_MASK                             0xF

// Register: SMT2STAT
#define SMT2STAT SMT2STAT
extern volatile unsigned char           SMT2STAT            __at(0x51A);
#ifndef _LIB_BUILD
asm("SMT2STAT equ 051Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT2AS                 :1;
        unsigned SMT2WS                 :1;
        unsigned SMT2TS                 :1;
        unsigned                        :2;
        unsigned SMT2RESET              :1;
        unsigned SMT2CPWUP              :1;
        unsigned SMT2CPRUP              :1;
    };
    struct {
        unsigned                        :5;
        unsigned SMT2RST                :1;
    };
} SMT2STATbits_t;
extern volatile SMT2STATbits_t SMT2STATbits __at(0x51A);
// bitfield macros
#define _SMT2STAT_AS_POSN                                   0x0
#define _SMT2STAT_AS_POSITION                               0x0
#define _SMT2STAT_AS_SIZE                                   0x1
#define _SMT2STAT_AS_LENGTH                                 0x1
#define _SMT2STAT_AS_MASK                                   0x1
#define _SMT2STAT_WS_POSN                                   0x1
#define _SMT2STAT_WS_POSITION                               0x1
#define _SMT2STAT_WS_SIZE                                   0x1
#define _SMT2STAT_WS_LENGTH                                 0x1
#define _SMT2STAT_WS_MASK                                   0x2
#define _SMT2STAT_TS_POSN                                   0x2
#define _SMT2STAT_TS_POSITION                               0x2
#define _SMT2STAT_TS_SIZE                                   0x1
#define _SMT2STAT_TS_LENGTH                                 0x1
#define _SMT2STAT_TS_MASK                                   0x4
#define _SMT2STAT_RST_POSN                                  0x5
#define _SMT2STAT_RST_POSITION                              0x5
#define _SMT2STAT_RST_SIZE                                  0x1
#define _SMT2STAT_RST_LENGTH                                0x1
#define _SMT2STAT_RST_MASK                                  0x20
#define _SMT2STAT_CPWUP_POSN                                0x6
#define _SMT2STAT_CPWUP_POSITION                            0x6
#define _SMT2STAT_CPWUP_SIZE                                0x1
#define _SMT2STAT_CPWUP_LENGTH                              0x1
#define _SMT2STAT_CPWUP_MASK                                0x40
#define _SMT2STAT_CPRUP_POSN                                0x7
#define _SMT2STAT_CPRUP_POSITION                            0x7
#define _SMT2STAT_CPRUP_SIZE                                0x1
#define _SMT2STAT_CPRUP_LENGTH                              0x1
#define _SMT2STAT_CPRUP_MASK                                0x80
#define _SMT2STAT_SMT2AS_POSN                               0x0
#define _SMT2STAT_SMT2AS_POSITION                           0x0
#define _SMT2STAT_SMT2AS_SIZE                               0x1
#define _SMT2STAT_SMT2AS_LENGTH                             0x1
#define _SMT2STAT_SMT2AS_MASK                               0x1
#define _SMT2STAT_SMT2WS_POSN                               0x1
#define _SMT2STAT_SMT2WS_POSITION                           0x1
#define _SMT2STAT_SMT2WS_SIZE                               0x1
#define _SMT2STAT_SMT2WS_LENGTH                             0x1
#define _SMT2STAT_SMT2WS_MASK                               0x2
#define _SMT2STAT_SMT2TS_POSN                               0x2
#define _SMT2STAT_SMT2TS_POSITION                           0x2
#define _SMT2STAT_SMT2TS_SIZE                               0x1
#define _SMT2STAT_SMT2TS_LENGTH                             0x1
#define _SMT2STAT_SMT2TS_MASK                               0x4
#define _SMT2STAT_SMT2RESET_POSN                            0x5
#define _SMT2STAT_SMT2RESET_POSITION                        0x5
#define _SMT2STAT_SMT2RESET_SIZE                            0x1
#define _SMT2STAT_SMT2RESET_LENGTH                          0x1
#define _SMT2STAT_SMT2RESET_MASK                            0x20
#define _SMT2STAT_SMT2CPWUP_POSN                            0x6
#define _SMT2STAT_SMT2CPWUP_POSITION                        0x6
#define _SMT2STAT_SMT2CPWUP_SIZE                            0x1
#define _SMT2STAT_SMT2CPWUP_LENGTH                          0x1
#define _SMT2STAT_SMT2CPWUP_MASK                            0x40
#define _SMT2STAT_SMT2CPRUP_POSN                            0x7
#define _SMT2STAT_SMT2CPRUP_POSITION                        0x7
#define _SMT2STAT_SMT2CPRUP_SIZE                            0x1
#define _SMT2STAT_SMT2CPRUP_LENGTH                          0x1
#define _SMT2STAT_SMT2CPRUP_MASK                            0x80
#define _SMT2STAT_SMT2RST_POSN                              0x5
#define _SMT2STAT_SMT2RST_POSITION                          0x5
#define _SMT2STAT_SMT2RST_SIZE                              0x1
#define _SMT2STAT_SMT2RST_LENGTH                            0x1
#define _SMT2STAT_SMT2RST_MASK                              0x20

// Register: SMT2CLK
#define SMT2CLK SMT2CLK
extern volatile unsigned char           SMT2CLK             __at(0x51B);
#ifndef _LIB_BUILD
asm("SMT2CLK equ 051Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :3;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
    };
    struct {
        unsigned SMT2CSEL               :3;
    };
    struct {
        unsigned SMT2CSEL0              :1;
        unsigned SMT2CSEL1              :1;
        unsigned SMT2CSEL2              :1;
    };
} SMT2CLKbits_t;
extern volatile SMT2CLKbits_t SMT2CLKbits __at(0x51B);
// bitfield macros
#define _SMT2CLK_CSEL_POSN                                  0x0
#define _SMT2CLK_CSEL_POSITION                              0x0
#define _SMT2CLK_CSEL_SIZE                                  0x3
#define _SMT2CLK_CSEL_LENGTH                                0x3
#define _SMT2CLK_CSEL_MASK                                  0x7
#define _SMT2CLK_CSEL0_POSN                                 0x0
#define _SMT2CLK_CSEL0_POSITION                             0x0
#define _SMT2CLK_CSEL0_SIZE                                 0x1
#define _SMT2CLK_CSEL0_LENGTH                               0x1
#define _SMT2CLK_CSEL0_MASK                                 0x1
#define _SMT2CLK_CSEL1_POSN                                 0x1
#define _SMT2CLK_CSEL1_POSITION                             0x1
#define _SMT2CLK_CSEL1_SIZE                                 0x1
#define _SMT2CLK_CSEL1_LENGTH                               0x1
#define _SMT2CLK_CSEL1_MASK                                 0x2
#define _SMT2CLK_CSEL2_POSN                                 0x2
#define _SMT2CLK_CSEL2_POSITION                             0x2
#define _SMT2CLK_CSEL2_SIZE                                 0x1
#define _SMT2CLK_CSEL2_LENGTH                               0x1
#define _SMT2CLK_CSEL2_MASK                                 0x4
#define _SMT2CLK_SMT2CSEL_POSN                              0x0
#define _SMT2CLK_SMT2CSEL_POSITION                          0x0
#define _SMT2CLK_SMT2CSEL_SIZE                              0x3
#define _SMT2CLK_SMT2CSEL_LENGTH                            0x3
#define _SMT2CLK_SMT2CSEL_MASK                              0x7
#define _SMT2CLK_SMT2CSEL0_POSN                             0x0
#define _SMT2CLK_SMT2CSEL0_POSITION                         0x0
#define _SMT2CLK_SMT2CSEL0_SIZE                             0x1
#define _SMT2CLK_SMT2CSEL0_LENGTH                           0x1
#define _SMT2CLK_SMT2CSEL0_MASK                             0x1
#define _SMT2CLK_SMT2CSEL1_POSN                             0x1
#define _SMT2CLK_SMT2CSEL1_POSITION                         0x1
#define _SMT2CLK_SMT2CSEL1_SIZE                             0x1
#define _SMT2CLK_SMT2CSEL1_LENGTH                           0x1
#define _SMT2CLK_SMT2CSEL1_MASK                             0x2
#define _SMT2CLK_SMT2CSEL2_POSN                             0x2
#define _SMT2CLK_SMT2CSEL2_POSITION                         0x2
#define _SMT2CLK_SMT2CSEL2_SIZE                             0x1
#define _SMT2CLK_SMT2CSEL2_LENGTH                           0x1
#define _SMT2CLK_SMT2CSEL2_MASK                             0x4

// Register: SMT2SIG
#define SMT2SIG SMT2SIG
extern volatile unsigned char           SMT2SIG             __at(0x51C);
#ifndef _LIB_BUILD
asm("SMT2SIG equ 051Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :5;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
    };
    struct {
        unsigned SMT2SSEL               :5;
    };
    struct {
        unsigned SMT2SSEL0              :1;
        unsigned SMT2SSEL1              :1;
        unsigned SMT2SSEL2              :1;
        unsigned SMT2SSEL3              :1;
        unsigned SMT2SSEL4              :1;
    };
} SMT2SIGbits_t;
extern volatile SMT2SIGbits_t SMT2SIGbits __at(0x51C);
// bitfield macros
#define _SMT2SIG_SSEL_POSN                                  0x0
#define _SMT2SIG_SSEL_POSITION                              0x0
#define _SMT2SIG_SSEL_SIZE                                  0x5
#define _SMT2SIG_SSEL_LENGTH                                0x5
#define _SMT2SIG_SSEL_MASK                                  0x1F
#define _SMT2SIG_SSEL0_POSN                                 0x0
#define _SMT2SIG_SSEL0_POSITION                             0x0
#define _SMT2SIG_SSEL0_SIZE                                 0x1
#define _SMT2SIG_SSEL0_LENGTH                               0x1
#define _SMT2SIG_SSEL0_MASK                                 0x1
#define _SMT2SIG_SSEL1_POSN                                 0x1
#define _SMT2SIG_SSEL1_POSITION                             0x1
#define _SMT2SIG_SSEL1_SIZE                                 0x1
#define _SMT2SIG_SSEL1_LENGTH                               0x1
#define _SMT2SIG_SSEL1_MASK                                 0x2
#define _SMT2SIG_SSEL2_POSN                                 0x2
#define _SMT2SIG_SSEL2_POSITION                             0x2
#define _SMT2SIG_SSEL2_SIZE                                 0x1
#define _SMT2SIG_SSEL2_LENGTH                               0x1
#define _SMT2SIG_SSEL2_MASK                                 0x4
#define _SMT2SIG_SSEL3_POSN                                 0x3
#define _SMT2SIG_SSEL3_POSITION                             0x3
#define _SMT2SIG_SSEL3_SIZE                                 0x1
#define _SMT2SIG_SSEL3_LENGTH                               0x1
#define _SMT2SIG_SSEL3_MASK                                 0x8
#define _SMT2SIG_SSEL4_POSN                                 0x4
#define _SMT2SIG_SSEL4_POSITION                             0x4
#define _SMT2SIG_SSEL4_SIZE                                 0x1
#define _SMT2SIG_SSEL4_LENGTH                               0x1
#define _SMT2SIG_SSEL4_MASK                                 0x10
#define _SMT2SIG_SMT2SSEL_POSN                              0x0
#define _SMT2SIG_SMT2SSEL_POSITION                          0x0
#define _SMT2SIG_SMT2SSEL_SIZE                              0x5
#define _SMT2SIG_SMT2SSEL_LENGTH                            0x5
#define _SMT2SIG_SMT2SSEL_MASK                              0x1F
#define _SMT2SIG_SMT2SSEL0_POSN                             0x0
#define _SMT2SIG_SMT2SSEL0_POSITION                         0x0
#define _SMT2SIG_SMT2SSEL0_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL0_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL0_MASK                             0x1
#define _SMT2SIG_SMT2SSEL1_POSN                             0x1
#define _SMT2SIG_SMT2SSEL1_POSITION                         0x1
#define _SMT2SIG_SMT2SSEL1_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL1_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL1_MASK                             0x2
#define _SMT2SIG_SMT2SSEL2_POSN                             0x2
#define _SMT2SIG_SMT2SSEL2_POSITION                         0x2
#define _SMT2SIG_SMT2SSEL2_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL2_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL2_MASK                             0x4
#define _SMT2SIG_SMT2SSEL3_POSN                             0x3
#define _SMT2SIG_SMT2SSEL3_POSITION                         0x3
#define _SMT2SIG_SMT2SSEL3_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL3_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL3_MASK                             0x8
#define _SMT2SIG_SMT2SSEL4_POSN                             0x4
#define _SMT2SIG_SMT2SSEL4_POSITION                         0x4
#define _SMT2SIG_SMT2SSEL4_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL4_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL4_MASK                             0x10

// Register: SMT2WIN
#define SMT2WIN SMT2WIN
extern volatile unsigned char           SMT2WIN             __at(0x51D);
#ifndef _LIB_BUILD
asm("SMT2WIN equ 051Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :5;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
    };
    struct {
        unsigned SMT2WSEL               :5;
    };
    struct {
        unsigned SMT2WSEL0              :1;
        unsigned SMT2WSEL1              :1;
        unsigned SMT2WSEL2              :1;
        unsigned SMT2WSEL3              :1;
        unsigned SMT2WSEL4              :1;
    };
} SMT2WINbits_t;
extern volatile SMT2WINbits_t SMT2WINbits __at(0x51D);
// bitfield macros
#define _SMT2WIN_WSEL_POSN                                  0x0
#define _SMT2WIN_WSEL_POSITION                              0x0
#define _SMT2WIN_WSEL_SIZE                                  0x5
#define _SMT2WIN_WSEL_LENGTH                                0x5
#define _SMT2WIN_WSEL_MASK                                  0x1F
#define _SMT2WIN_WSEL0_POSN                                 0x0
#define _SMT2WIN_WSEL0_POSITION                             0x0
#define _SMT2WIN_WSEL0_SIZE                                 0x1
#define _SMT2WIN_WSEL0_LENGTH                               0x1
#define _SMT2WIN_WSEL0_MASK                                 0x1
#define _SMT2WIN_WSEL1_POSN                                 0x1
#define _SMT2WIN_WSEL1_POSITION                             0x1
#define _SMT2WIN_WSEL1_SIZE                                 0x1
#define _SMT2WIN_WSEL1_LENGTH                               0x1
#define _SMT2WIN_WSEL1_MASK                                 0x2
#define _SMT2WIN_WSEL2_POSN                                 0x2
#define _SMT2WIN_WSEL2_POSITION                             0x2
#define _SMT2WIN_WSEL2_SIZE                                 0x1
#define _SMT2WIN_WSEL2_LENGTH                               0x1
#define _SMT2WIN_WSEL2_MASK                                 0x4
#define _SMT2WIN_WSEL3_POSN                                 0x3
#define _SMT2WIN_WSEL3_POSITION                             0x3
#define _SMT2WIN_WSEL3_SIZE                                 0x1
#define _SMT2WIN_WSEL3_LENGTH                               0x1
#define _SMT2WIN_WSEL3_MASK                                 0x8
#define _SMT2WIN_WSEL4_POSN                                 0x4
#define _SMT2WIN_WSEL4_POSITION                             0x4
#define _SMT2WIN_WSEL4_SIZE                                 0x1
#define _SMT2WIN_WSEL4_LENGTH                               0x1
#define _SMT2WIN_WSEL4_MASK                                 0x10
#define _SMT2WIN_SMT2WSEL_POSN                              0x0
#define _SMT2WIN_SMT2WSEL_POSITION                          0x0
#define _SMT2WIN_SMT2WSEL_SIZE                              0x5
#define _SMT2WIN_SMT2WSEL_LENGTH                            0x5
#define _SMT2WIN_SMT2WSEL_MASK                              0x1F
#define _SMT2WIN_SMT2WSEL0_POSN                             0x0
#define _SMT2WIN_SMT2WSEL0_POSITION                         0x0
#define _SMT2WIN_SMT2WSEL0_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL0_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL0_MASK                             0x1
#define _SMT2WIN_SMT2WSEL1_POSN                             0x1
#define _SMT2WIN_SMT2WSEL1_POSITION                         0x1
#define _SMT2WIN_SMT2WSEL1_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL1_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL1_MASK                             0x2
#define _SMT2WIN_SMT2WSEL2_POSN                             0x2
#define _SMT2WIN_SMT2WSEL2_POSITION                         0x2
#define _SMT2WIN_SMT2WSEL2_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL2_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL2_MASK                             0x4
#define _SMT2WIN_SMT2WSEL3_POSN                             0x3
#define _SMT2WIN_SMT2WSEL3_POSITION                         0x3
#define _SMT2WIN_SMT2WSEL3_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL3_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL3_MASK                             0x8
#define _SMT2WIN_SMT2WSEL4_POSN                             0x4
#define _SMT2WIN_SMT2WSEL4_POSITION                         0x4
#define _SMT2WIN_SMT2WSEL4_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL4_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL4_MASK                             0x10

// Register: NCO1ACC
#define NCO1ACC NCO1ACC
#ifndef __CCI__
extern volatile __uint24                NCO1ACC             __at(0x58C);
#endif
#ifndef _LIB_BUILD
asm("NCO1ACC equ 058Ch");
#endif

// Register: NCO1ACCL
#define NCO1ACCL NCO1ACCL
extern volatile unsigned char           NCO1ACCL            __at(0x58C);
#ifndef _LIB_BUILD
asm("NCO1ACCL equ 058Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1ACC0               :1;
        unsigned NCO1ACC1               :1;
        unsigned NCO1ACC2               :1;
        unsigned NCO1ACC3               :1;
        unsigned NCO1ACC4               :1;
        unsigned NCO1ACC5               :1;
        unsigned NCO1ACC6               :1;
        unsigned NCO1ACC7               :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCLbits_t;
extern volatile NCO1ACCLbits_t NCO1ACCLbits __at(0x58C);
// bitfield macros
#define _NCO1ACCL_NCO1ACC0_POSN                             0x0
#define _NCO1ACCL_NCO1ACC0_POSITION                         0x0
#define _NCO1ACCL_NCO1ACC0_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC0_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC0_MASK                             0x1
#define _NCO1ACCL_NCO1ACC1_POSN                             0x1
#define _NCO1ACCL_NCO1ACC1_POSITION                         0x1
#define _NCO1ACCL_NCO1ACC1_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC1_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC1_MASK                             0x2
#define _NCO1ACCL_NCO1ACC2_POSN                             0x2
#define _NCO1ACCL_NCO1ACC2_POSITION                         0x2
#define _NCO1ACCL_NCO1ACC2_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC2_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC2_MASK                             0x4
#define _NCO1ACCL_NCO1ACC3_POSN                             0x3
#define _NCO1ACCL_NCO1ACC3_POSITION                         0x3
#define _NCO1ACCL_NCO1ACC3_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC3_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC3_MASK                             0x8
#define _NCO1ACCL_NCO1ACC4_POSN                             0x4
#define _NCO1ACCL_NCO1ACC4_POSITION                         0x4
#define _NCO1ACCL_NCO1ACC4_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC4_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC4_MASK                             0x10
#define _NCO1ACCL_NCO1ACC5_POSN                             0x5
#define _NCO1ACCL_NCO1ACC5_POSITION                         0x5
#define _NCO1ACCL_NCO1ACC5_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC5_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC5_MASK                             0x20
#define _NCO1ACCL_NCO1ACC6_POSN                             0x6
#define _NCO1ACCL_NCO1ACC6_POSITION                         0x6
#define _NCO1ACCL_NCO1ACC6_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC6_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC6_MASK                             0x40
#define _NCO1ACCL_NCO1ACC7_POSN                             0x7
#define _NCO1ACCL_NCO1ACC7_POSITION                         0x7
#define _NCO1ACCL_NCO1ACC7_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC7_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC7_MASK                             0x80
#define _NCO1ACCL_NCO1ACC_POSN                              0x0
#define _NCO1ACCL_NCO1ACC_POSITION                          0x0
#define _NCO1ACCL_NCO1ACC_SIZE                              0x8
#define _NCO1ACCL_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCL_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCH
#define NCO1ACCH NCO1ACCH
extern volatile unsigned char           NCO1ACCH            __at(0x58D);
#ifndef _LIB_BUILD
asm("NCO1ACCH equ 058Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1ACC8               :1;
        unsigned NCO1ACC9               :1;
        unsigned NCO1ACC10              :1;
        unsigned NCO1ACC11              :1;
        unsigned NCO1ACC12              :1;
        unsigned NCO1ACC13              :1;
        unsigned NCO1ACC14              :1;
        unsigned NCO1ACC15              :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCHbits_t;
extern volatile NCO1ACCHbits_t NCO1ACCHbits __at(0x58D);
// bitfield macros
#define _NCO1ACCH_NCO1ACC8_POSN                             0x0
#define _NCO1ACCH_NCO1ACC8_POSITION                         0x0
#define _NCO1ACCH_NCO1ACC8_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC8_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC8_MASK                             0x1
#define _NCO1ACCH_NCO1ACC9_POSN                             0x1
#define _NCO1ACCH_NCO1ACC9_POSITION                         0x1
#define _NCO1ACCH_NCO1ACC9_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC9_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC9_MASK                             0x2
#define _NCO1ACCH_NCO1ACC10_POSN                            0x2
#define _NCO1ACCH_NCO1ACC10_POSITION                        0x2
#define _NCO1ACCH_NCO1ACC10_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC10_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC10_MASK                            0x4
#define _NCO1ACCH_NCO1ACC11_POSN                            0x3
#define _NCO1ACCH_NCO1ACC11_POSITION                        0x3
#define _NCO1ACCH_NCO1ACC11_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC11_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC11_MASK                            0x8
#define _NCO1ACCH_NCO1ACC12_POSN                            0x4
#define _NCO1ACCH_NCO1ACC12_POSITION                        0x4
#define _NCO1ACCH_NCO1ACC12_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC12_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC12_MASK                            0x10
#define _NCO1ACCH_NCO1ACC13_POSN                            0x5
#define _NCO1ACCH_NCO1ACC13_POSITION                        0x5
#define _NCO1ACCH_NCO1ACC13_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC13_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC13_MASK                            0x20
#define _NCO1ACCH_NCO1ACC14_POSN                            0x6
#define _NCO1ACCH_NCO1ACC14_POSITION                        0x6
#define _NCO1ACCH_NCO1ACC14_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC14_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC14_MASK                            0x40
#define _NCO1ACCH_NCO1ACC15_POSN                            0x7
#define _NCO1ACCH_NCO1ACC15_POSITION                        0x7
#define _NCO1ACCH_NCO1ACC15_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC15_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC15_MASK                            0x80
#define _NCO1ACCH_NCO1ACC_POSN                              0x0
#define _NCO1ACCH_NCO1ACC_POSITION                          0x0
#define _NCO1ACCH_NCO1ACC_SIZE                              0x8
#define _NCO1ACCH_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCH_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCU
#define NCO1ACCU NCO1ACCU
extern volatile unsigned char           NCO1ACCU            __at(0x58E);
#ifndef _LIB_BUILD
asm("NCO1ACCU equ 058Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1ACC16              :1;
        unsigned NCO1ACC17              :1;
        unsigned NCO1ACC18              :1;
        unsigned NCO1ACC19              :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCUbits_t;
extern volatile NCO1ACCUbits_t NCO1ACCUbits __at(0x58E);
// bitfield macros
#define _NCO1ACCU_NCO1ACC16_POSN                            0x0
#define _NCO1ACCU_NCO1ACC16_POSITION                        0x0
#define _NCO1ACCU_NCO1ACC16_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC16_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC16_MASK                            0x1
#define _NCO1ACCU_NCO1ACC17_POSN                            0x1
#define _NCO1ACCU_NCO1ACC17_POSITION                        0x1
#define _NCO1ACCU_NCO1ACC17_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC17_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC17_MASK                            0x2
#define _NCO1ACCU_NCO1ACC18_POSN                            0x2
#define _NCO1ACCU_NCO1ACC18_POSITION                        0x2
#define _NCO1ACCU_NCO1ACC18_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC18_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC18_MASK                            0x4
#define _NCO1ACCU_NCO1ACC19_POSN                            0x3
#define _NCO1ACCU_NCO1ACC19_POSITION                        0x3
#define _NCO1ACCU_NCO1ACC19_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC19_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC19_MASK                            0x8
#define _NCO1ACCU_NCO1ACC_POSN                              0x0
#define _NCO1ACCU_NCO1ACC_POSITION                          0x0
#define _NCO1ACCU_NCO1ACC_SIZE                              0x8
#define _NCO1ACCU_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCU_NCO1ACC_MASK                              0xFF

// Register: NCO1INC
#define NCO1INC NCO1INC
#ifndef __CCI__
extern volatile __uint24                NCO1INC             __at(0x58F);
#endif
#ifndef _LIB_BUILD
asm("NCO1INC equ 058Fh");
#endif

// Register: NCO1INCL
#define NCO1INCL NCO1INCL
extern volatile unsigned char           NCO1INCL            __at(0x58F);
#ifndef _LIB_BUILD
asm("NCO1INCL equ 058Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1INC0               :1;
        unsigned NCO1INC1               :1;
        unsigned NCO1INC2               :1;
        unsigned NCO1INC3               :1;
        unsigned NCO1INC4               :1;
        unsigned NCO1INC5               :1;
        unsigned NCO1INC6               :1;
        unsigned NCO1INC7               :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCLbits_t;
extern volatile NCO1INCLbits_t NCO1INCLbits __at(0x58F);
// bitfield macros
#define _NCO1INCL_NCO1INC0_POSN                             0x0
#define _NCO1INCL_NCO1INC0_POSITION                         0x0
#define _NCO1INCL_NCO1INC0_SIZE                             0x1
#define _NCO1INCL_NCO1INC0_LENGTH                           0x1
#define _NCO1INCL_NCO1INC0_MASK                             0x1
#define _NCO1INCL_NCO1INC1_POSN                             0x1
#define _NCO1INCL_NCO1INC1_POSITION                         0x1
#define _NCO1INCL_NCO1INC1_SIZE                             0x1
#define _NCO1INCL_NCO1INC1_LENGTH                           0x1
#define _NCO1INCL_NCO1INC1_MASK                             0x2
#define _NCO1INCL_NCO1INC2_POSN                             0x2
#define _NCO1INCL_NCO1INC2_POSITION                         0x2
#define _NCO1INCL_NCO1INC2_SIZE                             0x1
#define _NCO1INCL_NCO1INC2_LENGTH                           0x1
#define _NCO1INCL_NCO1INC2_MASK                             0x4
#define _NCO1INCL_NCO1INC3_POSN                             0x3
#define _NCO1INCL_NCO1INC3_POSITION                         0x3
#define _NCO1INCL_NCO1INC3_SIZE                             0x1
#define _NCO1INCL_NCO1INC3_LENGTH                           0x1
#define _NCO1INCL_NCO1INC3_MASK                             0x8
#define _NCO1INCL_NCO1INC4_POSN                             0x4
#define _NCO1INCL_NCO1INC4_POSITION                         0x4
#define _NCO1INCL_NCO1INC4_SIZE                             0x1
#define _NCO1INCL_NCO1INC4_LENGTH                           0x1
#define _NCO1INCL_NCO1INC4_MASK                             0x10
#define _NCO1INCL_NCO1INC5_POSN                             0x5
#define _NCO1INCL_NCO1INC5_POSITION                         0x5
#define _NCO1INCL_NCO1INC5_SIZE                             0x1
#define _NCO1INCL_NCO1INC5_LENGTH                           0x1
#define _NCO1INCL_NCO1INC5_MASK                             0x20
#define _NCO1INCL_NCO1INC6_POSN                             0x6
#define _NCO1INCL_NCO1INC6_POSITION                         0x6
#define _NCO1INCL_NCO1INC6_SIZE                             0x1
#define _NCO1INCL_NCO1INC6_LENGTH                           0x1
#define _NCO1INCL_NCO1INC6_MASK                             0x40
#define _NCO1INCL_NCO1INC7_POSN                             0x7
#define _NCO1INCL_NCO1INC7_POSITION                         0x7
#define _NCO1INCL_NCO1INC7_SIZE                             0x1
#define _NCO1INCL_NCO1INC7_LENGTH                           0x1
#define _NCO1INCL_NCO1INC7_MASK                             0x80
#define _NCO1INCL_NCO1INC_POSN                              0x0
#define _NCO1INCL_NCO1INC_POSITION                          0x0
#define _NCO1INCL_NCO1INC_SIZE                              0x8
#define _NCO1INCL_NCO1INC_LENGTH                            0x8
#define _NCO1INCL_NCO1INC_MASK                              0xFF

// Register: NCO1INCH
#define NCO1INCH NCO1INCH
extern volatile unsigned char           NCO1INCH            __at(0x590);
#ifndef _LIB_BUILD
asm("NCO1INCH equ 0590h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1INC8               :1;
        unsigned NCO1INC9               :1;
        unsigned NCO1INC10              :1;
        unsigned NCO1INC11              :1;
        unsigned NCO1INC12              :1;
        unsigned NCO1INC13              :1;
        unsigned NCO1INC14              :1;
        unsigned NCO1INC15              :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCHbits_t;
extern volatile NCO1INCHbits_t NCO1INCHbits __at(0x590);
// bitfield macros
#define _NCO1INCH_NCO1INC8_POSN                             0x0
#define _NCO1INCH_NCO1INC8_POSITION                         0x0
#define _NCO1INCH_NCO1INC8_SIZE                             0x1
#define _NCO1INCH_NCO1INC8_LENGTH                           0x1
#define _NCO1INCH_NCO1INC8_MASK                             0x1
#define _NCO1INCH_NCO1INC9_POSN                             0x1
#define _NCO1INCH_NCO1INC9_POSITION                         0x1
#define _NCO1INCH_NCO1INC9_SIZE                             0x1
#define _NCO1INCH_NCO1INC9_LENGTH                           0x1
#define _NCO1INCH_NCO1INC9_MASK                             0x2
#define _NCO1INCH_NCO1INC10_POSN                            0x2
#define _NCO1INCH_NCO1INC10_POSITION                        0x2
#define _NCO1INCH_NCO1INC10_SIZE                            0x1
#define _NCO1INCH_NCO1INC10_LENGTH                          0x1
#define _NCO1INCH_NCO1INC10_MASK                            0x4
#define _NCO1INCH_NCO1INC11_POSN                            0x3
#define _NCO1INCH_NCO1INC11_POSITION                        0x3
#define _NCO1INCH_NCO1INC11_SIZE                            0x1
#define _NCO1INCH_NCO1INC11_LENGTH                          0x1
#define _NCO1INCH_NCO1INC11_MASK                            0x8
#define _NCO1INCH_NCO1INC12_POSN                            0x4
#define _NCO1INCH_NCO1INC12_POSITION                        0x4
#define _NCO1INCH_NCO1INC12_SIZE                            0x1
#define _NCO1INCH_NCO1INC12_LENGTH                          0x1
#define _NCO1INCH_NCO1INC12_MASK                            0x10
#define _NCO1INCH_NCO1INC13_POSN                            0x5
#define _NCO1INCH_NCO1INC13_POSITION                        0x5
#define _NCO1INCH_NCO1INC13_SIZE                            0x1
#define _NCO1INCH_NCO1INC13_LENGTH                          0x1
#define _NCO1INCH_NCO1INC13_MASK                            0x20
#define _NCO1INCH_NCO1INC14_POSN                            0x6
#define _NCO1INCH_NCO1INC14_POSITION                        0x6
#define _NCO1INCH_NCO1INC14_SIZE                            0x1
#define _NCO1INCH_NCO1INC14_LENGTH                          0x1
#define _NCO1INCH_NCO1INC14_MASK                            0x40
#define _NCO1INCH_NCO1INC15_POSN                            0x7
#define _NCO1INCH_NCO1INC15_POSITION                        0x7
#define _NCO1INCH_NCO1INC15_SIZE                            0x1
#define _NCO1INCH_NCO1INC15_LENGTH                          0x1
#define _NCO1INCH_NCO1INC15_MASK                            0x80
#define _NCO1INCH_NCO1INC_POSN                              0x0
#define _NCO1INCH_NCO1INC_POSITION                          0x0
#define _NCO1INCH_NCO1INC_SIZE                              0x8
#define _NCO1INCH_NCO1INC_LENGTH                            0x8
#define _NCO1INCH_NCO1INC_MASK                              0xFF

// Register: NCO1INCU
#define NCO1INCU NCO1INCU
extern volatile unsigned char           NCO1INCU            __at(0x591);
#ifndef _LIB_BUILD
asm("NCO1INCU equ 0591h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1INC16              :1;
        unsigned NCO1INC17              :1;
        unsigned NCO1INC18              :1;
        unsigned NCO1INC19              :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCUbits_t;
extern volatile NCO1INCUbits_t NCO1INCUbits __at(0x591);
// bitfield macros
#define _NCO1INCU_NCO1INC16_POSN                            0x0
#define _NCO1INCU_NCO1INC16_POSITION                        0x0
#define _NCO1INCU_NCO1INC16_SIZE                            0x1
#define _NCO1INCU_NCO1INC16_LENGTH                          0x1
#define _NCO1INCU_NCO1INC16_MASK                            0x1
#define _NCO1INCU_NCO1INC17_POSN                            0x1
#define _NCO1INCU_NCO1INC17_POSITION                        0x1
#define _NCO1INCU_NCO1INC17_SIZE                            0x1
#define _NCO1INCU_NCO1INC17_LENGTH                          0x1
#define _NCO1INCU_NCO1INC17_MASK                            0x2
#define _NCO1INCU_NCO1INC18_POSN                            0x2
#define _NCO1INCU_NCO1INC18_POSITION                        0x2
#define _NCO1INCU_NCO1INC18_SIZE                            0x1
#define _NCO1INCU_NCO1INC18_LENGTH                          0x1
#define _NCO1INCU_NCO1INC18_MASK                            0x4
#define _NCO1INCU_NCO1INC19_POSN                            0x3
#define _NCO1INCU_NCO1INC19_POSITION                        0x3
#define _NCO1INCU_NCO1INC19_SIZE                            0x1
#define _NCO1INCU_NCO1INC19_LENGTH                          0x1
#define _NCO1INCU_NCO1INC19_MASK                            0x8
#define _NCO1INCU_NCO1INC_POSN                              0x0
#define _NCO1INCU_NCO1INC_POSITION                          0x0
#define _NCO1INCU_NCO1INC_SIZE                              0x8
#define _NCO1INCU_NCO1INC_LENGTH                            0x8
#define _NCO1INCU_NCO1INC_MASK                              0xFF

// Register: NCO1CON
#define NCO1CON NCO1CON
extern volatile unsigned char           NCO1CON             __at(0x592);
#ifndef _LIB_BUILD
asm("NCO1CON equ 0592h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned N1PFM                  :1;
        unsigned                        :3;
        unsigned N1POL                  :1;
        unsigned N1OUT                  :1;
        unsigned                        :1;
        unsigned N1EN                   :1;
    };
} NCO1CONbits_t;
extern volatile NCO1CONbits_t NCO1CONbits __at(0x592);
// bitfield macros
#define _NCO1CON_N1PFM_POSN                                 0x0
#define _NCO1CON_N1PFM_POSITION                             0x0
#define _NCO1CON_N1PFM_SIZE                                 0x1
#define _NCO1CON_N1PFM_LENGTH                               0x1
#define _NCO1CON_N1PFM_MASK                                 0x1
#define _NCO1CON_N1POL_POSN                                 0x4
#define _NCO1CON_N1POL_POSITION                             0x4
#define _NCO1CON_N1POL_SIZE                                 0x1
#define _NCO1CON_N1POL_LENGTH                               0x1
#define _NCO1CON_N1POL_MASK                                 0x10
#define _NCO1CON_N1OUT_POSN                                 0x5
#define _NCO1CON_N1OUT_POSITION                             0x5
#define _NCO1CON_N1OUT_SIZE                                 0x1
#define _NCO1CON_N1OUT_LENGTH                               0x1
#define _NCO1CON_N1OUT_MASK                                 0x20
#define _NCO1CON_N1EN_POSN                                  0x7
#define _NCO1CON_N1EN_POSITION                              0x7
#define _NCO1CON_N1EN_SIZE                                  0x1
#define _NCO1CON_N1EN_LENGTH                                0x1
#define _NCO1CON_N1EN_MASK                                  0x80

// Register: NCO1CLK
#define NCO1CLK NCO1CLK
extern volatile unsigned char           NCO1CLK             __at(0x593);
#ifndef _LIB_BUILD
asm("NCO1CLK equ 0593h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned N1CKS0                 :1;
        unsigned N1CKS1                 :1;
        unsigned N1CKS2                 :1;
        unsigned                        :2;
        unsigned N1PWS0                 :1;
        unsigned N1PWS1                 :1;
        unsigned N1PWS2                 :1;
    };
    struct {
        unsigned N1CKS                  :4;
        unsigned                        :1;
        unsigned N1PWS                  :3;
    };
} NCO1CLKbits_t;
extern volatile NCO1CLKbits_t NCO1CLKbits __at(0x593);
// bitfield macros
#define _NCO1CLK_N1CKS0_POSN                                0x0
#define _NCO1CLK_N1CKS0_POSITION                            0x0
#define _NCO1CLK_N1CKS0_SIZE                                0x1
#define _NCO1CLK_N1CKS0_LENGTH                              0x1
#define _NCO1CLK_N1CKS0_MASK                                0x1
#define _NCO1CLK_N1CKS1_POSN                                0x1
#define _NCO1CLK_N1CKS1_POSITION                            0x1
#define _NCO1CLK_N1CKS1_SIZE                                0x1
#define _NCO1CLK_N1CKS1_LENGTH                              0x1
#define _NCO1CLK_N1CKS1_MASK                                0x2
#define _NCO1CLK_N1CKS2_POSN                                0x2
#define _NCO1CLK_N1CKS2_POSITION                            0x2
#define _NCO1CLK_N1CKS2_SIZE                                0x1
#define _NCO1CLK_N1CKS2_LENGTH                              0x1
#define _NCO1CLK_N1CKS2_MASK                                0x4
#define _NCO1CLK_N1PWS0_POSN                                0x5
#define _NCO1CLK_N1PWS0_POSITION                            0x5
#define _NCO1CLK_N1PWS0_SIZE                                0x1
#define _NCO1CLK_N1PWS0_LENGTH                              0x1
#define _NCO1CLK_N1PWS0_MASK                                0x20
#define _NCO1CLK_N1PWS1_POSN                                0x6
#define _NCO1CLK_N1PWS1_POSITION                            0x6
#define _NCO1CLK_N1PWS1_SIZE                                0x1
#define _NCO1CLK_N1PWS1_LENGTH                              0x1
#define _NCO1CLK_N1PWS1_MASK                                0x40
#define _NCO1CLK_N1PWS2_POSN                                0x7
#define _NCO1CLK_N1PWS2_POSITION                            0x7
#define _NCO1CLK_N1PWS2_SIZE                                0x1
#define _NCO1CLK_N1PWS2_LENGTH                              0x1
#define _NCO1CLK_N1PWS2_MASK                                0x80
#define _NCO1CLK_N1CKS_POSN                                 0x0
#define _NCO1CLK_N1CKS_POSITION                             0x0
#define _NCO1CLK_N1CKS_SIZE                                 0x4
#define _NCO1CLK_N1CKS_LENGTH                               0x4
#define _NCO1CLK_N1CKS_MASK                                 0xF
#define _NCO1CLK_N1PWS_POSN                                 0x5
#define _NCO1CLK_N1PWS_POSITION                             0x5
#define _NCO1CLK_N1PWS_SIZE                                 0x3
#define _NCO1CLK_N1PWS_LENGTH                               0x3
#define _NCO1CLK_N1PWS_MASK                                 0xE0

// Register: CWG1CLKCON
#define CWG1CLKCON CWG1CLKCON
extern volatile unsigned char           CWG1CLKCON          __at(0x60C);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 060Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x60C);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0x60D);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 060Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IS                     :4;
    };
    struct {
        unsigned CWG1ISM0               :1;
        unsigned CWG1ISM1               :1;
        unsigned CWG1ISM2               :1;
        unsigned CWG1ISM3               :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0x60D);
// bitfield macros
#define _CWG1ISM_IS_POSN                                    0x0
#define _CWG1ISM_IS_POSITION                                0x0
#define _CWG1ISM_IS_SIZE                                    0x4
#define _CWG1ISM_IS_LENGTH                                  0x4
#define _CWG1ISM_IS_MASK                                    0xF
#define _CWG1ISM_CWG1ISM0_POSN                              0x0
#define _CWG1ISM_CWG1ISM0_POSITION                          0x0
#define _CWG1ISM_CWG1ISM0_SIZE                              0x1
#define _CWG1ISM_CWG1ISM0_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM0_MASK                              0x1
#define _CWG1ISM_CWG1ISM1_POSN                              0x1
#define _CWG1ISM_CWG1ISM1_POSITION                          0x1
#define _CWG1ISM_CWG1ISM1_SIZE                              0x1
#define _CWG1ISM_CWG1ISM1_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM1_MASK                              0x2
#define _CWG1ISM_CWG1ISM2_POSN                              0x2
#define _CWG1ISM_CWG1ISM2_POSITION                          0x2
#define _CWG1ISM_CWG1ISM2_SIZE                              0x1
#define _CWG1ISM_CWG1ISM2_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM2_MASK                              0x4
#define _CWG1ISM_CWG1ISM3_POSN                              0x3
#define _CWG1ISM_CWG1ISM3_POSITION                          0x3
#define _CWG1ISM_CWG1ISM3_SIZE                              0x1
#define _CWG1ISM_CWG1ISM3_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM3_MASK                              0x8

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x60E);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 060Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :6;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x60E);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x6
#define _CWG1DBR_DBR_LENGTH                                 0x6
#define _CWG1DBR_DBR_MASK                                   0x3F
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x6
#define _CWG1DBR_CWG1DBR_LENGTH                             0x6
#define _CWG1DBR_CWG1DBR_MASK                               0x3F
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x60F);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 060Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :6;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x60F);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x6
#define _CWG1DBF_DBF_LENGTH                                 0x6
#define _CWG1DBF_DBF_MASK                                   0x3F
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x6
#define _CWG1DBF_CWG1DBF_LENGTH                             0x6
#define _CWG1DBF_CWG1DBF_MASK                               0x3F
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x610);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 0610h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x610);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x611);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 0611h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x611);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x612);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 0612h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSBD               :2;
        unsigned CWG1REN                :1;
        unsigned CWG1SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x612);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30
#define _CWG1AS0_CWG1REN_POSN                               0x6
#define _CWG1AS0_CWG1REN_POSITION                           0x6
#define _CWG1AS0_CWG1REN_SIZE                               0x1
#define _CWG1AS0_CWG1REN_LENGTH                             0x1
#define _CWG1AS0_CWG1REN_MASK                               0x40
#define _CWG1AS0_CWG1SHUTDOWN_POSN                          0x7
#define _CWG1AS0_CWG1SHUTDOWN_POSITION                      0x7
#define _CWG1AS0_CWG1SHUTDOWN_SIZE                          0x1
#define _CWG1AS0_CWG1SHUTDOWN_LENGTH                        0x1
#define _CWG1AS0_CWG1SHUTDOWN_MASK                          0x80
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x613);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 0613h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x613);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS3E_POSN                                  0x3
#define _CWG1AS1_AS3E_POSITION                              0x3
#define _CWG1AS1_AS3E_SIZE                                  0x1
#define _CWG1AS1_AS3E_LENGTH                                0x1
#define _CWG1AS1_AS3E_MASK                                  0x8
#define _CWG1AS1_AS4E_POSN                                  0x4
#define _CWG1AS1_AS4E_POSITION                              0x4
#define _CWG1AS1_AS4E_SIZE                                  0x1
#define _CWG1AS1_AS4E_LENGTH                                0x1
#define _CWG1AS1_AS4E_MASK                                  0x10
#define _CWG1AS1_AS5E_POSN                                  0x5
#define _CWG1AS1_AS5E_POSITION                              0x5
#define _CWG1AS1_AS5E_SIZE                                  0x1
#define _CWG1AS1_AS5E_LENGTH                                0x1
#define _CWG1AS1_AS5E_MASK                                  0x20
#define _CWG1AS1_AS6E_POSN                                  0x6
#define _CWG1AS1_AS6E_POSITION                              0x6
#define _CWG1AS1_AS6E_SIZE                                  0x1
#define _CWG1AS1_AS6E_LENGTH                                0x1
#define _CWG1AS1_AS6E_MASK                                  0x40

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0x614);
#ifndef _LIB_BUILD
asm("CWG1STR equ 0614h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0x614);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: CWG2CLKCON
#define CWG2CLKCON CWG2CLKCON
extern volatile unsigned char           CWG2CLKCON          __at(0x616);
#ifndef _LIB_BUILD
asm("CWG2CLKCON equ 0616h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG2CS                 :1;
    };
} CWG2CLKCONbits_t;
extern volatile CWG2CLKCONbits_t CWG2CLKCONbits __at(0x616);
// bitfield macros
#define _CWG2CLKCON_CS_POSN                                 0x0
#define _CWG2CLKCON_CS_POSITION                             0x0
#define _CWG2CLKCON_CS_SIZE                                 0x1
#define _CWG2CLKCON_CS_LENGTH                               0x1
#define _CWG2CLKCON_CS_MASK                                 0x1
#define _CWG2CLKCON_CWG2CS_POSN                             0x0
#define _CWG2CLKCON_CWG2CS_POSITION                         0x0
#define _CWG2CLKCON_CWG2CS_SIZE                             0x1
#define _CWG2CLKCON_CWG2CS_LENGTH                           0x1
#define _CWG2CLKCON_CWG2CS_MASK                             0x1

// Register: CWG2ISM
#define CWG2ISM CWG2ISM
extern volatile unsigned char           CWG2ISM             __at(0x617);
#ifndef _LIB_BUILD
asm("CWG2ISM equ 0617h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IS                     :4;
    };
    struct {
        unsigned CWG2ISM0               :1;
        unsigned CWG2ISM1               :1;
        unsigned CWG2ISM2               :1;
        unsigned CWG2ISM3               :1;
    };
} CWG2ISMbits_t;
extern volatile CWG2ISMbits_t CWG2ISMbits __at(0x617);
// bitfield macros
#define _CWG2ISM_IS_POSN                                    0x0
#define _CWG2ISM_IS_POSITION                                0x0
#define _CWG2ISM_IS_SIZE                                    0x4
#define _CWG2ISM_IS_LENGTH                                  0x4
#define _CWG2ISM_IS_MASK                                    0xF
#define _CWG2ISM_CWG2ISM0_POSN                              0x0
#define _CWG2ISM_CWG2ISM0_POSITION                          0x0
#define _CWG2ISM_CWG2ISM0_SIZE                              0x1
#define _CWG2ISM_CWG2ISM0_LENGTH                            0x1
#define _CWG2ISM_CWG2ISM0_MASK                              0x1
#define _CWG2ISM_CWG2ISM1_POSN                              0x1
#define _CWG2ISM_CWG2ISM1_POSITION                          0x1
#define _CWG2ISM_CWG2ISM1_SIZE                              0x1
#define _CWG2ISM_CWG2ISM1_LENGTH                            0x1
#define _CWG2ISM_CWG2ISM1_MASK                              0x2
#define _CWG2ISM_CWG2ISM2_POSN                              0x2
#define _CWG2ISM_CWG2ISM2_POSITION                          0x2
#define _CWG2ISM_CWG2ISM2_SIZE                              0x1
#define _CWG2ISM_CWG2ISM2_LENGTH                            0x1
#define _CWG2ISM_CWG2ISM2_MASK                              0x4
#define _CWG2ISM_CWG2ISM3_POSN                              0x3
#define _CWG2ISM_CWG2ISM3_POSITION                          0x3
#define _CWG2ISM_CWG2ISM3_SIZE                              0x1
#define _CWG2ISM_CWG2ISM3_LENGTH                            0x1
#define _CWG2ISM_CWG2ISM3_MASK                              0x8

// Register: CWG2DBR
#define CWG2DBR CWG2DBR
extern volatile unsigned char           CWG2DBR             __at(0x618);
#ifndef _LIB_BUILD
asm("CWG2DBR equ 0618h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG2DBR                :6;
    };
    struct {
        unsigned CWG2DBR0               :1;
        unsigned CWG2DBR1               :1;
        unsigned CWG2DBR2               :1;
        unsigned CWG2DBR3               :1;
        unsigned CWG2DBR4               :1;
        unsigned CWG2DBR5               :1;
    };
} CWG2DBRbits_t;
extern volatile CWG2DBRbits_t CWG2DBRbits __at(0x618);
// bitfield macros
#define _CWG2DBR_DBR_POSN                                   0x0
#define _CWG2DBR_DBR_POSITION                               0x0
#define _CWG2DBR_DBR_SIZE                                   0x6
#define _CWG2DBR_DBR_LENGTH                                 0x6
#define _CWG2DBR_DBR_MASK                                   0x3F
#define _CWG2DBR_DBR0_POSN                                  0x0
#define _CWG2DBR_DBR0_POSITION                              0x0
#define _CWG2DBR_DBR0_SIZE                                  0x1
#define _CWG2DBR_DBR0_LENGTH                                0x1
#define _CWG2DBR_DBR0_MASK                                  0x1
#define _CWG2DBR_DBR1_POSN                                  0x1
#define _CWG2DBR_DBR1_POSITION                              0x1
#define _CWG2DBR_DBR1_SIZE                                  0x1
#define _CWG2DBR_DBR1_LENGTH                                0x1
#define _CWG2DBR_DBR1_MASK                                  0x2
#define _CWG2DBR_DBR2_POSN                                  0x2
#define _CWG2DBR_DBR2_POSITION                              0x2
#define _CWG2DBR_DBR2_SIZE                                  0x1
#define _CWG2DBR_DBR2_LENGTH                                0x1
#define _CWG2DBR_DBR2_MASK                                  0x4
#define _CWG2DBR_DBR3_POSN                                  0x3
#define _CWG2DBR_DBR3_POSITION                              0x3
#define _CWG2DBR_DBR3_SIZE                                  0x1
#define _CWG2DBR_DBR3_LENGTH                                0x1
#define _CWG2DBR_DBR3_MASK                                  0x8
#define _CWG2DBR_DBR4_POSN                                  0x4
#define _CWG2DBR_DBR4_POSITION                              0x4
#define _CWG2DBR_DBR4_SIZE                                  0x1
#define _CWG2DBR_DBR4_LENGTH                                0x1
#define _CWG2DBR_DBR4_MASK                                  0x10
#define _CWG2DBR_DBR5_POSN                                  0x5
#define _CWG2DBR_DBR5_POSITION                              0x5
#define _CWG2DBR_DBR5_SIZE                                  0x1
#define _CWG2DBR_DBR5_LENGTH                                0x1
#define _CWG2DBR_DBR5_MASK                                  0x20
#define _CWG2DBR_CWG2DBR_POSN                               0x0
#define _CWG2DBR_CWG2DBR_POSITION                           0x0
#define _CWG2DBR_CWG2DBR_SIZE                               0x6
#define _CWG2DBR_CWG2DBR_LENGTH                             0x6
#define _CWG2DBR_CWG2DBR_MASK                               0x3F
#define _CWG2DBR_CWG2DBR0_POSN                              0x0
#define _CWG2DBR_CWG2DBR0_POSITION                          0x0
#define _CWG2DBR_CWG2DBR0_SIZE                              0x1
#define _CWG2DBR_CWG2DBR0_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR0_MASK                              0x1
#define _CWG2DBR_CWG2DBR1_POSN                              0x1
#define _CWG2DBR_CWG2DBR1_POSITION                          0x1
#define _CWG2DBR_CWG2DBR1_SIZE                              0x1
#define _CWG2DBR_CWG2DBR1_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR1_MASK                              0x2
#define _CWG2DBR_CWG2DBR2_POSN                              0x2
#define _CWG2DBR_CWG2DBR2_POSITION                          0x2
#define _CWG2DBR_CWG2DBR2_SIZE                              0x1
#define _CWG2DBR_CWG2DBR2_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR2_MASK                              0x4
#define _CWG2DBR_CWG2DBR3_POSN                              0x3
#define _CWG2DBR_CWG2DBR3_POSITION                          0x3
#define _CWG2DBR_CWG2DBR3_SIZE                              0x1
#define _CWG2DBR_CWG2DBR3_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR3_MASK                              0x8
#define _CWG2DBR_CWG2DBR4_POSN                              0x4
#define _CWG2DBR_CWG2DBR4_POSITION                          0x4
#define _CWG2DBR_CWG2DBR4_SIZE                              0x1
#define _CWG2DBR_CWG2DBR4_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR4_MASK                              0x10
#define _CWG2DBR_CWG2DBR5_POSN                              0x5
#define _CWG2DBR_CWG2DBR5_POSITION                          0x5
#define _CWG2DBR_CWG2DBR5_SIZE                              0x1
#define _CWG2DBR_CWG2DBR5_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR5_MASK                              0x20

// Register: CWG2DBF
#define CWG2DBF CWG2DBF
extern volatile unsigned char           CWG2DBF             __at(0x619);
#ifndef _LIB_BUILD
asm("CWG2DBF equ 0619h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG2DBF                :6;
    };
    struct {
        unsigned CWG2DBF0               :1;
        unsigned CWG2DBF1               :1;
        unsigned CWG2DBF2               :1;
        unsigned CWG2DBF3               :1;
        unsigned CWG2DBF4               :1;
        unsigned CWG2DBF5               :1;
    };
} CWG2DBFbits_t;
extern volatile CWG2DBFbits_t CWG2DBFbits __at(0x619);
// bitfield macros
#define _CWG2DBF_DBF_POSN                                   0x0
#define _CWG2DBF_DBF_POSITION                               0x0
#define _CWG2DBF_DBF_SIZE                                   0x6
#define _CWG2DBF_DBF_LENGTH                                 0x6
#define _CWG2DBF_DBF_MASK                                   0x3F
#define _CWG2DBF_DBF0_POSN                                  0x0
#define _CWG2DBF_DBF0_POSITION                              0x0
#define _CWG2DBF_DBF0_SIZE                                  0x1
#define _CWG2DBF_DBF0_LENGTH                                0x1
#define _CWG2DBF_DBF0_MASK                                  0x1
#define _CWG2DBF_DBF1_POSN                                  0x1
#define _CWG2DBF_DBF1_POSITION                              0x1
#define _CWG2DBF_DBF1_SIZE                                  0x1
#define _CWG2DBF_DBF1_LENGTH                                0x1
#define _CWG2DBF_DBF1_MASK                                  0x2
#define _CWG2DBF_DBF2_POSN                                  0x2
#define _CWG2DBF_DBF2_POSITION                              0x2
#define _CWG2DBF_DBF2_SIZE                                  0x1
#define _CWG2DBF_DBF2_LENGTH                                0x1
#define _CWG2DBF_DBF2_MASK                                  0x4
#define _CWG2DBF_DBF3_POSN                                  0x3
#define _CWG2DBF_DBF3_POSITION                              0x3
#define _CWG2DBF_DBF3_SIZE                                  0x1
#define _CWG2DBF_DBF3_LENGTH                                0x1
#define _CWG2DBF_DBF3_MASK                                  0x8
#define _CWG2DBF_DBF4_POSN                                  0x4
#define _CWG2DBF_DBF4_POSITION                              0x4
#define _CWG2DBF_DBF4_SIZE                                  0x1
#define _CWG2DBF_DBF4_LENGTH                                0x1
#define _CWG2DBF_DBF4_MASK                                  0x10
#define _CWG2DBF_DBF5_POSN                                  0x5
#define _CWG2DBF_DBF5_POSITION                              0x5
#define _CWG2DBF_DBF5_SIZE                                  0x1
#define _CWG2DBF_DBF5_LENGTH                                0x1
#define _CWG2DBF_DBF5_MASK                                  0x20
#define _CWG2DBF_CWG2DBF_POSN                               0x0
#define _CWG2DBF_CWG2DBF_POSITION                           0x0
#define _CWG2DBF_CWG2DBF_SIZE                               0x6
#define _CWG2DBF_CWG2DBF_LENGTH                             0x6
#define _CWG2DBF_CWG2DBF_MASK                               0x3F
#define _CWG2DBF_CWG2DBF0_POSN                              0x0
#define _CWG2DBF_CWG2DBF0_POSITION                          0x0
#define _CWG2DBF_CWG2DBF0_SIZE                              0x1
#define _CWG2DBF_CWG2DBF0_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF0_MASK                              0x1
#define _CWG2DBF_CWG2DBF1_POSN                              0x1
#define _CWG2DBF_CWG2DBF1_POSITION                          0x1
#define _CWG2DBF_CWG2DBF1_SIZE                              0x1
#define _CWG2DBF_CWG2DBF1_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF1_MASK                              0x2
#define _CWG2DBF_CWG2DBF2_POSN                              0x2
#define _CWG2DBF_CWG2DBF2_POSITION                          0x2
#define _CWG2DBF_CWG2DBF2_SIZE                              0x1
#define _CWG2DBF_CWG2DBF2_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF2_MASK                              0x4
#define _CWG2DBF_CWG2DBF3_POSN                              0x3
#define _CWG2DBF_CWG2DBF3_POSITION                          0x3
#define _CWG2DBF_CWG2DBF3_SIZE                              0x1
#define _CWG2DBF_CWG2DBF3_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF3_MASK                              0x8
#define _CWG2DBF_CWG2DBF4_POSN                              0x4
#define _CWG2DBF_CWG2DBF4_POSITION                          0x4
#define _CWG2DBF_CWG2DBF4_SIZE                              0x1
#define _CWG2DBF_CWG2DBF4_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF4_MASK                              0x10
#define _CWG2DBF_CWG2DBF5_POSN                              0x5
#define _CWG2DBF_CWG2DBF5_POSITION                          0x5
#define _CWG2DBF_CWG2DBF5_SIZE                              0x1
#define _CWG2DBF_CWG2DBF5_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF5_MASK                              0x20

// Register: CWG2CON0
#define CWG2CON0 CWG2CON0
extern volatile unsigned char           CWG2CON0            __at(0x61A);
#ifndef _LIB_BUILD
asm("CWG2CON0 equ 061Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G2EN                   :1;
    };
    struct {
        unsigned CWG2MODE               :3;
        unsigned                        :3;
        unsigned CWG2LD                 :1;
        unsigned CWG2EN                 :1;
    };
    struct {
        unsigned CWG2MODE0              :1;
        unsigned CWG2MODE1              :1;
        unsigned CWG2MODE2              :1;
    };
} CWG2CON0bits_t;
extern volatile CWG2CON0bits_t CWG2CON0bits __at(0x61A);
// bitfield macros
#define _CWG2CON0_MODE_POSN                                 0x0
#define _CWG2CON0_MODE_POSITION                             0x0
#define _CWG2CON0_MODE_SIZE                                 0x3
#define _CWG2CON0_MODE_LENGTH                               0x3
#define _CWG2CON0_MODE_MASK                                 0x7
#define _CWG2CON0_LD_POSN                                   0x6
#define _CWG2CON0_LD_POSITION                               0x6
#define _CWG2CON0_LD_SIZE                                   0x1
#define _CWG2CON0_LD_LENGTH                                 0x1
#define _CWG2CON0_LD_MASK                                   0x40
#define _CWG2CON0_EN_POSN                                   0x7
#define _CWG2CON0_EN_POSITION                               0x7
#define _CWG2CON0_EN_SIZE                                   0x1
#define _CWG2CON0_EN_LENGTH                                 0x1
#define _CWG2CON0_EN_MASK                                   0x80
#define _CWG2CON0_MODE0_POSN                                0x0
#define _CWG2CON0_MODE0_POSITION                            0x0
#define _CWG2CON0_MODE0_SIZE                                0x1
#define _CWG2CON0_MODE0_LENGTH                              0x1
#define _CWG2CON0_MODE0_MASK                                0x1
#define _CWG2CON0_MODE1_POSN                                0x1
#define _CWG2CON0_MODE1_POSITION                            0x1
#define _CWG2CON0_MODE1_SIZE                                0x1
#define _CWG2CON0_MODE1_LENGTH                              0x1
#define _CWG2CON0_MODE1_MASK                                0x2
#define _CWG2CON0_MODE2_POSN                                0x2
#define _CWG2CON0_MODE2_POSITION                            0x2
#define _CWG2CON0_MODE2_SIZE                                0x1
#define _CWG2CON0_MODE2_LENGTH                              0x1
#define _CWG2CON0_MODE2_MASK                                0x4
#define _CWG2CON0_G2EN_POSN                                 0x7
#define _CWG2CON0_G2EN_POSITION                             0x7
#define _CWG2CON0_G2EN_SIZE                                 0x1
#define _CWG2CON0_G2EN_LENGTH                               0x1
#define _CWG2CON0_G2EN_MASK                                 0x80
#define _CWG2CON0_CWG2MODE_POSN                             0x0
#define _CWG2CON0_CWG2MODE_POSITION                         0x0
#define _CWG2CON0_CWG2MODE_SIZE                             0x3
#define _CWG2CON0_CWG2MODE_LENGTH                           0x3
#define _CWG2CON0_CWG2MODE_MASK                             0x7
#define _CWG2CON0_CWG2LD_POSN                               0x6
#define _CWG2CON0_CWG2LD_POSITION                           0x6
#define _CWG2CON0_CWG2LD_SIZE                               0x1
#define _CWG2CON0_CWG2LD_LENGTH                             0x1
#define _CWG2CON0_CWG2LD_MASK                               0x40
#define _CWG2CON0_CWG2EN_POSN                               0x7
#define _CWG2CON0_CWG2EN_POSITION                           0x7
#define _CWG2CON0_CWG2EN_SIZE                               0x1
#define _CWG2CON0_CWG2EN_LENGTH                             0x1
#define _CWG2CON0_CWG2EN_MASK                               0x80
#define _CWG2CON0_CWG2MODE0_POSN                            0x0
#define _CWG2CON0_CWG2MODE0_POSITION                        0x0
#define _CWG2CON0_CWG2MODE0_SIZE                            0x1
#define _CWG2CON0_CWG2MODE0_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE0_MASK                            0x1
#define _CWG2CON0_CWG2MODE1_POSN                            0x1
#define _CWG2CON0_CWG2MODE1_POSITION                        0x1
#define _CWG2CON0_CWG2MODE1_SIZE                            0x1
#define _CWG2CON0_CWG2MODE1_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE1_MASK                            0x2
#define _CWG2CON0_CWG2MODE2_POSN                            0x2
#define _CWG2CON0_CWG2MODE2_POSITION                        0x2
#define _CWG2CON0_CWG2MODE2_SIZE                            0x1
#define _CWG2CON0_CWG2MODE2_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE2_MASK                            0x4

// Register: CWG2CON1
#define CWG2CON1 CWG2CON1
extern volatile unsigned char           CWG2CON1            __at(0x61B);
#ifndef _LIB_BUILD
asm("CWG2CON1 equ 061Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG2POLA               :1;
        unsigned CWG2POLB               :1;
        unsigned CWG2POLC               :1;
        unsigned CWG2POLD               :1;
        unsigned                        :1;
        unsigned CWG2IN                 :1;
    };
} CWG2CON1bits_t;
extern volatile CWG2CON1bits_t CWG2CON1bits __at(0x61B);
// bitfield macros
#define _CWG2CON1_POLA_POSN                                 0x0
#define _CWG2CON1_POLA_POSITION                             0x0
#define _CWG2CON1_POLA_SIZE                                 0x1
#define _CWG2CON1_POLA_LENGTH                               0x1
#define _CWG2CON1_POLA_MASK                                 0x1
#define _CWG2CON1_POLB_POSN                                 0x1
#define _CWG2CON1_POLB_POSITION                             0x1
#define _CWG2CON1_POLB_SIZE                                 0x1
#define _CWG2CON1_POLB_LENGTH                               0x1
#define _CWG2CON1_POLB_MASK                                 0x2
#define _CWG2CON1_POLC_POSN                                 0x2
#define _CWG2CON1_POLC_POSITION                             0x2
#define _CWG2CON1_POLC_SIZE                                 0x1
#define _CWG2CON1_POLC_LENGTH                               0x1
#define _CWG2CON1_POLC_MASK                                 0x4
#define _CWG2CON1_POLD_POSN                                 0x3
#define _CWG2CON1_POLD_POSITION                             0x3
#define _CWG2CON1_POLD_SIZE                                 0x1
#define _CWG2CON1_POLD_LENGTH                               0x1
#define _CWG2CON1_POLD_MASK                                 0x8
#define _CWG2CON1_IN_POSN                                   0x5
#define _CWG2CON1_IN_POSITION                               0x5
#define _CWG2CON1_IN_SIZE                                   0x1
#define _CWG2CON1_IN_LENGTH                                 0x1
#define _CWG2CON1_IN_MASK                                   0x20
#define _CWG2CON1_CWG2POLA_POSN                             0x0
#define _CWG2CON1_CWG2POLA_POSITION                         0x0
#define _CWG2CON1_CWG2POLA_SIZE                             0x1
#define _CWG2CON1_CWG2POLA_LENGTH                           0x1
#define _CWG2CON1_CWG2POLA_MASK                             0x1
#define _CWG2CON1_CWG2POLB_POSN                             0x1
#define _CWG2CON1_CWG2POLB_POSITION                         0x1
#define _CWG2CON1_CWG2POLB_SIZE                             0x1
#define _CWG2CON1_CWG2POLB_LENGTH                           0x1
#define _CWG2CON1_CWG2POLB_MASK                             0x2
#define _CWG2CON1_CWG2POLC_POSN                             0x2
#define _CWG2CON1_CWG2POLC_POSITION                         0x2
#define _CWG2CON1_CWG2POLC_SIZE                             0x1
#define _CWG2CON1_CWG2POLC_LENGTH                           0x1
#define _CWG2CON1_CWG2POLC_MASK                             0x4
#define _CWG2CON1_CWG2POLD_POSN                             0x3
#define _CWG2CON1_CWG2POLD_POSITION                         0x3
#define _CWG2CON1_CWG2POLD_SIZE                             0x1
#define _CWG2CON1_CWG2POLD_LENGTH                           0x1
#define _CWG2CON1_CWG2POLD_MASK                             0x8
#define _CWG2CON1_CWG2IN_POSN                               0x5
#define _CWG2CON1_CWG2IN_POSITION                           0x5
#define _CWG2CON1_CWG2IN_SIZE                               0x1
#define _CWG2CON1_CWG2IN_LENGTH                             0x1
#define _CWG2CON1_CWG2IN_MASK                               0x20

// Register: CWG2AS0
#define CWG2AS0 CWG2AS0
extern volatile unsigned char           CWG2AS0             __at(0x61C);
#ifndef _LIB_BUILD
asm("CWG2AS0 equ 061Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG2LSAC               :2;
        unsigned CWG2LSBD               :2;
        unsigned CWG2REN                :1;
        unsigned CWG2SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG2LSAC0              :1;
        unsigned CWG2LSAC1              :1;
        unsigned CWG2LSBD0              :1;
        unsigned CWG2LSBD1              :1;
    };
} CWG2AS0bits_t;
extern volatile CWG2AS0bits_t CWG2AS0bits __at(0x61C);
// bitfield macros
#define _CWG2AS0_LSAC_POSN                                  0x2
#define _CWG2AS0_LSAC_POSITION                              0x2
#define _CWG2AS0_LSAC_SIZE                                  0x2
#define _CWG2AS0_LSAC_LENGTH                                0x2
#define _CWG2AS0_LSAC_MASK                                  0xC
#define _CWG2AS0_LSBD_POSN                                  0x4
#define _CWG2AS0_LSBD_POSITION                              0x4
#define _CWG2AS0_LSBD_SIZE                                  0x2
#define _CWG2AS0_LSBD_LENGTH                                0x2
#define _CWG2AS0_LSBD_MASK                                  0x30
#define _CWG2AS0_REN_POSN                                   0x6
#define _CWG2AS0_REN_POSITION                               0x6
#define _CWG2AS0_REN_SIZE                                   0x1
#define _CWG2AS0_REN_LENGTH                                 0x1
#define _CWG2AS0_REN_MASK                                   0x40
#define _CWG2AS0_SHUTDOWN_POSN                              0x7
#define _CWG2AS0_SHUTDOWN_POSITION                          0x7
#define _CWG2AS0_SHUTDOWN_SIZE                              0x1
#define _CWG2AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG2AS0_SHUTDOWN_MASK                              0x80
#define _CWG2AS0_LSAC0_POSN                                 0x2
#define _CWG2AS0_LSAC0_POSITION                             0x2
#define _CWG2AS0_LSAC0_SIZE                                 0x1
#define _CWG2AS0_LSAC0_LENGTH                               0x1
#define _CWG2AS0_LSAC0_MASK                                 0x4
#define _CWG2AS0_LSAC1_POSN                                 0x3
#define _CWG2AS0_LSAC1_POSITION                             0x3
#define _CWG2AS0_LSAC1_SIZE                                 0x1
#define _CWG2AS0_LSAC1_LENGTH                               0x1
#define _CWG2AS0_LSAC1_MASK                                 0x8
#define _CWG2AS0_LSBD0_POSN                                 0x4
#define _CWG2AS0_LSBD0_POSITION                             0x4
#define _CWG2AS0_LSBD0_SIZE                                 0x1
#define _CWG2AS0_LSBD0_LENGTH                               0x1
#define _CWG2AS0_LSBD0_MASK                                 0x10
#define _CWG2AS0_LSBD1_POSN                                 0x5
#define _CWG2AS0_LSBD1_POSITION                             0x5
#define _CWG2AS0_LSBD1_SIZE                                 0x1
#define _CWG2AS0_LSBD1_LENGTH                               0x1
#define _CWG2AS0_LSBD1_MASK                                 0x20
#define _CWG2AS0_CWG2LSAC_POSN                              0x2
#define _CWG2AS0_CWG2LSAC_POSITION                          0x2
#define _CWG2AS0_CWG2LSAC_SIZE                              0x2
#define _CWG2AS0_CWG2LSAC_LENGTH                            0x2
#define _CWG2AS0_CWG2LSAC_MASK                              0xC
#define _CWG2AS0_CWG2LSBD_POSN                              0x4
#define _CWG2AS0_CWG2LSBD_POSITION                          0x4
#define _CWG2AS0_CWG2LSBD_SIZE                              0x2
#define _CWG2AS0_CWG2LSBD_LENGTH                            0x2
#define _CWG2AS0_CWG2LSBD_MASK                              0x30
#define _CWG2AS0_CWG2REN_POSN                               0x6
#define _CWG2AS0_CWG2REN_POSITION                           0x6
#define _CWG2AS0_CWG2REN_SIZE                               0x1
#define _CWG2AS0_CWG2REN_LENGTH                             0x1
#define _CWG2AS0_CWG2REN_MASK                               0x40
#define _CWG2AS0_CWG2SHUTDOWN_POSN                          0x7
#define _CWG2AS0_CWG2SHUTDOWN_POSITION                      0x7
#define _CWG2AS0_CWG2SHUTDOWN_SIZE                          0x1
#define _CWG2AS0_CWG2SHUTDOWN_LENGTH                        0x1
#define _CWG2AS0_CWG2SHUTDOWN_MASK                          0x80
#define _CWG2AS0_CWG2LSAC0_POSN                             0x2
#define _CWG2AS0_CWG2LSAC0_POSITION                         0x2
#define _CWG2AS0_CWG2LSAC0_SIZE                             0x1
#define _CWG2AS0_CWG2LSAC0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSAC0_MASK                             0x4
#define _CWG2AS0_CWG2LSAC1_POSN                             0x3
#define _CWG2AS0_CWG2LSAC1_POSITION                         0x3
#define _CWG2AS0_CWG2LSAC1_SIZE                             0x1
#define _CWG2AS0_CWG2LSAC1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSAC1_MASK                             0x8
#define _CWG2AS0_CWG2LSBD0_POSN                             0x4
#define _CWG2AS0_CWG2LSBD0_POSITION                         0x4
#define _CWG2AS0_CWG2LSBD0_SIZE                             0x1
#define _CWG2AS0_CWG2LSBD0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSBD0_MASK                             0x10
#define _CWG2AS0_CWG2LSBD1_POSN                             0x5
#define _CWG2AS0_CWG2LSBD1_POSITION                         0x5
#define _CWG2AS0_CWG2LSBD1_SIZE                             0x1
#define _CWG2AS0_CWG2LSBD1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSBD1_MASK                             0x20

// Register: CWG2AS1
#define CWG2AS1 CWG2AS1
extern volatile unsigned char           CWG2AS1             __at(0x61D);
#ifndef _LIB_BUILD
asm("CWG2AS1 equ 061Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
    };
} CWG2AS1bits_t;
extern volatile CWG2AS1bits_t CWG2AS1bits __at(0x61D);
// bitfield macros
#define _CWG2AS1_AS0E_POSN                                  0x0
#define _CWG2AS1_AS0E_POSITION                              0x0
#define _CWG2AS1_AS0E_SIZE                                  0x1
#define _CWG2AS1_AS0E_LENGTH                                0x1
#define _CWG2AS1_AS0E_MASK                                  0x1
#define _CWG2AS1_AS1E_POSN                                  0x1
#define _CWG2AS1_AS1E_POSITION                              0x1
#define _CWG2AS1_AS1E_SIZE                                  0x1
#define _CWG2AS1_AS1E_LENGTH                                0x1
#define _CWG2AS1_AS1E_MASK                                  0x2
#define _CWG2AS1_AS2E_POSN                                  0x2
#define _CWG2AS1_AS2E_POSITION                              0x2
#define _CWG2AS1_AS2E_SIZE                                  0x1
#define _CWG2AS1_AS2E_LENGTH                                0x1
#define _CWG2AS1_AS2E_MASK                                  0x4
#define _CWG2AS1_AS3E_POSN                                  0x3
#define _CWG2AS1_AS3E_POSITION                              0x3
#define _CWG2AS1_AS3E_SIZE                                  0x1
#define _CWG2AS1_AS3E_LENGTH                                0x1
#define _CWG2AS1_AS3E_MASK                                  0x8
#define _CWG2AS1_AS4E_POSN                                  0x4
#define _CWG2AS1_AS4E_POSITION                              0x4
#define _CWG2AS1_AS4E_SIZE                                  0x1
#define _CWG2AS1_AS4E_LENGTH                                0x1
#define _CWG2AS1_AS4E_MASK                                  0x10
#define _CWG2AS1_AS5E_POSN                                  0x5
#define _CWG2AS1_AS5E_POSITION                              0x5
#define _CWG2AS1_AS5E_SIZE                                  0x1
#define _CWG2AS1_AS5E_LENGTH                                0x1
#define _CWG2AS1_AS5E_MASK                                  0x20
#define _CWG2AS1_AS6E_POSN                                  0x6
#define _CWG2AS1_AS6E_POSITION                              0x6
#define _CWG2AS1_AS6E_SIZE                                  0x1
#define _CWG2AS1_AS6E_LENGTH                                0x1
#define _CWG2AS1_AS6E_MASK                                  0x40

// Register: CWG2STR
#define CWG2STR CWG2STR
extern volatile unsigned char           CWG2STR             __at(0x61E);
#ifndef _LIB_BUILD
asm("CWG2STR equ 061Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG2STRA               :1;
        unsigned CWG2STRB               :1;
        unsigned CWG2STRC               :1;
        unsigned CWG2STRD               :1;
        unsigned CWG2OVRA               :1;
        unsigned CWG2OVRB               :1;
        unsigned CWG2OVRC               :1;
        unsigned CWG2OVRD               :1;
    };
} CWG2STRbits_t;
extern volatile CWG2STRbits_t CWG2STRbits __at(0x61E);
// bitfield macros
#define _CWG2STR_STRA_POSN                                  0x0
#define _CWG2STR_STRA_POSITION                              0x0
#define _CWG2STR_STRA_SIZE                                  0x1
#define _CWG2STR_STRA_LENGTH                                0x1
#define _CWG2STR_STRA_MASK                                  0x1
#define _CWG2STR_STRB_POSN                                  0x1
#define _CWG2STR_STRB_POSITION                              0x1
#define _CWG2STR_STRB_SIZE                                  0x1
#define _CWG2STR_STRB_LENGTH                                0x1
#define _CWG2STR_STRB_MASK                                  0x2
#define _CWG2STR_STRC_POSN                                  0x2
#define _CWG2STR_STRC_POSITION                              0x2
#define _CWG2STR_STRC_SIZE                                  0x1
#define _CWG2STR_STRC_LENGTH                                0x1
#define _CWG2STR_STRC_MASK                                  0x4
#define _CWG2STR_STRD_POSN                                  0x3
#define _CWG2STR_STRD_POSITION                              0x3
#define _CWG2STR_STRD_SIZE                                  0x1
#define _CWG2STR_STRD_LENGTH                                0x1
#define _CWG2STR_STRD_MASK                                  0x8
#define _CWG2STR_OVRA_POSN                                  0x4
#define _CWG2STR_OVRA_POSITION                              0x4
#define _CWG2STR_OVRA_SIZE                                  0x1
#define _CWG2STR_OVRA_LENGTH                                0x1
#define _CWG2STR_OVRA_MASK                                  0x10
#define _CWG2STR_OVRB_POSN                                  0x5
#define _CWG2STR_OVRB_POSITION                              0x5
#define _CWG2STR_OVRB_SIZE                                  0x1
#define _CWG2STR_OVRB_LENGTH                                0x1
#define _CWG2STR_OVRB_MASK                                  0x20
#define _CWG2STR_OVRC_POSN                                  0x6
#define _CWG2STR_OVRC_POSITION                              0x6
#define _CWG2STR_OVRC_SIZE                                  0x1
#define _CWG2STR_OVRC_LENGTH                                0x1
#define _CWG2STR_OVRC_MASK                                  0x40
#define _CWG2STR_OVRD_POSN                                  0x7
#define _CWG2STR_OVRD_POSITION                              0x7
#define _CWG2STR_OVRD_SIZE                                  0x1
#define _CWG2STR_OVRD_LENGTH                                0x1
#define _CWG2STR_OVRD_MASK                                  0x80
#define _CWG2STR_CWG2STRA_POSN                              0x0
#define _CWG2STR_CWG2STRA_POSITION                          0x0
#define _CWG2STR_CWG2STRA_SIZE                              0x1
#define _CWG2STR_CWG2STRA_LENGTH                            0x1
#define _CWG2STR_CWG2STRA_MASK                              0x1
#define _CWG2STR_CWG2STRB_POSN                              0x1
#define _CWG2STR_CWG2STRB_POSITION                          0x1
#define _CWG2STR_CWG2STRB_SIZE                              0x1
#define _CWG2STR_CWG2STRB_LENGTH                            0x1
#define _CWG2STR_CWG2STRB_MASK                              0x2
#define _CWG2STR_CWG2STRC_POSN                              0x2
#define _CWG2STR_CWG2STRC_POSITION                          0x2
#define _CWG2STR_CWG2STRC_SIZE                              0x1
#define _CWG2STR_CWG2STRC_LENGTH                            0x1
#define _CWG2STR_CWG2STRC_MASK                              0x4
#define _CWG2STR_CWG2STRD_POSN                              0x3
#define _CWG2STR_CWG2STRD_POSITION                          0x3
#define _CWG2STR_CWG2STRD_SIZE                              0x1
#define _CWG2STR_CWG2STRD_LENGTH                            0x1
#define _CWG2STR_CWG2STRD_MASK                              0x8
#define _CWG2STR_CWG2OVRA_POSN                              0x4
#define _CWG2STR_CWG2OVRA_POSITION                          0x4
#define _CWG2STR_CWG2OVRA_SIZE                              0x1
#define _CWG2STR_CWG2OVRA_LENGTH                            0x1
#define _CWG2STR_CWG2OVRA_MASK                              0x10
#define _CWG2STR_CWG2OVRB_POSN                              0x5
#define _CWG2STR_CWG2OVRB_POSITION                          0x5
#define _CWG2STR_CWG2OVRB_SIZE                              0x1
#define _CWG2STR_CWG2OVRB_LENGTH                            0x1
#define _CWG2STR_CWG2OVRB_MASK                              0x20
#define _CWG2STR_CWG2OVRC_POSN                              0x6
#define _CWG2STR_CWG2OVRC_POSITION                          0x6
#define _CWG2STR_CWG2OVRC_SIZE                              0x1
#define _CWG2STR_CWG2OVRC_LENGTH                            0x1
#define _CWG2STR_CWG2OVRC_MASK                              0x40
#define _CWG2STR_CWG2OVRD_POSN                              0x7
#define _CWG2STR_CWG2OVRD_POSITION                          0x7
#define _CWG2STR_CWG2OVRD_SIZE                              0x1
#define _CWG2STR_CWG2OVRD_LENGTH                            0x1
#define _CWG2STR_CWG2OVRD_MASK                              0x80

// Register: CWG3CLKCON
#define CWG3CLKCON CWG3CLKCON
extern volatile unsigned char           CWG3CLKCON          __at(0x68C);
#ifndef _LIB_BUILD
asm("CWG3CLKCON equ 068Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG3CS                 :1;
    };
} CWG3CLKCONbits_t;
extern volatile CWG3CLKCONbits_t CWG3CLKCONbits __at(0x68C);
// bitfield macros
#define _CWG3CLKCON_CS_POSN                                 0x0
#define _CWG3CLKCON_CS_POSITION                             0x0
#define _CWG3CLKCON_CS_SIZE                                 0x1
#define _CWG3CLKCON_CS_LENGTH                               0x1
#define _CWG3CLKCON_CS_MASK                                 0x1
#define _CWG3CLKCON_CWG3CS_POSN                             0x0
#define _CWG3CLKCON_CWG3CS_POSITION                         0x0
#define _CWG3CLKCON_CWG3CS_SIZE                             0x1
#define _CWG3CLKCON_CWG3CS_LENGTH                           0x1
#define _CWG3CLKCON_CWG3CS_MASK                             0x1

// Register: CWG3ISM
#define CWG3ISM CWG3ISM
extern volatile unsigned char           CWG3ISM             __at(0x68D);
#ifndef _LIB_BUILD
asm("CWG3ISM equ 068Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IS                     :4;
    };
    struct {
        unsigned CWG3ISM0               :1;
        unsigned CWG3ISM1               :1;
        unsigned CWG3ISM2               :1;
        unsigned CWG3ISM3               :1;
    };
} CWG3ISMbits_t;
extern volatile CWG3ISMbits_t CWG3ISMbits __at(0x68D);
// bitfield macros
#define _CWG3ISM_IS_POSN                                    0x0
#define _CWG3ISM_IS_POSITION                                0x0
#define _CWG3ISM_IS_SIZE                                    0x4
#define _CWG3ISM_IS_LENGTH                                  0x4
#define _CWG3ISM_IS_MASK                                    0xF
#define _CWG3ISM_CWG3ISM0_POSN                              0x0
#define _CWG3ISM_CWG3ISM0_POSITION                          0x0
#define _CWG3ISM_CWG3ISM0_SIZE                              0x1
#define _CWG3ISM_CWG3ISM0_LENGTH                            0x1
#define _CWG3ISM_CWG3ISM0_MASK                              0x1
#define _CWG3ISM_CWG3ISM1_POSN                              0x1
#define _CWG3ISM_CWG3ISM1_POSITION                          0x1
#define _CWG3ISM_CWG3ISM1_SIZE                              0x1
#define _CWG3ISM_CWG3ISM1_LENGTH                            0x1
#define _CWG3ISM_CWG3ISM1_MASK                              0x2
#define _CWG3ISM_CWG3ISM2_POSN                              0x2
#define _CWG3ISM_CWG3ISM2_POSITION                          0x2
#define _CWG3ISM_CWG3ISM2_SIZE                              0x1
#define _CWG3ISM_CWG3ISM2_LENGTH                            0x1
#define _CWG3ISM_CWG3ISM2_MASK                              0x4
#define _CWG3ISM_CWG3ISM3_POSN                              0x3
#define _CWG3ISM_CWG3ISM3_POSITION                          0x3
#define _CWG3ISM_CWG3ISM3_SIZE                              0x1
#define _CWG3ISM_CWG3ISM3_LENGTH                            0x1
#define _CWG3ISM_CWG3ISM3_MASK                              0x8

// Register: CWG3DBR
#define CWG3DBR CWG3DBR
extern volatile unsigned char           CWG3DBR             __at(0x68E);
#ifndef _LIB_BUILD
asm("CWG3DBR equ 068Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG3DBR                :6;
    };
    struct {
        unsigned CWG3DBR0               :1;
        unsigned CWG3DBR1               :1;
        unsigned CWG3DBR2               :1;
        unsigned CWG3DBR3               :1;
        unsigned CWG3DBR4               :1;
        unsigned CWG3DBR5               :1;
    };
} CWG3DBRbits_t;
extern volatile CWG3DBRbits_t CWG3DBRbits __at(0x68E);
// bitfield macros
#define _CWG3DBR_DBR_POSN                                   0x0
#define _CWG3DBR_DBR_POSITION                               0x0
#define _CWG3DBR_DBR_SIZE                                   0x6
#define _CWG3DBR_DBR_LENGTH                                 0x6
#define _CWG3DBR_DBR_MASK                                   0x3F
#define _CWG3DBR_DBR0_POSN                                  0x0
#define _CWG3DBR_DBR0_POSITION                              0x0
#define _CWG3DBR_DBR0_SIZE                                  0x1
#define _CWG3DBR_DBR0_LENGTH                                0x1
#define _CWG3DBR_DBR0_MASK                                  0x1
#define _CWG3DBR_DBR1_POSN                                  0x1
#define _CWG3DBR_DBR1_POSITION                              0x1
#define _CWG3DBR_DBR1_SIZE                                  0x1
#define _CWG3DBR_DBR1_LENGTH                                0x1
#define _CWG3DBR_DBR1_MASK                                  0x2
#define _CWG3DBR_DBR2_POSN                                  0x2
#define _CWG3DBR_DBR2_POSITION                              0x2
#define _CWG3DBR_DBR2_SIZE                                  0x1
#define _CWG3DBR_DBR2_LENGTH                                0x1
#define _CWG3DBR_DBR2_MASK                                  0x4
#define _CWG3DBR_DBR3_POSN                                  0x3
#define _CWG3DBR_DBR3_POSITION                              0x3
#define _CWG3DBR_DBR3_SIZE                                  0x1
#define _CWG3DBR_DBR3_LENGTH                                0x1
#define _CWG3DBR_DBR3_MASK                                  0x8
#define _CWG3DBR_DBR4_POSN                                  0x4
#define _CWG3DBR_DBR4_POSITION                              0x4
#define _CWG3DBR_DBR4_SIZE                                  0x1
#define _CWG3DBR_DBR4_LENGTH                                0x1
#define _CWG3DBR_DBR4_MASK                                  0x10
#define _CWG3DBR_DBR5_POSN                                  0x5
#define _CWG3DBR_DBR5_POSITION                              0x5
#define _CWG3DBR_DBR5_SIZE                                  0x1
#define _CWG3DBR_DBR5_LENGTH                                0x1
#define _CWG3DBR_DBR5_MASK                                  0x20
#define _CWG3DBR_CWG3DBR_POSN                               0x0
#define _CWG3DBR_CWG3DBR_POSITION                           0x0
#define _CWG3DBR_CWG3DBR_SIZE                               0x6
#define _CWG3DBR_CWG3DBR_LENGTH                             0x6
#define _CWG3DBR_CWG3DBR_MASK                               0x3F
#define _CWG3DBR_CWG3DBR0_POSN                              0x0
#define _CWG3DBR_CWG3DBR0_POSITION                          0x0
#define _CWG3DBR_CWG3DBR0_SIZE                              0x1
#define _CWG3DBR_CWG3DBR0_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR0_MASK                              0x1
#define _CWG3DBR_CWG3DBR1_POSN                              0x1
#define _CWG3DBR_CWG3DBR1_POSITION                          0x1
#define _CWG3DBR_CWG3DBR1_SIZE                              0x1
#define _CWG3DBR_CWG3DBR1_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR1_MASK                              0x2
#define _CWG3DBR_CWG3DBR2_POSN                              0x2
#define _CWG3DBR_CWG3DBR2_POSITION                          0x2
#define _CWG3DBR_CWG3DBR2_SIZE                              0x1
#define _CWG3DBR_CWG3DBR2_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR2_MASK                              0x4
#define _CWG3DBR_CWG3DBR3_POSN                              0x3
#define _CWG3DBR_CWG3DBR3_POSITION                          0x3
#define _CWG3DBR_CWG3DBR3_SIZE                              0x1
#define _CWG3DBR_CWG3DBR3_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR3_MASK                              0x8
#define _CWG3DBR_CWG3DBR4_POSN                              0x4
#define _CWG3DBR_CWG3DBR4_POSITION                          0x4
#define _CWG3DBR_CWG3DBR4_SIZE                              0x1
#define _CWG3DBR_CWG3DBR4_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR4_MASK                              0x10
#define _CWG3DBR_CWG3DBR5_POSN                              0x5
#define _CWG3DBR_CWG3DBR5_POSITION                          0x5
#define _CWG3DBR_CWG3DBR5_SIZE                              0x1
#define _CWG3DBR_CWG3DBR5_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR5_MASK                              0x20

// Register: CWG3DBF
#define CWG3DBF CWG3DBF
extern volatile unsigned char           CWG3DBF             __at(0x68F);
#ifndef _LIB_BUILD
asm("CWG3DBF equ 068Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG3DBF                :6;
    };
    struct {
        unsigned CWG3DBF0               :1;
        unsigned CWG3DBF1               :1;
        unsigned CWG3DBF2               :1;
        unsigned CWG3DBF3               :1;
        unsigned CWG3DBF4               :1;
        unsigned CWG3DBF5               :1;
    };
} CWG3DBFbits_t;
extern volatile CWG3DBFbits_t CWG3DBFbits __at(0x68F);
// bitfield macros
#define _CWG3DBF_DBF_POSN                                   0x0
#define _CWG3DBF_DBF_POSITION                               0x0
#define _CWG3DBF_DBF_SIZE                                   0x6
#define _CWG3DBF_DBF_LENGTH                                 0x6
#define _CWG3DBF_DBF_MASK                                   0x3F
#define _CWG3DBF_DBF0_POSN                                  0x0
#define _CWG3DBF_DBF0_POSITION                              0x0
#define _CWG3DBF_DBF0_SIZE                                  0x1
#define _CWG3DBF_DBF0_LENGTH                                0x1
#define _CWG3DBF_DBF0_MASK                                  0x1
#define _CWG3DBF_DBF1_POSN                                  0x1
#define _CWG3DBF_DBF1_POSITION                              0x1
#define _CWG3DBF_DBF1_SIZE                                  0x1
#define _CWG3DBF_DBF1_LENGTH                                0x1
#define _CWG3DBF_DBF1_MASK                                  0x2
#define _CWG3DBF_DBF2_POSN                                  0x2
#define _CWG3DBF_DBF2_POSITION                              0x2
#define _CWG3DBF_DBF2_SIZE                                  0x1
#define _CWG3DBF_DBF2_LENGTH                                0x1
#define _CWG3DBF_DBF2_MASK                                  0x4
#define _CWG3DBF_DBF3_POSN                                  0x3
#define _CWG3DBF_DBF3_POSITION                              0x3
#define _CWG3DBF_DBF3_SIZE                                  0x1
#define _CWG3DBF_DBF3_LENGTH                                0x1
#define _CWG3DBF_DBF3_MASK                                  0x8
#define _CWG3DBF_DBF4_POSN                                  0x4
#define _CWG3DBF_DBF4_POSITION                              0x4
#define _CWG3DBF_DBF4_SIZE                                  0x1
#define _CWG3DBF_DBF4_LENGTH                                0x1
#define _CWG3DBF_DBF4_MASK                                  0x10
#define _CWG3DBF_DBF5_POSN                                  0x5
#define _CWG3DBF_DBF5_POSITION                              0x5
#define _CWG3DBF_DBF5_SIZE                                  0x1
#define _CWG3DBF_DBF5_LENGTH                                0x1
#define _CWG3DBF_DBF5_MASK                                  0x20
#define _CWG3DBF_CWG3DBF_POSN                               0x0
#define _CWG3DBF_CWG3DBF_POSITION                           0x0
#define _CWG3DBF_CWG3DBF_SIZE                               0x6
#define _CWG3DBF_CWG3DBF_LENGTH                             0x6
#define _CWG3DBF_CWG3DBF_MASK                               0x3F
#define _CWG3DBF_CWG3DBF0_POSN                              0x0
#define _CWG3DBF_CWG3DBF0_POSITION                          0x0
#define _CWG3DBF_CWG3DBF0_SIZE                              0x1
#define _CWG3DBF_CWG3DBF0_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF0_MASK                              0x1
#define _CWG3DBF_CWG3DBF1_POSN                              0x1
#define _CWG3DBF_CWG3DBF1_POSITION                          0x1
#define _CWG3DBF_CWG3DBF1_SIZE                              0x1
#define _CWG3DBF_CWG3DBF1_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF1_MASK                              0x2
#define _CWG3DBF_CWG3DBF2_POSN                              0x2
#define _CWG3DBF_CWG3DBF2_POSITION                          0x2
#define _CWG3DBF_CWG3DBF2_SIZE                              0x1
#define _CWG3DBF_CWG3DBF2_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF2_MASK                              0x4
#define _CWG3DBF_CWG3DBF3_POSN                              0x3
#define _CWG3DBF_CWG3DBF3_POSITION                          0x3
#define _CWG3DBF_CWG3DBF3_SIZE                              0x1
#define _CWG3DBF_CWG3DBF3_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF3_MASK                              0x8
#define _CWG3DBF_CWG3DBF4_POSN                              0x4
#define _CWG3DBF_CWG3DBF4_POSITION                          0x4
#define _CWG3DBF_CWG3DBF4_SIZE                              0x1
#define _CWG3DBF_CWG3DBF4_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF4_MASK                              0x10
#define _CWG3DBF_CWG3DBF5_POSN                              0x5
#define _CWG3DBF_CWG3DBF5_POSITION                          0x5
#define _CWG3DBF_CWG3DBF5_SIZE                              0x1
#define _CWG3DBF_CWG3DBF5_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF5_MASK                              0x20

// Register: CWG3CON0
#define CWG3CON0 CWG3CON0
extern volatile unsigned char           CWG3CON0            __at(0x690);
#ifndef _LIB_BUILD
asm("CWG3CON0 equ 0690h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G3EN                   :1;
    };
    struct {
        unsigned CWG3MODE               :3;
        unsigned                        :3;
        unsigned CWG3LD                 :1;
        unsigned CWG3EN                 :1;
    };
    struct {
        unsigned CWG3MODE0              :1;
        unsigned CWG3MODE1              :1;
        unsigned CWG3MODE2              :1;
    };
} CWG3CON0bits_t;
extern volatile CWG3CON0bits_t CWG3CON0bits __at(0x690);
// bitfield macros
#define _CWG3CON0_MODE_POSN                                 0x0
#define _CWG3CON0_MODE_POSITION                             0x0
#define _CWG3CON0_MODE_SIZE                                 0x3
#define _CWG3CON0_MODE_LENGTH                               0x3
#define _CWG3CON0_MODE_MASK                                 0x7
#define _CWG3CON0_LD_POSN                                   0x6
#define _CWG3CON0_LD_POSITION                               0x6
#define _CWG3CON0_LD_SIZE                                   0x1
#define _CWG3CON0_LD_LENGTH                                 0x1
#define _CWG3CON0_LD_MASK                                   0x40
#define _CWG3CON0_EN_POSN                                   0x7
#define _CWG3CON0_EN_POSITION                               0x7
#define _CWG3CON0_EN_SIZE                                   0x1
#define _CWG3CON0_EN_LENGTH                                 0x1
#define _CWG3CON0_EN_MASK                                   0x80
#define _CWG3CON0_MODE0_POSN                                0x0
#define _CWG3CON0_MODE0_POSITION                            0x0
#define _CWG3CON0_MODE0_SIZE                                0x1
#define _CWG3CON0_MODE0_LENGTH                              0x1
#define _CWG3CON0_MODE0_MASK                                0x1
#define _CWG3CON0_MODE1_POSN                                0x1
#define _CWG3CON0_MODE1_POSITION                            0x1
#define _CWG3CON0_MODE1_SIZE                                0x1
#define _CWG3CON0_MODE1_LENGTH                              0x1
#define _CWG3CON0_MODE1_MASK                                0x2
#define _CWG3CON0_MODE2_POSN                                0x2
#define _CWG3CON0_MODE2_POSITION                            0x2
#define _CWG3CON0_MODE2_SIZE                                0x1
#define _CWG3CON0_MODE2_LENGTH                              0x1
#define _CWG3CON0_MODE2_MASK                                0x4
#define _CWG3CON0_G3EN_POSN                                 0x7
#define _CWG3CON0_G3EN_POSITION                             0x7
#define _CWG3CON0_G3EN_SIZE                                 0x1
#define _CWG3CON0_G3EN_LENGTH                               0x1
#define _CWG3CON0_G3EN_MASK                                 0x80
#define _CWG3CON0_CWG3MODE_POSN                             0x0
#define _CWG3CON0_CWG3MODE_POSITION                         0x0
#define _CWG3CON0_CWG3MODE_SIZE                             0x3
#define _CWG3CON0_CWG3MODE_LENGTH                           0x3
#define _CWG3CON0_CWG3MODE_MASK                             0x7
#define _CWG3CON0_CWG3LD_POSN                               0x6
#define _CWG3CON0_CWG3LD_POSITION                           0x6
#define _CWG3CON0_CWG3LD_SIZE                               0x1
#define _CWG3CON0_CWG3LD_LENGTH                             0x1
#define _CWG3CON0_CWG3LD_MASK                               0x40
#define _CWG3CON0_CWG3EN_POSN                               0x7
#define _CWG3CON0_CWG3EN_POSITION                           0x7
#define _CWG3CON0_CWG3EN_SIZE                               0x1
#define _CWG3CON0_CWG3EN_LENGTH                             0x1
#define _CWG3CON0_CWG3EN_MASK                               0x80
#define _CWG3CON0_CWG3MODE0_POSN                            0x0
#define _CWG3CON0_CWG3MODE0_POSITION                        0x0
#define _CWG3CON0_CWG3MODE0_SIZE                            0x1
#define _CWG3CON0_CWG3MODE0_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE0_MASK                            0x1
#define _CWG3CON0_CWG3MODE1_POSN                            0x1
#define _CWG3CON0_CWG3MODE1_POSITION                        0x1
#define _CWG3CON0_CWG3MODE1_SIZE                            0x1
#define _CWG3CON0_CWG3MODE1_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE1_MASK                            0x2
#define _CWG3CON0_CWG3MODE2_POSN                            0x2
#define _CWG3CON0_CWG3MODE2_POSITION                        0x2
#define _CWG3CON0_CWG3MODE2_SIZE                            0x1
#define _CWG3CON0_CWG3MODE2_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE2_MASK                            0x4

// Register: CWG3CON1
#define CWG3CON1 CWG3CON1
extern volatile unsigned char           CWG3CON1            __at(0x691);
#ifndef _LIB_BUILD
asm("CWG3CON1 equ 0691h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG3POLA               :1;
        unsigned CWG3POLB               :1;
        unsigned CWG3POLC               :1;
        unsigned CWG3POLD               :1;
        unsigned                        :1;
        unsigned CWG3IN                 :1;
    };
} CWG3CON1bits_t;
extern volatile CWG3CON1bits_t CWG3CON1bits __at(0x691);
// bitfield macros
#define _CWG3CON1_POLA_POSN                                 0x0
#define _CWG3CON1_POLA_POSITION                             0x0
#define _CWG3CON1_POLA_SIZE                                 0x1
#define _CWG3CON1_POLA_LENGTH                               0x1
#define _CWG3CON1_POLA_MASK                                 0x1
#define _CWG3CON1_POLB_POSN                                 0x1
#define _CWG3CON1_POLB_POSITION                             0x1
#define _CWG3CON1_POLB_SIZE                                 0x1
#define _CWG3CON1_POLB_LENGTH                               0x1
#define _CWG3CON1_POLB_MASK                                 0x2
#define _CWG3CON1_POLC_POSN                                 0x2
#define _CWG3CON1_POLC_POSITION                             0x2
#define _CWG3CON1_POLC_SIZE                                 0x1
#define _CWG3CON1_POLC_LENGTH                               0x1
#define _CWG3CON1_POLC_MASK                                 0x4
#define _CWG3CON1_POLD_POSN                                 0x3
#define _CWG3CON1_POLD_POSITION                             0x3
#define _CWG3CON1_POLD_SIZE                                 0x1
#define _CWG3CON1_POLD_LENGTH                               0x1
#define _CWG3CON1_POLD_MASK                                 0x8
#define _CWG3CON1_IN_POSN                                   0x5
#define _CWG3CON1_IN_POSITION                               0x5
#define _CWG3CON1_IN_SIZE                                   0x1
#define _CWG3CON1_IN_LENGTH                                 0x1
#define _CWG3CON1_IN_MASK                                   0x20
#define _CWG3CON1_CWG3POLA_POSN                             0x0
#define _CWG3CON1_CWG3POLA_POSITION                         0x0
#define _CWG3CON1_CWG3POLA_SIZE                             0x1
#define _CWG3CON1_CWG3POLA_LENGTH                           0x1
#define _CWG3CON1_CWG3POLA_MASK                             0x1
#define _CWG3CON1_CWG3POLB_POSN                             0x1
#define _CWG3CON1_CWG3POLB_POSITION                         0x1
#define _CWG3CON1_CWG3POLB_SIZE                             0x1
#define _CWG3CON1_CWG3POLB_LENGTH                           0x1
#define _CWG3CON1_CWG3POLB_MASK                             0x2
#define _CWG3CON1_CWG3POLC_POSN                             0x2
#define _CWG3CON1_CWG3POLC_POSITION                         0x2
#define _CWG3CON1_CWG3POLC_SIZE                             0x1
#define _CWG3CON1_CWG3POLC_LENGTH                           0x1
#define _CWG3CON1_CWG3POLC_MASK                             0x4
#define _CWG3CON1_CWG3POLD_POSN                             0x3
#define _CWG3CON1_CWG3POLD_POSITION                         0x3
#define _CWG3CON1_CWG3POLD_SIZE                             0x1
#define _CWG3CON1_CWG3POLD_LENGTH                           0x1
#define _CWG3CON1_CWG3POLD_MASK                             0x8
#define _CWG3CON1_CWG3IN_POSN                               0x5
#define _CWG3CON1_CWG3IN_POSITION                           0x5
#define _CWG3CON1_CWG3IN_SIZE                               0x1
#define _CWG3CON1_CWG3IN_LENGTH                             0x1
#define _CWG3CON1_CWG3IN_MASK                               0x20

// Register: CWG3AS0
#define CWG3AS0 CWG3AS0
extern volatile unsigned char           CWG3AS0             __at(0x692);
#ifndef _LIB_BUILD
asm("CWG3AS0 equ 0692h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG3LSAC               :2;
        unsigned CWG3LSBD               :2;
        unsigned CWG3REN                :1;
        unsigned CWG3SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG3LSAC0              :1;
        unsigned CWG3LSAC1              :1;
        unsigned CWG3LSBD0              :1;
        unsigned CWG3LSBD1              :1;
    };
} CWG3AS0bits_t;
extern volatile CWG3AS0bits_t CWG3AS0bits __at(0x692);
// bitfield macros
#define _CWG3AS0_LSAC_POSN                                  0x2
#define _CWG3AS0_LSAC_POSITION                              0x2
#define _CWG3AS0_LSAC_SIZE                                  0x2
#define _CWG3AS0_LSAC_LENGTH                                0x2
#define _CWG3AS0_LSAC_MASK                                  0xC
#define _CWG3AS0_LSBD_POSN                                  0x4
#define _CWG3AS0_LSBD_POSITION                              0x4
#define _CWG3AS0_LSBD_SIZE                                  0x2
#define _CWG3AS0_LSBD_LENGTH                                0x2
#define _CWG3AS0_LSBD_MASK                                  0x30
#define _CWG3AS0_REN_POSN                                   0x6
#define _CWG3AS0_REN_POSITION                               0x6
#define _CWG3AS0_REN_SIZE                                   0x1
#define _CWG3AS0_REN_LENGTH                                 0x1
#define _CWG3AS0_REN_MASK                                   0x40
#define _CWG3AS0_SHUTDOWN_POSN                              0x7
#define _CWG3AS0_SHUTDOWN_POSITION                          0x7
#define _CWG3AS0_SHUTDOWN_SIZE                              0x1
#define _CWG3AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG3AS0_SHUTDOWN_MASK                              0x80
#define _CWG3AS0_LSAC0_POSN                                 0x2
#define _CWG3AS0_LSAC0_POSITION                             0x2
#define _CWG3AS0_LSAC0_SIZE                                 0x1
#define _CWG3AS0_LSAC0_LENGTH                               0x1
#define _CWG3AS0_LSAC0_MASK                                 0x4
#define _CWG3AS0_LSAC1_POSN                                 0x3
#define _CWG3AS0_LSAC1_POSITION                             0x3
#define _CWG3AS0_LSAC1_SIZE                                 0x1
#define _CWG3AS0_LSAC1_LENGTH                               0x1
#define _CWG3AS0_LSAC1_MASK                                 0x8
#define _CWG3AS0_LSBD0_POSN                                 0x4
#define _CWG3AS0_LSBD0_POSITION                             0x4
#define _CWG3AS0_LSBD0_SIZE                                 0x1
#define _CWG3AS0_LSBD0_LENGTH                               0x1
#define _CWG3AS0_LSBD0_MASK                                 0x10
#define _CWG3AS0_LSBD1_POSN                                 0x5
#define _CWG3AS0_LSBD1_POSITION                             0x5
#define _CWG3AS0_LSBD1_SIZE                                 0x1
#define _CWG3AS0_LSBD1_LENGTH                               0x1
#define _CWG3AS0_LSBD1_MASK                                 0x20
#define _CWG3AS0_CWG3LSAC_POSN                              0x2
#define _CWG3AS0_CWG3LSAC_POSITION                          0x2
#define _CWG3AS0_CWG3LSAC_SIZE                              0x2
#define _CWG3AS0_CWG3LSAC_LENGTH                            0x2
#define _CWG3AS0_CWG3LSAC_MASK                              0xC
#define _CWG3AS0_CWG3LSBD_POSN                              0x4
#define _CWG3AS0_CWG3LSBD_POSITION                          0x4
#define _CWG3AS0_CWG3LSBD_SIZE                              0x2
#define _CWG3AS0_CWG3LSBD_LENGTH                            0x2
#define _CWG3AS0_CWG3LSBD_MASK                              0x30
#define _CWG3AS0_CWG3REN_POSN                               0x6
#define _CWG3AS0_CWG3REN_POSITION                           0x6
#define _CWG3AS0_CWG3REN_SIZE                               0x1
#define _CWG3AS0_CWG3REN_LENGTH                             0x1
#define _CWG3AS0_CWG3REN_MASK                               0x40
#define _CWG3AS0_CWG3SHUTDOWN_POSN                          0x7
#define _CWG3AS0_CWG3SHUTDOWN_POSITION                      0x7
#define _CWG3AS0_CWG3SHUTDOWN_SIZE                          0x1
#define _CWG3AS0_CWG3SHUTDOWN_LENGTH                        0x1
#define _CWG3AS0_CWG3SHUTDOWN_MASK                          0x80
#define _CWG3AS0_CWG3LSAC0_POSN                             0x2
#define _CWG3AS0_CWG3LSAC0_POSITION                         0x2
#define _CWG3AS0_CWG3LSAC0_SIZE                             0x1
#define _CWG3AS0_CWG3LSAC0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSAC0_MASK                             0x4
#define _CWG3AS0_CWG3LSAC1_POSN                             0x3
#define _CWG3AS0_CWG3LSAC1_POSITION                         0x3
#define _CWG3AS0_CWG3LSAC1_SIZE                             0x1
#define _CWG3AS0_CWG3LSAC1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSAC1_MASK                             0x8
#define _CWG3AS0_CWG3LSBD0_POSN                             0x4
#define _CWG3AS0_CWG3LSBD0_POSITION                         0x4
#define _CWG3AS0_CWG3LSBD0_SIZE                             0x1
#define _CWG3AS0_CWG3LSBD0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSBD0_MASK                             0x10
#define _CWG3AS0_CWG3LSBD1_POSN                             0x5
#define _CWG3AS0_CWG3LSBD1_POSITION                         0x5
#define _CWG3AS0_CWG3LSBD1_SIZE                             0x1
#define _CWG3AS0_CWG3LSBD1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSBD1_MASK                             0x20

// Register: CWG3AS1
#define CWG3AS1 CWG3AS1
extern volatile unsigned char           CWG3AS1             __at(0x693);
#ifndef _LIB_BUILD
asm("CWG3AS1 equ 0693h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
    };
} CWG3AS1bits_t;
extern volatile CWG3AS1bits_t CWG3AS1bits __at(0x693);
// bitfield macros
#define _CWG3AS1_AS0E_POSN                                  0x0
#define _CWG3AS1_AS0E_POSITION                              0x0
#define _CWG3AS1_AS0E_SIZE                                  0x1
#define _CWG3AS1_AS0E_LENGTH                                0x1
#define _CWG3AS1_AS0E_MASK                                  0x1
#define _CWG3AS1_AS1E_POSN                                  0x1
#define _CWG3AS1_AS1E_POSITION                              0x1
#define _CWG3AS1_AS1E_SIZE                                  0x1
#define _CWG3AS1_AS1E_LENGTH                                0x1
#define _CWG3AS1_AS1E_MASK                                  0x2
#define _CWG3AS1_AS2E_POSN                                  0x2
#define _CWG3AS1_AS2E_POSITION                              0x2
#define _CWG3AS1_AS2E_SIZE                                  0x1
#define _CWG3AS1_AS2E_LENGTH                                0x1
#define _CWG3AS1_AS2E_MASK                                  0x4
#define _CWG3AS1_AS3E_POSN                                  0x3
#define _CWG3AS1_AS3E_POSITION                              0x3
#define _CWG3AS1_AS3E_SIZE                                  0x1
#define _CWG3AS1_AS3E_LENGTH                                0x1
#define _CWG3AS1_AS3E_MASK                                  0x8
#define _CWG3AS1_AS4E_POSN                                  0x4
#define _CWG3AS1_AS4E_POSITION                              0x4
#define _CWG3AS1_AS4E_SIZE                                  0x1
#define _CWG3AS1_AS4E_LENGTH                                0x1
#define _CWG3AS1_AS4E_MASK                                  0x10
#define _CWG3AS1_AS5E_POSN                                  0x5
#define _CWG3AS1_AS5E_POSITION                              0x5
#define _CWG3AS1_AS5E_SIZE                                  0x1
#define _CWG3AS1_AS5E_LENGTH                                0x1
#define _CWG3AS1_AS5E_MASK                                  0x20
#define _CWG3AS1_AS6E_POSN                                  0x6
#define _CWG3AS1_AS6E_POSITION                              0x6
#define _CWG3AS1_AS6E_SIZE                                  0x1
#define _CWG3AS1_AS6E_LENGTH                                0x1
#define _CWG3AS1_AS6E_MASK                                  0x40

// Register: CWG3STR
#define CWG3STR CWG3STR
extern volatile unsigned char           CWG3STR             __at(0x694);
#ifndef _LIB_BUILD
asm("CWG3STR equ 0694h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG3STRA               :1;
        unsigned CWG3STRB               :1;
        unsigned CWG3STRC               :1;
        unsigned CWG3STRD               :1;
        unsigned CWG3OVRA               :1;
        unsigned CWG3OVRB               :1;
        unsigned CWG3OVRC               :1;
        unsigned CWG3OVRD               :1;
    };
} CWG3STRbits_t;
extern volatile CWG3STRbits_t CWG3STRbits __at(0x694);
// bitfield macros
#define _CWG3STR_STRA_POSN                                  0x0
#define _CWG3STR_STRA_POSITION                              0x0
#define _CWG3STR_STRA_SIZE                                  0x1
#define _CWG3STR_STRA_LENGTH                                0x1
#define _CWG3STR_STRA_MASK                                  0x1
#define _CWG3STR_STRB_POSN                                  0x1
#define _CWG3STR_STRB_POSITION                              0x1
#define _CWG3STR_STRB_SIZE                                  0x1
#define _CWG3STR_STRB_LENGTH                                0x1
#define _CWG3STR_STRB_MASK                                  0x2
#define _CWG3STR_STRC_POSN                                  0x2
#define _CWG3STR_STRC_POSITION                              0x2
#define _CWG3STR_STRC_SIZE                                  0x1
#define _CWG3STR_STRC_LENGTH                                0x1
#define _CWG3STR_STRC_MASK                                  0x4
#define _CWG3STR_STRD_POSN                                  0x3
#define _CWG3STR_STRD_POSITION                              0x3
#define _CWG3STR_STRD_SIZE                                  0x1
#define _CWG3STR_STRD_LENGTH                                0x1
#define _CWG3STR_STRD_MASK                                  0x8
#define _CWG3STR_OVRA_POSN                                  0x4
#define _CWG3STR_OVRA_POSITION                              0x4
#define _CWG3STR_OVRA_SIZE                                  0x1
#define _CWG3STR_OVRA_LENGTH                                0x1
#define _CWG3STR_OVRA_MASK                                  0x10
#define _CWG3STR_OVRB_POSN                                  0x5
#define _CWG3STR_OVRB_POSITION                              0x5
#define _CWG3STR_OVRB_SIZE                                  0x1
#define _CWG3STR_OVRB_LENGTH                                0x1
#define _CWG3STR_OVRB_MASK                                  0x20
#define _CWG3STR_OVRC_POSN                                  0x6
#define _CWG3STR_OVRC_POSITION                              0x6
#define _CWG3STR_OVRC_SIZE                                  0x1
#define _CWG3STR_OVRC_LENGTH                                0x1
#define _CWG3STR_OVRC_MASK                                  0x40
#define _CWG3STR_OVRD_POSN                                  0x7
#define _CWG3STR_OVRD_POSITION                              0x7
#define _CWG3STR_OVRD_SIZE                                  0x1
#define _CWG3STR_OVRD_LENGTH                                0x1
#define _CWG3STR_OVRD_MASK                                  0x80
#define _CWG3STR_CWG3STRA_POSN                              0x0
#define _CWG3STR_CWG3STRA_POSITION                          0x0
#define _CWG3STR_CWG3STRA_SIZE                              0x1
#define _CWG3STR_CWG3STRA_LENGTH                            0x1
#define _CWG3STR_CWG3STRA_MASK                              0x1
#define _CWG3STR_CWG3STRB_POSN                              0x1
#define _CWG3STR_CWG3STRB_POSITION                          0x1
#define _CWG3STR_CWG3STRB_SIZE                              0x1
#define _CWG3STR_CWG3STRB_LENGTH                            0x1
#define _CWG3STR_CWG3STRB_MASK                              0x2
#define _CWG3STR_CWG3STRC_POSN                              0x2
#define _CWG3STR_CWG3STRC_POSITION                          0x2
#define _CWG3STR_CWG3STRC_SIZE                              0x1
#define _CWG3STR_CWG3STRC_LENGTH                            0x1
#define _CWG3STR_CWG3STRC_MASK                              0x4
#define _CWG3STR_CWG3STRD_POSN                              0x3
#define _CWG3STR_CWG3STRD_POSITION                          0x3
#define _CWG3STR_CWG3STRD_SIZE                              0x1
#define _CWG3STR_CWG3STRD_LENGTH                            0x1
#define _CWG3STR_CWG3STRD_MASK                              0x8
#define _CWG3STR_CWG3OVRA_POSN                              0x4
#define _CWG3STR_CWG3OVRA_POSITION                          0x4
#define _CWG3STR_CWG3OVRA_SIZE                              0x1
#define _CWG3STR_CWG3OVRA_LENGTH                            0x1
#define _CWG3STR_CWG3OVRA_MASK                              0x10
#define _CWG3STR_CWG3OVRB_POSN                              0x5
#define _CWG3STR_CWG3OVRB_POSITION                          0x5
#define _CWG3STR_CWG3OVRB_SIZE                              0x1
#define _CWG3STR_CWG3OVRB_LENGTH                            0x1
#define _CWG3STR_CWG3OVRB_MASK                              0x20
#define _CWG3STR_CWG3OVRC_POSN                              0x6
#define _CWG3STR_CWG3OVRC_POSITION                          0x6
#define _CWG3STR_CWG3OVRC_SIZE                              0x1
#define _CWG3STR_CWG3OVRC_LENGTH                            0x1
#define _CWG3STR_CWG3OVRC_MASK                              0x40
#define _CWG3STR_CWG3OVRD_POSN                              0x7
#define _CWG3STR_CWG3OVRD_POSITION                          0x7
#define _CWG3STR_CWG3OVRD_SIZE                              0x1
#define _CWG3STR_CWG3OVRD_LENGTH                            0x1
#define _CWG3STR_CWG3OVRD_MASK                              0x80

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x70C);
#ifndef _LIB_BUILD
asm("PIR0 equ 070Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTF                   :1;
        unsigned                        :3;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x70C);
// bitfield macros
#define _PIR0_INTF_POSN                                     0x0
#define _PIR0_INTF_POSITION                                 0x0
#define _PIR0_INTF_SIZE                                     0x1
#define _PIR0_INTF_LENGTH                                   0x1
#define _PIR0_INTF_MASK                                     0x1
#define _PIR0_IOCIF_POSN                                    0x4
#define _PIR0_IOCIF_POSITION                                0x4
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x10
#define _PIR0_TMR0IF_POSN                                   0x5
#define _PIR0_TMR0IF_POSITION                               0x5
#define _PIR0_TMR0IF_SIZE                                   0x1
#define _PIR0_TMR0IF_LENGTH                                 0x1
#define _PIR0_TMR0IF_MASK                                   0x20

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x70D);
#ifndef _LIB_BUILD
asm("PIR1 equ 070Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
        unsigned                        :4;
        unsigned CSWIF                  :1;
        unsigned OSFIF                  :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x70D);
// bitfield macros
#define _PIR1_ADIF_POSN                                     0x0
#define _PIR1_ADIF_POSITION                                 0x0
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x1
#define _PIR1_ADTIF_POSN                                    0x1
#define _PIR1_ADTIF_POSITION                                0x1
#define _PIR1_ADTIF_SIZE                                    0x1
#define _PIR1_ADTIF_LENGTH                                  0x1
#define _PIR1_ADTIF_MASK                                    0x2
#define _PIR1_CSWIF_POSN                                    0x6
#define _PIR1_CSWIF_POSITION                                0x6
#define _PIR1_CSWIF_SIZE                                    0x1
#define _PIR1_CSWIF_LENGTH                                  0x1
#define _PIR1_CSWIF_MASK                                    0x40
#define _PIR1_OSFIF_POSN                                    0x7
#define _PIR1_OSFIF_POSITION                                0x7
#define _PIR1_OSFIF_SIZE                                    0x1
#define _PIR1_OSFIF_LENGTH                                  0x1
#define _PIR1_OSFIF_MASK                                    0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x70E);
#ifndef _LIB_BUILD
asm("PIR2 equ 070Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IF                   :1;
        unsigned C2IF                   :1;
        unsigned                        :4;
        unsigned ZCDIF                  :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x70E);
// bitfield macros
#define _PIR2_C1IF_POSN                                     0x0
#define _PIR2_C1IF_POSITION                                 0x0
#define _PIR2_C1IF_SIZE                                     0x1
#define _PIR2_C1IF_LENGTH                                   0x1
#define _PIR2_C1IF_MASK                                     0x1
#define _PIR2_C2IF_POSN                                     0x1
#define _PIR2_C2IF_POSITION                                 0x1
#define _PIR2_C2IF_SIZE                                     0x1
#define _PIR2_C2IF_LENGTH                                   0x1
#define _PIR2_C2IF_MASK                                     0x2
#define _PIR2_ZCDIF_POSN                                    0x6
#define _PIR2_ZCDIF_POSITION                                0x6
#define _PIR2_ZCDIF_SIZE                                    0x1
#define _PIR2_ZCDIF_LENGTH                                  0x1
#define _PIR2_ZCDIF_MASK                                    0x40

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x70F);
#ifndef _LIB_BUILD
asm("PIR3 equ 070Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned SSP2IF                 :1;
        unsigned BCL2IF                 :1;
        unsigned TXIF                   :1;
        unsigned RCIF                   :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x70F);
// bitfield macros
#define _PIR3_SSP1IF_POSN                                   0x0
#define _PIR3_SSP1IF_POSITION                               0x0
#define _PIR3_SSP1IF_SIZE                                   0x1
#define _PIR3_SSP1IF_LENGTH                                 0x1
#define _PIR3_SSP1IF_MASK                                   0x1
#define _PIR3_BCL1IF_POSN                                   0x1
#define _PIR3_BCL1IF_POSITION                               0x1
#define _PIR3_BCL1IF_SIZE                                   0x1
#define _PIR3_BCL1IF_LENGTH                                 0x1
#define _PIR3_BCL1IF_MASK                                   0x2
#define _PIR3_SSP2IF_POSN                                   0x2
#define _PIR3_SSP2IF_POSITION                               0x2
#define _PIR3_SSP2IF_SIZE                                   0x1
#define _PIR3_SSP2IF_LENGTH                                 0x1
#define _PIR3_SSP2IF_MASK                                   0x4
#define _PIR3_BCL2IF_POSN                                   0x3
#define _PIR3_BCL2IF_POSITION                               0x3
#define _PIR3_BCL2IF_SIZE                                   0x1
#define _PIR3_BCL2IF_LENGTH                                 0x1
#define _PIR3_BCL2IF_MASK                                   0x8
#define _PIR3_TXIF_POSN                                     0x4
#define _PIR3_TXIF_POSITION                                 0x4
#define _PIR3_TXIF_SIZE                                     0x1
#define _PIR3_TXIF_LENGTH                                   0x1
#define _PIR3_TXIF_MASK                                     0x10
#define _PIR3_RCIF_POSN                                     0x5
#define _PIR3_RCIF_POSITION                                 0x5
#define _PIR3_RCIF_SIZE                                     0x1
#define _PIR3_RCIF_LENGTH                                   0x1
#define _PIR3_RCIF_MASK                                     0x20

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x710);
#ifndef _LIB_BUILD
asm("PIR4 equ 0710h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned TMR3IF                 :1;
        unsigned TMR4IF                 :1;
        unsigned TMR5IF                 :1;
        unsigned TMR6IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x710);
// bitfield macros
#define _PIR4_TMR1IF_POSN                                   0x0
#define _PIR4_TMR1IF_POSITION                               0x0
#define _PIR4_TMR1IF_SIZE                                   0x1
#define _PIR4_TMR1IF_LENGTH                                 0x1
#define _PIR4_TMR1IF_MASK                                   0x1
#define _PIR4_TMR2IF_POSN                                   0x1
#define _PIR4_TMR2IF_POSITION                               0x1
#define _PIR4_TMR2IF_SIZE                                   0x1
#define _PIR4_TMR2IF_LENGTH                                 0x1
#define _PIR4_TMR2IF_MASK                                   0x2
#define _PIR4_TMR3IF_POSN                                   0x2
#define _PIR4_TMR3IF_POSITION                               0x2
#define _PIR4_TMR3IF_SIZE                                   0x1
#define _PIR4_TMR3IF_LENGTH                                 0x1
#define _PIR4_TMR3IF_MASK                                   0x4
#define _PIR4_TMR4IF_POSN                                   0x3
#define _PIR4_TMR4IF_POSITION                               0x3
#define _PIR4_TMR4IF_SIZE                                   0x1
#define _PIR4_TMR4IF_LENGTH                                 0x1
#define _PIR4_TMR4IF_MASK                                   0x8
#define _PIR4_TMR5IF_POSN                                   0x4
#define _PIR4_TMR5IF_POSITION                               0x4
#define _PIR4_TMR5IF_SIZE                                   0x1
#define _PIR4_TMR5IF_LENGTH                                 0x1
#define _PIR4_TMR5IF_MASK                                   0x10
#define _PIR4_TMR6IF_POSN                                   0x5
#define _PIR4_TMR6IF_POSITION                               0x5
#define _PIR4_TMR6IF_SIZE                                   0x1
#define _PIR4_TMR6IF_LENGTH                                 0x1
#define _PIR4_TMR6IF_MASK                                   0x20

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x711);
#ifndef _LIB_BUILD
asm("PIR5 equ 0711h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIF                :1;
        unsigned TMR3GIF                :1;
        unsigned TMR5GIF                :1;
        unsigned                        :1;
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned CLC4IF                 :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x711);
// bitfield macros
#define _PIR5_TMR1GIF_POSN                                  0x0
#define _PIR5_TMR1GIF_POSITION                              0x0
#define _PIR5_TMR1GIF_SIZE                                  0x1
#define _PIR5_TMR1GIF_LENGTH                                0x1
#define _PIR5_TMR1GIF_MASK                                  0x1
#define _PIR5_TMR3GIF_POSN                                  0x1
#define _PIR5_TMR3GIF_POSITION                              0x1
#define _PIR5_TMR3GIF_SIZE                                  0x1
#define _PIR5_TMR3GIF_LENGTH                                0x1
#define _PIR5_TMR3GIF_MASK                                  0x2
#define _PIR5_TMR5GIF_POSN                                  0x2
#define _PIR5_TMR5GIF_POSITION                              0x2
#define _PIR5_TMR5GIF_SIZE                                  0x1
#define _PIR5_TMR5GIF_LENGTH                                0x1
#define _PIR5_TMR5GIF_MASK                                  0x4
#define _PIR5_CLC1IF_POSN                                   0x4
#define _PIR5_CLC1IF_POSITION                               0x4
#define _PIR5_CLC1IF_SIZE                                   0x1
#define _PIR5_CLC1IF_LENGTH                                 0x1
#define _PIR5_CLC1IF_MASK                                   0x10
#define _PIR5_CLC2IF_POSN                                   0x5
#define _PIR5_CLC2IF_POSITION                               0x5
#define _PIR5_CLC2IF_SIZE                                   0x1
#define _PIR5_CLC2IF_LENGTH                                 0x1
#define _PIR5_CLC2IF_MASK                                   0x20
#define _PIR5_CLC3IF_POSN                                   0x6
#define _PIR5_CLC3IF_POSITION                               0x6
#define _PIR5_CLC3IF_SIZE                                   0x1
#define _PIR5_CLC3IF_LENGTH                                 0x1
#define _PIR5_CLC3IF_MASK                                   0x40
#define _PIR5_CLC4IF_POSN                                   0x7
#define _PIR5_CLC4IF_POSITION                               0x7
#define _PIR5_CLC4IF_SIZE                                   0x1
#define _PIR5_CLC4IF_LENGTH                                 0x1
#define _PIR5_CLC4IF_MASK                                   0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x712);
#ifndef _LIB_BUILD
asm("PIR6 equ 0712h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
        unsigned CCP3IF                 :1;
        unsigned CCP4IF                 :1;
        unsigned CCP5IF                 :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x712);
// bitfield macros
#define _PIR6_CCP1IF_POSN                                   0x0
#define _PIR6_CCP1IF_POSITION                               0x0
#define _PIR6_CCP1IF_SIZE                                   0x1
#define _PIR6_CCP1IF_LENGTH                                 0x1
#define _PIR6_CCP1IF_MASK                                   0x1
#define _PIR6_CCP2IF_POSN                                   0x1
#define _PIR6_CCP2IF_POSITION                               0x1
#define _PIR6_CCP2IF_SIZE                                   0x1
#define _PIR6_CCP2IF_LENGTH                                 0x1
#define _PIR6_CCP2IF_MASK                                   0x2
#define _PIR6_CCP3IF_POSN                                   0x2
#define _PIR6_CCP3IF_POSITION                               0x2
#define _PIR6_CCP3IF_SIZE                                   0x1
#define _PIR6_CCP3IF_LENGTH                                 0x1
#define _PIR6_CCP3IF_MASK                                   0x4
#define _PIR6_CCP4IF_POSN                                   0x3
#define _PIR6_CCP4IF_POSITION                               0x3
#define _PIR6_CCP4IF_SIZE                                   0x1
#define _PIR6_CCP4IF_LENGTH                                 0x1
#define _PIR6_CCP4IF_MASK                                   0x8
#define _PIR6_CCP5IF_POSN                                   0x4
#define _PIR6_CCP5IF_POSITION                               0x4
#define _PIR6_CCP5IF_SIZE                                   0x1
#define _PIR6_CCP5IF_LENGTH                                 0x1
#define _PIR6_CCP5IF_MASK                                   0x10

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x713);
#ifndef _LIB_BUILD
asm("PIR7 equ 0713h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1IF                 :1;
        unsigned CWG2IF                 :1;
        unsigned CWG3IF                 :1;
        unsigned                        :1;
        unsigned NCO1IF                 :1;
        unsigned NVMIF                  :1;
        unsigned CRCIF                  :1;
        unsigned SCANIF                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned NCOIF                  :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x713);
// bitfield macros
#define _PIR7_CWG1IF_POSN                                   0x0
#define _PIR7_CWG1IF_POSITION                               0x0
#define _PIR7_CWG1IF_SIZE                                   0x1
#define _PIR7_CWG1IF_LENGTH                                 0x1
#define _PIR7_CWG1IF_MASK                                   0x1
#define _PIR7_CWG2IF_POSN                                   0x1
#define _PIR7_CWG2IF_POSITION                               0x1
#define _PIR7_CWG2IF_SIZE                                   0x1
#define _PIR7_CWG2IF_LENGTH                                 0x1
#define _PIR7_CWG2IF_MASK                                   0x2
#define _PIR7_CWG3IF_POSN                                   0x2
#define _PIR7_CWG3IF_POSITION                               0x2
#define _PIR7_CWG3IF_SIZE                                   0x1
#define _PIR7_CWG3IF_LENGTH                                 0x1
#define _PIR7_CWG3IF_MASK                                   0x4
#define _PIR7_NCO1IF_POSN                                   0x4
#define _PIR7_NCO1IF_POSITION                               0x4
#define _PIR7_NCO1IF_SIZE                                   0x1
#define _PIR7_NCO1IF_LENGTH                                 0x1
#define _PIR7_NCO1IF_MASK                                   0x10
#define _PIR7_NVMIF_POSN                                    0x5
#define _PIR7_NVMIF_POSITION                                0x5
#define _PIR7_NVMIF_SIZE                                    0x1
#define _PIR7_NVMIF_LENGTH                                  0x1
#define _PIR7_NVMIF_MASK                                    0x20
#define _PIR7_CRCIF_POSN                                    0x6
#define _PIR7_CRCIF_POSITION                                0x6
#define _PIR7_CRCIF_SIZE                                    0x1
#define _PIR7_CRCIF_LENGTH                                  0x1
#define _PIR7_CRCIF_MASK                                    0x40
#define _PIR7_SCANIF_POSN                                   0x7
#define _PIR7_SCANIF_POSITION                               0x7
#define _PIR7_SCANIF_SIZE                                   0x1
#define _PIR7_SCANIF_LENGTH                                 0x1
#define _PIR7_SCANIF_MASK                                   0x80
#define _PIR7_NCOIF_POSN                                    0x4
#define _PIR7_NCOIF_POSITION                                0x4
#define _PIR7_NCOIF_SIZE                                    0x1
#define _PIR7_NCOIF_LENGTH                                  0x1
#define _PIR7_NCOIF_MASK                                    0x10

// Register: PIR8
#define PIR8 PIR8
extern volatile unsigned char           PIR8                __at(0x714);
#ifndef _LIB_BUILD
asm("PIR8 equ 0714h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1IF                 :1;
        unsigned SMT1PRAIF              :1;
        unsigned SMT1PWAIF              :1;
        unsigned SMT2IF                 :1;
        unsigned SMT2PRAIF              :1;
        unsigned SMT2PWAIF              :1;
    };
} PIR8bits_t;
extern volatile PIR8bits_t PIR8bits __at(0x714);
// bitfield macros
#define _PIR8_SMT1IF_POSN                                   0x0
#define _PIR8_SMT1IF_POSITION                               0x0
#define _PIR8_SMT1IF_SIZE                                   0x1
#define _PIR8_SMT1IF_LENGTH                                 0x1
#define _PIR8_SMT1IF_MASK                                   0x1
#define _PIR8_SMT1PRAIF_POSN                                0x1
#define _PIR8_SMT1PRAIF_POSITION                            0x1
#define _PIR8_SMT1PRAIF_SIZE                                0x1
#define _PIR8_SMT1PRAIF_LENGTH                              0x1
#define _PIR8_SMT1PRAIF_MASK                                0x2
#define _PIR8_SMT1PWAIF_POSN                                0x2
#define _PIR8_SMT1PWAIF_POSITION                            0x2
#define _PIR8_SMT1PWAIF_SIZE                                0x1
#define _PIR8_SMT1PWAIF_LENGTH                              0x1
#define _PIR8_SMT1PWAIF_MASK                                0x4
#define _PIR8_SMT2IF_POSN                                   0x3
#define _PIR8_SMT2IF_POSITION                               0x3
#define _PIR8_SMT2IF_SIZE                                   0x1
#define _PIR8_SMT2IF_LENGTH                                 0x1
#define _PIR8_SMT2IF_MASK                                   0x8
#define _PIR8_SMT2PRAIF_POSN                                0x4
#define _PIR8_SMT2PRAIF_POSITION                            0x4
#define _PIR8_SMT2PRAIF_SIZE                                0x1
#define _PIR8_SMT2PRAIF_LENGTH                              0x1
#define _PIR8_SMT2PRAIF_MASK                                0x10
#define _PIR8_SMT2PWAIF_POSN                                0x5
#define _PIR8_SMT2PWAIF_POSITION                            0x5
#define _PIR8_SMT2PWAIF_SIZE                                0x1
#define _PIR8_SMT2PWAIF_LENGTH                              0x1
#define _PIR8_SMT2PWAIF_MASK                                0x20

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x716);
#ifndef _LIB_BUILD
asm("PIE0 equ 0716h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTE                   :1;
        unsigned                        :3;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x716);
// bitfield macros
#define _PIE0_INTE_POSN                                     0x0
#define _PIE0_INTE_POSITION                                 0x0
#define _PIE0_INTE_SIZE                                     0x1
#define _PIE0_INTE_LENGTH                                   0x1
#define _PIE0_INTE_MASK                                     0x1
#define _PIE0_IOCIE_POSN                                    0x4
#define _PIE0_IOCIE_POSITION                                0x4
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x10
#define _PIE0_TMR0IE_POSN                                   0x5
#define _PIE0_TMR0IE_POSITION                               0x5
#define _PIE0_TMR0IE_SIZE                                   0x1
#define _PIE0_TMR0IE_LENGTH                                 0x1
#define _PIE0_TMR0IE_MASK                                   0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x717);
#ifndef _LIB_BUILD
asm("PIE1 equ 0717h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
        unsigned                        :4;
        unsigned CSWIE                  :1;
        unsigned OSFIE                  :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x717);
// bitfield macros
#define _PIE1_ADIE_POSN                                     0x0
#define _PIE1_ADIE_POSITION                                 0x0
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x1
#define _PIE1_ADTIE_POSN                                    0x1
#define _PIE1_ADTIE_POSITION                                0x1
#define _PIE1_ADTIE_SIZE                                    0x1
#define _PIE1_ADTIE_LENGTH                                  0x1
#define _PIE1_ADTIE_MASK                                    0x2
#define _PIE1_CSWIE_POSN                                    0x6
#define _PIE1_CSWIE_POSITION                                0x6
#define _PIE1_CSWIE_SIZE                                    0x1
#define _PIE1_CSWIE_LENGTH                                  0x1
#define _PIE1_CSWIE_MASK                                    0x40
#define _PIE1_OSFIE_POSN                                    0x7
#define _PIE1_OSFIE_POSITION                                0x7
#define _PIE1_OSFIE_SIZE                                    0x1
#define _PIE1_OSFIE_LENGTH                                  0x1
#define _PIE1_OSFIE_MASK                                    0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x718);
#ifndef _LIB_BUILD
asm("PIE2 equ 0718h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IE                   :1;
        unsigned C2IE                   :1;
        unsigned                        :4;
        unsigned ZCDIE                  :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x718);
// bitfield macros
#define _PIE2_C1IE_POSN                                     0x0
#define _PIE2_C1IE_POSITION                                 0x0
#define _PIE2_C1IE_SIZE                                     0x1
#define _PIE2_C1IE_LENGTH                                   0x1
#define _PIE2_C1IE_MASK                                     0x1
#define _PIE2_C2IE_POSN                                     0x1
#define _PIE2_C2IE_POSITION                                 0x1
#define _PIE2_C2IE_SIZE                                     0x1
#define _PIE2_C2IE_LENGTH                                   0x1
#define _PIE2_C2IE_MASK                                     0x2
#define _PIE2_ZCDIE_POSN                                    0x6
#define _PIE2_ZCDIE_POSITION                                0x6
#define _PIE2_ZCDIE_SIZE                                    0x1
#define _PIE2_ZCDIE_LENGTH                                  0x1
#define _PIE2_ZCDIE_MASK                                    0x40

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x719);
#ifndef _LIB_BUILD
asm("PIE3 equ 0719h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned SSP2IE                 :1;
        unsigned BCL2IE                 :1;
        unsigned TXIE                   :1;
        unsigned RCIE                   :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x719);
// bitfield macros
#define _PIE3_SSP1IE_POSN                                   0x0
#define _PIE3_SSP1IE_POSITION                               0x0
#define _PIE3_SSP1IE_SIZE                                   0x1
#define _PIE3_SSP1IE_LENGTH                                 0x1
#define _PIE3_SSP1IE_MASK                                   0x1
#define _PIE3_BCL1IE_POSN                                   0x1
#define _PIE3_BCL1IE_POSITION                               0x1
#define _PIE3_BCL1IE_SIZE                                   0x1
#define _PIE3_BCL1IE_LENGTH                                 0x1
#define _PIE3_BCL1IE_MASK                                   0x2
#define _PIE3_SSP2IE_POSN                                   0x2
#define _PIE3_SSP2IE_POSITION                               0x2
#define _PIE3_SSP2IE_SIZE                                   0x1
#define _PIE3_SSP2IE_LENGTH                                 0x1
#define _PIE3_SSP2IE_MASK                                   0x4
#define _PIE3_BCL2IE_POSN                                   0x3
#define _PIE3_BCL2IE_POSITION                               0x3
#define _PIE3_BCL2IE_SIZE                                   0x1
#define _PIE3_BCL2IE_LENGTH                                 0x1
#define _PIE3_BCL2IE_MASK                                   0x8
#define _PIE3_TXIE_POSN                                     0x4
#define _PIE3_TXIE_POSITION                                 0x4
#define _PIE3_TXIE_SIZE                                     0x1
#define _PIE3_TXIE_LENGTH                                   0x1
#define _PIE3_TXIE_MASK                                     0x10
#define _PIE3_RCIE_POSN                                     0x5
#define _PIE3_RCIE_POSITION                                 0x5
#define _PIE3_RCIE_SIZE                                     0x1
#define _PIE3_RCIE_LENGTH                                   0x1
#define _PIE3_RCIE_MASK                                     0x20

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x71A);
#ifndef _LIB_BUILD
asm("PIE4 equ 071Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned TMR3IE                 :1;
        unsigned TMR4IE                 :1;
        unsigned TMR5IE                 :1;
        unsigned TMR6IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x71A);
// bitfield macros
#define _PIE4_TMR1IE_POSN                                   0x0
#define _PIE4_TMR1IE_POSITION                               0x0
#define _PIE4_TMR1IE_SIZE                                   0x1
#define _PIE4_TMR1IE_LENGTH                                 0x1
#define _PIE4_TMR1IE_MASK                                   0x1
#define _PIE4_TMR2IE_POSN                                   0x1
#define _PIE4_TMR2IE_POSITION                               0x1
#define _PIE4_TMR2IE_SIZE                                   0x1
#define _PIE4_TMR2IE_LENGTH                                 0x1
#define _PIE4_TMR2IE_MASK                                   0x2
#define _PIE4_TMR3IE_POSN                                   0x2
#define _PIE4_TMR3IE_POSITION                               0x2
#define _PIE4_TMR3IE_SIZE                                   0x1
#define _PIE4_TMR3IE_LENGTH                                 0x1
#define _PIE4_TMR3IE_MASK                                   0x4
#define _PIE4_TMR4IE_POSN                                   0x3
#define _PIE4_TMR4IE_POSITION                               0x3
#define _PIE4_TMR4IE_SIZE                                   0x1
#define _PIE4_TMR4IE_LENGTH                                 0x1
#define _PIE4_TMR4IE_MASK                                   0x8
#define _PIE4_TMR5IE_POSN                                   0x4
#define _PIE4_TMR5IE_POSITION                               0x4
#define _PIE4_TMR5IE_SIZE                                   0x1
#define _PIE4_TMR5IE_LENGTH                                 0x1
#define _PIE4_TMR5IE_MASK                                   0x10
#define _PIE4_TMR6IE_POSN                                   0x5
#define _PIE4_TMR6IE_POSITION                               0x5
#define _PIE4_TMR6IE_SIZE                                   0x1
#define _PIE4_TMR6IE_LENGTH                                 0x1
#define _PIE4_TMR6IE_MASK                                   0x20

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x71B);
#ifndef _LIB_BUILD
asm("PIE5 equ 071Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIE                :1;
        unsigned TMR3GIE                :1;
        unsigned TMR5GIE                :1;
        unsigned                        :1;
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned CLC4IE                 :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x71B);
// bitfield macros
#define _PIE5_TMR1GIE_POSN                                  0x0
#define _PIE5_TMR1GIE_POSITION                              0x0
#define _PIE5_TMR1GIE_SIZE                                  0x1
#define _PIE5_TMR1GIE_LENGTH                                0x1
#define _PIE5_TMR1GIE_MASK                                  0x1
#define _PIE5_TMR3GIE_POSN                                  0x1
#define _PIE5_TMR3GIE_POSITION                              0x1
#define _PIE5_TMR3GIE_SIZE                                  0x1
#define _PIE5_TMR3GIE_LENGTH                                0x1
#define _PIE5_TMR3GIE_MASK                                  0x2
#define _PIE5_TMR5GIE_POSN                                  0x2
#define _PIE5_TMR5GIE_POSITION                              0x2
#define _PIE5_TMR5GIE_SIZE                                  0x1
#define _PIE5_TMR5GIE_LENGTH                                0x1
#define _PIE5_TMR5GIE_MASK                                  0x4
#define _PIE5_CLC1IE_POSN                                   0x4
#define _PIE5_CLC1IE_POSITION                               0x4
#define _PIE5_CLC1IE_SIZE                                   0x1
#define _PIE5_CLC1IE_LENGTH                                 0x1
#define _PIE5_CLC1IE_MASK                                   0x10
#define _PIE5_CLC2IE_POSN                                   0x5
#define _PIE5_CLC2IE_POSITION                               0x5
#define _PIE5_CLC2IE_SIZE                                   0x1
#define _PIE5_CLC2IE_LENGTH                                 0x1
#define _PIE5_CLC2IE_MASK                                   0x20
#define _PIE5_CLC3IE_POSN                                   0x6
#define _PIE5_CLC3IE_POSITION                               0x6
#define _PIE5_CLC3IE_SIZE                                   0x1
#define _PIE5_CLC3IE_LENGTH                                 0x1
#define _PIE5_CLC3IE_MASK                                   0x40
#define _PIE5_CLC4IE_POSN                                   0x7
#define _PIE5_CLC4IE_POSITION                               0x7
#define _PIE5_CLC4IE_SIZE                                   0x1
#define _PIE5_CLC4IE_LENGTH                                 0x1
#define _PIE5_CLC4IE_MASK                                   0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x71C);
#ifndef _LIB_BUILD
asm("PIE6 equ 071Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
        unsigned CCP3IE                 :1;
        unsigned CCP4IE                 :1;
        unsigned CCP5IE                 :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x71C);
// bitfield macros
#define _PIE6_CCP1IE_POSN                                   0x0
#define _PIE6_CCP1IE_POSITION                               0x0
#define _PIE6_CCP1IE_SIZE                                   0x1
#define _PIE6_CCP1IE_LENGTH                                 0x1
#define _PIE6_CCP1IE_MASK                                   0x1
#define _PIE6_CCP2IE_POSN                                   0x1
#define _PIE6_CCP2IE_POSITION                               0x1
#define _PIE6_CCP2IE_SIZE                                   0x1
#define _PIE6_CCP2IE_LENGTH                                 0x1
#define _PIE6_CCP2IE_MASK                                   0x2
#define _PIE6_CCP3IE_POSN                                   0x2
#define _PIE6_CCP3IE_POSITION                               0x2
#define _PIE6_CCP3IE_SIZE                                   0x1
#define _PIE6_CCP3IE_LENGTH                                 0x1
#define _PIE6_CCP3IE_MASK                                   0x4
#define _PIE6_CCP4IE_POSN                                   0x3
#define _PIE6_CCP4IE_POSITION                               0x3
#define _PIE6_CCP4IE_SIZE                                   0x1
#define _PIE6_CCP4IE_LENGTH                                 0x1
#define _PIE6_CCP4IE_MASK                                   0x8
#define _PIE6_CCP5IE_POSN                                   0x4
#define _PIE6_CCP5IE_POSITION                               0x4
#define _PIE6_CCP5IE_SIZE                                   0x1
#define _PIE6_CCP5IE_LENGTH                                 0x1
#define _PIE6_CCP5IE_MASK                                   0x10

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x71D);
#ifndef _LIB_BUILD
asm("PIE7 equ 071Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1IE                 :1;
        unsigned CWG2IE                 :1;
        unsigned CWG3IE                 :1;
        unsigned                        :1;
        unsigned NCO1IE                 :1;
        unsigned NVMIE                  :1;
        unsigned CRCIE                  :1;
        unsigned SCANIE                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned NCOIE                  :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x71D);
// bitfield macros
#define _PIE7_CWG1IE_POSN                                   0x0
#define _PIE7_CWG1IE_POSITION                               0x0
#define _PIE7_CWG1IE_SIZE                                   0x1
#define _PIE7_CWG1IE_LENGTH                                 0x1
#define _PIE7_CWG1IE_MASK                                   0x1
#define _PIE7_CWG2IE_POSN                                   0x1
#define _PIE7_CWG2IE_POSITION                               0x1
#define _PIE7_CWG2IE_SIZE                                   0x1
#define _PIE7_CWG2IE_LENGTH                                 0x1
#define _PIE7_CWG2IE_MASK                                   0x2
#define _PIE7_CWG3IE_POSN                                   0x2
#define _PIE7_CWG3IE_POSITION                               0x2
#define _PIE7_CWG3IE_SIZE                                   0x1
#define _PIE7_CWG3IE_LENGTH                                 0x1
#define _PIE7_CWG3IE_MASK                                   0x4
#define _PIE7_NCO1IE_POSN                                   0x4
#define _PIE7_NCO1IE_POSITION                               0x4
#define _PIE7_NCO1IE_SIZE                                   0x1
#define _PIE7_NCO1IE_LENGTH                                 0x1
#define _PIE7_NCO1IE_MASK                                   0x10
#define _PIE7_NVMIE_POSN                                    0x5
#define _PIE7_NVMIE_POSITION                                0x5
#define _PIE7_NVMIE_SIZE                                    0x1
#define _PIE7_NVMIE_LENGTH                                  0x1
#define _PIE7_NVMIE_MASK                                    0x20
#define _PIE7_CRCIE_POSN                                    0x6
#define _PIE7_CRCIE_POSITION                                0x6
#define _PIE7_CRCIE_SIZE                                    0x1
#define _PIE7_CRCIE_LENGTH                                  0x1
#define _PIE7_CRCIE_MASK                                    0x40
#define _PIE7_SCANIE_POSN                                   0x7
#define _PIE7_SCANIE_POSITION                               0x7
#define _PIE7_SCANIE_SIZE                                   0x1
#define _PIE7_SCANIE_LENGTH                                 0x1
#define _PIE7_SCANIE_MASK                                   0x80
#define _PIE7_NCOIE_POSN                                    0x4
#define _PIE7_NCOIE_POSITION                                0x4
#define _PIE7_NCOIE_SIZE                                    0x1
#define _PIE7_NCOIE_LENGTH                                  0x1
#define _PIE7_NCOIE_MASK                                    0x10

// Register: PIE8
#define PIE8 PIE8
extern volatile unsigned char           PIE8                __at(0x71E);
#ifndef _LIB_BUILD
asm("PIE8 equ 071Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1IE                 :1;
        unsigned SMT1PRAIE              :1;
        unsigned SMT1PWAIE              :1;
        unsigned SMT2IE                 :1;
        unsigned SMT2PRAIE              :1;
        unsigned SMT2PWAIE              :1;
    };
} PIE8bits_t;
extern volatile PIE8bits_t PIE8bits __at(0x71E);
// bitfield macros
#define _PIE8_SMT1IE_POSN                                   0x0
#define _PIE8_SMT1IE_POSITION                               0x0
#define _PIE8_SMT1IE_SIZE                                   0x1
#define _PIE8_SMT1IE_LENGTH                                 0x1
#define _PIE8_SMT1IE_MASK                                   0x1
#define _PIE8_SMT1PRAIE_POSN                                0x1
#define _PIE8_SMT1PRAIE_POSITION                            0x1
#define _PIE8_SMT1PRAIE_SIZE                                0x1
#define _PIE8_SMT1PRAIE_LENGTH                              0x1
#define _PIE8_SMT1PRAIE_MASK                                0x2
#define _PIE8_SMT1PWAIE_POSN                                0x2
#define _PIE8_SMT1PWAIE_POSITION                            0x2
#define _PIE8_SMT1PWAIE_SIZE                                0x1
#define _PIE8_SMT1PWAIE_LENGTH                              0x1
#define _PIE8_SMT1PWAIE_MASK                                0x4
#define _PIE8_SMT2IE_POSN                                   0x3
#define _PIE8_SMT2IE_POSITION                               0x3
#define _PIE8_SMT2IE_SIZE                                   0x1
#define _PIE8_SMT2IE_LENGTH                                 0x1
#define _PIE8_SMT2IE_MASK                                   0x8
#define _PIE8_SMT2PRAIE_POSN                                0x4
#define _PIE8_SMT2PRAIE_POSITION                            0x4
#define _PIE8_SMT2PRAIE_SIZE                                0x1
#define _PIE8_SMT2PRAIE_LENGTH                              0x1
#define _PIE8_SMT2PRAIE_MASK                                0x10
#define _PIE8_SMT2PWAIE_POSN                                0x5
#define _PIE8_SMT2PWAIE_POSITION                            0x5
#define _PIE8_SMT2PWAIE_SIZE                                0x1
#define _PIE8_SMT2PWAIE_LENGTH                              0x1
#define _PIE8_SMT2PWAIE_MASK                                0x20

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x796);
#ifndef _LIB_BUILD
asm("PMD0 equ 0796h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned CLKRMD                 :1;
        unsigned NVMMD                  :1;
        unsigned SCANMD                 :1;
        unsigned CRCMD                  :1;
        unsigned                        :1;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x796);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_CLKRMD_POSN                                   0x1
#define _PMD0_CLKRMD_POSITION                               0x1
#define _PMD0_CLKRMD_SIZE                                   0x1
#define _PMD0_CLKRMD_LENGTH                                 0x1
#define _PMD0_CLKRMD_MASK                                   0x2
#define _PMD0_NVMMD_POSN                                    0x2
#define _PMD0_NVMMD_POSITION                                0x2
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x4
#define _PMD0_SCANMD_POSN                                   0x3
#define _PMD0_SCANMD_POSITION                               0x3
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x8
#define _PMD0_CRCMD_POSN                                    0x4
#define _PMD0_CRCMD_POSITION                                0x4
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x10
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x797);
#ifndef _LIB_BUILD
asm("PMD1 equ 0797h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR3MD                 :1;
        unsigned TMR4MD                 :1;
        unsigned TMR5MD                 :1;
        unsigned TMR6MD                 :1;
        unsigned NCOMD                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned NCO1MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x797);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_TMR3MD_POSN                                   0x3
#define _PMD1_TMR3MD_POSITION                               0x3
#define _PMD1_TMR3MD_SIZE                                   0x1
#define _PMD1_TMR3MD_LENGTH                                 0x1
#define _PMD1_TMR3MD_MASK                                   0x8
#define _PMD1_TMR4MD_POSN                                   0x4
#define _PMD1_TMR4MD_POSITION                               0x4
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x10
#define _PMD1_TMR5MD_POSN                                   0x5
#define _PMD1_TMR5MD_POSITION                               0x5
#define _PMD1_TMR5MD_SIZE                                   0x1
#define _PMD1_TMR5MD_LENGTH                                 0x1
#define _PMD1_TMR5MD_MASK                                   0x20
#define _PMD1_TMR6MD_POSN                                   0x6
#define _PMD1_TMR6MD_POSITION                               0x6
#define _PMD1_TMR6MD_SIZE                                   0x1
#define _PMD1_TMR6MD_LENGTH                                 0x1
#define _PMD1_TMR6MD_MASK                                   0x40
#define _PMD1_NCOMD_POSN                                    0x7
#define _PMD1_NCOMD_POSITION                                0x7
#define _PMD1_NCOMD_SIZE                                    0x1
#define _PMD1_NCOMD_LENGTH                                  0x1
#define _PMD1_NCOMD_MASK                                    0x80
#define _PMD1_NCO1MD_POSN                                   0x7
#define _PMD1_NCO1MD_POSITION                               0x7
#define _PMD1_NCO1MD_SIZE                                   0x1
#define _PMD1_NCO1MD_LENGTH                                 0x1
#define _PMD1_NCO1MD_MASK                                   0x80

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x798);
#ifndef _LIB_BUILD
asm("PMD2 equ 0798h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDMD                  :1;
        unsigned CMP1MD                 :1;
        unsigned CMP2MD                 :1;
        unsigned                        :2;
        unsigned ADCMD                  :1;
        unsigned DACMD                  :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x798);
// bitfield macros
#define _PMD2_ZCDMD_POSN                                    0x0
#define _PMD2_ZCDMD_POSITION                                0x0
#define _PMD2_ZCDMD_SIZE                                    0x1
#define _PMD2_ZCDMD_LENGTH                                  0x1
#define _PMD2_ZCDMD_MASK                                    0x1
#define _PMD2_CMP1MD_POSN                                   0x1
#define _PMD2_CMP1MD_POSITION                               0x1
#define _PMD2_CMP1MD_SIZE                                   0x1
#define _PMD2_CMP1MD_LENGTH                                 0x1
#define _PMD2_CMP1MD_MASK                                   0x2
#define _PMD2_CMP2MD_POSN                                   0x2
#define _PMD2_CMP2MD_POSITION                               0x2
#define _PMD2_CMP2MD_SIZE                                   0x1
#define _PMD2_CMP2MD_LENGTH                                 0x1
#define _PMD2_CMP2MD_MASK                                   0x4
#define _PMD2_ADCMD_POSN                                    0x5
#define _PMD2_ADCMD_POSITION                                0x5
#define _PMD2_ADCMD_SIZE                                    0x1
#define _PMD2_ADCMD_LENGTH                                  0x1
#define _PMD2_ADCMD_MASK                                    0x20
#define _PMD2_DACMD_POSN                                    0x6
#define _PMD2_DACMD_POSITION                                0x6
#define _PMD2_DACMD_SIZE                                    0x1
#define _PMD2_DACMD_LENGTH                                  0x1
#define _PMD2_DACMD_MASK                                    0x40

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x799);
#ifndef _LIB_BUILD
asm("PMD3 equ 0799h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned CCP3MD                 :1;
        unsigned CCP4MD                 :1;
        unsigned CCP5MD                 :1;
        unsigned PWM6MD                 :1;
        unsigned PWM7MD                 :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x799);
// bitfield macros
#define _PMD3_CCP1MD_POSN                                   0x0
#define _PMD3_CCP1MD_POSITION                               0x0
#define _PMD3_CCP1MD_SIZE                                   0x1
#define _PMD3_CCP1MD_LENGTH                                 0x1
#define _PMD3_CCP1MD_MASK                                   0x1
#define _PMD3_CCP2MD_POSN                                   0x1
#define _PMD3_CCP2MD_POSITION                               0x1
#define _PMD3_CCP2MD_SIZE                                   0x1
#define _PMD3_CCP2MD_LENGTH                                 0x1
#define _PMD3_CCP2MD_MASK                                   0x2
#define _PMD3_CCP3MD_POSN                                   0x2
#define _PMD3_CCP3MD_POSITION                               0x2
#define _PMD3_CCP3MD_SIZE                                   0x1
#define _PMD3_CCP3MD_LENGTH                                 0x1
#define _PMD3_CCP3MD_MASK                                   0x4
#define _PMD3_CCP4MD_POSN                                   0x3
#define _PMD3_CCP4MD_POSITION                               0x3
#define _PMD3_CCP4MD_SIZE                                   0x1
#define _PMD3_CCP4MD_LENGTH                                 0x1
#define _PMD3_CCP4MD_MASK                                   0x8
#define _PMD3_CCP5MD_POSN                                   0x4
#define _PMD3_CCP5MD_POSITION                               0x4
#define _PMD3_CCP5MD_SIZE                                   0x1
#define _PMD3_CCP5MD_LENGTH                                 0x1
#define _PMD3_CCP5MD_MASK                                   0x10
#define _PMD3_PWM6MD_POSN                                   0x5
#define _PMD3_PWM6MD_POSITION                               0x5
#define _PMD3_PWM6MD_SIZE                                   0x1
#define _PMD3_PWM6MD_LENGTH                                 0x1
#define _PMD3_PWM6MD_MASK                                   0x20
#define _PMD3_PWM7MD_POSN                                   0x6
#define _PMD3_PWM7MD_POSITION                               0x6
#define _PMD3_PWM7MD_SIZE                                   0x1
#define _PMD3_PWM7MD_LENGTH                                 0x1
#define _PMD3_PWM7MD_MASK                                   0x40

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x79A);
#ifndef _LIB_BUILD
asm("PMD4 equ 079Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1MD                 :1;
        unsigned CWG2MD                 :1;
        unsigned CWG3MD                 :1;
        unsigned                        :1;
        unsigned MSSP1MD                :1;
        unsigned MSSP2MD                :1;
        unsigned UART1MD                :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x79A);
// bitfield macros
#define _PMD4_CWG1MD_POSN                                   0x0
#define _PMD4_CWG1MD_POSITION                               0x0
#define _PMD4_CWG1MD_SIZE                                   0x1
#define _PMD4_CWG1MD_LENGTH                                 0x1
#define _PMD4_CWG1MD_MASK                                   0x1
#define _PMD4_CWG2MD_POSN                                   0x1
#define _PMD4_CWG2MD_POSITION                               0x1
#define _PMD4_CWG2MD_SIZE                                   0x1
#define _PMD4_CWG2MD_LENGTH                                 0x1
#define _PMD4_CWG2MD_MASK                                   0x2
#define _PMD4_CWG3MD_POSN                                   0x2
#define _PMD4_CWG3MD_POSITION                               0x2
#define _PMD4_CWG3MD_SIZE                                   0x1
#define _PMD4_CWG3MD_LENGTH                                 0x1
#define _PMD4_CWG3MD_MASK                                   0x4
#define _PMD4_MSSP1MD_POSN                                  0x4
#define _PMD4_MSSP1MD_POSITION                              0x4
#define _PMD4_MSSP1MD_SIZE                                  0x1
#define _PMD4_MSSP1MD_LENGTH                                0x1
#define _PMD4_MSSP1MD_MASK                                  0x10
#define _PMD4_MSSP2MD_POSN                                  0x5
#define _PMD4_MSSP2MD_POSITION                              0x5
#define _PMD4_MSSP2MD_SIZE                                  0x1
#define _PMD4_MSSP2MD_LENGTH                                0x1
#define _PMD4_MSSP2MD_MASK                                  0x20
#define _PMD4_UART1MD_POSN                                  0x6
#define _PMD4_UART1MD_POSITION                              0x6
#define _PMD4_UART1MD_SIZE                                  0x1
#define _PMD4_UART1MD_LENGTH                                0x1
#define _PMD4_UART1MD_MASK                                  0x40

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0x79B);
#ifndef _LIB_BUILD
asm("PMD5 equ 079Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSMMD                  :1;
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
        unsigned CLC4MD                 :1;
        unsigned                        :1;
        unsigned SMT1MD                 :1;
        unsigned SMT2MD                 :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0x79B);
// bitfield macros
#define _PMD5_DSMMD_POSN                                    0x0
#define _PMD5_DSMMD_POSITION                                0x0
#define _PMD5_DSMMD_SIZE                                    0x1
#define _PMD5_DSMMD_LENGTH                                  0x1
#define _PMD5_DSMMD_MASK                                    0x1
#define _PMD5_CLC1MD_POSN                                   0x1
#define _PMD5_CLC1MD_POSITION                               0x1
#define _PMD5_CLC1MD_SIZE                                   0x1
#define _PMD5_CLC1MD_LENGTH                                 0x1
#define _PMD5_CLC1MD_MASK                                   0x2
#define _PMD5_CLC2MD_POSN                                   0x2
#define _PMD5_CLC2MD_POSITION                               0x2
#define _PMD5_CLC2MD_SIZE                                   0x1
#define _PMD5_CLC2MD_LENGTH                                 0x1
#define _PMD5_CLC2MD_MASK                                   0x4
#define _PMD5_CLC3MD_POSN                                   0x3
#define _PMD5_CLC3MD_POSITION                               0x3
#define _PMD5_CLC3MD_SIZE                                   0x1
#define _PMD5_CLC3MD_LENGTH                                 0x1
#define _PMD5_CLC3MD_MASK                                   0x8
#define _PMD5_CLC4MD_POSN                                   0x4
#define _PMD5_CLC4MD_POSITION                               0x4
#define _PMD5_CLC4MD_SIZE                                   0x1
#define _PMD5_CLC4MD_LENGTH                                 0x1
#define _PMD5_CLC4MD_MASK                                   0x10
#define _PMD5_SMT1MD_POSN                                   0x6
#define _PMD5_SMT1MD_POSITION                               0x6
#define _PMD5_SMT1MD_SIZE                                   0x1
#define _PMD5_SMT1MD_LENGTH                                 0x1
#define _PMD5_SMT1MD_MASK                                   0x40
#define _PMD5_SMT2MD_POSN                                   0x7
#define _PMD5_SMT2MD_POSITION                               0x7
#define _PMD5_SMT2MD_SIZE                                   0x1
#define _PMD5_SMT2MD_LENGTH                                 0x1
#define _PMD5_SMT2MD_MASK                                   0x80

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x80C);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 080Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned SWDTEN                 :1;
    };
    struct {
        unsigned WDTSEN                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x80C);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x80D);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 080Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
    };
    struct {
        unsigned WDTWINDOW              :3;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x80D);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x80E);
#ifndef _LIB_BUILD
asm("WDTPSL equ 080Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT0              :1;
        unsigned WDTPSCNT1              :1;
        unsigned WDTPSCNT2              :1;
        unsigned WDTPSCNT3              :1;
        unsigned WDTPSCNT4              :1;
        unsigned WDTPSCNT5              :1;
        unsigned WDTPSCNT6              :1;
        unsigned WDTPSCNT7              :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x80E);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80
#define _WDTPSL_WDTPSCNT_POSN                               0x0
#define _WDTPSL_WDTPSCNT_POSITION                           0x0
#define _WDTPSL_WDTPSCNT_SIZE                               0x8
#define _WDTPSL_WDTPSCNT_LENGTH                             0x8
#define _WDTPSL_WDTPSCNT_MASK                               0xFF
#define _WDTPSL_WDTPSCNT0_POSN                              0x0
#define _WDTPSL_WDTPSCNT0_POSITION                          0x0
#define _WDTPSL_WDTPSCNT0_SIZE                              0x1
#define _WDTPSL_WDTPSCNT0_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT0_MASK                              0x1
#define _WDTPSL_WDTPSCNT1_POSN                              0x1
#define _WDTPSL_WDTPSCNT1_POSITION                          0x1
#define _WDTPSL_WDTPSCNT1_SIZE                              0x1
#define _WDTPSL_WDTPSCNT1_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT1_MASK                              0x2
#define _WDTPSL_WDTPSCNT2_POSN                              0x2
#define _WDTPSL_WDTPSCNT2_POSITION                          0x2
#define _WDTPSL_WDTPSCNT2_SIZE                              0x1
#define _WDTPSL_WDTPSCNT2_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT2_MASK                              0x4
#define _WDTPSL_WDTPSCNT3_POSN                              0x3
#define _WDTPSL_WDTPSCNT3_POSITION                          0x3
#define _WDTPSL_WDTPSCNT3_SIZE                              0x1
#define _WDTPSL_WDTPSCNT3_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT3_MASK                              0x8
#define _WDTPSL_WDTPSCNT4_POSN                              0x4
#define _WDTPSL_WDTPSCNT4_POSITION                          0x4
#define _WDTPSL_WDTPSCNT4_SIZE                              0x1
#define _WDTPSL_WDTPSCNT4_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT4_MASK                              0x10
#define _WDTPSL_WDTPSCNT5_POSN                              0x5
#define _WDTPSL_WDTPSCNT5_POSITION                          0x5
#define _WDTPSL_WDTPSCNT5_SIZE                              0x1
#define _WDTPSL_WDTPSCNT5_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT5_MASK                              0x20
#define _WDTPSL_WDTPSCNT6_POSN                              0x6
#define _WDTPSL_WDTPSCNT6_POSITION                          0x6
#define _WDTPSL_WDTPSCNT6_SIZE                              0x1
#define _WDTPSL_WDTPSCNT6_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT6_MASK                              0x40
#define _WDTPSL_WDTPSCNT7_POSN                              0x7
#define _WDTPSL_WDTPSCNT7_POSITION                          0x7
#define _WDTPSL_WDTPSCNT7_SIZE                              0x1
#define _WDTPSL_WDTPSCNT7_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT7_MASK                              0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x80F);
#ifndef _LIB_BUILD
asm("WDTPSH equ 080Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT8              :1;
        unsigned WDTPSCNT9              :1;
        unsigned WDTPSCNT10             :1;
        unsigned WDTPSCNT11             :1;
        unsigned WDTPSCNT12             :1;
        unsigned WDTPSCNT13             :1;
        unsigned WDTPSCNT14             :1;
        unsigned WDTPSCNT15             :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x80F);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80
#define _WDTPSH_WDTPSCNT_POSN                               0x0
#define _WDTPSH_WDTPSCNT_POSITION                           0x0
#define _WDTPSH_WDTPSCNT_SIZE                               0x8
#define _WDTPSH_WDTPSCNT_LENGTH                             0x8
#define _WDTPSH_WDTPSCNT_MASK                               0xFF
#define _WDTPSH_WDTPSCNT8_POSN                              0x0
#define _WDTPSH_WDTPSCNT8_POSITION                          0x0
#define _WDTPSH_WDTPSCNT8_SIZE                              0x1
#define _WDTPSH_WDTPSCNT8_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT8_MASK                              0x1
#define _WDTPSH_WDTPSCNT9_POSN                              0x1
#define _WDTPSH_WDTPSCNT9_POSITION                          0x1
#define _WDTPSH_WDTPSCNT9_SIZE                              0x1
#define _WDTPSH_WDTPSCNT9_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT9_MASK                              0x2
#define _WDTPSH_WDTPSCNT10_POSN                             0x2
#define _WDTPSH_WDTPSCNT10_POSITION                         0x2
#define _WDTPSH_WDTPSCNT10_SIZE                             0x1
#define _WDTPSH_WDTPSCNT10_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT10_MASK                             0x4
#define _WDTPSH_WDTPSCNT11_POSN                             0x3
#define _WDTPSH_WDTPSCNT11_POSITION                         0x3
#define _WDTPSH_WDTPSCNT11_SIZE                             0x1
#define _WDTPSH_WDTPSCNT11_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT11_MASK                             0x8
#define _WDTPSH_WDTPSCNT12_POSN                             0x4
#define _WDTPSH_WDTPSCNT12_POSITION                         0x4
#define _WDTPSH_WDTPSCNT12_SIZE                             0x1
#define _WDTPSH_WDTPSCNT12_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT12_MASK                             0x10
#define _WDTPSH_WDTPSCNT13_POSN                             0x5
#define _WDTPSH_WDTPSCNT13_POSITION                         0x5
#define _WDTPSH_WDTPSCNT13_SIZE                             0x1
#define _WDTPSH_WDTPSCNT13_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT13_MASK                             0x20
#define _WDTPSH_WDTPSCNT14_POSN                             0x6
#define _WDTPSH_WDTPSCNT14_POSITION                         0x6
#define _WDTPSH_WDTPSCNT14_SIZE                             0x1
#define _WDTPSH_WDTPSCNT14_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT14_MASK                             0x40
#define _WDTPSH_WDTPSCNT15_POSN                             0x7
#define _WDTPSH_WDTPSCNT15_POSITION                         0x7
#define _WDTPSH_WDTPSCNT15_SIZE                             0x1
#define _WDTPSH_WDTPSCNT15_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT15_MASK                             0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x810);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0810h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x810);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x811);
#ifndef _LIB_BUILD
asm("BORCON equ 0811h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x811);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0x812);
#ifndef _LIB_BUILD
asm("VREGCON equ 0812h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned VREGPM                 :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0x812);
// bitfield macros
#define _VREGCON_VREGPM_POSN                                0x1
#define _VREGCON_VREGPM_POSITION                            0x1
#define _VREGCON_VREGPM_SIZE                                0x1
#define _VREGCON_VREGPM_LENGTH                              0x1
#define _VREGCON_VREGPM_MASK                                0x2

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x813);
#ifndef _LIB_BUILD
asm("PCON0 equ 0813h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x813);
// bitfield macros
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80

// Register: CCDCON
#define CCDCON CCDCON
extern volatile unsigned char           CCDCON              __at(0x814);
#ifndef _LIB_BUILD
asm("CCDCON equ 0814h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDS0                  :1;
        unsigned CCDS1                  :1;
        unsigned                        :5;
        unsigned CCDEN                  :1;
    };
} CCDCONbits_t;
extern volatile CCDCONbits_t CCDCONbits __at(0x814);
// bitfield macros
#define _CCDCON_CCDS0_POSN                                  0x0
#define _CCDCON_CCDS0_POSITION                              0x0
#define _CCDCON_CCDS0_SIZE                                  0x1
#define _CCDCON_CCDS0_LENGTH                                0x1
#define _CCDCON_CCDS0_MASK                                  0x1
#define _CCDCON_CCDS1_POSN                                  0x1
#define _CCDCON_CCDS1_POSITION                              0x1
#define _CCDCON_CCDS1_SIZE                                  0x1
#define _CCDCON_CCDS1_LENGTH                                0x1
#define _CCDCON_CCDS1_MASK                                  0x2
#define _CCDCON_CCDEN_POSN                                  0x7
#define _CCDCON_CCDEN_POSITION                              0x7
#define _CCDCON_CCDEN_SIZE                                  0x1
#define _CCDCON_CCDEN_LENGTH                                0x1
#define _CCDCON_CCDEN_MASK                                  0x80

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x81A);
#ifndef _LIB_BUILD
asm("NVMADRL equ 081Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x81A);
// bitfield macros
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x81B);
#ifndef _LIB_BUILD
asm("NVMADRH equ 081Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
        unsigned NVMADR10               :1;
        unsigned NVMADR11               :1;
        unsigned NVMADR12               :1;
        unsigned NVMADR13               :1;
        unsigned NVMADR14               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x81B);
// bitfield macros
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2
#define _NVMADRH_NVMADR10_POSN                              0x2
#define _NVMADRH_NVMADR10_POSITION                          0x2
#define _NVMADRH_NVMADR10_SIZE                              0x1
#define _NVMADRH_NVMADR10_LENGTH                            0x1
#define _NVMADRH_NVMADR10_MASK                              0x4
#define _NVMADRH_NVMADR11_POSN                              0x3
#define _NVMADRH_NVMADR11_POSITION                          0x3
#define _NVMADRH_NVMADR11_SIZE                              0x1
#define _NVMADRH_NVMADR11_LENGTH                            0x1
#define _NVMADRH_NVMADR11_MASK                              0x8
#define _NVMADRH_NVMADR12_POSN                              0x4
#define _NVMADRH_NVMADR12_POSITION                          0x4
#define _NVMADRH_NVMADR12_SIZE                              0x1
#define _NVMADRH_NVMADR12_LENGTH                            0x1
#define _NVMADRH_NVMADR12_MASK                              0x10
#define _NVMADRH_NVMADR13_POSN                              0x5
#define _NVMADRH_NVMADR13_POSITION                          0x5
#define _NVMADRH_NVMADR13_SIZE                              0x1
#define _NVMADRH_NVMADR13_LENGTH                            0x1
#define _NVMADRH_NVMADR13_MASK                              0x20
#define _NVMADRH_NVMADR14_POSN                              0x6
#define _NVMADRH_NVMADR14_POSITION                          0x6
#define _NVMADRH_NVMADR14_SIZE                              0x1
#define _NVMADRH_NVMADR14_LENGTH                            0x1
#define _NVMADRH_NVMADR14_MASK                              0x40

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x81C);
#ifndef _LIB_BUILD
asm("NVMDATL equ 081Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x81C);
// bitfield macros
#define _NVMDATL_NVMDAT0_POSN                               0x0
#define _NVMDATL_NVMDAT0_POSITION                           0x0
#define _NVMDATL_NVMDAT0_SIZE                               0x1
#define _NVMDATL_NVMDAT0_LENGTH                             0x1
#define _NVMDATL_NVMDAT0_MASK                               0x1
#define _NVMDATL_NVMDAT1_POSN                               0x1
#define _NVMDATL_NVMDAT1_POSITION                           0x1
#define _NVMDATL_NVMDAT1_SIZE                               0x1
#define _NVMDATL_NVMDAT1_LENGTH                             0x1
#define _NVMDATL_NVMDAT1_MASK                               0x2
#define _NVMDATL_NVMDAT2_POSN                               0x2
#define _NVMDATL_NVMDAT2_POSITION                           0x2
#define _NVMDATL_NVMDAT2_SIZE                               0x1
#define _NVMDATL_NVMDAT2_LENGTH                             0x1
#define _NVMDATL_NVMDAT2_MASK                               0x4
#define _NVMDATL_NVMDAT3_POSN                               0x3
#define _NVMDATL_NVMDAT3_POSITION                           0x3
#define _NVMDATL_NVMDAT3_SIZE                               0x1
#define _NVMDATL_NVMDAT3_LENGTH                             0x1
#define _NVMDATL_NVMDAT3_MASK                               0x8
#define _NVMDATL_NVMDAT4_POSN                               0x4
#define _NVMDATL_NVMDAT4_POSITION                           0x4
#define _NVMDATL_NVMDAT4_SIZE                               0x1
#define _NVMDATL_NVMDAT4_LENGTH                             0x1
#define _NVMDATL_NVMDAT4_MASK                               0x10
#define _NVMDATL_NVMDAT5_POSN                               0x5
#define _NVMDATL_NVMDAT5_POSITION                           0x5
#define _NVMDATL_NVMDAT5_SIZE                               0x1
#define _NVMDATL_NVMDAT5_LENGTH                             0x1
#define _NVMDATL_NVMDAT5_MASK                               0x20
#define _NVMDATL_NVMDAT6_POSN                               0x6
#define _NVMDATL_NVMDAT6_POSITION                           0x6
#define _NVMDATL_NVMDAT6_SIZE                               0x1
#define _NVMDATL_NVMDAT6_LENGTH                             0x1
#define _NVMDATL_NVMDAT6_MASK                               0x40
#define _NVMDATL_NVMDAT7_POSN                               0x7
#define _NVMDATL_NVMDAT7_POSITION                           0x7
#define _NVMDATL_NVMDAT7_SIZE                               0x1
#define _NVMDATL_NVMDAT7_LENGTH                             0x1
#define _NVMDATL_NVMDAT7_MASK                               0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x81D);
#ifndef _LIB_BUILD
asm("NVMDATH equ 081Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT8                :1;
        unsigned NVMDAT9                :1;
        unsigned NVMDAT10               :1;
        unsigned NVMDAT11               :1;
        unsigned NVMDAT12               :1;
        unsigned NVMDAT13               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x81D);
// bitfield macros
#define _NVMDATH_NVMDAT8_POSN                               0x0
#define _NVMDATH_NVMDAT8_POSITION                           0x0
#define _NVMDATH_NVMDAT8_SIZE                               0x1
#define _NVMDATH_NVMDAT8_LENGTH                             0x1
#define _NVMDATH_NVMDAT8_MASK                               0x1
#define _NVMDATH_NVMDAT9_POSN                               0x1
#define _NVMDATH_NVMDAT9_POSITION                           0x1
#define _NVMDATH_NVMDAT9_SIZE                               0x1
#define _NVMDATH_NVMDAT9_LENGTH                             0x1
#define _NVMDATH_NVMDAT9_MASK                               0x2
#define _NVMDATH_NVMDAT10_POSN                              0x2
#define _NVMDATH_NVMDAT10_POSITION                          0x2
#define _NVMDATH_NVMDAT10_SIZE                              0x1
#define _NVMDATH_NVMDAT10_LENGTH                            0x1
#define _NVMDATH_NVMDAT10_MASK                              0x4
#define _NVMDATH_NVMDAT11_POSN                              0x3
#define _NVMDATH_NVMDAT11_POSITION                          0x3
#define _NVMDATH_NVMDAT11_SIZE                              0x1
#define _NVMDATH_NVMDAT11_LENGTH                            0x1
#define _NVMDATH_NVMDAT11_MASK                              0x8
#define _NVMDATH_NVMDAT12_POSN                              0x4
#define _NVMDATH_NVMDAT12_POSITION                          0x4
#define _NVMDATH_NVMDAT12_SIZE                              0x1
#define _NVMDATH_NVMDAT12_LENGTH                            0x1
#define _NVMDATH_NVMDAT12_MASK                              0x10
#define _NVMDATH_NVMDAT13_POSN                              0x5
#define _NVMDATH_NVMDAT13_POSITION                          0x5
#define _NVMDATH_NVMDAT13_SIZE                              0x1
#define _NVMDATH_NVMDAT13_LENGTH                            0x1
#define _NVMDATH_NVMDAT13_MASK                              0x20

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x81E);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 081Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned NVMREGS                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x81E);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_LWLO_POSN                                  0x5
#define _NVMCON1_LWLO_POSITION                              0x5
#define _NVMCON1_LWLO_SIZE                                  0x1
#define _NVMCON1_LWLO_LENGTH                                0x1
#define _NVMCON1_LWLO_MASK                                  0x20
#define _NVMCON1_NVMREGS_POSN                               0x6
#define _NVMCON1_NVMREGS_POSITION                           0x6
#define _NVMCON1_NVMREGS_SIZE                               0x1
#define _NVMCON1_NVMREGS_LENGTH                             0x1
#define _NVMCON1_NVMREGS_MASK                               0x40

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0x81F);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 081Fh");
#endif

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x88C);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 088Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x88C);
// bitfield macros
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x88D);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 088Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x88D);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x88E);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 088Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x88E);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x88F);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 088Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x88F);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x890);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 0890h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x890);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x891);
#ifndef _LIB_BUILD
asm("OSCEN equ 0891h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x891);
// bitfield macros
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x892);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0892h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFTUN                  :6;
    };
    struct {
        unsigned HFTUN0                 :1;
        unsigned HFTUN1                 :1;
        unsigned HFTUN2                 :1;
        unsigned HFTUN3                 :1;
        unsigned HFTUN4                 :1;
        unsigned HFTUN5                 :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x892);
// bitfield macros
#define _OSCTUNE_HFTUN_POSN                                 0x0
#define _OSCTUNE_HFTUN_POSITION                             0x0
#define _OSCTUNE_HFTUN_SIZE                                 0x6
#define _OSCTUNE_HFTUN_LENGTH                               0x6
#define _OSCTUNE_HFTUN_MASK                                 0x3F
#define _OSCTUNE_HFTUN0_POSN                                0x0
#define _OSCTUNE_HFTUN0_POSITION                            0x0
#define _OSCTUNE_HFTUN0_SIZE                                0x1
#define _OSCTUNE_HFTUN0_LENGTH                              0x1
#define _OSCTUNE_HFTUN0_MASK                                0x1
#define _OSCTUNE_HFTUN1_POSN                                0x1
#define _OSCTUNE_HFTUN1_POSITION                            0x1
#define _OSCTUNE_HFTUN1_SIZE                                0x1
#define _OSCTUNE_HFTUN1_LENGTH                              0x1
#define _OSCTUNE_HFTUN1_MASK                                0x2
#define _OSCTUNE_HFTUN2_POSN                                0x2
#define _OSCTUNE_HFTUN2_POSITION                            0x2
#define _OSCTUNE_HFTUN2_SIZE                                0x1
#define _OSCTUNE_HFTUN2_LENGTH                              0x1
#define _OSCTUNE_HFTUN2_MASK                                0x4
#define _OSCTUNE_HFTUN3_POSN                                0x3
#define _OSCTUNE_HFTUN3_POSITION                            0x3
#define _OSCTUNE_HFTUN3_SIZE                                0x1
#define _OSCTUNE_HFTUN3_LENGTH                              0x1
#define _OSCTUNE_HFTUN3_MASK                                0x8
#define _OSCTUNE_HFTUN4_POSN                                0x4
#define _OSCTUNE_HFTUN4_POSITION                            0x4
#define _OSCTUNE_HFTUN4_SIZE                                0x1
#define _OSCTUNE_HFTUN4_LENGTH                              0x1
#define _OSCTUNE_HFTUN4_MASK                                0x10
#define _OSCTUNE_HFTUN5_POSN                                0x5
#define _OSCTUNE_HFTUN5_POSITION                            0x5
#define _OSCTUNE_HFTUN5_SIZE                                0x1
#define _OSCTUNE_HFTUN5_LENGTH                              0x1
#define _OSCTUNE_HFTUN5_MASK                                0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x893);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 0893h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :3;
    };
    struct {
        unsigned HFFRQ0                 :1;
        unsigned HFFRQ1                 :1;
        unsigned HFFRQ2                 :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x893);
// bitfield macros
#define _OSCFRQ_HFFRQ_POSN                                  0x0
#define _OSCFRQ_HFFRQ_POSITION                              0x0
#define _OSCFRQ_HFFRQ_SIZE                                  0x3
#define _OSCFRQ_HFFRQ_LENGTH                                0x3
#define _OSCFRQ_HFFRQ_MASK                                  0x7
#define _OSCFRQ_HFFRQ0_POSN                                 0x0
#define _OSCFRQ_HFFRQ0_POSITION                             0x0
#define _OSCFRQ_HFFRQ0_SIZE                                 0x1
#define _OSCFRQ_HFFRQ0_LENGTH                               0x1
#define _OSCFRQ_HFFRQ0_MASK                                 0x1
#define _OSCFRQ_HFFRQ1_POSN                                 0x1
#define _OSCFRQ_HFFRQ1_POSITION                             0x1
#define _OSCFRQ_HFFRQ1_SIZE                                 0x1
#define _OSCFRQ_HFFRQ1_LENGTH                               0x1
#define _OSCFRQ_HFFRQ1_MASK                                 0x2
#define _OSCFRQ_HFFRQ2_POSN                                 0x2
#define _OSCFRQ_HFFRQ2_POSITION                             0x2
#define _OSCFRQ_HFFRQ2_SIZE                                 0x1
#define _OSCFRQ_HFFRQ2_LENGTH                               0x1
#define _OSCFRQ_HFFRQ2_MASK                                 0x4

// Register: CLKRCON
#define CLKRCON CLKRCON
extern volatile unsigned char           CLKRCON             __at(0x895);
#ifndef _LIB_BUILD
asm("CLKRCON equ 0895h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKRDIV                :3;
        unsigned CLKRDC                 :2;
        unsigned                        :2;
        unsigned CLKREN                 :1;
    };
    struct {
        unsigned CLKRDIV0               :1;
        unsigned CLKRDIV1               :1;
        unsigned CLKRDIV2               :1;
        unsigned CLKRDC0                :1;
        unsigned CLKRDC1                :1;
    };
} CLKRCONbits_t;
extern volatile CLKRCONbits_t CLKRCONbits __at(0x895);
// bitfield macros
#define _CLKRCON_CLKRDIV_POSN                               0x0
#define _CLKRCON_CLKRDIV_POSITION                           0x0
#define _CLKRCON_CLKRDIV_SIZE                               0x3
#define _CLKRCON_CLKRDIV_LENGTH                             0x3
#define _CLKRCON_CLKRDIV_MASK                               0x7
#define _CLKRCON_CLKRDC_POSN                                0x3
#define _CLKRCON_CLKRDC_POSITION                            0x3
#define _CLKRCON_CLKRDC_SIZE                                0x2
#define _CLKRCON_CLKRDC_LENGTH                              0x2
#define _CLKRCON_CLKRDC_MASK                                0x18
#define _CLKRCON_CLKREN_POSN                                0x7
#define _CLKRCON_CLKREN_POSITION                            0x7
#define _CLKRCON_CLKREN_SIZE                                0x1
#define _CLKRCON_CLKREN_LENGTH                              0x1
#define _CLKRCON_CLKREN_MASK                                0x80
#define _CLKRCON_CLKRDIV0_POSN                              0x0
#define _CLKRCON_CLKRDIV0_POSITION                          0x0
#define _CLKRCON_CLKRDIV0_SIZE                              0x1
#define _CLKRCON_CLKRDIV0_LENGTH                            0x1
#define _CLKRCON_CLKRDIV0_MASK                              0x1
#define _CLKRCON_CLKRDIV1_POSN                              0x1
#define _CLKRCON_CLKRDIV1_POSITION                          0x1
#define _CLKRCON_CLKRDIV1_SIZE                              0x1
#define _CLKRCON_CLKRDIV1_LENGTH                            0x1
#define _CLKRCON_CLKRDIV1_MASK                              0x2
#define _CLKRCON_CLKRDIV2_POSN                              0x2
#define _CLKRCON_CLKRDIV2_POSITION                          0x2
#define _CLKRCON_CLKRDIV2_SIZE                              0x1
#define _CLKRCON_CLKRDIV2_LENGTH                            0x1
#define _CLKRCON_CLKRDIV2_MASK                              0x4
#define _CLKRCON_CLKRDC0_POSN                               0x3
#define _CLKRCON_CLKRDC0_POSITION                           0x3
#define _CLKRCON_CLKRDC0_SIZE                               0x1
#define _CLKRCON_CLKRDC0_LENGTH                             0x1
#define _CLKRCON_CLKRDC0_MASK                               0x8
#define _CLKRCON_CLKRDC1_POSN                               0x4
#define _CLKRCON_CLKRDC1_POSITION                           0x4
#define _CLKRCON_CLKRDC1_SIZE                               0x1
#define _CLKRCON_CLKRDC1_LENGTH                             0x1
#define _CLKRCON_CLKRDC1_MASK                               0x10

// Register: CLKRCLK
#define CLKRCLK CLKRCLK
extern volatile unsigned char           CLKRCLK             __at(0x896);
#ifndef _LIB_BUILD
asm("CLKRCLK equ 0896h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKRCLK                :4;
    };
    struct {
        unsigned CLKRCLK0               :1;
        unsigned CLKRCLK1               :1;
        unsigned CLKRCLK2               :1;
        unsigned CLKRCLK3               :1;
    };
} CLKRCLKbits_t;
extern volatile CLKRCLKbits_t CLKRCLKbits __at(0x896);
// bitfield macros
#define _CLKRCLK_CLKRCLK_POSN                               0x0
#define _CLKRCLK_CLKRCLK_POSITION                           0x0
#define _CLKRCLK_CLKRCLK_SIZE                               0x4
#define _CLKRCLK_CLKRCLK_LENGTH                             0x4
#define _CLKRCLK_CLKRCLK_MASK                               0xF
#define _CLKRCLK_CLKRCLK0_POSN                              0x0
#define _CLKRCLK_CLKRCLK0_POSITION                          0x0
#define _CLKRCLK_CLKRCLK0_SIZE                              0x1
#define _CLKRCLK_CLKRCLK0_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK0_MASK                              0x1
#define _CLKRCLK_CLKRCLK1_POSN                              0x1
#define _CLKRCLK_CLKRCLK1_POSITION                          0x1
#define _CLKRCLK_CLKRCLK1_SIZE                              0x1
#define _CLKRCLK_CLKRCLK1_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK1_MASK                              0x2
#define _CLKRCLK_CLKRCLK2_POSN                              0x2
#define _CLKRCLK_CLKRCLK2_POSITION                          0x2
#define _CLKRCLK_CLKRCLK2_SIZE                              0x1
#define _CLKRCLK_CLKRCLK2_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK2_MASK                              0x4
#define _CLKRCLK_CLKRCLK3_POSN                              0x3
#define _CLKRCLK_CLKRCLK3_POSITION                          0x3
#define _CLKRCLK_CLKRCLK3_SIZE                              0x1
#define _CLKRCLK_CLKRCLK3_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK3_MASK                              0x8

// Register: MDCON0
#define MDCON0 MDCON0
extern volatile unsigned char           MDCON0              __at(0x897);
#ifndef _LIB_BUILD
asm("MDCON0 equ 0897h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDBIT                  :1;
        unsigned                        :3;
        unsigned MDOPOL                 :1;
        unsigned MDOUT                  :1;
        unsigned                        :1;
        unsigned MDEN                   :1;
    };
} MDCON0bits_t;
extern volatile MDCON0bits_t MDCON0bits __at(0x897);
// bitfield macros
#define _MDCON0_MDBIT_POSN                                  0x0
#define _MDCON0_MDBIT_POSITION                              0x0
#define _MDCON0_MDBIT_SIZE                                  0x1
#define _MDCON0_MDBIT_LENGTH                                0x1
#define _MDCON0_MDBIT_MASK                                  0x1
#define _MDCON0_MDOPOL_POSN                                 0x4
#define _MDCON0_MDOPOL_POSITION                             0x4
#define _MDCON0_MDOPOL_SIZE                                 0x1
#define _MDCON0_MDOPOL_LENGTH                               0x1
#define _MDCON0_MDOPOL_MASK                                 0x10
#define _MDCON0_MDOUT_POSN                                  0x5
#define _MDCON0_MDOUT_POSITION                              0x5
#define _MDCON0_MDOUT_SIZE                                  0x1
#define _MDCON0_MDOUT_LENGTH                                0x1
#define _MDCON0_MDOUT_MASK                                  0x20
#define _MDCON0_MDEN_POSN                                   0x7
#define _MDCON0_MDEN_POSITION                               0x7
#define _MDCON0_MDEN_SIZE                                   0x1
#define _MDCON0_MDEN_LENGTH                                 0x1
#define _MDCON0_MDEN_MASK                                   0x80

// Register: MDCON1
#define MDCON1 MDCON1
extern volatile unsigned char           MDCON1              __at(0x898);
#ifndef _LIB_BUILD
asm("MDCON1 equ 0898h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCLSYNC               :1;
        unsigned MDCLPOL                :1;
        unsigned                        :2;
        unsigned MDCHSYNC               :1;
        unsigned MDCHPOL                :1;
    };
} MDCON1bits_t;
extern volatile MDCON1bits_t MDCON1bits __at(0x898);
// bitfield macros
#define _MDCON1_MDCLSYNC_POSN                               0x0
#define _MDCON1_MDCLSYNC_POSITION                           0x0
#define _MDCON1_MDCLSYNC_SIZE                               0x1
#define _MDCON1_MDCLSYNC_LENGTH                             0x1
#define _MDCON1_MDCLSYNC_MASK                               0x1
#define _MDCON1_MDCLPOL_POSN                                0x1
#define _MDCON1_MDCLPOL_POSITION                            0x1
#define _MDCON1_MDCLPOL_SIZE                                0x1
#define _MDCON1_MDCLPOL_LENGTH                              0x1
#define _MDCON1_MDCLPOL_MASK                                0x2
#define _MDCON1_MDCHSYNC_POSN                               0x4
#define _MDCON1_MDCHSYNC_POSITION                           0x4
#define _MDCON1_MDCHSYNC_SIZE                               0x1
#define _MDCON1_MDCHSYNC_LENGTH                             0x1
#define _MDCON1_MDCHSYNC_MASK                               0x10
#define _MDCON1_MDCHPOL_POSN                                0x5
#define _MDCON1_MDCHPOL_POSITION                            0x5
#define _MDCON1_MDCHPOL_SIZE                                0x1
#define _MDCON1_MDCHPOL_LENGTH                              0x1
#define _MDCON1_MDCHPOL_MASK                                0x20

// Register: MDSRC
#define MDSRC MDSRC
extern volatile unsigned char           MDSRC               __at(0x899);
#ifndef _LIB_BUILD
asm("MDSRC equ 0899h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDMS                   :5;
    };
    struct {
        unsigned MDMS0                  :1;
        unsigned MDMS1                  :1;
        unsigned MDMS2                  :1;
        unsigned MDMS3                  :1;
        unsigned MDMS4                  :1;
    };
} MDSRCbits_t;
extern volatile MDSRCbits_t MDSRCbits __at(0x899);
// bitfield macros
#define _MDSRC_MDMS_POSN                                    0x0
#define _MDSRC_MDMS_POSITION                                0x0
#define _MDSRC_MDMS_SIZE                                    0x5
#define _MDSRC_MDMS_LENGTH                                  0x5
#define _MDSRC_MDMS_MASK                                    0x1F
#define _MDSRC_MDMS0_POSN                                   0x0
#define _MDSRC_MDMS0_POSITION                               0x0
#define _MDSRC_MDMS0_SIZE                                   0x1
#define _MDSRC_MDMS0_LENGTH                                 0x1
#define _MDSRC_MDMS0_MASK                                   0x1
#define _MDSRC_MDMS1_POSN                                   0x1
#define _MDSRC_MDMS1_POSITION                               0x1
#define _MDSRC_MDMS1_SIZE                                   0x1
#define _MDSRC_MDMS1_LENGTH                                 0x1
#define _MDSRC_MDMS1_MASK                                   0x2
#define _MDSRC_MDMS2_POSN                                   0x2
#define _MDSRC_MDMS2_POSITION                               0x2
#define _MDSRC_MDMS2_SIZE                                   0x1
#define _MDSRC_MDMS2_LENGTH                                 0x1
#define _MDSRC_MDMS2_MASK                                   0x4
#define _MDSRC_MDMS3_POSN                                   0x3
#define _MDSRC_MDMS3_POSITION                               0x3
#define _MDSRC_MDMS3_SIZE                                   0x1
#define _MDSRC_MDMS3_LENGTH                                 0x1
#define _MDSRC_MDMS3_MASK                                   0x8
#define _MDSRC_MDMS4_POSN                                   0x4
#define _MDSRC_MDMS4_POSITION                               0x4
#define _MDSRC_MDMS4_SIZE                                   0x1
#define _MDSRC_MDMS4_LENGTH                                 0x1
#define _MDSRC_MDMS4_MASK                                   0x10

// Register: MDCARL
#define MDCARL MDCARL
extern volatile unsigned char           MDCARL              __at(0x89A);
#ifndef _LIB_BUILD
asm("MDCARL equ 089Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCL                   :4;
    };
    struct {
        unsigned MDCL0                  :1;
        unsigned MDCL1                  :1;
        unsigned MDCL2                  :1;
        unsigned MDCL3                  :1;
    };
} MDCARLbits_t;
extern volatile MDCARLbits_t MDCARLbits __at(0x89A);
// bitfield macros
#define _MDCARL_MDCL_POSN                                   0x0
#define _MDCARL_MDCL_POSITION                               0x0
#define _MDCARL_MDCL_SIZE                                   0x4
#define _MDCARL_MDCL_LENGTH                                 0x4
#define _MDCARL_MDCL_MASK                                   0xF
#define _MDCARL_MDCL0_POSN                                  0x0
#define _MDCARL_MDCL0_POSITION                              0x0
#define _MDCARL_MDCL0_SIZE                                  0x1
#define _MDCARL_MDCL0_LENGTH                                0x1
#define _MDCARL_MDCL0_MASK                                  0x1
#define _MDCARL_MDCL1_POSN                                  0x1
#define _MDCARL_MDCL1_POSITION                              0x1
#define _MDCARL_MDCL1_SIZE                                  0x1
#define _MDCARL_MDCL1_LENGTH                                0x1
#define _MDCARL_MDCL1_MASK                                  0x2
#define _MDCARL_MDCL2_POSN                                  0x2
#define _MDCARL_MDCL2_POSITION                              0x2
#define _MDCARL_MDCL2_SIZE                                  0x1
#define _MDCARL_MDCL2_LENGTH                                0x1
#define _MDCARL_MDCL2_MASK                                  0x4
#define _MDCARL_MDCL3_POSN                                  0x3
#define _MDCARL_MDCL3_POSITION                              0x3
#define _MDCARL_MDCL3_SIZE                                  0x1
#define _MDCARL_MDCL3_LENGTH                                0x1
#define _MDCARL_MDCL3_MASK                                  0x8

// Register: MDCARH
#define MDCARH MDCARH
extern volatile unsigned char           MDCARH              __at(0x89B);
#ifndef _LIB_BUILD
asm("MDCARH equ 089Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCH                   :4;
    };
    struct {
        unsigned MDCH0                  :1;
        unsigned MDCH1                  :1;
        unsigned MDCH2                  :1;
        unsigned MDCH3                  :1;
    };
} MDCARHbits_t;
extern volatile MDCARHbits_t MDCARHbits __at(0x89B);
// bitfield macros
#define _MDCARH_MDCH_POSN                                   0x0
#define _MDCARH_MDCH_POSITION                               0x0
#define _MDCARH_MDCH_SIZE                                   0x4
#define _MDCARH_MDCH_LENGTH                                 0x4
#define _MDCARH_MDCH_MASK                                   0xF
#define _MDCARH_MDCH0_POSN                                  0x0
#define _MDCARH_MDCH0_POSITION                              0x0
#define _MDCARH_MDCH0_SIZE                                  0x1
#define _MDCARH_MDCH0_LENGTH                                0x1
#define _MDCARH_MDCH0_MASK                                  0x1
#define _MDCARH_MDCH1_POSN                                  0x1
#define _MDCARH_MDCH1_POSITION                              0x1
#define _MDCARH_MDCH1_SIZE                                  0x1
#define _MDCARH_MDCH1_LENGTH                                0x1
#define _MDCARH_MDCH1_MASK                                  0x2
#define _MDCARH_MDCH2_POSN                                  0x2
#define _MDCARH_MDCH2_POSITION                              0x2
#define _MDCARH_MDCH2_SIZE                                  0x1
#define _MDCARH_MDCH2_LENGTH                                0x1
#define _MDCARH_MDCH2_MASK                                  0x4
#define _MDCARH_MDCH3_POSN                                  0x3
#define _MDCARH_MDCH3_POSITION                              0x3
#define _MDCARH_MDCH3_SIZE                                  0x1
#define _MDCARH_MDCH3_LENGTH                                0x1
#define _MDCARH_MDCH3_MASK                                  0x8

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x90C);
#ifndef _LIB_BUILD
asm("FVRCON equ 090Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x90C);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0x90E);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 090Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :1;
        unsigned                        :1;
        unsigned PSS                    :2;
        unsigned OE2                    :1;
        unsigned OE1                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned DAC1NSS                :1;
        unsigned                        :1;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
        unsigned DAC1OE2                :1;
        unsigned DAC1OE1                :1;
        unsigned                        :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0x90E);
// bitfield macros
#define _DAC1CON0_NSS_POSN                                  0x0
#define _DAC1CON0_NSS_POSITION                              0x0
#define _DAC1CON0_NSS_SIZE                                  0x1
#define _DAC1CON0_NSS_LENGTH                                0x1
#define _DAC1CON0_NSS_MASK                                  0x1
#define _DAC1CON0_PSS_POSN                                  0x2
#define _DAC1CON0_PSS_POSITION                              0x2
#define _DAC1CON0_PSS_SIZE                                  0x2
#define _DAC1CON0_PSS_LENGTH                                0x2
#define _DAC1CON0_PSS_MASK                                  0xC
#define _DAC1CON0_OE2_POSN                                  0x4
#define _DAC1CON0_OE2_POSITION                              0x4
#define _DAC1CON0_OE2_SIZE                                  0x1
#define _DAC1CON0_OE2_LENGTH                                0x1
#define _DAC1CON0_OE2_MASK                                  0x10
#define _DAC1CON0_OE1_POSN                                  0x5
#define _DAC1CON0_OE1_POSITION                              0x5
#define _DAC1CON0_OE1_SIZE                                  0x1
#define _DAC1CON0_OE1_LENGTH                                0x1
#define _DAC1CON0_OE1_MASK                                  0x20
#define _DAC1CON0_EN_POSN                                   0x7
#define _DAC1CON0_EN_POSITION                               0x7
#define _DAC1CON0_EN_SIZE                                   0x1
#define _DAC1CON0_EN_LENGTH                                 0x1
#define _DAC1CON0_EN_MASK                                   0x80
#define _DAC1CON0_DAC1NSS_POSN                              0x0
#define _DAC1CON0_DAC1NSS_POSITION                          0x0
#define _DAC1CON0_DAC1NSS_SIZE                              0x1
#define _DAC1CON0_DAC1NSS_LENGTH                            0x1
#define _DAC1CON0_DAC1NSS_MASK                              0x1
#define _DAC1CON0_DAC1PSS0_POSN                             0x2
#define _DAC1CON0_DAC1PSS0_POSITION                         0x2
#define _DAC1CON0_DAC1PSS0_SIZE                             0x1
#define _DAC1CON0_DAC1PSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS0_MASK                             0x4
#define _DAC1CON0_DAC1PSS1_POSN                             0x3
#define _DAC1CON0_DAC1PSS1_POSITION                         0x3
#define _DAC1CON0_DAC1PSS1_SIZE                             0x1
#define _DAC1CON0_DAC1PSS1_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS1_MASK                             0x8
#define _DAC1CON0_DAC1OE2_POSN                              0x4
#define _DAC1CON0_DAC1OE2_POSITION                          0x4
#define _DAC1CON0_DAC1OE2_SIZE                              0x1
#define _DAC1CON0_DAC1OE2_LENGTH                            0x1
#define _DAC1CON0_DAC1OE2_MASK                              0x10
#define _DAC1CON0_DAC1OE1_POSN                              0x5
#define _DAC1CON0_DAC1OE1_POSITION                          0x5
#define _DAC1CON0_DAC1OE1_SIZE                              0x1
#define _DAC1CON0_DAC1OE1_LENGTH                            0x1
#define _DAC1CON0_DAC1OE1_MASK                              0x20
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_PSS0_POSN                                 0x2
#define _DAC1CON0_PSS0_POSITION                             0x2
#define _DAC1CON0_PSS0_SIZE                                 0x1
#define _DAC1CON0_PSS0_LENGTH                               0x1
#define _DAC1CON0_PSS0_MASK                                 0x4
#define _DAC1CON0_PSS1_POSN                                 0x3
#define _DAC1CON0_PSS1_POSITION                             0x3
#define _DAC1CON0_PSS1_SIZE                                 0x1
#define _DAC1CON0_PSS1_LENGTH                               0x1
#define _DAC1CON0_PSS1_MASK                                 0x8

// Register: DAC1CON1
#define DAC1CON1 DAC1CON1
extern volatile unsigned char           DAC1CON1            __at(0x90F);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 090Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :5;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0x90F);
// bitfield macros
#define _DAC1CON1_DAC1R_POSN                                0x0
#define _DAC1CON1_DAC1R_POSITION                            0x0
#define _DAC1CON1_DAC1R_SIZE                                0x5
#define _DAC1CON1_DAC1R_LENGTH                              0x5
#define _DAC1CON1_DAC1R_MASK                                0x1F
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10

// Register: ZCDCON
#define ZCDCON ZCDCON
extern volatile unsigned char           ZCDCON              __at(0x91F);
#ifndef _LIB_BUILD
asm("ZCDCON equ 091Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDINTN                :1;
        unsigned ZCDINTP                :1;
        unsigned                        :2;
        unsigned ZCDPOL                 :1;
        unsigned ZCDOUT                 :1;
        unsigned                        :1;
        unsigned ZCDSEN                 :1;
    };
} ZCDCONbits_t;
extern volatile ZCDCONbits_t ZCDCONbits __at(0x91F);
// bitfield macros
#define _ZCDCON_ZCDINTN_POSN                                0x0
#define _ZCDCON_ZCDINTN_POSITION                            0x0
#define _ZCDCON_ZCDINTN_SIZE                                0x1
#define _ZCDCON_ZCDINTN_LENGTH                              0x1
#define _ZCDCON_ZCDINTN_MASK                                0x1
#define _ZCDCON_ZCDINTP_POSN                                0x1
#define _ZCDCON_ZCDINTP_POSITION                            0x1
#define _ZCDCON_ZCDINTP_SIZE                                0x1
#define _ZCDCON_ZCDINTP_LENGTH                              0x1
#define _ZCDCON_ZCDINTP_MASK                                0x2
#define _ZCDCON_ZCDPOL_POSN                                 0x4
#define _ZCDCON_ZCDPOL_POSITION                             0x4
#define _ZCDCON_ZCDPOL_SIZE                                 0x1
#define _ZCDCON_ZCDPOL_LENGTH                               0x1
#define _ZCDCON_ZCDPOL_MASK                                 0x10
#define _ZCDCON_ZCDOUT_POSN                                 0x5
#define _ZCDCON_ZCDOUT_POSITION                             0x5
#define _ZCDCON_ZCDOUT_SIZE                                 0x1
#define _ZCDCON_ZCDOUT_LENGTH                               0x1
#define _ZCDCON_ZCDOUT_MASK                                 0x20
#define _ZCDCON_ZCDSEN_POSN                                 0x7
#define _ZCDCON_ZCDSEN_POSITION                             0x7
#define _ZCDCON_ZCDSEN_SIZE                                 0x1
#define _ZCDCON_ZCDSEN_LENGTH                               0x1
#define _ZCDCON_ZCDSEN_MASK                                 0x80

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x98F);
#ifndef _LIB_BUILD
asm("CMOUT equ 098Fh");
#endif
// aliases
extern volatile unsigned char           CMSTAT              __at(0x98F);
#ifndef _LIB_BUILD
asm("CMSTAT equ 098Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x98F);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2
#define _CMOUT_C1OUT_POSN                                   0x0
#define _CMOUT_C1OUT_POSITION                               0x0
#define _CMOUT_C1OUT_SIZE                                   0x1
#define _CMOUT_C1OUT_LENGTH                                 0x1
#define _CMOUT_C1OUT_MASK                                   0x1
#define _CMOUT_C2OUT_POSN                                   0x1
#define _CMOUT_C2OUT_POSITION                               0x1
#define _CMOUT_C2OUT_SIZE                                   0x1
#define _CMOUT_C2OUT_LENGTH                                 0x1
#define _CMOUT_C2OUT_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMSTATbits_t;
extern volatile CMSTATbits_t CMSTATbits __at(0x98F);
// bitfield macros
#define _CMSTAT_MC1OUT_POSN                                 0x0
#define _CMSTAT_MC1OUT_POSITION                             0x0
#define _CMSTAT_MC1OUT_SIZE                                 0x1
#define _CMSTAT_MC1OUT_LENGTH                               0x1
#define _CMSTAT_MC1OUT_MASK                                 0x1
#define _CMSTAT_MC2OUT_POSN                                 0x1
#define _CMSTAT_MC2OUT_POSITION                             0x1
#define _CMSTAT_MC2OUT_SIZE                                 0x1
#define _CMSTAT_MC2OUT_LENGTH                               0x1
#define _CMSTAT_MC2OUT_MASK                                 0x2
#define _CMSTAT_C1OUT_POSN                                  0x0
#define _CMSTAT_C1OUT_POSITION                              0x0
#define _CMSTAT_C1OUT_SIZE                                  0x1
#define _CMSTAT_C1OUT_LENGTH                                0x1
#define _CMSTAT_C1OUT_MASK                                  0x1
#define _CMSTAT_C2OUT_POSN                                  0x1
#define _CMSTAT_C2OUT_POSITION                              0x1
#define _CMSTAT_C2OUT_SIZE                                  0x1
#define _CMSTAT_C2OUT_LENGTH                                0x1
#define _CMSTAT_C2OUT_MASK                                  0x2

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x990);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 0990h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned C1SP                   :1;
        unsigned                        :1;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1ON                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x990);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_ON_POSN                                    0x7
#define _CM1CON0_ON_POSITION                                0x7
#define _CM1CON0_ON_SIZE                                    0x1
#define _CM1CON0_ON_LENGTH                                  0x1
#define _CM1CON0_ON_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1SP_POSN                                  0x2
#define _CM1CON0_C1SP_POSITION                              0x2
#define _CM1CON0_C1SP_SIZE                                  0x1
#define _CM1CON0_C1SP_LENGTH                                0x1
#define _CM1CON0_C1SP_MASK                                  0x4
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1ON_POSN                                  0x7
#define _CM1CON0_C1ON_POSITION                              0x7
#define _CM1CON0_C1ON_SIZE                                  0x1
#define _CM1CON0_C1ON_LENGTH                                0x1
#define _CM1CON0_C1ON_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x991);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 0991h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x991);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NSEL
#define CM1NSEL CM1NSEL
extern volatile unsigned char           CM1NSEL             __at(0x992);
#ifndef _LIB_BUILD
asm("CM1NSEL equ 0992h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH                  :3;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NSELbits_t;
extern volatile CM1NSELbits_t CM1NSELbits __at(0x992);
// bitfield macros
#define _CM1NSEL_NCH_POSN                                   0x0
#define _CM1NSEL_NCH_POSITION                               0x0
#define _CM1NSEL_NCH_SIZE                                   0x3
#define _CM1NSEL_NCH_LENGTH                                 0x3
#define _CM1NSEL_NCH_MASK                                   0x7
#define _CM1NSEL_NCH0_POSN                                  0x0
#define _CM1NSEL_NCH0_POSITION                              0x0
#define _CM1NSEL_NCH0_SIZE                                  0x1
#define _CM1NSEL_NCH0_LENGTH                                0x1
#define _CM1NSEL_NCH0_MASK                                  0x1
#define _CM1NSEL_NCH1_POSN                                  0x1
#define _CM1NSEL_NCH1_POSITION                              0x1
#define _CM1NSEL_NCH1_SIZE                                  0x1
#define _CM1NSEL_NCH1_LENGTH                                0x1
#define _CM1NSEL_NCH1_MASK                                  0x2
#define _CM1NSEL_NCH2_POSN                                  0x2
#define _CM1NSEL_NCH2_POSITION                              0x2
#define _CM1NSEL_NCH2_SIZE                                  0x1
#define _CM1NSEL_NCH2_LENGTH                                0x1
#define _CM1NSEL_NCH2_MASK                                  0x4
#define _CM1NSEL_C1NCH_POSN                                 0x0
#define _CM1NSEL_C1NCH_POSITION                             0x0
#define _CM1NSEL_C1NCH_SIZE                                 0x3
#define _CM1NSEL_C1NCH_LENGTH                               0x3
#define _CM1NSEL_C1NCH_MASK                                 0x7
#define _CM1NSEL_C1NCH0_POSN                                0x0
#define _CM1NSEL_C1NCH0_POSITION                            0x0
#define _CM1NSEL_C1NCH0_SIZE                                0x1
#define _CM1NSEL_C1NCH0_LENGTH                              0x1
#define _CM1NSEL_C1NCH0_MASK                                0x1
#define _CM1NSEL_C1NCH1_POSN                                0x1
#define _CM1NSEL_C1NCH1_POSITION                            0x1
#define _CM1NSEL_C1NCH1_SIZE                                0x1
#define _CM1NSEL_C1NCH1_LENGTH                              0x1
#define _CM1NSEL_C1NCH1_MASK                                0x2
#define _CM1NSEL_C1NCH2_POSN                                0x2
#define _CM1NSEL_C1NCH2_POSITION                            0x2
#define _CM1NSEL_C1NCH2_SIZE                                0x1
#define _CM1NSEL_C1NCH2_LENGTH                              0x1
#define _CM1NSEL_C1NCH2_MASK                                0x4

// Register: CM1PSEL
#define CM1PSEL CM1PSEL
extern volatile unsigned char           CM1PSEL             __at(0x993);
#ifndef _LIB_BUILD
asm("CM1PSEL equ 0993h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :4;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH                  :4;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PSELbits_t;
extern volatile CM1PSELbits_t CM1PSELbits __at(0x993);
// bitfield macros
#define _CM1PSEL_PCH_POSN                                   0x0
#define _CM1PSEL_PCH_POSITION                               0x0
#define _CM1PSEL_PCH_SIZE                                   0x4
#define _CM1PSEL_PCH_LENGTH                                 0x4
#define _CM1PSEL_PCH_MASK                                   0xF
#define _CM1PSEL_PCH0_POSN                                  0x0
#define _CM1PSEL_PCH0_POSITION                              0x0
#define _CM1PSEL_PCH0_SIZE                                  0x1
#define _CM1PSEL_PCH0_LENGTH                                0x1
#define _CM1PSEL_PCH0_MASK                                  0x1
#define _CM1PSEL_PCH1_POSN                                  0x1
#define _CM1PSEL_PCH1_POSITION                              0x1
#define _CM1PSEL_PCH1_SIZE                                  0x1
#define _CM1PSEL_PCH1_LENGTH                                0x1
#define _CM1PSEL_PCH1_MASK                                  0x2
#define _CM1PSEL_PCH2_POSN                                  0x2
#define _CM1PSEL_PCH2_POSITION                              0x2
#define _CM1PSEL_PCH2_SIZE                                  0x1
#define _CM1PSEL_PCH2_LENGTH                                0x1
#define _CM1PSEL_PCH2_MASK                                  0x4
#define _CM1PSEL_C1PCH_POSN                                 0x0
#define _CM1PSEL_C1PCH_POSITION                             0x0
#define _CM1PSEL_C1PCH_SIZE                                 0x4
#define _CM1PSEL_C1PCH_LENGTH                               0x4
#define _CM1PSEL_C1PCH_MASK                                 0xF
#define _CM1PSEL_C1PCH0_POSN                                0x0
#define _CM1PSEL_C1PCH0_POSITION                            0x0
#define _CM1PSEL_C1PCH0_SIZE                                0x1
#define _CM1PSEL_C1PCH0_LENGTH                              0x1
#define _CM1PSEL_C1PCH0_MASK                                0x1
#define _CM1PSEL_C1PCH1_POSN                                0x1
#define _CM1PSEL_C1PCH1_POSITION                            0x1
#define _CM1PSEL_C1PCH1_SIZE                                0x1
#define _CM1PSEL_C1PCH1_LENGTH                              0x1
#define _CM1PSEL_C1PCH1_MASK                                0x2
#define _CM1PSEL_C1PCH2_POSN                                0x2
#define _CM1PSEL_C1PCH2_POSITION                            0x2
#define _CM1PSEL_C1PCH2_SIZE                                0x1
#define _CM1PSEL_C1PCH2_LENGTH                              0x1
#define _CM1PSEL_C1PCH2_MASK                                0x4

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x994);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0994h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned C2SP                   :1;
        unsigned                        :1;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2ON                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x994);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_ON_POSN                                    0x7
#define _CM2CON0_ON_POSITION                                0x7
#define _CM2CON0_ON_SIZE                                    0x1
#define _CM2CON0_ON_LENGTH                                  0x1
#define _CM2CON0_ON_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2SP_POSN                                  0x2
#define _CM2CON0_C2SP_POSITION                              0x2
#define _CM2CON0_C2SP_SIZE                                  0x1
#define _CM2CON0_C2SP_LENGTH                                0x1
#define _CM2CON0_C2SP_MASK                                  0x4
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2ON_POSN                                  0x7
#define _CM2CON0_C2ON_POSITION                              0x7
#define _CM2CON0_C2ON_SIZE                                  0x1
#define _CM2CON0_C2ON_LENGTH                                0x1
#define _CM2CON0_C2ON_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x995);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0995h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x995);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NSEL
#define CM2NSEL CM2NSEL
extern volatile unsigned char           CM2NSEL             __at(0x996);
#ifndef _LIB_BUILD
asm("CM2NSEL equ 0996h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH                  :3;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NSELbits_t;
extern volatile CM2NSELbits_t CM2NSELbits __at(0x996);
// bitfield macros
#define _CM2NSEL_NCH_POSN                                   0x0
#define _CM2NSEL_NCH_POSITION                               0x0
#define _CM2NSEL_NCH_SIZE                                   0x3
#define _CM2NSEL_NCH_LENGTH                                 0x3
#define _CM2NSEL_NCH_MASK                                   0x7
#define _CM2NSEL_NCH0_POSN                                  0x0
#define _CM2NSEL_NCH0_POSITION                              0x0
#define _CM2NSEL_NCH0_SIZE                                  0x1
#define _CM2NSEL_NCH0_LENGTH                                0x1
#define _CM2NSEL_NCH0_MASK                                  0x1
#define _CM2NSEL_NCH1_POSN                                  0x1
#define _CM2NSEL_NCH1_POSITION                              0x1
#define _CM2NSEL_NCH1_SIZE                                  0x1
#define _CM2NSEL_NCH1_LENGTH                                0x1
#define _CM2NSEL_NCH1_MASK                                  0x2
#define _CM2NSEL_NCH2_POSN                                  0x2
#define _CM2NSEL_NCH2_POSITION                              0x2
#define _CM2NSEL_NCH2_SIZE                                  0x1
#define _CM2NSEL_NCH2_LENGTH                                0x1
#define _CM2NSEL_NCH2_MASK                                  0x4
#define _CM2NSEL_C2NCH_POSN                                 0x0
#define _CM2NSEL_C2NCH_POSITION                             0x0
#define _CM2NSEL_C2NCH_SIZE                                 0x3
#define _CM2NSEL_C2NCH_LENGTH                               0x3
#define _CM2NSEL_C2NCH_MASK                                 0x7
#define _CM2NSEL_C2NCH0_POSN                                0x0
#define _CM2NSEL_C2NCH0_POSITION                            0x0
#define _CM2NSEL_C2NCH0_SIZE                                0x1
#define _CM2NSEL_C2NCH0_LENGTH                              0x1
#define _CM2NSEL_C2NCH0_MASK                                0x1
#define _CM2NSEL_C2NCH1_POSN                                0x1
#define _CM2NSEL_C2NCH1_POSITION                            0x1
#define _CM2NSEL_C2NCH1_SIZE                                0x1
#define _CM2NSEL_C2NCH1_LENGTH                              0x1
#define _CM2NSEL_C2NCH1_MASK                                0x2
#define _CM2NSEL_C2NCH2_POSN                                0x2
#define _CM2NSEL_C2NCH2_POSITION                            0x2
#define _CM2NSEL_C2NCH2_SIZE                                0x1
#define _CM2NSEL_C2NCH2_LENGTH                              0x1
#define _CM2NSEL_C2NCH2_MASK                                0x4

// Register: CM2PSEL
#define CM2PSEL CM2PSEL
extern volatile unsigned char           CM2PSEL             __at(0x997);
#ifndef _LIB_BUILD
asm("CM2PSEL equ 0997h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :4;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH                  :4;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PSELbits_t;
extern volatile CM2PSELbits_t CM2PSELbits __at(0x997);
// bitfield macros
#define _CM2PSEL_PCH_POSN                                   0x0
#define _CM2PSEL_PCH_POSITION                               0x0
#define _CM2PSEL_PCH_SIZE                                   0x4
#define _CM2PSEL_PCH_LENGTH                                 0x4
#define _CM2PSEL_PCH_MASK                                   0xF
#define _CM2PSEL_PCH0_POSN                                  0x0
#define _CM2PSEL_PCH0_POSITION                              0x0
#define _CM2PSEL_PCH0_SIZE                                  0x1
#define _CM2PSEL_PCH0_LENGTH                                0x1
#define _CM2PSEL_PCH0_MASK                                  0x1
#define _CM2PSEL_PCH1_POSN                                  0x1
#define _CM2PSEL_PCH1_POSITION                              0x1
#define _CM2PSEL_PCH1_SIZE                                  0x1
#define _CM2PSEL_PCH1_LENGTH                                0x1
#define _CM2PSEL_PCH1_MASK                                  0x2
#define _CM2PSEL_PCH2_POSN                                  0x2
#define _CM2PSEL_PCH2_POSITION                              0x2
#define _CM2PSEL_PCH2_SIZE                                  0x1
#define _CM2PSEL_PCH2_LENGTH                                0x1
#define _CM2PSEL_PCH2_MASK                                  0x4
#define _CM2PSEL_C2PCH_POSN                                 0x0
#define _CM2PSEL_C2PCH_POSITION                             0x0
#define _CM2PSEL_C2PCH_SIZE                                 0x4
#define _CM2PSEL_C2PCH_LENGTH                               0x4
#define _CM2PSEL_C2PCH_MASK                                 0xF
#define _CM2PSEL_C2PCH0_POSN                                0x0
#define _CM2PSEL_C2PCH0_POSITION                            0x0
#define _CM2PSEL_C2PCH0_SIZE                                0x1
#define _CM2PSEL_C2PCH0_LENGTH                              0x1
#define _CM2PSEL_C2PCH0_MASK                                0x1
#define _CM2PSEL_C2PCH1_POSN                                0x1
#define _CM2PSEL_C2PCH1_POSITION                            0x1
#define _CM2PSEL_C2PCH1_SIZE                                0x1
#define _CM2PSEL_C2PCH1_LENGTH                              0x1
#define _CM2PSEL_C2PCH1_MASK                                0x2
#define _CM2PSEL_C2PCH2_POSN                                0x2
#define _CM2PSEL_C2PCH2_POSITION                            0x2
#define _CM2PSEL_C2PCH2_SIZE                                0x1
#define _CM2PSEL_C2PCH2_LENGTH                              0x1
#define _CM2PSEL_C2PCH2_MASK                                0x4

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0x1E0F);
#ifndef _LIB_BUILD
asm("CLCDATA equ 01E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MLC1OUT                :1;
        unsigned MLC2OUT                :1;
        unsigned MLC3OUT                :1;
        unsigned MLC4OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0x1E0F);
// bitfield macros
#define _CLCDATA_MLC1OUT_POSN                               0x0
#define _CLCDATA_MLC1OUT_POSITION                           0x0
#define _CLCDATA_MLC1OUT_SIZE                               0x1
#define _CLCDATA_MLC1OUT_LENGTH                             0x1
#define _CLCDATA_MLC1OUT_MASK                               0x1
#define _CLCDATA_MLC2OUT_POSN                               0x1
#define _CLCDATA_MLC2OUT_POSITION                           0x1
#define _CLCDATA_MLC2OUT_SIZE                               0x1
#define _CLCDATA_MLC2OUT_LENGTH                             0x1
#define _CLCDATA_MLC2OUT_MASK                               0x2
#define _CLCDATA_MLC3OUT_POSN                               0x2
#define _CLCDATA_MLC3OUT_POSITION                           0x2
#define _CLCDATA_MLC3OUT_SIZE                               0x1
#define _CLCDATA_MLC3OUT_LENGTH                             0x1
#define _CLCDATA_MLC3OUT_MASK                               0x4
#define _CLCDATA_MLC4OUT_POSN                               0x3
#define _CLCDATA_MLC4OUT_POSITION                           0x3
#define _CLCDATA_MLC4OUT_SIZE                               0x1
#define _CLCDATA_MLC4OUT_LENGTH                             0x1
#define _CLCDATA_MLC4OUT_MASK                               0x8

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0x1E10);
#ifndef _LIB_BUILD
asm("CLC1CON equ 01E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned                        :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0x1E10);
// bitfield macros
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0x1E11);
#ifndef _LIB_BUILD
asm("CLC1POL equ 01E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0x1E11);
// bitfield macros
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0x1E12);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 01E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
        unsigned LC1D1S5                :1;
        unsigned LC1D1S6                :1;
        unsigned LC1D1S7                :1;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0x1E12);
// bitfield macros
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S5_POSN                              0x5
#define _CLC1SEL0_LC1D1S5_POSITION                          0x5
#define _CLC1SEL0_LC1D1S5_SIZE                              0x1
#define _CLC1SEL0_LC1D1S5_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S5_MASK                              0x20
#define _CLC1SEL0_LC1D1S6_POSN                              0x6
#define _CLC1SEL0_LC1D1S6_POSITION                          0x6
#define _CLC1SEL0_LC1D1S6_SIZE                              0x1
#define _CLC1SEL0_LC1D1S6_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S6_MASK                              0x40
#define _CLC1SEL0_LC1D1S7_POSN                              0x7
#define _CLC1SEL0_LC1D1S7_POSITION                          0x7
#define _CLC1SEL0_LC1D1S7_SIZE                              0x1
#define _CLC1SEL0_LC1D1S7_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S7_MASK                              0x80
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10
#define _CLC1SEL0_D1S5_POSN                                 0x5
#define _CLC1SEL0_D1S5_POSITION                             0x5
#define _CLC1SEL0_D1S5_SIZE                                 0x1
#define _CLC1SEL0_D1S5_LENGTH                               0x1
#define _CLC1SEL0_D1S5_MASK                                 0x20
#define _CLC1SEL0_D1S6_POSN                                 0x6
#define _CLC1SEL0_D1S6_POSITION                             0x6
#define _CLC1SEL0_D1S6_SIZE                                 0x1
#define _CLC1SEL0_D1S6_LENGTH                               0x1
#define _CLC1SEL0_D1S6_MASK                                 0x40
#define _CLC1SEL0_D1S7_POSN                                 0x7
#define _CLC1SEL0_D1S7_POSITION                             0x7
#define _CLC1SEL0_D1S7_SIZE                                 0x1
#define _CLC1SEL0_D1S7_LENGTH                               0x1
#define _CLC1SEL0_D1S7_MASK                                 0x80

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0x1E13);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 01E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
        unsigned LC1D2S5                :1;
        unsigned LC1D2S6                :1;
        unsigned LC1D2S7                :1;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0x1E13);
// bitfield macros
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S5_POSN                              0x5
#define _CLC1SEL1_LC1D2S5_POSITION                          0x5
#define _CLC1SEL1_LC1D2S5_SIZE                              0x1
#define _CLC1SEL1_LC1D2S5_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S5_MASK                              0x20
#define _CLC1SEL1_LC1D2S6_POSN                              0x6
#define _CLC1SEL1_LC1D2S6_POSITION                          0x6
#define _CLC1SEL1_LC1D2S6_SIZE                              0x1
#define _CLC1SEL1_LC1D2S6_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S6_MASK                              0x40
#define _CLC1SEL1_LC1D2S7_POSN                              0x7
#define _CLC1SEL1_LC1D2S7_POSITION                          0x7
#define _CLC1SEL1_LC1D2S7_SIZE                              0x1
#define _CLC1SEL1_LC1D2S7_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S7_MASK                              0x80
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10
#define _CLC1SEL1_D2S5_POSN                                 0x5
#define _CLC1SEL1_D2S5_POSITION                             0x5
#define _CLC1SEL1_D2S5_SIZE                                 0x1
#define _CLC1SEL1_D2S5_LENGTH                               0x1
#define _CLC1SEL1_D2S5_MASK                                 0x20
#define _CLC1SEL1_D2S6_POSN                                 0x6
#define _CLC1SEL1_D2S6_POSITION                             0x6
#define _CLC1SEL1_D2S6_SIZE                                 0x1
#define _CLC1SEL1_D2S6_LENGTH                               0x1
#define _CLC1SEL1_D2S6_MASK                                 0x40
#define _CLC1SEL1_D2S7_POSN                                 0x7
#define _CLC1SEL1_D2S7_POSITION                             0x7
#define _CLC1SEL1_D2S7_SIZE                                 0x1
#define _CLC1SEL1_D2S7_LENGTH                               0x1
#define _CLC1SEL1_D2S7_MASK                                 0x80

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0x1E14);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 01E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
        unsigned LC1D3S5                :1;
        unsigned LC1D3S6                :1;
        unsigned LC1D3S7                :1;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0x1E14);
// bitfield macros
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S5_POSN                              0x5
#define _CLC1SEL2_LC1D3S5_POSITION                          0x5
#define _CLC1SEL2_LC1D3S5_SIZE                              0x1
#define _CLC1SEL2_LC1D3S5_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S5_MASK                              0x20
#define _CLC1SEL2_LC1D3S6_POSN                              0x6
#define _CLC1SEL2_LC1D3S6_POSITION                          0x6
#define _CLC1SEL2_LC1D3S6_SIZE                              0x1
#define _CLC1SEL2_LC1D3S6_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S6_MASK                              0x40
#define _CLC1SEL2_LC1D3S7_POSN                              0x7
#define _CLC1SEL2_LC1D3S7_POSITION                          0x7
#define _CLC1SEL2_LC1D3S7_SIZE                              0x1
#define _CLC1SEL2_LC1D3S7_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S7_MASK                              0x80
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10
#define _CLC1SEL2_D3S5_POSN                                 0x5
#define _CLC1SEL2_D3S5_POSITION                             0x5
#define _CLC1SEL2_D3S5_SIZE                                 0x1
#define _CLC1SEL2_D3S5_LENGTH                               0x1
#define _CLC1SEL2_D3S5_MASK                                 0x20
#define _CLC1SEL2_D3S6_POSN                                 0x6
#define _CLC1SEL2_D3S6_POSITION                             0x6
#define _CLC1SEL2_D3S6_SIZE                                 0x1
#define _CLC1SEL2_D3S6_LENGTH                               0x1
#define _CLC1SEL2_D3S6_MASK                                 0x40
#define _CLC1SEL2_D3S7_POSN                                 0x7
#define _CLC1SEL2_D3S7_POSITION                             0x7
#define _CLC1SEL2_D3S7_SIZE                                 0x1
#define _CLC1SEL2_D3S7_LENGTH                               0x1
#define _CLC1SEL2_D3S7_MASK                                 0x80

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0x1E15);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 01E15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
        unsigned LC1D4S5                :1;
        unsigned LC1D4S6                :1;
        unsigned LC1D4S7                :1;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0x1E15);
// bitfield macros
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S5_POSN                              0x5
#define _CLC1SEL3_LC1D4S5_POSITION                          0x5
#define _CLC1SEL3_LC1D4S5_SIZE                              0x1
#define _CLC1SEL3_LC1D4S5_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S5_MASK                              0x20
#define _CLC1SEL3_LC1D4S6_POSN                              0x6
#define _CLC1SEL3_LC1D4S6_POSITION                          0x6
#define _CLC1SEL3_LC1D4S6_SIZE                              0x1
#define _CLC1SEL3_LC1D4S6_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S6_MASK                              0x40
#define _CLC1SEL3_LC1D4S7_POSN                              0x7
#define _CLC1SEL3_LC1D4S7_POSITION                          0x7
#define _CLC1SEL3_LC1D4S7_SIZE                              0x1
#define _CLC1SEL3_LC1D4S7_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S7_MASK                              0x80
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10
#define _CLC1SEL3_D4S5_POSN                                 0x5
#define _CLC1SEL3_D4S5_POSITION                             0x5
#define _CLC1SEL3_D4S5_SIZE                                 0x1
#define _CLC1SEL3_D4S5_LENGTH                               0x1
#define _CLC1SEL3_D4S5_MASK                                 0x20
#define _CLC1SEL3_D4S6_POSN                                 0x6
#define _CLC1SEL3_D4S6_POSITION                             0x6
#define _CLC1SEL3_D4S6_SIZE                                 0x1
#define _CLC1SEL3_D4S6_LENGTH                               0x1
#define _CLC1SEL3_D4S6_MASK                                 0x40
#define _CLC1SEL3_D4S7_POSN                                 0x7
#define _CLC1SEL3_D4S7_POSITION                             0x7
#define _CLC1SEL3_D4S7_SIZE                                 0x1
#define _CLC1SEL3_D4S7_LENGTH                               0x1
#define _CLC1SEL3_D4S7_MASK                                 0x80

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0x1E16);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 01E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0x1E16);
// bitfield macros
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80
#define _CLC1GLS0_D1N_POSN                                  0x0
#define _CLC1GLS0_D1N_POSITION                              0x0
#define _CLC1GLS0_D1N_SIZE                                  0x1
#define _CLC1GLS0_D1N_LENGTH                                0x1
#define _CLC1GLS0_D1N_MASK                                  0x1
#define _CLC1GLS0_D1T_POSN                                  0x1
#define _CLC1GLS0_D1T_POSITION                              0x1
#define _CLC1GLS0_D1T_SIZE                                  0x1
#define _CLC1GLS0_D1T_LENGTH                                0x1
#define _CLC1GLS0_D1T_MASK                                  0x2
#define _CLC1GLS0_D2N_POSN                                  0x2
#define _CLC1GLS0_D2N_POSITION                              0x2
#define _CLC1GLS0_D2N_SIZE                                  0x1
#define _CLC1GLS0_D2N_LENGTH                                0x1
#define _CLC1GLS0_D2N_MASK                                  0x4
#define _CLC1GLS0_D2T_POSN                                  0x3
#define _CLC1GLS0_D2T_POSITION                              0x3
#define _CLC1GLS0_D2T_SIZE                                  0x1
#define _CLC1GLS0_D2T_LENGTH                                0x1
#define _CLC1GLS0_D2T_MASK                                  0x8
#define _CLC1GLS0_D3N_POSN                                  0x4
#define _CLC1GLS0_D3N_POSITION                              0x4
#define _CLC1GLS0_D3N_SIZE                                  0x1
#define _CLC1GLS0_D3N_LENGTH                                0x1
#define _CLC1GLS0_D3N_MASK                                  0x10
#define _CLC1GLS0_D3T_POSN                                  0x5
#define _CLC1GLS0_D3T_POSITION                              0x5
#define _CLC1GLS0_D3T_SIZE                                  0x1
#define _CLC1GLS0_D3T_LENGTH                                0x1
#define _CLC1GLS0_D3T_MASK                                  0x20
#define _CLC1GLS0_D4N_POSN                                  0x6
#define _CLC1GLS0_D4N_POSITION                              0x6
#define _CLC1GLS0_D4N_SIZE                                  0x1
#define _CLC1GLS0_D4N_LENGTH                                0x1
#define _CLC1GLS0_D4N_MASK                                  0x40
#define _CLC1GLS0_D4T_POSN                                  0x7
#define _CLC1GLS0_D4T_POSITION                              0x7
#define _CLC1GLS0_D4T_SIZE                                  0x1
#define _CLC1GLS0_D4T_LENGTH                                0x1
#define _CLC1GLS0_D4T_MASK                                  0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0x1E17);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 01E17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0x1E17);
// bitfield macros
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80
#define _CLC1GLS1_D1N_POSN                                  0x0
#define _CLC1GLS1_D1N_POSITION                              0x0
#define _CLC1GLS1_D1N_SIZE                                  0x1
#define _CLC1GLS1_D1N_LENGTH                                0x1
#define _CLC1GLS1_D1N_MASK                                  0x1
#define _CLC1GLS1_D1T_POSN                                  0x1
#define _CLC1GLS1_D1T_POSITION                              0x1
#define _CLC1GLS1_D1T_SIZE                                  0x1
#define _CLC1GLS1_D1T_LENGTH                                0x1
#define _CLC1GLS1_D1T_MASK                                  0x2
#define _CLC1GLS1_D2N_POSN                                  0x2
#define _CLC1GLS1_D2N_POSITION                              0x2
#define _CLC1GLS1_D2N_SIZE                                  0x1
#define _CLC1GLS1_D2N_LENGTH                                0x1
#define _CLC1GLS1_D2N_MASK                                  0x4
#define _CLC1GLS1_D2T_POSN                                  0x3
#define _CLC1GLS1_D2T_POSITION                              0x3
#define _CLC1GLS1_D2T_SIZE                                  0x1
#define _CLC1GLS1_D2T_LENGTH                                0x1
#define _CLC1GLS1_D2T_MASK                                  0x8
#define _CLC1GLS1_D3N_POSN                                  0x4
#define _CLC1GLS1_D3N_POSITION                              0x4
#define _CLC1GLS1_D3N_SIZE                                  0x1
#define _CLC1GLS1_D3N_LENGTH                                0x1
#define _CLC1GLS1_D3N_MASK                                  0x10
#define _CLC1GLS1_D3T_POSN                                  0x5
#define _CLC1GLS1_D3T_POSITION                              0x5
#define _CLC1GLS1_D3T_SIZE                                  0x1
#define _CLC1GLS1_D3T_LENGTH                                0x1
#define _CLC1GLS1_D3T_MASK                                  0x20
#define _CLC1GLS1_D4N_POSN                                  0x6
#define _CLC1GLS1_D4N_POSITION                              0x6
#define _CLC1GLS1_D4N_SIZE                                  0x1
#define _CLC1GLS1_D4N_LENGTH                                0x1
#define _CLC1GLS1_D4N_MASK                                  0x40
#define _CLC1GLS1_D4T_POSN                                  0x7
#define _CLC1GLS1_D4T_POSITION                              0x7
#define _CLC1GLS1_D4T_SIZE                                  0x1
#define _CLC1GLS1_D4T_LENGTH                                0x1
#define _CLC1GLS1_D4T_MASK                                  0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0x1E18);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 01E18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0x1E18);
// bitfield macros
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80
#define _CLC1GLS2_D1N_POSN                                  0x0
#define _CLC1GLS2_D1N_POSITION                              0x0
#define _CLC1GLS2_D1N_SIZE                                  0x1
#define _CLC1GLS2_D1N_LENGTH                                0x1
#define _CLC1GLS2_D1N_MASK                                  0x1
#define _CLC1GLS2_D1T_POSN                                  0x1
#define _CLC1GLS2_D1T_POSITION                              0x1
#define _CLC1GLS2_D1T_SIZE                                  0x1
#define _CLC1GLS2_D1T_LENGTH                                0x1
#define _CLC1GLS2_D1T_MASK                                  0x2
#define _CLC1GLS2_D2N_POSN                                  0x2
#define _CLC1GLS2_D2N_POSITION                              0x2
#define _CLC1GLS2_D2N_SIZE                                  0x1
#define _CLC1GLS2_D2N_LENGTH                                0x1
#define _CLC1GLS2_D2N_MASK                                  0x4
#define _CLC1GLS2_D2T_POSN                                  0x3
#define _CLC1GLS2_D2T_POSITION                              0x3
#define _CLC1GLS2_D2T_SIZE                                  0x1
#define _CLC1GLS2_D2T_LENGTH                                0x1
#define _CLC1GLS2_D2T_MASK                                  0x8
#define _CLC1GLS2_D3N_POSN                                  0x4
#define _CLC1GLS2_D3N_POSITION                              0x4
#define _CLC1GLS2_D3N_SIZE                                  0x1
#define _CLC1GLS2_D3N_LENGTH                                0x1
#define _CLC1GLS2_D3N_MASK                                  0x10
#define _CLC1GLS2_D3T_POSN                                  0x5
#define _CLC1GLS2_D3T_POSITION                              0x5
#define _CLC1GLS2_D3T_SIZE                                  0x1
#define _CLC1GLS2_D3T_LENGTH                                0x1
#define _CLC1GLS2_D3T_MASK                                  0x20
#define _CLC1GLS2_D4N_POSN                                  0x6
#define _CLC1GLS2_D4N_POSITION                              0x6
#define _CLC1GLS2_D4N_SIZE                                  0x1
#define _CLC1GLS2_D4N_LENGTH                                0x1
#define _CLC1GLS2_D4N_MASK                                  0x40
#define _CLC1GLS2_D4T_POSN                                  0x7
#define _CLC1GLS2_D4T_POSITION                              0x7
#define _CLC1GLS2_D4T_SIZE                                  0x1
#define _CLC1GLS2_D4T_LENGTH                                0x1
#define _CLC1GLS2_D4T_MASK                                  0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0x1E19);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 01E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0x1E19);
// bitfield macros
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0x1E1A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 01E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned                        :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0x1E1A);
// bitfield macros
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0x1E1B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 01E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0x1E1B);
// bitfield macros
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0x1E1C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 01E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
        unsigned LC2D1S5                :1;
        unsigned LC2D1S6                :1;
        unsigned LC2D1S7                :1;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0x1E1C);
// bitfield macros
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S5_POSN                              0x5
#define _CLC2SEL0_LC2D1S5_POSITION                          0x5
#define _CLC2SEL0_LC2D1S5_SIZE                              0x1
#define _CLC2SEL0_LC2D1S5_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S5_MASK                              0x20
#define _CLC2SEL0_LC2D1S6_POSN                              0x6
#define _CLC2SEL0_LC2D1S6_POSITION                          0x6
#define _CLC2SEL0_LC2D1S6_SIZE                              0x1
#define _CLC2SEL0_LC2D1S6_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S6_MASK                              0x40
#define _CLC2SEL0_LC2D1S7_POSN                              0x7
#define _CLC2SEL0_LC2D1S7_POSITION                          0x7
#define _CLC2SEL0_LC2D1S7_SIZE                              0x1
#define _CLC2SEL0_LC2D1S7_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S7_MASK                              0x80
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10
#define _CLC2SEL0_D1S5_POSN                                 0x5
#define _CLC2SEL0_D1S5_POSITION                             0x5
#define _CLC2SEL0_D1S5_SIZE                                 0x1
#define _CLC2SEL0_D1S5_LENGTH                               0x1
#define _CLC2SEL0_D1S5_MASK                                 0x20
#define _CLC2SEL0_D1S6_POSN                                 0x6
#define _CLC2SEL0_D1S6_POSITION                             0x6
#define _CLC2SEL0_D1S6_SIZE                                 0x1
#define _CLC2SEL0_D1S6_LENGTH                               0x1
#define _CLC2SEL0_D1S6_MASK                                 0x40
#define _CLC2SEL0_D1S7_POSN                                 0x7
#define _CLC2SEL0_D1S7_POSITION                             0x7
#define _CLC2SEL0_D1S7_SIZE                                 0x1
#define _CLC2SEL0_D1S7_LENGTH                               0x1
#define _CLC2SEL0_D1S7_MASK                                 0x80

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0x1E1D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 01E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
        unsigned LC2D2S5                :1;
        unsigned LC2D2S6                :1;
        unsigned LC2D2S7                :1;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0x1E1D);
// bitfield macros
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S5_POSN                              0x5
#define _CLC2SEL1_LC2D2S5_POSITION                          0x5
#define _CLC2SEL1_LC2D2S5_SIZE                              0x1
#define _CLC2SEL1_LC2D2S5_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S5_MASK                              0x20
#define _CLC2SEL1_LC2D2S6_POSN                              0x6
#define _CLC2SEL1_LC2D2S6_POSITION                          0x6
#define _CLC2SEL1_LC2D2S6_SIZE                              0x1
#define _CLC2SEL1_LC2D2S6_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S6_MASK                              0x40
#define _CLC2SEL1_LC2D2S7_POSN                              0x7
#define _CLC2SEL1_LC2D2S7_POSITION                          0x7
#define _CLC2SEL1_LC2D2S7_SIZE                              0x1
#define _CLC2SEL1_LC2D2S7_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S7_MASK                              0x80
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10
#define _CLC2SEL1_D2S5_POSN                                 0x5
#define _CLC2SEL1_D2S5_POSITION                             0x5
#define _CLC2SEL1_D2S5_SIZE                                 0x1
#define _CLC2SEL1_D2S5_LENGTH                               0x1
#define _CLC2SEL1_D2S5_MASK                                 0x20
#define _CLC2SEL1_D2S6_POSN                                 0x6
#define _CLC2SEL1_D2S6_POSITION                             0x6
#define _CLC2SEL1_D2S6_SIZE                                 0x1
#define _CLC2SEL1_D2S6_LENGTH                               0x1
#define _CLC2SEL1_D2S6_MASK                                 0x40
#define _CLC2SEL1_D2S7_POSN                                 0x7
#define _CLC2SEL1_D2S7_POSITION                             0x7
#define _CLC2SEL1_D2S7_SIZE                                 0x1
#define _CLC2SEL1_D2S7_LENGTH                               0x1
#define _CLC2SEL1_D2S7_MASK                                 0x80

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0x1E1E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 01E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
        unsigned LC2D3S5                :1;
        unsigned LC2D3S6                :1;
        unsigned LC2D3S7                :1;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0x1E1E);
// bitfield macros
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S5_POSN                              0x5
#define _CLC2SEL2_LC2D3S5_POSITION                          0x5
#define _CLC2SEL2_LC2D3S5_SIZE                              0x1
#define _CLC2SEL2_LC2D3S5_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S5_MASK                              0x20
#define _CLC2SEL2_LC2D3S6_POSN                              0x6
#define _CLC2SEL2_LC2D3S6_POSITION                          0x6
#define _CLC2SEL2_LC2D3S6_SIZE                              0x1
#define _CLC2SEL2_LC2D3S6_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S6_MASK                              0x40
#define _CLC2SEL2_LC2D3S7_POSN                              0x7
#define _CLC2SEL2_LC2D3S7_POSITION                          0x7
#define _CLC2SEL2_LC2D3S7_SIZE                              0x1
#define _CLC2SEL2_LC2D3S7_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S7_MASK                              0x80
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10
#define _CLC2SEL2_D3S5_POSN                                 0x5
#define _CLC2SEL2_D3S5_POSITION                             0x5
#define _CLC2SEL2_D3S5_SIZE                                 0x1
#define _CLC2SEL2_D3S5_LENGTH                               0x1
#define _CLC2SEL2_D3S5_MASK                                 0x20
#define _CLC2SEL2_D3S6_POSN                                 0x6
#define _CLC2SEL2_D3S6_POSITION                             0x6
#define _CLC2SEL2_D3S6_SIZE                                 0x1
#define _CLC2SEL2_D3S6_LENGTH                               0x1
#define _CLC2SEL2_D3S6_MASK                                 0x40
#define _CLC2SEL2_D3S7_POSN                                 0x7
#define _CLC2SEL2_D3S7_POSITION                             0x7
#define _CLC2SEL2_D3S7_SIZE                                 0x1
#define _CLC2SEL2_D3S7_LENGTH                               0x1
#define _CLC2SEL2_D3S7_MASK                                 0x80

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0x1E1F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 01E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
        unsigned LC2D4S5                :1;
        unsigned LC2D4S6                :1;
        unsigned LC2D4S7                :1;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0x1E1F);
// bitfield macros
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S5_POSN                              0x5
#define _CLC2SEL3_LC2D4S5_POSITION                          0x5
#define _CLC2SEL3_LC2D4S5_SIZE                              0x1
#define _CLC2SEL3_LC2D4S5_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S5_MASK                              0x20
#define _CLC2SEL3_LC2D4S6_POSN                              0x6
#define _CLC2SEL3_LC2D4S6_POSITION                          0x6
#define _CLC2SEL3_LC2D4S6_SIZE                              0x1
#define _CLC2SEL3_LC2D4S6_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S6_MASK                              0x40
#define _CLC2SEL3_LC2D4S7_POSN                              0x7
#define _CLC2SEL3_LC2D4S7_POSITION                          0x7
#define _CLC2SEL3_LC2D4S7_SIZE                              0x1
#define _CLC2SEL3_LC2D4S7_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S7_MASK                              0x80
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10
#define _CLC2SEL3_D4S5_POSN                                 0x5
#define _CLC2SEL3_D4S5_POSITION                             0x5
#define _CLC2SEL3_D4S5_SIZE                                 0x1
#define _CLC2SEL3_D4S5_LENGTH                               0x1
#define _CLC2SEL3_D4S5_MASK                                 0x20
#define _CLC2SEL3_D4S6_POSN                                 0x6
#define _CLC2SEL3_D4S6_POSITION                             0x6
#define _CLC2SEL3_D4S6_SIZE                                 0x1
#define _CLC2SEL3_D4S6_LENGTH                               0x1
#define _CLC2SEL3_D4S6_MASK                                 0x40
#define _CLC2SEL3_D4S7_POSN                                 0x7
#define _CLC2SEL3_D4S7_POSITION                             0x7
#define _CLC2SEL3_D4S7_SIZE                                 0x1
#define _CLC2SEL3_D4S7_LENGTH                               0x1
#define _CLC2SEL3_D4S7_MASK                                 0x80

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0x1E20);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 01E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0x1E20);
// bitfield macros
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80
#define _CLC2GLS0_D1N_POSN                                  0x0
#define _CLC2GLS0_D1N_POSITION                              0x0
#define _CLC2GLS0_D1N_SIZE                                  0x1
#define _CLC2GLS0_D1N_LENGTH                                0x1
#define _CLC2GLS0_D1N_MASK                                  0x1
#define _CLC2GLS0_D1T_POSN                                  0x1
#define _CLC2GLS0_D1T_POSITION                              0x1
#define _CLC2GLS0_D1T_SIZE                                  0x1
#define _CLC2GLS0_D1T_LENGTH                                0x1
#define _CLC2GLS0_D1T_MASK                                  0x2
#define _CLC2GLS0_D2N_POSN                                  0x2
#define _CLC2GLS0_D2N_POSITION                              0x2
#define _CLC2GLS0_D2N_SIZE                                  0x1
#define _CLC2GLS0_D2N_LENGTH                                0x1
#define _CLC2GLS0_D2N_MASK                                  0x4
#define _CLC2GLS0_D2T_POSN                                  0x3
#define _CLC2GLS0_D2T_POSITION                              0x3
#define _CLC2GLS0_D2T_SIZE                                  0x1
#define _CLC2GLS0_D2T_LENGTH                                0x1
#define _CLC2GLS0_D2T_MASK                                  0x8
#define _CLC2GLS0_D3N_POSN                                  0x4
#define _CLC2GLS0_D3N_POSITION                              0x4
#define _CLC2GLS0_D3N_SIZE                                  0x1
#define _CLC2GLS0_D3N_LENGTH                                0x1
#define _CLC2GLS0_D3N_MASK                                  0x10
#define _CLC2GLS0_D3T_POSN                                  0x5
#define _CLC2GLS0_D3T_POSITION                              0x5
#define _CLC2GLS0_D3T_SIZE                                  0x1
#define _CLC2GLS0_D3T_LENGTH                                0x1
#define _CLC2GLS0_D3T_MASK                                  0x20
#define _CLC2GLS0_D4N_POSN                                  0x6
#define _CLC2GLS0_D4N_POSITION                              0x6
#define _CLC2GLS0_D4N_SIZE                                  0x1
#define _CLC2GLS0_D4N_LENGTH                                0x1
#define _CLC2GLS0_D4N_MASK                                  0x40
#define _CLC2GLS0_D4T_POSN                                  0x7
#define _CLC2GLS0_D4T_POSITION                              0x7
#define _CLC2GLS0_D4T_SIZE                                  0x1
#define _CLC2GLS0_D4T_LENGTH                                0x1
#define _CLC2GLS0_D4T_MASK                                  0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0x1E21);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 01E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0x1E21);
// bitfield macros
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80
#define _CLC2GLS1_D1N_POSN                                  0x0
#define _CLC2GLS1_D1N_POSITION                              0x0
#define _CLC2GLS1_D1N_SIZE                                  0x1
#define _CLC2GLS1_D1N_LENGTH                                0x1
#define _CLC2GLS1_D1N_MASK                                  0x1
#define _CLC2GLS1_D1T_POSN                                  0x1
#define _CLC2GLS1_D1T_POSITION                              0x1
#define _CLC2GLS1_D1T_SIZE                                  0x1
#define _CLC2GLS1_D1T_LENGTH                                0x1
#define _CLC2GLS1_D1T_MASK                                  0x2
#define _CLC2GLS1_D2N_POSN                                  0x2
#define _CLC2GLS1_D2N_POSITION                              0x2
#define _CLC2GLS1_D2N_SIZE                                  0x1
#define _CLC2GLS1_D2N_LENGTH                                0x1
#define _CLC2GLS1_D2N_MASK                                  0x4
#define _CLC2GLS1_D2T_POSN                                  0x3
#define _CLC2GLS1_D2T_POSITION                              0x3
#define _CLC2GLS1_D2T_SIZE                                  0x1
#define _CLC2GLS1_D2T_LENGTH                                0x1
#define _CLC2GLS1_D2T_MASK                                  0x8
#define _CLC2GLS1_D3N_POSN                                  0x4
#define _CLC2GLS1_D3N_POSITION                              0x4
#define _CLC2GLS1_D3N_SIZE                                  0x1
#define _CLC2GLS1_D3N_LENGTH                                0x1
#define _CLC2GLS1_D3N_MASK                                  0x10
#define _CLC2GLS1_D3T_POSN                                  0x5
#define _CLC2GLS1_D3T_POSITION                              0x5
#define _CLC2GLS1_D3T_SIZE                                  0x1
#define _CLC2GLS1_D3T_LENGTH                                0x1
#define _CLC2GLS1_D3T_MASK                                  0x20
#define _CLC2GLS1_D4N_POSN                                  0x6
#define _CLC2GLS1_D4N_POSITION                              0x6
#define _CLC2GLS1_D4N_SIZE                                  0x1
#define _CLC2GLS1_D4N_LENGTH                                0x1
#define _CLC2GLS1_D4N_MASK                                  0x40
#define _CLC2GLS1_D4T_POSN                                  0x7
#define _CLC2GLS1_D4T_POSITION                              0x7
#define _CLC2GLS1_D4T_SIZE                                  0x1
#define _CLC2GLS1_D4T_LENGTH                                0x1
#define _CLC2GLS1_D4T_MASK                                  0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0x1E22);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 01E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0x1E22);
// bitfield macros
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80
#define _CLC2GLS2_D1N_POSN                                  0x0
#define _CLC2GLS2_D1N_POSITION                              0x0
#define _CLC2GLS2_D1N_SIZE                                  0x1
#define _CLC2GLS2_D1N_LENGTH                                0x1
#define _CLC2GLS2_D1N_MASK                                  0x1
#define _CLC2GLS2_D1T_POSN                                  0x1
#define _CLC2GLS2_D1T_POSITION                              0x1
#define _CLC2GLS2_D1T_SIZE                                  0x1
#define _CLC2GLS2_D1T_LENGTH                                0x1
#define _CLC2GLS2_D1T_MASK                                  0x2
#define _CLC2GLS2_D2N_POSN                                  0x2
#define _CLC2GLS2_D2N_POSITION                              0x2
#define _CLC2GLS2_D2N_SIZE                                  0x1
#define _CLC2GLS2_D2N_LENGTH                                0x1
#define _CLC2GLS2_D2N_MASK                                  0x4
#define _CLC2GLS2_D2T_POSN                                  0x3
#define _CLC2GLS2_D2T_POSITION                              0x3
#define _CLC2GLS2_D2T_SIZE                                  0x1
#define _CLC2GLS2_D2T_LENGTH                                0x1
#define _CLC2GLS2_D2T_MASK                                  0x8
#define _CLC2GLS2_D3N_POSN                                  0x4
#define _CLC2GLS2_D3N_POSITION                              0x4
#define _CLC2GLS2_D3N_SIZE                                  0x1
#define _CLC2GLS2_D3N_LENGTH                                0x1
#define _CLC2GLS2_D3N_MASK                                  0x10
#define _CLC2GLS2_D3T_POSN                                  0x5
#define _CLC2GLS2_D3T_POSITION                              0x5
#define _CLC2GLS2_D3T_SIZE                                  0x1
#define _CLC2GLS2_D3T_LENGTH                                0x1
#define _CLC2GLS2_D3T_MASK                                  0x20
#define _CLC2GLS2_D4N_POSN                                  0x6
#define _CLC2GLS2_D4N_POSITION                              0x6
#define _CLC2GLS2_D4N_SIZE                                  0x1
#define _CLC2GLS2_D4N_LENGTH                                0x1
#define _CLC2GLS2_D4N_MASK                                  0x40
#define _CLC2GLS2_D4T_POSN                                  0x7
#define _CLC2GLS2_D4T_POSITION                              0x7
#define _CLC2GLS2_D4T_SIZE                                  0x1
#define _CLC2GLS2_D4T_LENGTH                                0x1
#define _CLC2GLS2_D4T_MASK                                  0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0x1E23);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 01E23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0x1E23);
// bitfield macros
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80

// Register: CLC3CON
#define CLC3CON CLC3CON
extern volatile unsigned char           CLC3CON             __at(0x1E24);
#ifndef _LIB_BUILD
asm("CLC3CON equ 01E24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3MODE                :3;
        unsigned LC3INTN                :1;
        unsigned LC3INTP                :1;
        unsigned LC3OUT                 :1;
        unsigned                        :1;
        unsigned LC3EN                  :1;
    };
    struct {
        unsigned LC3MODE0               :1;
        unsigned LC3MODE1               :1;
        unsigned LC3MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC3CONbits_t;
extern volatile CLC3CONbits_t CLC3CONbits __at(0x1E24);
// bitfield macros
#define _CLC3CON_LC3MODE_POSN                               0x0
#define _CLC3CON_LC3MODE_POSITION                           0x0
#define _CLC3CON_LC3MODE_SIZE                               0x3
#define _CLC3CON_LC3MODE_LENGTH                             0x3
#define _CLC3CON_LC3MODE_MASK                               0x7
#define _CLC3CON_LC3INTN_POSN                               0x3
#define _CLC3CON_LC3INTN_POSITION                           0x3
#define _CLC3CON_LC3INTN_SIZE                               0x1
#define _CLC3CON_LC3INTN_LENGTH                             0x1
#define _CLC3CON_LC3INTN_MASK                               0x8
#define _CLC3CON_LC3INTP_POSN                               0x4
#define _CLC3CON_LC3INTP_POSITION                           0x4
#define _CLC3CON_LC3INTP_SIZE                               0x1
#define _CLC3CON_LC3INTP_LENGTH                             0x1
#define _CLC3CON_LC3INTP_MASK                               0x10
#define _CLC3CON_LC3OUT_POSN                                0x5
#define _CLC3CON_LC3OUT_POSITION                            0x5
#define _CLC3CON_LC3OUT_SIZE                                0x1
#define _CLC3CON_LC3OUT_LENGTH                              0x1
#define _CLC3CON_LC3OUT_MASK                                0x20
#define _CLC3CON_LC3EN_POSN                                 0x7
#define _CLC3CON_LC3EN_POSITION                             0x7
#define _CLC3CON_LC3EN_SIZE                                 0x1
#define _CLC3CON_LC3EN_LENGTH                               0x1
#define _CLC3CON_LC3EN_MASK                                 0x80
#define _CLC3CON_LC3MODE0_POSN                              0x0
#define _CLC3CON_LC3MODE0_POSITION                          0x0
#define _CLC3CON_LC3MODE0_SIZE                              0x1
#define _CLC3CON_LC3MODE0_LENGTH                            0x1
#define _CLC3CON_LC3MODE0_MASK                              0x1
#define _CLC3CON_LC3MODE1_POSN                              0x1
#define _CLC3CON_LC3MODE1_POSITION                          0x1
#define _CLC3CON_LC3MODE1_SIZE                              0x1
#define _CLC3CON_LC3MODE1_LENGTH                            0x1
#define _CLC3CON_LC3MODE1_MASK                              0x2
#define _CLC3CON_LC3MODE2_POSN                              0x2
#define _CLC3CON_LC3MODE2_POSITION                          0x2
#define _CLC3CON_LC3MODE2_SIZE                              0x1
#define _CLC3CON_LC3MODE2_LENGTH                            0x1
#define _CLC3CON_LC3MODE2_MASK                              0x4
#define _CLC3CON_MODE_POSN                                  0x0
#define _CLC3CON_MODE_POSITION                              0x0
#define _CLC3CON_MODE_SIZE                                  0x3
#define _CLC3CON_MODE_LENGTH                                0x3
#define _CLC3CON_MODE_MASK                                  0x7
#define _CLC3CON_INTN_POSN                                  0x3
#define _CLC3CON_INTN_POSITION                              0x3
#define _CLC3CON_INTN_SIZE                                  0x1
#define _CLC3CON_INTN_LENGTH                                0x1
#define _CLC3CON_INTN_MASK                                  0x8
#define _CLC3CON_INTP_POSN                                  0x4
#define _CLC3CON_INTP_POSITION                              0x4
#define _CLC3CON_INTP_SIZE                                  0x1
#define _CLC3CON_INTP_LENGTH                                0x1
#define _CLC3CON_INTP_MASK                                  0x10
#define _CLC3CON_OUT_POSN                                   0x5
#define _CLC3CON_OUT_POSITION                               0x5
#define _CLC3CON_OUT_SIZE                                   0x1
#define _CLC3CON_OUT_LENGTH                                 0x1
#define _CLC3CON_OUT_MASK                                   0x20
#define _CLC3CON_EN_POSN                                    0x7
#define _CLC3CON_EN_POSITION                                0x7
#define _CLC3CON_EN_SIZE                                    0x1
#define _CLC3CON_EN_LENGTH                                  0x1
#define _CLC3CON_EN_MASK                                    0x80
#define _CLC3CON_MODE0_POSN                                 0x0
#define _CLC3CON_MODE0_POSITION                             0x0
#define _CLC3CON_MODE0_SIZE                                 0x1
#define _CLC3CON_MODE0_LENGTH                               0x1
#define _CLC3CON_MODE0_MASK                                 0x1
#define _CLC3CON_MODE1_POSN                                 0x1
#define _CLC3CON_MODE1_POSITION                             0x1
#define _CLC3CON_MODE1_SIZE                                 0x1
#define _CLC3CON_MODE1_LENGTH                               0x1
#define _CLC3CON_MODE1_MASK                                 0x2
#define _CLC3CON_MODE2_POSN                                 0x2
#define _CLC3CON_MODE2_POSITION                             0x2
#define _CLC3CON_MODE2_SIZE                                 0x1
#define _CLC3CON_MODE2_LENGTH                               0x1
#define _CLC3CON_MODE2_MASK                                 0x4

// Register: CLC3POL
#define CLC3POL CLC3POL
extern volatile unsigned char           CLC3POL             __at(0x1E25);
#ifndef _LIB_BUILD
asm("CLC3POL equ 01E25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1POL               :1;
        unsigned LC3G2POL               :1;
        unsigned LC3G3POL               :1;
        unsigned LC3G4POL               :1;
        unsigned                        :3;
        unsigned LC3POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC3POLbits_t;
extern volatile CLC3POLbits_t CLC3POLbits __at(0x1E25);
// bitfield macros
#define _CLC3POL_LC3G1POL_POSN                              0x0
#define _CLC3POL_LC3G1POL_POSITION                          0x0
#define _CLC3POL_LC3G1POL_SIZE                              0x1
#define _CLC3POL_LC3G1POL_LENGTH                            0x1
#define _CLC3POL_LC3G1POL_MASK                              0x1
#define _CLC3POL_LC3G2POL_POSN                              0x1
#define _CLC3POL_LC3G2POL_POSITION                          0x1
#define _CLC3POL_LC3G2POL_SIZE                              0x1
#define _CLC3POL_LC3G2POL_LENGTH                            0x1
#define _CLC3POL_LC3G2POL_MASK                              0x2
#define _CLC3POL_LC3G3POL_POSN                              0x2
#define _CLC3POL_LC3G3POL_POSITION                          0x2
#define _CLC3POL_LC3G3POL_SIZE                              0x1
#define _CLC3POL_LC3G3POL_LENGTH                            0x1
#define _CLC3POL_LC3G3POL_MASK                              0x4
#define _CLC3POL_LC3G4POL_POSN                              0x3
#define _CLC3POL_LC3G4POL_POSITION                          0x3
#define _CLC3POL_LC3G4POL_SIZE                              0x1
#define _CLC3POL_LC3G4POL_LENGTH                            0x1
#define _CLC3POL_LC3G4POL_MASK                              0x8
#define _CLC3POL_LC3POL_POSN                                0x7
#define _CLC3POL_LC3POL_POSITION                            0x7
#define _CLC3POL_LC3POL_SIZE                                0x1
#define _CLC3POL_LC3POL_LENGTH                              0x1
#define _CLC3POL_LC3POL_MASK                                0x80
#define _CLC3POL_G1POL_POSN                                 0x0
#define _CLC3POL_G1POL_POSITION                             0x0
#define _CLC3POL_G1POL_SIZE                                 0x1
#define _CLC3POL_G1POL_LENGTH                               0x1
#define _CLC3POL_G1POL_MASK                                 0x1
#define _CLC3POL_G2POL_POSN                                 0x1
#define _CLC3POL_G2POL_POSITION                             0x1
#define _CLC3POL_G2POL_SIZE                                 0x1
#define _CLC3POL_G2POL_LENGTH                               0x1
#define _CLC3POL_G2POL_MASK                                 0x2
#define _CLC3POL_G3POL_POSN                                 0x2
#define _CLC3POL_G3POL_POSITION                             0x2
#define _CLC3POL_G3POL_SIZE                                 0x1
#define _CLC3POL_G3POL_LENGTH                               0x1
#define _CLC3POL_G3POL_MASK                                 0x4
#define _CLC3POL_G4POL_POSN                                 0x3
#define _CLC3POL_G4POL_POSITION                             0x3
#define _CLC3POL_G4POL_SIZE                                 0x1
#define _CLC3POL_G4POL_LENGTH                               0x1
#define _CLC3POL_G4POL_MASK                                 0x8
#define _CLC3POL_POL_POSN                                   0x7
#define _CLC3POL_POL_POSITION                               0x7
#define _CLC3POL_POL_SIZE                                   0x1
#define _CLC3POL_POL_LENGTH                                 0x1
#define _CLC3POL_POL_MASK                                   0x80

// Register: CLC3SEL0
#define CLC3SEL0 CLC3SEL0
extern volatile unsigned char           CLC3SEL0            __at(0x1E26);
#ifndef _LIB_BUILD
asm("CLC3SEL0 equ 01E26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D1S0                :1;
        unsigned LC3D1S1                :1;
        unsigned LC3D1S2                :1;
        unsigned LC3D1S3                :1;
        unsigned LC3D1S4                :1;
        unsigned LC3D1S5                :1;
        unsigned LC3D1S6                :1;
        unsigned LC3D1S7                :1;
    };
    struct {
        unsigned LC3D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
} CLC3SEL0bits_t;
extern volatile CLC3SEL0bits_t CLC3SEL0bits __at(0x1E26);
// bitfield macros
#define _CLC3SEL0_LC3D1S0_POSN                              0x0
#define _CLC3SEL0_LC3D1S0_POSITION                          0x0
#define _CLC3SEL0_LC3D1S0_SIZE                              0x1
#define _CLC3SEL0_LC3D1S0_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S0_MASK                              0x1
#define _CLC3SEL0_LC3D1S1_POSN                              0x1
#define _CLC3SEL0_LC3D1S1_POSITION                          0x1
#define _CLC3SEL0_LC3D1S1_SIZE                              0x1
#define _CLC3SEL0_LC3D1S1_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S1_MASK                              0x2
#define _CLC3SEL0_LC3D1S2_POSN                              0x2
#define _CLC3SEL0_LC3D1S2_POSITION                          0x2
#define _CLC3SEL0_LC3D1S2_SIZE                              0x1
#define _CLC3SEL0_LC3D1S2_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S2_MASK                              0x4
#define _CLC3SEL0_LC3D1S3_POSN                              0x3
#define _CLC3SEL0_LC3D1S3_POSITION                          0x3
#define _CLC3SEL0_LC3D1S3_SIZE                              0x1
#define _CLC3SEL0_LC3D1S3_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S3_MASK                              0x8
#define _CLC3SEL0_LC3D1S4_POSN                              0x4
#define _CLC3SEL0_LC3D1S4_POSITION                          0x4
#define _CLC3SEL0_LC3D1S4_SIZE                              0x1
#define _CLC3SEL0_LC3D1S4_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S4_MASK                              0x10
#define _CLC3SEL0_LC3D1S5_POSN                              0x5
#define _CLC3SEL0_LC3D1S5_POSITION                          0x5
#define _CLC3SEL0_LC3D1S5_SIZE                              0x1
#define _CLC3SEL0_LC3D1S5_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S5_MASK                              0x20
#define _CLC3SEL0_LC3D1S6_POSN                              0x6
#define _CLC3SEL0_LC3D1S6_POSITION                          0x6
#define _CLC3SEL0_LC3D1S6_SIZE                              0x1
#define _CLC3SEL0_LC3D1S6_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S6_MASK                              0x40
#define _CLC3SEL0_LC3D1S7_POSN                              0x7
#define _CLC3SEL0_LC3D1S7_POSITION                          0x7
#define _CLC3SEL0_LC3D1S7_SIZE                              0x1
#define _CLC3SEL0_LC3D1S7_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S7_MASK                              0x80
#define _CLC3SEL0_LC3D1S_POSN                               0x0
#define _CLC3SEL0_LC3D1S_POSITION                           0x0
#define _CLC3SEL0_LC3D1S_SIZE                               0x8
#define _CLC3SEL0_LC3D1S_LENGTH                             0x8
#define _CLC3SEL0_LC3D1S_MASK                               0xFF
#define _CLC3SEL0_D1S_POSN                                  0x0
#define _CLC3SEL0_D1S_POSITION                              0x0
#define _CLC3SEL0_D1S_SIZE                                  0x8
#define _CLC3SEL0_D1S_LENGTH                                0x8
#define _CLC3SEL0_D1S_MASK                                  0xFF
#define _CLC3SEL0_D1S0_POSN                                 0x0
#define _CLC3SEL0_D1S0_POSITION                             0x0
#define _CLC3SEL0_D1S0_SIZE                                 0x1
#define _CLC3SEL0_D1S0_LENGTH                               0x1
#define _CLC3SEL0_D1S0_MASK                                 0x1
#define _CLC3SEL0_D1S1_POSN                                 0x1
#define _CLC3SEL0_D1S1_POSITION                             0x1
#define _CLC3SEL0_D1S1_SIZE                                 0x1
#define _CLC3SEL0_D1S1_LENGTH                               0x1
#define _CLC3SEL0_D1S1_MASK                                 0x2
#define _CLC3SEL0_D1S2_POSN                                 0x2
#define _CLC3SEL0_D1S2_POSITION                             0x2
#define _CLC3SEL0_D1S2_SIZE                                 0x1
#define _CLC3SEL0_D1S2_LENGTH                               0x1
#define _CLC3SEL0_D1S2_MASK                                 0x4
#define _CLC3SEL0_D1S3_POSN                                 0x3
#define _CLC3SEL0_D1S3_POSITION                             0x3
#define _CLC3SEL0_D1S3_SIZE                                 0x1
#define _CLC3SEL0_D1S3_LENGTH                               0x1
#define _CLC3SEL0_D1S3_MASK                                 0x8
#define _CLC3SEL0_D1S4_POSN                                 0x4
#define _CLC3SEL0_D1S4_POSITION                             0x4
#define _CLC3SEL0_D1S4_SIZE                                 0x1
#define _CLC3SEL0_D1S4_LENGTH                               0x1
#define _CLC3SEL0_D1S4_MASK                                 0x10
#define _CLC3SEL0_D1S5_POSN                                 0x5
#define _CLC3SEL0_D1S5_POSITION                             0x5
#define _CLC3SEL0_D1S5_SIZE                                 0x1
#define _CLC3SEL0_D1S5_LENGTH                               0x1
#define _CLC3SEL0_D1S5_MASK                                 0x20
#define _CLC3SEL0_D1S6_POSN                                 0x6
#define _CLC3SEL0_D1S6_POSITION                             0x6
#define _CLC3SEL0_D1S6_SIZE                                 0x1
#define _CLC3SEL0_D1S6_LENGTH                               0x1
#define _CLC3SEL0_D1S6_MASK                                 0x40
#define _CLC3SEL0_D1S7_POSN                                 0x7
#define _CLC3SEL0_D1S7_POSITION                             0x7
#define _CLC3SEL0_D1S7_SIZE                                 0x1
#define _CLC3SEL0_D1S7_LENGTH                               0x1
#define _CLC3SEL0_D1S7_MASK                                 0x80

// Register: CLC3SEL1
#define CLC3SEL1 CLC3SEL1
extern volatile unsigned char           CLC3SEL1            __at(0x1E27);
#ifndef _LIB_BUILD
asm("CLC3SEL1 equ 01E27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D2S0                :1;
        unsigned LC3D2S1                :1;
        unsigned LC3D2S2                :1;
        unsigned LC3D2S3                :1;
        unsigned LC3D2S4                :1;
        unsigned LC3D2S5                :1;
        unsigned LC3D2S6                :1;
        unsigned LC3D2S7                :1;
    };
    struct {
        unsigned LC3D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
} CLC3SEL1bits_t;
extern volatile CLC3SEL1bits_t CLC3SEL1bits __at(0x1E27);
// bitfield macros
#define _CLC3SEL1_LC3D2S0_POSN                              0x0
#define _CLC3SEL1_LC3D2S0_POSITION                          0x0
#define _CLC3SEL1_LC3D2S0_SIZE                              0x1
#define _CLC3SEL1_LC3D2S0_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S0_MASK                              0x1
#define _CLC3SEL1_LC3D2S1_POSN                              0x1
#define _CLC3SEL1_LC3D2S1_POSITION                          0x1
#define _CLC3SEL1_LC3D2S1_SIZE                              0x1
#define _CLC3SEL1_LC3D2S1_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S1_MASK                              0x2
#define _CLC3SEL1_LC3D2S2_POSN                              0x2
#define _CLC3SEL1_LC3D2S2_POSITION                          0x2
#define _CLC3SEL1_LC3D2S2_SIZE                              0x1
#define _CLC3SEL1_LC3D2S2_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S2_MASK                              0x4
#define _CLC3SEL1_LC3D2S3_POSN                              0x3
#define _CLC3SEL1_LC3D2S3_POSITION                          0x3
#define _CLC3SEL1_LC3D2S3_SIZE                              0x1
#define _CLC3SEL1_LC3D2S3_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S3_MASK                              0x8
#define _CLC3SEL1_LC3D2S4_POSN                              0x4
#define _CLC3SEL1_LC3D2S4_POSITION                          0x4
#define _CLC3SEL1_LC3D2S4_SIZE                              0x1
#define _CLC3SEL1_LC3D2S4_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S4_MASK                              0x10
#define _CLC3SEL1_LC3D2S5_POSN                              0x5
#define _CLC3SEL1_LC3D2S5_POSITION                          0x5
#define _CLC3SEL1_LC3D2S5_SIZE                              0x1
#define _CLC3SEL1_LC3D2S5_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S5_MASK                              0x20
#define _CLC3SEL1_LC3D2S6_POSN                              0x6
#define _CLC3SEL1_LC3D2S6_POSITION                          0x6
#define _CLC3SEL1_LC3D2S6_SIZE                              0x1
#define _CLC3SEL1_LC3D2S6_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S6_MASK                              0x40
#define _CLC3SEL1_LC3D2S7_POSN                              0x7
#define _CLC3SEL1_LC3D2S7_POSITION                          0x7
#define _CLC3SEL1_LC3D2S7_SIZE                              0x1
#define _CLC3SEL1_LC3D2S7_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S7_MASK                              0x80
#define _CLC3SEL1_LC3D2S_POSN                               0x0
#define _CLC3SEL1_LC3D2S_POSITION                           0x0
#define _CLC3SEL1_LC3D2S_SIZE                               0x8
#define _CLC3SEL1_LC3D2S_LENGTH                             0x8
#define _CLC3SEL1_LC3D2S_MASK                               0xFF
#define _CLC3SEL1_D2S_POSN                                  0x0
#define _CLC3SEL1_D2S_POSITION                              0x0
#define _CLC3SEL1_D2S_SIZE                                  0x8
#define _CLC3SEL1_D2S_LENGTH                                0x8
#define _CLC3SEL1_D2S_MASK                                  0xFF
#define _CLC3SEL1_D2S0_POSN                                 0x0
#define _CLC3SEL1_D2S0_POSITION                             0x0
#define _CLC3SEL1_D2S0_SIZE                                 0x1
#define _CLC3SEL1_D2S0_LENGTH                               0x1
#define _CLC3SEL1_D2S0_MASK                                 0x1
#define _CLC3SEL1_D2S1_POSN                                 0x1
#define _CLC3SEL1_D2S1_POSITION                             0x1
#define _CLC3SEL1_D2S1_SIZE                                 0x1
#define _CLC3SEL1_D2S1_LENGTH                               0x1
#define _CLC3SEL1_D2S1_MASK                                 0x2
#define _CLC3SEL1_D2S2_POSN                                 0x2
#define _CLC3SEL1_D2S2_POSITION                             0x2
#define _CLC3SEL1_D2S2_SIZE                                 0x1
#define _CLC3SEL1_D2S2_LENGTH                               0x1
#define _CLC3SEL1_D2S2_MASK                                 0x4
#define _CLC3SEL1_D2S3_POSN                                 0x3
#define _CLC3SEL1_D2S3_POSITION                             0x3
#define _CLC3SEL1_D2S3_SIZE                                 0x1
#define _CLC3SEL1_D2S3_LENGTH                               0x1
#define _CLC3SEL1_D2S3_MASK                                 0x8
#define _CLC3SEL1_D2S4_POSN                                 0x4
#define _CLC3SEL1_D2S4_POSITION                             0x4
#define _CLC3SEL1_D2S4_SIZE                                 0x1
#define _CLC3SEL1_D2S4_LENGTH                               0x1
#define _CLC3SEL1_D2S4_MASK                                 0x10
#define _CLC3SEL1_D2S5_POSN                                 0x5
#define _CLC3SEL1_D2S5_POSITION                             0x5
#define _CLC3SEL1_D2S5_SIZE                                 0x1
#define _CLC3SEL1_D2S5_LENGTH                               0x1
#define _CLC3SEL1_D2S5_MASK                                 0x20
#define _CLC3SEL1_D2S6_POSN                                 0x6
#define _CLC3SEL1_D2S6_POSITION                             0x6
#define _CLC3SEL1_D2S6_SIZE                                 0x1
#define _CLC3SEL1_D2S6_LENGTH                               0x1
#define _CLC3SEL1_D2S6_MASK                                 0x40
#define _CLC3SEL1_D2S7_POSN                                 0x7
#define _CLC3SEL1_D2S7_POSITION                             0x7
#define _CLC3SEL1_D2S7_SIZE                                 0x1
#define _CLC3SEL1_D2S7_LENGTH                               0x1
#define _CLC3SEL1_D2S7_MASK                                 0x80

// Register: CLC3SEL2
#define CLC3SEL2 CLC3SEL2
extern volatile unsigned char           CLC3SEL2            __at(0x1E28);
#ifndef _LIB_BUILD
asm("CLC3SEL2 equ 01E28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D3S0                :1;
        unsigned LC3D3S1                :1;
        unsigned LC3D3S2                :1;
        unsigned LC3D3S3                :1;
        unsigned LC3D3S4                :1;
        unsigned LC3D3S5                :1;
        unsigned LC3D3S6                :1;
        unsigned LC3D3S7                :1;
    };
    struct {
        unsigned LC3D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
} CLC3SEL2bits_t;
extern volatile CLC3SEL2bits_t CLC3SEL2bits __at(0x1E28);
// bitfield macros
#define _CLC3SEL2_LC3D3S0_POSN                              0x0
#define _CLC3SEL2_LC3D3S0_POSITION                          0x0
#define _CLC3SEL2_LC3D3S0_SIZE                              0x1
#define _CLC3SEL2_LC3D3S0_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S0_MASK                              0x1
#define _CLC3SEL2_LC3D3S1_POSN                              0x1
#define _CLC3SEL2_LC3D3S1_POSITION                          0x1
#define _CLC3SEL2_LC3D3S1_SIZE                              0x1
#define _CLC3SEL2_LC3D3S1_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S1_MASK                              0x2
#define _CLC3SEL2_LC3D3S2_POSN                              0x2
#define _CLC3SEL2_LC3D3S2_POSITION                          0x2
#define _CLC3SEL2_LC3D3S2_SIZE                              0x1
#define _CLC3SEL2_LC3D3S2_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S2_MASK                              0x4
#define _CLC3SEL2_LC3D3S3_POSN                              0x3
#define _CLC3SEL2_LC3D3S3_POSITION                          0x3
#define _CLC3SEL2_LC3D3S3_SIZE                              0x1
#define _CLC3SEL2_LC3D3S3_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S3_MASK                              0x8
#define _CLC3SEL2_LC3D3S4_POSN                              0x4
#define _CLC3SEL2_LC3D3S4_POSITION                          0x4
#define _CLC3SEL2_LC3D3S4_SIZE                              0x1
#define _CLC3SEL2_LC3D3S4_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S4_MASK                              0x10
#define _CLC3SEL2_LC3D3S5_POSN                              0x5
#define _CLC3SEL2_LC3D3S5_POSITION                          0x5
#define _CLC3SEL2_LC3D3S5_SIZE                              0x1
#define _CLC3SEL2_LC3D3S5_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S5_MASK                              0x20
#define _CLC3SEL2_LC3D3S6_POSN                              0x6
#define _CLC3SEL2_LC3D3S6_POSITION                          0x6
#define _CLC3SEL2_LC3D3S6_SIZE                              0x1
#define _CLC3SEL2_LC3D3S6_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S6_MASK                              0x40
#define _CLC3SEL2_LC3D3S7_POSN                              0x7
#define _CLC3SEL2_LC3D3S7_POSITION                          0x7
#define _CLC3SEL2_LC3D3S7_SIZE                              0x1
#define _CLC3SEL2_LC3D3S7_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S7_MASK                              0x80
#define _CLC3SEL2_LC3D3S_POSN                               0x0
#define _CLC3SEL2_LC3D3S_POSITION                           0x0
#define _CLC3SEL2_LC3D3S_SIZE                               0x8
#define _CLC3SEL2_LC3D3S_LENGTH                             0x8
#define _CLC3SEL2_LC3D3S_MASK                               0xFF
#define _CLC3SEL2_D3S_POSN                                  0x0
#define _CLC3SEL2_D3S_POSITION                              0x0
#define _CLC3SEL2_D3S_SIZE                                  0x8
#define _CLC3SEL2_D3S_LENGTH                                0x8
#define _CLC3SEL2_D3S_MASK                                  0xFF
#define _CLC3SEL2_D3S0_POSN                                 0x0
#define _CLC3SEL2_D3S0_POSITION                             0x0
#define _CLC3SEL2_D3S0_SIZE                                 0x1
#define _CLC3SEL2_D3S0_LENGTH                               0x1
#define _CLC3SEL2_D3S0_MASK                                 0x1
#define _CLC3SEL2_D3S1_POSN                                 0x1
#define _CLC3SEL2_D3S1_POSITION                             0x1
#define _CLC3SEL2_D3S1_SIZE                                 0x1
#define _CLC3SEL2_D3S1_LENGTH                               0x1
#define _CLC3SEL2_D3S1_MASK                                 0x2
#define _CLC3SEL2_D3S2_POSN                                 0x2
#define _CLC3SEL2_D3S2_POSITION                             0x2
#define _CLC3SEL2_D3S2_SIZE                                 0x1
#define _CLC3SEL2_D3S2_LENGTH                               0x1
#define _CLC3SEL2_D3S2_MASK                                 0x4
#define _CLC3SEL2_D3S3_POSN                                 0x3
#define _CLC3SEL2_D3S3_POSITION                             0x3
#define _CLC3SEL2_D3S3_SIZE                                 0x1
#define _CLC3SEL2_D3S3_LENGTH                               0x1
#define _CLC3SEL2_D3S3_MASK                                 0x8
#define _CLC3SEL2_D3S4_POSN                                 0x4
#define _CLC3SEL2_D3S4_POSITION                             0x4
#define _CLC3SEL2_D3S4_SIZE                                 0x1
#define _CLC3SEL2_D3S4_LENGTH                               0x1
#define _CLC3SEL2_D3S4_MASK                                 0x10
#define _CLC3SEL2_D3S5_POSN                                 0x5
#define _CLC3SEL2_D3S5_POSITION                             0x5
#define _CLC3SEL2_D3S5_SIZE                                 0x1
#define _CLC3SEL2_D3S5_LENGTH                               0x1
#define _CLC3SEL2_D3S5_MASK                                 0x20
#define _CLC3SEL2_D3S6_POSN                                 0x6
#define _CLC3SEL2_D3S6_POSITION                             0x6
#define _CLC3SEL2_D3S6_SIZE                                 0x1
#define _CLC3SEL2_D3S6_LENGTH                               0x1
#define _CLC3SEL2_D3S6_MASK                                 0x40
#define _CLC3SEL2_D3S7_POSN                                 0x7
#define _CLC3SEL2_D3S7_POSITION                             0x7
#define _CLC3SEL2_D3S7_SIZE                                 0x1
#define _CLC3SEL2_D3S7_LENGTH                               0x1
#define _CLC3SEL2_D3S7_MASK                                 0x80

// Register: CLC3SEL3
#define CLC3SEL3 CLC3SEL3
extern volatile unsigned char           CLC3SEL3            __at(0x1E29);
#ifndef _LIB_BUILD
asm("CLC3SEL3 equ 01E29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D4S0                :1;
        unsigned LC3D4S1                :1;
        unsigned LC3D4S2                :1;
        unsigned LC3D4S3                :1;
        unsigned LC3D4S4                :1;
        unsigned LC3D4S5                :1;
        unsigned LC3D4S6                :1;
        unsigned LC3D4S7                :1;
    };
    struct {
        unsigned LC3D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
} CLC3SEL3bits_t;
extern volatile CLC3SEL3bits_t CLC3SEL3bits __at(0x1E29);
// bitfield macros
#define _CLC3SEL3_LC3D4S0_POSN                              0x0
#define _CLC3SEL3_LC3D4S0_POSITION                          0x0
#define _CLC3SEL3_LC3D4S0_SIZE                              0x1
#define _CLC3SEL3_LC3D4S0_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S0_MASK                              0x1
#define _CLC3SEL3_LC3D4S1_POSN                              0x1
#define _CLC3SEL3_LC3D4S1_POSITION                          0x1
#define _CLC3SEL3_LC3D4S1_SIZE                              0x1
#define _CLC3SEL3_LC3D4S1_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S1_MASK                              0x2
#define _CLC3SEL3_LC3D4S2_POSN                              0x2
#define _CLC3SEL3_LC3D4S2_POSITION                          0x2
#define _CLC3SEL3_LC3D4S2_SIZE                              0x1
#define _CLC3SEL3_LC3D4S2_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S2_MASK                              0x4
#define _CLC3SEL3_LC3D4S3_POSN                              0x3
#define _CLC3SEL3_LC3D4S3_POSITION                          0x3
#define _CLC3SEL3_LC3D4S3_SIZE                              0x1
#define _CLC3SEL3_LC3D4S3_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S3_MASK                              0x8
#define _CLC3SEL3_LC3D4S4_POSN                              0x4
#define _CLC3SEL3_LC3D4S4_POSITION                          0x4
#define _CLC3SEL3_LC3D4S4_SIZE                              0x1
#define _CLC3SEL3_LC3D4S4_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S4_MASK                              0x10
#define _CLC3SEL3_LC3D4S5_POSN                              0x5
#define _CLC3SEL3_LC3D4S5_POSITION                          0x5
#define _CLC3SEL3_LC3D4S5_SIZE                              0x1
#define _CLC3SEL3_LC3D4S5_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S5_MASK                              0x20
#define _CLC3SEL3_LC3D4S6_POSN                              0x6
#define _CLC3SEL3_LC3D4S6_POSITION                          0x6
#define _CLC3SEL3_LC3D4S6_SIZE                              0x1
#define _CLC3SEL3_LC3D4S6_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S6_MASK                              0x40
#define _CLC3SEL3_LC3D4S7_POSN                              0x7
#define _CLC3SEL3_LC3D4S7_POSITION                          0x7
#define _CLC3SEL3_LC3D4S7_SIZE                              0x1
#define _CLC3SEL3_LC3D4S7_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S7_MASK                              0x80
#define _CLC3SEL3_LC3D4S_POSN                               0x0
#define _CLC3SEL3_LC3D4S_POSITION                           0x0
#define _CLC3SEL3_LC3D4S_SIZE                               0x8
#define _CLC3SEL3_LC3D4S_LENGTH                             0x8
#define _CLC3SEL3_LC3D4S_MASK                               0xFF
#define _CLC3SEL3_D4S_POSN                                  0x0
#define _CLC3SEL3_D4S_POSITION                              0x0
#define _CLC3SEL3_D4S_SIZE                                  0x8
#define _CLC3SEL3_D4S_LENGTH                                0x8
#define _CLC3SEL3_D4S_MASK                                  0xFF
#define _CLC3SEL3_D4S0_POSN                                 0x0
#define _CLC3SEL3_D4S0_POSITION                             0x0
#define _CLC3SEL3_D4S0_SIZE                                 0x1
#define _CLC3SEL3_D4S0_LENGTH                               0x1
#define _CLC3SEL3_D4S0_MASK                                 0x1
#define _CLC3SEL3_D4S1_POSN                                 0x1
#define _CLC3SEL3_D4S1_POSITION                             0x1
#define _CLC3SEL3_D4S1_SIZE                                 0x1
#define _CLC3SEL3_D4S1_LENGTH                               0x1
#define _CLC3SEL3_D4S1_MASK                                 0x2
#define _CLC3SEL3_D4S2_POSN                                 0x2
#define _CLC3SEL3_D4S2_POSITION                             0x2
#define _CLC3SEL3_D4S2_SIZE                                 0x1
#define _CLC3SEL3_D4S2_LENGTH                               0x1
#define _CLC3SEL3_D4S2_MASK                                 0x4
#define _CLC3SEL3_D4S3_POSN                                 0x3
#define _CLC3SEL3_D4S3_POSITION                             0x3
#define _CLC3SEL3_D4S3_SIZE                                 0x1
#define _CLC3SEL3_D4S3_LENGTH                               0x1
#define _CLC3SEL3_D4S3_MASK                                 0x8
#define _CLC3SEL3_D4S4_POSN                                 0x4
#define _CLC3SEL3_D4S4_POSITION                             0x4
#define _CLC3SEL3_D4S4_SIZE                                 0x1
#define _CLC3SEL3_D4S4_LENGTH                               0x1
#define _CLC3SEL3_D4S4_MASK                                 0x10
#define _CLC3SEL3_D4S5_POSN                                 0x5
#define _CLC3SEL3_D4S5_POSITION                             0x5
#define _CLC3SEL3_D4S5_SIZE                                 0x1
#define _CLC3SEL3_D4S5_LENGTH                               0x1
#define _CLC3SEL3_D4S5_MASK                                 0x20
#define _CLC3SEL3_D4S6_POSN                                 0x6
#define _CLC3SEL3_D4S6_POSITION                             0x6
#define _CLC3SEL3_D4S6_SIZE                                 0x1
#define _CLC3SEL3_D4S6_LENGTH                               0x1
#define _CLC3SEL3_D4S6_MASK                                 0x40
#define _CLC3SEL3_D4S7_POSN                                 0x7
#define _CLC3SEL3_D4S7_POSITION                             0x7
#define _CLC3SEL3_D4S7_SIZE                                 0x1
#define _CLC3SEL3_D4S7_LENGTH                               0x1
#define _CLC3SEL3_D4S7_MASK                                 0x80

// Register: CLC3GLS0
#define CLC3GLS0 CLC3GLS0
extern volatile unsigned char           CLC3GLS0            __at(0x1E2A);
#ifndef _LIB_BUILD
asm("CLC3GLS0 equ 01E2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1D1N               :1;
        unsigned LC3G1D1T               :1;
        unsigned LC3G1D2N               :1;
        unsigned LC3G1D2T               :1;
        unsigned LC3G1D3N               :1;
        unsigned LC3G1D3T               :1;
        unsigned LC3G1D4N               :1;
        unsigned LC3G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS0bits_t;
extern volatile CLC3GLS0bits_t CLC3GLS0bits __at(0x1E2A);
// bitfield macros
#define _CLC3GLS0_LC3G1D1N_POSN                             0x0
#define _CLC3GLS0_LC3G1D1N_POSITION                         0x0
#define _CLC3GLS0_LC3G1D1N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1N_MASK                             0x1
#define _CLC3GLS0_LC3G1D1T_POSN                             0x1
#define _CLC3GLS0_LC3G1D1T_POSITION                         0x1
#define _CLC3GLS0_LC3G1D1T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1T_MASK                             0x2
#define _CLC3GLS0_LC3G1D2N_POSN                             0x2
#define _CLC3GLS0_LC3G1D2N_POSITION                         0x2
#define _CLC3GLS0_LC3G1D2N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2N_MASK                             0x4
#define _CLC3GLS0_LC3G1D2T_POSN                             0x3
#define _CLC3GLS0_LC3G1D2T_POSITION                         0x3
#define _CLC3GLS0_LC3G1D2T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2T_MASK                             0x8
#define _CLC3GLS0_LC3G1D3N_POSN                             0x4
#define _CLC3GLS0_LC3G1D3N_POSITION                         0x4
#define _CLC3GLS0_LC3G1D3N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3N_MASK                             0x10
#define _CLC3GLS0_LC3G1D3T_POSN                             0x5
#define _CLC3GLS0_LC3G1D3T_POSITION                         0x5
#define _CLC3GLS0_LC3G1D3T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3T_MASK                             0x20
#define _CLC3GLS0_LC3G1D4N_POSN                             0x6
#define _CLC3GLS0_LC3G1D4N_POSITION                         0x6
#define _CLC3GLS0_LC3G1D4N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4N_MASK                             0x40
#define _CLC3GLS0_LC3G1D4T_POSN                             0x7
#define _CLC3GLS0_LC3G1D4T_POSITION                         0x7
#define _CLC3GLS0_LC3G1D4T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4T_MASK                             0x80
#define _CLC3GLS0_D1N_POSN                                  0x0
#define _CLC3GLS0_D1N_POSITION                              0x0
#define _CLC3GLS0_D1N_SIZE                                  0x1
#define _CLC3GLS0_D1N_LENGTH                                0x1
#define _CLC3GLS0_D1N_MASK                                  0x1
#define _CLC3GLS0_D1T_POSN                                  0x1
#define _CLC3GLS0_D1T_POSITION                              0x1
#define _CLC3GLS0_D1T_SIZE                                  0x1
#define _CLC3GLS0_D1T_LENGTH                                0x1
#define _CLC3GLS0_D1T_MASK                                  0x2
#define _CLC3GLS0_D2N_POSN                                  0x2
#define _CLC3GLS0_D2N_POSITION                              0x2
#define _CLC3GLS0_D2N_SIZE                                  0x1
#define _CLC3GLS0_D2N_LENGTH                                0x1
#define _CLC3GLS0_D2N_MASK                                  0x4
#define _CLC3GLS0_D2T_POSN                                  0x3
#define _CLC3GLS0_D2T_POSITION                              0x3
#define _CLC3GLS0_D2T_SIZE                                  0x1
#define _CLC3GLS0_D2T_LENGTH                                0x1
#define _CLC3GLS0_D2T_MASK                                  0x8
#define _CLC3GLS0_D3N_POSN                                  0x4
#define _CLC3GLS0_D3N_POSITION                              0x4
#define _CLC3GLS0_D3N_SIZE                                  0x1
#define _CLC3GLS0_D3N_LENGTH                                0x1
#define _CLC3GLS0_D3N_MASK                                  0x10
#define _CLC3GLS0_D3T_POSN                                  0x5
#define _CLC3GLS0_D3T_POSITION                              0x5
#define _CLC3GLS0_D3T_SIZE                                  0x1
#define _CLC3GLS0_D3T_LENGTH                                0x1
#define _CLC3GLS0_D3T_MASK                                  0x20
#define _CLC3GLS0_D4N_POSN                                  0x6
#define _CLC3GLS0_D4N_POSITION                              0x6
#define _CLC3GLS0_D4N_SIZE                                  0x1
#define _CLC3GLS0_D4N_LENGTH                                0x1
#define _CLC3GLS0_D4N_MASK                                  0x40
#define _CLC3GLS0_D4T_POSN                                  0x7
#define _CLC3GLS0_D4T_POSITION                              0x7
#define _CLC3GLS0_D4T_SIZE                                  0x1
#define _CLC3GLS0_D4T_LENGTH                                0x1
#define _CLC3GLS0_D4T_MASK                                  0x80

// Register: CLC3GLS1
#define CLC3GLS1 CLC3GLS1
extern volatile unsigned char           CLC3GLS1            __at(0x1E2B);
#ifndef _LIB_BUILD
asm("CLC3GLS1 equ 01E2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G2D1N               :1;
        unsigned LC3G2D1T               :1;
        unsigned LC3G2D2N               :1;
        unsigned LC3G2D2T               :1;
        unsigned LC3G2D3N               :1;
        unsigned LC3G2D3T               :1;
        unsigned LC3G2D4N               :1;
        unsigned LC3G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS1bits_t;
extern volatile CLC3GLS1bits_t CLC3GLS1bits __at(0x1E2B);
// bitfield macros
#define _CLC3GLS1_LC3G2D1N_POSN                             0x0
#define _CLC3GLS1_LC3G2D1N_POSITION                         0x0
#define _CLC3GLS1_LC3G2D1N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1N_MASK                             0x1
#define _CLC3GLS1_LC3G2D1T_POSN                             0x1
#define _CLC3GLS1_LC3G2D1T_POSITION                         0x1
#define _CLC3GLS1_LC3G2D1T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1T_MASK                             0x2
#define _CLC3GLS1_LC3G2D2N_POSN                             0x2
#define _CLC3GLS1_LC3G2D2N_POSITION                         0x2
#define _CLC3GLS1_LC3G2D2N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2N_MASK                             0x4
#define _CLC3GLS1_LC3G2D2T_POSN                             0x3
#define _CLC3GLS1_LC3G2D2T_POSITION                         0x3
#define _CLC3GLS1_LC3G2D2T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2T_MASK                             0x8
#define _CLC3GLS1_LC3G2D3N_POSN                             0x4
#define _CLC3GLS1_LC3G2D3N_POSITION                         0x4
#define _CLC3GLS1_LC3G2D3N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3N_MASK                             0x10
#define _CLC3GLS1_LC3G2D3T_POSN                             0x5
#define _CLC3GLS1_LC3G2D3T_POSITION                         0x5
#define _CLC3GLS1_LC3G2D3T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3T_MASK                             0x20
#define _CLC3GLS1_LC3G2D4N_POSN                             0x6
#define _CLC3GLS1_LC3G2D4N_POSITION                         0x6
#define _CLC3GLS1_LC3G2D4N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4N_MASK                             0x40
#define _CLC3GLS1_LC3G2D4T_POSN                             0x7
#define _CLC3GLS1_LC3G2D4T_POSITION                         0x7
#define _CLC3GLS1_LC3G2D4T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4T_MASK                             0x80
#define _CLC3GLS1_D1N_POSN                                  0x0
#define _CLC3GLS1_D1N_POSITION                              0x0
#define _CLC3GLS1_D1N_SIZE                                  0x1
#define _CLC3GLS1_D1N_LENGTH                                0x1
#define _CLC3GLS1_D1N_MASK                                  0x1
#define _CLC3GLS1_D1T_POSN                                  0x1
#define _CLC3GLS1_D1T_POSITION                              0x1
#define _CLC3GLS1_D1T_SIZE                                  0x1
#define _CLC3GLS1_D1T_LENGTH                                0x1
#define _CLC3GLS1_D1T_MASK                                  0x2
#define _CLC3GLS1_D2N_POSN                                  0x2
#define _CLC3GLS1_D2N_POSITION                              0x2
#define _CLC3GLS1_D2N_SIZE                                  0x1
#define _CLC3GLS1_D2N_LENGTH                                0x1
#define _CLC3GLS1_D2N_MASK                                  0x4
#define _CLC3GLS1_D2T_POSN                                  0x3
#define _CLC3GLS1_D2T_POSITION                              0x3
#define _CLC3GLS1_D2T_SIZE                                  0x1
#define _CLC3GLS1_D2T_LENGTH                                0x1
#define _CLC3GLS1_D2T_MASK                                  0x8
#define _CLC3GLS1_D3N_POSN                                  0x4
#define _CLC3GLS1_D3N_POSITION                              0x4
#define _CLC3GLS1_D3N_SIZE                                  0x1
#define _CLC3GLS1_D3N_LENGTH                                0x1
#define _CLC3GLS1_D3N_MASK                                  0x10
#define _CLC3GLS1_D3T_POSN                                  0x5
#define _CLC3GLS1_D3T_POSITION                              0x5
#define _CLC3GLS1_D3T_SIZE                                  0x1
#define _CLC3GLS1_D3T_LENGTH                                0x1
#define _CLC3GLS1_D3T_MASK                                  0x20
#define _CLC3GLS1_D4N_POSN                                  0x6
#define _CLC3GLS1_D4N_POSITION                              0x6
#define _CLC3GLS1_D4N_SIZE                                  0x1
#define _CLC3GLS1_D4N_LENGTH                                0x1
#define _CLC3GLS1_D4N_MASK                                  0x40
#define _CLC3GLS1_D4T_POSN                                  0x7
#define _CLC3GLS1_D4T_POSITION                              0x7
#define _CLC3GLS1_D4T_SIZE                                  0x1
#define _CLC3GLS1_D4T_LENGTH                                0x1
#define _CLC3GLS1_D4T_MASK                                  0x80

// Register: CLC3GLS2
#define CLC3GLS2 CLC3GLS2
extern volatile unsigned char           CLC3GLS2            __at(0x1E2C);
#ifndef _LIB_BUILD
asm("CLC3GLS2 equ 01E2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G3D1N               :1;
        unsigned LC3G3D1T               :1;
        unsigned LC3G3D2N               :1;
        unsigned LC3G3D2T               :1;
        unsigned LC3G3D3N               :1;
        unsigned LC3G3D3T               :1;
        unsigned LC3G3D4N               :1;
        unsigned LC3G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS2bits_t;
extern volatile CLC3GLS2bits_t CLC3GLS2bits __at(0x1E2C);
// bitfield macros
#define _CLC3GLS2_LC3G3D1N_POSN                             0x0
#define _CLC3GLS2_LC3G3D1N_POSITION                         0x0
#define _CLC3GLS2_LC3G3D1N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1N_MASK                             0x1
#define _CLC3GLS2_LC3G3D1T_POSN                             0x1
#define _CLC3GLS2_LC3G3D1T_POSITION                         0x1
#define _CLC3GLS2_LC3G3D1T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1T_MASK                             0x2
#define _CLC3GLS2_LC3G3D2N_POSN                             0x2
#define _CLC3GLS2_LC3G3D2N_POSITION                         0x2
#define _CLC3GLS2_LC3G3D2N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2N_MASK                             0x4
#define _CLC3GLS2_LC3G3D2T_POSN                             0x3
#define _CLC3GLS2_LC3G3D2T_POSITION                         0x3
#define _CLC3GLS2_LC3G3D2T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2T_MASK                             0x8
#define _CLC3GLS2_LC3G3D3N_POSN                             0x4
#define _CLC3GLS2_LC3G3D3N_POSITION                         0x4
#define _CLC3GLS2_LC3G3D3N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3N_MASK                             0x10
#define _CLC3GLS2_LC3G3D3T_POSN                             0x5
#define _CLC3GLS2_LC3G3D3T_POSITION                         0x5
#define _CLC3GLS2_LC3G3D3T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3T_MASK                             0x20
#define _CLC3GLS2_LC3G3D4N_POSN                             0x6
#define _CLC3GLS2_LC3G3D4N_POSITION                         0x6
#define _CLC3GLS2_LC3G3D4N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4N_MASK                             0x40
#define _CLC3GLS2_LC3G3D4T_POSN                             0x7
#define _CLC3GLS2_LC3G3D4T_POSITION                         0x7
#define _CLC3GLS2_LC3G3D4T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4T_MASK                             0x80
#define _CLC3GLS2_D1N_POSN                                  0x0
#define _CLC3GLS2_D1N_POSITION                              0x0
#define _CLC3GLS2_D1N_SIZE                                  0x1
#define _CLC3GLS2_D1N_LENGTH                                0x1
#define _CLC3GLS2_D1N_MASK                                  0x1
#define _CLC3GLS2_D1T_POSN                                  0x1
#define _CLC3GLS2_D1T_POSITION                              0x1
#define _CLC3GLS2_D1T_SIZE                                  0x1
#define _CLC3GLS2_D1T_LENGTH                                0x1
#define _CLC3GLS2_D1T_MASK                                  0x2
#define _CLC3GLS2_D2N_POSN                                  0x2
#define _CLC3GLS2_D2N_POSITION                              0x2
#define _CLC3GLS2_D2N_SIZE                                  0x1
#define _CLC3GLS2_D2N_LENGTH                                0x1
#define _CLC3GLS2_D2N_MASK                                  0x4
#define _CLC3GLS2_D2T_POSN                                  0x3
#define _CLC3GLS2_D2T_POSITION                              0x3
#define _CLC3GLS2_D2T_SIZE                                  0x1
#define _CLC3GLS2_D2T_LENGTH                                0x1
#define _CLC3GLS2_D2T_MASK                                  0x8
#define _CLC3GLS2_D3N_POSN                                  0x4
#define _CLC3GLS2_D3N_POSITION                              0x4
#define _CLC3GLS2_D3N_SIZE                                  0x1
#define _CLC3GLS2_D3N_LENGTH                                0x1
#define _CLC3GLS2_D3N_MASK                                  0x10
#define _CLC3GLS2_D3T_POSN                                  0x5
#define _CLC3GLS2_D3T_POSITION                              0x5
#define _CLC3GLS2_D3T_SIZE                                  0x1
#define _CLC3GLS2_D3T_LENGTH                                0x1
#define _CLC3GLS2_D3T_MASK                                  0x20
#define _CLC3GLS2_D4N_POSN                                  0x6
#define _CLC3GLS2_D4N_POSITION                              0x6
#define _CLC3GLS2_D4N_SIZE                                  0x1
#define _CLC3GLS2_D4N_LENGTH                                0x1
#define _CLC3GLS2_D4N_MASK                                  0x40
#define _CLC3GLS2_D4T_POSN                                  0x7
#define _CLC3GLS2_D4T_POSITION                              0x7
#define _CLC3GLS2_D4T_SIZE                                  0x1
#define _CLC3GLS2_D4T_LENGTH                                0x1
#define _CLC3GLS2_D4T_MASK                                  0x80

// Register: CLC3GLS3
#define CLC3GLS3 CLC3GLS3
extern volatile unsigned char           CLC3GLS3            __at(0x1E2D);
#ifndef _LIB_BUILD
asm("CLC3GLS3 equ 01E2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G4D1N               :1;
        unsigned LC3G4D1T               :1;
        unsigned LC3G4D2N               :1;
        unsigned LC3G4D2T               :1;
        unsigned LC3G4D3N               :1;
        unsigned LC3G4D3T               :1;
        unsigned LC3G4D4N               :1;
        unsigned LC3G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC3GLS3bits_t;
extern volatile CLC3GLS3bits_t CLC3GLS3bits __at(0x1E2D);
// bitfield macros
#define _CLC3GLS3_LC3G4D1N_POSN                             0x0
#define _CLC3GLS3_LC3G4D1N_POSITION                         0x0
#define _CLC3GLS3_LC3G4D1N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1N_MASK                             0x1
#define _CLC3GLS3_LC3G4D1T_POSN                             0x1
#define _CLC3GLS3_LC3G4D1T_POSITION                         0x1
#define _CLC3GLS3_LC3G4D1T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1T_MASK                             0x2
#define _CLC3GLS3_LC3G4D2N_POSN                             0x2
#define _CLC3GLS3_LC3G4D2N_POSITION                         0x2
#define _CLC3GLS3_LC3G4D2N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2N_MASK                             0x4
#define _CLC3GLS3_LC3G4D2T_POSN                             0x3
#define _CLC3GLS3_LC3G4D2T_POSITION                         0x3
#define _CLC3GLS3_LC3G4D2T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2T_MASK                             0x8
#define _CLC3GLS3_LC3G4D3N_POSN                             0x4
#define _CLC3GLS3_LC3G4D3N_POSITION                         0x4
#define _CLC3GLS3_LC3G4D3N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3N_MASK                             0x10
#define _CLC3GLS3_LC3G4D3T_POSN                             0x5
#define _CLC3GLS3_LC3G4D3T_POSITION                         0x5
#define _CLC3GLS3_LC3G4D3T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3T_MASK                             0x20
#define _CLC3GLS3_LC3G4D4N_POSN                             0x6
#define _CLC3GLS3_LC3G4D4N_POSITION                         0x6
#define _CLC3GLS3_LC3G4D4N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4N_MASK                             0x40
#define _CLC3GLS3_LC3G4D4T_POSN                             0x7
#define _CLC3GLS3_LC3G4D4T_POSITION                         0x7
#define _CLC3GLS3_LC3G4D4T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4T_MASK                             0x80
#define _CLC3GLS3_G4D1N_POSN                                0x0
#define _CLC3GLS3_G4D1N_POSITION                            0x0
#define _CLC3GLS3_G4D1N_SIZE                                0x1
#define _CLC3GLS3_G4D1N_LENGTH                              0x1
#define _CLC3GLS3_G4D1N_MASK                                0x1
#define _CLC3GLS3_G4D1T_POSN                                0x1
#define _CLC3GLS3_G4D1T_POSITION                            0x1
#define _CLC3GLS3_G4D1T_SIZE                                0x1
#define _CLC3GLS3_G4D1T_LENGTH                              0x1
#define _CLC3GLS3_G4D1T_MASK                                0x2
#define _CLC3GLS3_G4D2N_POSN                                0x2
#define _CLC3GLS3_G4D2N_POSITION                            0x2
#define _CLC3GLS3_G4D2N_SIZE                                0x1
#define _CLC3GLS3_G4D2N_LENGTH                              0x1
#define _CLC3GLS3_G4D2N_MASK                                0x4
#define _CLC3GLS3_G4D2T_POSN                                0x3
#define _CLC3GLS3_G4D2T_POSITION                            0x3
#define _CLC3GLS3_G4D2T_SIZE                                0x1
#define _CLC3GLS3_G4D2T_LENGTH                              0x1
#define _CLC3GLS3_G4D2T_MASK                                0x8
#define _CLC3GLS3_G4D3N_POSN                                0x4
#define _CLC3GLS3_G4D3N_POSITION                            0x4
#define _CLC3GLS3_G4D3N_SIZE                                0x1
#define _CLC3GLS3_G4D3N_LENGTH                              0x1
#define _CLC3GLS3_G4D3N_MASK                                0x10
#define _CLC3GLS3_G4D3T_POSN                                0x5
#define _CLC3GLS3_G4D3T_POSITION                            0x5
#define _CLC3GLS3_G4D3T_SIZE                                0x1
#define _CLC3GLS3_G4D3T_LENGTH                              0x1
#define _CLC3GLS3_G4D3T_MASK                                0x20
#define _CLC3GLS3_G4D4N_POSN                                0x6
#define _CLC3GLS3_G4D4N_POSITION                            0x6
#define _CLC3GLS3_G4D4N_SIZE                                0x1
#define _CLC3GLS3_G4D4N_LENGTH                              0x1
#define _CLC3GLS3_G4D4N_MASK                                0x40
#define _CLC3GLS3_G4D4T_POSN                                0x7
#define _CLC3GLS3_G4D4T_POSITION                            0x7
#define _CLC3GLS3_G4D4T_SIZE                                0x1
#define _CLC3GLS3_G4D4T_LENGTH                              0x1
#define _CLC3GLS3_G4D4T_MASK                                0x80

// Register: CLC4CON
#define CLC4CON CLC4CON
extern volatile unsigned char           CLC4CON             __at(0x1E2E);
#ifndef _LIB_BUILD
asm("CLC4CON equ 01E2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4MODE                :3;
        unsigned LC4INTN                :1;
        unsigned LC4INTP                :1;
        unsigned LC4OUT                 :1;
        unsigned                        :1;
        unsigned LC4EN                  :1;
    };
    struct {
        unsigned LC4MODE0               :1;
        unsigned LC4MODE1               :1;
        unsigned LC4MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC4CONbits_t;
extern volatile CLC4CONbits_t CLC4CONbits __at(0x1E2E);
// bitfield macros
#define _CLC4CON_LC4MODE_POSN                               0x0
#define _CLC4CON_LC4MODE_POSITION                           0x0
#define _CLC4CON_LC4MODE_SIZE                               0x3
#define _CLC4CON_LC4MODE_LENGTH                             0x3
#define _CLC4CON_LC4MODE_MASK                               0x7
#define _CLC4CON_LC4INTN_POSN                               0x3
#define _CLC4CON_LC4INTN_POSITION                           0x3
#define _CLC4CON_LC4INTN_SIZE                               0x1
#define _CLC4CON_LC4INTN_LENGTH                             0x1
#define _CLC4CON_LC4INTN_MASK                               0x8
#define _CLC4CON_LC4INTP_POSN                               0x4
#define _CLC4CON_LC4INTP_POSITION                           0x4
#define _CLC4CON_LC4INTP_SIZE                               0x1
#define _CLC4CON_LC4INTP_LENGTH                             0x1
#define _CLC4CON_LC4INTP_MASK                               0x10
#define _CLC4CON_LC4OUT_POSN                                0x5
#define _CLC4CON_LC4OUT_POSITION                            0x5
#define _CLC4CON_LC4OUT_SIZE                                0x1
#define _CLC4CON_LC4OUT_LENGTH                              0x1
#define _CLC4CON_LC4OUT_MASK                                0x20
#define _CLC4CON_LC4EN_POSN                                 0x7
#define _CLC4CON_LC4EN_POSITION                             0x7
#define _CLC4CON_LC4EN_SIZE                                 0x1
#define _CLC4CON_LC4EN_LENGTH                               0x1
#define _CLC4CON_LC4EN_MASK                                 0x80
#define _CLC4CON_LC4MODE0_POSN                              0x0
#define _CLC4CON_LC4MODE0_POSITION                          0x0
#define _CLC4CON_LC4MODE0_SIZE                              0x1
#define _CLC4CON_LC4MODE0_LENGTH                            0x1
#define _CLC4CON_LC4MODE0_MASK                              0x1
#define _CLC4CON_LC4MODE1_POSN                              0x1
#define _CLC4CON_LC4MODE1_POSITION                          0x1
#define _CLC4CON_LC4MODE1_SIZE                              0x1
#define _CLC4CON_LC4MODE1_LENGTH                            0x1
#define _CLC4CON_LC4MODE1_MASK                              0x2
#define _CLC4CON_LC4MODE2_POSN                              0x2
#define _CLC4CON_LC4MODE2_POSITION                          0x2
#define _CLC4CON_LC4MODE2_SIZE                              0x1
#define _CLC4CON_LC4MODE2_LENGTH                            0x1
#define _CLC4CON_LC4MODE2_MASK                              0x4
#define _CLC4CON_MODE_POSN                                  0x0
#define _CLC4CON_MODE_POSITION                              0x0
#define _CLC4CON_MODE_SIZE                                  0x3
#define _CLC4CON_MODE_LENGTH                                0x3
#define _CLC4CON_MODE_MASK                                  0x7
#define _CLC4CON_INTN_POSN                                  0x3
#define _CLC4CON_INTN_POSITION                              0x3
#define _CLC4CON_INTN_SIZE                                  0x1
#define _CLC4CON_INTN_LENGTH                                0x1
#define _CLC4CON_INTN_MASK                                  0x8
#define _CLC4CON_INTP_POSN                                  0x4
#define _CLC4CON_INTP_POSITION                              0x4
#define _CLC4CON_INTP_SIZE                                  0x1
#define _CLC4CON_INTP_LENGTH                                0x1
#define _CLC4CON_INTP_MASK                                  0x10
#define _CLC4CON_OUT_POSN                                   0x5
#define _CLC4CON_OUT_POSITION                               0x5
#define _CLC4CON_OUT_SIZE                                   0x1
#define _CLC4CON_OUT_LENGTH                                 0x1
#define _CLC4CON_OUT_MASK                                   0x20
#define _CLC4CON_EN_POSN                                    0x7
#define _CLC4CON_EN_POSITION                                0x7
#define _CLC4CON_EN_SIZE                                    0x1
#define _CLC4CON_EN_LENGTH                                  0x1
#define _CLC4CON_EN_MASK                                    0x80
#define _CLC4CON_MODE0_POSN                                 0x0
#define _CLC4CON_MODE0_POSITION                             0x0
#define _CLC4CON_MODE0_SIZE                                 0x1
#define _CLC4CON_MODE0_LENGTH                               0x1
#define _CLC4CON_MODE0_MASK                                 0x1
#define _CLC4CON_MODE1_POSN                                 0x1
#define _CLC4CON_MODE1_POSITION                             0x1
#define _CLC4CON_MODE1_SIZE                                 0x1
#define _CLC4CON_MODE1_LENGTH                               0x1
#define _CLC4CON_MODE1_MASK                                 0x2
#define _CLC4CON_MODE2_POSN                                 0x2
#define _CLC4CON_MODE2_POSITION                             0x2
#define _CLC4CON_MODE2_SIZE                                 0x1
#define _CLC4CON_MODE2_LENGTH                               0x1
#define _CLC4CON_MODE2_MASK                                 0x4

// Register: CLC4POL
#define CLC4POL CLC4POL
extern volatile unsigned char           CLC4POL             __at(0x1E2F);
#ifndef _LIB_BUILD
asm("CLC4POL equ 01E2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1POL               :1;
        unsigned LC4G2POL               :1;
        unsigned LC4G3POL               :1;
        unsigned LC4G4POL               :1;
        unsigned                        :3;
        unsigned LC4POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC4POLbits_t;
extern volatile CLC4POLbits_t CLC4POLbits __at(0x1E2F);
// bitfield macros
#define _CLC4POL_LC4G1POL_POSN                              0x0
#define _CLC4POL_LC4G1POL_POSITION                          0x0
#define _CLC4POL_LC4G1POL_SIZE                              0x1
#define _CLC4POL_LC4G1POL_LENGTH                            0x1
#define _CLC4POL_LC4G1POL_MASK                              0x1
#define _CLC4POL_LC4G2POL_POSN                              0x1
#define _CLC4POL_LC4G2POL_POSITION                          0x1
#define _CLC4POL_LC4G2POL_SIZE                              0x1
#define _CLC4POL_LC4G2POL_LENGTH                            0x1
#define _CLC4POL_LC4G2POL_MASK                              0x2
#define _CLC4POL_LC4G3POL_POSN                              0x2
#define _CLC4POL_LC4G3POL_POSITION                          0x2
#define _CLC4POL_LC4G3POL_SIZE                              0x1
#define _CLC4POL_LC4G3POL_LENGTH                            0x1
#define _CLC4POL_LC4G3POL_MASK                              0x4
#define _CLC4POL_LC4G4POL_POSN                              0x3
#define _CLC4POL_LC4G4POL_POSITION                          0x3
#define _CLC4POL_LC4G4POL_SIZE                              0x1
#define _CLC4POL_LC4G4POL_LENGTH                            0x1
#define _CLC4POL_LC4G4POL_MASK                              0x8
#define _CLC4POL_LC4POL_POSN                                0x7
#define _CLC4POL_LC4POL_POSITION                            0x7
#define _CLC4POL_LC4POL_SIZE                                0x1
#define _CLC4POL_LC4POL_LENGTH                              0x1
#define _CLC4POL_LC4POL_MASK                                0x80
#define _CLC4POL_G1POL_POSN                                 0x0
#define _CLC4POL_G1POL_POSITION                             0x0
#define _CLC4POL_G1POL_SIZE                                 0x1
#define _CLC4POL_G1POL_LENGTH                               0x1
#define _CLC4POL_G1POL_MASK                                 0x1
#define _CLC4POL_G2POL_POSN                                 0x1
#define _CLC4POL_G2POL_POSITION                             0x1
#define _CLC4POL_G2POL_SIZE                                 0x1
#define _CLC4POL_G2POL_LENGTH                               0x1
#define _CLC4POL_G2POL_MASK                                 0x2
#define _CLC4POL_G3POL_POSN                                 0x2
#define _CLC4POL_G3POL_POSITION                             0x2
#define _CLC4POL_G3POL_SIZE                                 0x1
#define _CLC4POL_G3POL_LENGTH                               0x1
#define _CLC4POL_G3POL_MASK                                 0x4
#define _CLC4POL_G4POL_POSN                                 0x3
#define _CLC4POL_G4POL_POSITION                             0x3
#define _CLC4POL_G4POL_SIZE                                 0x1
#define _CLC4POL_G4POL_LENGTH                               0x1
#define _CLC4POL_G4POL_MASK                                 0x8
#define _CLC4POL_POL_POSN                                   0x7
#define _CLC4POL_POL_POSITION                               0x7
#define _CLC4POL_POL_SIZE                                   0x1
#define _CLC4POL_POL_LENGTH                                 0x1
#define _CLC4POL_POL_MASK                                   0x80

// Register: CLC4SEL0
#define CLC4SEL0 CLC4SEL0
extern volatile unsigned char           CLC4SEL0            __at(0x1E30);
#ifndef _LIB_BUILD
asm("CLC4SEL0 equ 01E30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D1S0                :1;
        unsigned LC4D1S1                :1;
        unsigned LC4D1S2                :1;
        unsigned LC4D1S3                :1;
        unsigned LC4D1S4                :1;
        unsigned LC4D1S5                :1;
        unsigned LC4D1S6                :1;
        unsigned LC4D1S7                :1;
    };
    struct {
        unsigned LC4D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
} CLC4SEL0bits_t;
extern volatile CLC4SEL0bits_t CLC4SEL0bits __at(0x1E30);
// bitfield macros
#define _CLC4SEL0_LC4D1S0_POSN                              0x0
#define _CLC4SEL0_LC4D1S0_POSITION                          0x0
#define _CLC4SEL0_LC4D1S0_SIZE                              0x1
#define _CLC4SEL0_LC4D1S0_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S0_MASK                              0x1
#define _CLC4SEL0_LC4D1S1_POSN                              0x1
#define _CLC4SEL0_LC4D1S1_POSITION                          0x1
#define _CLC4SEL0_LC4D1S1_SIZE                              0x1
#define _CLC4SEL0_LC4D1S1_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S1_MASK                              0x2
#define _CLC4SEL0_LC4D1S2_POSN                              0x2
#define _CLC4SEL0_LC4D1S2_POSITION                          0x2
#define _CLC4SEL0_LC4D1S2_SIZE                              0x1
#define _CLC4SEL0_LC4D1S2_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S2_MASK                              0x4
#define _CLC4SEL0_LC4D1S3_POSN                              0x3
#define _CLC4SEL0_LC4D1S3_POSITION                          0x3
#define _CLC4SEL0_LC4D1S3_SIZE                              0x1
#define _CLC4SEL0_LC4D1S3_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S3_MASK                              0x8
#define _CLC4SEL0_LC4D1S4_POSN                              0x4
#define _CLC4SEL0_LC4D1S4_POSITION                          0x4
#define _CLC4SEL0_LC4D1S4_SIZE                              0x1
#define _CLC4SEL0_LC4D1S4_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S4_MASK                              0x10
#define _CLC4SEL0_LC4D1S5_POSN                              0x5
#define _CLC4SEL0_LC4D1S5_POSITION                          0x5
#define _CLC4SEL0_LC4D1S5_SIZE                              0x1
#define _CLC4SEL0_LC4D1S5_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S5_MASK                              0x20
#define _CLC4SEL0_LC4D1S6_POSN                              0x6
#define _CLC4SEL0_LC4D1S6_POSITION                          0x6
#define _CLC4SEL0_LC4D1S6_SIZE                              0x1
#define _CLC4SEL0_LC4D1S6_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S6_MASK                              0x40
#define _CLC4SEL0_LC4D1S7_POSN                              0x7
#define _CLC4SEL0_LC4D1S7_POSITION                          0x7
#define _CLC4SEL0_LC4D1S7_SIZE                              0x1
#define _CLC4SEL0_LC4D1S7_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S7_MASK                              0x80
#define _CLC4SEL0_LC4D1S_POSN                               0x0
#define _CLC4SEL0_LC4D1S_POSITION                           0x0
#define _CLC4SEL0_LC4D1S_SIZE                               0x8
#define _CLC4SEL0_LC4D1S_LENGTH                             0x8
#define _CLC4SEL0_LC4D1S_MASK                               0xFF
#define _CLC4SEL0_D1S_POSN                                  0x0
#define _CLC4SEL0_D1S_POSITION                              0x0
#define _CLC4SEL0_D1S_SIZE                                  0x8
#define _CLC4SEL0_D1S_LENGTH                                0x8
#define _CLC4SEL0_D1S_MASK                                  0xFF
#define _CLC4SEL0_D1S0_POSN                                 0x0
#define _CLC4SEL0_D1S0_POSITION                             0x0
#define _CLC4SEL0_D1S0_SIZE                                 0x1
#define _CLC4SEL0_D1S0_LENGTH                               0x1
#define _CLC4SEL0_D1S0_MASK                                 0x1
#define _CLC4SEL0_D1S1_POSN                                 0x1
#define _CLC4SEL0_D1S1_POSITION                             0x1
#define _CLC4SEL0_D1S1_SIZE                                 0x1
#define _CLC4SEL0_D1S1_LENGTH                               0x1
#define _CLC4SEL0_D1S1_MASK                                 0x2
#define _CLC4SEL0_D1S2_POSN                                 0x2
#define _CLC4SEL0_D1S2_POSITION                             0x2
#define _CLC4SEL0_D1S2_SIZE                                 0x1
#define _CLC4SEL0_D1S2_LENGTH                               0x1
#define _CLC4SEL0_D1S2_MASK                                 0x4
#define _CLC4SEL0_D1S3_POSN                                 0x3
#define _CLC4SEL0_D1S3_POSITION                             0x3
#define _CLC4SEL0_D1S3_SIZE                                 0x1
#define _CLC4SEL0_D1S3_LENGTH                               0x1
#define _CLC4SEL0_D1S3_MASK                                 0x8
#define _CLC4SEL0_D1S4_POSN                                 0x4
#define _CLC4SEL0_D1S4_POSITION                             0x4
#define _CLC4SEL0_D1S4_SIZE                                 0x1
#define _CLC4SEL0_D1S4_LENGTH                               0x1
#define _CLC4SEL0_D1S4_MASK                                 0x10
#define _CLC4SEL0_D1S5_POSN                                 0x5
#define _CLC4SEL0_D1S5_POSITION                             0x5
#define _CLC4SEL0_D1S5_SIZE                                 0x1
#define _CLC4SEL0_D1S5_LENGTH                               0x1
#define _CLC4SEL0_D1S5_MASK                                 0x20
#define _CLC4SEL0_D1S6_POSN                                 0x6
#define _CLC4SEL0_D1S6_POSITION                             0x6
#define _CLC4SEL0_D1S6_SIZE                                 0x1
#define _CLC4SEL0_D1S6_LENGTH                               0x1
#define _CLC4SEL0_D1S6_MASK                                 0x40
#define _CLC4SEL0_D1S7_POSN                                 0x7
#define _CLC4SEL0_D1S7_POSITION                             0x7
#define _CLC4SEL0_D1S7_SIZE                                 0x1
#define _CLC4SEL0_D1S7_LENGTH                               0x1
#define _CLC4SEL0_D1S7_MASK                                 0x80

// Register: CLC4SEL1
#define CLC4SEL1 CLC4SEL1
extern volatile unsigned char           CLC4SEL1            __at(0x1E31);
#ifndef _LIB_BUILD
asm("CLC4SEL1 equ 01E31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D2S0                :1;
        unsigned LC4D2S1                :1;
        unsigned LC4D2S2                :1;
        unsigned LC4D2S3                :1;
        unsigned LC4D2S4                :1;
        unsigned LC4D2S5                :1;
        unsigned LC4D2S6                :1;
        unsigned LC4D2S7                :1;
    };
    struct {
        unsigned LC4D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
} CLC4SEL1bits_t;
extern volatile CLC4SEL1bits_t CLC4SEL1bits __at(0x1E31);
// bitfield macros
#define _CLC4SEL1_LC4D2S0_POSN                              0x0
#define _CLC4SEL1_LC4D2S0_POSITION                          0x0
#define _CLC4SEL1_LC4D2S0_SIZE                              0x1
#define _CLC4SEL1_LC4D2S0_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S0_MASK                              0x1
#define _CLC4SEL1_LC4D2S1_POSN                              0x1
#define _CLC4SEL1_LC4D2S1_POSITION                          0x1
#define _CLC4SEL1_LC4D2S1_SIZE                              0x1
#define _CLC4SEL1_LC4D2S1_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S1_MASK                              0x2
#define _CLC4SEL1_LC4D2S2_POSN                              0x2
#define _CLC4SEL1_LC4D2S2_POSITION                          0x2
#define _CLC4SEL1_LC4D2S2_SIZE                              0x1
#define _CLC4SEL1_LC4D2S2_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S2_MASK                              0x4
#define _CLC4SEL1_LC4D2S3_POSN                              0x3
#define _CLC4SEL1_LC4D2S3_POSITION                          0x3
#define _CLC4SEL1_LC4D2S3_SIZE                              0x1
#define _CLC4SEL1_LC4D2S3_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S3_MASK                              0x8
#define _CLC4SEL1_LC4D2S4_POSN                              0x4
#define _CLC4SEL1_LC4D2S4_POSITION                          0x4
#define _CLC4SEL1_LC4D2S4_SIZE                              0x1
#define _CLC4SEL1_LC4D2S4_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S4_MASK                              0x10
#define _CLC4SEL1_LC4D2S5_POSN                              0x5
#define _CLC4SEL1_LC4D2S5_POSITION                          0x5
#define _CLC4SEL1_LC4D2S5_SIZE                              0x1
#define _CLC4SEL1_LC4D2S5_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S5_MASK                              0x20
#define _CLC4SEL1_LC4D2S6_POSN                              0x6
#define _CLC4SEL1_LC4D2S6_POSITION                          0x6
#define _CLC4SEL1_LC4D2S6_SIZE                              0x1
#define _CLC4SEL1_LC4D2S6_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S6_MASK                              0x40
#define _CLC4SEL1_LC4D2S7_POSN                              0x7
#define _CLC4SEL1_LC4D2S7_POSITION                          0x7
#define _CLC4SEL1_LC4D2S7_SIZE                              0x1
#define _CLC4SEL1_LC4D2S7_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S7_MASK                              0x80
#define _CLC4SEL1_LC4D2S_POSN                               0x0
#define _CLC4SEL1_LC4D2S_POSITION                           0x0
#define _CLC4SEL1_LC4D2S_SIZE                               0x8
#define _CLC4SEL1_LC4D2S_LENGTH                             0x8
#define _CLC4SEL1_LC4D2S_MASK                               0xFF
#define _CLC4SEL1_D2S_POSN                                  0x0
#define _CLC4SEL1_D2S_POSITION                              0x0
#define _CLC4SEL1_D2S_SIZE                                  0x8
#define _CLC4SEL1_D2S_LENGTH                                0x8
#define _CLC4SEL1_D2S_MASK                                  0xFF
#define _CLC4SEL1_D2S0_POSN                                 0x0
#define _CLC4SEL1_D2S0_POSITION                             0x0
#define _CLC4SEL1_D2S0_SIZE                                 0x1
#define _CLC4SEL1_D2S0_LENGTH                               0x1
#define _CLC4SEL1_D2S0_MASK                                 0x1
#define _CLC4SEL1_D2S1_POSN                                 0x1
#define _CLC4SEL1_D2S1_POSITION                             0x1
#define _CLC4SEL1_D2S1_SIZE                                 0x1
#define _CLC4SEL1_D2S1_LENGTH                               0x1
#define _CLC4SEL1_D2S1_MASK                                 0x2
#define _CLC4SEL1_D2S2_POSN                                 0x2
#define _CLC4SEL1_D2S2_POSITION                             0x2
#define _CLC4SEL1_D2S2_SIZE                                 0x1
#define _CLC4SEL1_D2S2_LENGTH                               0x1
#define _CLC4SEL1_D2S2_MASK                                 0x4
#define _CLC4SEL1_D2S3_POSN                                 0x3
#define _CLC4SEL1_D2S3_POSITION                             0x3
#define _CLC4SEL1_D2S3_SIZE                                 0x1
#define _CLC4SEL1_D2S3_LENGTH                               0x1
#define _CLC4SEL1_D2S3_MASK                                 0x8
#define _CLC4SEL1_D2S4_POSN                                 0x4
#define _CLC4SEL1_D2S4_POSITION                             0x4
#define _CLC4SEL1_D2S4_SIZE                                 0x1
#define _CLC4SEL1_D2S4_LENGTH                               0x1
#define _CLC4SEL1_D2S4_MASK                                 0x10
#define _CLC4SEL1_D2S5_POSN                                 0x5
#define _CLC4SEL1_D2S5_POSITION                             0x5
#define _CLC4SEL1_D2S5_SIZE                                 0x1
#define _CLC4SEL1_D2S5_LENGTH                               0x1
#define _CLC4SEL1_D2S5_MASK                                 0x20
#define _CLC4SEL1_D2S6_POSN                                 0x6
#define _CLC4SEL1_D2S6_POSITION                             0x6
#define _CLC4SEL1_D2S6_SIZE                                 0x1
#define _CLC4SEL1_D2S6_LENGTH                               0x1
#define _CLC4SEL1_D2S6_MASK                                 0x40
#define _CLC4SEL1_D2S7_POSN                                 0x7
#define _CLC4SEL1_D2S7_POSITION                             0x7
#define _CLC4SEL1_D2S7_SIZE                                 0x1
#define _CLC4SEL1_D2S7_LENGTH                               0x1
#define _CLC4SEL1_D2S7_MASK                                 0x80

// Register: CLC4SEL2
#define CLC4SEL2 CLC4SEL2
extern volatile unsigned char           CLC4SEL2            __at(0x1E32);
#ifndef _LIB_BUILD
asm("CLC4SEL2 equ 01E32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D3S0                :1;
        unsigned LC4D3S1                :1;
        unsigned LC4D3S2                :1;
        unsigned LC4D3S3                :1;
        unsigned LC4D3S4                :1;
        unsigned LC4D3S5                :1;
        unsigned LC4D3S6                :1;
        unsigned LC4D3S7                :1;
    };
    struct {
        unsigned LC4D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
} CLC4SEL2bits_t;
extern volatile CLC4SEL2bits_t CLC4SEL2bits __at(0x1E32);
// bitfield macros
#define _CLC4SEL2_LC4D3S0_POSN                              0x0
#define _CLC4SEL2_LC4D3S0_POSITION                          0x0
#define _CLC4SEL2_LC4D3S0_SIZE                              0x1
#define _CLC4SEL2_LC4D3S0_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S0_MASK                              0x1
#define _CLC4SEL2_LC4D3S1_POSN                              0x1
#define _CLC4SEL2_LC4D3S1_POSITION                          0x1
#define _CLC4SEL2_LC4D3S1_SIZE                              0x1
#define _CLC4SEL2_LC4D3S1_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S1_MASK                              0x2
#define _CLC4SEL2_LC4D3S2_POSN                              0x2
#define _CLC4SEL2_LC4D3S2_POSITION                          0x2
#define _CLC4SEL2_LC4D3S2_SIZE                              0x1
#define _CLC4SEL2_LC4D3S2_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S2_MASK                              0x4
#define _CLC4SEL2_LC4D3S3_POSN                              0x3
#define _CLC4SEL2_LC4D3S3_POSITION                          0x3
#define _CLC4SEL2_LC4D3S3_SIZE                              0x1
#define _CLC4SEL2_LC4D3S3_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S3_MASK                              0x8
#define _CLC4SEL2_LC4D3S4_POSN                              0x4
#define _CLC4SEL2_LC4D3S4_POSITION                          0x4
#define _CLC4SEL2_LC4D3S4_SIZE                              0x1
#define _CLC4SEL2_LC4D3S4_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S4_MASK                              0x10
#define _CLC4SEL2_LC4D3S5_POSN                              0x5
#define _CLC4SEL2_LC4D3S5_POSITION                          0x5
#define _CLC4SEL2_LC4D3S5_SIZE                              0x1
#define _CLC4SEL2_LC4D3S5_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S5_MASK                              0x20
#define _CLC4SEL2_LC4D3S6_POSN                              0x6
#define _CLC4SEL2_LC4D3S6_POSITION                          0x6
#define _CLC4SEL2_LC4D3S6_SIZE                              0x1
#define _CLC4SEL2_LC4D3S6_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S6_MASK                              0x40
#define _CLC4SEL2_LC4D3S7_POSN                              0x7
#define _CLC4SEL2_LC4D3S7_POSITION                          0x7
#define _CLC4SEL2_LC4D3S7_SIZE                              0x1
#define _CLC4SEL2_LC4D3S7_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S7_MASK                              0x80
#define _CLC4SEL2_LC4D3S_POSN                               0x0
#define _CLC4SEL2_LC4D3S_POSITION                           0x0
#define _CLC4SEL2_LC4D3S_SIZE                               0x8
#define _CLC4SEL2_LC4D3S_LENGTH                             0x8
#define _CLC4SEL2_LC4D3S_MASK                               0xFF
#define _CLC4SEL2_D3S_POSN                                  0x0
#define _CLC4SEL2_D3S_POSITION                              0x0
#define _CLC4SEL2_D3S_SIZE                                  0x8
#define _CLC4SEL2_D3S_LENGTH                                0x8
#define _CLC4SEL2_D3S_MASK                                  0xFF
#define _CLC4SEL2_D3S0_POSN                                 0x0
#define _CLC4SEL2_D3S0_POSITION                             0x0
#define _CLC4SEL2_D3S0_SIZE                                 0x1
#define _CLC4SEL2_D3S0_LENGTH                               0x1
#define _CLC4SEL2_D3S0_MASK                                 0x1
#define _CLC4SEL2_D3S1_POSN                                 0x1
#define _CLC4SEL2_D3S1_POSITION                             0x1
#define _CLC4SEL2_D3S1_SIZE                                 0x1
#define _CLC4SEL2_D3S1_LENGTH                               0x1
#define _CLC4SEL2_D3S1_MASK                                 0x2
#define _CLC4SEL2_D3S2_POSN                                 0x2
#define _CLC4SEL2_D3S2_POSITION                             0x2
#define _CLC4SEL2_D3S2_SIZE                                 0x1
#define _CLC4SEL2_D3S2_LENGTH                               0x1
#define _CLC4SEL2_D3S2_MASK                                 0x4
#define _CLC4SEL2_D3S3_POSN                                 0x3
#define _CLC4SEL2_D3S3_POSITION                             0x3
#define _CLC4SEL2_D3S3_SIZE                                 0x1
#define _CLC4SEL2_D3S3_LENGTH                               0x1
#define _CLC4SEL2_D3S3_MASK                                 0x8
#define _CLC4SEL2_D3S4_POSN                                 0x4
#define _CLC4SEL2_D3S4_POSITION                             0x4
#define _CLC4SEL2_D3S4_SIZE                                 0x1
#define _CLC4SEL2_D3S4_LENGTH                               0x1
#define _CLC4SEL2_D3S4_MASK                                 0x10
#define _CLC4SEL2_D3S5_POSN                                 0x5
#define _CLC4SEL2_D3S5_POSITION                             0x5
#define _CLC4SEL2_D3S5_SIZE                                 0x1
#define _CLC4SEL2_D3S5_LENGTH                               0x1
#define _CLC4SEL2_D3S5_MASK                                 0x20
#define _CLC4SEL2_D3S6_POSN                                 0x6
#define _CLC4SEL2_D3S6_POSITION                             0x6
#define _CLC4SEL2_D3S6_SIZE                                 0x1
#define _CLC4SEL2_D3S6_LENGTH                               0x1
#define _CLC4SEL2_D3S6_MASK                                 0x40
#define _CLC4SEL2_D3S7_POSN                                 0x7
#define _CLC4SEL2_D3S7_POSITION                             0x7
#define _CLC4SEL2_D3S7_SIZE                                 0x1
#define _CLC4SEL2_D3S7_LENGTH                               0x1
#define _CLC4SEL2_D3S7_MASK                                 0x80

// Register: CLC4SEL3
#define CLC4SEL3 CLC4SEL3
extern volatile unsigned char           CLC4SEL3            __at(0x1E33);
#ifndef _LIB_BUILD
asm("CLC4SEL3 equ 01E33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D4S0                :1;
        unsigned LC4D4S1                :1;
        unsigned LC4D4S2                :1;
        unsigned LC4D4S3                :1;
        unsigned LC4D4S4                :1;
        unsigned LC4D4S5                :1;
        unsigned LC4D4S6                :1;
        unsigned LC4D4S7                :1;
    };
    struct {
        unsigned LC4D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
} CLC4SEL3bits_t;
extern volatile CLC4SEL3bits_t CLC4SEL3bits __at(0x1E33);
// bitfield macros
#define _CLC4SEL3_LC4D4S0_POSN                              0x0
#define _CLC4SEL3_LC4D4S0_POSITION                          0x0
#define _CLC4SEL3_LC4D4S0_SIZE                              0x1
#define _CLC4SEL3_LC4D4S0_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S0_MASK                              0x1
#define _CLC4SEL3_LC4D4S1_POSN                              0x1
#define _CLC4SEL3_LC4D4S1_POSITION                          0x1
#define _CLC4SEL3_LC4D4S1_SIZE                              0x1
#define _CLC4SEL3_LC4D4S1_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S1_MASK                              0x2
#define _CLC4SEL3_LC4D4S2_POSN                              0x2
#define _CLC4SEL3_LC4D4S2_POSITION                          0x2
#define _CLC4SEL3_LC4D4S2_SIZE                              0x1
#define _CLC4SEL3_LC4D4S2_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S2_MASK                              0x4
#define _CLC4SEL3_LC4D4S3_POSN                              0x3
#define _CLC4SEL3_LC4D4S3_POSITION                          0x3
#define _CLC4SEL3_LC4D4S3_SIZE                              0x1
#define _CLC4SEL3_LC4D4S3_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S3_MASK                              0x8
#define _CLC4SEL3_LC4D4S4_POSN                              0x4
#define _CLC4SEL3_LC4D4S4_POSITION                          0x4
#define _CLC4SEL3_LC4D4S4_SIZE                              0x1
#define _CLC4SEL3_LC4D4S4_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S4_MASK                              0x10
#define _CLC4SEL3_LC4D4S5_POSN                              0x5
#define _CLC4SEL3_LC4D4S5_POSITION                          0x5
#define _CLC4SEL3_LC4D4S5_SIZE                              0x1
#define _CLC4SEL3_LC4D4S5_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S5_MASK                              0x20
#define _CLC4SEL3_LC4D4S6_POSN                              0x6
#define _CLC4SEL3_LC4D4S6_POSITION                          0x6
#define _CLC4SEL3_LC4D4S6_SIZE                              0x1
#define _CLC4SEL3_LC4D4S6_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S6_MASK                              0x40
#define _CLC4SEL3_LC4D4S7_POSN                              0x7
#define _CLC4SEL3_LC4D4S7_POSITION                          0x7
#define _CLC4SEL3_LC4D4S7_SIZE                              0x1
#define _CLC4SEL3_LC4D4S7_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S7_MASK                              0x80
#define _CLC4SEL3_LC4D4S_POSN                               0x0
#define _CLC4SEL3_LC4D4S_POSITION                           0x0
#define _CLC4SEL3_LC4D4S_SIZE                               0x8
#define _CLC4SEL3_LC4D4S_LENGTH                             0x8
#define _CLC4SEL3_LC4D4S_MASK                               0xFF
#define _CLC4SEL3_D4S_POSN                                  0x0
#define _CLC4SEL3_D4S_POSITION                              0x0
#define _CLC4SEL3_D4S_SIZE                                  0x8
#define _CLC4SEL3_D4S_LENGTH                                0x8
#define _CLC4SEL3_D4S_MASK                                  0xFF
#define _CLC4SEL3_D4S0_POSN                                 0x0
#define _CLC4SEL3_D4S0_POSITION                             0x0
#define _CLC4SEL3_D4S0_SIZE                                 0x1
#define _CLC4SEL3_D4S0_LENGTH                               0x1
#define _CLC4SEL3_D4S0_MASK                                 0x1
#define _CLC4SEL3_D4S1_POSN                                 0x1
#define _CLC4SEL3_D4S1_POSITION                             0x1
#define _CLC4SEL3_D4S1_SIZE                                 0x1
#define _CLC4SEL3_D4S1_LENGTH                               0x1
#define _CLC4SEL3_D4S1_MASK                                 0x2
#define _CLC4SEL3_D4S2_POSN                                 0x2
#define _CLC4SEL3_D4S2_POSITION                             0x2
#define _CLC4SEL3_D4S2_SIZE                                 0x1
#define _CLC4SEL3_D4S2_LENGTH                               0x1
#define _CLC4SEL3_D4S2_MASK                                 0x4
#define _CLC4SEL3_D4S3_POSN                                 0x3
#define _CLC4SEL3_D4S3_POSITION                             0x3
#define _CLC4SEL3_D4S3_SIZE                                 0x1
#define _CLC4SEL3_D4S3_LENGTH                               0x1
#define _CLC4SEL3_D4S3_MASK                                 0x8
#define _CLC4SEL3_D4S4_POSN                                 0x4
#define _CLC4SEL3_D4S4_POSITION                             0x4
#define _CLC4SEL3_D4S4_SIZE                                 0x1
#define _CLC4SEL3_D4S4_LENGTH                               0x1
#define _CLC4SEL3_D4S4_MASK                                 0x10
#define _CLC4SEL3_D4S5_POSN                                 0x5
#define _CLC4SEL3_D4S5_POSITION                             0x5
#define _CLC4SEL3_D4S5_SIZE                                 0x1
#define _CLC4SEL3_D4S5_LENGTH                               0x1
#define _CLC4SEL3_D4S5_MASK                                 0x20
#define _CLC4SEL3_D4S6_POSN                                 0x6
#define _CLC4SEL3_D4S6_POSITION                             0x6
#define _CLC4SEL3_D4S6_SIZE                                 0x1
#define _CLC4SEL3_D4S6_LENGTH                               0x1
#define _CLC4SEL3_D4S6_MASK                                 0x40
#define _CLC4SEL3_D4S7_POSN                                 0x7
#define _CLC4SEL3_D4S7_POSITION                             0x7
#define _CLC4SEL3_D4S7_SIZE                                 0x1
#define _CLC4SEL3_D4S7_LENGTH                               0x1
#define _CLC4SEL3_D4S7_MASK                                 0x80

// Register: CLC4GLS0
#define CLC4GLS0 CLC4GLS0
extern volatile unsigned char           CLC4GLS0            __at(0x1E34);
#ifndef _LIB_BUILD
asm("CLC4GLS0 equ 01E34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1D1N               :1;
        unsigned LC4G1D1T               :1;
        unsigned LC4G1D2N               :1;
        unsigned LC4G1D2T               :1;
        unsigned LC4G1D3N               :1;
        unsigned LC4G1D3T               :1;
        unsigned LC4G1D4N               :1;
        unsigned LC4G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS0bits_t;
extern volatile CLC4GLS0bits_t CLC4GLS0bits __at(0x1E34);
// bitfield macros
#define _CLC4GLS0_LC4G1D1N_POSN                             0x0
#define _CLC4GLS0_LC4G1D1N_POSITION                         0x0
#define _CLC4GLS0_LC4G1D1N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1N_MASK                             0x1
#define _CLC4GLS0_LC4G1D1T_POSN                             0x1
#define _CLC4GLS0_LC4G1D1T_POSITION                         0x1
#define _CLC4GLS0_LC4G1D1T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1T_MASK                             0x2
#define _CLC4GLS0_LC4G1D2N_POSN                             0x2
#define _CLC4GLS0_LC4G1D2N_POSITION                         0x2
#define _CLC4GLS0_LC4G1D2N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2N_MASK                             0x4
#define _CLC4GLS0_LC4G1D2T_POSN                             0x3
#define _CLC4GLS0_LC4G1D2T_POSITION                         0x3
#define _CLC4GLS0_LC4G1D2T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2T_MASK                             0x8
#define _CLC4GLS0_LC4G1D3N_POSN                             0x4
#define _CLC4GLS0_LC4G1D3N_POSITION                         0x4
#define _CLC4GLS0_LC4G1D3N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3N_MASK                             0x10
#define _CLC4GLS0_LC4G1D3T_POSN                             0x5
#define _CLC4GLS0_LC4G1D3T_POSITION                         0x5
#define _CLC4GLS0_LC4G1D3T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3T_MASK                             0x20
#define _CLC4GLS0_LC4G1D4N_POSN                             0x6
#define _CLC4GLS0_LC4G1D4N_POSITION                         0x6
#define _CLC4GLS0_LC4G1D4N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4N_MASK                             0x40
#define _CLC4GLS0_LC4G1D4T_POSN                             0x7
#define _CLC4GLS0_LC4G1D4T_POSITION                         0x7
#define _CLC4GLS0_LC4G1D4T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4T_MASK                             0x80
#define _CLC4GLS0_D1N_POSN                                  0x0
#define _CLC4GLS0_D1N_POSITION                              0x0
#define _CLC4GLS0_D1N_SIZE                                  0x1
#define _CLC4GLS0_D1N_LENGTH                                0x1
#define _CLC4GLS0_D1N_MASK                                  0x1
#define _CLC4GLS0_D1T_POSN                                  0x1
#define _CLC4GLS0_D1T_POSITION                              0x1
#define _CLC4GLS0_D1T_SIZE                                  0x1
#define _CLC4GLS0_D1T_LENGTH                                0x1
#define _CLC4GLS0_D1T_MASK                                  0x2
#define _CLC4GLS0_D2N_POSN                                  0x2
#define _CLC4GLS0_D2N_POSITION                              0x2
#define _CLC4GLS0_D2N_SIZE                                  0x1
#define _CLC4GLS0_D2N_LENGTH                                0x1
#define _CLC4GLS0_D2N_MASK                                  0x4
#define _CLC4GLS0_D2T_POSN                                  0x3
#define _CLC4GLS0_D2T_POSITION                              0x3
#define _CLC4GLS0_D2T_SIZE                                  0x1
#define _CLC4GLS0_D2T_LENGTH                                0x1
#define _CLC4GLS0_D2T_MASK                                  0x8
#define _CLC4GLS0_D3N_POSN                                  0x4
#define _CLC4GLS0_D3N_POSITION                              0x4
#define _CLC4GLS0_D3N_SIZE                                  0x1
#define _CLC4GLS0_D3N_LENGTH                                0x1
#define _CLC4GLS0_D3N_MASK                                  0x10
#define _CLC4GLS0_D3T_POSN                                  0x5
#define _CLC4GLS0_D3T_POSITION                              0x5
#define _CLC4GLS0_D3T_SIZE                                  0x1
#define _CLC4GLS0_D3T_LENGTH                                0x1
#define _CLC4GLS0_D3T_MASK                                  0x20
#define _CLC4GLS0_D4N_POSN                                  0x6
#define _CLC4GLS0_D4N_POSITION                              0x6
#define _CLC4GLS0_D4N_SIZE                                  0x1
#define _CLC4GLS0_D4N_LENGTH                                0x1
#define _CLC4GLS0_D4N_MASK                                  0x40
#define _CLC4GLS0_D4T_POSN                                  0x7
#define _CLC4GLS0_D4T_POSITION                              0x7
#define _CLC4GLS0_D4T_SIZE                                  0x1
#define _CLC4GLS0_D4T_LENGTH                                0x1
#define _CLC4GLS0_D4T_MASK                                  0x80

// Register: CLC4GLS1
#define CLC4GLS1 CLC4GLS1
extern volatile unsigned char           CLC4GLS1            __at(0x1E35);
#ifndef _LIB_BUILD
asm("CLC4GLS1 equ 01E35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G2D1N               :1;
        unsigned LC4G2D1T               :1;
        unsigned LC4G2D2N               :1;
        unsigned LC4G2D2T               :1;
        unsigned LC4G2D3N               :1;
        unsigned LC4G2D3T               :1;
        unsigned LC4G2D4N               :1;
        unsigned LC4G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS1bits_t;
extern volatile CLC4GLS1bits_t CLC4GLS1bits __at(0x1E35);
// bitfield macros
#define _CLC4GLS1_LC4G2D1N_POSN                             0x0
#define _CLC4GLS1_LC4G2D1N_POSITION                         0x0
#define _CLC4GLS1_LC4G2D1N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1N_MASK                             0x1
#define _CLC4GLS1_LC4G2D1T_POSN                             0x1
#define _CLC4GLS1_LC4G2D1T_POSITION                         0x1
#define _CLC4GLS1_LC4G2D1T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1T_MASK                             0x2
#define _CLC4GLS1_LC4G2D2N_POSN                             0x2
#define _CLC4GLS1_LC4G2D2N_POSITION                         0x2
#define _CLC4GLS1_LC4G2D2N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2N_MASK                             0x4
#define _CLC4GLS1_LC4G2D2T_POSN                             0x3
#define _CLC4GLS1_LC4G2D2T_POSITION                         0x3
#define _CLC4GLS1_LC4G2D2T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2T_MASK                             0x8
#define _CLC4GLS1_LC4G2D3N_POSN                             0x4
#define _CLC4GLS1_LC4G2D3N_POSITION                         0x4
#define _CLC4GLS1_LC4G2D3N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3N_MASK                             0x10
#define _CLC4GLS1_LC4G2D3T_POSN                             0x5
#define _CLC4GLS1_LC4G2D3T_POSITION                         0x5
#define _CLC4GLS1_LC4G2D3T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3T_MASK                             0x20
#define _CLC4GLS1_LC4G2D4N_POSN                             0x6
#define _CLC4GLS1_LC4G2D4N_POSITION                         0x6
#define _CLC4GLS1_LC4G2D4N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4N_MASK                             0x40
#define _CLC4GLS1_LC4G2D4T_POSN                             0x7
#define _CLC4GLS1_LC4G2D4T_POSITION                         0x7
#define _CLC4GLS1_LC4G2D4T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4T_MASK                             0x80
#define _CLC4GLS1_D1N_POSN                                  0x0
#define _CLC4GLS1_D1N_POSITION                              0x0
#define _CLC4GLS1_D1N_SIZE                                  0x1
#define _CLC4GLS1_D1N_LENGTH                                0x1
#define _CLC4GLS1_D1N_MASK                                  0x1
#define _CLC4GLS1_D1T_POSN                                  0x1
#define _CLC4GLS1_D1T_POSITION                              0x1
#define _CLC4GLS1_D1T_SIZE                                  0x1
#define _CLC4GLS1_D1T_LENGTH                                0x1
#define _CLC4GLS1_D1T_MASK                                  0x2
#define _CLC4GLS1_D2N_POSN                                  0x2
#define _CLC4GLS1_D2N_POSITION                              0x2
#define _CLC4GLS1_D2N_SIZE                                  0x1
#define _CLC4GLS1_D2N_LENGTH                                0x1
#define _CLC4GLS1_D2N_MASK                                  0x4
#define _CLC4GLS1_D2T_POSN                                  0x3
#define _CLC4GLS1_D2T_POSITION                              0x3
#define _CLC4GLS1_D2T_SIZE                                  0x1
#define _CLC4GLS1_D2T_LENGTH                                0x1
#define _CLC4GLS1_D2T_MASK                                  0x8
#define _CLC4GLS1_D3N_POSN                                  0x4
#define _CLC4GLS1_D3N_POSITION                              0x4
#define _CLC4GLS1_D3N_SIZE                                  0x1
#define _CLC4GLS1_D3N_LENGTH                                0x1
#define _CLC4GLS1_D3N_MASK                                  0x10
#define _CLC4GLS1_D3T_POSN                                  0x5
#define _CLC4GLS1_D3T_POSITION                              0x5
#define _CLC4GLS1_D3T_SIZE                                  0x1
#define _CLC4GLS1_D3T_LENGTH                                0x1
#define _CLC4GLS1_D3T_MASK                                  0x20
#define _CLC4GLS1_D4N_POSN                                  0x6
#define _CLC4GLS1_D4N_POSITION                              0x6
#define _CLC4GLS1_D4N_SIZE                                  0x1
#define _CLC4GLS1_D4N_LENGTH                                0x1
#define _CLC4GLS1_D4N_MASK                                  0x40
#define _CLC4GLS1_D4T_POSN                                  0x7
#define _CLC4GLS1_D4T_POSITION                              0x7
#define _CLC4GLS1_D4T_SIZE                                  0x1
#define _CLC4GLS1_D4T_LENGTH                                0x1
#define _CLC4GLS1_D4T_MASK                                  0x80

// Register: CLC4GLS2
#define CLC4GLS2 CLC4GLS2
extern volatile unsigned char           CLC4GLS2            __at(0x1E36);
#ifndef _LIB_BUILD
asm("CLC4GLS2 equ 01E36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G3D1N               :1;
        unsigned LC4G3D1T               :1;
        unsigned LC4G3D2N               :1;
        unsigned LC4G3D2T               :1;
        unsigned LC4G3D3N               :1;
        unsigned LC4G3D3T               :1;
        unsigned LC4G3D4N               :1;
        unsigned LC4G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS2bits_t;
extern volatile CLC4GLS2bits_t CLC4GLS2bits __at(0x1E36);
// bitfield macros
#define _CLC4GLS2_LC4G3D1N_POSN                             0x0
#define _CLC4GLS2_LC4G3D1N_POSITION                         0x0
#define _CLC4GLS2_LC4G3D1N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1N_MASK                             0x1
#define _CLC4GLS2_LC4G3D1T_POSN                             0x1
#define _CLC4GLS2_LC4G3D1T_POSITION                         0x1
#define _CLC4GLS2_LC4G3D1T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1T_MASK                             0x2
#define _CLC4GLS2_LC4G3D2N_POSN                             0x2
#define _CLC4GLS2_LC4G3D2N_POSITION                         0x2
#define _CLC4GLS2_LC4G3D2N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2N_MASK                             0x4
#define _CLC4GLS2_LC4G3D2T_POSN                             0x3
#define _CLC4GLS2_LC4G3D2T_POSITION                         0x3
#define _CLC4GLS2_LC4G3D2T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2T_MASK                             0x8
#define _CLC4GLS2_LC4G3D3N_POSN                             0x4
#define _CLC4GLS2_LC4G3D3N_POSITION                         0x4
#define _CLC4GLS2_LC4G3D3N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3N_MASK                             0x10
#define _CLC4GLS2_LC4G3D3T_POSN                             0x5
#define _CLC4GLS2_LC4G3D3T_POSITION                         0x5
#define _CLC4GLS2_LC4G3D3T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3T_MASK                             0x20
#define _CLC4GLS2_LC4G3D4N_POSN                             0x6
#define _CLC4GLS2_LC4G3D4N_POSITION                         0x6
#define _CLC4GLS2_LC4G3D4N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4N_MASK                             0x40
#define _CLC4GLS2_LC4G3D4T_POSN                             0x7
#define _CLC4GLS2_LC4G3D4T_POSITION                         0x7
#define _CLC4GLS2_LC4G3D4T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4T_MASK                             0x80
#define _CLC4GLS2_D1N_POSN                                  0x0
#define _CLC4GLS2_D1N_POSITION                              0x0
#define _CLC4GLS2_D1N_SIZE                                  0x1
#define _CLC4GLS2_D1N_LENGTH                                0x1
#define _CLC4GLS2_D1N_MASK                                  0x1
#define _CLC4GLS2_D1T_POSN                                  0x1
#define _CLC4GLS2_D1T_POSITION                              0x1
#define _CLC4GLS2_D1T_SIZE                                  0x1
#define _CLC4GLS2_D1T_LENGTH                                0x1
#define _CLC4GLS2_D1T_MASK                                  0x2
#define _CLC4GLS2_D2N_POSN                                  0x2
#define _CLC4GLS2_D2N_POSITION                              0x2
#define _CLC4GLS2_D2N_SIZE                                  0x1
#define _CLC4GLS2_D2N_LENGTH                                0x1
#define _CLC4GLS2_D2N_MASK                                  0x4
#define _CLC4GLS2_D2T_POSN                                  0x3
#define _CLC4GLS2_D2T_POSITION                              0x3
#define _CLC4GLS2_D2T_SIZE                                  0x1
#define _CLC4GLS2_D2T_LENGTH                                0x1
#define _CLC4GLS2_D2T_MASK                                  0x8
#define _CLC4GLS2_D3N_POSN                                  0x4
#define _CLC4GLS2_D3N_POSITION                              0x4
#define _CLC4GLS2_D3N_SIZE                                  0x1
#define _CLC4GLS2_D3N_LENGTH                                0x1
#define _CLC4GLS2_D3N_MASK                                  0x10
#define _CLC4GLS2_D3T_POSN                                  0x5
#define _CLC4GLS2_D3T_POSITION                              0x5
#define _CLC4GLS2_D3T_SIZE                                  0x1
#define _CLC4GLS2_D3T_LENGTH                                0x1
#define _CLC4GLS2_D3T_MASK                                  0x20
#define _CLC4GLS2_D4N_POSN                                  0x6
#define _CLC4GLS2_D4N_POSITION                              0x6
#define _CLC4GLS2_D4N_SIZE                                  0x1
#define _CLC4GLS2_D4N_LENGTH                                0x1
#define _CLC4GLS2_D4N_MASK                                  0x40
#define _CLC4GLS2_D4T_POSN                                  0x7
#define _CLC4GLS2_D4T_POSITION                              0x7
#define _CLC4GLS2_D4T_SIZE                                  0x1
#define _CLC4GLS2_D4T_LENGTH                                0x1
#define _CLC4GLS2_D4T_MASK                                  0x80

// Register: CLC4GLS3
#define CLC4GLS3 CLC4GLS3
extern volatile unsigned char           CLC4GLS3            __at(0x1E37);
#ifndef _LIB_BUILD
asm("CLC4GLS3 equ 01E37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G4D1N               :1;
        unsigned LC4G4D1T               :1;
        unsigned LC4G4D2N               :1;
        unsigned LC4G4D2T               :1;
        unsigned LC4G4D3N               :1;
        unsigned LC4G4D3T               :1;
        unsigned LC4G4D4N               :1;
        unsigned LC4G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC4GLS3bits_t;
extern volatile CLC4GLS3bits_t CLC4GLS3bits __at(0x1E37);
// bitfield macros
#define _CLC4GLS3_LC4G4D1N_POSN                             0x0
#define _CLC4GLS3_LC4G4D1N_POSITION                         0x0
#define _CLC4GLS3_LC4G4D1N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1N_MASK                             0x1
#define _CLC4GLS3_LC4G4D1T_POSN                             0x1
#define _CLC4GLS3_LC4G4D1T_POSITION                         0x1
#define _CLC4GLS3_LC4G4D1T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1T_MASK                             0x2
#define _CLC4GLS3_LC4G4D2N_POSN                             0x2
#define _CLC4GLS3_LC4G4D2N_POSITION                         0x2
#define _CLC4GLS3_LC4G4D2N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2N_MASK                             0x4
#define _CLC4GLS3_LC4G4D2T_POSN                             0x3
#define _CLC4GLS3_LC4G4D2T_POSITION                         0x3
#define _CLC4GLS3_LC4G4D2T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2T_MASK                             0x8
#define _CLC4GLS3_LC4G4D3N_POSN                             0x4
#define _CLC4GLS3_LC4G4D3N_POSITION                         0x4
#define _CLC4GLS3_LC4G4D3N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3N_MASK                             0x10
#define _CLC4GLS3_LC4G4D3T_POSN                             0x5
#define _CLC4GLS3_LC4G4D3T_POSITION                         0x5
#define _CLC4GLS3_LC4G4D3T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3T_MASK                             0x20
#define _CLC4GLS3_LC4G4D4N_POSN                             0x6
#define _CLC4GLS3_LC4G4D4N_POSITION                         0x6
#define _CLC4GLS3_LC4G4D4N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4N_MASK                             0x40
#define _CLC4GLS3_LC4G4D4T_POSN                             0x7
#define _CLC4GLS3_LC4G4D4T_POSITION                         0x7
#define _CLC4GLS3_LC4G4D4T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4T_MASK                             0x80
#define _CLC4GLS3_G4D1N_POSN                                0x0
#define _CLC4GLS3_G4D1N_POSITION                            0x0
#define _CLC4GLS3_G4D1N_SIZE                                0x1
#define _CLC4GLS3_G4D1N_LENGTH                              0x1
#define _CLC4GLS3_G4D1N_MASK                                0x1
#define _CLC4GLS3_G4D1T_POSN                                0x1
#define _CLC4GLS3_G4D1T_POSITION                            0x1
#define _CLC4GLS3_G4D1T_SIZE                                0x1
#define _CLC4GLS3_G4D1T_LENGTH                              0x1
#define _CLC4GLS3_G4D1T_MASK                                0x2
#define _CLC4GLS3_G4D2N_POSN                                0x2
#define _CLC4GLS3_G4D2N_POSITION                            0x2
#define _CLC4GLS3_G4D2N_SIZE                                0x1
#define _CLC4GLS3_G4D2N_LENGTH                              0x1
#define _CLC4GLS3_G4D2N_MASK                                0x4
#define _CLC4GLS3_G4D2T_POSN                                0x3
#define _CLC4GLS3_G4D2T_POSITION                            0x3
#define _CLC4GLS3_G4D2T_SIZE                                0x1
#define _CLC4GLS3_G4D2T_LENGTH                              0x1
#define _CLC4GLS3_G4D2T_MASK                                0x8
#define _CLC4GLS3_G4D3N_POSN                                0x4
#define _CLC4GLS3_G4D3N_POSITION                            0x4
#define _CLC4GLS3_G4D3N_SIZE                                0x1
#define _CLC4GLS3_G4D3N_LENGTH                              0x1
#define _CLC4GLS3_G4D3N_MASK                                0x10
#define _CLC4GLS3_G4D3T_POSN                                0x5
#define _CLC4GLS3_G4D3T_POSITION                            0x5
#define _CLC4GLS3_G4D3T_SIZE                                0x1
#define _CLC4GLS3_G4D3T_LENGTH                              0x1
#define _CLC4GLS3_G4D3T_MASK                                0x20
#define _CLC4GLS3_G4D4N_POSN                                0x6
#define _CLC4GLS3_G4D4N_POSITION                            0x6
#define _CLC4GLS3_G4D4N_SIZE                                0x1
#define _CLC4GLS3_G4D4N_LENGTH                              0x1
#define _CLC4GLS3_G4D4N_MASK                                0x40
#define _CLC4GLS3_G4D4T_POSN                                0x7
#define _CLC4GLS3_G4D4T_POSITION                            0x7
#define _CLC4GLS3_G4D4T_SIZE                                0x1
#define _CLC4GLS3_G4D4T_LENGTH                              0x1
#define _CLC4GLS3_G4D4T_MASK                                0x80

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x1E8F);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 01E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x1E8F);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0x1E90);
#ifndef _LIB_BUILD
asm("INTPPS equ 01E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS                 :4;
    };
    struct {
        unsigned INTPPS0                :1;
        unsigned INTPPS1                :1;
        unsigned INTPPS2                :1;
        unsigned INTPPS3                :1;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0x1E90);
// bitfield macros
#define _INTPPS_INTPPS_POSN                                 0x0
#define _INTPPS_INTPPS_POSITION                             0x0
#define _INTPPS_INTPPS_SIZE                                 0x4
#define _INTPPS_INTPPS_LENGTH                               0x4
#define _INTPPS_INTPPS_MASK                                 0xF
#define _INTPPS_INTPPS0_POSN                                0x0
#define _INTPPS_INTPPS0_POSITION                            0x0
#define _INTPPS_INTPPS0_SIZE                                0x1
#define _INTPPS_INTPPS0_LENGTH                              0x1
#define _INTPPS_INTPPS0_MASK                                0x1
#define _INTPPS_INTPPS1_POSN                                0x1
#define _INTPPS_INTPPS1_POSITION                            0x1
#define _INTPPS_INTPPS1_SIZE                                0x1
#define _INTPPS_INTPPS1_LENGTH                              0x1
#define _INTPPS_INTPPS1_MASK                                0x2
#define _INTPPS_INTPPS2_POSN                                0x2
#define _INTPPS_INTPPS2_POSITION                            0x2
#define _INTPPS_INTPPS2_SIZE                                0x1
#define _INTPPS_INTPPS2_LENGTH                              0x1
#define _INTPPS_INTPPS2_MASK                                0x4
#define _INTPPS_INTPPS3_POSN                                0x3
#define _INTPPS_INTPPS3_POSITION                            0x3
#define _INTPPS_INTPPS3_SIZE                                0x1
#define _INTPPS_INTPPS3_LENGTH                              0x1
#define _INTPPS_INTPPS3_MASK                                0x8

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x1E91);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 01E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :4;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x1E91);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x4
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x4
#define _T0CKIPPS_T0CKIPPS_MASK                             0xF
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x1E92);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 01E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :5;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x1E92);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x1E93);
#ifndef _LIB_BUILD
asm("T1GPPS equ 01E93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :5;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x1E93);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0x1E94);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 01E94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3CKIPPS               :5;
    };
    struct {
        unsigned T3CKIPPS0              :1;
        unsigned T3CKIPPS1              :1;
        unsigned T3CKIPPS2              :1;
        unsigned T3CKIPPS3              :1;
        unsigned T3CKIPPS4              :1;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0x1E94);
// bitfield macros
#define _T3CKIPPS_T3CKIPPS_POSN                             0x0
#define _T3CKIPPS_T3CKIPPS_POSITION                         0x0
#define _T3CKIPPS_T3CKIPPS_SIZE                             0x5
#define _T3CKIPPS_T3CKIPPS_LENGTH                           0x5
#define _T3CKIPPS_T3CKIPPS_MASK                             0x1F
#define _T3CKIPPS_T3CKIPPS0_POSN                            0x0
#define _T3CKIPPS_T3CKIPPS0_POSITION                        0x0
#define _T3CKIPPS_T3CKIPPS0_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS0_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS0_MASK                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSN                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSITION                        0x1
#define _T3CKIPPS_T3CKIPPS1_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS1_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS1_MASK                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSN                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSITION                        0x2
#define _T3CKIPPS_T3CKIPPS2_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS2_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS2_MASK                            0x4
#define _T3CKIPPS_T3CKIPPS3_POSN                            0x3
#define _T3CKIPPS_T3CKIPPS3_POSITION                        0x3
#define _T3CKIPPS_T3CKIPPS3_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS3_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS3_MASK                            0x8
#define _T3CKIPPS_T3CKIPPS4_POSN                            0x4
#define _T3CKIPPS_T3CKIPPS4_POSITION                        0x4
#define _T3CKIPPS_T3CKIPPS4_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS4_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS4_MASK                            0x10

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0x1E95);
#ifndef _LIB_BUILD
asm("T3GPPS equ 01E95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GPPS                 :5;
    };
    struct {
        unsigned T3GPPS0                :1;
        unsigned T3GPPS1                :1;
        unsigned T3GPPS2                :1;
        unsigned T3GPPS3                :1;
        unsigned T3GPPS4                :1;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0x1E95);
// bitfield macros
#define _T3GPPS_T3GPPS_POSN                                 0x0
#define _T3GPPS_T3GPPS_POSITION                             0x0
#define _T3GPPS_T3GPPS_SIZE                                 0x5
#define _T3GPPS_T3GPPS_LENGTH                               0x5
#define _T3GPPS_T3GPPS_MASK                                 0x1F
#define _T3GPPS_T3GPPS0_POSN                                0x0
#define _T3GPPS_T3GPPS0_POSITION                            0x0
#define _T3GPPS_T3GPPS0_SIZE                                0x1
#define _T3GPPS_T3GPPS0_LENGTH                              0x1
#define _T3GPPS_T3GPPS0_MASK                                0x1
#define _T3GPPS_T3GPPS1_POSN                                0x1
#define _T3GPPS_T3GPPS1_POSITION                            0x1
#define _T3GPPS_T3GPPS1_SIZE                                0x1
#define _T3GPPS_T3GPPS1_LENGTH                              0x1
#define _T3GPPS_T3GPPS1_MASK                                0x2
#define _T3GPPS_T3GPPS2_POSN                                0x2
#define _T3GPPS_T3GPPS2_POSITION                            0x2
#define _T3GPPS_T3GPPS2_SIZE                                0x1
#define _T3GPPS_T3GPPS2_LENGTH                              0x1
#define _T3GPPS_T3GPPS2_MASK                                0x4
#define _T3GPPS_T3GPPS3_POSN                                0x3
#define _T3GPPS_T3GPPS3_POSITION                            0x3
#define _T3GPPS_T3GPPS3_SIZE                                0x1
#define _T3GPPS_T3GPPS3_LENGTH                              0x1
#define _T3GPPS_T3GPPS3_MASK                                0x8
#define _T3GPPS_T3GPPS4_POSN                                0x4
#define _T3GPPS_T3GPPS4_POSITION                            0x4
#define _T3GPPS_T3GPPS4_SIZE                                0x1
#define _T3GPPS_T3GPPS4_LENGTH                              0x1
#define _T3GPPS_T3GPPS4_MASK                                0x10

// Register: T5CKIPPS
#define T5CKIPPS T5CKIPPS
extern volatile unsigned char           T5CKIPPS            __at(0x1E96);
#ifndef _LIB_BUILD
asm("T5CKIPPS equ 01E96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5CKIPPS               :5;
    };
    struct {
        unsigned T5CKIPPS0              :1;
        unsigned T5CKIPPS1              :1;
        unsigned T5CKIPPS2              :1;
        unsigned T5CKIPPS3              :1;
        unsigned T5CKIPPS4              :1;
    };
} T5CKIPPSbits_t;
extern volatile T5CKIPPSbits_t T5CKIPPSbits __at(0x1E96);
// bitfield macros
#define _T5CKIPPS_T5CKIPPS_POSN                             0x0
#define _T5CKIPPS_T5CKIPPS_POSITION                         0x0
#define _T5CKIPPS_T5CKIPPS_SIZE                             0x5
#define _T5CKIPPS_T5CKIPPS_LENGTH                           0x5
#define _T5CKIPPS_T5CKIPPS_MASK                             0x1F
#define _T5CKIPPS_T5CKIPPS0_POSN                            0x0
#define _T5CKIPPS_T5CKIPPS0_POSITION                        0x0
#define _T5CKIPPS_T5CKIPPS0_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS0_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS0_MASK                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSN                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSITION                        0x1
#define _T5CKIPPS_T5CKIPPS1_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS1_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS1_MASK                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSN                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSITION                        0x2
#define _T5CKIPPS_T5CKIPPS2_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS2_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS2_MASK                            0x4
#define _T5CKIPPS_T5CKIPPS3_POSN                            0x3
#define _T5CKIPPS_T5CKIPPS3_POSITION                        0x3
#define _T5CKIPPS_T5CKIPPS3_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS3_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS3_MASK                            0x8
#define _T5CKIPPS_T5CKIPPS4_POSN                            0x4
#define _T5CKIPPS_T5CKIPPS4_POSITION                        0x4
#define _T5CKIPPS_T5CKIPPS4_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS4_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS4_MASK                            0x10

// Register: T5GPPS
#define T5GPPS T5GPPS
extern volatile unsigned char           T5GPPS              __at(0x1E97);
#ifndef _LIB_BUILD
asm("T5GPPS equ 01E97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5GPPS                 :5;
    };
    struct {
        unsigned T5GPPS0                :1;
        unsigned T5GPPS1                :1;
        unsigned T5GPPS2                :1;
        unsigned T5GPPS3                :1;
        unsigned T5GPPS4                :1;
    };
} T5GPPSbits_t;
extern volatile T5GPPSbits_t T5GPPSbits __at(0x1E97);
// bitfield macros
#define _T5GPPS_T5GPPS_POSN                                 0x0
#define _T5GPPS_T5GPPS_POSITION                             0x0
#define _T5GPPS_T5GPPS_SIZE                                 0x5
#define _T5GPPS_T5GPPS_LENGTH                               0x5
#define _T5GPPS_T5GPPS_MASK                                 0x1F
#define _T5GPPS_T5GPPS0_POSN                                0x0
#define _T5GPPS_T5GPPS0_POSITION                            0x0
#define _T5GPPS_T5GPPS0_SIZE                                0x1
#define _T5GPPS_T5GPPS0_LENGTH                              0x1
#define _T5GPPS_T5GPPS0_MASK                                0x1
#define _T5GPPS_T5GPPS1_POSN                                0x1
#define _T5GPPS_T5GPPS1_POSITION                            0x1
#define _T5GPPS_T5GPPS1_SIZE                                0x1
#define _T5GPPS_T5GPPS1_LENGTH                              0x1
#define _T5GPPS_T5GPPS1_MASK                                0x2
#define _T5GPPS_T5GPPS2_POSN                                0x2
#define _T5GPPS_T5GPPS2_POSITION                            0x2
#define _T5GPPS_T5GPPS2_SIZE                                0x1
#define _T5GPPS_T5GPPS2_LENGTH                              0x1
#define _T5GPPS_T5GPPS2_MASK                                0x4
#define _T5GPPS_T5GPPS3_POSN                                0x3
#define _T5GPPS_T5GPPS3_POSITION                            0x3
#define _T5GPPS_T5GPPS3_SIZE                                0x1
#define _T5GPPS_T5GPPS3_LENGTH                              0x1
#define _T5GPPS_T5GPPS3_MASK                                0x8
#define _T5GPPS_T5GPPS4_POSN                                0x4
#define _T5GPPS_T5GPPS4_POSITION                            0x4
#define _T5GPPS_T5GPPS4_SIZE                                0x1
#define _T5GPPS_T5GPPS4_LENGTH                              0x1
#define _T5GPPS_T5GPPS4_MASK                                0x10

// Register: T2AINPPS
#define T2AINPPS T2AINPPS
extern volatile unsigned char           T2AINPPS            __at(0x1E9C);
#ifndef _LIB_BUILD
asm("T2AINPPS equ 01E9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2AINPPS               :5;
    };
    struct {
        unsigned T2AINPPS0              :1;
        unsigned T2AINPPS1              :1;
        unsigned T2AINPPS2              :1;
        unsigned T2AINPPS3              :1;
        unsigned T2AINPPS4              :1;
    };
} T2AINPPSbits_t;
extern volatile T2AINPPSbits_t T2AINPPSbits __at(0x1E9C);
// bitfield macros
#define _T2AINPPS_T2AINPPS_POSN                             0x0
#define _T2AINPPS_T2AINPPS_POSITION                         0x0
#define _T2AINPPS_T2AINPPS_SIZE                             0x5
#define _T2AINPPS_T2AINPPS_LENGTH                           0x5
#define _T2AINPPS_T2AINPPS_MASK                             0x1F
#define _T2AINPPS_T2AINPPS0_POSN                            0x0
#define _T2AINPPS_T2AINPPS0_POSITION                        0x0
#define _T2AINPPS_T2AINPPS0_SIZE                            0x1
#define _T2AINPPS_T2AINPPS0_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS0_MASK                            0x1
#define _T2AINPPS_T2AINPPS1_POSN                            0x1
#define _T2AINPPS_T2AINPPS1_POSITION                        0x1
#define _T2AINPPS_T2AINPPS1_SIZE                            0x1
#define _T2AINPPS_T2AINPPS1_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS1_MASK                            0x2
#define _T2AINPPS_T2AINPPS2_POSN                            0x2
#define _T2AINPPS_T2AINPPS2_POSITION                        0x2
#define _T2AINPPS_T2AINPPS2_SIZE                            0x1
#define _T2AINPPS_T2AINPPS2_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS2_MASK                            0x4
#define _T2AINPPS_T2AINPPS3_POSN                            0x3
#define _T2AINPPS_T2AINPPS3_POSITION                        0x3
#define _T2AINPPS_T2AINPPS3_SIZE                            0x1
#define _T2AINPPS_T2AINPPS3_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS3_MASK                            0x8
#define _T2AINPPS_T2AINPPS4_POSN                            0x4
#define _T2AINPPS_T2AINPPS4_POSITION                        0x4
#define _T2AINPPS_T2AINPPS4_SIZE                            0x1
#define _T2AINPPS_T2AINPPS4_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS4_MASK                            0x10

// Register: T4AINPPS
#define T4AINPPS T4AINPPS
extern volatile unsigned char           T4AINPPS            __at(0x1E9D);
#ifndef _LIB_BUILD
asm("T4AINPPS equ 01E9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4AINPPS               :5;
    };
    struct {
        unsigned T4AINPPS0              :1;
        unsigned T4AINPPS1              :1;
        unsigned T4AINPPS2              :1;
        unsigned T4AINPPS3              :1;
        unsigned T4AINPPS4              :1;
    };
} T4AINPPSbits_t;
extern volatile T4AINPPSbits_t T4AINPPSbits __at(0x1E9D);
// bitfield macros
#define _T4AINPPS_T4AINPPS_POSN                             0x0
#define _T4AINPPS_T4AINPPS_POSITION                         0x0
#define _T4AINPPS_T4AINPPS_SIZE                             0x5
#define _T4AINPPS_T4AINPPS_LENGTH                           0x5
#define _T4AINPPS_T4AINPPS_MASK                             0x1F
#define _T4AINPPS_T4AINPPS0_POSN                            0x0
#define _T4AINPPS_T4AINPPS0_POSITION                        0x0
#define _T4AINPPS_T4AINPPS0_SIZE                            0x1
#define _T4AINPPS_T4AINPPS0_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS0_MASK                            0x1
#define _T4AINPPS_T4AINPPS1_POSN                            0x1
#define _T4AINPPS_T4AINPPS1_POSITION                        0x1
#define _T4AINPPS_T4AINPPS1_SIZE                            0x1
#define _T4AINPPS_T4AINPPS1_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS1_MASK                            0x2
#define _T4AINPPS_T4AINPPS2_POSN                            0x2
#define _T4AINPPS_T4AINPPS2_POSITION                        0x2
#define _T4AINPPS_T4AINPPS2_SIZE                            0x1
#define _T4AINPPS_T4AINPPS2_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS2_MASK                            0x4
#define _T4AINPPS_T4AINPPS3_POSN                            0x3
#define _T4AINPPS_T4AINPPS3_POSITION                        0x3
#define _T4AINPPS_T4AINPPS3_SIZE                            0x1
#define _T4AINPPS_T4AINPPS3_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS3_MASK                            0x8
#define _T4AINPPS_T4AINPPS4_POSN                            0x4
#define _T4AINPPS_T4AINPPS4_POSITION                        0x4
#define _T4AINPPS_T4AINPPS4_SIZE                            0x1
#define _T4AINPPS_T4AINPPS4_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS4_MASK                            0x10

// Register: T6AINPPS
#define T6AINPPS T6AINPPS
extern volatile unsigned char           T6AINPPS            __at(0x1E9E);
#ifndef _LIB_BUILD
asm("T6AINPPS equ 01E9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T6AINPPS               :5;
    };
    struct {
        unsigned T6AINPPS0              :1;
        unsigned T6AINPPS1              :1;
        unsigned T6AINPPS2              :1;
        unsigned T6AINPPS3              :1;
        unsigned T6AINPPS4              :1;
    };
} T6AINPPSbits_t;
extern volatile T6AINPPSbits_t T6AINPPSbits __at(0x1E9E);
// bitfield macros
#define _T6AINPPS_T6AINPPS_POSN                             0x0
#define _T6AINPPS_T6AINPPS_POSITION                         0x0
#define _T6AINPPS_T6AINPPS_SIZE                             0x5
#define _T6AINPPS_T6AINPPS_LENGTH                           0x5
#define _T6AINPPS_T6AINPPS_MASK                             0x1F
#define _T6AINPPS_T6AINPPS0_POSN                            0x0
#define _T6AINPPS_T6AINPPS0_POSITION                        0x0
#define _T6AINPPS_T6AINPPS0_SIZE                            0x1
#define _T6AINPPS_T6AINPPS0_LENGTH                          0x1
#define _T6AINPPS_T6AINPPS0_MASK                            0x1
#define _T6AINPPS_T6AINPPS1_POSN                            0x1
#define _T6AINPPS_T6AINPPS1_POSITION                        0x1
#define _T6AINPPS_T6AINPPS1_SIZE                            0x1
#define _T6AINPPS_T6AINPPS1_LENGTH                          0x1
#define _T6AINPPS_T6AINPPS1_MASK                            0x2
#define _T6AINPPS_T6AINPPS2_POSN                            0x2
#define _T6AINPPS_T6AINPPS2_POSITION                        0x2
#define _T6AINPPS_T6AINPPS2_SIZE                            0x1
#define _T6AINPPS_T6AINPPS2_LENGTH                          0x1
#define _T6AINPPS_T6AINPPS2_MASK                            0x4
#define _T6AINPPS_T6AINPPS3_POSN                            0x3
#define _T6AINPPS_T6AINPPS3_POSITION                        0x3
#define _T6AINPPS_T6AINPPS3_SIZE                            0x1
#define _T6AINPPS_T6AINPPS3_LENGTH                          0x1
#define _T6AINPPS_T6AINPPS3_MASK                            0x8
#define _T6AINPPS_T6AINPPS4_POSN                            0x4
#define _T6AINPPS_T6AINPPS4_POSITION                        0x4
#define _T6AINPPS_T6AINPPS4_SIZE                            0x1
#define _T6AINPPS_T6AINPPS4_LENGTH                          0x1
#define _T6AINPPS_T6AINPPS4_MASK                            0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x1EA1);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 01EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :5;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x1EA1);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x1EA2);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 01EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :5;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x1EA2);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x5
#define _CCP2PPS_CCP2PPS_LENGTH                             0x5
#define _CCP2PPS_CCP2PPS_MASK                               0x1F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: CCP3PPS
#define CCP3PPS CCP3PPS
extern volatile unsigned char           CCP3PPS             __at(0x1EA3);
#ifndef _LIB_BUILD
asm("CCP3PPS equ 01EA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP3PPS                :5;
    };
    struct {
        unsigned CCP3PPS0               :1;
        unsigned CCP3PPS1               :1;
        unsigned CCP3PPS2               :1;
        unsigned CCP3PPS3               :1;
        unsigned CCP3PPS4               :1;
    };
} CCP3PPSbits_t;
extern volatile CCP3PPSbits_t CCP3PPSbits __at(0x1EA3);
// bitfield macros
#define _CCP3PPS_CCP3PPS_POSN                               0x0
#define _CCP3PPS_CCP3PPS_POSITION                           0x0
#define _CCP3PPS_CCP3PPS_SIZE                               0x5
#define _CCP3PPS_CCP3PPS_LENGTH                             0x5
#define _CCP3PPS_CCP3PPS_MASK                               0x1F
#define _CCP3PPS_CCP3PPS0_POSN                              0x0
#define _CCP3PPS_CCP3PPS0_POSITION                          0x0
#define _CCP3PPS_CCP3PPS0_SIZE                              0x1
#define _CCP3PPS_CCP3PPS0_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS0_MASK                              0x1
#define _CCP3PPS_CCP3PPS1_POSN                              0x1
#define _CCP3PPS_CCP3PPS1_POSITION                          0x1
#define _CCP3PPS_CCP3PPS1_SIZE                              0x1
#define _CCP3PPS_CCP3PPS1_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS1_MASK                              0x2
#define _CCP3PPS_CCP3PPS2_POSN                              0x2
#define _CCP3PPS_CCP3PPS2_POSITION                          0x2
#define _CCP3PPS_CCP3PPS2_SIZE                              0x1
#define _CCP3PPS_CCP3PPS2_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS2_MASK                              0x4
#define _CCP3PPS_CCP3PPS3_POSN                              0x3
#define _CCP3PPS_CCP3PPS3_POSITION                          0x3
#define _CCP3PPS_CCP3PPS3_SIZE                              0x1
#define _CCP3PPS_CCP3PPS3_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS3_MASK                              0x8
#define _CCP3PPS_CCP3PPS4_POSN                              0x4
#define _CCP3PPS_CCP3PPS4_POSITION                          0x4
#define _CCP3PPS_CCP3PPS4_SIZE                              0x1
#define _CCP3PPS_CCP3PPS4_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS4_MASK                              0x10

// Register: CCP4PPS
#define CCP4PPS CCP4PPS
extern volatile unsigned char           CCP4PPS             __at(0x1EA4);
#ifndef _LIB_BUILD
asm("CCP4PPS equ 01EA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4PPS                :5;
    };
    struct {
        unsigned CCP4PPS0               :1;
        unsigned CCP4PPS1               :1;
        unsigned CCP4PPS2               :1;
        unsigned CCP4PPS3               :1;
        unsigned CCP4PPS4               :1;
    };
} CCP4PPSbits_t;
extern volatile CCP4PPSbits_t CCP4PPSbits __at(0x1EA4);
// bitfield macros
#define _CCP4PPS_CCP4PPS_POSN                               0x0
#define _CCP4PPS_CCP4PPS_POSITION                           0x0
#define _CCP4PPS_CCP4PPS_SIZE                               0x5
#define _CCP4PPS_CCP4PPS_LENGTH                             0x5
#define _CCP4PPS_CCP4PPS_MASK                               0x1F
#define _CCP4PPS_CCP4PPS0_POSN                              0x0
#define _CCP4PPS_CCP4PPS0_POSITION                          0x0
#define _CCP4PPS_CCP4PPS0_SIZE                              0x1
#define _CCP4PPS_CCP4PPS0_LENGTH                            0x1
#define _CCP4PPS_CCP4PPS0_MASK                              0x1
#define _CCP4PPS_CCP4PPS1_POSN                              0x1
#define _CCP4PPS_CCP4PPS1_POSITION                          0x1
#define _CCP4PPS_CCP4PPS1_SIZE                              0x1
#define _CCP4PPS_CCP4PPS1_LENGTH                            0x1
#define _CCP4PPS_CCP4PPS1_MASK                              0x2
#define _CCP4PPS_CCP4PPS2_POSN                              0x2
#define _CCP4PPS_CCP4PPS2_POSITION                          0x2
#define _CCP4PPS_CCP4PPS2_SIZE                              0x1
#define _CCP4PPS_CCP4PPS2_LENGTH                            0x1
#define _CCP4PPS_CCP4PPS2_MASK                              0x4
#define _CCP4PPS_CCP4PPS3_POSN                              0x3
#define _CCP4PPS_CCP4PPS3_POSITION                          0x3
#define _CCP4PPS_CCP4PPS3_SIZE                              0x1
#define _CCP4PPS_CCP4PPS3_LENGTH                            0x1
#define _CCP4PPS_CCP4PPS3_MASK                              0x8
#define _CCP4PPS_CCP4PPS4_POSN                              0x4
#define _CCP4PPS_CCP4PPS4_POSITION                          0x4
#define _CCP4PPS_CCP4PPS4_SIZE                              0x1
#define _CCP4PPS_CCP4PPS4_LENGTH                            0x1
#define _CCP4PPS_CCP4PPS4_MASK                              0x10

// Register: CCP5PPS
#define CCP5PPS CCP5PPS
extern volatile unsigned char           CCP5PPS             __at(0x1EA5);
#ifndef _LIB_BUILD
asm("CCP5PPS equ 01EA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP5PPS                :5;
    };
    struct {
        unsigned CCP5PPS0               :1;
        unsigned CCP5PPS1               :1;
        unsigned CCP5PPS2               :1;
        unsigned CCP5PPS3               :1;
        unsigned CCP5PPS4               :1;
    };
} CCP5PPSbits_t;
extern volatile CCP5PPSbits_t CCP5PPSbits __at(0x1EA5);
// bitfield macros
#define _CCP5PPS_CCP5PPS_POSN                               0x0
#define _CCP5PPS_CCP5PPS_POSITION                           0x0
#define _CCP5PPS_CCP5PPS_SIZE                               0x5
#define _CCP5PPS_CCP5PPS_LENGTH                             0x5
#define _CCP5PPS_CCP5PPS_MASK                               0x1F
#define _CCP5PPS_CCP5PPS0_POSN                              0x0
#define _CCP5PPS_CCP5PPS0_POSITION                          0x0
#define _CCP5PPS_CCP5PPS0_SIZE                              0x1
#define _CCP5PPS_CCP5PPS0_LENGTH                            0x1
#define _CCP5PPS_CCP5PPS0_MASK                              0x1
#define _CCP5PPS_CCP5PPS1_POSN                              0x1
#define _CCP5PPS_CCP5PPS1_POSITION                          0x1
#define _CCP5PPS_CCP5PPS1_SIZE                              0x1
#define _CCP5PPS_CCP5PPS1_LENGTH                            0x1
#define _CCP5PPS_CCP5PPS1_MASK                              0x2
#define _CCP5PPS_CCP5PPS2_POSN                              0x2
#define _CCP5PPS_CCP5PPS2_POSITION                          0x2
#define _CCP5PPS_CCP5PPS2_SIZE                              0x1
#define _CCP5PPS_CCP5PPS2_LENGTH                            0x1
#define _CCP5PPS_CCP5PPS2_MASK                              0x4
#define _CCP5PPS_CCP5PPS3_POSN                              0x3
#define _CCP5PPS_CCP5PPS3_POSITION                          0x3
#define _CCP5PPS_CCP5PPS3_SIZE                              0x1
#define _CCP5PPS_CCP5PPS3_LENGTH                            0x1
#define _CCP5PPS_CCP5PPS3_MASK                              0x8
#define _CCP5PPS_CCP5PPS4_POSN                              0x4
#define _CCP5PPS_CCP5PPS4_POSITION                          0x4
#define _CCP5PPS_CCP5PPS4_SIZE                              0x1
#define _CCP5PPS_CCP5PPS4_LENGTH                            0x1
#define _CCP5PPS_CCP5PPS4_MASK                              0x10

// Register: SMT1WINPPS
#define SMT1WINPPS SMT1WINPPS
extern volatile unsigned char           SMT1WINPPS          __at(0x1EA9);
#ifndef _LIB_BUILD
asm("SMT1WINPPS equ 01EA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1WINPPS             :5;
    };
    struct {
        unsigned SMU1WINPPS0            :1;
        unsigned SMU1WINPPS1            :1;
        unsigned SMU1WINPPS2            :1;
        unsigned SMU1WINPPS3            :1;
        unsigned SMU1WINPPS4            :1;
    };
} SMT1WINPPSbits_t;
extern volatile SMT1WINPPSbits_t SMT1WINPPSbits __at(0x1EA9);
// bitfield macros
#define _SMT1WINPPS_SMT1WINPPS_POSN                         0x0
#define _SMT1WINPPS_SMT1WINPPS_POSITION                     0x0
#define _SMT1WINPPS_SMT1WINPPS_SIZE                         0x5
#define _SMT1WINPPS_SMT1WINPPS_LENGTH                       0x5
#define _SMT1WINPPS_SMT1WINPPS_MASK                         0x1F
#define _SMT1WINPPS_SMU1WINPPS0_POSN                        0x0
#define _SMT1WINPPS_SMU1WINPPS0_POSITION                    0x0
#define _SMT1WINPPS_SMU1WINPPS0_SIZE                        0x1
#define _SMT1WINPPS_SMU1WINPPS0_LENGTH                      0x1
#define _SMT1WINPPS_SMU1WINPPS0_MASK                        0x1
#define _SMT1WINPPS_SMU1WINPPS1_POSN                        0x1
#define _SMT1WINPPS_SMU1WINPPS1_POSITION                    0x1
#define _SMT1WINPPS_SMU1WINPPS1_SIZE                        0x1
#define _SMT1WINPPS_SMU1WINPPS1_LENGTH                      0x1
#define _SMT1WINPPS_SMU1WINPPS1_MASK                        0x2
#define _SMT1WINPPS_SMU1WINPPS2_POSN                        0x2
#define _SMT1WINPPS_SMU1WINPPS2_POSITION                    0x2
#define _SMT1WINPPS_SMU1WINPPS2_SIZE                        0x1
#define _SMT1WINPPS_SMU1WINPPS2_LENGTH                      0x1
#define _SMT1WINPPS_SMU1WINPPS2_MASK                        0x4
#define _SMT1WINPPS_SMU1WINPPS3_POSN                        0x3
#define _SMT1WINPPS_SMU1WINPPS3_POSITION                    0x3
#define _SMT1WINPPS_SMU1WINPPS3_SIZE                        0x1
#define _SMT1WINPPS_SMU1WINPPS3_LENGTH                      0x1
#define _SMT1WINPPS_SMU1WINPPS3_MASK                        0x8
#define _SMT1WINPPS_SMU1WINPPS4_POSN                        0x4
#define _SMT1WINPPS_SMU1WINPPS4_POSITION                    0x4
#define _SMT1WINPPS_SMU1WINPPS4_SIZE                        0x1
#define _SMT1WINPPS_SMU1WINPPS4_LENGTH                      0x1
#define _SMT1WINPPS_SMU1WINPPS4_MASK                        0x10

// Register: SMT1SIGPPS
#define SMT1SIGPPS SMT1SIGPPS
extern volatile unsigned char           SMT1SIGPPS          __at(0x1EAA);
#ifndef _LIB_BUILD
asm("SMT1SIGPPS equ 01EAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1SIGPPS             :5;
    };
    struct {
        unsigned SMU1SIGPPS0            :1;
        unsigned SMU1SIGPPS1            :1;
        unsigned SMU1SIGPPS2            :1;
        unsigned SMU1SIGPPS3            :1;
        unsigned SMU1SIGPPS4            :1;
    };
} SMT1SIGPPSbits_t;
extern volatile SMT1SIGPPSbits_t SMT1SIGPPSbits __at(0x1EAA);
// bitfield macros
#define _SMT1SIGPPS_SMT1SIGPPS_POSN                         0x0
#define _SMT1SIGPPS_SMT1SIGPPS_POSITION                     0x0
#define _SMT1SIGPPS_SMT1SIGPPS_SIZE                         0x5
#define _SMT1SIGPPS_SMT1SIGPPS_LENGTH                       0x5
#define _SMT1SIGPPS_SMT1SIGPPS_MASK                         0x1F
#define _SMT1SIGPPS_SMU1SIGPPS0_POSN                        0x0
#define _SMT1SIGPPS_SMU1SIGPPS0_POSITION                    0x0
#define _SMT1SIGPPS_SMU1SIGPPS0_SIZE                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS0_LENGTH                      0x1
#define _SMT1SIGPPS_SMU1SIGPPS0_MASK                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS1_POSN                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS1_POSITION                    0x1
#define _SMT1SIGPPS_SMU1SIGPPS1_SIZE                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS1_LENGTH                      0x1
#define _SMT1SIGPPS_SMU1SIGPPS1_MASK                        0x2
#define _SMT1SIGPPS_SMU1SIGPPS2_POSN                        0x2
#define _SMT1SIGPPS_SMU1SIGPPS2_POSITION                    0x2
#define _SMT1SIGPPS_SMU1SIGPPS2_SIZE                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS2_LENGTH                      0x1
#define _SMT1SIGPPS_SMU1SIGPPS2_MASK                        0x4
#define _SMT1SIGPPS_SMU1SIGPPS3_POSN                        0x3
#define _SMT1SIGPPS_SMU1SIGPPS3_POSITION                    0x3
#define _SMT1SIGPPS_SMU1SIGPPS3_SIZE                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS3_LENGTH                      0x1
#define _SMT1SIGPPS_SMU1SIGPPS3_MASK                        0x8
#define _SMT1SIGPPS_SMU1SIGPPS4_POSN                        0x4
#define _SMT1SIGPPS_SMU1SIGPPS4_POSITION                    0x4
#define _SMT1SIGPPS_SMU1SIGPPS4_SIZE                        0x1
#define _SMT1SIGPPS_SMU1SIGPPS4_LENGTH                      0x1
#define _SMT1SIGPPS_SMU1SIGPPS4_MASK                        0x10

// Register: SMT2WINPPS
#define SMT2WINPPS SMT2WINPPS
extern volatile unsigned char           SMT2WINPPS          __at(0x1EAB);
#ifndef _LIB_BUILD
asm("SMT2WINPPS equ 01EABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2WINPPS             :5;
    };
    struct {
        unsigned SMU2WINPPS0            :1;
        unsigned SMU2WINPPS1            :1;
        unsigned SMU2WINPPS2            :1;
        unsigned SMU2WINPPS3            :1;
        unsigned SMU2WINPPS4            :1;
    };
} SMT2WINPPSbits_t;
extern volatile SMT2WINPPSbits_t SMT2WINPPSbits __at(0x1EAB);
// bitfield macros
#define _SMT2WINPPS_SMT2WINPPS_POSN                         0x0
#define _SMT2WINPPS_SMT2WINPPS_POSITION                     0x0
#define _SMT2WINPPS_SMT2WINPPS_SIZE                         0x5
#define _SMT2WINPPS_SMT2WINPPS_LENGTH                       0x5
#define _SMT2WINPPS_SMT2WINPPS_MASK                         0x1F
#define _SMT2WINPPS_SMU2WINPPS0_POSN                        0x0
#define _SMT2WINPPS_SMU2WINPPS0_POSITION                    0x0
#define _SMT2WINPPS_SMU2WINPPS0_SIZE                        0x1
#define _SMT2WINPPS_SMU2WINPPS0_LENGTH                      0x1
#define _SMT2WINPPS_SMU2WINPPS0_MASK                        0x1
#define _SMT2WINPPS_SMU2WINPPS1_POSN                        0x1
#define _SMT2WINPPS_SMU2WINPPS1_POSITION                    0x1
#define _SMT2WINPPS_SMU2WINPPS1_SIZE                        0x1
#define _SMT2WINPPS_SMU2WINPPS1_LENGTH                      0x1
#define _SMT2WINPPS_SMU2WINPPS1_MASK                        0x2
#define _SMT2WINPPS_SMU2WINPPS2_POSN                        0x2
#define _SMT2WINPPS_SMU2WINPPS2_POSITION                    0x2
#define _SMT2WINPPS_SMU2WINPPS2_SIZE                        0x1
#define _SMT2WINPPS_SMU2WINPPS2_LENGTH                      0x1
#define _SMT2WINPPS_SMU2WINPPS2_MASK                        0x4
#define _SMT2WINPPS_SMU2WINPPS3_POSN                        0x3
#define _SMT2WINPPS_SMU2WINPPS3_POSITION                    0x3
#define _SMT2WINPPS_SMU2WINPPS3_SIZE                        0x1
#define _SMT2WINPPS_SMU2WINPPS3_LENGTH                      0x1
#define _SMT2WINPPS_SMU2WINPPS3_MASK                        0x8
#define _SMT2WINPPS_SMU2WINPPS4_POSN                        0x4
#define _SMT2WINPPS_SMU2WINPPS4_POSITION                    0x4
#define _SMT2WINPPS_SMU2WINPPS4_SIZE                        0x1
#define _SMT2WINPPS_SMU2WINPPS4_LENGTH                      0x1
#define _SMT2WINPPS_SMU2WINPPS4_MASK                        0x10

// Register: SMT2SIGPPS
#define SMT2SIGPPS SMT2SIGPPS
extern volatile unsigned char           SMT2SIGPPS          __at(0x1EAC);
#ifndef _LIB_BUILD
asm("SMT2SIGPPS equ 01EACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2SIGPPS             :5;
    };
    struct {
        unsigned SMU2SIGPPS0            :1;
        unsigned SMU2SIGPPS1            :1;
        unsigned SMU2SIGPPS2            :1;
        unsigned SMU2SIGPPS3            :1;
        unsigned SMU2SIGPPS4            :1;
    };
} SMT2SIGPPSbits_t;
extern volatile SMT2SIGPPSbits_t SMT2SIGPPSbits __at(0x1EAC);
// bitfield macros
#define _SMT2SIGPPS_SMT2SIGPPS_POSN                         0x0
#define _SMT2SIGPPS_SMT2SIGPPS_POSITION                     0x0
#define _SMT2SIGPPS_SMT2SIGPPS_SIZE                         0x5
#define _SMT2SIGPPS_SMT2SIGPPS_LENGTH                       0x5
#define _SMT2SIGPPS_SMT2SIGPPS_MASK                         0x1F
#define _SMT2SIGPPS_SMU2SIGPPS0_POSN                        0x0
#define _SMT2SIGPPS_SMU2SIGPPS0_POSITION                    0x0
#define _SMT2SIGPPS_SMU2SIGPPS0_SIZE                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS0_LENGTH                      0x1
#define _SMT2SIGPPS_SMU2SIGPPS0_MASK                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS1_POSN                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS1_POSITION                    0x1
#define _SMT2SIGPPS_SMU2SIGPPS1_SIZE                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS1_LENGTH                      0x1
#define _SMT2SIGPPS_SMU2SIGPPS1_MASK                        0x2
#define _SMT2SIGPPS_SMU2SIGPPS2_POSN                        0x2
#define _SMT2SIGPPS_SMU2SIGPPS2_POSITION                    0x2
#define _SMT2SIGPPS_SMU2SIGPPS2_SIZE                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS2_LENGTH                      0x1
#define _SMT2SIGPPS_SMU2SIGPPS2_MASK                        0x4
#define _SMT2SIGPPS_SMU2SIGPPS3_POSN                        0x3
#define _SMT2SIGPPS_SMU2SIGPPS3_POSITION                    0x3
#define _SMT2SIGPPS_SMU2SIGPPS3_SIZE                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS3_LENGTH                      0x1
#define _SMT2SIGPPS_SMU2SIGPPS3_MASK                        0x8
#define _SMT2SIGPPS_SMU2SIGPPS4_POSN                        0x4
#define _SMT2SIGPPS_SMU2SIGPPS4_POSITION                    0x4
#define _SMT2SIGPPS_SMU2SIGPPS4_SIZE                        0x1
#define _SMT2SIGPPS_SMU2SIGPPS4_LENGTH                      0x1
#define _SMT2SIGPPS_SMU2SIGPPS4_MASK                        0x10

// Register: CWG1PPS
#define CWG1PPS CWG1PPS
extern volatile unsigned char           CWG1PPS             __at(0x1EB1);
#ifndef _LIB_BUILD
asm("CWG1PPS equ 01EB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1PPS                :5;
    };
    struct {
        unsigned CWG1PPS0               :1;
        unsigned CWG1PPS1               :1;
        unsigned CWG1PPS2               :1;
        unsigned CWG1PPS3               :1;
        unsigned CWG1PPS4               :1;
    };
} CWG1PPSbits_t;
extern volatile CWG1PPSbits_t CWG1PPSbits __at(0x1EB1);
// bitfield macros
#define _CWG1PPS_CWG1PPS_POSN                               0x0
#define _CWG1PPS_CWG1PPS_POSITION                           0x0
#define _CWG1PPS_CWG1PPS_SIZE                               0x5
#define _CWG1PPS_CWG1PPS_LENGTH                             0x5
#define _CWG1PPS_CWG1PPS_MASK                               0x1F
#define _CWG1PPS_CWG1PPS0_POSN                              0x0
#define _CWG1PPS_CWG1PPS0_POSITION                          0x0
#define _CWG1PPS_CWG1PPS0_SIZE                              0x1
#define _CWG1PPS_CWG1PPS0_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS0_MASK                              0x1
#define _CWG1PPS_CWG1PPS1_POSN                              0x1
#define _CWG1PPS_CWG1PPS1_POSITION                          0x1
#define _CWG1PPS_CWG1PPS1_SIZE                              0x1
#define _CWG1PPS_CWG1PPS1_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS1_MASK                              0x2
#define _CWG1PPS_CWG1PPS2_POSN                              0x2
#define _CWG1PPS_CWG1PPS2_POSITION                          0x2
#define _CWG1PPS_CWG1PPS2_SIZE                              0x1
#define _CWG1PPS_CWG1PPS2_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS2_MASK                              0x4
#define _CWG1PPS_CWG1PPS3_POSN                              0x3
#define _CWG1PPS_CWG1PPS3_POSITION                          0x3
#define _CWG1PPS_CWG1PPS3_SIZE                              0x1
#define _CWG1PPS_CWG1PPS3_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS3_MASK                              0x8
#define _CWG1PPS_CWG1PPS4_POSN                              0x4
#define _CWG1PPS_CWG1PPS4_POSITION                          0x4
#define _CWG1PPS_CWG1PPS4_SIZE                              0x1
#define _CWG1PPS_CWG1PPS4_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS4_MASK                              0x10

// Register: CWG2PPS
#define CWG2PPS CWG2PPS
extern volatile unsigned char           CWG2PPS             __at(0x1EB2);
#ifndef _LIB_BUILD
asm("CWG2PPS equ 01EB2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG2PPS                :5;
    };
    struct {
        unsigned CWG2PPS0               :1;
        unsigned CWG2PPS1               :1;
        unsigned CWG2PPS2               :1;
        unsigned CWG2PPS3               :1;
        unsigned CWG2PPS4               :1;
    };
} CWG2PPSbits_t;
extern volatile CWG2PPSbits_t CWG2PPSbits __at(0x1EB2);
// bitfield macros
#define _CWG2PPS_CWG2PPS_POSN                               0x0
#define _CWG2PPS_CWG2PPS_POSITION                           0x0
#define _CWG2PPS_CWG2PPS_SIZE                               0x5
#define _CWG2PPS_CWG2PPS_LENGTH                             0x5
#define _CWG2PPS_CWG2PPS_MASK                               0x1F
#define _CWG2PPS_CWG2PPS0_POSN                              0x0
#define _CWG2PPS_CWG2PPS0_POSITION                          0x0
#define _CWG2PPS_CWG2PPS0_SIZE                              0x1
#define _CWG2PPS_CWG2PPS0_LENGTH                            0x1
#define _CWG2PPS_CWG2PPS0_MASK                              0x1
#define _CWG2PPS_CWG2PPS1_POSN                              0x1
#define _CWG2PPS_CWG2PPS1_POSITION                          0x1
#define _CWG2PPS_CWG2PPS1_SIZE                              0x1
#define _CWG2PPS_CWG2PPS1_LENGTH                            0x1
#define _CWG2PPS_CWG2PPS1_MASK                              0x2
#define _CWG2PPS_CWG2PPS2_POSN                              0x2
#define _CWG2PPS_CWG2PPS2_POSITION                          0x2
#define _CWG2PPS_CWG2PPS2_SIZE                              0x1
#define _CWG2PPS_CWG2PPS2_LENGTH                            0x1
#define _CWG2PPS_CWG2PPS2_MASK                              0x4
#define _CWG2PPS_CWG2PPS3_POSN                              0x3
#define _CWG2PPS_CWG2PPS3_POSITION                          0x3
#define _CWG2PPS_CWG2PPS3_SIZE                              0x1
#define _CWG2PPS_CWG2PPS3_LENGTH                            0x1
#define _CWG2PPS_CWG2PPS3_MASK                              0x8
#define _CWG2PPS_CWG2PPS4_POSN                              0x4
#define _CWG2PPS_CWG2PPS4_POSITION                          0x4
#define _CWG2PPS_CWG2PPS4_SIZE                              0x1
#define _CWG2PPS_CWG2PPS4_LENGTH                            0x1
#define _CWG2PPS_CWG2PPS4_MASK                              0x10

// Register: CWG3PPS
#define CWG3PPS CWG3PPS
extern volatile unsigned char           CWG3PPS             __at(0x1EB3);
#ifndef _LIB_BUILD
asm("CWG3PPS equ 01EB3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG3PPS                :5;
    };
    struct {
        unsigned CWG3PPS0               :1;
        unsigned CWG3PPS1               :1;
        unsigned CWG3PPS2               :1;
        unsigned CWG3PPS3               :1;
        unsigned CWG3PPS4               :1;
    };
} CWG3PPSbits_t;
extern volatile CWG3PPSbits_t CWG3PPSbits __at(0x1EB3);
// bitfield macros
#define _CWG3PPS_CWG3PPS_POSN                               0x0
#define _CWG3PPS_CWG3PPS_POSITION                           0x0
#define _CWG3PPS_CWG3PPS_SIZE                               0x5
#define _CWG3PPS_CWG3PPS_LENGTH                             0x5
#define _CWG3PPS_CWG3PPS_MASK                               0x1F
#define _CWG3PPS_CWG3PPS0_POSN                              0x0
#define _CWG3PPS_CWG3PPS0_POSITION                          0x0
#define _CWG3PPS_CWG3PPS0_SIZE                              0x1
#define _CWG3PPS_CWG3PPS0_LENGTH                            0x1
#define _CWG3PPS_CWG3PPS0_MASK                              0x1
#define _CWG3PPS_CWG3PPS1_POSN                              0x1
#define _CWG3PPS_CWG3PPS1_POSITION                          0x1
#define _CWG3PPS_CWG3PPS1_SIZE                              0x1
#define _CWG3PPS_CWG3PPS1_LENGTH                            0x1
#define _CWG3PPS_CWG3PPS1_MASK                              0x2
#define _CWG3PPS_CWG3PPS2_POSN                              0x2
#define _CWG3PPS_CWG3PPS2_POSITION                          0x2
#define _CWG3PPS_CWG3PPS2_SIZE                              0x1
#define _CWG3PPS_CWG3PPS2_LENGTH                            0x1
#define _CWG3PPS_CWG3PPS2_MASK                              0x4
#define _CWG3PPS_CWG3PPS3_POSN                              0x3
#define _CWG3PPS_CWG3PPS3_POSITION                          0x3
#define _CWG3PPS_CWG3PPS3_SIZE                              0x1
#define _CWG3PPS_CWG3PPS3_LENGTH                            0x1
#define _CWG3PPS_CWG3PPS3_MASK                              0x8
#define _CWG3PPS_CWG3PPS4_POSN                              0x4
#define _CWG3PPS_CWG3PPS4_POSITION                          0x4
#define _CWG3PPS_CWG3PPS4_SIZE                              0x1
#define _CWG3PPS_CWG3PPS4_LENGTH                            0x1
#define _CWG3PPS_CWG3PPS4_MASK                              0x10

// Register: MDCARLPPS
#define MDCARLPPS MDCARLPPS
extern volatile unsigned char           MDCARLPPS           __at(0x1EB8);
#ifndef _LIB_BUILD
asm("MDCARLPPS equ 01EB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCARLPPS              :5;
    };
    struct {
        unsigned MDCARLPPS0             :1;
        unsigned MDCARLPPS1             :1;
        unsigned MDCARLPPS2             :1;
        unsigned MDCARLPPS3             :1;
        unsigned MDCARLPPS4             :1;
    };
} MDCARLPPSbits_t;
extern volatile MDCARLPPSbits_t MDCARLPPSbits __at(0x1EB8);
// bitfield macros
#define _MDCARLPPS_MDCARLPPS_POSN                           0x0
#define _MDCARLPPS_MDCARLPPS_POSITION                       0x0
#define _MDCARLPPS_MDCARLPPS_SIZE                           0x5
#define _MDCARLPPS_MDCARLPPS_LENGTH                         0x5
#define _MDCARLPPS_MDCARLPPS_MASK                           0x1F
#define _MDCARLPPS_MDCARLPPS0_POSN                          0x0
#define _MDCARLPPS_MDCARLPPS0_POSITION                      0x0
#define _MDCARLPPS_MDCARLPPS0_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS0_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS0_MASK                          0x1
#define _MDCARLPPS_MDCARLPPS1_POSN                          0x1
#define _MDCARLPPS_MDCARLPPS1_POSITION                      0x1
#define _MDCARLPPS_MDCARLPPS1_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS1_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS1_MASK                          0x2
#define _MDCARLPPS_MDCARLPPS2_POSN                          0x2
#define _MDCARLPPS_MDCARLPPS2_POSITION                      0x2
#define _MDCARLPPS_MDCARLPPS2_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS2_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS2_MASK                          0x4
#define _MDCARLPPS_MDCARLPPS3_POSN                          0x3
#define _MDCARLPPS_MDCARLPPS3_POSITION                      0x3
#define _MDCARLPPS_MDCARLPPS3_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS3_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS3_MASK                          0x8
#define _MDCARLPPS_MDCARLPPS4_POSN                          0x4
#define _MDCARLPPS_MDCARLPPS4_POSITION                      0x4
#define _MDCARLPPS_MDCARLPPS4_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS4_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS4_MASK                          0x10

// Register: MDCARHPPS
#define MDCARHPPS MDCARHPPS
extern volatile unsigned char           MDCARHPPS           __at(0x1EB9);
#ifndef _LIB_BUILD
asm("MDCARHPPS equ 01EB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDCARHPPS              :5;
    };
    struct {
        unsigned MDCARHPPS0             :1;
        unsigned MDCARHPPS1             :1;
        unsigned MDCARHPPS2             :1;
        unsigned MDCARHPPS3             :1;
        unsigned MDCARHPPS4             :1;
    };
} MDCARHPPSbits_t;
extern volatile MDCARHPPSbits_t MDCARHPPSbits __at(0x1EB9);
// bitfield macros
#define _MDCARHPPS_MDCARHPPS_POSN                           0x0
#define _MDCARHPPS_MDCARHPPS_POSITION                       0x0
#define _MDCARHPPS_MDCARHPPS_SIZE                           0x5
#define _MDCARHPPS_MDCARHPPS_LENGTH                         0x5
#define _MDCARHPPS_MDCARHPPS_MASK                           0x1F
#define _MDCARHPPS_MDCARHPPS0_POSN                          0x0
#define _MDCARHPPS_MDCARHPPS0_POSITION                      0x0
#define _MDCARHPPS_MDCARHPPS0_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS0_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS0_MASK                          0x1
#define _MDCARHPPS_MDCARHPPS1_POSN                          0x1
#define _MDCARHPPS_MDCARHPPS1_POSITION                      0x1
#define _MDCARHPPS_MDCARHPPS1_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS1_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS1_MASK                          0x2
#define _MDCARHPPS_MDCARHPPS2_POSN                          0x2
#define _MDCARHPPS_MDCARHPPS2_POSITION                      0x2
#define _MDCARHPPS_MDCARHPPS2_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS2_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS2_MASK                          0x4
#define _MDCARHPPS_MDCARHPPS3_POSN                          0x3
#define _MDCARHPPS_MDCARHPPS3_POSITION                      0x3
#define _MDCARHPPS_MDCARHPPS3_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS3_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS3_MASK                          0x8
#define _MDCARHPPS_MDCARHPPS4_POSN                          0x4
#define _MDCARHPPS_MDCARHPPS4_POSITION                      0x4
#define _MDCARHPPS_MDCARHPPS4_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS4_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS4_MASK                          0x10

// Register: MDSRCPPS
#define MDSRCPPS MDSRCPPS
extern volatile unsigned char           MDSRCPPS            __at(0x1EBA);
#ifndef _LIB_BUILD
asm("MDSRCPPS equ 01EBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MDSRCPPS               :5;
    };
    struct {
        unsigned MDSRCPPS0              :1;
        unsigned MDSRCPPS1              :1;
        unsigned MDSRCPPS2              :1;
        unsigned MDSRCPPS3              :1;
        unsigned MDSRCPPS4              :1;
    };
} MDSRCPPSbits_t;
extern volatile MDSRCPPSbits_t MDSRCPPSbits __at(0x1EBA);
// bitfield macros
#define _MDSRCPPS_MDSRCPPS_POSN                             0x0
#define _MDSRCPPS_MDSRCPPS_POSITION                         0x0
#define _MDSRCPPS_MDSRCPPS_SIZE                             0x5
#define _MDSRCPPS_MDSRCPPS_LENGTH                           0x5
#define _MDSRCPPS_MDSRCPPS_MASK                             0x1F
#define _MDSRCPPS_MDSRCPPS0_POSN                            0x0
#define _MDSRCPPS_MDSRCPPS0_POSITION                        0x0
#define _MDSRCPPS_MDSRCPPS0_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS0_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS0_MASK                            0x1
#define _MDSRCPPS_MDSRCPPS1_POSN                            0x1
#define _MDSRCPPS_MDSRCPPS1_POSITION                        0x1
#define _MDSRCPPS_MDSRCPPS1_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS1_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS1_MASK                            0x2
#define _MDSRCPPS_MDSRCPPS2_POSN                            0x2
#define _MDSRCPPS_MDSRCPPS2_POSITION                        0x2
#define _MDSRCPPS_MDSRCPPS2_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS2_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS2_MASK                            0x4
#define _MDSRCPPS_MDSRCPPS3_POSN                            0x3
#define _MDSRCPPS_MDSRCPPS3_POSITION                        0x3
#define _MDSRCPPS_MDSRCPPS3_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS3_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS3_MASK                            0x8
#define _MDSRCPPS_MDSRCPPS4_POSN                            0x4
#define _MDSRCPPS_MDSRCPPS4_POSITION                        0x4
#define _MDSRCPPS_MDSRCPPS4_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS4_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS4_MASK                            0x10

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x1EBB);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 01EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
    struct {
        unsigned CLCIN0PPS              :5;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x1EBB);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x1EBC);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 01EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
    struct {
        unsigned CLCIN1PPS              :5;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x1EBC);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x1EBD);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 01EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
    struct {
        unsigned CLCIN2PPS              :5;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x1EBD);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x1EBE);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 01EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
    struct {
        unsigned CLCIN3PPS              :5;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x1EBE);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F

// Register: ADCACTPPS
#define ADCACTPPS ADCACTPPS
extern volatile unsigned char           ADCACTPPS           __at(0x1EC3);
#ifndef _LIB_BUILD
asm("ADCACTPPS equ 01EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCACTPPS0             :1;
        unsigned ADCACTPPS1             :1;
        unsigned ADCACTPPS2             :1;
        unsigned ADCACTPPS3             :1;
        unsigned ADCACTPPS4             :1;
    };
    struct {
        unsigned ADCACTPPS              :5;
    };
} ADCACTPPSbits_t;
extern volatile ADCACTPPSbits_t ADCACTPPSbits __at(0x1EC3);
// bitfield macros
#define _ADCACTPPS_ADCACTPPS0_POSN                          0x0
#define _ADCACTPPS_ADCACTPPS0_POSITION                      0x0
#define _ADCACTPPS_ADCACTPPS0_SIZE                          0x1
#define _ADCACTPPS_ADCACTPPS0_LENGTH                        0x1
#define _ADCACTPPS_ADCACTPPS0_MASK                          0x1
#define _ADCACTPPS_ADCACTPPS1_POSN                          0x1
#define _ADCACTPPS_ADCACTPPS1_POSITION                      0x1
#define _ADCACTPPS_ADCACTPPS1_SIZE                          0x1
#define _ADCACTPPS_ADCACTPPS1_LENGTH                        0x1
#define _ADCACTPPS_ADCACTPPS1_MASK                          0x2
#define _ADCACTPPS_ADCACTPPS2_POSN                          0x2
#define _ADCACTPPS_ADCACTPPS2_POSITION                      0x2
#define _ADCACTPPS_ADCACTPPS2_SIZE                          0x1
#define _ADCACTPPS_ADCACTPPS2_LENGTH                        0x1
#define _ADCACTPPS_ADCACTPPS2_MASK                          0x4
#define _ADCACTPPS_ADCACTPPS3_POSN                          0x3
#define _ADCACTPPS_ADCACTPPS3_POSITION                      0x3
#define _ADCACTPPS_ADCACTPPS3_SIZE                          0x1
#define _ADCACTPPS_ADCACTPPS3_LENGTH                        0x1
#define _ADCACTPPS_ADCACTPPS3_MASK                          0x8
#define _ADCACTPPS_ADCACTPPS4_POSN                          0x4
#define _ADCACTPPS_ADCACTPPS4_POSITION                      0x4
#define _ADCACTPPS_ADCACTPPS4_SIZE                          0x1
#define _ADCACTPPS_ADCACTPPS4_LENGTH                        0x1
#define _ADCACTPPS_ADCACTPPS4_MASK                          0x10
#define _ADCACTPPS_ADCACTPPS_POSN                           0x0
#define _ADCACTPPS_ADCACTPPS_POSITION                       0x0
#define _ADCACTPPS_ADCACTPPS_SIZE                           0x5
#define _ADCACTPPS_ADCACTPPS_LENGTH                         0x5
#define _ADCACTPPS_ADCACTPPS_MASK                           0x1F

// Register: SSP1CLKPPS
#define SSP1CLKPPS SSP1CLKPPS
extern volatile unsigned char           SSP1CLKPPS          __at(0x1EC5);
#ifndef _LIB_BUILD
asm("SSP1CLKPPS equ 01EC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1CLKPPS0            :1;
        unsigned SSP1CLKPPS1            :1;
        unsigned SSP1CLKPPS2            :1;
        unsigned SSP1CLKPPS3            :1;
        unsigned SSP1CLKPPS4            :1;
    };
    struct {
        unsigned SSP1CLKPPS             :5;
    };
} SSP1CLKPPSbits_t;
extern volatile SSP1CLKPPSbits_t SSP1CLKPPSbits __at(0x1EC5);
// bitfield macros
#define _SSP1CLKPPS_SSP1CLKPPS0_POSN                        0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_POSITION                    0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_MASK                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSN                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSITION                    0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_MASK                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSN                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSITION                    0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_MASK                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS3_POSN                        0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_POSITION                    0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_MASK                        0x8
#define _SSP1CLKPPS_SSP1CLKPPS4_POSN                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_POSITION                    0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_MASK                        0x10
#define _SSP1CLKPPS_SSP1CLKPPS_POSN                         0x0
#define _SSP1CLKPPS_SSP1CLKPPS_POSITION                     0x0
#define _SSP1CLKPPS_SSP1CLKPPS_SIZE                         0x5
#define _SSP1CLKPPS_SSP1CLKPPS_LENGTH                       0x5
#define _SSP1CLKPPS_SSP1CLKPPS_MASK                         0x1F

// Register: SSP1DATPPS
#define SSP1DATPPS SSP1DATPPS
extern volatile unsigned char           SSP1DATPPS          __at(0x1EC6);
#ifndef _LIB_BUILD
asm("SSP1DATPPS equ 01EC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1DATPPS0            :1;
        unsigned SSP1DATPPS1            :1;
        unsigned SSP1DATPPS2            :1;
        unsigned SSP1DATPPS3            :1;
        unsigned SSP1DATPPS4            :1;
    };
    struct {
        unsigned SSP1DATPPS             :5;
    };
} SSP1DATPPSbits_t;
extern volatile SSP1DATPPSbits_t SSP1DATPPSbits __at(0x1EC6);
// bitfield macros
#define _SSP1DATPPS_SSP1DATPPS0_POSN                        0x0
#define _SSP1DATPPS_SSP1DATPPS0_POSITION                    0x0
#define _SSP1DATPPS_SSP1DATPPS0_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS0_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS0_MASK                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSN                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSITION                    0x1
#define _SSP1DATPPS_SSP1DATPPS1_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS1_MASK                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSN                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSITION                    0x2
#define _SSP1DATPPS_SSP1DATPPS2_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS2_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS2_MASK                        0x4
#define _SSP1DATPPS_SSP1DATPPS3_POSN                        0x3
#define _SSP1DATPPS_SSP1DATPPS3_POSITION                    0x3
#define _SSP1DATPPS_SSP1DATPPS3_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS3_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS3_MASK                        0x8
#define _SSP1DATPPS_SSP1DATPPS4_POSN                        0x4
#define _SSP1DATPPS_SSP1DATPPS4_POSITION                    0x4
#define _SSP1DATPPS_SSP1DATPPS4_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS4_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS4_MASK                        0x10
#define _SSP1DATPPS_SSP1DATPPS_POSN                         0x0
#define _SSP1DATPPS_SSP1DATPPS_POSITION                     0x0
#define _SSP1DATPPS_SSP1DATPPS_SIZE                         0x5
#define _SSP1DATPPS_SSP1DATPPS_LENGTH                       0x5
#define _SSP1DATPPS_SSP1DATPPS_MASK                         0x1F

// Register: SSP1SSPPS
#define SSP1SSPPS SSP1SSPPS
extern volatile unsigned char           SSP1SSPPS           __at(0x1EC7);
#ifndef _LIB_BUILD
asm("SSP1SSPPS equ 01EC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1SSPPS0             :1;
        unsigned SSP1SSPPS1             :1;
        unsigned SSP1SSPPS2             :1;
        unsigned SSP1SSPPS3             :1;
        unsigned SSP1SSPPS4             :1;
    };
    struct {
        unsigned SSP1SSPPS              :5;
    };
} SSP1SSPPSbits_t;
extern volatile SSP1SSPPSbits_t SSP1SSPPSbits __at(0x1EC7);
// bitfield macros
#define _SSP1SSPPS_SSP1SSPPS0_POSN                          0x0
#define _SSP1SSPPS_SSP1SSPPS0_POSITION                      0x0
#define _SSP1SSPPS_SSP1SSPPS0_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS0_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS0_MASK                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSN                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSITION                      0x1
#define _SSP1SSPPS_SSP1SSPPS1_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS1_MASK                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSN                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSITION                      0x2
#define _SSP1SSPPS_SSP1SSPPS2_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS2_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS2_MASK                          0x4
#define _SSP1SSPPS_SSP1SSPPS3_POSN                          0x3
#define _SSP1SSPPS_SSP1SSPPS3_POSITION                      0x3
#define _SSP1SSPPS_SSP1SSPPS3_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS3_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS3_MASK                          0x8
#define _SSP1SSPPS_SSP1SSPPS4_POSN                          0x4
#define _SSP1SSPPS_SSP1SSPPS4_POSITION                      0x4
#define _SSP1SSPPS_SSP1SSPPS4_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS4_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS4_MASK                          0x10
#define _SSP1SSPPS_SSP1SSPPS_POSN                           0x0
#define _SSP1SSPPS_SSP1SSPPS_POSITION                       0x0
#define _SSP1SSPPS_SSP1SSPPS_SIZE                           0x5
#define _SSP1SSPPS_SSP1SSPPS_LENGTH                         0x5
#define _SSP1SSPPS_SSP1SSPPS_MASK                           0x1F

// Register: SSP2CLKPPS
#define SSP2CLKPPS SSP2CLKPPS
extern volatile unsigned char           SSP2CLKPPS          __at(0x1EC8);
#ifndef _LIB_BUILD
asm("SSP2CLKPPS equ 01EC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP2CLKPPS0            :1;
        unsigned SSP2CLKPPS1            :1;
        unsigned SSP2CLKPPS2            :1;
        unsigned SSP2CLKPPS3            :1;
        unsigned SSP2CLKPPS4            :1;
    };
    struct {
        unsigned SSP2CLKPPS             :5;
    };
} SSP2CLKPPSbits_t;
extern volatile SSP2CLKPPSbits_t SSP2CLKPPSbits __at(0x1EC8);
// bitfield macros
#define _SSP2CLKPPS_SSP2CLKPPS0_POSN                        0x0
#define _SSP2CLKPPS_SSP2CLKPPS0_POSITION                    0x0
#define _SSP2CLKPPS_SSP2CLKPPS0_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS0_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS0_MASK                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_POSN                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_POSITION                    0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS1_MASK                        0x2
#define _SSP2CLKPPS_SSP2CLKPPS2_POSN                        0x2
#define _SSP2CLKPPS_SSP2CLKPPS2_POSITION                    0x2
#define _SSP2CLKPPS_SSP2CLKPPS2_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS2_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS2_MASK                        0x4
#define _SSP2CLKPPS_SSP2CLKPPS3_POSN                        0x3
#define _SSP2CLKPPS_SSP2CLKPPS3_POSITION                    0x3
#define _SSP2CLKPPS_SSP2CLKPPS3_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS3_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS3_MASK                        0x8
#define _SSP2CLKPPS_SSP2CLKPPS4_POSN                        0x4
#define _SSP2CLKPPS_SSP2CLKPPS4_POSITION                    0x4
#define _SSP2CLKPPS_SSP2CLKPPS4_SIZE                        0x1
#define _SSP2CLKPPS_SSP2CLKPPS4_LENGTH                      0x1
#define _SSP2CLKPPS_SSP2CLKPPS4_MASK                        0x10
#define _SSP2CLKPPS_SSP2CLKPPS_POSN                         0x0
#define _SSP2CLKPPS_SSP2CLKPPS_POSITION                     0x0
#define _SSP2CLKPPS_SSP2CLKPPS_SIZE                         0x5
#define _SSP2CLKPPS_SSP2CLKPPS_LENGTH                       0x5
#define _SSP2CLKPPS_SSP2CLKPPS_MASK                         0x1F

// Register: SSP2DATPPS
#define SSP2DATPPS SSP2DATPPS
extern volatile unsigned char           SSP2DATPPS          __at(0x1EC9);
#ifndef _LIB_BUILD
asm("SSP2DATPPS equ 01EC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP2DATPPS0            :1;
        unsigned SSP2DATPPS1            :1;
        unsigned SSP2DATPPS2            :1;
        unsigned SSP2DATPPS3            :1;
        unsigned SSP2DATPPS4            :1;
    };
    struct {
        unsigned SSP2DATPPS             :5;
    };
} SSP2DATPPSbits_t;
extern volatile SSP2DATPPSbits_t SSP2DATPPSbits __at(0x1EC9);
// bitfield macros
#define _SSP2DATPPS_SSP2DATPPS0_POSN                        0x0
#define _SSP2DATPPS_SSP2DATPPS0_POSITION                    0x0
#define _SSP2DATPPS_SSP2DATPPS0_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS0_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS0_MASK                        0x1
#define _SSP2DATPPS_SSP2DATPPS1_POSN                        0x1
#define _SSP2DATPPS_SSP2DATPPS1_POSITION                    0x1
#define _SSP2DATPPS_SSP2DATPPS1_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS1_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS1_MASK                        0x2
#define _SSP2DATPPS_SSP2DATPPS2_POSN                        0x2
#define _SSP2DATPPS_SSP2DATPPS2_POSITION                    0x2
#define _SSP2DATPPS_SSP2DATPPS2_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS2_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS2_MASK                        0x4
#define _SSP2DATPPS_SSP2DATPPS3_POSN                        0x3
#define _SSP2DATPPS_SSP2DATPPS3_POSITION                    0x3
#define _SSP2DATPPS_SSP2DATPPS3_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS3_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS3_MASK                        0x8
#define _SSP2DATPPS_SSP2DATPPS4_POSN                        0x4
#define _SSP2DATPPS_SSP2DATPPS4_POSITION                    0x4
#define _SSP2DATPPS_SSP2DATPPS4_SIZE                        0x1
#define _SSP2DATPPS_SSP2DATPPS4_LENGTH                      0x1
#define _SSP2DATPPS_SSP2DATPPS4_MASK                        0x10
#define _SSP2DATPPS_SSP2DATPPS_POSN                         0x0
#define _SSP2DATPPS_SSP2DATPPS_POSITION                     0x0
#define _SSP2DATPPS_SSP2DATPPS_SIZE                         0x5
#define _SSP2DATPPS_SSP2DATPPS_LENGTH                       0x5
#define _SSP2DATPPS_SSP2DATPPS_MASK                         0x1F

// Register: SSP2SSPPS
#define SSP2SSPPS SSP2SSPPS
extern volatile unsigned char           SSP2SSPPS           __at(0x1ECA);
#ifndef _LIB_BUILD
asm("SSP2SSPPS equ 01ECAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP2SSPPS0             :1;
        unsigned SSP2SSPPS1             :1;
        unsigned SSP2SSPPS2             :1;
        unsigned SSP2SSPPS3             :1;
        unsigned SSP2SSPPS4             :1;
    };
    struct {
        unsigned SSP2SSPPS              :5;
    };
} SSP2SSPPSbits_t;
extern volatile SSP2SSPPSbits_t SSP2SSPPSbits __at(0x1ECA);
// bitfield macros
#define _SSP2SSPPS_SSP2SSPPS0_POSN                          0x0
#define _SSP2SSPPS_SSP2SSPPS0_POSITION                      0x0
#define _SSP2SSPPS_SSP2SSPPS0_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS0_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS0_MASK                          0x1
#define _SSP2SSPPS_SSP2SSPPS1_POSN                          0x1
#define _SSP2SSPPS_SSP2SSPPS1_POSITION                      0x1
#define _SSP2SSPPS_SSP2SSPPS1_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS1_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS1_MASK                          0x2
#define _SSP2SSPPS_SSP2SSPPS2_POSN                          0x2
#define _SSP2SSPPS_SSP2SSPPS2_POSITION                      0x2
#define _SSP2SSPPS_SSP2SSPPS2_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS2_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS2_MASK                          0x4
#define _SSP2SSPPS_SSP2SSPPS3_POSN                          0x3
#define _SSP2SSPPS_SSP2SSPPS3_POSITION                      0x3
#define _SSP2SSPPS_SSP2SSPPS3_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS3_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS3_MASK                          0x8
#define _SSP2SSPPS_SSP2SSPPS4_POSN                          0x4
#define _SSP2SSPPS_SSP2SSPPS4_POSITION                      0x4
#define _SSP2SSPPS_SSP2SSPPS4_SIZE                          0x1
#define _SSP2SSPPS_SSP2SSPPS4_LENGTH                        0x1
#define _SSP2SSPPS_SSP2SSPPS4_MASK                          0x10
#define _SSP2SSPPS_SSP2SSPPS_POSN                           0x0
#define _SSP2SSPPS_SSP2SSPPS_POSITION                       0x0
#define _SSP2SSPPS_SSP2SSPPS_SIZE                           0x5
#define _SSP2SSPPS_SSP2SSPPS_LENGTH                         0x5
#define _SSP2SSPPS_SSP2SSPPS_MASK                           0x1F

// Register: RXPPS
#define RXPPS RXPPS
extern volatile unsigned char           RXPPS               __at(0x1ECB);
#ifndef _LIB_BUILD
asm("RXPPS equ 01ECBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXPPS0                 :1;
        unsigned RXPPS1                 :1;
        unsigned RXPPS2                 :1;
        unsigned RXPPS3                 :1;
        unsigned RXPPS4                 :1;
    };
    struct {
        unsigned RXPPS                  :5;
    };
} RXPPSbits_t;
extern volatile RXPPSbits_t RXPPSbits __at(0x1ECB);
// bitfield macros
#define _RXPPS_RXPPS0_POSN                                  0x0
#define _RXPPS_RXPPS0_POSITION                              0x0
#define _RXPPS_RXPPS0_SIZE                                  0x1
#define _RXPPS_RXPPS0_LENGTH                                0x1
#define _RXPPS_RXPPS0_MASK                                  0x1
#define _RXPPS_RXPPS1_POSN                                  0x1
#define _RXPPS_RXPPS1_POSITION                              0x1
#define _RXPPS_RXPPS1_SIZE                                  0x1
#define _RXPPS_RXPPS1_LENGTH                                0x1
#define _RXPPS_RXPPS1_MASK                                  0x2
#define _RXPPS_RXPPS2_POSN                                  0x2
#define _RXPPS_RXPPS2_POSITION                              0x2
#define _RXPPS_RXPPS2_SIZE                                  0x1
#define _RXPPS_RXPPS2_LENGTH                                0x1
#define _RXPPS_RXPPS2_MASK                                  0x4
#define _RXPPS_RXPPS3_POSN                                  0x3
#define _RXPPS_RXPPS3_POSITION                              0x3
#define _RXPPS_RXPPS3_SIZE                                  0x1
#define _RXPPS_RXPPS3_LENGTH                                0x1
#define _RXPPS_RXPPS3_MASK                                  0x8
#define _RXPPS_RXPPS4_POSN                                  0x4
#define _RXPPS_RXPPS4_POSITION                              0x4
#define _RXPPS_RXPPS4_SIZE                                  0x1
#define _RXPPS_RXPPS4_LENGTH                                0x1
#define _RXPPS_RXPPS4_MASK                                  0x10
#define _RXPPS_RXPPS_POSN                                   0x0
#define _RXPPS_RXPPS_POSITION                               0x0
#define _RXPPS_RXPPS_SIZE                                   0x5
#define _RXPPS_RXPPS_LENGTH                                 0x5
#define _RXPPS_RXPPS_MASK                                   0x1F

// Register: TXPPS
#define TXPPS TXPPS
extern volatile unsigned char           TXPPS               __at(0x1ECC);
#ifndef _LIB_BUILD
asm("TXPPS equ 01ECCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXPPS0                 :1;
        unsigned TXPPS1                 :1;
        unsigned TXPPS2                 :1;
        unsigned TXPPS3                 :1;
        unsigned TXPPS4                 :1;
    };
    struct {
        unsigned TXPPS                  :5;
    };
} TXPPSbits_t;
extern volatile TXPPSbits_t TXPPSbits __at(0x1ECC);
// bitfield macros
#define _TXPPS_TXPPS0_POSN                                  0x0
#define _TXPPS_TXPPS0_POSITION                              0x0
#define _TXPPS_TXPPS0_SIZE                                  0x1
#define _TXPPS_TXPPS0_LENGTH                                0x1
#define _TXPPS_TXPPS0_MASK                                  0x1
#define _TXPPS_TXPPS1_POSN                                  0x1
#define _TXPPS_TXPPS1_POSITION                              0x1
#define _TXPPS_TXPPS1_SIZE                                  0x1
#define _TXPPS_TXPPS1_LENGTH                                0x1
#define _TXPPS_TXPPS1_MASK                                  0x2
#define _TXPPS_TXPPS2_POSN                                  0x2
#define _TXPPS_TXPPS2_POSITION                              0x2
#define _TXPPS_TXPPS2_SIZE                                  0x1
#define _TXPPS_TXPPS2_LENGTH                                0x1
#define _TXPPS_TXPPS2_MASK                                  0x4
#define _TXPPS_TXPPS3_POSN                                  0x3
#define _TXPPS_TXPPS3_POSITION                              0x3
#define _TXPPS_TXPPS3_SIZE                                  0x1
#define _TXPPS_TXPPS3_LENGTH                                0x1
#define _TXPPS_TXPPS3_MASK                                  0x8
#define _TXPPS_TXPPS4_POSN                                  0x4
#define _TXPPS_TXPPS4_POSITION                              0x4
#define _TXPPS_TXPPS4_SIZE                                  0x1
#define _TXPPS_TXPPS4_LENGTH                                0x1
#define _TXPPS_TXPPS4_MASK                                  0x10
#define _TXPPS_TXPPS_POSN                                   0x0
#define _TXPPS_TXPPS_POSITION                               0x0
#define _TXPPS_TXPPS_SIZE                                   0x5
#define _TXPPS_TXPPS_LENGTH                                 0x5
#define _TXPPS_TXPPS_MASK                                   0x1F

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x1F10);
#ifndef _LIB_BUILD
asm("RA0PPS equ 01F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
        unsigned RA0PPS5                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x1F10);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10
#define _RA0PPS_RA0PPS5_POSN                                0x5
#define _RA0PPS_RA0PPS5_POSITION                            0x5
#define _RA0PPS_RA0PPS5_SIZE                                0x1
#define _RA0PPS_RA0PPS5_LENGTH                              0x1
#define _RA0PPS_RA0PPS5_MASK                                0x20

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x1F11);
#ifndef _LIB_BUILD
asm("RA1PPS equ 01F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
        unsigned RA1PPS5                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x1F11);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10
#define _RA1PPS_RA1PPS5_POSN                                0x5
#define _RA1PPS_RA1PPS5_POSITION                            0x5
#define _RA1PPS_RA1PPS5_SIZE                                0x1
#define _RA1PPS_RA1PPS5_LENGTH                              0x1
#define _RA1PPS_RA1PPS5_MASK                                0x20

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x1F12);
#ifndef _LIB_BUILD
asm("RA2PPS equ 01F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
        unsigned RA2PPS5                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x1F12);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10
#define _RA2PPS_RA2PPS5_POSN                                0x5
#define _RA2PPS_RA2PPS5_POSITION                            0x5
#define _RA2PPS_RA2PPS5_SIZE                                0x1
#define _RA2PPS_RA2PPS5_LENGTH                              0x1
#define _RA2PPS_RA2PPS5_MASK                                0x20

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0x1F13);
#ifndef _LIB_BUILD
asm("RA3PPS equ 01F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
        unsigned RA3PPS5                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0x1F13);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10
#define _RA3PPS_RA3PPS5_POSN                                0x5
#define _RA3PPS_RA3PPS5_POSITION                            0x5
#define _RA3PPS_RA3PPS5_SIZE                                0x1
#define _RA3PPS_RA3PPS5_LENGTH                              0x1
#define _RA3PPS_RA3PPS5_MASK                                0x20

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x1F14);
#ifndef _LIB_BUILD
asm("RA4PPS equ 01F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
        unsigned RA4PPS5                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x1F14);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10
#define _RA4PPS_RA4PPS5_POSN                                0x5
#define _RA4PPS_RA4PPS5_POSITION                            0x5
#define _RA4PPS_RA4PPS5_SIZE                                0x1
#define _RA4PPS_RA4PPS5_LENGTH                              0x1
#define _RA4PPS_RA4PPS5_MASK                                0x20

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x1F15);
#ifndef _LIB_BUILD
asm("RA5PPS equ 01F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
        unsigned RA5PPS5                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x1F15);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10
#define _RA5PPS_RA5PPS5_POSN                                0x5
#define _RA5PPS_RA5PPS5_POSITION                            0x5
#define _RA5PPS_RA5PPS5_SIZE                                0x1
#define _RA5PPS_RA5PPS5_LENGTH                              0x1
#define _RA5PPS_RA5PPS5_MASK                                0x20

// Register: RA6PPS
#define RA6PPS RA6PPS
extern volatile unsigned char           RA6PPS              __at(0x1F16);
#ifndef _LIB_BUILD
asm("RA6PPS equ 01F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA6PPS0                :1;
        unsigned RA6PPS1                :1;
        unsigned RA6PPS2                :1;
        unsigned RA6PPS3                :1;
        unsigned RA6PPS4                :1;
        unsigned RA6PPS5                :1;
    };
} RA6PPSbits_t;
extern volatile RA6PPSbits_t RA6PPSbits __at(0x1F16);
// bitfield macros
#define _RA6PPS_RA6PPS0_POSN                                0x0
#define _RA6PPS_RA6PPS0_POSITION                            0x0
#define _RA6PPS_RA6PPS0_SIZE                                0x1
#define _RA6PPS_RA6PPS0_LENGTH                              0x1
#define _RA6PPS_RA6PPS0_MASK                                0x1
#define _RA6PPS_RA6PPS1_POSN                                0x1
#define _RA6PPS_RA6PPS1_POSITION                            0x1
#define _RA6PPS_RA6PPS1_SIZE                                0x1
#define _RA6PPS_RA6PPS1_LENGTH                              0x1
#define _RA6PPS_RA6PPS1_MASK                                0x2
#define _RA6PPS_RA6PPS2_POSN                                0x2
#define _RA6PPS_RA6PPS2_POSITION                            0x2
#define _RA6PPS_RA6PPS2_SIZE                                0x1
#define _RA6PPS_RA6PPS2_LENGTH                              0x1
#define _RA6PPS_RA6PPS2_MASK                                0x4
#define _RA6PPS_RA6PPS3_POSN                                0x3
#define _RA6PPS_RA6PPS3_POSITION                            0x3
#define _RA6PPS_RA6PPS3_SIZE                                0x1
#define _RA6PPS_RA6PPS3_LENGTH                              0x1
#define _RA6PPS_RA6PPS3_MASK                                0x8
#define _RA6PPS_RA6PPS4_POSN                                0x4
#define _RA6PPS_RA6PPS4_POSITION                            0x4
#define _RA6PPS_RA6PPS4_SIZE                                0x1
#define _RA6PPS_RA6PPS4_LENGTH                              0x1
#define _RA6PPS_RA6PPS4_MASK                                0x10
#define _RA6PPS_RA6PPS5_POSN                                0x5
#define _RA6PPS_RA6PPS5_POSITION                            0x5
#define _RA6PPS_RA6PPS5_SIZE                                0x1
#define _RA6PPS_RA6PPS5_LENGTH                              0x1
#define _RA6PPS_RA6PPS5_MASK                                0x20

// Register: RA7PPS
#define RA7PPS RA7PPS
extern volatile unsigned char           RA7PPS              __at(0x1F17);
#ifndef _LIB_BUILD
asm("RA7PPS equ 01F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA7PPS0                :1;
        unsigned RA7PPS1                :1;
        unsigned RA7PPS2                :1;
        unsigned RA7PPS3                :1;
        unsigned RA7PPS4                :1;
        unsigned RA7PPS5                :1;
    };
} RA7PPSbits_t;
extern volatile RA7PPSbits_t RA7PPSbits __at(0x1F17);
// bitfield macros
#define _RA7PPS_RA7PPS0_POSN                                0x0
#define _RA7PPS_RA7PPS0_POSITION                            0x0
#define _RA7PPS_RA7PPS0_SIZE                                0x1
#define _RA7PPS_RA7PPS0_LENGTH                              0x1
#define _RA7PPS_RA7PPS0_MASK                                0x1
#define _RA7PPS_RA7PPS1_POSN                                0x1
#define _RA7PPS_RA7PPS1_POSITION                            0x1
#define _RA7PPS_RA7PPS1_SIZE                                0x1
#define _RA7PPS_RA7PPS1_LENGTH                              0x1
#define _RA7PPS_RA7PPS1_MASK                                0x2
#define _RA7PPS_RA7PPS2_POSN                                0x2
#define _RA7PPS_RA7PPS2_POSITION                            0x2
#define _RA7PPS_RA7PPS2_SIZE                                0x1
#define _RA7PPS_RA7PPS2_LENGTH                              0x1
#define _RA7PPS_RA7PPS2_MASK                                0x4
#define _RA7PPS_RA7PPS3_POSN                                0x3
#define _RA7PPS_RA7PPS3_POSITION                            0x3
#define _RA7PPS_RA7PPS3_SIZE                                0x1
#define _RA7PPS_RA7PPS3_LENGTH                              0x1
#define _RA7PPS_RA7PPS3_MASK                                0x8
#define _RA7PPS_RA7PPS4_POSN                                0x4
#define _RA7PPS_RA7PPS4_POSITION                            0x4
#define _RA7PPS_RA7PPS4_SIZE                                0x1
#define _RA7PPS_RA7PPS4_LENGTH                              0x1
#define _RA7PPS_RA7PPS4_MASK                                0x10
#define _RA7PPS_RA7PPS5_POSN                                0x5
#define _RA7PPS_RA7PPS5_POSITION                            0x5
#define _RA7PPS_RA7PPS5_SIZE                                0x1
#define _RA7PPS_RA7PPS5_LENGTH                              0x1
#define _RA7PPS_RA7PPS5_MASK                                0x20

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0x1F18);
#ifndef _LIB_BUILD
asm("RB0PPS equ 01F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
        unsigned RB0PPS5                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0x1F18);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10
#define _RB0PPS_RB0PPS5_POSN                                0x5
#define _RB0PPS_RB0PPS5_POSITION                            0x5
#define _RB0PPS_RB0PPS5_SIZE                                0x1
#define _RB0PPS_RB0PPS5_LENGTH                              0x1
#define _RB0PPS_RB0PPS5_MASK                                0x20

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0x1F19);
#ifndef _LIB_BUILD
asm("RB1PPS equ 01F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
        unsigned RB1PPS5                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0x1F19);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10
#define _RB1PPS_RB1PPS5_POSN                                0x5
#define _RB1PPS_RB1PPS5_POSITION                            0x5
#define _RB1PPS_RB1PPS5_SIZE                                0x1
#define _RB1PPS_RB1PPS5_LENGTH                              0x1
#define _RB1PPS_RB1PPS5_MASK                                0x20

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0x1F1A);
#ifndef _LIB_BUILD
asm("RB2PPS equ 01F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
        unsigned RB2PPS5                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0x1F1A);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10
#define _RB2PPS_RB2PPS5_POSN                                0x5
#define _RB2PPS_RB2PPS5_POSITION                            0x5
#define _RB2PPS_RB2PPS5_SIZE                                0x1
#define _RB2PPS_RB2PPS5_LENGTH                              0x1
#define _RB2PPS_RB2PPS5_MASK                                0x20

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0x1F1B);
#ifndef _LIB_BUILD
asm("RB3PPS equ 01F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
        unsigned RB3PPS5                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0x1F1B);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10
#define _RB3PPS_RB3PPS5_POSN                                0x5
#define _RB3PPS_RB3PPS5_POSITION                            0x5
#define _RB3PPS_RB3PPS5_SIZE                                0x1
#define _RB3PPS_RB3PPS5_LENGTH                              0x1
#define _RB3PPS_RB3PPS5_MASK                                0x20

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0x1F1C);
#ifndef _LIB_BUILD
asm("RB4PPS equ 01F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
        unsigned RB4PPS5                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0x1F1C);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10
#define _RB4PPS_RB4PPS5_POSN                                0x5
#define _RB4PPS_RB4PPS5_POSITION                            0x5
#define _RB4PPS_RB4PPS5_SIZE                                0x1
#define _RB4PPS_RB4PPS5_LENGTH                              0x1
#define _RB4PPS_RB4PPS5_MASK                                0x20

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0x1F1D);
#ifndef _LIB_BUILD
asm("RB5PPS equ 01F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
        unsigned RB5PPS5                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0x1F1D);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10
#define _RB5PPS_RB5PPS5_POSN                                0x5
#define _RB5PPS_RB5PPS5_POSITION                            0x5
#define _RB5PPS_RB5PPS5_SIZE                                0x1
#define _RB5PPS_RB5PPS5_LENGTH                              0x1
#define _RB5PPS_RB5PPS5_MASK                                0x20

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0x1F1E);
#ifndef _LIB_BUILD
asm("RB6PPS equ 01F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
        unsigned RB6PPS5                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0x1F1E);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10
#define _RB6PPS_RB6PPS5_POSN                                0x5
#define _RB6PPS_RB6PPS5_POSITION                            0x5
#define _RB6PPS_RB6PPS5_SIZE                                0x1
#define _RB6PPS_RB6PPS5_LENGTH                              0x1
#define _RB6PPS_RB6PPS5_MASK                                0x20

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0x1F1F);
#ifndef _LIB_BUILD
asm("RB7PPS equ 01F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
        unsigned RB7PPS5                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0x1F1F);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10
#define _RB7PPS_RB7PPS5_POSN                                0x5
#define _RB7PPS_RB7PPS5_POSITION                            0x5
#define _RB7PPS_RB7PPS5_SIZE                                0x1
#define _RB7PPS_RB7PPS5_LENGTH                              0x1
#define _RB7PPS_RB7PPS5_MASK                                0x20

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x1F20);
#ifndef _LIB_BUILD
asm("RC0PPS equ 01F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
        unsigned RC0PPS5                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x1F20);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10
#define _RC0PPS_RC0PPS5_POSN                                0x5
#define _RC0PPS_RC0PPS5_POSITION                            0x5
#define _RC0PPS_RC0PPS5_SIZE                                0x1
#define _RC0PPS_RC0PPS5_LENGTH                              0x1
#define _RC0PPS_RC0PPS5_MASK                                0x20

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x1F21);
#ifndef _LIB_BUILD
asm("RC1PPS equ 01F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
        unsigned RC1PPS5                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x1F21);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10
#define _RC1PPS_RC1PPS5_POSN                                0x5
#define _RC1PPS_RC1PPS5_POSITION                            0x5
#define _RC1PPS_RC1PPS5_SIZE                                0x1
#define _RC1PPS_RC1PPS5_LENGTH                              0x1
#define _RC1PPS_RC1PPS5_MASK                                0x20

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0x1F22);
#ifndef _LIB_BUILD
asm("RC2PPS equ 01F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
        unsigned RC2PPS5                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0x1F22);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10
#define _RC2PPS_RC2PPS5_POSN                                0x5
#define _RC2PPS_RC2PPS5_POSITION                            0x5
#define _RC2PPS_RC2PPS5_SIZE                                0x1
#define _RC2PPS_RC2PPS5_LENGTH                              0x1
#define _RC2PPS_RC2PPS5_MASK                                0x20

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x1F23);
#ifndef _LIB_BUILD
asm("RC3PPS equ 01F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
        unsigned RC3PPS5                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x1F23);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10
#define _RC3PPS_RC3PPS5_POSN                                0x5
#define _RC3PPS_RC3PPS5_POSITION                            0x5
#define _RC3PPS_RC3PPS5_SIZE                                0x1
#define _RC3PPS_RC3PPS5_LENGTH                              0x1
#define _RC3PPS_RC3PPS5_MASK                                0x20

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x1F24);
#ifndef _LIB_BUILD
asm("RC4PPS equ 01F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
        unsigned RC4PPS5                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x1F24);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10
#define _RC4PPS_RC4PPS5_POSN                                0x5
#define _RC4PPS_RC4PPS5_POSITION                            0x5
#define _RC4PPS_RC4PPS5_SIZE                                0x1
#define _RC4PPS_RC4PPS5_LENGTH                              0x1
#define _RC4PPS_RC4PPS5_MASK                                0x20

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x1F25);
#ifndef _LIB_BUILD
asm("RC5PPS equ 01F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
        unsigned RC5PPS5                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x1F25);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10
#define _RC5PPS_RC5PPS5_POSN                                0x5
#define _RC5PPS_RC5PPS5_POSITION                            0x5
#define _RC5PPS_RC5PPS5_SIZE                                0x1
#define _RC5PPS_RC5PPS5_LENGTH                              0x1
#define _RC5PPS_RC5PPS5_MASK                                0x20

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0x1F26);
#ifndef _LIB_BUILD
asm("RC6PPS equ 01F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
        unsigned RC6PPS5                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0x1F26);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10
#define _RC6PPS_RC6PPS5_POSN                                0x5
#define _RC6PPS_RC6PPS5_POSITION                            0x5
#define _RC6PPS_RC6PPS5_SIZE                                0x1
#define _RC6PPS_RC6PPS5_LENGTH                              0x1
#define _RC6PPS_RC6PPS5_MASK                                0x20

// Register: RC7PPS
#define RC7PPS RC7PPS
extern volatile unsigned char           RC7PPS              __at(0x1F27);
#ifndef _LIB_BUILD
asm("RC7PPS equ 01F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC7PPS0                :1;
        unsigned RC7PPS1                :1;
        unsigned RC7PPS2                :1;
        unsigned RC7PPS3                :1;
        unsigned RC7PPS4                :1;
        unsigned RC7PPS5                :1;
    };
} RC7PPSbits_t;
extern volatile RC7PPSbits_t RC7PPSbits __at(0x1F27);
// bitfield macros
#define _RC7PPS_RC7PPS0_POSN                                0x0
#define _RC7PPS_RC7PPS0_POSITION                            0x0
#define _RC7PPS_RC7PPS0_SIZE                                0x1
#define _RC7PPS_RC7PPS0_LENGTH                              0x1
#define _RC7PPS_RC7PPS0_MASK                                0x1
#define _RC7PPS_RC7PPS1_POSN                                0x1
#define _RC7PPS_RC7PPS1_POSITION                            0x1
#define _RC7PPS_RC7PPS1_SIZE                                0x1
#define _RC7PPS_RC7PPS1_LENGTH                              0x1
#define _RC7PPS_RC7PPS1_MASK                                0x2
#define _RC7PPS_RC7PPS2_POSN                                0x2
#define _RC7PPS_RC7PPS2_POSITION                            0x2
#define _RC7PPS_RC7PPS2_SIZE                                0x1
#define _RC7PPS_RC7PPS2_LENGTH                              0x1
#define _RC7PPS_RC7PPS2_MASK                                0x4
#define _RC7PPS_RC7PPS3_POSN                                0x3
#define _RC7PPS_RC7PPS3_POSITION                            0x3
#define _RC7PPS_RC7PPS3_SIZE                                0x1
#define _RC7PPS_RC7PPS3_LENGTH                              0x1
#define _RC7PPS_RC7PPS3_MASK                                0x8
#define _RC7PPS_RC7PPS4_POSN                                0x4
#define _RC7PPS_RC7PPS4_POSITION                            0x4
#define _RC7PPS_RC7PPS4_SIZE                                0x1
#define _RC7PPS_RC7PPS4_LENGTH                              0x1
#define _RC7PPS_RC7PPS4_MASK                                0x10
#define _RC7PPS_RC7PPS5_POSN                                0x5
#define _RC7PPS_RC7PPS5_POSITION                            0x5
#define _RC7PPS_RC7PPS5_SIZE                                0x1
#define _RC7PPS_RC7PPS5_LENGTH                              0x1
#define _RC7PPS_RC7PPS5_MASK                                0x20

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x1F38);
#ifndef _LIB_BUILD
asm("ANSELA equ 01F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned ANSA3                  :1;
        unsigned ANSA4                  :1;
        unsigned ANSA5                  :1;
        unsigned ANSA6                  :1;
        unsigned ANSA7                  :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x1F38);
// bitfield macros
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA3_POSN                                  0x3
#define _ANSELA_ANSA3_POSITION                              0x3
#define _ANSELA_ANSA3_SIZE                                  0x1
#define _ANSELA_ANSA3_LENGTH                                0x1
#define _ANSELA_ANSA3_MASK                                  0x8
#define _ANSELA_ANSA4_POSN                                  0x4
#define _ANSELA_ANSA4_POSITION                              0x4
#define _ANSELA_ANSA4_SIZE                                  0x1
#define _ANSELA_ANSA4_LENGTH                                0x1
#define _ANSELA_ANSA4_MASK                                  0x10
#define _ANSELA_ANSA5_POSN                                  0x5
#define _ANSELA_ANSA5_POSITION                              0x5
#define _ANSELA_ANSA5_SIZE                                  0x1
#define _ANSELA_ANSA5_LENGTH                                0x1
#define _ANSELA_ANSA5_MASK                                  0x20
#define _ANSELA_ANSA6_POSN                                  0x6
#define _ANSELA_ANSA6_POSITION                              0x6
#define _ANSELA_ANSA6_SIZE                                  0x1
#define _ANSELA_ANSA6_LENGTH                                0x1
#define _ANSELA_ANSA6_MASK                                  0x40
#define _ANSELA_ANSA7_POSN                                  0x7
#define _ANSELA_ANSA7_POSITION                              0x7
#define _ANSELA_ANSA7_SIZE                                  0x1
#define _ANSELA_ANSA7_LENGTH                                0x1
#define _ANSELA_ANSA7_MASK                                  0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x1F39);
#ifndef _LIB_BUILD
asm("WPUA equ 01F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
        unsigned WPUA6                  :1;
        unsigned WPUA7                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x1F39);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA6_POSN                                    0x6
#define _WPUA_WPUA6_POSITION                                0x6
#define _WPUA_WPUA6_SIZE                                    0x1
#define _WPUA_WPUA6_LENGTH                                  0x1
#define _WPUA_WPUA6_MASK                                    0x40
#define _WPUA_WPUA7_POSN                                    0x7
#define _WPUA_WPUA7_POSITION                                0x7
#define _WPUA_WPUA7_SIZE                                    0x1
#define _WPUA_WPUA7_LENGTH                                  0x1
#define _WPUA_WPUA7_MASK                                    0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x1F3A);
#ifndef _LIB_BUILD
asm("ODCONA equ 01F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
        unsigned ODCA6                  :1;
        unsigned ODCA7                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x1F3A);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20
#define _ODCONA_ODCA6_POSN                                  0x6
#define _ODCONA_ODCA6_POSITION                              0x6
#define _ODCONA_ODCA6_SIZE                                  0x1
#define _ODCONA_ODCA6_LENGTH                                0x1
#define _ODCONA_ODCA6_MASK                                  0x40
#define _ODCONA_ODCA7_POSN                                  0x7
#define _ODCONA_ODCA7_POSITION                              0x7
#define _ODCONA_ODCA7_SIZE                                  0x1
#define _ODCONA_ODCA7_LENGTH                                0x1
#define _ODCONA_ODCA7_MASK                                  0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x1F3B);
#ifndef _LIB_BUILD
asm("SLRCONA equ 01F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
        unsigned SLRA6                  :1;
        unsigned SLRA7                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x1F3B);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20
#define _SLRCONA_SLRA6_POSN                                 0x6
#define _SLRCONA_SLRA6_POSITION                             0x6
#define _SLRCONA_SLRA6_SIZE                                 0x1
#define _SLRCONA_SLRA6_LENGTH                               0x1
#define _SLRCONA_SLRA6_MASK                                 0x40
#define _SLRCONA_SLRA7_POSN                                 0x7
#define _SLRCONA_SLRA7_POSITION                             0x7
#define _SLRCONA_SLRA7_SIZE                                 0x1
#define _SLRCONA_SLRA7_LENGTH                               0x1
#define _SLRCONA_SLRA7_MASK                                 0x80

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x1F3C);
#ifndef _LIB_BUILD
asm("INLVLA equ 01F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
        unsigned INLVLA6                :1;
        unsigned INLVLA7                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x1F3C);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20
#define _INLVLA_INLVLA6_POSN                                0x6
#define _INLVLA_INLVLA6_POSITION                            0x6
#define _INLVLA_INLVLA6_SIZE                                0x1
#define _INLVLA_INLVLA6_LENGTH                              0x1
#define _INLVLA_INLVLA6_MASK                                0x40
#define _INLVLA_INLVLA7_POSN                                0x7
#define _INLVLA_INLVLA7_POSITION                            0x7
#define _INLVLA_INLVLA7_SIZE                                0x1
#define _INLVLA_INLVLA7_LENGTH                              0x1
#define _INLVLA_INLVLA7_MASK                                0x80

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x1F3D);
#ifndef _LIB_BUILD
asm("IOCAP equ 01F3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
        unsigned IOCAP6                 :1;
        unsigned IOCAP7                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x1F3D);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20
#define _IOCAP_IOCAP6_POSN                                  0x6
#define _IOCAP_IOCAP6_POSITION                              0x6
#define _IOCAP_IOCAP6_SIZE                                  0x1
#define _IOCAP_IOCAP6_LENGTH                                0x1
#define _IOCAP_IOCAP6_MASK                                  0x40
#define _IOCAP_IOCAP7_POSN                                  0x7
#define _IOCAP_IOCAP7_POSITION                              0x7
#define _IOCAP_IOCAP7_SIZE                                  0x1
#define _IOCAP_IOCAP7_LENGTH                                0x1
#define _IOCAP_IOCAP7_MASK                                  0x80

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x1F3E);
#ifndef _LIB_BUILD
asm("IOCAN equ 01F3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
        unsigned IOCAN6                 :1;
        unsigned IOCAN7                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x1F3E);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20
#define _IOCAN_IOCAN6_POSN                                  0x6
#define _IOCAN_IOCAN6_POSITION                              0x6
#define _IOCAN_IOCAN6_SIZE                                  0x1
#define _IOCAN_IOCAN6_LENGTH                                0x1
#define _IOCAN_IOCAN6_MASK                                  0x40
#define _IOCAN_IOCAN7_POSN                                  0x7
#define _IOCAN_IOCAN7_POSITION                              0x7
#define _IOCAN_IOCAN7_SIZE                                  0x1
#define _IOCAN_IOCAN7_LENGTH                                0x1
#define _IOCAN_IOCAN7_MASK                                  0x80

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x1F3F);
#ifndef _LIB_BUILD
asm("IOCAF equ 01F3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
        unsigned IOCAF6                 :1;
        unsigned IOCAF7                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x1F3F);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20
#define _IOCAF_IOCAF6_POSN                                  0x6
#define _IOCAF_IOCAF6_POSITION                              0x6
#define _IOCAF_IOCAF6_SIZE                                  0x1
#define _IOCAF_IOCAF6_LENGTH                                0x1
#define _IOCAF_IOCAF6_MASK                                  0x40
#define _IOCAF_IOCAF7_POSN                                  0x7
#define _IOCAF_IOCAF7_POSITION                              0x7
#define _IOCAF_IOCAF7_SIZE                                  0x1
#define _IOCAF_IOCAF7_LENGTH                                0x1
#define _IOCAF_IOCAF7_MASK                                  0x80

// Register: CCDNA
#define CCDNA CCDNA
extern volatile unsigned char           CCDNA               __at(0x1F40);
#ifndef _LIB_BUILD
asm("CCDNA equ 01F40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDNA0                 :1;
        unsigned CCDNA1                 :1;
        unsigned CCDNA2                 :1;
        unsigned CCDNA3                 :1;
        unsigned CCDNA4                 :1;
        unsigned CCDNA5                 :1;
        unsigned CCDNA6                 :1;
        unsigned CCDNA7                 :1;
    };
} CCDNAbits_t;
extern volatile CCDNAbits_t CCDNAbits __at(0x1F40);
// bitfield macros
#define _CCDNA_CCDNA0_POSN                                  0x0
#define _CCDNA_CCDNA0_POSITION                              0x0
#define _CCDNA_CCDNA0_SIZE                                  0x1
#define _CCDNA_CCDNA0_LENGTH                                0x1
#define _CCDNA_CCDNA0_MASK                                  0x1
#define _CCDNA_CCDNA1_POSN                                  0x1
#define _CCDNA_CCDNA1_POSITION                              0x1
#define _CCDNA_CCDNA1_SIZE                                  0x1
#define _CCDNA_CCDNA1_LENGTH                                0x1
#define _CCDNA_CCDNA1_MASK                                  0x2
#define _CCDNA_CCDNA2_POSN                                  0x2
#define _CCDNA_CCDNA2_POSITION                              0x2
#define _CCDNA_CCDNA2_SIZE                                  0x1
#define _CCDNA_CCDNA2_LENGTH                                0x1
#define _CCDNA_CCDNA2_MASK                                  0x4
#define _CCDNA_CCDNA3_POSN                                  0x3
#define _CCDNA_CCDNA3_POSITION                              0x3
#define _CCDNA_CCDNA3_SIZE                                  0x1
#define _CCDNA_CCDNA3_LENGTH                                0x1
#define _CCDNA_CCDNA3_MASK                                  0x8
#define _CCDNA_CCDNA4_POSN                                  0x4
#define _CCDNA_CCDNA4_POSITION                              0x4
#define _CCDNA_CCDNA4_SIZE                                  0x1
#define _CCDNA_CCDNA4_LENGTH                                0x1
#define _CCDNA_CCDNA4_MASK                                  0x10
#define _CCDNA_CCDNA5_POSN                                  0x5
#define _CCDNA_CCDNA5_POSITION                              0x5
#define _CCDNA_CCDNA5_SIZE                                  0x1
#define _CCDNA_CCDNA5_LENGTH                                0x1
#define _CCDNA_CCDNA5_MASK                                  0x20
#define _CCDNA_CCDNA6_POSN                                  0x6
#define _CCDNA_CCDNA6_POSITION                              0x6
#define _CCDNA_CCDNA6_SIZE                                  0x1
#define _CCDNA_CCDNA6_LENGTH                                0x1
#define _CCDNA_CCDNA6_MASK                                  0x40
#define _CCDNA_CCDNA7_POSN                                  0x7
#define _CCDNA_CCDNA7_POSITION                              0x7
#define _CCDNA_CCDNA7_SIZE                                  0x1
#define _CCDNA_CCDNA7_LENGTH                                0x1
#define _CCDNA_CCDNA7_MASK                                  0x80

// Register: CCDPA
#define CCDPA CCDPA
extern volatile unsigned char           CCDPA               __at(0x1F41);
#ifndef _LIB_BUILD
asm("CCDPA equ 01F41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDPA0                 :1;
        unsigned CCDPA1                 :1;
        unsigned CCDPA2                 :1;
        unsigned CCDPA3                 :1;
        unsigned CCDPA4                 :1;
        unsigned CCDPA5                 :1;
        unsigned CCDPA6                 :1;
        unsigned CCDPA7                 :1;
    };
} CCDPAbits_t;
extern volatile CCDPAbits_t CCDPAbits __at(0x1F41);
// bitfield macros
#define _CCDPA_CCDPA0_POSN                                  0x0
#define _CCDPA_CCDPA0_POSITION                              0x0
#define _CCDPA_CCDPA0_SIZE                                  0x1
#define _CCDPA_CCDPA0_LENGTH                                0x1
#define _CCDPA_CCDPA0_MASK                                  0x1
#define _CCDPA_CCDPA1_POSN                                  0x1
#define _CCDPA_CCDPA1_POSITION                              0x1
#define _CCDPA_CCDPA1_SIZE                                  0x1
#define _CCDPA_CCDPA1_LENGTH                                0x1
#define _CCDPA_CCDPA1_MASK                                  0x2
#define _CCDPA_CCDPA2_POSN                                  0x2
#define _CCDPA_CCDPA2_POSITION                              0x2
#define _CCDPA_CCDPA2_SIZE                                  0x1
#define _CCDPA_CCDPA2_LENGTH                                0x1
#define _CCDPA_CCDPA2_MASK                                  0x4
#define _CCDPA_CCDPA3_POSN                                  0x3
#define _CCDPA_CCDPA3_POSITION                              0x3
#define _CCDPA_CCDPA3_SIZE                                  0x1
#define _CCDPA_CCDPA3_LENGTH                                0x1
#define _CCDPA_CCDPA3_MASK                                  0x8
#define _CCDPA_CCDPA4_POSN                                  0x4
#define _CCDPA_CCDPA4_POSITION                              0x4
#define _CCDPA_CCDPA4_SIZE                                  0x1
#define _CCDPA_CCDPA4_LENGTH                                0x1
#define _CCDPA_CCDPA4_MASK                                  0x10
#define _CCDPA_CCDPA5_POSN                                  0x5
#define _CCDPA_CCDPA5_POSITION                              0x5
#define _CCDPA_CCDPA5_SIZE                                  0x1
#define _CCDPA_CCDPA5_LENGTH                                0x1
#define _CCDPA_CCDPA5_MASK                                  0x20
#define _CCDPA_CCDPA6_POSN                                  0x6
#define _CCDPA_CCDPA6_POSITION                              0x6
#define _CCDPA_CCDPA6_SIZE                                  0x1
#define _CCDPA_CCDPA6_LENGTH                                0x1
#define _CCDPA_CCDPA6_MASK                                  0x40
#define _CCDPA_CCDPA7_POSN                                  0x7
#define _CCDPA_CCDPA7_POSITION                              0x7
#define _CCDPA_CCDPA7_SIZE                                  0x1
#define _CCDPA_CCDPA7_LENGTH                                0x1
#define _CCDPA_CCDPA7_MASK                                  0x80

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0x1F43);
#ifndef _LIB_BUILD
asm("ANSELB equ 01F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSB0                  :1;
        unsigned ANSB1                  :1;
        unsigned ANSB2                  :1;
        unsigned ANSB3                  :1;
        unsigned ANSB4                  :1;
        unsigned ANSB5                  :1;
        unsigned ANSB6                  :1;
        unsigned ANSB7                  :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0x1F43);
// bitfield macros
#define _ANSELB_ANSB0_POSN                                  0x0
#define _ANSELB_ANSB0_POSITION                              0x0
#define _ANSELB_ANSB0_SIZE                                  0x1
#define _ANSELB_ANSB0_LENGTH                                0x1
#define _ANSELB_ANSB0_MASK                                  0x1
#define _ANSELB_ANSB1_POSN                                  0x1
#define _ANSELB_ANSB1_POSITION                              0x1
#define _ANSELB_ANSB1_SIZE                                  0x1
#define _ANSELB_ANSB1_LENGTH                                0x1
#define _ANSELB_ANSB1_MASK                                  0x2
#define _ANSELB_ANSB2_POSN                                  0x2
#define _ANSELB_ANSB2_POSITION                              0x2
#define _ANSELB_ANSB2_SIZE                                  0x1
#define _ANSELB_ANSB2_LENGTH                                0x1
#define _ANSELB_ANSB2_MASK                                  0x4
#define _ANSELB_ANSB3_POSN                                  0x3
#define _ANSELB_ANSB3_POSITION                              0x3
#define _ANSELB_ANSB3_SIZE                                  0x1
#define _ANSELB_ANSB3_LENGTH                                0x1
#define _ANSELB_ANSB3_MASK                                  0x8
#define _ANSELB_ANSB4_POSN                                  0x4
#define _ANSELB_ANSB4_POSITION                              0x4
#define _ANSELB_ANSB4_SIZE                                  0x1
#define _ANSELB_ANSB4_LENGTH                                0x1
#define _ANSELB_ANSB4_MASK                                  0x10
#define _ANSELB_ANSB5_POSN                                  0x5
#define _ANSELB_ANSB5_POSITION                              0x5
#define _ANSELB_ANSB5_SIZE                                  0x1
#define _ANSELB_ANSB5_LENGTH                                0x1
#define _ANSELB_ANSB5_MASK                                  0x20
#define _ANSELB_ANSB6_POSN                                  0x6
#define _ANSELB_ANSB6_POSITION                              0x6
#define _ANSELB_ANSB6_SIZE                                  0x1
#define _ANSELB_ANSB6_LENGTH                                0x1
#define _ANSELB_ANSB6_MASK                                  0x40
#define _ANSELB_ANSB7_POSN                                  0x7
#define _ANSELB_ANSB7_POSITION                              0x7
#define _ANSELB_ANSB7_SIZE                                  0x1
#define _ANSELB_ANSB7_LENGTH                                0x1
#define _ANSELB_ANSB7_MASK                                  0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0x1F44);
#ifndef _LIB_BUILD
asm("WPUB equ 01F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0x1F44);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0x1F45);
#ifndef _LIB_BUILD
asm("ODCONB equ 01F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0x1F45);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0x1F46);
#ifndef _LIB_BUILD
asm("SLRCONB equ 01F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0x1F46);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0x1F47);
#ifndef _LIB_BUILD
asm("INLVLB equ 01F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0x1F47);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0x1F48);
#ifndef _LIB_BUILD
asm("IOCBP equ 01F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0x1F48);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0x1F49);
#ifndef _LIB_BUILD
asm("IOCBN equ 01F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0x1F49);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0x1F4A);
#ifndef _LIB_BUILD
asm("IOCBF equ 01F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0x1F4A);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: CCDNB
#define CCDNB CCDNB
extern volatile unsigned char           CCDNB               __at(0x1F4B);
#ifndef _LIB_BUILD
asm("CCDNB equ 01F4Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDNB0                 :1;
        unsigned CCDNB1                 :1;
        unsigned CCDNB2                 :1;
        unsigned CCDNB3                 :1;
        unsigned CCDNB4                 :1;
        unsigned CCDNB5                 :1;
        unsigned CCDNB6                 :1;
        unsigned CCDNB7                 :1;
    };
} CCDNBbits_t;
extern volatile CCDNBbits_t CCDNBbits __at(0x1F4B);
// bitfield macros
#define _CCDNB_CCDNB0_POSN                                  0x0
#define _CCDNB_CCDNB0_POSITION                              0x0
#define _CCDNB_CCDNB0_SIZE                                  0x1
#define _CCDNB_CCDNB0_LENGTH                                0x1
#define _CCDNB_CCDNB0_MASK                                  0x1
#define _CCDNB_CCDNB1_POSN                                  0x1
#define _CCDNB_CCDNB1_POSITION                              0x1
#define _CCDNB_CCDNB1_SIZE                                  0x1
#define _CCDNB_CCDNB1_LENGTH                                0x1
#define _CCDNB_CCDNB1_MASK                                  0x2
#define _CCDNB_CCDNB2_POSN                                  0x2
#define _CCDNB_CCDNB2_POSITION                              0x2
#define _CCDNB_CCDNB2_SIZE                                  0x1
#define _CCDNB_CCDNB2_LENGTH                                0x1
#define _CCDNB_CCDNB2_MASK                                  0x4
#define _CCDNB_CCDNB3_POSN                                  0x3
#define _CCDNB_CCDNB3_POSITION                              0x3
#define _CCDNB_CCDNB3_SIZE                                  0x1
#define _CCDNB_CCDNB3_LENGTH                                0x1
#define _CCDNB_CCDNB3_MASK                                  0x8
#define _CCDNB_CCDNB4_POSN                                  0x4
#define _CCDNB_CCDNB4_POSITION                              0x4
#define _CCDNB_CCDNB4_SIZE                                  0x1
#define _CCDNB_CCDNB4_LENGTH                                0x1
#define _CCDNB_CCDNB4_MASK                                  0x10
#define _CCDNB_CCDNB5_POSN                                  0x5
#define _CCDNB_CCDNB5_POSITION                              0x5
#define _CCDNB_CCDNB5_SIZE                                  0x1
#define _CCDNB_CCDNB5_LENGTH                                0x1
#define _CCDNB_CCDNB5_MASK                                  0x20
#define _CCDNB_CCDNB6_POSN                                  0x6
#define _CCDNB_CCDNB6_POSITION                              0x6
#define _CCDNB_CCDNB6_SIZE                                  0x1
#define _CCDNB_CCDNB6_LENGTH                                0x1
#define _CCDNB_CCDNB6_MASK                                  0x40
#define _CCDNB_CCDNB7_POSN                                  0x7
#define _CCDNB_CCDNB7_POSITION                              0x7
#define _CCDNB_CCDNB7_SIZE                                  0x1
#define _CCDNB_CCDNB7_LENGTH                                0x1
#define _CCDNB_CCDNB7_MASK                                  0x80

// Register: CCDPB
#define CCDPB CCDPB
extern volatile unsigned char           CCDPB               __at(0x1F4C);
#ifndef _LIB_BUILD
asm("CCDPB equ 01F4Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDPB0                 :1;
        unsigned CCDPB1                 :1;
        unsigned CCDPB2                 :1;
        unsigned CCDPB3                 :1;
        unsigned CCDPB4                 :1;
        unsigned CCDPB5                 :1;
        unsigned CCDPB6                 :1;
        unsigned CCDPB7                 :1;
    };
} CCDPBbits_t;
extern volatile CCDPBbits_t CCDPBbits __at(0x1F4C);
// bitfield macros
#define _CCDPB_CCDPB0_POSN                                  0x0
#define _CCDPB_CCDPB0_POSITION                              0x0
#define _CCDPB_CCDPB0_SIZE                                  0x1
#define _CCDPB_CCDPB0_LENGTH                                0x1
#define _CCDPB_CCDPB0_MASK                                  0x1
#define _CCDPB_CCDPB1_POSN                                  0x1
#define _CCDPB_CCDPB1_POSITION                              0x1
#define _CCDPB_CCDPB1_SIZE                                  0x1
#define _CCDPB_CCDPB1_LENGTH                                0x1
#define _CCDPB_CCDPB1_MASK                                  0x2
#define _CCDPB_CCDPB2_POSN                                  0x2
#define _CCDPB_CCDPB2_POSITION                              0x2
#define _CCDPB_CCDPB2_SIZE                                  0x1
#define _CCDPB_CCDPB2_LENGTH                                0x1
#define _CCDPB_CCDPB2_MASK                                  0x4
#define _CCDPB_CCDPB3_POSN                                  0x3
#define _CCDPB_CCDPB3_POSITION                              0x3
#define _CCDPB_CCDPB3_SIZE                                  0x1
#define _CCDPB_CCDPB3_LENGTH                                0x1
#define _CCDPB_CCDPB3_MASK                                  0x8
#define _CCDPB_CCDPB4_POSN                                  0x4
#define _CCDPB_CCDPB4_POSITION                              0x4
#define _CCDPB_CCDPB4_SIZE                                  0x1
#define _CCDPB_CCDPB4_LENGTH                                0x1
#define _CCDPB_CCDPB4_MASK                                  0x10
#define _CCDPB_CCDPB5_POSN                                  0x5
#define _CCDPB_CCDPB5_POSITION                              0x5
#define _CCDPB_CCDPB5_SIZE                                  0x1
#define _CCDPB_CCDPB5_LENGTH                                0x1
#define _CCDPB_CCDPB5_MASK                                  0x20
#define _CCDPB_CCDPB6_POSN                                  0x6
#define _CCDPB_CCDPB6_POSITION                              0x6
#define _CCDPB_CCDPB6_SIZE                                  0x1
#define _CCDPB_CCDPB6_LENGTH                                0x1
#define _CCDPB_CCDPB6_MASK                                  0x40
#define _CCDPB_CCDPB7_POSN                                  0x7
#define _CCDPB_CCDPB7_POSITION                              0x7
#define _CCDPB_CCDPB7_SIZE                                  0x1
#define _CCDPB_CCDPB7_LENGTH                                0x1
#define _CCDPB_CCDPB7_MASK                                  0x80

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x1F4E);
#ifndef _LIB_BUILD
asm("ANSELC equ 01F4Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSC0                  :1;
        unsigned ANSC1                  :1;
        unsigned ANSC2                  :1;
        unsigned ANSC3                  :1;
        unsigned ANSC4                  :1;
        unsigned ANSC5                  :1;
        unsigned ANSC6                  :1;
        unsigned ANSC7                  :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x1F4E);
// bitfield macros
#define _ANSELC_ANSC0_POSN                                  0x0
#define _ANSELC_ANSC0_POSITION                              0x0
#define _ANSELC_ANSC0_SIZE                                  0x1
#define _ANSELC_ANSC0_LENGTH                                0x1
#define _ANSELC_ANSC0_MASK                                  0x1
#define _ANSELC_ANSC1_POSN                                  0x1
#define _ANSELC_ANSC1_POSITION                              0x1
#define _ANSELC_ANSC1_SIZE                                  0x1
#define _ANSELC_ANSC1_LENGTH                                0x1
#define _ANSELC_ANSC1_MASK                                  0x2
#define _ANSELC_ANSC2_POSN                                  0x2
#define _ANSELC_ANSC2_POSITION                              0x2
#define _ANSELC_ANSC2_SIZE                                  0x1
#define _ANSELC_ANSC2_LENGTH                                0x1
#define _ANSELC_ANSC2_MASK                                  0x4
#define _ANSELC_ANSC3_POSN                                  0x3
#define _ANSELC_ANSC3_POSITION                              0x3
#define _ANSELC_ANSC3_SIZE                                  0x1
#define _ANSELC_ANSC3_LENGTH                                0x1
#define _ANSELC_ANSC3_MASK                                  0x8
#define _ANSELC_ANSC4_POSN                                  0x4
#define _ANSELC_ANSC4_POSITION                              0x4
#define _ANSELC_ANSC4_SIZE                                  0x1
#define _ANSELC_ANSC4_LENGTH                                0x1
#define _ANSELC_ANSC4_MASK                                  0x10
#define _ANSELC_ANSC5_POSN                                  0x5
#define _ANSELC_ANSC5_POSITION                              0x5
#define _ANSELC_ANSC5_SIZE                                  0x1
#define _ANSELC_ANSC5_LENGTH                                0x1
#define _ANSELC_ANSC5_MASK                                  0x20
#define _ANSELC_ANSC6_POSN                                  0x6
#define _ANSELC_ANSC6_POSITION                              0x6
#define _ANSELC_ANSC6_SIZE                                  0x1
#define _ANSELC_ANSC6_LENGTH                                0x1
#define _ANSELC_ANSC6_MASK                                  0x40
#define _ANSELC_ANSC7_POSN                                  0x7
#define _ANSELC_ANSC7_POSITION                              0x7
#define _ANSELC_ANSC7_SIZE                                  0x1
#define _ANSELC_ANSC7_LENGTH                                0x1
#define _ANSELC_ANSC7_MASK                                  0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x1F4F);
#ifndef _LIB_BUILD
asm("WPUC equ 01F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x1F4F);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x1F50);
#ifndef _LIB_BUILD
asm("ODCONC equ 01F50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x1F50);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x1F51);
#ifndef _LIB_BUILD
asm("SLRCONC equ 01F51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x1F51);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x1F52);
#ifndef _LIB_BUILD
asm("INLVLC equ 01F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x1F52);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x1F53);
#ifndef _LIB_BUILD
asm("IOCCP equ 01F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x1F53);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x1F54);
#ifndef _LIB_BUILD
asm("IOCCN equ 01F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x1F54);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x1F55);
#ifndef _LIB_BUILD
asm("IOCCF equ 01F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x1F55);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: CCDNC
#define CCDNC CCDNC
extern volatile unsigned char           CCDNC               __at(0x1F56);
#ifndef _LIB_BUILD
asm("CCDNC equ 01F56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDNC0                 :1;
        unsigned CCDNC1                 :1;
        unsigned CCDNC2                 :1;
        unsigned CCDNC3                 :1;
        unsigned CCDNC4                 :1;
        unsigned CCDNC5                 :1;
        unsigned CCDNC6                 :1;
        unsigned CCDNC7                 :1;
    };
} CCDNCbits_t;
extern volatile CCDNCbits_t CCDNCbits __at(0x1F56);
// bitfield macros
#define _CCDNC_CCDNC0_POSN                                  0x0
#define _CCDNC_CCDNC0_POSITION                              0x0
#define _CCDNC_CCDNC0_SIZE                                  0x1
#define _CCDNC_CCDNC0_LENGTH                                0x1
#define _CCDNC_CCDNC0_MASK                                  0x1
#define _CCDNC_CCDNC1_POSN                                  0x1
#define _CCDNC_CCDNC1_POSITION                              0x1
#define _CCDNC_CCDNC1_SIZE                                  0x1
#define _CCDNC_CCDNC1_LENGTH                                0x1
#define _CCDNC_CCDNC1_MASK                                  0x2
#define _CCDNC_CCDNC2_POSN                                  0x2
#define _CCDNC_CCDNC2_POSITION                              0x2
#define _CCDNC_CCDNC2_SIZE                                  0x1
#define _CCDNC_CCDNC2_LENGTH                                0x1
#define _CCDNC_CCDNC2_MASK                                  0x4
#define _CCDNC_CCDNC3_POSN                                  0x3
#define _CCDNC_CCDNC3_POSITION                              0x3
#define _CCDNC_CCDNC3_SIZE                                  0x1
#define _CCDNC_CCDNC3_LENGTH                                0x1
#define _CCDNC_CCDNC3_MASK                                  0x8
#define _CCDNC_CCDNC4_POSN                                  0x4
#define _CCDNC_CCDNC4_POSITION                              0x4
#define _CCDNC_CCDNC4_SIZE                                  0x1
#define _CCDNC_CCDNC4_LENGTH                                0x1
#define _CCDNC_CCDNC4_MASK                                  0x10
#define _CCDNC_CCDNC5_POSN                                  0x5
#define _CCDNC_CCDNC5_POSITION                              0x5
#define _CCDNC_CCDNC5_SIZE                                  0x1
#define _CCDNC_CCDNC5_LENGTH                                0x1
#define _CCDNC_CCDNC5_MASK                                  0x20
#define _CCDNC_CCDNC6_POSN                                  0x6
#define _CCDNC_CCDNC6_POSITION                              0x6
#define _CCDNC_CCDNC6_SIZE                                  0x1
#define _CCDNC_CCDNC6_LENGTH                                0x1
#define _CCDNC_CCDNC6_MASK                                  0x40
#define _CCDNC_CCDNC7_POSN                                  0x7
#define _CCDNC_CCDNC7_POSITION                              0x7
#define _CCDNC_CCDNC7_SIZE                                  0x1
#define _CCDNC_CCDNC7_LENGTH                                0x1
#define _CCDNC_CCDNC7_MASK                                  0x80

// Register: CCDPC
#define CCDPC CCDPC
extern volatile unsigned char           CCDPC               __at(0x1F57);
#ifndef _LIB_BUILD
asm("CCDPC equ 01F57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDPC0                 :1;
        unsigned CCDPC1                 :1;
        unsigned CCDPC2                 :1;
        unsigned CCDPC3                 :1;
        unsigned CCDPC4                 :1;
        unsigned CCDPC5                 :1;
        unsigned CCDPC6                 :1;
        unsigned CCDPC7                 :1;
    };
} CCDPCbits_t;
extern volatile CCDPCbits_t CCDPCbits __at(0x1F57);
// bitfield macros
#define _CCDPC_CCDPC0_POSN                                  0x0
#define _CCDPC_CCDPC0_POSITION                              0x0
#define _CCDPC_CCDPC0_SIZE                                  0x1
#define _CCDPC_CCDPC0_LENGTH                                0x1
#define _CCDPC_CCDPC0_MASK                                  0x1
#define _CCDPC_CCDPC1_POSN                                  0x1
#define _CCDPC_CCDPC1_POSITION                              0x1
#define _CCDPC_CCDPC1_SIZE                                  0x1
#define _CCDPC_CCDPC1_LENGTH                                0x1
#define _CCDPC_CCDPC1_MASK                                  0x2
#define _CCDPC_CCDPC2_POSN                                  0x2
#define _CCDPC_CCDPC2_POSITION                              0x2
#define _CCDPC_CCDPC2_SIZE                                  0x1
#define _CCDPC_CCDPC2_LENGTH                                0x1
#define _CCDPC_CCDPC2_MASK                                  0x4
#define _CCDPC_CCDPC3_POSN                                  0x3
#define _CCDPC_CCDPC3_POSITION                              0x3
#define _CCDPC_CCDPC3_SIZE                                  0x1
#define _CCDPC_CCDPC3_LENGTH                                0x1
#define _CCDPC_CCDPC3_MASK                                  0x8
#define _CCDPC_CCDPC4_POSN                                  0x4
#define _CCDPC_CCDPC4_POSITION                              0x4
#define _CCDPC_CCDPC4_SIZE                                  0x1
#define _CCDPC_CCDPC4_LENGTH                                0x1
#define _CCDPC_CCDPC4_MASK                                  0x10
#define _CCDPC_CCDPC5_POSN                                  0x5
#define _CCDPC_CCDPC5_POSITION                              0x5
#define _CCDPC_CCDPC5_SIZE                                  0x1
#define _CCDPC_CCDPC5_LENGTH                                0x1
#define _CCDPC_CCDPC5_MASK                                  0x20
#define _CCDPC_CCDPC6_POSN                                  0x6
#define _CCDPC_CCDPC6_POSITION                              0x6
#define _CCDPC_CCDPC6_SIZE                                  0x1
#define _CCDPC_CCDPC6_LENGTH                                0x1
#define _CCDPC_CCDPC6_MASK                                  0x40
#define _CCDPC_CCDPC7_POSN                                  0x7
#define _CCDPC_CCDPC7_POSITION                              0x7
#define _CCDPC_CCDPC7_SIZE                                  0x1
#define _CCDPC_CCDPC7_LENGTH                                0x1
#define _CCDPC_CCDPC7_MASK                                  0x80

// Register: WPUE
#define WPUE WPUE
extern volatile unsigned char           WPUE                __at(0x1F65);
#ifndef _LIB_BUILD
asm("WPUE equ 01F65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUE0                  :1;
        unsigned WPUE1                  :1;
        unsigned WPUE2                  :1;
    };
} WPUEbits_t;
extern volatile WPUEbits_t WPUEbits __at(0x1F65);
// bitfield macros
#define _WPUE_WPUE0_POSN                                    0x0
#define _WPUE_WPUE0_POSITION                                0x0
#define _WPUE_WPUE0_SIZE                                    0x1
#define _WPUE_WPUE0_LENGTH                                  0x1
#define _WPUE_WPUE0_MASK                                    0x1
#define _WPUE_WPUE1_POSN                                    0x1
#define _WPUE_WPUE1_POSITION                                0x1
#define _WPUE_WPUE1_SIZE                                    0x1
#define _WPUE_WPUE1_LENGTH                                  0x1
#define _WPUE_WPUE1_MASK                                    0x2
#define _WPUE_WPUE2_POSN                                    0x2
#define _WPUE_WPUE2_POSITION                                0x2
#define _WPUE_WPUE2_SIZE                                    0x1
#define _WPUE_WPUE2_LENGTH                                  0x1
#define _WPUE_WPUE2_MASK                                    0x4

// Register: INLVLE
#define INLVLE INLVLE
extern volatile unsigned char           INLVLE              __at(0x1F68);
#ifndef _LIB_BUILD
asm("INLVLE equ 01F68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLE0                :1;
        unsigned INLVLE1                :1;
        unsigned INLVLE2                :1;
    };
} INLVLEbits_t;
extern volatile INLVLEbits_t INLVLEbits __at(0x1F68);
// bitfield macros
#define _INLVLE_INLVLE0_POSN                                0x0
#define _INLVLE_INLVLE0_POSITION                            0x0
#define _INLVLE_INLVLE0_SIZE                                0x1
#define _INLVLE_INLVLE0_LENGTH                              0x1
#define _INLVLE_INLVLE0_MASK                                0x1
#define _INLVLE_INLVLE1_POSN                                0x1
#define _INLVLE_INLVLE1_POSITION                            0x1
#define _INLVLE_INLVLE1_SIZE                                0x1
#define _INLVLE_INLVLE1_LENGTH                              0x1
#define _INLVLE_INLVLE1_MASK                                0x2
#define _INLVLE_INLVLE2_POSN                                0x2
#define _INLVLE_INLVLE2_POSITION                            0x2
#define _INLVLE_INLVLE2_SIZE                                0x1
#define _INLVLE_INLVLE2_LENGTH                              0x1
#define _INLVLE_INLVLE2_MASK                                0x4

// Register: IOCEP
#define IOCEP IOCEP
extern volatile unsigned char           IOCEP               __at(0x1F69);
#ifndef _LIB_BUILD
asm("IOCEP equ 01F69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEP3                 :1;
    };
} IOCEPbits_t;
extern volatile IOCEPbits_t IOCEPbits __at(0x1F69);
// bitfield macros
#define _IOCEP_IOCEP3_POSN                                  0x3
#define _IOCEP_IOCEP3_POSITION                              0x3
#define _IOCEP_IOCEP3_SIZE                                  0x1
#define _IOCEP_IOCEP3_LENGTH                                0x1
#define _IOCEP_IOCEP3_MASK                                  0x8

// Register: IOCEN
#define IOCEN IOCEN
extern volatile unsigned char           IOCEN               __at(0x1F6A);
#ifndef _LIB_BUILD
asm("IOCEN equ 01F6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEN3                 :1;
    };
} IOCENbits_t;
extern volatile IOCENbits_t IOCENbits __at(0x1F6A);
// bitfield macros
#define _IOCEN_IOCEN3_POSN                                  0x3
#define _IOCEN_IOCEN3_POSITION                              0x3
#define _IOCEN_IOCEN3_SIZE                                  0x1
#define _IOCEN_IOCEN3_LENGTH                                0x1
#define _IOCEN_IOCEN3_MASK                                  0x8

// Register: IOCEF
#define IOCEF IOCEF
extern volatile unsigned char           IOCEF               __at(0x1F6B);
#ifndef _LIB_BUILD
asm("IOCEF equ 01F6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEF3                 :1;
    };
} IOCEFbits_t;
extern volatile IOCEFbits_t IOCEFbits __at(0x1F6B);
// bitfield macros
#define _IOCEF_IOCEF3_POSN                                  0x3
#define _IOCEF_IOCEF3_POSITION                              0x3
#define _IOCEF_IOCEF3_SIZE                                  0x1
#define _IOCEF_IOCEF3_LENGTH                                0x1
#define _IOCEF_IOCEF3_MASK                                  0x8

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x1FE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 01FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C_SHAD                 :1;
        unsigned DC_SHAD                :1;
        unsigned Z_SHAD                 :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x1FE4);
// bitfield macros
#define _STATUS_SHAD_C_SHAD_POSN                            0x0
#define _STATUS_SHAD_C_SHAD_POSITION                        0x0
#define _STATUS_SHAD_C_SHAD_SIZE                            0x1
#define _STATUS_SHAD_C_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_C_SHAD_MASK                            0x1
#define _STATUS_SHAD_DC_SHAD_POSN                           0x1
#define _STATUS_SHAD_DC_SHAD_POSITION                       0x1
#define _STATUS_SHAD_DC_SHAD_SIZE                           0x1
#define _STATUS_SHAD_DC_SHAD_LENGTH                         0x1
#define _STATUS_SHAD_DC_SHAD_MASK                           0x2
#define _STATUS_SHAD_Z_SHAD_POSN                            0x2
#define _STATUS_SHAD_Z_SHAD_POSITION                        0x2
#define _STATUS_SHAD_Z_SHAD_SIZE                            0x1
#define _STATUS_SHAD_Z_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_Z_SHAD_MASK                            0x4

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x1FE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 01FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x1FE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x1FE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 01FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :6;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0x1FE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x6
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x6
#define _BSR_SHAD_BSR_SHAD_MASK                             0x3F

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x1FE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 01FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :7;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x1FE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x7
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x7
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0x7F

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x1FE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 01FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x1FE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x1FE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 01FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x1FE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x1FEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 01FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x1FEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x1FEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 01FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x1FEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x1FED);
#ifndef _LIB_BUILD
asm("STKPTR equ 01FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x1FED);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x1FEE);
#ifndef _LIB_BUILD
asm("TOSL equ 01FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x1FEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x1FEF);
#ifndef _LIB_BUILD
asm("TOSH equ 01FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :7;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x1FEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x7
#define _TOSH_TOSH_LENGTH                                   0x7
#define _TOSH_TOSH_MASK                                     0x7F

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// BAUD1CON<ABDEN>
extern volatile __bit                   ABDEN               __at(0x8F8);	// @ (0x11F * 8 + 0)
#define                                 ABDEN_bit           _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDOVF>
extern volatile __bit                   ABDOVF              __at(0x8FF);	// @ (0x11F * 8 + 7)
#define                                 ABDOVF_bit          _BIT_ACCESS(BAUD1CON,7)
// CRCACCL<ACC0>
extern volatile __bit                   ACC0                __at(0x20C0);	// @ (0x418 * 8 + 0)
#define                                 ACC0_bit            _BIT_ACCESS(CRCACCL,0)
// CRCACCL<ACC1>
extern volatile __bit                   ACC1                __at(0x20C1);	// @ (0x418 * 8 + 1)
#define                                 ACC1_bit            _BIT_ACCESS(CRCACCL,1)
// CRCACCH<ACC10>
extern volatile __bit                   ACC10               __at(0x20CA);	// @ (0x419 * 8 + 2)
#define                                 ACC10_bit           _BIT_ACCESS(CRCACCH,2)
// CRCACCH<ACC11>
extern volatile __bit                   ACC11               __at(0x20CB);	// @ (0x419 * 8 + 3)
#define                                 ACC11_bit           _BIT_ACCESS(CRCACCH,3)
// CRCACCH<ACC12>
extern volatile __bit                   ACC12               __at(0x20CC);	// @ (0x419 * 8 + 4)
#define                                 ACC12_bit           _BIT_ACCESS(CRCACCH,4)
// CRCACCH<ACC13>
extern volatile __bit                   ACC13               __at(0x20CD);	// @ (0x419 * 8 + 5)
#define                                 ACC13_bit           _BIT_ACCESS(CRCACCH,5)
// CRCACCH<ACC14>
extern volatile __bit                   ACC14               __at(0x20CE);	// @ (0x419 * 8 + 6)
#define                                 ACC14_bit           _BIT_ACCESS(CRCACCH,6)
// CRCACCH<ACC15>
extern volatile __bit                   ACC15               __at(0x20CF);	// @ (0x419 * 8 + 7)
#define                                 ACC15_bit           _BIT_ACCESS(CRCACCH,7)
// CRCACCL<ACC2>
extern volatile __bit                   ACC2                __at(0x20C2);	// @ (0x418 * 8 + 2)
#define                                 ACC2_bit            _BIT_ACCESS(CRCACCL,2)
// CRCACCL<ACC3>
extern volatile __bit                   ACC3                __at(0x20C3);	// @ (0x418 * 8 + 3)
#define                                 ACC3_bit            _BIT_ACCESS(CRCACCL,3)
// CRCACCL<ACC4>
extern volatile __bit                   ACC4                __at(0x20C4);	// @ (0x418 * 8 + 4)
#define                                 ACC4_bit            _BIT_ACCESS(CRCACCL,4)
// CRCACCL<ACC5>
extern volatile __bit                   ACC5                __at(0x20C5);	// @ (0x418 * 8 + 5)
#define                                 ACC5_bit            _BIT_ACCESS(CRCACCL,5)
// CRCACCL<ACC6>
extern volatile __bit                   ACC6                __at(0x20C6);	// @ (0x418 * 8 + 6)
#define                                 ACC6_bit            _BIT_ACCESS(CRCACCL,6)
// CRCACCL<ACC7>
extern volatile __bit                   ACC7                __at(0x20C7);	// @ (0x418 * 8 + 7)
#define                                 ACC7_bit            _BIT_ACCESS(CRCACCL,7)
// CRCACCH<ACC8>
extern volatile __bit                   ACC8                __at(0x20C8);	// @ (0x419 * 8 + 0)
#define                                 ACC8_bit            _BIT_ACCESS(CRCACCH,0)
// CRCACCH<ACC9>
extern volatile __bit                   ACC9                __at(0x20C9);	// @ (0x419 * 8 + 1)
#define                                 ACC9_bit            _BIT_ACCESS(CRCACCH,1)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x20F4);	// @ (0x41E * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP2CON2<ACKDT2>
extern volatile __bit                   ACKDT2              __at(0xCDD);	// @ (0x19B * 8 + 5)
#define                                 ACKDT2_bit          _BIT_ACCESS(SSP2CON2,5)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP2CON2<ACKEN2>
extern volatile __bit                   ACKEN2              __at(0xCDC);	// @ (0x19B * 8 + 4)
#define                                 ACKEN2_bit          _BIT_ACCESS(SSP2CON2,4)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0xC8E);	// @ (0x191 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP2CON2<ACKSTAT2>
extern volatile __bit                   ACKSTAT2            __at(0xCDE);	// @ (0x19B * 8 + 6)
#define                                 ACKSTAT2_bit        _BIT_ACCESS(SSP2CON2,6)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0x480);	// @ (0x90 * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0x481);	// @ (0x90 * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0x48C);	// @ (0x91 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0x48D);	// @ (0x91 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0x48E);	// @ (0x91 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0x484);	// @ (0x90 * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0x485);	// @ (0x90 * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0x486);	// @ (0x90 * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0x487);	// @ (0x90 * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0x4AB);	// @ (0x95 * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQ<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQ,0)
// ADACQ<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQ,1)
// ADACQ<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQ,2)
// ADACQ<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQ,3)
// ADACQ<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0x4EC);	// @ (0x9D * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQ,4)
// ADACQ<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0x4ED);	// @ (0x9D * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQ,5)
// ADACQ<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0x4EE);	// @ (0x9D * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQ,6)
// ADACQ<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0x4EF);	// @ (0x9D * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQ,7)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x4CA);	// @ (0x99 * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x4CB);	// @ (0x99 * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x4CC);	// @ (0x99 * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0x4BF);	// @ (0x97 * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCACTPPS<ADCACTPPS0>
extern volatile __bit                   ADCACTPPS0          __at(0xF618);	// @ (0x1EC3 * 8 + 0)
#define                                 ADCACTPPS0_bit      _BIT_ACCESS(ADCACTPPS,0)
// ADCACTPPS<ADCACTPPS1>
extern volatile __bit                   ADCACTPPS1          __at(0xF619);	// @ (0x1EC3 * 8 + 1)
#define                                 ADCACTPPS1_bit      _BIT_ACCESS(ADCACTPPS,1)
// ADCACTPPS<ADCACTPPS2>
extern volatile __bit                   ADCACTPPS2          __at(0xF61A);	// @ (0x1EC3 * 8 + 2)
#define                                 ADCACTPPS2_bit      _BIT_ACCESS(ADCACTPPS,2)
// ADCACTPPS<ADCACTPPS3>
extern volatile __bit                   ADCACTPPS3          __at(0xF61B);	// @ (0x1EC3 * 8 + 3)
#define                                 ADCACTPPS3_bit      _BIT_ACCESS(ADCACTPPS,3)
// ADCACTPPS<ADCACTPPS4>
extern volatile __bit                   ADCACTPPS4          __at(0xF61C);	// @ (0x1EC3 * 8 + 4)
#define                                 ADCACTPPS4_bit      _BIT_ACCESS(ADCACTPPS,4)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0x4B4);	// @ (0x96 * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0x4B5);	// @ (0x96 * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0x4B6);	// @ (0x96 * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0x4D8);	// @ (0x9B * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0x4D9);	// @ (0x9B * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0x4DA);	// @ (0x9B * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0x4DB);	// @ (0x9B * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0x4DC);	// @ (0x9B * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// ADCLK<ADCCS0>
extern volatile __bit                   ADCCS0              __at(0x4C0);	// @ (0x98 * 8 + 0)
#define                                 ADCCS0_bit          _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCCS1>
extern volatile __bit                   ADCCS1              __at(0x4C1);	// @ (0x98 * 8 + 1)
#define                                 ADCCS1_bit          _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCCS2>
extern volatile __bit                   ADCCS2              __at(0x4C2);	// @ (0x98 * 8 + 2)
#define                                 ADCCS2_bit          _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCCS3>
extern volatile __bit                   ADCCS3              __at(0x4C3);	// @ (0x98 * 8 + 3)
#define                                 ADCCS3_bit          _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCCS4>
extern volatile __bit                   ADCCS4              __at(0x4C4);	// @ (0x98 * 8 + 4)
#define                                 ADCCS4_bit          _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCCS5>
extern volatile __bit                   ADCCS5              __at(0x4C5);	// @ (0x98 * 8 + 5)
#define                                 ADCCS5_bit          _BIT_ACCESS(ADCLK,5)
// PMD2<ADCMD>
extern volatile __bit                   ADCMD               __at(0x3CC5);	// @ (0x798 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD2,5)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0x863);	// @ (0x10C * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0x864);	// @ (0x10C * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0x865);	// @ (0x10C * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0x866);	// @ (0x10C * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0x867);	// @ (0x10C * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0x49E);	// @ (0x93 * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0x4AE);	// @ (0x95 * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0x49C);	// @ (0x93 * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// RC1STA<ADDEN>
extern volatile __bit                   ADDEN               __at(0x8EB);	// @ (0x11D * 8 + 3)
#define                                 ADDEN_bit           _BIT_ACCESS(RC1STA,3)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0x4A0);	// @ (0x94 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0x8B0);	// @ (0x116 * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0x8B1);	// @ (0x116 * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0x8BA);	// @ (0x117 * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0x8BB);	// @ (0x117 * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0x8BC);	// @ (0x117 * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0x8BD);	// @ (0x117 * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0x8BE);	// @ (0x117 * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0x8BF);	// @ (0x117 * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0x8B2);	// @ (0x116 * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0x8B3);	// @ (0x116 * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0x8B4);	// @ (0x116 * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0x8B5);	// @ (0x116 * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0x8B6);	// @ (0x116 * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0x8B7);	// @ (0x116 * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0x8B8);	// @ (0x117 * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0x8B9);	// @ (0x117 * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0x8A0);	// @ (0x114 * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0x8A1);	// @ (0x114 * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0x8AA);	// @ (0x115 * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0x8AB);	// @ (0x115 * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0x8AC);	// @ (0x115 * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0x8AD);	// @ (0x115 * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0x8AE);	// @ (0x115 * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0x8AF);	// @ (0x115 * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0x8A2);	// @ (0x114 * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0x8A3);	// @ (0x114 * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0x8A4);	// @ (0x114 * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0x8A5);	// @ (0x114 * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0x8A6);	// @ (0x114 * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0x8A7);	// @ (0x114 * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0x8A8);	// @ (0x115 * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0x8A9);	// @ (0x115 * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM0>
extern volatile __bit                   ADFM0               __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 ADFM0_bit           _BIT_ACCESS(ADCON0,2)
// ADCON0<ADFRM0>
extern volatile __bit                   ADFRM0              __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 ADFRM0_bit          _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x4860);	// @ (0x90C * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x4861);	// @ (0x90C * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0x4A5);	// @ (0x94 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x38B8);	// @ (0x717 * 8 + 0)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,0)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x3868);	// @ (0x70D * 8 + 0)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,0)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0x4A6);	// @ (0x94 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0x870);	// @ (0x10E * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0x871);	// @ (0x10E * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0x87A);	// @ (0x10F * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0x87B);	// @ (0x10F * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0x87C);	// @ (0x10F * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0x87D);	// @ (0x10F * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0x87E);	// @ (0x10F * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0x87F);	// @ (0x10F * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0x872);	// @ (0x10E * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0x873);	// @ (0x10E * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0x874);	// @ (0x10E * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0x875);	// @ (0x10E * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0x876);	// @ (0x10E * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0x877);	// @ (0x10E * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0x878);	// @ (0x10F * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0x879);	// @ (0x10F * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0x4BD);	// @ (0x97 * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMACT>
extern volatile __bit                   ADMACT              __at(0x4BB);	// @ (0x97 * 8 + 3)
#define                                 ADMACT_bit          _BIT_ACCESS(ADSTAT,3)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0x4BC);	// @ (0x97 * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0x4A8);	// @ (0x95 * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0x4A9);	// @ (0x95 * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0x4AA);	// @ (0x95 * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP2CON2<ADMSK12>
extern volatile __bit                   ADMSK12             __at(0xCD9);	// @ (0x19B * 8 + 1)
#define                                 ADMSK12_bit         _BIT_ACCESS(SSP2CON2,1)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP2CON2<ADMSK22>
extern volatile __bit                   ADMSK22             __at(0xCDA);	// @ (0x19B * 8 + 2)
#define                                 ADMSK22_bit         _BIT_ACCESS(SSP2CON2,2)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP2CON2<ADMSK32>
extern volatile __bit                   ADMSK32             __at(0xCDB);	// @ (0x19B * 8 + 3)
#define                                 ADMSK32_bit         _BIT_ACCESS(SSP2CON2,3)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP2CON2<ADMSK42>
extern volatile __bit                   ADMSK42             __at(0xCDC);	// @ (0x19B * 8 + 4)
#define                                 ADMSK42_bit         _BIT_ACCESS(SSP2CON2,4)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// SSP2CON2<ADMSK52>
extern volatile __bit                   ADMSK52             __at(0xCDD);	// @ (0x19B * 8 + 5)
#define                                 ADMSK52_bit         _BIT_ACCESS(SSP2CON2,5)
// ADREF<ADNREF>
extern volatile __bit                   ADNREF              __at(0x4D4);	// @ (0x9A * 8 + 4)
#define                                 ADNREF_bit          _BIT_ACCESS(ADREF,4)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x448A);	// @ (0x891 * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x49F);	// @ (0x93 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x4482);	// @ (0x890 * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0x4F0);	// @ (0x9E * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0x4F1);	// @ (0x9E * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0x4F2);	// @ (0x9E * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0x4F3);	// @ (0x9E * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0x4F4);	// @ (0x9E * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0x4F5);	// @ (0x9E * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0x4A7);	// @ (0x94 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPRE<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0x4E0);	// @ (0x9C * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPRE,0)
// ADPRE<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0x4E1);	// @ (0x9C * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPRE,1)
// ADPRE<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0x4E2);	// @ (0x9C * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPRE,2)
// ADPRE<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0x4E3);	// @ (0x9C * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPRE,3)
// ADPRE<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0x4E4);	// @ (0x9C * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPRE,4)
// ADPRE<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0x4E5);	// @ (0x9C * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPRE,5)
// ADPRE<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0x4E6);	// @ (0x9C * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPRE,6)
// ADPRE<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0x4E7);	// @ (0x9C * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPRE,7)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x4D0);	// @ (0x9A * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x4D1);	// @ (0x9A * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0x471);	// @ (0x8E * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0x47A);	// @ (0x8F * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0x47B);	// @ (0x8F * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0x47C);	// @ (0x8F * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0x47D);	// @ (0x8F * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0x47E);	// @ (0x8F * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0x47F);	// @ (0x8F * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0x476);	// @ (0x8E * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0x477);	// @ (0x8E * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0x478);	// @ (0x8F * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0x479);	// @ (0x8F * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0x4AF);	// @ (0x95 * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0x868);	// @ (0x10D * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0x869);	// @ (0x10D * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0x86A);	// @ (0x10D * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0x86B);	// @ (0x10D * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0x86C);	// @ (0x10D * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0x86D);	// @ (0x10D * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0x86E);	// @ (0x10D * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0x86F);	// @ (0x10D * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0x4B3);	// @ (0x96 * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0x4B8);	// @ (0x97 * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0x4B9);	// @ (0x97 * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0x4BA);	// @ (0x97 * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0x890);	// @ (0x112 * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0x891);	// @ (0x112 * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0x89A);	// @ (0x113 * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0x89B);	// @ (0x113 * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0x89C);	// @ (0x113 * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0x89D);	// @ (0x113 * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0x89E);	// @ (0x113 * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0x89F);	// @ (0x113 * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0x892);	// @ (0x112 * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0x893);	// @ (0x112 * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0x894);	// @ (0x112 * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0x895);	// @ (0x112 * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0x896);	// @ (0x112 * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0x897);	// @ (0x112 * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0x898);	// @ (0x113 * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0x899);	// @ (0x113 * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE1<ADTIE>
extern volatile __bit                   ADTIE               __at(0x38B9);	// @ (0x717 * 8 + 1)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<ADTIF>
extern volatile __bit                   ADTIF               __at(0x3869);	// @ (0x70D * 8 + 1)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR1,1)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0x4B0);	// @ (0x96 * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0x4B1);	// @ (0x96 * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0x4B2);	// @ (0x96 * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0x880);	// @ (0x110 * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0x881);	// @ (0x110 * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0x88A);	// @ (0x111 * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0x88B);	// @ (0x111 * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0x88C);	// @ (0x111 * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0x88D);	// @ (0x111 * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0x88E);	// @ (0x111 * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0x88F);	// @ (0x111 * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0x882);	// @ (0x110 * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0x883);	// @ (0x110 * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0x884);	// @ (0x110 * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0x885);	// @ (0x110 * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0x886);	// @ (0x110 * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0x887);	// @ (0x110 * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0x889);	// @ (0x111 * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0x4BE);	// @ (0x97 * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0xF9C0);	// @ (0x1F38 * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0xF9C1);	// @ (0x1F38 * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0xF9C2);	// @ (0x1F38 * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA3>
extern volatile __bit                   ANSA3               __at(0xF9C3);	// @ (0x1F38 * 8 + 3)
#define                                 ANSA3_bit           _BIT_ACCESS(ANSELA,3)
// ANSELA<ANSA4>
extern volatile __bit                   ANSA4               __at(0xF9C4);	// @ (0x1F38 * 8 + 4)
#define                                 ANSA4_bit           _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSA5>
extern volatile __bit                   ANSA5               __at(0xF9C5);	// @ (0x1F38 * 8 + 5)
#define                                 ANSA5_bit           _BIT_ACCESS(ANSELA,5)
// ANSELA<ANSA6>
extern volatile __bit                   ANSA6               __at(0xF9C6);	// @ (0x1F38 * 8 + 6)
#define                                 ANSA6_bit           _BIT_ACCESS(ANSELA,6)
// ANSELA<ANSA7>
extern volatile __bit                   ANSA7               __at(0xF9C7);	// @ (0x1F38 * 8 + 7)
#define                                 ANSA7_bit           _BIT_ACCESS(ANSELA,7)
// ANSELB<ANSB0>
extern volatile __bit                   ANSB0               __at(0xFA18);	// @ (0x1F43 * 8 + 0)
#define                                 ANSB0_bit           _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSB1>
extern volatile __bit                   ANSB1               __at(0xFA19);	// @ (0x1F43 * 8 + 1)
#define                                 ANSB1_bit           _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSB2>
extern volatile __bit                   ANSB2               __at(0xFA1A);	// @ (0x1F43 * 8 + 2)
#define                                 ANSB2_bit           _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSB3>
extern volatile __bit                   ANSB3               __at(0xFA1B);	// @ (0x1F43 * 8 + 3)
#define                                 ANSB3_bit           _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSB4>
extern volatile __bit                   ANSB4               __at(0xFA1C);	// @ (0x1F43 * 8 + 4)
#define                                 ANSB4_bit           _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSB5>
extern volatile __bit                   ANSB5               __at(0xFA1D);	// @ (0x1F43 * 8 + 5)
#define                                 ANSB5_bit           _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSB6>
extern volatile __bit                   ANSB6               __at(0xFA1E);	// @ (0x1F43 * 8 + 6)
#define                                 ANSB6_bit           _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSB7>
extern volatile __bit                   ANSB7               __at(0xFA1F);	// @ (0x1F43 * 8 + 7)
#define                                 ANSB7_bit           _BIT_ACCESS(ANSELB,7)
// ANSELC<ANSC0>
extern volatile __bit                   ANSC0               __at(0xFA70);	// @ (0x1F4E * 8 + 0)
#define                                 ANSC0_bit           _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSC1>
extern volatile __bit                   ANSC1               __at(0xFA71);	// @ (0x1F4E * 8 + 1)
#define                                 ANSC1_bit           _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSC2>
extern volatile __bit                   ANSC2               __at(0xFA72);	// @ (0x1F4E * 8 + 2)
#define                                 ANSC2_bit           _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSC3>
extern volatile __bit                   ANSC3               __at(0xFA73);	// @ (0x1F4E * 8 + 3)
#define                                 ANSC3_bit           _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSC4>
extern volatile __bit                   ANSC4               __at(0xFA74);	// @ (0x1F4E * 8 + 4)
#define                                 ANSC4_bit           _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSC5>
extern volatile __bit                   ANSC5               __at(0xFA75);	// @ (0x1F4E * 8 + 5)
#define                                 ANSC5_bit           _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSC6>
extern volatile __bit                   ANSC6               __at(0xFA76);	// @ (0x1F4E * 8 + 6)
#define                                 ANSC6_bit           _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSC7>
extern volatile __bit                   ANSC7               __at(0xFA77);	// @ (0x1F4E * 8 + 7)
#define                                 ANSC7_bit           _BIT_ACCESS(ANSELC,7)
// PIE3<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x38C9);	// @ (0x719 * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x3879);	// @ (0x70F * 8 + 1)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR3,1)
// PIE3<BCL2IE>
extern volatile __bit                   BCL2IE              __at(0x38CB);	// @ (0x719 * 8 + 3)
#define                                 BCL2IE_bit          _BIT_ACCESS(PIE3,3)
// PIR3<BCL2IF>
extern volatile __bit                   BCL2IF              __at(0x387B);	// @ (0x70F * 8 + 3)
#define                                 BCL2IF_bit          _BIT_ACCESS(PIR3,3)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// SSP2STAT<BF2>
extern volatile __bit                   BF2                 __at(0xCC8);	// @ (0x199 * 8 + 0)
#define                                 BF2_bit             _BIT_ACCESS(SSP2STAT,0)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BAUD1CON<BRG16>
extern volatile __bit                   BRG16               __at(0x8FB);	// @ (0x11F * 8 + 3)
#define                                 BRG16_bit           _BIT_ACCESS(BAUD1CON,3)
// TX1STA<BRGH>
extern volatile __bit                   BRGH                __at(0x8F2);	// @ (0x11E * 8 + 2)
#define                                 BRGH_bit            _BIT_ACCESS(TX1STA,2)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// BSR<BSR5>
extern volatile __bit                   BSR5                __at(0x45);	// @ (0x8 * 8 + 5)
#define                                 BSR5_bit            _BIT_ACCESS(BSR,5)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x4C81);	// @ (0x990 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE2<C1IE>
extern volatile __bit                   C1IE                __at(0x38C0);	// @ (0x718 * 8 + 0)
#define                                 C1IE_bit            _BIT_ACCESS(PIE2,0)
// PIR2<C1IF>
extern volatile __bit                   C1IF                __at(0x3870);	// @ (0x70E * 8 + 0)
#define                                 C1IF_bit            _BIT_ACCESS(PIR2,0)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x4C88);	// @ (0x991 * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x4C89);	// @ (0x991 * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// CM1NSEL<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x4C90);	// @ (0x992 * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NSEL,0)
// CM1NSEL<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x4C91);	// @ (0x992 * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NSEL,1)
// CM1NSEL<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x4C92);	// @ (0x992 * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NSEL,2)
// CM1CON0<C1ON>
extern volatile __bit                   C1ON                __at(0x4C87);	// @ (0x990 * 8 + 7)
#define                                 C1ON_bit            _BIT_ACCESS(CM1CON0,7)
// CM1PSEL<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x4C98);	// @ (0x993 * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PSEL,0)
// CM1PSEL<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x4C99);	// @ (0x993 * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PSEL,1)
// CM1PSEL<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x4C9A);	// @ (0x993 * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PSEL,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x4C84);	// @ (0x990 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SP>
extern volatile __bit                   C1SP                __at(0x4C82);	// @ (0x990 * 8 + 2)
#define                                 C1SP_bit            _BIT_ACCESS(CM1CON0,2)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x4C80);	// @ (0x990 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CCPTMRS0<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x10F0);	// @ (0x21E * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x10F1);	// @ (0x21E * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS0,1)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x4CA1);	// @ (0x994 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE2<C2IE>
extern volatile __bit                   C2IE                __at(0x38C1);	// @ (0x718 * 8 + 1)
#define                                 C2IE_bit            _BIT_ACCESS(PIE2,1)
// PIR2<C2IF>
extern volatile __bit                   C2IF                __at(0x3871);	// @ (0x70E * 8 + 1)
#define                                 C2IF_bit            _BIT_ACCESS(PIR2,1)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x4CA8);	// @ (0x995 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x4CA9);	// @ (0x995 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// CM2NSEL<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x4CB0);	// @ (0x996 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NSEL,0)
// CM2NSEL<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x4CB1);	// @ (0x996 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NSEL,1)
// CM2NSEL<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x4CB2);	// @ (0x996 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NSEL,2)
// CM2CON0<C2ON>
extern volatile __bit                   C2ON                __at(0x4CA7);	// @ (0x994 * 8 + 7)
#define                                 C2ON_bit            _BIT_ACCESS(CM2CON0,7)
// CM2PSEL<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x4CB8);	// @ (0x997 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PSEL,0)
// CM2PSEL<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x4CB9);	// @ (0x997 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PSEL,1)
// CM2PSEL<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x4CBA);	// @ (0x997 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PSEL,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x4CA4);	// @ (0x994 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SP>
extern volatile __bit                   C2SP                __at(0x4CA2);	// @ (0x994 * 8 + 2)
#define                                 C2SP_bit            _BIT_ACCESS(CM2CON0,2)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x4CA0);	// @ (0x994 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// CCPTMRS0<C2TSEL0>
extern volatile __bit                   C2TSEL0             __at(0x10F2);	// @ (0x21E * 8 + 2)
#define                                 C2TSEL0_bit         _BIT_ACCESS(CCPTMRS0,2)
// CCPTMRS0<C2TSEL1>
extern volatile __bit                   C2TSEL1             __at(0x10F3);	// @ (0x21E * 8 + 3)
#define                                 C2TSEL1_bit         _BIT_ACCESS(CCPTMRS0,3)
// CCPTMRS0<C3TSEL0>
extern volatile __bit                   C3TSEL0             __at(0x10F4);	// @ (0x21E * 8 + 4)
#define                                 C3TSEL0_bit         _BIT_ACCESS(CCPTMRS0,4)
// CCPTMRS0<C3TSEL1>
extern volatile __bit                   C3TSEL1             __at(0x10F5);	// @ (0x21E * 8 + 5)
#define                                 C3TSEL1_bit         _BIT_ACCESS(CCPTMRS0,5)
// CCPTMRS0<C4TSEL0>
extern volatile __bit                   C4TSEL0             __at(0x10F6);	// @ (0x21E * 8 + 6)
#define                                 C4TSEL0_bit         _BIT_ACCESS(CCPTMRS0,6)
// CCPTMRS0<C4TSEL1>
extern volatile __bit                   C4TSEL1             __at(0x10F7);	// @ (0x21E * 8 + 7)
#define                                 C4TSEL1_bit         _BIT_ACCESS(CCPTMRS0,7)
// CCPTMRS1<C5TSEL0>
extern volatile __bit                   C5TSEL0             __at(0x10F8);	// @ (0x21F * 8 + 0)
#define                                 C5TSEL0_bit         _BIT_ACCESS(CCPTMRS1,0)
// CCPTMRS1<C5TSEL1>
extern volatile __bit                   C5TSEL1             __at(0x10F9);	// @ (0x21F * 8 + 1)
#define                                 C5TSEL1_bit         _BIT_ACCESS(CCPTMRS1,1)
// TMR1L<CAL01>
extern volatile __bit                   CAL01               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 CAL01_bit           _BIT_ACCESS(TMR1L,0)
// TMR3L<CAL03>
extern volatile __bit                   CAL03               __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 CAL03_bit           _BIT_ACCESS(TMR3L,0)
// TMR5L<CAL05>
extern volatile __bit                   CAL05               __at(0x10C0);	// @ (0x218 * 8 + 0)
#define                                 CAL05_bit           _BIT_ACCESS(TMR5L,0)
// TMR1L<CAL11>
extern volatile __bit                   CAL11               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 CAL11_bit           _BIT_ACCESS(TMR1L,1)
// TMR3L<CAL13>
extern volatile __bit                   CAL13               __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 CAL13_bit           _BIT_ACCESS(TMR3L,1)
// TMR5L<CAL15>
extern volatile __bit                   CAL15               __at(0x10C1);	// @ (0x218 * 8 + 1)
#define                                 CAL15_bit           _BIT_ACCESS(TMR5L,1)
// TMR1L<CAL21>
extern volatile __bit                   CAL21               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 CAL21_bit           _BIT_ACCESS(TMR1L,2)
// TMR3L<CAL23>
extern volatile __bit                   CAL23               __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 CAL23_bit           _BIT_ACCESS(TMR3L,2)
// TMR5L<CAL25>
extern volatile __bit                   CAL25               __at(0x10C2);	// @ (0x218 * 8 + 2)
#define                                 CAL25_bit           _BIT_ACCESS(TMR5L,2)
// TMR1L<CAL31>
extern volatile __bit                   CAL31               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 CAL31_bit           _BIT_ACCESS(TMR1L,3)
// TMR3L<CAL33>
extern volatile __bit                   CAL33               __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 CAL33_bit           _BIT_ACCESS(TMR3L,3)
// TMR5L<CAL35>
extern volatile __bit                   CAL35               __at(0x10C3);	// @ (0x218 * 8 + 3)
#define                                 CAL35_bit           _BIT_ACCESS(TMR5L,3)
// TMR1L<CAL41>
extern volatile __bit                   CAL41               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 CAL41_bit           _BIT_ACCESS(TMR1L,4)
// TMR3L<CAL43>
extern volatile __bit                   CAL43               __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 CAL43_bit           _BIT_ACCESS(TMR3L,4)
// TMR5L<CAL45>
extern volatile __bit                   CAL45               __at(0x10C4);	// @ (0x218 * 8 + 4)
#define                                 CAL45_bit           _BIT_ACCESS(TMR5L,4)
// TMR1L<CAL51>
extern volatile __bit                   CAL51               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 CAL51_bit           _BIT_ACCESS(TMR1L,5)
// TMR3L<CAL53>
extern volatile __bit                   CAL53               __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 CAL53_bit           _BIT_ACCESS(TMR3L,5)
// TMR5L<CAL55>
extern volatile __bit                   CAL55               __at(0x10C5);	// @ (0x218 * 8 + 5)
#define                                 CAL55_bit           _BIT_ACCESS(TMR5L,5)
// TMR1L<CAL61>
extern volatile __bit                   CAL61               __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 CAL61_bit           _BIT_ACCESS(TMR1L,6)
// TMR3L<CAL63>
extern volatile __bit                   CAL63               __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 CAL63_bit           _BIT_ACCESS(TMR3L,6)
// TMR5L<CAL65>
extern volatile __bit                   CAL65               __at(0x10C6);	// @ (0x218 * 8 + 6)
#define                                 CAL65_bit           _BIT_ACCESS(TMR5L,6)
// TMR1L<CAL71>
extern volatile __bit                   CAL71               __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 CAL71_bit           _BIT_ACCESS(TMR1L,7)
// TMR3L<CAL73>
extern volatile __bit                   CAL73               __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 CAL73_bit           _BIT_ACCESS(TMR3L,7)
// TMR5L<CAL75>
extern volatile __bit                   CAL75               __at(0x10C7);	// @ (0x218 * 8 + 7)
#define                                 CAL75_bit           _BIT_ACCESS(TMR5L,7)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCDCON<CCDEN>
extern volatile __bit                   CCDEN               __at(0x40A7);	// @ (0x814 * 8 + 7)
#define                                 CCDEN_bit           _BIT_ACCESS(CCDCON,7)
// CCDNA<CCDNA0>
extern volatile __bit                   CCDNA0              __at(0xFA00);	// @ (0x1F40 * 8 + 0)
#define                                 CCDNA0_bit          _BIT_ACCESS(CCDNA,0)
// CCDNA<CCDNA1>
extern volatile __bit                   CCDNA1              __at(0xFA01);	// @ (0x1F40 * 8 + 1)
#define                                 CCDNA1_bit          _BIT_ACCESS(CCDNA,1)
// CCDNA<CCDNA2>
extern volatile __bit                   CCDNA2              __at(0xFA02);	// @ (0x1F40 * 8 + 2)
#define                                 CCDNA2_bit          _BIT_ACCESS(CCDNA,2)
// CCDNA<CCDNA3>
extern volatile __bit                   CCDNA3              __at(0xFA03);	// @ (0x1F40 * 8 + 3)
#define                                 CCDNA3_bit          _BIT_ACCESS(CCDNA,3)
// CCDNA<CCDNA4>
extern volatile __bit                   CCDNA4              __at(0xFA04);	// @ (0x1F40 * 8 + 4)
#define                                 CCDNA4_bit          _BIT_ACCESS(CCDNA,4)
// CCDNA<CCDNA5>
extern volatile __bit                   CCDNA5              __at(0xFA05);	// @ (0x1F40 * 8 + 5)
#define                                 CCDNA5_bit          _BIT_ACCESS(CCDNA,5)
// CCDNA<CCDNA6>
extern volatile __bit                   CCDNA6              __at(0xFA06);	// @ (0x1F40 * 8 + 6)
#define                                 CCDNA6_bit          _BIT_ACCESS(CCDNA,6)
// CCDNA<CCDNA7>
extern volatile __bit                   CCDNA7              __at(0xFA07);	// @ (0x1F40 * 8 + 7)
#define                                 CCDNA7_bit          _BIT_ACCESS(CCDNA,7)
// CCDNB<CCDNB0>
extern volatile __bit                   CCDNB0              __at(0xFA58);	// @ (0x1F4B * 8 + 0)
#define                                 CCDNB0_bit          _BIT_ACCESS(CCDNB,0)
// CCDNB<CCDNB1>
extern volatile __bit                   CCDNB1              __at(0xFA59);	// @ (0x1F4B * 8 + 1)
#define                                 CCDNB1_bit          _BIT_ACCESS(CCDNB,1)
// CCDNB<CCDNB2>
extern volatile __bit                   CCDNB2              __at(0xFA5A);	// @ (0x1F4B * 8 + 2)
#define                                 CCDNB2_bit          _BIT_ACCESS(CCDNB,2)
// CCDNB<CCDNB3>
extern volatile __bit                   CCDNB3              __at(0xFA5B);	// @ (0x1F4B * 8 + 3)
#define                                 CCDNB3_bit          _BIT_ACCESS(CCDNB,3)
// CCDNB<CCDNB4>
extern volatile __bit                   CCDNB4              __at(0xFA5C);	// @ (0x1F4B * 8 + 4)
#define                                 CCDNB4_bit          _BIT_ACCESS(CCDNB,4)
// CCDNB<CCDNB5>
extern volatile __bit                   CCDNB5              __at(0xFA5D);	// @ (0x1F4B * 8 + 5)
#define                                 CCDNB5_bit          _BIT_ACCESS(CCDNB,5)
// CCDNB<CCDNB6>
extern volatile __bit                   CCDNB6              __at(0xFA5E);	// @ (0x1F4B * 8 + 6)
#define                                 CCDNB6_bit          _BIT_ACCESS(CCDNB,6)
// CCDNB<CCDNB7>
extern volatile __bit                   CCDNB7              __at(0xFA5F);	// @ (0x1F4B * 8 + 7)
#define                                 CCDNB7_bit          _BIT_ACCESS(CCDNB,7)
// CCDNC<CCDNC0>
extern volatile __bit                   CCDNC0              __at(0xFAB0);	// @ (0x1F56 * 8 + 0)
#define                                 CCDNC0_bit          _BIT_ACCESS(CCDNC,0)
// CCDNC<CCDNC1>
extern volatile __bit                   CCDNC1              __at(0xFAB1);	// @ (0x1F56 * 8 + 1)
#define                                 CCDNC1_bit          _BIT_ACCESS(CCDNC,1)
// CCDNC<CCDNC2>
extern volatile __bit                   CCDNC2              __at(0xFAB2);	// @ (0x1F56 * 8 + 2)
#define                                 CCDNC2_bit          _BIT_ACCESS(CCDNC,2)
// CCDNC<CCDNC3>
extern volatile __bit                   CCDNC3              __at(0xFAB3);	// @ (0x1F56 * 8 + 3)
#define                                 CCDNC3_bit          _BIT_ACCESS(CCDNC,3)
// CCDNC<CCDNC4>
extern volatile __bit                   CCDNC4              __at(0xFAB4);	// @ (0x1F56 * 8 + 4)
#define                                 CCDNC4_bit          _BIT_ACCESS(CCDNC,4)
// CCDNC<CCDNC5>
extern volatile __bit                   CCDNC5              __at(0xFAB5);	// @ (0x1F56 * 8 + 5)
#define                                 CCDNC5_bit          _BIT_ACCESS(CCDNC,5)
// CCDNC<CCDNC6>
extern volatile __bit                   CCDNC6              __at(0xFAB6);	// @ (0x1F56 * 8 + 6)
#define                                 CCDNC6_bit          _BIT_ACCESS(CCDNC,6)
// CCDNC<CCDNC7>
extern volatile __bit                   CCDNC7              __at(0xFAB7);	// @ (0x1F56 * 8 + 7)
#define                                 CCDNC7_bit          _BIT_ACCESS(CCDNC,7)
// CCDPA<CCDPA0>
extern volatile __bit                   CCDPA0              __at(0xFA08);	// @ (0x1F41 * 8 + 0)
#define                                 CCDPA0_bit          _BIT_ACCESS(CCDPA,0)
// CCDPA<CCDPA1>
extern volatile __bit                   CCDPA1              __at(0xFA09);	// @ (0x1F41 * 8 + 1)
#define                                 CCDPA1_bit          _BIT_ACCESS(CCDPA,1)
// CCDPA<CCDPA2>
extern volatile __bit                   CCDPA2              __at(0xFA0A);	// @ (0x1F41 * 8 + 2)
#define                                 CCDPA2_bit          _BIT_ACCESS(CCDPA,2)
// CCDPA<CCDPA3>
extern volatile __bit                   CCDPA3              __at(0xFA0B);	// @ (0x1F41 * 8 + 3)
#define                                 CCDPA3_bit          _BIT_ACCESS(CCDPA,3)
// CCDPA<CCDPA4>
extern volatile __bit                   CCDPA4              __at(0xFA0C);	// @ (0x1F41 * 8 + 4)
#define                                 CCDPA4_bit          _BIT_ACCESS(CCDPA,4)
// CCDPA<CCDPA5>
extern volatile __bit                   CCDPA5              __at(0xFA0D);	// @ (0x1F41 * 8 + 5)
#define                                 CCDPA5_bit          _BIT_ACCESS(CCDPA,5)
// CCDPA<CCDPA6>
extern volatile __bit                   CCDPA6              __at(0xFA0E);	// @ (0x1F41 * 8 + 6)
#define                                 CCDPA6_bit          _BIT_ACCESS(CCDPA,6)
// CCDPA<CCDPA7>
extern volatile __bit                   CCDPA7              __at(0xFA0F);	// @ (0x1F41 * 8 + 7)
#define                                 CCDPA7_bit          _BIT_ACCESS(CCDPA,7)
// CCDPB<CCDPB0>
extern volatile __bit                   CCDPB0              __at(0xFA60);	// @ (0x1F4C * 8 + 0)
#define                                 CCDPB0_bit          _BIT_ACCESS(CCDPB,0)
// CCDPB<CCDPB1>
extern volatile __bit                   CCDPB1              __at(0xFA61);	// @ (0x1F4C * 8 + 1)
#define                                 CCDPB1_bit          _BIT_ACCESS(CCDPB,1)
// CCDPB<CCDPB2>
extern volatile __bit                   CCDPB2              __at(0xFA62);	// @ (0x1F4C * 8 + 2)
#define                                 CCDPB2_bit          _BIT_ACCESS(CCDPB,2)
// CCDPB<CCDPB3>
extern volatile __bit                   CCDPB3              __at(0xFA63);	// @ (0x1F4C * 8 + 3)
#define                                 CCDPB3_bit          _BIT_ACCESS(CCDPB,3)
// CCDPB<CCDPB4>
extern volatile __bit                   CCDPB4              __at(0xFA64);	// @ (0x1F4C * 8 + 4)
#define                                 CCDPB4_bit          _BIT_ACCESS(CCDPB,4)
// CCDPB<CCDPB5>
extern volatile __bit                   CCDPB5              __at(0xFA65);	// @ (0x1F4C * 8 + 5)
#define                                 CCDPB5_bit          _BIT_ACCESS(CCDPB,5)
// CCDPB<CCDPB6>
extern volatile __bit                   CCDPB6              __at(0xFA66);	// @ (0x1F4C * 8 + 6)
#define                                 CCDPB6_bit          _BIT_ACCESS(CCDPB,6)
// CCDPB<CCDPB7>
extern volatile __bit                   CCDPB7              __at(0xFA67);	// @ (0x1F4C * 8 + 7)
#define                                 CCDPB7_bit          _BIT_ACCESS(CCDPB,7)
// CCDPC<CCDPC0>
extern volatile __bit                   CCDPC0              __at(0xFAB8);	// @ (0x1F57 * 8 + 0)
#define                                 CCDPC0_bit          _BIT_ACCESS(CCDPC,0)
// CCDPC<CCDPC1>
extern volatile __bit                   CCDPC1              __at(0xFAB9);	// @ (0x1F57 * 8 + 1)
#define                                 CCDPC1_bit          _BIT_ACCESS(CCDPC,1)
// CCDPC<CCDPC2>
extern volatile __bit                   CCDPC2              __at(0xFABA);	// @ (0x1F57 * 8 + 2)
#define                                 CCDPC2_bit          _BIT_ACCESS(CCDPC,2)
// CCDPC<CCDPC3>
extern volatile __bit                   CCDPC3              __at(0xFABB);	// @ (0x1F57 * 8 + 3)
#define                                 CCDPC3_bit          _BIT_ACCESS(CCDPC,3)
// CCDPC<CCDPC4>
extern volatile __bit                   CCDPC4              __at(0xFABC);	// @ (0x1F57 * 8 + 4)
#define                                 CCDPC4_bit          _BIT_ACCESS(CCDPC,4)
// CCDPC<CCDPC5>
extern volatile __bit                   CCDPC5              __at(0xFABD);	// @ (0x1F57 * 8 + 5)
#define                                 CCDPC5_bit          _BIT_ACCESS(CCDPC,5)
// CCDPC<CCDPC6>
extern volatile __bit                   CCDPC6              __at(0xFABE);	// @ (0x1F57 * 8 + 6)
#define                                 CCDPC6_bit          _BIT_ACCESS(CCDPC,6)
// CCDPC<CCDPC7>
extern volatile __bit                   CCDPC7              __at(0xFABF);	// @ (0x1F57 * 8 + 7)
#define                                 CCDPC7_bit          _BIT_ACCESS(CCDPC,7)
// CCDCON<CCDS0>
extern volatile __bit                   CCDS0               __at(0x40A0);	// @ (0x814 * 8 + 0)
#define                                 CCDS0_bit           _BIT_ACCESS(CCDCON,0)
// CCDCON<CCDS1>
extern volatile __bit                   CCDS1               __at(0x40A1);	// @ (0x814 * 8 + 1)
#define                                 CCDS1_bit           _BIT_ACCESS(CCDCON,1)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x1878);	// @ (0x30F * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x1879);	// @ (0x30F * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x1877);	// @ (0x30E * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x1874);	// @ (0x30E * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE6<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x38E0);	// @ (0x71C * 8 + 0)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x3890);	// @ (0x712 * 8 + 0)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR6,0)
// PMD3<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD3,0)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x1873);	// @ (0x30E * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0xF508);	// @ (0x1EA1 * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0xF509);	// @ (0x1EA1 * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0xF50A);	// @ (0x1EA1 * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0xF50B);	// @ (0x1EA1 * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0xF50C);	// @ (0x1EA1 * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x1898);	// @ (0x313 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x1899);	// @ (0x313 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x189A);	// @ (0x313 * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x1897);	// @ (0x312 * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x1894);	// @ (0x312 * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE6<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x38E1);	// @ (0x71C * 8 + 1)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR6,1)
// PMD3<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD3,1)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x1890);	// @ (0x312 * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x1891);	// @ (0x312 * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x1892);	// @ (0x312 * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x1893);	// @ (0x312 * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x1895);	// @ (0x312 * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0xF510);	// @ (0x1EA2 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0xF511);	// @ (0x1EA2 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0xF512);	// @ (0x1EA2 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0xF513);	// @ (0x1EA2 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0xF514);	// @ (0x1EA2 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// CCP3CAP<CCP3CTS0>
extern volatile __bit                   CCP3CTS0            __at(0x18B8);	// @ (0x317 * 8 + 0)
#define                                 CCP3CTS0_bit        _BIT_ACCESS(CCP3CAP,0)
// CCP3CAP<CCP3CTS1>
extern volatile __bit                   CCP3CTS1            __at(0x18B9);	// @ (0x317 * 8 + 1)
#define                                 CCP3CTS1_bit        _BIT_ACCESS(CCP3CAP,1)
// CCP3CAP<CCP3CTS2>
extern volatile __bit                   CCP3CTS2            __at(0x18BA);	// @ (0x317 * 8 + 2)
#define                                 CCP3CTS2_bit        _BIT_ACCESS(CCP3CAP,2)
// CCP3CON<CCP3EN>
extern volatile __bit                   CCP3EN              __at(0x18B7);	// @ (0x316 * 8 + 7)
#define                                 CCP3EN_bit          _BIT_ACCESS(CCP3CON,7)
// CCP3CON<CCP3FMT>
extern volatile __bit                   CCP3FMT             __at(0x18B4);	// @ (0x316 * 8 + 4)
#define                                 CCP3FMT_bit         _BIT_ACCESS(CCP3CON,4)
// PIE6<CCP3IE>
extern volatile __bit                   CCP3IE              __at(0x38E2);	// @ (0x71C * 8 + 2)
#define                                 CCP3IE_bit          _BIT_ACCESS(PIE6,2)
// PIR6<CCP3IF>
extern volatile __bit                   CCP3IF              __at(0x3892);	// @ (0x712 * 8 + 2)
#define                                 CCP3IF_bit          _BIT_ACCESS(PIR6,2)
// PMD3<CCP3MD>
extern volatile __bit                   CCP3MD              __at(0x3CCA);	// @ (0x799 * 8 + 2)
#define                                 CCP3MD_bit          _BIT_ACCESS(PMD3,2)
// CCP3CON<CCP3MODE0>
extern volatile __bit                   CCP3MODE0           __at(0x18B0);	// @ (0x316 * 8 + 0)
#define                                 CCP3MODE0_bit       _BIT_ACCESS(CCP3CON,0)
// CCP3CON<CCP3MODE1>
extern volatile __bit                   CCP3MODE1           __at(0x18B1);	// @ (0x316 * 8 + 1)
#define                                 CCP3MODE1_bit       _BIT_ACCESS(CCP3CON,1)
// CCP3CON<CCP3MODE2>
extern volatile __bit                   CCP3MODE2           __at(0x18B2);	// @ (0x316 * 8 + 2)
#define                                 CCP3MODE2_bit       _BIT_ACCESS(CCP3CON,2)
// CCP3CON<CCP3MODE3>
extern volatile __bit                   CCP3MODE3           __at(0x18B3);	// @ (0x316 * 8 + 3)
#define                                 CCP3MODE3_bit       _BIT_ACCESS(CCP3CON,3)
// CCP3CON<CCP3OUT>
extern volatile __bit                   CCP3OUT             __at(0x18B5);	// @ (0x316 * 8 + 5)
#define                                 CCP3OUT_bit         _BIT_ACCESS(CCP3CON,5)
// CCP3PPS<CCP3PPS0>
extern volatile __bit                   CCP3PPS0            __at(0xF518);	// @ (0x1EA3 * 8 + 0)
#define                                 CCP3PPS0_bit        _BIT_ACCESS(CCP3PPS,0)
// CCP3PPS<CCP3PPS1>
extern volatile __bit                   CCP3PPS1            __at(0xF519);	// @ (0x1EA3 * 8 + 1)
#define                                 CCP3PPS1_bit        _BIT_ACCESS(CCP3PPS,1)
// CCP3PPS<CCP3PPS2>
extern volatile __bit                   CCP3PPS2            __at(0xF51A);	// @ (0x1EA3 * 8 + 2)
#define                                 CCP3PPS2_bit        _BIT_ACCESS(CCP3PPS,2)
// CCP3PPS<CCP3PPS3>
extern volatile __bit                   CCP3PPS3            __at(0xF51B);	// @ (0x1EA3 * 8 + 3)
#define                                 CCP3PPS3_bit        _BIT_ACCESS(CCP3PPS,3)
// CCP3PPS<CCP3PPS4>
extern volatile __bit                   CCP3PPS4            __at(0xF51C);	// @ (0x1EA3 * 8 + 4)
#define                                 CCP3PPS4_bit        _BIT_ACCESS(CCP3PPS,4)
// CCP4CAP<CCP4CTS0>
extern volatile __bit                   CCP4CTS0            __at(0x18D8);	// @ (0x31B * 8 + 0)
#define                                 CCP4CTS0_bit        _BIT_ACCESS(CCP4CAP,0)
// CCP4CAP<CCP4CTS1>
extern volatile __bit                   CCP4CTS1            __at(0x18D9);	// @ (0x31B * 8 + 1)
#define                                 CCP4CTS1_bit        _BIT_ACCESS(CCP4CAP,1)
// CCP4CAP<CCP4CTS2>
extern volatile __bit                   CCP4CTS2            __at(0x18DA);	// @ (0x31B * 8 + 2)
#define                                 CCP4CTS2_bit        _BIT_ACCESS(CCP4CAP,2)
// CCP4CON<CCP4EN>
extern volatile __bit                   CCP4EN              __at(0x18D7);	// @ (0x31A * 8 + 7)
#define                                 CCP4EN_bit          _BIT_ACCESS(CCP4CON,7)
// CCP4CON<CCP4FMT>
extern volatile __bit                   CCP4FMT             __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 CCP4FMT_bit         _BIT_ACCESS(CCP4CON,4)
// PIE6<CCP4IE>
extern volatile __bit                   CCP4IE              __at(0x38E3);	// @ (0x71C * 8 + 3)
#define                                 CCP4IE_bit          _BIT_ACCESS(PIE6,3)
// PIR6<CCP4IF>
extern volatile __bit                   CCP4IF              __at(0x3893);	// @ (0x712 * 8 + 3)
#define                                 CCP4IF_bit          _BIT_ACCESS(PIR6,3)
// PMD3<CCP4MD>
extern volatile __bit                   CCP4MD              __at(0x3CCB);	// @ (0x799 * 8 + 3)
#define                                 CCP4MD_bit          _BIT_ACCESS(PMD3,3)
// CCP4CON<CCP4MODE0>
extern volatile __bit                   CCP4MODE0           __at(0x18D0);	// @ (0x31A * 8 + 0)
#define                                 CCP4MODE0_bit       _BIT_ACCESS(CCP4CON,0)
// CCP4CON<CCP4MODE1>
extern volatile __bit                   CCP4MODE1           __at(0x18D1);	// @ (0x31A * 8 + 1)
#define                                 CCP4MODE1_bit       _BIT_ACCESS(CCP4CON,1)
// CCP4CON<CCP4MODE2>
extern volatile __bit                   CCP4MODE2           __at(0x18D2);	// @ (0x31A * 8 + 2)
#define                                 CCP4MODE2_bit       _BIT_ACCESS(CCP4CON,2)
// CCP4CON<CCP4MODE3>
extern volatile __bit                   CCP4MODE3           __at(0x18D3);	// @ (0x31A * 8 + 3)
#define                                 CCP4MODE3_bit       _BIT_ACCESS(CCP4CON,3)
// CCP4CON<CCP4OUT>
extern volatile __bit                   CCP4OUT             __at(0x18D5);	// @ (0x31A * 8 + 5)
#define                                 CCP4OUT_bit         _BIT_ACCESS(CCP4CON,5)
// CCP4PPS<CCP4PPS0>
extern volatile __bit                   CCP4PPS0            __at(0xF520);	// @ (0x1EA4 * 8 + 0)
#define                                 CCP4PPS0_bit        _BIT_ACCESS(CCP4PPS,0)
// CCP4PPS<CCP4PPS1>
extern volatile __bit                   CCP4PPS1            __at(0xF521);	// @ (0x1EA4 * 8 + 1)
#define                                 CCP4PPS1_bit        _BIT_ACCESS(CCP4PPS,1)
// CCP4PPS<CCP4PPS2>
extern volatile __bit                   CCP4PPS2            __at(0xF522);	// @ (0x1EA4 * 8 + 2)
#define                                 CCP4PPS2_bit        _BIT_ACCESS(CCP4PPS,2)
// CCP4PPS<CCP4PPS3>
extern volatile __bit                   CCP4PPS3            __at(0xF523);	// @ (0x1EA4 * 8 + 3)
#define                                 CCP4PPS3_bit        _BIT_ACCESS(CCP4PPS,3)
// CCP4PPS<CCP4PPS4>
extern volatile __bit                   CCP4PPS4            __at(0xF524);	// @ (0x1EA4 * 8 + 4)
#define                                 CCP4PPS4_bit        _BIT_ACCESS(CCP4PPS,4)
// CCP5CAP<CCP5CTS0>
extern volatile __bit                   CCP5CTS0            __at(0x18F8);	// @ (0x31F * 8 + 0)
#define                                 CCP5CTS0_bit        _BIT_ACCESS(CCP5CAP,0)
// CCP5CAP<CCP5CTS1>
extern volatile __bit                   CCP5CTS1            __at(0x18F9);	// @ (0x31F * 8 + 1)
#define                                 CCP5CTS1_bit        _BIT_ACCESS(CCP5CAP,1)
// CCP5CAP<CCP5CTS2>
extern volatile __bit                   CCP5CTS2            __at(0x18FA);	// @ (0x31F * 8 + 2)
#define                                 CCP5CTS2_bit        _BIT_ACCESS(CCP5CAP,2)
// CCP5CON<CCP5EN>
extern volatile __bit                   CCP5EN              __at(0x18F7);	// @ (0x31E * 8 + 7)
#define                                 CCP5EN_bit          _BIT_ACCESS(CCP5CON,7)
// CCP5CON<CCP5FMT>
extern volatile __bit                   CCP5FMT             __at(0x18F4);	// @ (0x31E * 8 + 4)
#define                                 CCP5FMT_bit         _BIT_ACCESS(CCP5CON,4)
// PIE6<CCP5IE>
extern volatile __bit                   CCP5IE              __at(0x38E4);	// @ (0x71C * 8 + 4)
#define                                 CCP5IE_bit          _BIT_ACCESS(PIE6,4)
// PIR6<CCP5IF>
extern volatile __bit                   CCP5IF              __at(0x3894);	// @ (0x712 * 8 + 4)
#define                                 CCP5IF_bit          _BIT_ACCESS(PIR6,4)
// PMD3<CCP5MD>
extern volatile __bit                   CCP5MD              __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 CCP5MD_bit          _BIT_ACCESS(PMD3,4)
// CCP5CON<CCP5MODE0>
extern volatile __bit                   CCP5MODE0           __at(0x18F0);	// @ (0x31E * 8 + 0)
#define                                 CCP5MODE0_bit       _BIT_ACCESS(CCP5CON,0)
// CCP5CON<CCP5MODE1>
extern volatile __bit                   CCP5MODE1           __at(0x18F1);	// @ (0x31E * 8 + 1)
#define                                 CCP5MODE1_bit       _BIT_ACCESS(CCP5CON,1)
// CCP5CON<CCP5MODE2>
extern volatile __bit                   CCP5MODE2           __at(0x18F2);	// @ (0x31E * 8 + 2)
#define                                 CCP5MODE2_bit       _BIT_ACCESS(CCP5CON,2)
// CCP5CON<CCP5MODE3>
extern volatile __bit                   CCP5MODE3           __at(0x18F3);	// @ (0x31E * 8 + 3)
#define                                 CCP5MODE3_bit       _BIT_ACCESS(CCP5CON,3)
// CCP5CON<CCP5OUT>
extern volatile __bit                   CCP5OUT             __at(0x18F5);	// @ (0x31E * 8 + 5)
#define                                 CCP5OUT_bit         _BIT_ACCESS(CCP5CON,5)
// CCP5PPS<CCP5PPS0>
extern volatile __bit                   CCP5PPS0            __at(0xF528);	// @ (0x1EA5 * 8 + 0)
#define                                 CCP5PPS0_bit        _BIT_ACCESS(CCP5PPS,0)
// CCP5PPS<CCP5PPS1>
extern volatile __bit                   CCP5PPS1            __at(0xF529);	// @ (0x1EA5 * 8 + 1)
#define                                 CCP5PPS1_bit        _BIT_ACCESS(CCP5PPS,1)
// CCP5PPS<CCP5PPS2>
extern volatile __bit                   CCP5PPS2            __at(0xF52A);	// @ (0x1EA5 * 8 + 2)
#define                                 CCP5PPS2_bit        _BIT_ACCESS(CCP5PPS,2)
// CCP5PPS<CCP5PPS3>
extern volatile __bit                   CCP5PPS3            __at(0xF52B);	// @ (0x1EA5 * 8 + 3)
#define                                 CCP5PPS3_bit        _BIT_ACCESS(CCP5PPS,3)
// CCP5PPS<CCP5PPS4>
extern volatile __bit                   CCP5PPS4            __at(0xF52C);	// @ (0x1EA5 * 8 + 4)
#define                                 CCP5PPS4_bit        _BIT_ACCESS(CCP5PPS,4)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x4862);	// @ (0x90C * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x4863);	// @ (0x90C * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x4470);	// @ (0x88E * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x4471);	// @ (0x88E * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x4472);	// @ (0x88E * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x4473);	// @ (0x88E * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP2STAT<CKE2>
extern volatile __bit                   CKE2                __at(0xCCE);	// @ (0x199 * 8 + 6)
#define                                 CKE2_bit            _BIT_ACCESS(SSP2STAT,6)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// SSP2CON1<CKP2>
extern volatile __bit                   CKP2                __at(0xCD4);	// @ (0x19A * 8 + 4)
#define                                 CKP2_bit            _BIT_ACCESS(SSP2CON1,4)
// PIE5<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x38DC);	// @ (0x71B * 8 + 4)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x388C);	// @ (0x711 * 8 + 4)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR5,4)
// PMD5<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x3CD9);	// @ (0x79B * 8 + 1)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD5,1)
// PIE5<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x38DD);	// @ (0x71B * 8 + 5)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE5,5)
// PIR5<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x388D);	// @ (0x711 * 8 + 5)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR5,5)
// PMD5<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x3CDA);	// @ (0x79B * 8 + 2)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD5,2)
// PIE5<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x38DE);	// @ (0x71B * 8 + 6)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE5,6)
// PIR5<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x388E);	// @ (0x711 * 8 + 6)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR5,6)
// PMD5<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x3CDB);	// @ (0x79B * 8 + 3)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD5,3)
// PIE5<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x38DF);	// @ (0x71B * 8 + 7)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE5,7)
// PIR5<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x388F);	// @ (0x711 * 8 + 7)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR5,7)
// PMD5<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x3CDC);	// @ (0x79B * 8 + 4)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD5,4)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0xF5D8);	// @ (0x1EBB * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0xF5D9);	// @ (0x1EBB * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0xF5DA);	// @ (0x1EBB * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0xF5DB);	// @ (0x1EBB * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0xF5DC);	// @ (0x1EBB * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0xF5E0);	// @ (0x1EBC * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0xF5E1);	// @ (0x1EBC * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0xF5E2);	// @ (0x1EBC * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0xF5E3);	// @ (0x1EBC * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0xF5E4);	// @ (0x1EBC * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0xF5E8);	// @ (0x1EBD * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0xF5E9);	// @ (0x1EBD * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0xF5EA);	// @ (0x1EBD * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0xF5EB);	// @ (0x1EBD * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0xF5EC);	// @ (0x1EBD * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0xF5F0);	// @ (0x1EBE * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0xF5F1);	// @ (0x1EBE * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0xF5F2);	// @ (0x1EBE * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0xF5F3);	// @ (0x1EBE * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0xF5F4);	// @ (0x1EBE * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// CLKRCLK<CLKRCLK0>
extern volatile __bit                   CLKRCLK0            __at(0x44B0);	// @ (0x896 * 8 + 0)
#define                                 CLKRCLK0_bit        _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLKRCLK1>
extern volatile __bit                   CLKRCLK1            __at(0x44B1);	// @ (0x896 * 8 + 1)
#define                                 CLKRCLK1_bit        _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLKRCLK2>
extern volatile __bit                   CLKRCLK2            __at(0x44B2);	// @ (0x896 * 8 + 2)
#define                                 CLKRCLK2_bit        _BIT_ACCESS(CLKRCLK,2)
// CLKRCLK<CLKRCLK3>
extern volatile __bit                   CLKRCLK3            __at(0x44B3);	// @ (0x896 * 8 + 3)
#define                                 CLKRCLK3_bit        _BIT_ACCESS(CLKRCLK,3)
// CLKRCON<CLKRDC0>
extern volatile __bit                   CLKRDC0             __at(0x44AB);	// @ (0x895 * 8 + 3)
#define                                 CLKRDC0_bit         _BIT_ACCESS(CLKRCON,3)
// CLKRCON<CLKRDC1>
extern volatile __bit                   CLKRDC1             __at(0x44AC);	// @ (0x895 * 8 + 4)
#define                                 CLKRDC1_bit         _BIT_ACCESS(CLKRCON,4)
// CLKRCON<CLKRDIV0>
extern volatile __bit                   CLKRDIV0            __at(0x44A8);	// @ (0x895 * 8 + 0)
#define                                 CLKRDIV0_bit        _BIT_ACCESS(CLKRCON,0)
// CLKRCON<CLKRDIV1>
extern volatile __bit                   CLKRDIV1            __at(0x44A9);	// @ (0x895 * 8 + 1)
#define                                 CLKRDIV1_bit        _BIT_ACCESS(CLKRCON,1)
// CLKRCON<CLKRDIV2>
extern volatile __bit                   CLKRDIV2            __at(0x44AA);	// @ (0x895 * 8 + 2)
#define                                 CLKRDIV2_bit        _BIT_ACCESS(CLKRCON,2)
// CLKRCON<CLKREN>
extern volatile __bit                   CLKREN              __at(0x44AF);	// @ (0x895 * 8 + 7)
#define                                 CLKREN_bit          _BIT_ACCESS(CLKRCON,7)
// PMD0<CLKRMD>
extern volatile __bit                   CLKRMD              __at(0x3CB1);	// @ (0x796 * 8 + 1)
#define                                 CLKRMD_bit          _BIT_ACCESS(PMD0,1)
// PMD2<CMP1MD>
extern volatile __bit                   CMP1MD              __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 CMP1MD_bit          _BIT_ACCESS(PMD2,1)
// PMD2<CMP2MD>
extern volatile __bit                   CMP2MD              __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 CMP2MD_bit          _BIT_ACCESS(PMD2,2)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x4474);	// @ (0x88E * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x4475);	// @ (0x88E * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x4476);	// @ (0x88E * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x20F7);	// @ (0x41E * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x20F6);	// @ (0x41E * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE7<CRCIE>
extern volatile __bit                   CRCIE               __at(0x38EE);	// @ (0x71D * 8 + 6)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE7,6)
// PIR7<CRCIF>
extern volatile __bit                   CRCIF               __at(0x389E);	// @ (0x713 * 8 + 6)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR7,6)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x3CB4);	// @ (0x796 * 8 + 4)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,4)
// RC1STA<CREN>
extern volatile __bit                   CREN                __at(0x8EC);	// @ (0x11D * 8 + 4)
#define                                 CREN_bit            _BIT_ACCESS(RC1STA,4)
// TX1STA<CSRC>
extern volatile __bit                   CSRC                __at(0x8F7);	// @ (0x11E * 8 + 7)
#define                                 CSRC_bit            _BIT_ACCESS(TX1STA,7)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x447F);	// @ (0x88F * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE1<CSWIE>
extern volatile __bit                   CSWIE               __at(0x38BE);	// @ (0x717 * 8 + 6)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE1,6)
// PIR1<CSWIF>
extern volatile __bit                   CSWIF               __at(0x386E);	// @ (0x70D * 8 + 6)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR1,6)
// CWG1CLKCON<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x3060);	// @ (0x60C * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLKCON,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x3078);	// @ (0x60F * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x3079);	// @ (0x60F * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x307A);	// @ (0x60F * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x307C);	// @ (0x60F * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x3071);	// @ (0x60E * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x3072);	// @ (0x60E * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x3073);	// @ (0x60E * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x3074);	// @ (0x60E * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x3075);	// @ (0x60E * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE7<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x38E8);	// @ (0x71D * 8 + 0)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE7,0)
// PIR7<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x3898);	// @ (0x713 * 8 + 0)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR7,0)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1ISM<CWG1ISM0>
extern volatile __bit                   CWG1ISM0            __at(0x3068);	// @ (0x60D * 8 + 0)
#define                                 CWG1ISM0_bit        _BIT_ACCESS(CWG1ISM,0)
// CWG1ISM<CWG1ISM1>
extern volatile __bit                   CWG1ISM1            __at(0x3069);	// @ (0x60D * 8 + 1)
#define                                 CWG1ISM1_bit        _BIT_ACCESS(CWG1ISM,1)
// CWG1ISM<CWG1ISM2>
extern volatile __bit                   CWG1ISM2            __at(0x306A);	// @ (0x60D * 8 + 2)
#define                                 CWG1ISM2_bit        _BIT_ACCESS(CWG1ISM,2)
// CWG1ISM<CWG1ISM3>
extern volatile __bit                   CWG1ISM3            __at(0x306B);	// @ (0x60D * 8 + 3)
#define                                 CWG1ISM3_bit        _BIT_ACCESS(CWG1ISM,3)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD4<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x3CD0);	// @ (0x79A * 8 + 0)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD4,0)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x3080);	// @ (0x610 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x3081);	// @ (0x610 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x3082);	// @ (0x610 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x30A4);	// @ (0x614 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x30A5);	// @ (0x614 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x30A6);	// @ (0x614 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x30A7);	// @ (0x614 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1PPS<CWG1PPS0>
extern volatile __bit                   CWG1PPS0            __at(0xF588);	// @ (0x1EB1 * 8 + 0)
#define                                 CWG1PPS0_bit        _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWG1PPS1>
extern volatile __bit                   CWG1PPS1            __at(0xF589);	// @ (0x1EB1 * 8 + 1)
#define                                 CWG1PPS1_bit        _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWG1PPS2>
extern volatile __bit                   CWG1PPS2            __at(0xF58A);	// @ (0x1EB1 * 8 + 2)
#define                                 CWG1PPS2_bit        _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWG1PPS3>
extern volatile __bit                   CWG1PPS3            __at(0xF58B);	// @ (0x1EB1 * 8 + 3)
#define                                 CWG1PPS3_bit        _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWG1PPS4>
extern volatile __bit                   CWG1PPS4            __at(0xF58C);	// @ (0x1EB1 * 8 + 4)
#define                                 CWG1PPS4_bit        _BIT_ACCESS(CWG1PPS,4)
// CWG1AS0<CWG1REN>
extern volatile __bit                   CWG1REN             __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 CWG1REN_bit         _BIT_ACCESS(CWG1AS0,6)
// CWG1AS0<CWG1SHUTDOWN>
extern volatile __bit                   CWG1SHUTDOWN        __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 CWG1SHUTDOWN_bit    _BIT_ACCESS(CWG1AS0,7)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x30A0);	// @ (0x614 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x30A1);	// @ (0x614 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x30A2);	// @ (0x614 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x30A3);	// @ (0x614 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// CWG2CLKCON<CWG2CS>
extern volatile __bit                   CWG2CS              __at(0x30B0);	// @ (0x616 * 8 + 0)
#define                                 CWG2CS_bit          _BIT_ACCESS(CWG2CLKCON,0)
// CWG2DBF<CWG2DBF0>
extern volatile __bit                   CWG2DBF0            __at(0x30C8);	// @ (0x619 * 8 + 0)
#define                                 CWG2DBF0_bit        _BIT_ACCESS(CWG2DBF,0)
// CWG2DBF<CWG2DBF1>
extern volatile __bit                   CWG2DBF1            __at(0x30C9);	// @ (0x619 * 8 + 1)
#define                                 CWG2DBF1_bit        _BIT_ACCESS(CWG2DBF,1)
// CWG2DBF<CWG2DBF2>
extern volatile __bit                   CWG2DBF2            __at(0x30CA);	// @ (0x619 * 8 + 2)
#define                                 CWG2DBF2_bit        _BIT_ACCESS(CWG2DBF,2)
// CWG2DBF<CWG2DBF3>
extern volatile __bit                   CWG2DBF3            __at(0x30CB);	// @ (0x619 * 8 + 3)
#define                                 CWG2DBF3_bit        _BIT_ACCESS(CWG2DBF,3)
// CWG2DBF<CWG2DBF4>
extern volatile __bit                   CWG2DBF4            __at(0x30CC);	// @ (0x619 * 8 + 4)
#define                                 CWG2DBF4_bit        _BIT_ACCESS(CWG2DBF,4)
// CWG2DBF<CWG2DBF5>
extern volatile __bit                   CWG2DBF5            __at(0x30CD);	// @ (0x619 * 8 + 5)
#define                                 CWG2DBF5_bit        _BIT_ACCESS(CWG2DBF,5)
// CWG2DBR<CWG2DBR0>
extern volatile __bit                   CWG2DBR0            __at(0x30C0);	// @ (0x618 * 8 + 0)
#define                                 CWG2DBR0_bit        _BIT_ACCESS(CWG2DBR,0)
// CWG2DBR<CWG2DBR1>
extern volatile __bit                   CWG2DBR1            __at(0x30C1);	// @ (0x618 * 8 + 1)
#define                                 CWG2DBR1_bit        _BIT_ACCESS(CWG2DBR,1)
// CWG2DBR<CWG2DBR2>
extern volatile __bit                   CWG2DBR2            __at(0x30C2);	// @ (0x618 * 8 + 2)
#define                                 CWG2DBR2_bit        _BIT_ACCESS(CWG2DBR,2)
// CWG2DBR<CWG2DBR3>
extern volatile __bit                   CWG2DBR3            __at(0x30C3);	// @ (0x618 * 8 + 3)
#define                                 CWG2DBR3_bit        _BIT_ACCESS(CWG2DBR,3)
// CWG2DBR<CWG2DBR4>
extern volatile __bit                   CWG2DBR4            __at(0x30C4);	// @ (0x618 * 8 + 4)
#define                                 CWG2DBR4_bit        _BIT_ACCESS(CWG2DBR,4)
// CWG2DBR<CWG2DBR5>
extern volatile __bit                   CWG2DBR5            __at(0x30C5);	// @ (0x618 * 8 + 5)
#define                                 CWG2DBR5_bit        _BIT_ACCESS(CWG2DBR,5)
// CWG2CON0<CWG2EN>
extern volatile __bit                   CWG2EN              __at(0x30D7);	// @ (0x61A * 8 + 7)
#define                                 CWG2EN_bit          _BIT_ACCESS(CWG2CON0,7)
// PIE7<CWG2IE>
extern volatile __bit                   CWG2IE              __at(0x38E9);	// @ (0x71D * 8 + 1)
#define                                 CWG2IE_bit          _BIT_ACCESS(PIE7,1)
// PIR7<CWG2IF>
extern volatile __bit                   CWG2IF              __at(0x3899);	// @ (0x713 * 8 + 1)
#define                                 CWG2IF_bit          _BIT_ACCESS(PIR7,1)
// CWG2CON1<CWG2IN>
extern volatile __bit                   CWG2IN              __at(0x30DD);	// @ (0x61B * 8 + 5)
#define                                 CWG2IN_bit          _BIT_ACCESS(CWG2CON1,5)
// CWG2ISM<CWG2ISM0>
extern volatile __bit                   CWG2ISM0            __at(0x30B8);	// @ (0x617 * 8 + 0)
#define                                 CWG2ISM0_bit        _BIT_ACCESS(CWG2ISM,0)
// CWG2ISM<CWG2ISM1>
extern volatile __bit                   CWG2ISM1            __at(0x30B9);	// @ (0x617 * 8 + 1)
#define                                 CWG2ISM1_bit        _BIT_ACCESS(CWG2ISM,1)
// CWG2ISM<CWG2ISM2>
extern volatile __bit                   CWG2ISM2            __at(0x30BA);	// @ (0x617 * 8 + 2)
#define                                 CWG2ISM2_bit        _BIT_ACCESS(CWG2ISM,2)
// CWG2ISM<CWG2ISM3>
extern volatile __bit                   CWG2ISM3            __at(0x30BB);	// @ (0x617 * 8 + 3)
#define                                 CWG2ISM3_bit        _BIT_ACCESS(CWG2ISM,3)
// CWG2CON0<CWG2LD>
extern volatile __bit                   CWG2LD              __at(0x30D6);	// @ (0x61A * 8 + 6)
#define                                 CWG2LD_bit          _BIT_ACCESS(CWG2CON0,6)
// CWG2AS0<CWG2LSAC0>
extern volatile __bit                   CWG2LSAC0           __at(0x30E2);	// @ (0x61C * 8 + 2)
#define                                 CWG2LSAC0_bit       _BIT_ACCESS(CWG2AS0,2)
// CWG2AS0<CWG2LSAC1>
extern volatile __bit                   CWG2LSAC1           __at(0x30E3);	// @ (0x61C * 8 + 3)
#define                                 CWG2LSAC1_bit       _BIT_ACCESS(CWG2AS0,3)
// CWG2AS0<CWG2LSBD0>
extern volatile __bit                   CWG2LSBD0           __at(0x30E4);	// @ (0x61C * 8 + 4)
#define                                 CWG2LSBD0_bit       _BIT_ACCESS(CWG2AS0,4)
// CWG2AS0<CWG2LSBD1>
extern volatile __bit                   CWG2LSBD1           __at(0x30E5);	// @ (0x61C * 8 + 5)
#define                                 CWG2LSBD1_bit       _BIT_ACCESS(CWG2AS0,5)
// PMD4<CWG2MD>
extern volatile __bit                   CWG2MD              __at(0x3CD1);	// @ (0x79A * 8 + 1)
#define                                 CWG2MD_bit          _BIT_ACCESS(PMD4,1)
// CWG2CON0<CWG2MODE0>
extern volatile __bit                   CWG2MODE0           __at(0x30D0);	// @ (0x61A * 8 + 0)
#define                                 CWG2MODE0_bit       _BIT_ACCESS(CWG2CON0,0)
// CWG2CON0<CWG2MODE1>
extern volatile __bit                   CWG2MODE1           __at(0x30D1);	// @ (0x61A * 8 + 1)
#define                                 CWG2MODE1_bit       _BIT_ACCESS(CWG2CON0,1)
// CWG2CON0<CWG2MODE2>
extern volatile __bit                   CWG2MODE2           __at(0x30D2);	// @ (0x61A * 8 + 2)
#define                                 CWG2MODE2_bit       _BIT_ACCESS(CWG2CON0,2)
// CWG2STR<CWG2OVRA>
extern volatile __bit                   CWG2OVRA            __at(0x30F4);	// @ (0x61E * 8 + 4)
#define                                 CWG2OVRA_bit        _BIT_ACCESS(CWG2STR,4)
// CWG2STR<CWG2OVRB>
extern volatile __bit                   CWG2OVRB            __at(0x30F5);	// @ (0x61E * 8 + 5)
#define                                 CWG2OVRB_bit        _BIT_ACCESS(CWG2STR,5)
// CWG2STR<CWG2OVRC>
extern volatile __bit                   CWG2OVRC            __at(0x30F6);	// @ (0x61E * 8 + 6)
#define                                 CWG2OVRC_bit        _BIT_ACCESS(CWG2STR,6)
// CWG2STR<CWG2OVRD>
extern volatile __bit                   CWG2OVRD            __at(0x30F7);	// @ (0x61E * 8 + 7)
#define                                 CWG2OVRD_bit        _BIT_ACCESS(CWG2STR,7)
// CWG2CON1<CWG2POLA>
extern volatile __bit                   CWG2POLA            __at(0x30D8);	// @ (0x61B * 8 + 0)
#define                                 CWG2POLA_bit        _BIT_ACCESS(CWG2CON1,0)
// CWG2CON1<CWG2POLB>
extern volatile __bit                   CWG2POLB            __at(0x30D9);	// @ (0x61B * 8 + 1)
#define                                 CWG2POLB_bit        _BIT_ACCESS(CWG2CON1,1)
// CWG2CON1<CWG2POLC>
extern volatile __bit                   CWG2POLC            __at(0x30DA);	// @ (0x61B * 8 + 2)
#define                                 CWG2POLC_bit        _BIT_ACCESS(CWG2CON1,2)
// CWG2CON1<CWG2POLD>
extern volatile __bit                   CWG2POLD            __at(0x30DB);	// @ (0x61B * 8 + 3)
#define                                 CWG2POLD_bit        _BIT_ACCESS(CWG2CON1,3)
// CWG2PPS<CWG2PPS0>
extern volatile __bit                   CWG2PPS0            __at(0xF590);	// @ (0x1EB2 * 8 + 0)
#define                                 CWG2PPS0_bit        _BIT_ACCESS(CWG2PPS,0)
// CWG2PPS<CWG2PPS1>
extern volatile __bit                   CWG2PPS1            __at(0xF591);	// @ (0x1EB2 * 8 + 1)
#define                                 CWG2PPS1_bit        _BIT_ACCESS(CWG2PPS,1)
// CWG2PPS<CWG2PPS2>
extern volatile __bit                   CWG2PPS2            __at(0xF592);	// @ (0x1EB2 * 8 + 2)
#define                                 CWG2PPS2_bit        _BIT_ACCESS(CWG2PPS,2)
// CWG2PPS<CWG2PPS3>
extern volatile __bit                   CWG2PPS3            __at(0xF593);	// @ (0x1EB2 * 8 + 3)
#define                                 CWG2PPS3_bit        _BIT_ACCESS(CWG2PPS,3)
// CWG2PPS<CWG2PPS4>
extern volatile __bit                   CWG2PPS4            __at(0xF594);	// @ (0x1EB2 * 8 + 4)
#define                                 CWG2PPS4_bit        _BIT_ACCESS(CWG2PPS,4)
// CWG2AS0<CWG2REN>
extern volatile __bit                   CWG2REN             __at(0x30E6);	// @ (0x61C * 8 + 6)
#define                                 CWG2REN_bit         _BIT_ACCESS(CWG2AS0,6)
// CWG2AS0<CWG2SHUTDOWN>
extern volatile __bit                   CWG2SHUTDOWN        __at(0x30E7);	// @ (0x61C * 8 + 7)
#define                                 CWG2SHUTDOWN_bit    _BIT_ACCESS(CWG2AS0,7)
// CWG2STR<CWG2STRA>
extern volatile __bit                   CWG2STRA            __at(0x30F0);	// @ (0x61E * 8 + 0)
#define                                 CWG2STRA_bit        _BIT_ACCESS(CWG2STR,0)
// CWG2STR<CWG2STRB>
extern volatile __bit                   CWG2STRB            __at(0x30F1);	// @ (0x61E * 8 + 1)
#define                                 CWG2STRB_bit        _BIT_ACCESS(CWG2STR,1)
// CWG2STR<CWG2STRC>
extern volatile __bit                   CWG2STRC            __at(0x30F2);	// @ (0x61E * 8 + 2)
#define                                 CWG2STRC_bit        _BIT_ACCESS(CWG2STR,2)
// CWG2STR<CWG2STRD>
extern volatile __bit                   CWG2STRD            __at(0x30F3);	// @ (0x61E * 8 + 3)
#define                                 CWG2STRD_bit        _BIT_ACCESS(CWG2STR,3)
// CWG3CLKCON<CWG3CS>
extern volatile __bit                   CWG3CS              __at(0x3460);	// @ (0x68C * 8 + 0)
#define                                 CWG3CS_bit          _BIT_ACCESS(CWG3CLKCON,0)
// CWG3DBF<CWG3DBF0>
extern volatile __bit                   CWG3DBF0            __at(0x3478);	// @ (0x68F * 8 + 0)
#define                                 CWG3DBF0_bit        _BIT_ACCESS(CWG3DBF,0)
// CWG3DBF<CWG3DBF1>
extern volatile __bit                   CWG3DBF1            __at(0x3479);	// @ (0x68F * 8 + 1)
#define                                 CWG3DBF1_bit        _BIT_ACCESS(CWG3DBF,1)
// CWG3DBF<CWG3DBF2>
extern volatile __bit                   CWG3DBF2            __at(0x347A);	// @ (0x68F * 8 + 2)
#define                                 CWG3DBF2_bit        _BIT_ACCESS(CWG3DBF,2)
// CWG3DBF<CWG3DBF3>
extern volatile __bit                   CWG3DBF3            __at(0x347B);	// @ (0x68F * 8 + 3)
#define                                 CWG3DBF3_bit        _BIT_ACCESS(CWG3DBF,3)
// CWG3DBF<CWG3DBF4>
extern volatile __bit                   CWG3DBF4            __at(0x347C);	// @ (0x68F * 8 + 4)
#define                                 CWG3DBF4_bit        _BIT_ACCESS(CWG3DBF,4)
// CWG3DBF<CWG3DBF5>
extern volatile __bit                   CWG3DBF5            __at(0x347D);	// @ (0x68F * 8 + 5)
#define                                 CWG3DBF5_bit        _BIT_ACCESS(CWG3DBF,5)
// CWG3DBR<CWG3DBR0>
extern volatile __bit                   CWG3DBR0            __at(0x3470);	// @ (0x68E * 8 + 0)
#define                                 CWG3DBR0_bit        _BIT_ACCESS(CWG3DBR,0)
// CWG3DBR<CWG3DBR1>
extern volatile __bit                   CWG3DBR1            __at(0x3471);	// @ (0x68E * 8 + 1)
#define                                 CWG3DBR1_bit        _BIT_ACCESS(CWG3DBR,1)
// CWG3DBR<CWG3DBR2>
extern volatile __bit                   CWG3DBR2            __at(0x3472);	// @ (0x68E * 8 + 2)
#define                                 CWG3DBR2_bit        _BIT_ACCESS(CWG3DBR,2)
// CWG3DBR<CWG3DBR3>
extern volatile __bit                   CWG3DBR3            __at(0x3473);	// @ (0x68E * 8 + 3)
#define                                 CWG3DBR3_bit        _BIT_ACCESS(CWG3DBR,3)
// CWG3DBR<CWG3DBR4>
extern volatile __bit                   CWG3DBR4            __at(0x3474);	// @ (0x68E * 8 + 4)
#define                                 CWG3DBR4_bit        _BIT_ACCESS(CWG3DBR,4)
// CWG3DBR<CWG3DBR5>
extern volatile __bit                   CWG3DBR5            __at(0x3475);	// @ (0x68E * 8 + 5)
#define                                 CWG3DBR5_bit        _BIT_ACCESS(CWG3DBR,5)
// CWG3CON0<CWG3EN>
extern volatile __bit                   CWG3EN              __at(0x3487);	// @ (0x690 * 8 + 7)
#define                                 CWG3EN_bit          _BIT_ACCESS(CWG3CON0,7)
// PIE7<CWG3IE>
extern volatile __bit                   CWG3IE              __at(0x38EA);	// @ (0x71D * 8 + 2)
#define                                 CWG3IE_bit          _BIT_ACCESS(PIE7,2)
// PIR7<CWG3IF>
extern volatile __bit                   CWG3IF              __at(0x389A);	// @ (0x713 * 8 + 2)
#define                                 CWG3IF_bit          _BIT_ACCESS(PIR7,2)
// CWG3CON1<CWG3IN>
extern volatile __bit                   CWG3IN              __at(0x348D);	// @ (0x691 * 8 + 5)
#define                                 CWG3IN_bit          _BIT_ACCESS(CWG3CON1,5)
// CWG3ISM<CWG3ISM0>
extern volatile __bit                   CWG3ISM0            __at(0x3468);	// @ (0x68D * 8 + 0)
#define                                 CWG3ISM0_bit        _BIT_ACCESS(CWG3ISM,0)
// CWG3ISM<CWG3ISM1>
extern volatile __bit                   CWG3ISM1            __at(0x3469);	// @ (0x68D * 8 + 1)
#define                                 CWG3ISM1_bit        _BIT_ACCESS(CWG3ISM,1)
// CWG3ISM<CWG3ISM2>
extern volatile __bit                   CWG3ISM2            __at(0x346A);	// @ (0x68D * 8 + 2)
#define                                 CWG3ISM2_bit        _BIT_ACCESS(CWG3ISM,2)
// CWG3ISM<CWG3ISM3>
extern volatile __bit                   CWG3ISM3            __at(0x346B);	// @ (0x68D * 8 + 3)
#define                                 CWG3ISM3_bit        _BIT_ACCESS(CWG3ISM,3)
// CWG3CON0<CWG3LD>
extern volatile __bit                   CWG3LD              __at(0x3486);	// @ (0x690 * 8 + 6)
#define                                 CWG3LD_bit          _BIT_ACCESS(CWG3CON0,6)
// CWG3AS0<CWG3LSAC0>
extern volatile __bit                   CWG3LSAC0           __at(0x3492);	// @ (0x692 * 8 + 2)
#define                                 CWG3LSAC0_bit       _BIT_ACCESS(CWG3AS0,2)
// CWG3AS0<CWG3LSAC1>
extern volatile __bit                   CWG3LSAC1           __at(0x3493);	// @ (0x692 * 8 + 3)
#define                                 CWG3LSAC1_bit       _BIT_ACCESS(CWG3AS0,3)
// CWG3AS0<CWG3LSBD0>
extern volatile __bit                   CWG3LSBD0           __at(0x3494);	// @ (0x692 * 8 + 4)
#define                                 CWG3LSBD0_bit       _BIT_ACCESS(CWG3AS0,4)
// CWG3AS0<CWG3LSBD1>
extern volatile __bit                   CWG3LSBD1           __at(0x3495);	// @ (0x692 * 8 + 5)
#define                                 CWG3LSBD1_bit       _BIT_ACCESS(CWG3AS0,5)
// PMD4<CWG3MD>
extern volatile __bit                   CWG3MD              __at(0x3CD2);	// @ (0x79A * 8 + 2)
#define                                 CWG3MD_bit          _BIT_ACCESS(PMD4,2)
// CWG3CON0<CWG3MODE0>
extern volatile __bit                   CWG3MODE0           __at(0x3480);	// @ (0x690 * 8 + 0)
#define                                 CWG3MODE0_bit       _BIT_ACCESS(CWG3CON0,0)
// CWG3CON0<CWG3MODE1>
extern volatile __bit                   CWG3MODE1           __at(0x3481);	// @ (0x690 * 8 + 1)
#define                                 CWG3MODE1_bit       _BIT_ACCESS(CWG3CON0,1)
// CWG3CON0<CWG3MODE2>
extern volatile __bit                   CWG3MODE2           __at(0x3482);	// @ (0x690 * 8 + 2)
#define                                 CWG3MODE2_bit       _BIT_ACCESS(CWG3CON0,2)
// CWG3STR<CWG3OVRA>
extern volatile __bit                   CWG3OVRA            __at(0x34A4);	// @ (0x694 * 8 + 4)
#define                                 CWG3OVRA_bit        _BIT_ACCESS(CWG3STR,4)
// CWG3STR<CWG3OVRB>
extern volatile __bit                   CWG3OVRB            __at(0x34A5);	// @ (0x694 * 8 + 5)
#define                                 CWG3OVRB_bit        _BIT_ACCESS(CWG3STR,5)
// CWG3STR<CWG3OVRC>
extern volatile __bit                   CWG3OVRC            __at(0x34A6);	// @ (0x694 * 8 + 6)
#define                                 CWG3OVRC_bit        _BIT_ACCESS(CWG3STR,6)
// CWG3STR<CWG3OVRD>
extern volatile __bit                   CWG3OVRD            __at(0x34A7);	// @ (0x694 * 8 + 7)
#define                                 CWG3OVRD_bit        _BIT_ACCESS(CWG3STR,7)
// CWG3CON1<CWG3POLA>
extern volatile __bit                   CWG3POLA            __at(0x3488);	// @ (0x691 * 8 + 0)
#define                                 CWG3POLA_bit        _BIT_ACCESS(CWG3CON1,0)
// CWG3CON1<CWG3POLB>
extern volatile __bit                   CWG3POLB            __at(0x3489);	// @ (0x691 * 8 + 1)
#define                                 CWG3POLB_bit        _BIT_ACCESS(CWG3CON1,1)
// CWG3CON1<CWG3POLC>
extern volatile __bit                   CWG3POLC            __at(0x348A);	// @ (0x691 * 8 + 2)
#define                                 CWG3POLC_bit        _BIT_ACCESS(CWG3CON1,2)
// CWG3CON1<CWG3POLD>
extern volatile __bit                   CWG3POLD            __at(0x348B);	// @ (0x691 * 8 + 3)
#define                                 CWG3POLD_bit        _BIT_ACCESS(CWG3CON1,3)
// CWG3PPS<CWG3PPS0>
extern volatile __bit                   CWG3PPS0            __at(0xF598);	// @ (0x1EB3 * 8 + 0)
#define                                 CWG3PPS0_bit        _BIT_ACCESS(CWG3PPS,0)
// CWG3PPS<CWG3PPS1>
extern volatile __bit                   CWG3PPS1            __at(0xF599);	// @ (0x1EB3 * 8 + 1)
#define                                 CWG3PPS1_bit        _BIT_ACCESS(CWG3PPS,1)
// CWG3PPS<CWG3PPS2>
extern volatile __bit                   CWG3PPS2            __at(0xF59A);	// @ (0x1EB3 * 8 + 2)
#define                                 CWG3PPS2_bit        _BIT_ACCESS(CWG3PPS,2)
// CWG3PPS<CWG3PPS3>
extern volatile __bit                   CWG3PPS3            __at(0xF59B);	// @ (0x1EB3 * 8 + 3)
#define                                 CWG3PPS3_bit        _BIT_ACCESS(CWG3PPS,3)
// CWG3PPS<CWG3PPS4>
extern volatile __bit                   CWG3PPS4            __at(0xF59C);	// @ (0x1EB3 * 8 + 4)
#define                                 CWG3PPS4_bit        _BIT_ACCESS(CWG3PPS,4)
// CWG3AS0<CWG3REN>
extern volatile __bit                   CWG3REN             __at(0x3496);	// @ (0x692 * 8 + 6)
#define                                 CWG3REN_bit         _BIT_ACCESS(CWG3AS0,6)
// CWG3AS0<CWG3SHUTDOWN>
extern volatile __bit                   CWG3SHUTDOWN        __at(0x3497);	// @ (0x692 * 8 + 7)
#define                                 CWG3SHUTDOWN_bit    _BIT_ACCESS(CWG3AS0,7)
// CWG3STR<CWG3STRA>
extern volatile __bit                   CWG3STRA            __at(0x34A0);	// @ (0x694 * 8 + 0)
#define                                 CWG3STRA_bit        _BIT_ACCESS(CWG3STR,0)
// CWG3STR<CWG3STRB>
extern volatile __bit                   CWG3STRB            __at(0x34A1);	// @ (0x694 * 8 + 1)
#define                                 CWG3STRB_bit        _BIT_ACCESS(CWG3STR,1)
// CWG3STR<CWG3STRC>
extern volatile __bit                   CWG3STRC            __at(0x34A2);	// @ (0x694 * 8 + 2)
#define                                 CWG3STRC_bit        _BIT_ACCESS(CWG3STR,2)
// CWG3STR<CWG3STRD>
extern volatile __bit                   CWG3STRD            __at(0x34A3);	// @ (0x694 * 8 + 3)
#define                                 CWG3STRD_bit        _BIT_ACCESS(CWG3STR,3)
// STATUS_SHAD<C_SHAD>
extern volatile __bit                   C_SHAD              __at(0xFF20);	// @ (0x1FE4 * 8 + 0)
#define                                 C_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,0)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<DA2>
extern volatile __bit                   DA2                 __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 DA2_bit             _BIT_ACCESS(SSP2STAT,5)
// SCANCON0<DABORT>
extern volatile __bit                   DABORT              __at(0x2084);	// @ (0x410 * 8 + 4)
#define                                 DABORT_bit          _BIT_ACCESS(SCANCON0,4)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x4877);	// @ (0x90E * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// DAC1CON0<DAC1NSS>
extern volatile __bit                   DAC1NSS             __at(0x4870);	// @ (0x90E * 8 + 0)
#define                                 DAC1NSS_bit         _BIT_ACCESS(DAC1CON0,0)
// DAC1CON0<DAC1OE1>
extern volatile __bit                   DAC1OE1             __at(0x4875);	// @ (0x90E * 8 + 5)
#define                                 DAC1OE1_bit         _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<DAC1OE2>
extern volatile __bit                   DAC1OE2             __at(0x4874);	// @ (0x90E * 8 + 4)
#define                                 DAC1OE2_bit         _BIT_ACCESS(DAC1CON0,4)
// DAC1CON0<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x4872);	// @ (0x90E * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x4873);	// @ (0x90E * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON0,3)
// DAC1CON1<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x4878);	// @ (0x90F * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1CON1,0)
// DAC1CON1<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x4879);	// @ (0x90F * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1CON1,1)
// DAC1CON1<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x487A);	// @ (0x90F * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1CON1,2)
// DAC1CON1<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x487B);	// @ (0x90F * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1CON1,3)
// DAC1CON1<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x487C);	// @ (0x90F * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1CON1,4)
// PMD2<DACMD>
extern volatile __bit                   DACMD               __at(0x3CC6);	// @ (0x798 * 8 + 6)
#define                                 DACMD_bit           _BIT_ACCESS(PMD2,6)
// CRCDATL<DATA0>
extern volatile __bit                   DATA0               __at(0x20B0);	// @ (0x416 * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATL,0)
// CRCDATL<DATA1>
extern volatile __bit                   DATA1               __at(0x20B1);	// @ (0x416 * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATL,1)
// CRCDATH<DATA10>
extern volatile __bit                   DATA10              __at(0x20BA);	// @ (0x417 * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATH,2)
// CRCDATH<DATA11>
extern volatile __bit                   DATA11              __at(0x20BB);	// @ (0x417 * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATH,3)
// CRCDATH<DATA12>
extern volatile __bit                   DATA12              __at(0x20BC);	// @ (0x417 * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATH,4)
// CRCDATH<DATA13>
extern volatile __bit                   DATA13              __at(0x20BD);	// @ (0x417 * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATH,5)
// CRCDATH<DATA14>
extern volatile __bit                   DATA14              __at(0x20BE);	// @ (0x417 * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATH,6)
// CRCDATH<DATA15>
extern volatile __bit                   DATA15              __at(0x20BF);	// @ (0x417 * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATH,7)
// CRCDATL<DATA2>
extern volatile __bit                   DATA2               __at(0x20B2);	// @ (0x416 * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATL,2)
// CRCDATL<DATA3>
extern volatile __bit                   DATA3               __at(0x20B3);	// @ (0x416 * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATL,3)
// CRCDATL<DATA4>
extern volatile __bit                   DATA4               __at(0x20B4);	// @ (0x416 * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATL,4)
// CRCDATL<DATA5>
extern volatile __bit                   DATA5               __at(0x20B5);	// @ (0x416 * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATL,5)
// CRCDATL<DATA6>
extern volatile __bit                   DATA6               __at(0x20B6);	// @ (0x416 * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATL,6)
// CRCDATL<DATA7>
extern volatile __bit                   DATA7               __at(0x20B7);	// @ (0x416 * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATL,7)
// CRCDATH<DATA8>
extern volatile __bit                   DATA8               __at(0x20B8);	// @ (0x417 * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATH,0)
// CRCDATH<DATA9>
extern volatile __bit                   DATA9               __at(0x20B9);	// @ (0x417 * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATH,1)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<DATA_ADDRESS2>
extern volatile __bit                   DATA_ADDRESS2       __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 DATA_ADDRESS2_bit   _BIT_ACCESS(SSP2STAT,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// STATUS_SHAD<DC_SHAD>
extern volatile __bit                   DC_SHAD             __at(0xFF21);	// @ (0x1FE4 * 8 + 1)
#define                                 DC_SHAD_bit         _BIT_ACCESS(STATUS_SHAD,1)
// CRCCON1<DLEN0>
extern volatile __bit                   DLEN0               __at(0x20FC);	// @ (0x41F * 8 + 4)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON1,4)
// CRCCON1<DLEN1>
extern volatile __bit                   DLEN1               __at(0x20FD);	// @ (0x41F * 8 + 5)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON1,5)
// CRCCON1<DLEN2>
extern volatile __bit                   DLEN2               __at(0x20FE);	// @ (0x41F * 8 + 6)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON1,6)
// CRCCON1<DLEN3>
extern volatile __bit                   DLEN3               __at(0x20FF);	// @ (0x41F * 8 + 7)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON1,7)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x4464);	// @ (0x88C * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x4460);	// @ (0x88C * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x4461);	// @ (0x88C * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x4462);	// @ (0x88C * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x4466);	// @ (0x88C * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// PMD5<DSMMD>
extern volatile __bit                   DSMMD               __at(0x3CD8);	// @ (0x79B * 8 + 0)
#define                                 DSMMD_bit           _BIT_ACCESS(PMD5,0)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_A2>
extern volatile __bit                   D_A2                __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 D_A2_bit            _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<D_nA2>
extern volatile __bit                   D_nA2               __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 D_nA2_bit           _BIT_ACCESS(SSP2STAT,5)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x448F);	// @ (0x891 * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x4487);	// @ (0x890 * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// RC1STA<FERR>
extern volatile __bit                   FERR                __at(0x8EA);	// @ (0x11D * 8 + 2)
#define                                 FERR_bit            _BIT_ACCESS(RC1STA,2)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0x40F4);	// @ (0x81E * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x20F0);	// @ (0x41E * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x4867);	// @ (0x90C * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x3CB6);	// @ (0x796 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x4866);	// @ (0x90C * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// CWG2CON0<G2EN>
extern volatile __bit                   G2EN                __at(0x30D7);	// @ (0x61A * 8 + 7)
#define                                 G2EN_bit            _BIT_ACCESS(CWG2CON0,7)
// CWG3CON0<G3EN>
extern volatile __bit                   G3EN                __at(0x3487);	// @ (0x690 * 8 + 7)
#define                                 G3EN_bit            _BIT_ACCESS(CWG3CON0,7)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// SSP2CON2<GCEN2>
extern volatile __bit                   GCEN2               __at(0xCDF);	// @ (0x19B * 8 + 7)
#define                                 GCEN2_bit           _BIT_ACCESS(SSP2CON2,7)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x2070);	// @ (0x40E * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x2071);	// @ (0x40E * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x207A);	// @ (0x40F * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x207B);	// @ (0x40F * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x207C);	// @ (0x40F * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x207D);	// @ (0x40F * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x207E);	// @ (0x40F * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x207F);	// @ (0x40F * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRL<HADR2>
extern volatile __bit                   HADR2               __at(0x2072);	// @ (0x40E * 8 + 2)
#define                                 HADR2_bit           _BIT_ACCESS(SCANHADRL,2)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x2073);	// @ (0x40E * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x2076);	// @ (0x40E * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x2077);	// @ (0x40E * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x2078);	// @ (0x40F * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x2079);	// @ (0x40F * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// OSCFRQ<HFFRQ0>
extern volatile __bit                   HFFRQ0              __at(0x4498);	// @ (0x893 * 8 + 0)
#define                                 HFFRQ0_bit          _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<HFFRQ1>
extern volatile __bit                   HFFRQ1              __at(0x4499);	// @ (0x893 * 8 + 1)
#define                                 HFFRQ1_bit          _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<HFFRQ2>
extern volatile __bit                   HFFRQ2              __at(0x449A);	// @ (0x893 * 8 + 2)
#define                                 HFFRQ2_bit          _BIT_ACCESS(OSCFRQ,2)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x448E);	// @ (0x891 * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x4486);	// @ (0x890 * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// OSCTUNE<HFTUN0>
extern volatile __bit                   HFTUN0              __at(0x4490);	// @ (0x892 * 8 + 0)
#define                                 HFTUN0_bit          _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<HFTUN1>
extern volatile __bit                   HFTUN1              __at(0x4491);	// @ (0x892 * 8 + 1)
#define                                 HFTUN1_bit          _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<HFTUN2>
extern volatile __bit                   HFTUN2              __at(0x4492);	// @ (0x892 * 8 + 2)
#define                                 HFTUN2_bit          _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<HFTUN3>
extern volatile __bit                   HFTUN3              __at(0x4493);	// @ (0x892 * 8 + 3)
#define                                 HFTUN3_bit          _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<HFTUN4>
extern volatile __bit                   HFTUN4              __at(0x4494);	// @ (0x892 * 8 + 4)
#define                                 HFTUN4_bit          _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<HFTUN5>
extern volatile __bit                   HFTUN5              __at(0x4495);	// @ (0x892 * 8 + 5)
#define                                 HFTUN5_bit          _BIT_ACCESS(OSCTUNE,5)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<I2C_DAT2>
extern volatile __bit                   I2C_DAT2            __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 I2C_DAT2_bit        _BIT_ACCESS(SSP2STAT,5)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<I2C_READ2>
extern volatile __bit                   I2C_READ2           __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 I2C_READ2_bit       _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP2STAT<I2C_START2>
extern volatile __bit                   I2C_START2          __at(0xCCB);	// @ (0x199 * 8 + 3)
#define                                 I2C_START2_bit      _BIT_ACCESS(SSP2STAT,3)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x4467);	// @ (0x88C * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0xF9E0);	// @ (0x1F3C * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0xF9E1);	// @ (0x1F3C * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0xF9E2);	// @ (0x1F3C * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0xF9E3);	// @ (0x1F3C * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0xF9E4);	// @ (0x1F3C * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0xF9E5);	// @ (0x1F3C * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLA<INLVLA6>
extern volatile __bit                   INLVLA6             __at(0xF9E6);	// @ (0x1F3C * 8 + 6)
#define                                 INLVLA6_bit         _BIT_ACCESS(INLVLA,6)
// INLVLA<INLVLA7>
extern volatile __bit                   INLVLA7             __at(0xF9E7);	// @ (0x1F3C * 8 + 7)
#define                                 INLVLA7_bit         _BIT_ACCESS(INLVLA,7)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0xFA38);	// @ (0x1F47 * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0xFA39);	// @ (0x1F47 * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0xFA3A);	// @ (0x1F47 * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0xFA3B);	// @ (0x1F47 * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0xFA3C);	// @ (0x1F47 * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0xFA3D);	// @ (0x1F47 * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0xFA3E);	// @ (0x1F47 * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0xFA3F);	// @ (0x1F47 * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0xFA90);	// @ (0x1F52 * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0xFA91);	// @ (0x1F52 * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0xFA92);	// @ (0x1F52 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0xFA93);	// @ (0x1F52 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0xFA94);	// @ (0x1F52 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0xFA95);	// @ (0x1F52 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0xFA96);	// @ (0x1F52 * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0xFA97);	// @ (0x1F52 * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// INLVLE<INLVLE0>
extern volatile __bit                   INLVLE0             __at(0xFB40);	// @ (0x1F68 * 8 + 0)
#define                                 INLVLE0_bit         _BIT_ACCESS(INLVLE,0)
// INLVLE<INLVLE1>
extern volatile __bit                   INLVLE1             __at(0xFB41);	// @ (0x1F68 * 8 + 1)
#define                                 INLVLE1_bit         _BIT_ACCESS(INLVLE,1)
// INLVLE<INLVLE2>
extern volatile __bit                   INLVLE2             __at(0xFB42);	// @ (0x1F68 * 8 + 2)
#define                                 INLVLE2_bit         _BIT_ACCESS(INLVLE,2)
// PIE0<INTE>
extern volatile __bit                   INTE                __at(0x38B0);	// @ (0x716 * 8 + 0)
#define                                 INTE_bit            _BIT_ACCESS(PIE0,0)
// INTCON<INTEDG>
extern volatile __bit                   INTEDG              __at(0x58);	// @ (0xB * 8 + 0)
#define                                 INTEDG_bit          _BIT_ACCESS(INTCON,0)
// PIR0<INTF>
extern volatile __bit                   INTF                __at(0x3860);	// @ (0x70C * 8 + 0)
#define                                 INTF_bit            _BIT_ACCESS(PIR0,0)
// SCANCON0<INTM>
extern volatile __bit                   INTM                __at(0x2083);	// @ (0x410 * 8 + 3)
#define                                 INTM_bit            _BIT_ACCESS(SCANCON0,3)
// INTPPS<INTPPS0>
extern volatile __bit                   INTPPS0             __at(0xF480);	// @ (0x1E90 * 8 + 0)
#define                                 INTPPS0_bit         _BIT_ACCESS(INTPPS,0)
// INTPPS<INTPPS1>
extern volatile __bit                   INTPPS1             __at(0xF481);	// @ (0x1E90 * 8 + 1)
#define                                 INTPPS1_bit         _BIT_ACCESS(INTPPS,1)
// INTPPS<INTPPS2>
extern volatile __bit                   INTPPS2             __at(0xF482);	// @ (0x1E90 * 8 + 2)
#define                                 INTPPS2_bit         _BIT_ACCESS(INTPPS,2)
// INTPPS<INTPPS3>
extern volatile __bit                   INTPPS3             __at(0xF483);	// @ (0x1E90 * 8 + 3)
#define                                 INTPPS3_bit         _BIT_ACCESS(INTPPS,3)
// SCANCON0<INVALID>
extern volatile __bit                   INVALID             __at(0x2084);	// @ (0x410 * 8 + 4)
#define                                 INVALID_bit         _BIT_ACCESS(SCANCON0,4)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0xF9F8);	// @ (0x1F3F * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0xF9F9);	// @ (0x1F3F * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0xF9FA);	// @ (0x1F3F * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0xF9FB);	// @ (0x1F3F * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0xF9FC);	// @ (0x1F3F * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0xF9FD);	// @ (0x1F3F * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAF<IOCAF6>
extern volatile __bit                   IOCAF6              __at(0xF9FE);	// @ (0x1F3F * 8 + 6)
#define                                 IOCAF6_bit          _BIT_ACCESS(IOCAF,6)
// IOCAF<IOCAF7>
extern volatile __bit                   IOCAF7              __at(0xF9FF);	// @ (0x1F3F * 8 + 7)
#define                                 IOCAF7_bit          _BIT_ACCESS(IOCAF,7)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0xF9F0);	// @ (0x1F3E * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0xF9F1);	// @ (0x1F3E * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0xF9F2);	// @ (0x1F3E * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0xF9F3);	// @ (0x1F3E * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0xF9F4);	// @ (0x1F3E * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0xF9F5);	// @ (0x1F3E * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAN<IOCAN6>
extern volatile __bit                   IOCAN6              __at(0xF9F6);	// @ (0x1F3E * 8 + 6)
#define                                 IOCAN6_bit          _BIT_ACCESS(IOCAN,6)
// IOCAN<IOCAN7>
extern volatile __bit                   IOCAN7              __at(0xF9F7);	// @ (0x1F3E * 8 + 7)
#define                                 IOCAN7_bit          _BIT_ACCESS(IOCAN,7)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0xF9E8);	// @ (0x1F3D * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0xF9E9);	// @ (0x1F3D * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0xF9EA);	// @ (0x1F3D * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0xF9EB);	// @ (0x1F3D * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0xF9EC);	// @ (0x1F3D * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0xF9ED);	// @ (0x1F3D * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCAP<IOCAP6>
extern volatile __bit                   IOCAP6              __at(0xF9EE);	// @ (0x1F3D * 8 + 6)
#define                                 IOCAP6_bit          _BIT_ACCESS(IOCAP,6)
// IOCAP<IOCAP7>
extern volatile __bit                   IOCAP7              __at(0xF9EF);	// @ (0x1F3D * 8 + 7)
#define                                 IOCAP7_bit          _BIT_ACCESS(IOCAP,7)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0xFA50);	// @ (0x1F4A * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0xFA51);	// @ (0x1F4A * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0xFA52);	// @ (0x1F4A * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0xFA53);	// @ (0x1F4A * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0xFA54);	// @ (0x1F4A * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0xFA55);	// @ (0x1F4A * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0xFA56);	// @ (0x1F4A * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0xFA57);	// @ (0x1F4A * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0xFA48);	// @ (0x1F49 * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0xFA49);	// @ (0x1F49 * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0xFA4A);	// @ (0x1F49 * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0xFA4B);	// @ (0x1F49 * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0xFA4C);	// @ (0x1F49 * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0xFA4D);	// @ (0x1F49 * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0xFA4E);	// @ (0x1F49 * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0xFA4F);	// @ (0x1F49 * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0xFA40);	// @ (0x1F48 * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0xFA41);	// @ (0x1F48 * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0xFA42);	// @ (0x1F48 * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0xFA43);	// @ (0x1F48 * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0xFA44);	// @ (0x1F48 * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0xFA45);	// @ (0x1F48 * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0xFA46);	// @ (0x1F48 * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0xFA47);	// @ (0x1F48 * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0xFAA8);	// @ (0x1F55 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0xFAA9);	// @ (0x1F55 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0xFAAA);	// @ (0x1F55 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0xFAAB);	// @ (0x1F55 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0xFAAC);	// @ (0x1F55 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0xFAAD);	// @ (0x1F55 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0xFAAE);	// @ (0x1F55 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0xFAAF);	// @ (0x1F55 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0xFAA0);	// @ (0x1F54 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0xFAA1);	// @ (0x1F54 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0xFAA2);	// @ (0x1F54 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0xFAA3);	// @ (0x1F54 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0xFAA4);	// @ (0x1F54 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0xFAA5);	// @ (0x1F54 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0xFAA6);	// @ (0x1F54 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0xFAA7);	// @ (0x1F54 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0xFA98);	// @ (0x1F53 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0xFA99);	// @ (0x1F53 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0xFA9A);	// @ (0x1F53 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0xFA9B);	// @ (0x1F53 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0xFA9C);	// @ (0x1F53 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0xFA9D);	// @ (0x1F53 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0xFA9E);	// @ (0x1F53 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0xFA9F);	// @ (0x1F53 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// IOCEF<IOCEF3>
extern volatile __bit                   IOCEF3              __at(0xFB5B);	// @ (0x1F6B * 8 + 3)
#define                                 IOCEF3_bit          _BIT_ACCESS(IOCEF,3)
// IOCEN<IOCEN3>
extern volatile __bit                   IOCEN3              __at(0xFB53);	// @ (0x1F6A * 8 + 3)
#define                                 IOCEN3_bit          _BIT_ACCESS(IOCEN,3)
// IOCEP<IOCEP3>
extern volatile __bit                   IOCEP3              __at(0xFB4B);	// @ (0x1F69 * 8 + 3)
#define                                 IOCEP3_bit          _BIT_ACCESS(IOCEP,3)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x38B4);	// @ (0x716 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x3864);	// @ (0x70C * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,4)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// SCANLADRL<LADR0>
extern volatile __bit                   LADR0               __at(0x2060);	// @ (0x40C * 8 + 0)
#define                                 LADR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LADR1>
extern volatile __bit                   LADR1               __at(0x2061);	// @ (0x40C * 8 + 1)
#define                                 LADR1_bit           _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x206A);	// @ (0x40D * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x206B);	// @ (0x40D * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x206C);	// @ (0x40D * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x206D);	// @ (0x40D * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x206E);	// @ (0x40D * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x206F);	// @ (0x40D * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x2062);	// @ (0x40C * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x2063);	// @ (0x40C * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x2064);	// @ (0x40C * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x2065);	// @ (0x40C * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x2066);	// @ (0x40C * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x2067);	// @ (0x40C * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x2068);	// @ (0x40D * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x2069);	// @ (0x40D * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0xB0);	// @ (0x16 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0xB1);	// @ (0x16 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0xB2);	// @ (0x16 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0xB3);	// @ (0x16 * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0xB4);	// @ (0x16 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0xB5);	// @ (0x16 * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0xB6);	// @ (0x16 * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0xB7);	// @ (0x16 * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0xB8);	// @ (0x17 * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0xB9);	// @ (0x17 * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0xBA);	// @ (0x17 * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0xBB);	// @ (0x17 * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0xBC);	// @ (0x17 * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0xBD);	// @ (0x17 * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0xBE);	// @ (0x17 * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0xBF);	// @ (0x17 * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0xC1);	// @ (0x18 * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0xC2);	// @ (0x18 * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0xC3);	// @ (0x18 * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0xC5);	// @ (0x18 * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0xC7);	// @ (0x18 * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0xF090);	// @ (0x1E12 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0xF091);	// @ (0x1E12 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0xF092);	// @ (0x1E12 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0xF093);	// @ (0x1E12 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0xF094);	// @ (0x1E12 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL0<LC1D1S5>
extern volatile __bit                   LC1D1S5             __at(0xF095);	// @ (0x1E12 * 8 + 5)
#define                                 LC1D1S5_bit         _BIT_ACCESS(CLC1SEL0,5)
// CLC1SEL0<LC1D1S6>
extern volatile __bit                   LC1D1S6             __at(0xF096);	// @ (0x1E12 * 8 + 6)
#define                                 LC1D1S6_bit         _BIT_ACCESS(CLC1SEL0,6)
// CLC1SEL0<LC1D1S7>
extern volatile __bit                   LC1D1S7             __at(0xF097);	// @ (0x1E12 * 8 + 7)
#define                                 LC1D1S7_bit         _BIT_ACCESS(CLC1SEL0,7)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0xF098);	// @ (0x1E13 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0xF099);	// @ (0x1E13 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0xF09A);	// @ (0x1E13 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0xF09B);	// @ (0x1E13 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0xF09C);	// @ (0x1E13 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL1<LC1D2S5>
extern volatile __bit                   LC1D2S5             __at(0xF09D);	// @ (0x1E13 * 8 + 5)
#define                                 LC1D2S5_bit         _BIT_ACCESS(CLC1SEL1,5)
// CLC1SEL1<LC1D2S6>
extern volatile __bit                   LC1D2S6             __at(0xF09E);	// @ (0x1E13 * 8 + 6)
#define                                 LC1D2S6_bit         _BIT_ACCESS(CLC1SEL1,6)
// CLC1SEL1<LC1D2S7>
extern volatile __bit                   LC1D2S7             __at(0xF09F);	// @ (0x1E13 * 8 + 7)
#define                                 LC1D2S7_bit         _BIT_ACCESS(CLC1SEL1,7)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0xF0A0);	// @ (0x1E14 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0xF0A1);	// @ (0x1E14 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0xF0A2);	// @ (0x1E14 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0xF0A3);	// @ (0x1E14 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0xF0A4);	// @ (0x1E14 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL2<LC1D3S5>
extern volatile __bit                   LC1D3S5             __at(0xF0A5);	// @ (0x1E14 * 8 + 5)
#define                                 LC1D3S5_bit         _BIT_ACCESS(CLC1SEL2,5)
// CLC1SEL2<LC1D3S6>
extern volatile __bit                   LC1D3S6             __at(0xF0A6);	// @ (0x1E14 * 8 + 6)
#define                                 LC1D3S6_bit         _BIT_ACCESS(CLC1SEL2,6)
// CLC1SEL2<LC1D3S7>
extern volatile __bit                   LC1D3S7             __at(0xF0A7);	// @ (0x1E14 * 8 + 7)
#define                                 LC1D3S7_bit         _BIT_ACCESS(CLC1SEL2,7)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0xF0A8);	// @ (0x1E15 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0xF0A9);	// @ (0x1E15 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0xF0AA);	// @ (0x1E15 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0xF0AB);	// @ (0x1E15 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0xF0AC);	// @ (0x1E15 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1SEL3<LC1D4S5>
extern volatile __bit                   LC1D4S5             __at(0xF0AD);	// @ (0x1E15 * 8 + 5)
#define                                 LC1D4S5_bit         _BIT_ACCESS(CLC1SEL3,5)
// CLC1SEL3<LC1D4S6>
extern volatile __bit                   LC1D4S6             __at(0xF0AE);	// @ (0x1E15 * 8 + 6)
#define                                 LC1D4S6_bit         _BIT_ACCESS(CLC1SEL3,6)
// CLC1SEL3<LC1D4S7>
extern volatile __bit                   LC1D4S7             __at(0xF0AF);	// @ (0x1E15 * 8 + 7)
#define                                 LC1D4S7_bit         _BIT_ACCESS(CLC1SEL3,7)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0xF087);	// @ (0x1E10 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0xF0B0);	// @ (0x1E16 * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0xF0B1);	// @ (0x1E16 * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0xF0B2);	// @ (0x1E16 * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0xF0B3);	// @ (0x1E16 * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0xF0B4);	// @ (0x1E16 * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0xF0B5);	// @ (0x1E16 * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0xF0B6);	// @ (0x1E16 * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0xF0B7);	// @ (0x1E16 * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0xF088);	// @ (0x1E11 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0xF0B8);	// @ (0x1E17 * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0xF0B9);	// @ (0x1E17 * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0xF0BA);	// @ (0x1E17 * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0xF0BB);	// @ (0x1E17 * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0xF0BC);	// @ (0x1E17 * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0xF0BD);	// @ (0x1E17 * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0xF0BE);	// @ (0x1E17 * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0xF0BF);	// @ (0x1E17 * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0xF089);	// @ (0x1E11 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0xF0C0);	// @ (0x1E18 * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0xF0C1);	// @ (0x1E18 * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0xF0C2);	// @ (0x1E18 * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0xF0C3);	// @ (0x1E18 * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0xF0C4);	// @ (0x1E18 * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0xF0C5);	// @ (0x1E18 * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0xF0C6);	// @ (0x1E18 * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0xF0C7);	// @ (0x1E18 * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0xF08A);	// @ (0x1E11 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0xF0C8);	// @ (0x1E19 * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0xF0C9);	// @ (0x1E19 * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0xF0CA);	// @ (0x1E19 * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0xF0CB);	// @ (0x1E19 * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0xF0CC);	// @ (0x1E19 * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0xF0CD);	// @ (0x1E19 * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0xF0CE);	// @ (0x1E19 * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0xF0CF);	// @ (0x1E19 * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0xF08B);	// @ (0x1E11 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0xF083);	// @ (0x1E10 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0xF084);	// @ (0x1E10 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0xF080);	// @ (0x1E10 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0xF081);	// @ (0x1E10 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0xF082);	// @ (0x1E10 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1CON<LC1OUT>
extern volatile __bit                   LC1OUT              __at(0xF085);	// @ (0x1E10 * 8 + 5)
#define                                 LC1OUT_bit          _BIT_ACCESS(CLC1CON,5)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0xF08F);	// @ (0x1E11 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0xF0E0);	// @ (0x1E1C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0xF0E1);	// @ (0x1E1C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0xF0E2);	// @ (0x1E1C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0xF0E3);	// @ (0x1E1C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0xF0E4);	// @ (0x1E1C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL0<LC2D1S5>
extern volatile __bit                   LC2D1S5             __at(0xF0E5);	// @ (0x1E1C * 8 + 5)
#define                                 LC2D1S5_bit         _BIT_ACCESS(CLC2SEL0,5)
// CLC2SEL0<LC2D1S6>
extern volatile __bit                   LC2D1S6             __at(0xF0E6);	// @ (0x1E1C * 8 + 6)
#define                                 LC2D1S6_bit         _BIT_ACCESS(CLC2SEL0,6)
// CLC2SEL0<LC2D1S7>
extern volatile __bit                   LC2D1S7             __at(0xF0E7);	// @ (0x1E1C * 8 + 7)
#define                                 LC2D1S7_bit         _BIT_ACCESS(CLC2SEL0,7)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0xF0E8);	// @ (0x1E1D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0xF0E9);	// @ (0x1E1D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0xF0EA);	// @ (0x1E1D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0xF0EB);	// @ (0x1E1D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0xF0EC);	// @ (0x1E1D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL1<LC2D2S5>
extern volatile __bit                   LC2D2S5             __at(0xF0ED);	// @ (0x1E1D * 8 + 5)
#define                                 LC2D2S5_bit         _BIT_ACCESS(CLC2SEL1,5)
// CLC2SEL1<LC2D2S6>
extern volatile __bit                   LC2D2S6             __at(0xF0EE);	// @ (0x1E1D * 8 + 6)
#define                                 LC2D2S6_bit         _BIT_ACCESS(CLC2SEL1,6)
// CLC2SEL1<LC2D2S7>
extern volatile __bit                   LC2D2S7             __at(0xF0EF);	// @ (0x1E1D * 8 + 7)
#define                                 LC2D2S7_bit         _BIT_ACCESS(CLC2SEL1,7)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0xF0F0);	// @ (0x1E1E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0xF0F1);	// @ (0x1E1E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0xF0F2);	// @ (0x1E1E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0xF0F3);	// @ (0x1E1E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0xF0F4);	// @ (0x1E1E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL2<LC2D3S5>
extern volatile __bit                   LC2D3S5             __at(0xF0F5);	// @ (0x1E1E * 8 + 5)
#define                                 LC2D3S5_bit         _BIT_ACCESS(CLC2SEL2,5)
// CLC2SEL2<LC2D3S6>
extern volatile __bit                   LC2D3S6             __at(0xF0F6);	// @ (0x1E1E * 8 + 6)
#define                                 LC2D3S6_bit         _BIT_ACCESS(CLC2SEL2,6)
// CLC2SEL2<LC2D3S7>
extern volatile __bit                   LC2D3S7             __at(0xF0F7);	// @ (0x1E1E * 8 + 7)
#define                                 LC2D3S7_bit         _BIT_ACCESS(CLC2SEL2,7)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0xF0F8);	// @ (0x1E1F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0xF0F9);	// @ (0x1E1F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0xF0FA);	// @ (0x1E1F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0xF0FB);	// @ (0x1E1F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0xF0FC);	// @ (0x1E1F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2SEL3<LC2D4S5>
extern volatile __bit                   LC2D4S5             __at(0xF0FD);	// @ (0x1E1F * 8 + 5)
#define                                 LC2D4S5_bit         _BIT_ACCESS(CLC2SEL3,5)
// CLC2SEL3<LC2D4S6>
extern volatile __bit                   LC2D4S6             __at(0xF0FE);	// @ (0x1E1F * 8 + 6)
#define                                 LC2D4S6_bit         _BIT_ACCESS(CLC2SEL3,6)
// CLC2SEL3<LC2D4S7>
extern volatile __bit                   LC2D4S7             __at(0xF0FF);	// @ (0x1E1F * 8 + 7)
#define                                 LC2D4S7_bit         _BIT_ACCESS(CLC2SEL3,7)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0xF0D7);	// @ (0x1E1A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0xF100);	// @ (0x1E20 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0xF101);	// @ (0x1E20 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0xF102);	// @ (0x1E20 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0xF103);	// @ (0x1E20 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0xF104);	// @ (0x1E20 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0xF105);	// @ (0x1E20 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0xF106);	// @ (0x1E20 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0xF107);	// @ (0x1E20 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0xF0D8);	// @ (0x1E1B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0xF108);	// @ (0x1E21 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0xF109);	// @ (0x1E21 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0xF10A);	// @ (0x1E21 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0xF10B);	// @ (0x1E21 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0xF10C);	// @ (0x1E21 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0xF10D);	// @ (0x1E21 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0xF10E);	// @ (0x1E21 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0xF10F);	// @ (0x1E21 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0xF0D9);	// @ (0x1E1B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0xF110);	// @ (0x1E22 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0xF111);	// @ (0x1E22 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0xF112);	// @ (0x1E22 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0xF113);	// @ (0x1E22 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0xF114);	// @ (0x1E22 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0xF115);	// @ (0x1E22 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0xF116);	// @ (0x1E22 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0xF117);	// @ (0x1E22 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0xF0DA);	// @ (0x1E1B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0xF118);	// @ (0x1E23 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0xF119);	// @ (0x1E23 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0xF11A);	// @ (0x1E23 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0xF11B);	// @ (0x1E23 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0xF11C);	// @ (0x1E23 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0xF11D);	// @ (0x1E23 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0xF11E);	// @ (0x1E23 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0xF11F);	// @ (0x1E23 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0xF0DB);	// @ (0x1E1B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0xF0D3);	// @ (0x1E1A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0xF0D4);	// @ (0x1E1A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0xF0D0);	// @ (0x1E1A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0xF0D1);	// @ (0x1E1A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0xF0D2);	// @ (0x1E1A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2CON<LC2OUT>
extern volatile __bit                   LC2OUT              __at(0xF0D5);	// @ (0x1E1A * 8 + 5)
#define                                 LC2OUT_bit          _BIT_ACCESS(CLC2CON,5)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0xF0DF);	// @ (0x1E1B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// CLC3SEL0<LC3D1S0>
extern volatile __bit                   LC3D1S0             __at(0xF130);	// @ (0x1E26 * 8 + 0)
#define                                 LC3D1S0_bit         _BIT_ACCESS(CLC3SEL0,0)
// CLC3SEL0<LC3D1S1>
extern volatile __bit                   LC3D1S1             __at(0xF131);	// @ (0x1E26 * 8 + 1)
#define                                 LC3D1S1_bit         _BIT_ACCESS(CLC3SEL0,1)
// CLC3SEL0<LC3D1S2>
extern volatile __bit                   LC3D1S2             __at(0xF132);	// @ (0x1E26 * 8 + 2)
#define                                 LC3D1S2_bit         _BIT_ACCESS(CLC3SEL0,2)
// CLC3SEL0<LC3D1S3>
extern volatile __bit                   LC3D1S3             __at(0xF133);	// @ (0x1E26 * 8 + 3)
#define                                 LC3D1S3_bit         _BIT_ACCESS(CLC3SEL0,3)
// CLC3SEL0<LC3D1S4>
extern volatile __bit                   LC3D1S4             __at(0xF134);	// @ (0x1E26 * 8 + 4)
#define                                 LC3D1S4_bit         _BIT_ACCESS(CLC3SEL0,4)
// CLC3SEL0<LC3D1S5>
extern volatile __bit                   LC3D1S5             __at(0xF135);	// @ (0x1E26 * 8 + 5)
#define                                 LC3D1S5_bit         _BIT_ACCESS(CLC3SEL0,5)
// CLC3SEL0<LC3D1S6>
extern volatile __bit                   LC3D1S6             __at(0xF136);	// @ (0x1E26 * 8 + 6)
#define                                 LC3D1S6_bit         _BIT_ACCESS(CLC3SEL0,6)
// CLC3SEL0<LC3D1S7>
extern volatile __bit                   LC3D1S7             __at(0xF137);	// @ (0x1E26 * 8 + 7)
#define                                 LC3D1S7_bit         _BIT_ACCESS(CLC3SEL0,7)
// CLC3SEL1<LC3D2S0>
extern volatile __bit                   LC3D2S0             __at(0xF138);	// @ (0x1E27 * 8 + 0)
#define                                 LC3D2S0_bit         _BIT_ACCESS(CLC3SEL1,0)
// CLC3SEL1<LC3D2S1>
extern volatile __bit                   LC3D2S1             __at(0xF139);	// @ (0x1E27 * 8 + 1)
#define                                 LC3D2S1_bit         _BIT_ACCESS(CLC3SEL1,1)
// CLC3SEL1<LC3D2S2>
extern volatile __bit                   LC3D2S2             __at(0xF13A);	// @ (0x1E27 * 8 + 2)
#define                                 LC3D2S2_bit         _BIT_ACCESS(CLC3SEL1,2)
// CLC3SEL1<LC3D2S3>
extern volatile __bit                   LC3D2S3             __at(0xF13B);	// @ (0x1E27 * 8 + 3)
#define                                 LC3D2S3_bit         _BIT_ACCESS(CLC3SEL1,3)
// CLC3SEL1<LC3D2S4>
extern volatile __bit                   LC3D2S4             __at(0xF13C);	// @ (0x1E27 * 8 + 4)
#define                                 LC3D2S4_bit         _BIT_ACCESS(CLC3SEL1,4)
// CLC3SEL1<LC3D2S5>
extern volatile __bit                   LC3D2S5             __at(0xF13D);	// @ (0x1E27 * 8 + 5)
#define                                 LC3D2S5_bit         _BIT_ACCESS(CLC3SEL1,5)
// CLC3SEL1<LC3D2S6>
extern volatile __bit                   LC3D2S6             __at(0xF13E);	// @ (0x1E27 * 8 + 6)
#define                                 LC3D2S6_bit         _BIT_ACCESS(CLC3SEL1,6)
// CLC3SEL1<LC3D2S7>
extern volatile __bit                   LC3D2S7             __at(0xF13F);	// @ (0x1E27 * 8 + 7)
#define                                 LC3D2S7_bit         _BIT_ACCESS(CLC3SEL1,7)
// CLC3SEL2<LC3D3S0>
extern volatile __bit                   LC3D3S0             __at(0xF140);	// @ (0x1E28 * 8 + 0)
#define                                 LC3D3S0_bit         _BIT_ACCESS(CLC3SEL2,0)
// CLC3SEL2<LC3D3S1>
extern volatile __bit                   LC3D3S1             __at(0xF141);	// @ (0x1E28 * 8 + 1)
#define                                 LC3D3S1_bit         _BIT_ACCESS(CLC3SEL2,1)
// CLC3SEL2<LC3D3S2>
extern volatile __bit                   LC3D3S2             __at(0xF142);	// @ (0x1E28 * 8 + 2)
#define                                 LC3D3S2_bit         _BIT_ACCESS(CLC3SEL2,2)
// CLC3SEL2<LC3D3S3>
extern volatile __bit                   LC3D3S3             __at(0xF143);	// @ (0x1E28 * 8 + 3)
#define                                 LC3D3S3_bit         _BIT_ACCESS(CLC3SEL2,3)
// CLC3SEL2<LC3D3S4>
extern volatile __bit                   LC3D3S4             __at(0xF144);	// @ (0x1E28 * 8 + 4)
#define                                 LC3D3S4_bit         _BIT_ACCESS(CLC3SEL2,4)
// CLC3SEL2<LC3D3S5>
extern volatile __bit                   LC3D3S5             __at(0xF145);	// @ (0x1E28 * 8 + 5)
#define                                 LC3D3S5_bit         _BIT_ACCESS(CLC3SEL2,5)
// CLC3SEL2<LC3D3S6>
extern volatile __bit                   LC3D3S6             __at(0xF146);	// @ (0x1E28 * 8 + 6)
#define                                 LC3D3S6_bit         _BIT_ACCESS(CLC3SEL2,6)
// CLC3SEL2<LC3D3S7>
extern volatile __bit                   LC3D3S7             __at(0xF147);	// @ (0x1E28 * 8 + 7)
#define                                 LC3D3S7_bit         _BIT_ACCESS(CLC3SEL2,7)
// CLC3SEL3<LC3D4S0>
extern volatile __bit                   LC3D4S0             __at(0xF148);	// @ (0x1E29 * 8 + 0)
#define                                 LC3D4S0_bit         _BIT_ACCESS(CLC3SEL3,0)
// CLC3SEL3<LC3D4S1>
extern volatile __bit                   LC3D4S1             __at(0xF149);	// @ (0x1E29 * 8 + 1)
#define                                 LC3D4S1_bit         _BIT_ACCESS(CLC3SEL3,1)
// CLC3SEL3<LC3D4S2>
extern volatile __bit                   LC3D4S2             __at(0xF14A);	// @ (0x1E29 * 8 + 2)
#define                                 LC3D4S2_bit         _BIT_ACCESS(CLC3SEL3,2)
// CLC3SEL3<LC3D4S3>
extern volatile __bit                   LC3D4S3             __at(0xF14B);	// @ (0x1E29 * 8 + 3)
#define                                 LC3D4S3_bit         _BIT_ACCESS(CLC3SEL3,3)
// CLC3SEL3<LC3D4S4>
extern volatile __bit                   LC3D4S4             __at(0xF14C);	// @ (0x1E29 * 8 + 4)
#define                                 LC3D4S4_bit         _BIT_ACCESS(CLC3SEL3,4)
// CLC3SEL3<LC3D4S5>
extern volatile __bit                   LC3D4S5             __at(0xF14D);	// @ (0x1E29 * 8 + 5)
#define                                 LC3D4S5_bit         _BIT_ACCESS(CLC3SEL3,5)
// CLC3SEL3<LC3D4S6>
extern volatile __bit                   LC3D4S6             __at(0xF14E);	// @ (0x1E29 * 8 + 6)
#define                                 LC3D4S6_bit         _BIT_ACCESS(CLC3SEL3,6)
// CLC3SEL3<LC3D4S7>
extern volatile __bit                   LC3D4S7             __at(0xF14F);	// @ (0x1E29 * 8 + 7)
#define                                 LC3D4S7_bit         _BIT_ACCESS(CLC3SEL3,7)
// CLC3CON<LC3EN>
extern volatile __bit                   LC3EN               __at(0xF127);	// @ (0x1E24 * 8 + 7)
#define                                 LC3EN_bit           _BIT_ACCESS(CLC3CON,7)
// CLC3GLS0<LC3G1D1N>
extern volatile __bit                   LC3G1D1N            __at(0xF150);	// @ (0x1E2A * 8 + 0)
#define                                 LC3G1D1N_bit        _BIT_ACCESS(CLC3GLS0,0)
// CLC3GLS0<LC3G1D1T>
extern volatile __bit                   LC3G1D1T            __at(0xF151);	// @ (0x1E2A * 8 + 1)
#define                                 LC3G1D1T_bit        _BIT_ACCESS(CLC3GLS0,1)
// CLC3GLS0<LC3G1D2N>
extern volatile __bit                   LC3G1D2N            __at(0xF152);	// @ (0x1E2A * 8 + 2)
#define                                 LC3G1D2N_bit        _BIT_ACCESS(CLC3GLS0,2)
// CLC3GLS0<LC3G1D2T>
extern volatile __bit                   LC3G1D2T            __at(0xF153);	// @ (0x1E2A * 8 + 3)
#define                                 LC3G1D2T_bit        _BIT_ACCESS(CLC3GLS0,3)
// CLC3GLS0<LC3G1D3N>
extern volatile __bit                   LC3G1D3N            __at(0xF154);	// @ (0x1E2A * 8 + 4)
#define                                 LC3G1D3N_bit        _BIT_ACCESS(CLC3GLS0,4)
// CLC3GLS0<LC3G1D3T>
extern volatile __bit                   LC3G1D3T            __at(0xF155);	// @ (0x1E2A * 8 + 5)
#define                                 LC3G1D3T_bit        _BIT_ACCESS(CLC3GLS0,5)
// CLC3GLS0<LC3G1D4N>
extern volatile __bit                   LC3G1D4N            __at(0xF156);	// @ (0x1E2A * 8 + 6)
#define                                 LC3G1D4N_bit        _BIT_ACCESS(CLC3GLS0,6)
// CLC3GLS0<LC3G1D4T>
extern volatile __bit                   LC3G1D4T            __at(0xF157);	// @ (0x1E2A * 8 + 7)
#define                                 LC3G1D4T_bit        _BIT_ACCESS(CLC3GLS0,7)
// CLC3POL<LC3G1POL>
extern volatile __bit                   LC3G1POL            __at(0xF128);	// @ (0x1E25 * 8 + 0)
#define                                 LC3G1POL_bit        _BIT_ACCESS(CLC3POL,0)
// CLC3GLS1<LC3G2D1N>
extern volatile __bit                   LC3G2D1N            __at(0xF158);	// @ (0x1E2B * 8 + 0)
#define                                 LC3G2D1N_bit        _BIT_ACCESS(CLC3GLS1,0)
// CLC3GLS1<LC3G2D1T>
extern volatile __bit                   LC3G2D1T            __at(0xF159);	// @ (0x1E2B * 8 + 1)
#define                                 LC3G2D1T_bit        _BIT_ACCESS(CLC3GLS1,1)
// CLC3GLS1<LC3G2D2N>
extern volatile __bit                   LC3G2D2N            __at(0xF15A);	// @ (0x1E2B * 8 + 2)
#define                                 LC3G2D2N_bit        _BIT_ACCESS(CLC3GLS1,2)
// CLC3GLS1<LC3G2D2T>
extern volatile __bit                   LC3G2D2T            __at(0xF15B);	// @ (0x1E2B * 8 + 3)
#define                                 LC3G2D2T_bit        _BIT_ACCESS(CLC3GLS1,3)
// CLC3GLS1<LC3G2D3N>
extern volatile __bit                   LC3G2D3N            __at(0xF15C);	// @ (0x1E2B * 8 + 4)
#define                                 LC3G2D3N_bit        _BIT_ACCESS(CLC3GLS1,4)
// CLC3GLS1<LC3G2D3T>
extern volatile __bit                   LC3G2D3T            __at(0xF15D);	// @ (0x1E2B * 8 + 5)
#define                                 LC3G2D3T_bit        _BIT_ACCESS(CLC3GLS1,5)
// CLC3GLS1<LC3G2D4N>
extern volatile __bit                   LC3G2D4N            __at(0xF15E);	// @ (0x1E2B * 8 + 6)
#define                                 LC3G2D4N_bit        _BIT_ACCESS(CLC3GLS1,6)
// CLC3GLS1<LC3G2D4T>
extern volatile __bit                   LC3G2D4T            __at(0xF15F);	// @ (0x1E2B * 8 + 7)
#define                                 LC3G2D4T_bit        _BIT_ACCESS(CLC3GLS1,7)
// CLC3POL<LC3G2POL>
extern volatile __bit                   LC3G2POL            __at(0xF129);	// @ (0x1E25 * 8 + 1)
#define                                 LC3G2POL_bit        _BIT_ACCESS(CLC3POL,1)
// CLC3GLS2<LC3G3D1N>
extern volatile __bit                   LC3G3D1N            __at(0xF160);	// @ (0x1E2C * 8 + 0)
#define                                 LC3G3D1N_bit        _BIT_ACCESS(CLC3GLS2,0)
// CLC3GLS2<LC3G3D1T>
extern volatile __bit                   LC3G3D1T            __at(0xF161);	// @ (0x1E2C * 8 + 1)
#define                                 LC3G3D1T_bit        _BIT_ACCESS(CLC3GLS2,1)
// CLC3GLS2<LC3G3D2N>
extern volatile __bit                   LC3G3D2N            __at(0xF162);	// @ (0x1E2C * 8 + 2)
#define                                 LC3G3D2N_bit        _BIT_ACCESS(CLC3GLS2,2)
// CLC3GLS2<LC3G3D2T>
extern volatile __bit                   LC3G3D2T            __at(0xF163);	// @ (0x1E2C * 8 + 3)
#define                                 LC3G3D2T_bit        _BIT_ACCESS(CLC3GLS2,3)
// CLC3GLS2<LC3G3D3N>
extern volatile __bit                   LC3G3D3N            __at(0xF164);	// @ (0x1E2C * 8 + 4)
#define                                 LC3G3D3N_bit        _BIT_ACCESS(CLC3GLS2,4)
// CLC3GLS2<LC3G3D3T>
extern volatile __bit                   LC3G3D3T            __at(0xF165);	// @ (0x1E2C * 8 + 5)
#define                                 LC3G3D3T_bit        _BIT_ACCESS(CLC3GLS2,5)
// CLC3GLS2<LC3G3D4N>
extern volatile __bit                   LC3G3D4N            __at(0xF166);	// @ (0x1E2C * 8 + 6)
#define                                 LC3G3D4N_bit        _BIT_ACCESS(CLC3GLS2,6)
// CLC3GLS2<LC3G3D4T>
extern volatile __bit                   LC3G3D4T            __at(0xF167);	// @ (0x1E2C * 8 + 7)
#define                                 LC3G3D4T_bit        _BIT_ACCESS(CLC3GLS2,7)
// CLC3POL<LC3G3POL>
extern volatile __bit                   LC3G3POL            __at(0xF12A);	// @ (0x1E25 * 8 + 2)
#define                                 LC3G3POL_bit        _BIT_ACCESS(CLC3POL,2)
// CLC3GLS3<LC3G4D1N>
extern volatile __bit                   LC3G4D1N            __at(0xF168);	// @ (0x1E2D * 8 + 0)
#define                                 LC3G4D1N_bit        _BIT_ACCESS(CLC3GLS3,0)
// CLC3GLS3<LC3G4D1T>
extern volatile __bit                   LC3G4D1T            __at(0xF169);	// @ (0x1E2D * 8 + 1)
#define                                 LC3G4D1T_bit        _BIT_ACCESS(CLC3GLS3,1)
// CLC3GLS3<LC3G4D2N>
extern volatile __bit                   LC3G4D2N            __at(0xF16A);	// @ (0x1E2D * 8 + 2)
#define                                 LC3G4D2N_bit        _BIT_ACCESS(CLC3GLS3,2)
// CLC3GLS3<LC3G4D2T>
extern volatile __bit                   LC3G4D2T            __at(0xF16B);	// @ (0x1E2D * 8 + 3)
#define                                 LC3G4D2T_bit        _BIT_ACCESS(CLC3GLS3,3)
// CLC3GLS3<LC3G4D3N>
extern volatile __bit                   LC3G4D3N            __at(0xF16C);	// @ (0x1E2D * 8 + 4)
#define                                 LC3G4D3N_bit        _BIT_ACCESS(CLC3GLS3,4)
// CLC3GLS3<LC3G4D3T>
extern volatile __bit                   LC3G4D3T            __at(0xF16D);	// @ (0x1E2D * 8 + 5)
#define                                 LC3G4D3T_bit        _BIT_ACCESS(CLC3GLS3,5)
// CLC3GLS3<LC3G4D4N>
extern volatile __bit                   LC3G4D4N            __at(0xF16E);	// @ (0x1E2D * 8 + 6)
#define                                 LC3G4D4N_bit        _BIT_ACCESS(CLC3GLS3,6)
// CLC3GLS3<LC3G4D4T>
extern volatile __bit                   LC3G4D4T            __at(0xF16F);	// @ (0x1E2D * 8 + 7)
#define                                 LC3G4D4T_bit        _BIT_ACCESS(CLC3GLS3,7)
// CLC3POL<LC3G4POL>
extern volatile __bit                   LC3G4POL            __at(0xF12B);	// @ (0x1E25 * 8 + 3)
#define                                 LC3G4POL_bit        _BIT_ACCESS(CLC3POL,3)
// CLC3CON<LC3INTN>
extern volatile __bit                   LC3INTN             __at(0xF123);	// @ (0x1E24 * 8 + 3)
#define                                 LC3INTN_bit         _BIT_ACCESS(CLC3CON,3)
// CLC3CON<LC3INTP>
extern volatile __bit                   LC3INTP             __at(0xF124);	// @ (0x1E24 * 8 + 4)
#define                                 LC3INTP_bit         _BIT_ACCESS(CLC3CON,4)
// CLC3CON<LC3MODE0>
extern volatile __bit                   LC3MODE0            __at(0xF120);	// @ (0x1E24 * 8 + 0)
#define                                 LC3MODE0_bit        _BIT_ACCESS(CLC3CON,0)
// CLC3CON<LC3MODE1>
extern volatile __bit                   LC3MODE1            __at(0xF121);	// @ (0x1E24 * 8 + 1)
#define                                 LC3MODE1_bit        _BIT_ACCESS(CLC3CON,1)
// CLC3CON<LC3MODE2>
extern volatile __bit                   LC3MODE2            __at(0xF122);	// @ (0x1E24 * 8 + 2)
#define                                 LC3MODE2_bit        _BIT_ACCESS(CLC3CON,2)
// CLC3CON<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0xF125);	// @ (0x1E24 * 8 + 5)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLC3CON,5)
// CLC3POL<LC3POL>
extern volatile __bit                   LC3POL              __at(0xF12F);	// @ (0x1E25 * 8 + 7)
#define                                 LC3POL_bit          _BIT_ACCESS(CLC3POL,7)
// CLC4SEL0<LC4D1S0>
extern volatile __bit                   LC4D1S0             __at(0xF180);	// @ (0x1E30 * 8 + 0)
#define                                 LC4D1S0_bit         _BIT_ACCESS(CLC4SEL0,0)
// CLC4SEL0<LC4D1S1>
extern volatile __bit                   LC4D1S1             __at(0xF181);	// @ (0x1E30 * 8 + 1)
#define                                 LC4D1S1_bit         _BIT_ACCESS(CLC4SEL0,1)
// CLC4SEL0<LC4D1S2>
extern volatile __bit                   LC4D1S2             __at(0xF182);	// @ (0x1E30 * 8 + 2)
#define                                 LC4D1S2_bit         _BIT_ACCESS(CLC4SEL0,2)
// CLC4SEL0<LC4D1S3>
extern volatile __bit                   LC4D1S3             __at(0xF183);	// @ (0x1E30 * 8 + 3)
#define                                 LC4D1S3_bit         _BIT_ACCESS(CLC4SEL0,3)
// CLC4SEL0<LC4D1S4>
extern volatile __bit                   LC4D1S4             __at(0xF184);	// @ (0x1E30 * 8 + 4)
#define                                 LC4D1S4_bit         _BIT_ACCESS(CLC4SEL0,4)
// CLC4SEL0<LC4D1S5>
extern volatile __bit                   LC4D1S5             __at(0xF185);	// @ (0x1E30 * 8 + 5)
#define                                 LC4D1S5_bit         _BIT_ACCESS(CLC4SEL0,5)
// CLC4SEL0<LC4D1S6>
extern volatile __bit                   LC4D1S6             __at(0xF186);	// @ (0x1E30 * 8 + 6)
#define                                 LC4D1S6_bit         _BIT_ACCESS(CLC4SEL0,6)
// CLC4SEL0<LC4D1S7>
extern volatile __bit                   LC4D1S7             __at(0xF187);	// @ (0x1E30 * 8 + 7)
#define                                 LC4D1S7_bit         _BIT_ACCESS(CLC4SEL0,7)
// CLC4SEL1<LC4D2S0>
extern volatile __bit                   LC4D2S0             __at(0xF188);	// @ (0x1E31 * 8 + 0)
#define                                 LC4D2S0_bit         _BIT_ACCESS(CLC4SEL1,0)
// CLC4SEL1<LC4D2S1>
extern volatile __bit                   LC4D2S1             __at(0xF189);	// @ (0x1E31 * 8 + 1)
#define                                 LC4D2S1_bit         _BIT_ACCESS(CLC4SEL1,1)
// CLC4SEL1<LC4D2S2>
extern volatile __bit                   LC4D2S2             __at(0xF18A);	// @ (0x1E31 * 8 + 2)
#define                                 LC4D2S2_bit         _BIT_ACCESS(CLC4SEL1,2)
// CLC4SEL1<LC4D2S3>
extern volatile __bit                   LC4D2S3             __at(0xF18B);	// @ (0x1E31 * 8 + 3)
#define                                 LC4D2S3_bit         _BIT_ACCESS(CLC4SEL1,3)
// CLC4SEL1<LC4D2S4>
extern volatile __bit                   LC4D2S4             __at(0xF18C);	// @ (0x1E31 * 8 + 4)
#define                                 LC4D2S4_bit         _BIT_ACCESS(CLC4SEL1,4)
// CLC4SEL1<LC4D2S5>
extern volatile __bit                   LC4D2S5             __at(0xF18D);	// @ (0x1E31 * 8 + 5)
#define                                 LC4D2S5_bit         _BIT_ACCESS(CLC4SEL1,5)
// CLC4SEL1<LC4D2S6>
extern volatile __bit                   LC4D2S6             __at(0xF18E);	// @ (0x1E31 * 8 + 6)
#define                                 LC4D2S6_bit         _BIT_ACCESS(CLC4SEL1,6)
// CLC4SEL1<LC4D2S7>
extern volatile __bit                   LC4D2S7             __at(0xF18F);	// @ (0x1E31 * 8 + 7)
#define                                 LC4D2S7_bit         _BIT_ACCESS(CLC4SEL1,7)
// CLC4SEL2<LC4D3S0>
extern volatile __bit                   LC4D3S0             __at(0xF190);	// @ (0x1E32 * 8 + 0)
#define                                 LC4D3S0_bit         _BIT_ACCESS(CLC4SEL2,0)
// CLC4SEL2<LC4D3S1>
extern volatile __bit                   LC4D3S1             __at(0xF191);	// @ (0x1E32 * 8 + 1)
#define                                 LC4D3S1_bit         _BIT_ACCESS(CLC4SEL2,1)
// CLC4SEL2<LC4D3S2>
extern volatile __bit                   LC4D3S2             __at(0xF192);	// @ (0x1E32 * 8 + 2)
#define                                 LC4D3S2_bit         _BIT_ACCESS(CLC4SEL2,2)
// CLC4SEL2<LC4D3S3>
extern volatile __bit                   LC4D3S3             __at(0xF193);	// @ (0x1E32 * 8 + 3)
#define                                 LC4D3S3_bit         _BIT_ACCESS(CLC4SEL2,3)
// CLC4SEL2<LC4D3S4>
extern volatile __bit                   LC4D3S4             __at(0xF194);	// @ (0x1E32 * 8 + 4)
#define                                 LC4D3S4_bit         _BIT_ACCESS(CLC4SEL2,4)
// CLC4SEL2<LC4D3S5>
extern volatile __bit                   LC4D3S5             __at(0xF195);	// @ (0x1E32 * 8 + 5)
#define                                 LC4D3S5_bit         _BIT_ACCESS(CLC4SEL2,5)
// CLC4SEL2<LC4D3S6>
extern volatile __bit                   LC4D3S6             __at(0xF196);	// @ (0x1E32 * 8 + 6)
#define                                 LC4D3S6_bit         _BIT_ACCESS(CLC4SEL2,6)
// CLC4SEL2<LC4D3S7>
extern volatile __bit                   LC4D3S7             __at(0xF197);	// @ (0x1E32 * 8 + 7)
#define                                 LC4D3S7_bit         _BIT_ACCESS(CLC4SEL2,7)
// CLC4SEL3<LC4D4S0>
extern volatile __bit                   LC4D4S0             __at(0xF198);	// @ (0x1E33 * 8 + 0)
#define                                 LC4D4S0_bit         _BIT_ACCESS(CLC4SEL3,0)
// CLC4SEL3<LC4D4S1>
extern volatile __bit                   LC4D4S1             __at(0xF199);	// @ (0x1E33 * 8 + 1)
#define                                 LC4D4S1_bit         _BIT_ACCESS(CLC4SEL3,1)
// CLC4SEL3<LC4D4S2>
extern volatile __bit                   LC4D4S2             __at(0xF19A);	// @ (0x1E33 * 8 + 2)
#define                                 LC4D4S2_bit         _BIT_ACCESS(CLC4SEL3,2)
// CLC4SEL3<LC4D4S3>
extern volatile __bit                   LC4D4S3             __at(0xF19B);	// @ (0x1E33 * 8 + 3)
#define                                 LC4D4S3_bit         _BIT_ACCESS(CLC4SEL3,3)
// CLC4SEL3<LC4D4S4>
extern volatile __bit                   LC4D4S4             __at(0xF19C);	// @ (0x1E33 * 8 + 4)
#define                                 LC4D4S4_bit         _BIT_ACCESS(CLC4SEL3,4)
// CLC4SEL3<LC4D4S5>
extern volatile __bit                   LC4D4S5             __at(0xF19D);	// @ (0x1E33 * 8 + 5)
#define                                 LC4D4S5_bit         _BIT_ACCESS(CLC4SEL3,5)
// CLC4SEL3<LC4D4S6>
extern volatile __bit                   LC4D4S6             __at(0xF19E);	// @ (0x1E33 * 8 + 6)
#define                                 LC4D4S6_bit         _BIT_ACCESS(CLC4SEL3,6)
// CLC4SEL3<LC4D4S7>
extern volatile __bit                   LC4D4S7             __at(0xF19F);	// @ (0x1E33 * 8 + 7)
#define                                 LC4D4S7_bit         _BIT_ACCESS(CLC4SEL3,7)
// CLC4CON<LC4EN>
extern volatile __bit                   LC4EN               __at(0xF177);	// @ (0x1E2E * 8 + 7)
#define                                 LC4EN_bit           _BIT_ACCESS(CLC4CON,7)
// CLC4GLS0<LC4G1D1N>
extern volatile __bit                   LC4G1D1N            __at(0xF1A0);	// @ (0x1E34 * 8 + 0)
#define                                 LC4G1D1N_bit        _BIT_ACCESS(CLC4GLS0,0)
// CLC4GLS0<LC4G1D1T>
extern volatile __bit                   LC4G1D1T            __at(0xF1A1);	// @ (0x1E34 * 8 + 1)
#define                                 LC4G1D1T_bit        _BIT_ACCESS(CLC4GLS0,1)
// CLC4GLS0<LC4G1D2N>
extern volatile __bit                   LC4G1D2N            __at(0xF1A2);	// @ (0x1E34 * 8 + 2)
#define                                 LC4G1D2N_bit        _BIT_ACCESS(CLC4GLS0,2)
// CLC4GLS0<LC4G1D2T>
extern volatile __bit                   LC4G1D2T            __at(0xF1A3);	// @ (0x1E34 * 8 + 3)
#define                                 LC4G1D2T_bit        _BIT_ACCESS(CLC4GLS0,3)
// CLC4GLS0<LC4G1D3N>
extern volatile __bit                   LC4G1D3N            __at(0xF1A4);	// @ (0x1E34 * 8 + 4)
#define                                 LC4G1D3N_bit        _BIT_ACCESS(CLC4GLS0,4)
// CLC4GLS0<LC4G1D3T>
extern volatile __bit                   LC4G1D3T            __at(0xF1A5);	// @ (0x1E34 * 8 + 5)
#define                                 LC4G1D3T_bit        _BIT_ACCESS(CLC4GLS0,5)
// CLC4GLS0<LC4G1D4N>
extern volatile __bit                   LC4G1D4N            __at(0xF1A6);	// @ (0x1E34 * 8 + 6)
#define                                 LC4G1D4N_bit        _BIT_ACCESS(CLC4GLS0,6)
// CLC4GLS0<LC4G1D4T>
extern volatile __bit                   LC4G1D4T            __at(0xF1A7);	// @ (0x1E34 * 8 + 7)
#define                                 LC4G1D4T_bit        _BIT_ACCESS(CLC4GLS0,7)
// CLC4POL<LC4G1POL>
extern volatile __bit                   LC4G1POL            __at(0xF178);	// @ (0x1E2F * 8 + 0)
#define                                 LC4G1POL_bit        _BIT_ACCESS(CLC4POL,0)
// CLC4GLS1<LC4G2D1N>
extern volatile __bit                   LC4G2D1N            __at(0xF1A8);	// @ (0x1E35 * 8 + 0)
#define                                 LC4G2D1N_bit        _BIT_ACCESS(CLC4GLS1,0)
// CLC4GLS1<LC4G2D1T>
extern volatile __bit                   LC4G2D1T            __at(0xF1A9);	// @ (0x1E35 * 8 + 1)
#define                                 LC4G2D1T_bit        _BIT_ACCESS(CLC4GLS1,1)
// CLC4GLS1<LC4G2D2N>
extern volatile __bit                   LC4G2D2N            __at(0xF1AA);	// @ (0x1E35 * 8 + 2)
#define                                 LC4G2D2N_bit        _BIT_ACCESS(CLC4GLS1,2)
// CLC4GLS1<LC4G2D2T>
extern volatile __bit                   LC4G2D2T            __at(0xF1AB);	// @ (0x1E35 * 8 + 3)
#define                                 LC4G2D2T_bit        _BIT_ACCESS(CLC4GLS1,3)
// CLC4GLS1<LC4G2D3N>
extern volatile __bit                   LC4G2D3N            __at(0xF1AC);	// @ (0x1E35 * 8 + 4)
#define                                 LC4G2D3N_bit        _BIT_ACCESS(CLC4GLS1,4)
// CLC4GLS1<LC4G2D3T>
extern volatile __bit                   LC4G2D3T            __at(0xF1AD);	// @ (0x1E35 * 8 + 5)
#define                                 LC4G2D3T_bit        _BIT_ACCESS(CLC4GLS1,5)
// CLC4GLS1<LC4G2D4N>
extern volatile __bit                   LC4G2D4N            __at(0xF1AE);	// @ (0x1E35 * 8 + 6)
#define                                 LC4G2D4N_bit        _BIT_ACCESS(CLC4GLS1,6)
// CLC4GLS1<LC4G2D4T>
extern volatile __bit                   LC4G2D4T            __at(0xF1AF);	// @ (0x1E35 * 8 + 7)
#define                                 LC4G2D4T_bit        _BIT_ACCESS(CLC4GLS1,7)
// CLC4POL<LC4G2POL>
extern volatile __bit                   LC4G2POL            __at(0xF179);	// @ (0x1E2F * 8 + 1)
#define                                 LC4G2POL_bit        _BIT_ACCESS(CLC4POL,1)
// CLC4GLS2<LC4G3D1N>
extern volatile __bit                   LC4G3D1N            __at(0xF1B0);	// @ (0x1E36 * 8 + 0)
#define                                 LC4G3D1N_bit        _BIT_ACCESS(CLC4GLS2,0)
// CLC4GLS2<LC4G3D1T>
extern volatile __bit                   LC4G3D1T            __at(0xF1B1);	// @ (0x1E36 * 8 + 1)
#define                                 LC4G3D1T_bit        _BIT_ACCESS(CLC4GLS2,1)
// CLC4GLS2<LC4G3D2N>
extern volatile __bit                   LC4G3D2N            __at(0xF1B2);	// @ (0x1E36 * 8 + 2)
#define                                 LC4G3D2N_bit        _BIT_ACCESS(CLC4GLS2,2)
// CLC4GLS2<LC4G3D2T>
extern volatile __bit                   LC4G3D2T            __at(0xF1B3);	// @ (0x1E36 * 8 + 3)
#define                                 LC4G3D2T_bit        _BIT_ACCESS(CLC4GLS2,3)
// CLC4GLS2<LC4G3D3N>
extern volatile __bit                   LC4G3D3N            __at(0xF1B4);	// @ (0x1E36 * 8 + 4)
#define                                 LC4G3D3N_bit        _BIT_ACCESS(CLC4GLS2,4)
// CLC4GLS2<LC4G3D3T>
extern volatile __bit                   LC4G3D3T            __at(0xF1B5);	// @ (0x1E36 * 8 + 5)
#define                                 LC4G3D3T_bit        _BIT_ACCESS(CLC4GLS2,5)
// CLC4GLS2<LC4G3D4N>
extern volatile __bit                   LC4G3D4N            __at(0xF1B6);	// @ (0x1E36 * 8 + 6)
#define                                 LC4G3D4N_bit        _BIT_ACCESS(CLC4GLS2,6)
// CLC4GLS2<LC4G3D4T>
extern volatile __bit                   LC4G3D4T            __at(0xF1B7);	// @ (0x1E36 * 8 + 7)
#define                                 LC4G3D4T_bit        _BIT_ACCESS(CLC4GLS2,7)
// CLC4POL<LC4G3POL>
extern volatile __bit                   LC4G3POL            __at(0xF17A);	// @ (0x1E2F * 8 + 2)
#define                                 LC4G3POL_bit        _BIT_ACCESS(CLC4POL,2)
// CLC4GLS3<LC4G4D1N>
extern volatile __bit                   LC4G4D1N            __at(0xF1B8);	// @ (0x1E37 * 8 + 0)
#define                                 LC4G4D1N_bit        _BIT_ACCESS(CLC4GLS3,0)
// CLC4GLS3<LC4G4D1T>
extern volatile __bit                   LC4G4D1T            __at(0xF1B9);	// @ (0x1E37 * 8 + 1)
#define                                 LC4G4D1T_bit        _BIT_ACCESS(CLC4GLS3,1)
// CLC4GLS3<LC4G4D2N>
extern volatile __bit                   LC4G4D2N            __at(0xF1BA);	// @ (0x1E37 * 8 + 2)
#define                                 LC4G4D2N_bit        _BIT_ACCESS(CLC4GLS3,2)
// CLC4GLS3<LC4G4D2T>
extern volatile __bit                   LC4G4D2T            __at(0xF1BB);	// @ (0x1E37 * 8 + 3)
#define                                 LC4G4D2T_bit        _BIT_ACCESS(CLC4GLS3,3)
// CLC4GLS3<LC4G4D3N>
extern volatile __bit                   LC4G4D3N            __at(0xF1BC);	// @ (0x1E37 * 8 + 4)
#define                                 LC4G4D3N_bit        _BIT_ACCESS(CLC4GLS3,4)
// CLC4GLS3<LC4G4D3T>
extern volatile __bit                   LC4G4D3T            __at(0xF1BD);	// @ (0x1E37 * 8 + 5)
#define                                 LC4G4D3T_bit        _BIT_ACCESS(CLC4GLS3,5)
// CLC4GLS3<LC4G4D4N>
extern volatile __bit                   LC4G4D4N            __at(0xF1BE);	// @ (0x1E37 * 8 + 6)
#define                                 LC4G4D4N_bit        _BIT_ACCESS(CLC4GLS3,6)
// CLC4GLS3<LC4G4D4T>
extern volatile __bit                   LC4G4D4T            __at(0xF1BF);	// @ (0x1E37 * 8 + 7)
#define                                 LC4G4D4T_bit        _BIT_ACCESS(CLC4GLS3,7)
// CLC4POL<LC4G4POL>
extern volatile __bit                   LC4G4POL            __at(0xF17B);	// @ (0x1E2F * 8 + 3)
#define                                 LC4G4POL_bit        _BIT_ACCESS(CLC4POL,3)
// CLC4CON<LC4INTN>
extern volatile __bit                   LC4INTN             __at(0xF173);	// @ (0x1E2E * 8 + 3)
#define                                 LC4INTN_bit         _BIT_ACCESS(CLC4CON,3)
// CLC4CON<LC4INTP>
extern volatile __bit                   LC4INTP             __at(0xF174);	// @ (0x1E2E * 8 + 4)
#define                                 LC4INTP_bit         _BIT_ACCESS(CLC4CON,4)
// CLC4CON<LC4MODE0>
extern volatile __bit                   LC4MODE0            __at(0xF170);	// @ (0x1E2E * 8 + 0)
#define                                 LC4MODE0_bit        _BIT_ACCESS(CLC4CON,0)
// CLC4CON<LC4MODE1>
extern volatile __bit                   LC4MODE1            __at(0xF171);	// @ (0x1E2E * 8 + 1)
#define                                 LC4MODE1_bit        _BIT_ACCESS(CLC4CON,1)
// CLC4CON<LC4MODE2>
extern volatile __bit                   LC4MODE2            __at(0xF172);	// @ (0x1E2E * 8 + 2)
#define                                 LC4MODE2_bit        _BIT_ACCESS(CLC4CON,2)
// CLC4CON<LC4OUT>
extern volatile __bit                   LC4OUT              __at(0xF175);	// @ (0x1E2E * 8 + 5)
#define                                 LC4OUT_bit          _BIT_ACCESS(CLC4CON,5)
// CLC4POL<LC4POL>
extern volatile __bit                   LC4POL              __at(0xF17F);	// @ (0x1E2F * 8 + 7)
#define                                 LC4POL_bit          _BIT_ACCESS(CLC4POL,7)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x448C);	// @ (0x891 * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x4484);	// @ (0x890 * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// NVMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0x40F5);	// @ (0x81E * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(NVMCON1,5)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x4C78);	// @ (0x98F * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x4C79);	// @ (0x98F * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// MDCON0<MDBIT>
extern volatile __bit                   MDBIT               __at(0x44B8);	// @ (0x897 * 8 + 0)
#define                                 MDBIT_bit           _BIT_ACCESS(MDCON0,0)
// MDCARHPPS<MDCARHPPS0>
extern volatile __bit                   MDCARHPPS0          __at(0xF5C8);	// @ (0x1EB9 * 8 + 0)
#define                                 MDCARHPPS0_bit      _BIT_ACCESS(MDCARHPPS,0)
// MDCARHPPS<MDCARHPPS1>
extern volatile __bit                   MDCARHPPS1          __at(0xF5C9);	// @ (0x1EB9 * 8 + 1)
#define                                 MDCARHPPS1_bit      _BIT_ACCESS(MDCARHPPS,1)
// MDCARHPPS<MDCARHPPS2>
extern volatile __bit                   MDCARHPPS2          __at(0xF5CA);	// @ (0x1EB9 * 8 + 2)
#define                                 MDCARHPPS2_bit      _BIT_ACCESS(MDCARHPPS,2)
// MDCARHPPS<MDCARHPPS3>
extern volatile __bit                   MDCARHPPS3          __at(0xF5CB);	// @ (0x1EB9 * 8 + 3)
#define                                 MDCARHPPS3_bit      _BIT_ACCESS(MDCARHPPS,3)
// MDCARHPPS<MDCARHPPS4>
extern volatile __bit                   MDCARHPPS4          __at(0xF5CC);	// @ (0x1EB9 * 8 + 4)
#define                                 MDCARHPPS4_bit      _BIT_ACCESS(MDCARHPPS,4)
// MDCARLPPS<MDCARLPPS0>
extern volatile __bit                   MDCARLPPS0          __at(0xF5C0);	// @ (0x1EB8 * 8 + 0)
#define                                 MDCARLPPS0_bit      _BIT_ACCESS(MDCARLPPS,0)
// MDCARLPPS<MDCARLPPS1>
extern volatile __bit                   MDCARLPPS1          __at(0xF5C1);	// @ (0x1EB8 * 8 + 1)
#define                                 MDCARLPPS1_bit      _BIT_ACCESS(MDCARLPPS,1)
// MDCARLPPS<MDCARLPPS2>
extern volatile __bit                   MDCARLPPS2          __at(0xF5C2);	// @ (0x1EB8 * 8 + 2)
#define                                 MDCARLPPS2_bit      _BIT_ACCESS(MDCARLPPS,2)
// MDCARLPPS<MDCARLPPS3>
extern volatile __bit                   MDCARLPPS3          __at(0xF5C3);	// @ (0x1EB8 * 8 + 3)
#define                                 MDCARLPPS3_bit      _BIT_ACCESS(MDCARLPPS,3)
// MDCARLPPS<MDCARLPPS4>
extern volatile __bit                   MDCARLPPS4          __at(0xF5C4);	// @ (0x1EB8 * 8 + 4)
#define                                 MDCARLPPS4_bit      _BIT_ACCESS(MDCARLPPS,4)
// MDCARH<MDCH0>
extern volatile __bit                   MDCH0               __at(0x44D8);	// @ (0x89B * 8 + 0)
#define                                 MDCH0_bit           _BIT_ACCESS(MDCARH,0)
// MDCARH<MDCH1>
extern volatile __bit                   MDCH1               __at(0x44D9);	// @ (0x89B * 8 + 1)
#define                                 MDCH1_bit           _BIT_ACCESS(MDCARH,1)
// MDCARH<MDCH2>
extern volatile __bit                   MDCH2               __at(0x44DA);	// @ (0x89B * 8 + 2)
#define                                 MDCH2_bit           _BIT_ACCESS(MDCARH,2)
// MDCARH<MDCH3>
extern volatile __bit                   MDCH3               __at(0x44DB);	// @ (0x89B * 8 + 3)
#define                                 MDCH3_bit           _BIT_ACCESS(MDCARH,3)
// MDCON1<MDCHPOL>
extern volatile __bit                   MDCHPOL             __at(0x44C5);	// @ (0x898 * 8 + 5)
#define                                 MDCHPOL_bit         _BIT_ACCESS(MDCON1,5)
// MDCON1<MDCHSYNC>
extern volatile __bit                   MDCHSYNC            __at(0x44C4);	// @ (0x898 * 8 + 4)
#define                                 MDCHSYNC_bit        _BIT_ACCESS(MDCON1,4)
// MDCARL<MDCL0>
extern volatile __bit                   MDCL0               __at(0x44D0);	// @ (0x89A * 8 + 0)
#define                                 MDCL0_bit           _BIT_ACCESS(MDCARL,0)
// MDCARL<MDCL1>
extern volatile __bit                   MDCL1               __at(0x44D1);	// @ (0x89A * 8 + 1)
#define                                 MDCL1_bit           _BIT_ACCESS(MDCARL,1)
// MDCARL<MDCL2>
extern volatile __bit                   MDCL2               __at(0x44D2);	// @ (0x89A * 8 + 2)
#define                                 MDCL2_bit           _BIT_ACCESS(MDCARL,2)
// MDCARL<MDCL3>
extern volatile __bit                   MDCL3               __at(0x44D3);	// @ (0x89A * 8 + 3)
#define                                 MDCL3_bit           _BIT_ACCESS(MDCARL,3)
// MDCON1<MDCLPOL>
extern volatile __bit                   MDCLPOL             __at(0x44C1);	// @ (0x898 * 8 + 1)
#define                                 MDCLPOL_bit         _BIT_ACCESS(MDCON1,1)
// MDCON1<MDCLSYNC>
extern volatile __bit                   MDCLSYNC            __at(0x44C0);	// @ (0x898 * 8 + 0)
#define                                 MDCLSYNC_bit        _BIT_ACCESS(MDCON1,0)
// MDCON0<MDEN>
extern volatile __bit                   MDEN                __at(0x44BF);	// @ (0x897 * 8 + 7)
#define                                 MDEN_bit            _BIT_ACCESS(MDCON0,7)
// MDSRC<MDMS0>
extern volatile __bit                   MDMS0               __at(0x44C8);	// @ (0x899 * 8 + 0)
#define                                 MDMS0_bit           _BIT_ACCESS(MDSRC,0)
// MDSRC<MDMS1>
extern volatile __bit                   MDMS1               __at(0x44C9);	// @ (0x899 * 8 + 1)
#define                                 MDMS1_bit           _BIT_ACCESS(MDSRC,1)
// MDSRC<MDMS2>
extern volatile __bit                   MDMS2               __at(0x44CA);	// @ (0x899 * 8 + 2)
#define                                 MDMS2_bit           _BIT_ACCESS(MDSRC,2)
// MDSRC<MDMS3>
extern volatile __bit                   MDMS3               __at(0x44CB);	// @ (0x899 * 8 + 3)
#define                                 MDMS3_bit           _BIT_ACCESS(MDSRC,3)
// MDSRC<MDMS4>
extern volatile __bit                   MDMS4               __at(0x44CC);	// @ (0x899 * 8 + 4)
#define                                 MDMS4_bit           _BIT_ACCESS(MDSRC,4)
// MDCON0<MDOPOL>
extern volatile __bit                   MDOPOL              __at(0x44BC);	// @ (0x897 * 8 + 4)
#define                                 MDOPOL_bit          _BIT_ACCESS(MDCON0,4)
// MDCON0<MDOUT>
extern volatile __bit                   MDOUT               __at(0x44BD);	// @ (0x897 * 8 + 5)
#define                                 MDOUT_bit           _BIT_ACCESS(MDCON0,5)
// MDSRCPPS<MDSRCPPS0>
extern volatile __bit                   MDSRCPPS0           __at(0xF5D0);	// @ (0x1EBA * 8 + 0)
#define                                 MDSRCPPS0_bit       _BIT_ACCESS(MDSRCPPS,0)
// MDSRCPPS<MDSRCPPS1>
extern volatile __bit                   MDSRCPPS1           __at(0xF5D1);	// @ (0x1EBA * 8 + 1)
#define                                 MDSRCPPS1_bit       _BIT_ACCESS(MDSRCPPS,1)
// MDSRCPPS<MDSRCPPS2>
extern volatile __bit                   MDSRCPPS2           __at(0xF5D2);	// @ (0x1EBA * 8 + 2)
#define                                 MDSRCPPS2_bit       _BIT_ACCESS(MDSRCPPS,2)
// MDSRCPPS<MDSRCPPS3>
extern volatile __bit                   MDSRCPPS3           __at(0xF5D3);	// @ (0x1EBA * 8 + 3)
#define                                 MDSRCPPS3_bit       _BIT_ACCESS(MDSRCPPS,3)
// MDSRCPPS<MDSRCPPS4>
extern volatile __bit                   MDSRCPPS4           __at(0xF5D4);	// @ (0x1EBA * 8 + 4)
#define                                 MDSRCPPS4_bit       _BIT_ACCESS(MDSRCPPS,4)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x448D);	// @ (0x891 * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x4485);	// @ (0x890 * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// CLCDATA<MLC1OUT>
extern volatile __bit                   MLC1OUT             __at(0xF078);	// @ (0x1E0F * 8 + 0)
#define                                 MLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// CLCDATA<MLC2OUT>
extern volatile __bit                   MLC2OUT             __at(0xF079);	// @ (0x1E0F * 8 + 1)
#define                                 MLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// CLCDATA<MLC3OUT>
extern volatile __bit                   MLC3OUT             __at(0xF07A);	// @ (0x1E0F * 8 + 2)
#define                                 MLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// CLCDATA<MLC4OUT>
extern volatile __bit                   MLC4OUT             __at(0xF07B);	// @ (0x1E0F * 8 + 3)
#define                                 MLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0xC68);	// @ (0x18D * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP2ADD<MSK02>
extern volatile __bit                   MSK02               __at(0xCB8);	// @ (0x197 * 8 + 0)
#define                                 MSK02_bit           _BIT_ACCESS(SSP2ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0xC69);	// @ (0x18D * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP2ADD<MSK12>
extern volatile __bit                   MSK12               __at(0xCB9);	// @ (0x197 * 8 + 1)
#define                                 MSK12_bit           _BIT_ACCESS(SSP2ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0xC6A);	// @ (0x18D * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP2ADD<MSK22>
extern volatile __bit                   MSK22               __at(0xCBA);	// @ (0x197 * 8 + 2)
#define                                 MSK22_bit           _BIT_ACCESS(SSP2ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0xC6B);	// @ (0x18D * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP2ADD<MSK32>
extern volatile __bit                   MSK32               __at(0xCBB);	// @ (0x197 * 8 + 3)
#define                                 MSK32_bit           _BIT_ACCESS(SSP2ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0xC6C);	// @ (0x18D * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP2ADD<MSK42>
extern volatile __bit                   MSK42               __at(0xCBC);	// @ (0x197 * 8 + 4)
#define                                 MSK42_bit           _BIT_ACCESS(SSP2ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0xC6D);	// @ (0x18D * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP2ADD<MSK52>
extern volatile __bit                   MSK52               __at(0xCBD);	// @ (0x197 * 8 + 5)
#define                                 MSK52_bit           _BIT_ACCESS(SSP2ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0xC6E);	// @ (0x18D * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP2ADD<MSK62>
extern volatile __bit                   MSK62               __at(0xCBE);	// @ (0x197 * 8 + 6)
#define                                 MSK62_bit           _BIT_ACCESS(SSP2ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0xC6F);	// @ (0x18D * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// SSP2ADD<MSK72>
extern volatile __bit                   MSK72               __at(0xCBF);	// @ (0x197 * 8 + 7)
#define                                 MSK72_bit           _BIT_ACCESS(SSP2ADD,7)
// PMD4<MSSP1MD>
extern volatile __bit                   MSSP1MD             __at(0x3CD4);	// @ (0x79A * 8 + 4)
#define                                 MSSP1MD_bit         _BIT_ACCESS(PMD4,4)
// PMD4<MSSP2MD>
extern volatile __bit                   MSSP2MD             __at(0x3CD5);	// @ (0x79A * 8 + 5)
#define                                 MSSP2MD_bit         _BIT_ACCESS(PMD4,5)
// NCO1CLK<N1CKS0>
extern volatile __bit                   N1CKS0              __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 N1CKS0_bit          _BIT_ACCESS(NCO1CLK,0)
// NCO1CLK<N1CKS1>
extern volatile __bit                   N1CKS1              __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 N1CKS1_bit          _BIT_ACCESS(NCO1CLK,1)
// NCO1CLK<N1CKS2>
extern volatile __bit                   N1CKS2              __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 N1CKS2_bit          _BIT_ACCESS(NCO1CLK,2)
// NCO1CON<N1EN>
extern volatile __bit                   N1EN                __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 N1EN_bit            _BIT_ACCESS(NCO1CON,7)
// NCO1CON<N1OUT>
extern volatile __bit                   N1OUT               __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 N1OUT_bit           _BIT_ACCESS(NCO1CON,5)
// NCO1CON<N1PFM>
extern volatile __bit                   N1PFM               __at(0x2C90);	// @ (0x592 * 8 + 0)
#define                                 N1PFM_bit           _BIT_ACCESS(NCO1CON,0)
// NCO1CON<N1POL>
extern volatile __bit                   N1POL               __at(0x2C94);	// @ (0x592 * 8 + 4)
#define                                 N1POL_bit           _BIT_ACCESS(NCO1CON,4)
// NCO1CLK<N1PWS0>
extern volatile __bit                   N1PWS0              __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 N1PWS0_bit          _BIT_ACCESS(NCO1CLK,5)
// NCO1CLK<N1PWS1>
extern volatile __bit                   N1PWS1              __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 N1PWS1_bit          _BIT_ACCESS(NCO1CLK,6)
// NCO1CLK<N1PWS2>
extern volatile __bit                   N1PWS2              __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 N1PWS2_bit          _BIT_ACCESS(NCO1CLK,7)
// NCO1ACCL<NCO1ACC0>
extern volatile __bit                   NCO1ACC0            __at(0x2C60);	// @ (0x58C * 8 + 0)
#define                                 NCO1ACC0_bit        _BIT_ACCESS(NCO1ACCL,0)
// NCO1ACCL<NCO1ACC1>
extern volatile __bit                   NCO1ACC1            __at(0x2C61);	// @ (0x58C * 8 + 1)
#define                                 NCO1ACC1_bit        _BIT_ACCESS(NCO1ACCL,1)
// NCO1ACCH<NCO1ACC10>
extern volatile __bit                   NCO1ACC10           __at(0x2C6A);	// @ (0x58D * 8 + 2)
#define                                 NCO1ACC10_bit       _BIT_ACCESS(NCO1ACCH,2)
// NCO1ACCH<NCO1ACC11>
extern volatile __bit                   NCO1ACC11           __at(0x2C6B);	// @ (0x58D * 8 + 3)
#define                                 NCO1ACC11_bit       _BIT_ACCESS(NCO1ACCH,3)
// NCO1ACCH<NCO1ACC12>
extern volatile __bit                   NCO1ACC12           __at(0x2C6C);	// @ (0x58D * 8 + 4)
#define                                 NCO1ACC12_bit       _BIT_ACCESS(NCO1ACCH,4)
// NCO1ACCH<NCO1ACC13>
extern volatile __bit                   NCO1ACC13           __at(0x2C6D);	// @ (0x58D * 8 + 5)
#define                                 NCO1ACC13_bit       _BIT_ACCESS(NCO1ACCH,5)
// NCO1ACCH<NCO1ACC14>
extern volatile __bit                   NCO1ACC14           __at(0x2C6E);	// @ (0x58D * 8 + 6)
#define                                 NCO1ACC14_bit       _BIT_ACCESS(NCO1ACCH,6)
// NCO1ACCH<NCO1ACC15>
extern volatile __bit                   NCO1ACC15           __at(0x2C6F);	// @ (0x58D * 8 + 7)
#define                                 NCO1ACC15_bit       _BIT_ACCESS(NCO1ACCH,7)
// NCO1ACCU<NCO1ACC16>
extern volatile __bit                   NCO1ACC16           __at(0x2C70);	// @ (0x58E * 8 + 0)
#define                                 NCO1ACC16_bit       _BIT_ACCESS(NCO1ACCU,0)
// NCO1ACCU<NCO1ACC17>
extern volatile __bit                   NCO1ACC17           __at(0x2C71);	// @ (0x58E * 8 + 1)
#define                                 NCO1ACC17_bit       _BIT_ACCESS(NCO1ACCU,1)
// NCO1ACCU<NCO1ACC18>
extern volatile __bit                   NCO1ACC18           __at(0x2C72);	// @ (0x58E * 8 + 2)
#define                                 NCO1ACC18_bit       _BIT_ACCESS(NCO1ACCU,2)
// NCO1ACCU<NCO1ACC19>
extern volatile __bit                   NCO1ACC19           __at(0x2C73);	// @ (0x58E * 8 + 3)
#define                                 NCO1ACC19_bit       _BIT_ACCESS(NCO1ACCU,3)
// NCO1ACCL<NCO1ACC2>
extern volatile __bit                   NCO1ACC2            __at(0x2C62);	// @ (0x58C * 8 + 2)
#define                                 NCO1ACC2_bit        _BIT_ACCESS(NCO1ACCL,2)
// NCO1ACCL<NCO1ACC3>
extern volatile __bit                   NCO1ACC3            __at(0x2C63);	// @ (0x58C * 8 + 3)
#define                                 NCO1ACC3_bit        _BIT_ACCESS(NCO1ACCL,3)
// NCO1ACCL<NCO1ACC4>
extern volatile __bit                   NCO1ACC4            __at(0x2C64);	// @ (0x58C * 8 + 4)
#define                                 NCO1ACC4_bit        _BIT_ACCESS(NCO1ACCL,4)
// NCO1ACCL<NCO1ACC5>
extern volatile __bit                   NCO1ACC5            __at(0x2C65);	// @ (0x58C * 8 + 5)
#define                                 NCO1ACC5_bit        _BIT_ACCESS(NCO1ACCL,5)
// NCO1ACCL<NCO1ACC6>
extern volatile __bit                   NCO1ACC6            __at(0x2C66);	// @ (0x58C * 8 + 6)
#define                                 NCO1ACC6_bit        _BIT_ACCESS(NCO1ACCL,6)
// NCO1ACCL<NCO1ACC7>
extern volatile __bit                   NCO1ACC7            __at(0x2C67);	// @ (0x58C * 8 + 7)
#define                                 NCO1ACC7_bit        _BIT_ACCESS(NCO1ACCL,7)
// NCO1ACCH<NCO1ACC8>
extern volatile __bit                   NCO1ACC8            __at(0x2C68);	// @ (0x58D * 8 + 0)
#define                                 NCO1ACC8_bit        _BIT_ACCESS(NCO1ACCH,0)
// NCO1ACCH<NCO1ACC9>
extern volatile __bit                   NCO1ACC9            __at(0x2C69);	// @ (0x58D * 8 + 1)
#define                                 NCO1ACC9_bit        _BIT_ACCESS(NCO1ACCH,1)
// PIE7<NCO1IE>
extern volatile __bit                   NCO1IE              __at(0x38EC);	// @ (0x71D * 8 + 4)
#define                                 NCO1IE_bit          _BIT_ACCESS(PIE7,4)
// PIR7<NCO1IF>
extern volatile __bit                   NCO1IF              __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 NCO1IF_bit          _BIT_ACCESS(PIR7,4)
// NCO1INCL<NCO1INC0>
extern volatile __bit                   NCO1INC0            __at(0x2C78);	// @ (0x58F * 8 + 0)
#define                                 NCO1INC0_bit        _BIT_ACCESS(NCO1INCL,0)
// NCO1INCL<NCO1INC1>
extern volatile __bit                   NCO1INC1            __at(0x2C79);	// @ (0x58F * 8 + 1)
#define                                 NCO1INC1_bit        _BIT_ACCESS(NCO1INCL,1)
// NCO1INCH<NCO1INC10>
extern volatile __bit                   NCO1INC10           __at(0x2C82);	// @ (0x590 * 8 + 2)
#define                                 NCO1INC10_bit       _BIT_ACCESS(NCO1INCH,2)
// NCO1INCH<NCO1INC11>
extern volatile __bit                   NCO1INC11           __at(0x2C83);	// @ (0x590 * 8 + 3)
#define                                 NCO1INC11_bit       _BIT_ACCESS(NCO1INCH,3)
// NCO1INCH<NCO1INC12>
extern volatile __bit                   NCO1INC12           __at(0x2C84);	// @ (0x590 * 8 + 4)
#define                                 NCO1INC12_bit       _BIT_ACCESS(NCO1INCH,4)
// NCO1INCH<NCO1INC13>
extern volatile __bit                   NCO1INC13           __at(0x2C85);	// @ (0x590 * 8 + 5)
#define                                 NCO1INC13_bit       _BIT_ACCESS(NCO1INCH,5)
// NCO1INCH<NCO1INC14>
extern volatile __bit                   NCO1INC14           __at(0x2C86);	// @ (0x590 * 8 + 6)
#define                                 NCO1INC14_bit       _BIT_ACCESS(NCO1INCH,6)
// NCO1INCH<NCO1INC15>
extern volatile __bit                   NCO1INC15           __at(0x2C87);	// @ (0x590 * 8 + 7)
#define                                 NCO1INC15_bit       _BIT_ACCESS(NCO1INCH,7)
// NCO1INCU<NCO1INC16>
extern volatile __bit                   NCO1INC16           __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 NCO1INC16_bit       _BIT_ACCESS(NCO1INCU,0)
// NCO1INCU<NCO1INC17>
extern volatile __bit                   NCO1INC17           __at(0x2C89);	// @ (0x591 * 8 + 1)
#define                                 NCO1INC17_bit       _BIT_ACCESS(NCO1INCU,1)
// NCO1INCU<NCO1INC18>
extern volatile __bit                   NCO1INC18           __at(0x2C8A);	// @ (0x591 * 8 + 2)
#define                                 NCO1INC18_bit       _BIT_ACCESS(NCO1INCU,2)
// NCO1INCU<NCO1INC19>
extern volatile __bit                   NCO1INC19           __at(0x2C8B);	// @ (0x591 * 8 + 3)
#define                                 NCO1INC19_bit       _BIT_ACCESS(NCO1INCU,3)
// NCO1INCL<NCO1INC2>
extern volatile __bit                   NCO1INC2            __at(0x2C7A);	// @ (0x58F * 8 + 2)
#define                                 NCO1INC2_bit        _BIT_ACCESS(NCO1INCL,2)
// NCO1INCL<NCO1INC3>
extern volatile __bit                   NCO1INC3            __at(0x2C7B);	// @ (0x58F * 8 + 3)
#define                                 NCO1INC3_bit        _BIT_ACCESS(NCO1INCL,3)
// NCO1INCL<NCO1INC4>
extern volatile __bit                   NCO1INC4            __at(0x2C7C);	// @ (0x58F * 8 + 4)
#define                                 NCO1INC4_bit        _BIT_ACCESS(NCO1INCL,4)
// NCO1INCL<NCO1INC5>
extern volatile __bit                   NCO1INC5            __at(0x2C7D);	// @ (0x58F * 8 + 5)
#define                                 NCO1INC5_bit        _BIT_ACCESS(NCO1INCL,5)
// NCO1INCL<NCO1INC6>
extern volatile __bit                   NCO1INC6            __at(0x2C7E);	// @ (0x58F * 8 + 6)
#define                                 NCO1INC6_bit        _BIT_ACCESS(NCO1INCL,6)
// NCO1INCL<NCO1INC7>
extern volatile __bit                   NCO1INC7            __at(0x2C7F);	// @ (0x58F * 8 + 7)
#define                                 NCO1INC7_bit        _BIT_ACCESS(NCO1INCL,7)
// NCO1INCH<NCO1INC8>
extern volatile __bit                   NCO1INC8            __at(0x2C80);	// @ (0x590 * 8 + 0)
#define                                 NCO1INC8_bit        _BIT_ACCESS(NCO1INCH,0)
// NCO1INCH<NCO1INC9>
extern volatile __bit                   NCO1INC9            __at(0x2C81);	// @ (0x590 * 8 + 1)
#define                                 NCO1INC9_bit        _BIT_ACCESS(NCO1INCH,1)
// PMD1<NCO1MD>
extern volatile __bit                   NCO1MD              __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 NCO1MD_bit          _BIT_ACCESS(PMD1,7)
// PIE7<NCOIE>
extern volatile __bit                   NCOIE               __at(0x38EC);	// @ (0x71D * 8 + 4)
#define                                 NCOIE_bit           _BIT_ACCESS(PIE7,4)
// PIR7<NCOIF>
extern volatile __bit                   NCOIF               __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 NCOIF_bit           _BIT_ACCESS(PIR7,4)
// PMD1<NCOMD>
extern volatile __bit                   NCOMD               __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 NCOMD_bit           _BIT_ACCESS(PMD1,7)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x4468);	// @ (0x88D * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x4469);	// @ (0x88D * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x446A);	// @ (0x88D * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x446B);	// @ (0x88D * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x446C);	// @ (0x88D * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x446D);	// @ (0x88D * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x446E);	// @ (0x88D * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x447B);	// @ (0x88F * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// DAC1CON0<NSS>
extern volatile __bit                   NSS                 __at(0x4870);	// @ (0x90E * 8 + 0)
#define                                 NSS_bit             _BIT_ACCESS(DAC1CON0,0)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x40D0);	// @ (0x81A * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x40D1);	// @ (0x81A * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRH<NVMADR10>
extern volatile __bit                   NVMADR10            __at(0x40DA);	// @ (0x81B * 8 + 2)
#define                                 NVMADR10_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADR11>
extern volatile __bit                   NVMADR11            __at(0x40DB);	// @ (0x81B * 8 + 3)
#define                                 NVMADR11_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADR12>
extern volatile __bit                   NVMADR12            __at(0x40DC);	// @ (0x81B * 8 + 4)
#define                                 NVMADR12_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADR13>
extern volatile __bit                   NVMADR13            __at(0x40DD);	// @ (0x81B * 8 + 5)
#define                                 NVMADR13_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADR14>
extern volatile __bit                   NVMADR14            __at(0x40DE);	// @ (0x81B * 8 + 6)
#define                                 NVMADR14_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x40D2);	// @ (0x81A * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x40D3);	// @ (0x81A * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x40D4);	// @ (0x81A * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x40D5);	// @ (0x81A * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x40D6);	// @ (0x81A * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x40D7);	// @ (0x81A * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0x40D8);	// @ (0x81B * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0x40D9);	// @ (0x81B * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDATL<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDATL,1)
// NVMDATH<NVMDAT10>
extern volatile __bit                   NVMDAT10            __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 NVMDAT10_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDAT11>
extern volatile __bit                   NVMDAT11            __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 NVMDAT11_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDAT12>
extern volatile __bit                   NVMDAT12            __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 NVMDAT12_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDAT13>
extern volatile __bit                   NVMDAT13            __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 NVMDAT13_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATL<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDATL,7)
// NVMDATH<NVMDAT8>
extern volatile __bit                   NVMDAT8             __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 NVMDAT8_bit         _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDAT9>
extern volatile __bit                   NVMDAT9             __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 NVMDAT9_bit         _BIT_ACCESS(NVMDATH,1)
// PIE7<NVMIE>
extern volatile __bit                   NVMIE               __at(0x38ED);	// @ (0x71D * 8 + 5)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE7,5)
// PIR7<NVMIF>
extern volatile __bit                   NVMIF               __at(0x389D);	// @ (0x713 * 8 + 5)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR7,5)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,2)
// NVMCON1<NVMREGS>
extern volatile __bit                   NVMREGS             __at(0x40F6);	// @ (0x81E * 8 + 6)
#define                                 NVMREGS_bit         _BIT_ACCESS(NVMCON1,6)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0xF9D0);	// @ (0x1F3A * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0xF9D1);	// @ (0x1F3A * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0xF9D2);	// @ (0x1F3A * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0xF9D3);	// @ (0x1F3A * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0xF9D4);	// @ (0x1F3A * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0xF9D5);	// @ (0x1F3A * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONA<ODCA6>
extern volatile __bit                   ODCA6               __at(0xF9D6);	// @ (0x1F3A * 8 + 6)
#define                                 ODCA6_bit           _BIT_ACCESS(ODCONA,6)
// ODCONA<ODCA7>
extern volatile __bit                   ODCA7               __at(0xF9D7);	// @ (0x1F3A * 8 + 7)
#define                                 ODCA7_bit           _BIT_ACCESS(ODCONA,7)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0xFA28);	// @ (0x1F45 * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0xFA29);	// @ (0x1F45 * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0xFA2A);	// @ (0x1F45 * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0xFA2B);	// @ (0x1F45 * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0xFA2C);	// @ (0x1F45 * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0xFA2D);	// @ (0x1F45 * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0xFA2E);	// @ (0x1F45 * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0xFA2F);	// @ (0x1F45 * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0xFA80);	// @ (0x1F50 * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0xFA81);	// @ (0x1F50 * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0xFA82);	// @ (0x1F50 * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0xFA83);	// @ (0x1F50 * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0xFA84);	// @ (0x1F50 * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0xFA85);	// @ (0x1F50 * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0xFA86);	// @ (0x1F50 * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0xFA87);	// @ (0x1F50 * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// DAC1CON0<OE1>
extern volatile __bit                   OE1                 __at(0x4875);	// @ (0x90E * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<OE2>
extern volatile __bit                   OE2                 __at(0x4874);	// @ (0x90E * 8 + 4)
#define                                 OE2_bit             _BIT_ACCESS(DAC1CON0,4)
// RC1STA<OERR>
extern volatile __bit                   OERR                __at(0x8E9);	// @ (0x11D * 8 + 1)
#define                                 OERR_bit            _BIT_ACCESS(RC1STA,1)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x447C);	// @ (0x88F * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// PIE1<OSFIE>
extern volatile __bit                   OSFIE               __at(0x38BF);	// @ (0x717 * 8 + 7)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE1,7)
// PIR1<OSFIF>
extern volatile __bit                   OSFIF               __at(0x386F);	// @ (0x70D * 8 + 7)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR1,7)
// CCPTMRS1<P6TSEL0>
extern volatile __bit                   P6TSEL0             __at(0x10FA);	// @ (0x21F * 8 + 2)
#define                                 P6TSEL0_bit         _BIT_ACCESS(CCPTMRS1,2)
// CCPTMRS1<P6TSEL1>
extern volatile __bit                   P6TSEL1             __at(0x10FB);	// @ (0x21F * 8 + 3)
#define                                 P6TSEL1_bit         _BIT_ACCESS(CCPTMRS1,3)
// CCPTMRS1<P7TSEL0>
extern volatile __bit                   P7TSEL0             __at(0x10FC);	// @ (0x21F * 8 + 4)
#define                                 P7TSEL0_bit         _BIT_ACCESS(CCPTMRS1,4)
// CCPTMRS1<P7TSEL1>
extern volatile __bit                   P7TSEL1             __at(0x10FD);	// @ (0x21F * 8 + 5)
#define                                 P7TSEL1_bit         _BIT_ACCESS(CCPTMRS1,5)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// SSP2CON2<PEN2>
extern volatile __bit                   PEN2                __at(0xCDA);	// @ (0x19B * 8 + 2)
#define                                 PEN2_bit            _BIT_ACCESS(SSP2CON2,2)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x20F8);	// @ (0x41F * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x20F9);	// @ (0x41F * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x20FA);	// @ (0x41F * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x20FB);	// @ (0x41F * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x4480);	// @ (0x890 * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0xF478);	// @ (0x1E8F * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// DAC1CON0<PSS0>
extern volatile __bit                   PSS0                __at(0x4872);	// @ (0x90E * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<PSS1>
extern volatile __bit                   PSS1                __at(0x4873);	// @ (0x90E * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON0,3)
// PWM6DCL<PWM6DC0>
extern volatile __bit                   PWM6DC0             __at(0x1C66);	// @ (0x38C * 8 + 6)
#define                                 PWM6DC0_bit         _BIT_ACCESS(PWM6DCL,6)
// PWM6DCL<PWM6DC1>
extern volatile __bit                   PWM6DC1             __at(0x1C67);	// @ (0x38C * 8 + 7)
#define                                 PWM6DC1_bit         _BIT_ACCESS(PWM6DCL,7)
// PWM6DCH<PWM6DC2>
extern volatile __bit                   PWM6DC2             __at(0x1C68);	// @ (0x38D * 8 + 0)
#define                                 PWM6DC2_bit         _BIT_ACCESS(PWM6DCH,0)
// PWM6DCH<PWM6DC3>
extern volatile __bit                   PWM6DC3             __at(0x1C69);	// @ (0x38D * 8 + 1)
#define                                 PWM6DC3_bit         _BIT_ACCESS(PWM6DCH,1)
// PWM6DCH<PWM6DC4>
extern volatile __bit                   PWM6DC4             __at(0x1C6A);	// @ (0x38D * 8 + 2)
#define                                 PWM6DC4_bit         _BIT_ACCESS(PWM6DCH,2)
// PWM6DCH<PWM6DC5>
extern volatile __bit                   PWM6DC5             __at(0x1C6B);	// @ (0x38D * 8 + 3)
#define                                 PWM6DC5_bit         _BIT_ACCESS(PWM6DCH,3)
// PWM6DCH<PWM6DC6>
extern volatile __bit                   PWM6DC6             __at(0x1C6C);	// @ (0x38D * 8 + 4)
#define                                 PWM6DC6_bit         _BIT_ACCESS(PWM6DCH,4)
// PWM6DCH<PWM6DC7>
extern volatile __bit                   PWM6DC7             __at(0x1C6D);	// @ (0x38D * 8 + 5)
#define                                 PWM6DC7_bit         _BIT_ACCESS(PWM6DCH,5)
// PWM6DCH<PWM6DC8>
extern volatile __bit                   PWM6DC8             __at(0x1C6E);	// @ (0x38D * 8 + 6)
#define                                 PWM6DC8_bit         _BIT_ACCESS(PWM6DCH,6)
// PWM6DCH<PWM6DC9>
extern volatile __bit                   PWM6DC9             __at(0x1C6F);	// @ (0x38D * 8 + 7)
#define                                 PWM6DC9_bit         _BIT_ACCESS(PWM6DCH,7)
// PWM6CON<PWM6EN>
extern volatile __bit                   PWM6EN              __at(0x1C77);	// @ (0x38E * 8 + 7)
#define                                 PWM6EN_bit          _BIT_ACCESS(PWM6CON,7)
// PMD3<PWM6MD>
extern volatile __bit                   PWM6MD              __at(0x3CCD);	// @ (0x799 * 8 + 5)
#define                                 PWM6MD_bit          _BIT_ACCESS(PMD3,5)
// PWM6CON<PWM6OUT>
extern volatile __bit                   PWM6OUT             __at(0x1C75);	// @ (0x38E * 8 + 5)
#define                                 PWM6OUT_bit         _BIT_ACCESS(PWM6CON,5)
// PWM6CON<PWM6POL>
extern volatile __bit                   PWM6POL             __at(0x1C74);	// @ (0x38E * 8 + 4)
#define                                 PWM6POL_bit         _BIT_ACCESS(PWM6CON,4)
// PWM7DCL<PWM7DC0>
extern volatile __bit                   PWM7DC0             __at(0x1C86);	// @ (0x390 * 8 + 6)
#define                                 PWM7DC0_bit         _BIT_ACCESS(PWM7DCL,6)
// PWM7DCL<PWM7DC1>
extern volatile __bit                   PWM7DC1             __at(0x1C87);	// @ (0x390 * 8 + 7)
#define                                 PWM7DC1_bit         _BIT_ACCESS(PWM7DCL,7)
// PWM7DCH<PWM7DC2>
extern volatile __bit                   PWM7DC2             __at(0x1C88);	// @ (0x391 * 8 + 0)
#define                                 PWM7DC2_bit         _BIT_ACCESS(PWM7DCH,0)
// PWM7DCH<PWM7DC3>
extern volatile __bit                   PWM7DC3             __at(0x1C89);	// @ (0x391 * 8 + 1)
#define                                 PWM7DC3_bit         _BIT_ACCESS(PWM7DCH,1)
// PWM7DCH<PWM7DC4>
extern volatile __bit                   PWM7DC4             __at(0x1C8A);	// @ (0x391 * 8 + 2)
#define                                 PWM7DC4_bit         _BIT_ACCESS(PWM7DCH,2)
// PWM7DCH<PWM7DC5>
extern volatile __bit                   PWM7DC5             __at(0x1C8B);	// @ (0x391 * 8 + 3)
#define                                 PWM7DC5_bit         _BIT_ACCESS(PWM7DCH,3)
// PWM7DCH<PWM7DC6>
extern volatile __bit                   PWM7DC6             __at(0x1C8C);	// @ (0x391 * 8 + 4)
#define                                 PWM7DC6_bit         _BIT_ACCESS(PWM7DCH,4)
// PWM7DCH<PWM7DC7>
extern volatile __bit                   PWM7DC7             __at(0x1C8D);	// @ (0x391 * 8 + 5)
#define                                 PWM7DC7_bit         _BIT_ACCESS(PWM7DCH,5)
// PWM7DCH<PWM7DC8>
extern volatile __bit                   PWM7DC8             __at(0x1C8E);	// @ (0x391 * 8 + 6)
#define                                 PWM7DC8_bit         _BIT_ACCESS(PWM7DCH,6)
// PWM7DCH<PWM7DC9>
extern volatile __bit                   PWM7DC9             __at(0x1C8F);	// @ (0x391 * 8 + 7)
#define                                 PWM7DC9_bit         _BIT_ACCESS(PWM7DCH,7)
// PWM7CON<PWM7EN>
extern volatile __bit                   PWM7EN              __at(0x1C97);	// @ (0x392 * 8 + 7)
#define                                 PWM7EN_bit          _BIT_ACCESS(PWM7CON,7)
// PMD3<PWM7MD>
extern volatile __bit                   PWM7MD              __at(0x3CCE);	// @ (0x799 * 8 + 6)
#define                                 PWM7MD_bit          _BIT_ACCESS(PMD3,6)
// PWM7CON<PWM7OUT>
extern volatile __bit                   PWM7OUT             __at(0x1C95);	// @ (0x392 * 8 + 5)
#define                                 PWM7OUT_bit         _BIT_ACCESS(PWM7CON,5)
// PWM7CON<PWM7POL>
extern volatile __bit                   PWM7POL             __at(0x1C94);	// @ (0x392 * 8 + 4)
#define                                 PWM7POL_bit         _BIT_ACCESS(PWM7CON,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0xF880);	// @ (0x1F10 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0xF881);	// @ (0x1F10 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0xF882);	// @ (0x1F10 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0xF883);	// @ (0x1F10 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0xF884);	// @ (0x1F10 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// RA0PPS<RA0PPS5>
extern volatile __bit                   RA0PPS5             __at(0xF885);	// @ (0x1F10 * 8 + 5)
#define                                 RA0PPS5_bit         _BIT_ACCESS(RA0PPS,5)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0xF888);	// @ (0x1F11 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0xF889);	// @ (0x1F11 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0xF88A);	// @ (0x1F11 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0xF88B);	// @ (0x1F11 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0xF88C);	// @ (0x1F11 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// RA1PPS<RA1PPS5>
extern volatile __bit                   RA1PPS5             __at(0xF88D);	// @ (0x1F11 * 8 + 5)
#define                                 RA1PPS5_bit         _BIT_ACCESS(RA1PPS,5)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0xF890);	// @ (0x1F12 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0xF891);	// @ (0x1F12 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0xF892);	// @ (0x1F12 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0xF893);	// @ (0x1F12 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0xF894);	// @ (0x1F12 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// RA2PPS<RA2PPS5>
extern volatile __bit                   RA2PPS5             __at(0xF895);	// @ (0x1F12 * 8 + 5)
#define                                 RA2PPS5_bit         _BIT_ACCESS(RA2PPS,5)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0xF898);	// @ (0x1F13 * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0xF899);	// @ (0x1F13 * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0xF89A);	// @ (0x1F13 * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0xF89B);	// @ (0x1F13 * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0xF89C);	// @ (0x1F13 * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// RA3PPS<RA3PPS5>
extern volatile __bit                   RA3PPS5             __at(0xF89D);	// @ (0x1F13 * 8 + 5)
#define                                 RA3PPS5_bit         _BIT_ACCESS(RA3PPS,5)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x64);	// @ (0xC * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0xF8A0);	// @ (0x1F14 * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0xF8A1);	// @ (0x1F14 * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0xF8A2);	// @ (0x1F14 * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0xF8A3);	// @ (0x1F14 * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0xF8A4);	// @ (0x1F14 * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// RA4PPS<RA4PPS5>
extern volatile __bit                   RA4PPS5             __at(0xF8A5);	// @ (0x1F14 * 8 + 5)
#define                                 RA4PPS5_bit         _BIT_ACCESS(RA4PPS,5)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x65);	// @ (0xC * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0xF8A8);	// @ (0x1F15 * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0xF8A9);	// @ (0x1F15 * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0xF8AA);	// @ (0x1F15 * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0xF8AB);	// @ (0x1F15 * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0xF8AC);	// @ (0x1F15 * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// RA5PPS<RA5PPS5>
extern volatile __bit                   RA5PPS5             __at(0xF8AD);	// @ (0x1F15 * 8 + 5)
#define                                 RA5PPS5_bit         _BIT_ACCESS(RA5PPS,5)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x66);	// @ (0xC * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// RA6PPS<RA6PPS0>
extern volatile __bit                   RA6PPS0             __at(0xF8B0);	// @ (0x1F16 * 8 + 0)
#define                                 RA6PPS0_bit         _BIT_ACCESS(RA6PPS,0)
// RA6PPS<RA6PPS1>
extern volatile __bit                   RA6PPS1             __at(0xF8B1);	// @ (0x1F16 * 8 + 1)
#define                                 RA6PPS1_bit         _BIT_ACCESS(RA6PPS,1)
// RA6PPS<RA6PPS2>
extern volatile __bit                   RA6PPS2             __at(0xF8B2);	// @ (0x1F16 * 8 + 2)
#define                                 RA6PPS2_bit         _BIT_ACCESS(RA6PPS,2)
// RA6PPS<RA6PPS3>
extern volatile __bit                   RA6PPS3             __at(0xF8B3);	// @ (0x1F16 * 8 + 3)
#define                                 RA6PPS3_bit         _BIT_ACCESS(RA6PPS,3)
// RA6PPS<RA6PPS4>
extern volatile __bit                   RA6PPS4             __at(0xF8B4);	// @ (0x1F16 * 8 + 4)
#define                                 RA6PPS4_bit         _BIT_ACCESS(RA6PPS,4)
// RA6PPS<RA6PPS5>
extern volatile __bit                   RA6PPS5             __at(0xF8B5);	// @ (0x1F16 * 8 + 5)
#define                                 RA6PPS5_bit         _BIT_ACCESS(RA6PPS,5)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x67);	// @ (0xC * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// RA7PPS<RA7PPS0>
extern volatile __bit                   RA7PPS0             __at(0xF8B8);	// @ (0x1F17 * 8 + 0)
#define                                 RA7PPS0_bit         _BIT_ACCESS(RA7PPS,0)
// RA7PPS<RA7PPS1>
extern volatile __bit                   RA7PPS1             __at(0xF8B9);	// @ (0x1F17 * 8 + 1)
#define                                 RA7PPS1_bit         _BIT_ACCESS(RA7PPS,1)
// RA7PPS<RA7PPS2>
extern volatile __bit                   RA7PPS2             __at(0xF8BA);	// @ (0x1F17 * 8 + 2)
#define                                 RA7PPS2_bit         _BIT_ACCESS(RA7PPS,2)
// RA7PPS<RA7PPS3>
extern volatile __bit                   RA7PPS3             __at(0xF8BB);	// @ (0x1F17 * 8 + 3)
#define                                 RA7PPS3_bit         _BIT_ACCESS(RA7PPS,3)
// RA7PPS<RA7PPS4>
extern volatile __bit                   RA7PPS4             __at(0xF8BC);	// @ (0x1F17 * 8 + 4)
#define                                 RA7PPS4_bit         _BIT_ACCESS(RA7PPS,4)
// RA7PPS<RA7PPS5>
extern volatile __bit                   RA7PPS5             __at(0xF8BD);	// @ (0x1F17 * 8 + 5)
#define                                 RA7PPS5_bit         _BIT_ACCESS(RA7PPS,5)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x68);	// @ (0xD * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0xF8C0);	// @ (0x1F18 * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0xF8C1);	// @ (0x1F18 * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0xF8C2);	// @ (0x1F18 * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0xF8C3);	// @ (0x1F18 * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0xF8C4);	// @ (0x1F18 * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// RB0PPS<RB0PPS5>
extern volatile __bit                   RB0PPS5             __at(0xF8C5);	// @ (0x1F18 * 8 + 5)
#define                                 RB0PPS5_bit         _BIT_ACCESS(RB0PPS,5)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x69);	// @ (0xD * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0xF8C8);	// @ (0x1F19 * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0xF8C9);	// @ (0x1F19 * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0xF8CA);	// @ (0x1F19 * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0xF8CB);	// @ (0x1F19 * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0xF8CC);	// @ (0x1F19 * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// RB1PPS<RB1PPS5>
extern volatile __bit                   RB1PPS5             __at(0xF8CD);	// @ (0x1F19 * 8 + 5)
#define                                 RB1PPS5_bit         _BIT_ACCESS(RB1PPS,5)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x6A);	// @ (0xD * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0xF8D0);	// @ (0x1F1A * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0xF8D1);	// @ (0x1F1A * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0xF8D2);	// @ (0x1F1A * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0xF8D3);	// @ (0x1F1A * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0xF8D4);	// @ (0x1F1A * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// RB2PPS<RB2PPS5>
extern volatile __bit                   RB2PPS5             __at(0xF8D5);	// @ (0x1F1A * 8 + 5)
#define                                 RB2PPS5_bit         _BIT_ACCESS(RB2PPS,5)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x6B);	// @ (0xD * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0xF8D8);	// @ (0x1F1B * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0xF8D9);	// @ (0x1F1B * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0xF8DA);	// @ (0x1F1B * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0xF8DB);	// @ (0x1F1B * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0xF8DC);	// @ (0x1F1B * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// RB3PPS<RB3PPS5>
extern volatile __bit                   RB3PPS5             __at(0xF8DD);	// @ (0x1F1B * 8 + 5)
#define                                 RB3PPS5_bit         _BIT_ACCESS(RB3PPS,5)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x6C);	// @ (0xD * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0xF8E0);	// @ (0x1F1C * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0xF8E1);	// @ (0x1F1C * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0xF8E2);	// @ (0x1F1C * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0xF8E3);	// @ (0x1F1C * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0xF8E4);	// @ (0x1F1C * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// RB4PPS<RB4PPS5>
extern volatile __bit                   RB4PPS5             __at(0xF8E5);	// @ (0x1F1C * 8 + 5)
#define                                 RB4PPS5_bit         _BIT_ACCESS(RB4PPS,5)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x6D);	// @ (0xD * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0xF8E8);	// @ (0x1F1D * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0xF8E9);	// @ (0x1F1D * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0xF8EA);	// @ (0x1F1D * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0xF8EB);	// @ (0x1F1D * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0xF8EC);	// @ (0x1F1D * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// RB5PPS<RB5PPS5>
extern volatile __bit                   RB5PPS5             __at(0xF8ED);	// @ (0x1F1D * 8 + 5)
#define                                 RB5PPS5_bit         _BIT_ACCESS(RB5PPS,5)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x6E);	// @ (0xD * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0xF8F0);	// @ (0x1F1E * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0xF8F1);	// @ (0x1F1E * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0xF8F2);	// @ (0x1F1E * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0xF8F3);	// @ (0x1F1E * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0xF8F4);	// @ (0x1F1E * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// RB6PPS<RB6PPS5>
extern volatile __bit                   RB6PPS5             __at(0xF8F5);	// @ (0x1F1E * 8 + 5)
#define                                 RB6PPS5_bit         _BIT_ACCESS(RB6PPS,5)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x6F);	// @ (0xD * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0xF8F8);	// @ (0x1F1F * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0xF8F9);	// @ (0x1F1F * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0xF8FA);	// @ (0x1F1F * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0xF8FB);	// @ (0x1F1F * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0xF8FC);	// @ (0x1F1F * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// RB7PPS<RB7PPS5>
extern volatile __bit                   RB7PPS5             __at(0xF8FD);	// @ (0x1F1F * 8 + 5)
#define                                 RB7PPS5_bit         _BIT_ACCESS(RB7PPS,5)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x70);	// @ (0xE * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0xF900);	// @ (0x1F20 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0xF901);	// @ (0x1F20 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0xF902);	// @ (0x1F20 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0xF903);	// @ (0x1F20 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0xF904);	// @ (0x1F20 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// RC0PPS<RC0PPS5>
extern volatile __bit                   RC0PPS5             __at(0xF905);	// @ (0x1F20 * 8 + 5)
#define                                 RC0PPS5_bit         _BIT_ACCESS(RC0PPS,5)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x71);	// @ (0xE * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0xF908);	// @ (0x1F21 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0xF909);	// @ (0x1F21 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0xF90A);	// @ (0x1F21 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0xF90B);	// @ (0x1F21 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0xF90C);	// @ (0x1F21 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// RC1PPS<RC1PPS5>
extern volatile __bit                   RC1PPS5             __at(0xF90D);	// @ (0x1F21 * 8 + 5)
#define                                 RC1PPS5_bit         _BIT_ACCESS(RC1PPS,5)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x72);	// @ (0xE * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0xF910);	// @ (0x1F22 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0xF911);	// @ (0x1F22 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0xF912);	// @ (0x1F22 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0xF913);	// @ (0x1F22 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0xF914);	// @ (0x1F22 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// RC2PPS<RC2PPS5>
extern volatile __bit                   RC2PPS5             __at(0xF915);	// @ (0x1F22 * 8 + 5)
#define                                 RC2PPS5_bit         _BIT_ACCESS(RC2PPS,5)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x73);	// @ (0xE * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0xF918);	// @ (0x1F23 * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0xF919);	// @ (0x1F23 * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0xF91A);	// @ (0x1F23 * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0xF91B);	// @ (0x1F23 * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0xF91C);	// @ (0x1F23 * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// RC3PPS<RC3PPS5>
extern volatile __bit                   RC3PPS5             __at(0xF91D);	// @ (0x1F23 * 8 + 5)
#define                                 RC3PPS5_bit         _BIT_ACCESS(RC3PPS,5)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0xF920);	// @ (0x1F24 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0xF921);	// @ (0x1F24 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0xF922);	// @ (0x1F24 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0xF923);	// @ (0x1F24 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0xF924);	// @ (0x1F24 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// RC4PPS<RC4PPS5>
extern volatile __bit                   RC4PPS5             __at(0xF925);	// @ (0x1F24 * 8 + 5)
#define                                 RC4PPS5_bit         _BIT_ACCESS(RC4PPS,5)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0xF928);	// @ (0x1F25 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0xF929);	// @ (0x1F25 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0xF92A);	// @ (0x1F25 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0xF92B);	// @ (0x1F25 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0xF92C);	// @ (0x1F25 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// RC5PPS<RC5PPS5>
extern volatile __bit                   RC5PPS5             __at(0xF92D);	// @ (0x1F25 * 8 + 5)
#define                                 RC5PPS5_bit         _BIT_ACCESS(RC5PPS,5)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x76);	// @ (0xE * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0xF930);	// @ (0x1F26 * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0xF931);	// @ (0x1F26 * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0xF932);	// @ (0x1F26 * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0xF933);	// @ (0x1F26 * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0xF934);	// @ (0x1F26 * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// RC6PPS<RC6PPS5>
extern volatile __bit                   RC6PPS5             __at(0xF935);	// @ (0x1F26 * 8 + 5)
#define                                 RC6PPS5_bit         _BIT_ACCESS(RC6PPS,5)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x77);	// @ (0xE * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RC7PPS<RC7PPS0>
extern volatile __bit                   RC7PPS0             __at(0xF938);	// @ (0x1F27 * 8 + 0)
#define                                 RC7PPS0_bit         _BIT_ACCESS(RC7PPS,0)
// RC7PPS<RC7PPS1>
extern volatile __bit                   RC7PPS1             __at(0xF939);	// @ (0x1F27 * 8 + 1)
#define                                 RC7PPS1_bit         _BIT_ACCESS(RC7PPS,1)
// RC7PPS<RC7PPS2>
extern volatile __bit                   RC7PPS2             __at(0xF93A);	// @ (0x1F27 * 8 + 2)
#define                                 RC7PPS2_bit         _BIT_ACCESS(RC7PPS,2)
// RC7PPS<RC7PPS3>
extern volatile __bit                   RC7PPS3             __at(0xF93B);	// @ (0x1F27 * 8 + 3)
#define                                 RC7PPS3_bit         _BIT_ACCESS(RC7PPS,3)
// RC7PPS<RC7PPS4>
extern volatile __bit                   RC7PPS4             __at(0xF93C);	// @ (0x1F27 * 8 + 4)
#define                                 RC7PPS4_bit         _BIT_ACCESS(RC7PPS,4)
// RC7PPS<RC7PPS5>
extern volatile __bit                   RC7PPS5             __at(0xF93D);	// @ (0x1F27 * 8 + 5)
#define                                 RC7PPS5_bit         _BIT_ACCESS(RC7PPS,5)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// SSP2CON2<RCEN2>
extern volatile __bit                   RCEN2               __at(0xCDB);	// @ (0x19B * 8 + 3)
#define                                 RCEN2_bit           _BIT_ACCESS(SSP2CON2,3)
// BAUD1CON<RCIDL>
extern volatile __bit                   RCIDL               __at(0x8FE);	// @ (0x11F * 8 + 6)
#define                                 RCIDL_bit           _BIT_ACCESS(BAUD1CON,6)
// PIE3<RCIE>
extern volatile __bit                   RCIE                __at(0x38CD);	// @ (0x719 * 8 + 5)
#define                                 RCIE_bit            _BIT_ACCESS(PIE3,5)
// PIR3<RCIF>
extern volatile __bit                   RCIF                __at(0x387D);	// @ (0x70F * 8 + 5)
#define                                 RCIF_bit            _BIT_ACCESS(PIR3,5)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0x40F0);	// @ (0x81E * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// T3CON<RD163>
extern volatile __bit                   RD163               __at(0x10A1);	// @ (0x214 * 8 + 1)
#define                                 RD163_bit           _BIT_ACCESS(T3CON,1)
// T5CON<RD165>
extern volatile __bit                   RD165               __at(0x10D1);	// @ (0x21A * 8 + 1)
#define                                 RD165_bit           _BIT_ACCESS(T5CON,1)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x83);	// @ (0x10 * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<READ_WRITE2>
extern volatile __bit                   READ_WRITE2         __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 READ_WRITE2_bit     _BIT_ACCESS(SSP2STAT,2)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x4465);	// @ (0x88C * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// SSP2CON2<RSEN2>
extern volatile __bit                   RSEN2               __at(0xCD9);	// @ (0x19B * 8 + 1)
#define                                 RSEN2_bit           _BIT_ACCESS(SSP2CON2,1)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<RW2>
extern volatile __bit                   RW2                 __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 RW2_bit             _BIT_ACCESS(SSP2STAT,2)
// RC1STA<RX9>
extern volatile __bit                   RX9                 __at(0x8EE);	// @ (0x11D * 8 + 6)
#define                                 RX9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RX9D>
extern volatile __bit                   RX9D                __at(0x8E8);	// @ (0x11D * 8 + 0)
#define                                 RX9D_bit            _BIT_ACCESS(RC1STA,0)
// RXPPS<RXPPS0>
extern volatile __bit                   RXPPS0              __at(0xF658);	// @ (0x1ECB * 8 + 0)
#define                                 RXPPS0_bit          _BIT_ACCESS(RXPPS,0)
// RXPPS<RXPPS1>
extern volatile __bit                   RXPPS1              __at(0xF659);	// @ (0x1ECB * 8 + 1)
#define                                 RXPPS1_bit          _BIT_ACCESS(RXPPS,1)
// RXPPS<RXPPS2>
extern volatile __bit                   RXPPS2              __at(0xF65A);	// @ (0x1ECB * 8 + 2)
#define                                 RXPPS2_bit          _BIT_ACCESS(RXPPS,2)
// RXPPS<RXPPS3>
extern volatile __bit                   RXPPS3              __at(0xF65B);	// @ (0x1ECB * 8 + 3)
#define                                 RXPPS3_bit          _BIT_ACCESS(RXPPS,3)
// RXPPS<RXPPS4>
extern volatile __bit                   RXPPS4              __at(0xF65C);	// @ (0x1ECB * 8 + 4)
#define                                 RXPPS4_bit          _BIT_ACCESS(RXPPS,4)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_W2>
extern volatile __bit                   R_W2                __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 R_W2_bit            _BIT_ACCESS(SSP2STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<R_nW2>
extern volatile __bit                   R_nW2               __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 R_nW2_bit           _BIT_ACCESS(SSP2STAT,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SCANCON0<SCANBUSY>
extern volatile __bit                   SCANBUSY            __at(0x2085);	// @ (0x410 * 8 + 5)
#define                                 SCANBUSY_bit        _BIT_ACCESS(SCANCON0,5)
// SCANCON0<SCANEN>
extern volatile __bit                   SCANEN              __at(0x2087);	// @ (0x410 * 8 + 7)
#define                                 SCANEN_bit          _BIT_ACCESS(SCANCON0,7)
// SCANCON0<SCANGO>
extern volatile __bit                   SCANGO              __at(0x2086);	// @ (0x410 * 8 + 6)
#define                                 SCANGO_bit          _BIT_ACCESS(SCANCON0,6)
// SCANHADRL<SCANHADR0>
extern volatile __bit                   SCANHADR0           __at(0x2070);	// @ (0x40E * 8 + 0)
#define                                 SCANHADR0_bit       _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<SCANHADR1>
extern volatile __bit                   SCANHADR1           __at(0x2071);	// @ (0x40E * 8 + 1)
#define                                 SCANHADR1_bit       _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<SCANHADR10>
extern volatile __bit                   SCANHADR10          __at(0x207A);	// @ (0x40F * 8 + 2)
#define                                 SCANHADR10_bit      _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<SCANHADR11>
extern volatile __bit                   SCANHADR11          __at(0x207B);	// @ (0x40F * 8 + 3)
#define                                 SCANHADR11_bit      _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<SCANHADR12>
extern volatile __bit                   SCANHADR12          __at(0x207C);	// @ (0x40F * 8 + 4)
#define                                 SCANHADR12_bit      _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<SCANHADR13>
extern volatile __bit                   SCANHADR13          __at(0x207D);	// @ (0x40F * 8 + 5)
#define                                 SCANHADR13_bit      _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<SCANHADR14>
extern volatile __bit                   SCANHADR14          __at(0x207E);	// @ (0x40F * 8 + 6)
#define                                 SCANHADR14_bit      _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<SCANHADR15>
extern volatile __bit                   SCANHADR15          __at(0x207F);	// @ (0x40F * 8 + 7)
#define                                 SCANHADR15_bit      _BIT_ACCESS(SCANHADRH,7)
// SCANHADRL<SCANHADR2>
extern volatile __bit                   SCANHADR2           __at(0x2072);	// @ (0x40E * 8 + 2)
#define                                 SCANHADR2_bit       _BIT_ACCESS(SCANHADRL,2)
// SCANHADRL<SCANHADR3>
extern volatile __bit                   SCANHADR3           __at(0x2073);	// @ (0x40E * 8 + 3)
#define                                 SCANHADR3_bit       _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<SCANHADR4>
extern volatile __bit                   SCANHADR4           __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 SCANHADR4_bit       _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<SCANHADR5>
extern volatile __bit                   SCANHADR5           __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 SCANHADR5_bit       _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<SCANHADR6>
extern volatile __bit                   SCANHADR6           __at(0x2076);	// @ (0x40E * 8 + 6)
#define                                 SCANHADR6_bit       _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<SCANHADR7>
extern volatile __bit                   SCANHADR7           __at(0x2077);	// @ (0x40E * 8 + 7)
#define                                 SCANHADR7_bit       _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<SCANHADR8>
extern volatile __bit                   SCANHADR8           __at(0x2078);	// @ (0x40F * 8 + 0)
#define                                 SCANHADR8_bit       _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<SCANHADR9>
extern volatile __bit                   SCANHADR9           __at(0x2079);	// @ (0x40F * 8 + 1)
#define                                 SCANHADR9_bit       _BIT_ACCESS(SCANHADRH,1)
// PIE7<SCANIE>
extern volatile __bit                   SCANIE              __at(0x38EF);	// @ (0x71D * 8 + 7)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE7,7)
// PIR7<SCANIF>
extern volatile __bit                   SCANIF              __at(0x389F);	// @ (0x713 * 8 + 7)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR7,7)
// SCANCON0<SCANINTM>
extern volatile __bit                   SCANINTM            __at(0x2083);	// @ (0x410 * 8 + 3)
#define                                 SCANINTM_bit        _BIT_ACCESS(SCANCON0,3)
// SCANCON0<SCANINVALID>
extern volatile __bit                   SCANINVALID         __at(0x2084);	// @ (0x410 * 8 + 4)
#define                                 SCANINVALID_bit     _BIT_ACCESS(SCANCON0,4)
// SCANLADRL<SCANLADR0>
extern volatile __bit                   SCANLADR0           __at(0x2060);	// @ (0x40C * 8 + 0)
#define                                 SCANLADR0_bit       _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<SCANLADR1>
extern volatile __bit                   SCANLADR1           __at(0x2061);	// @ (0x40C * 8 + 1)
#define                                 SCANLADR1_bit       _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<SCANLADR10>
extern volatile __bit                   SCANLADR10          __at(0x206A);	// @ (0x40D * 8 + 2)
#define                                 SCANLADR10_bit      _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<SCANLADR11>
extern volatile __bit                   SCANLADR11          __at(0x206B);	// @ (0x40D * 8 + 3)
#define                                 SCANLADR11_bit      _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<SCANLADR12>
extern volatile __bit                   SCANLADR12          __at(0x206C);	// @ (0x40D * 8 + 4)
#define                                 SCANLADR12_bit      _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<SCANLADR13>
extern volatile __bit                   SCANLADR13          __at(0x206D);	// @ (0x40D * 8 + 5)
#define                                 SCANLADR13_bit      _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<SCANLADR14>
extern volatile __bit                   SCANLADR14          __at(0x206E);	// @ (0x40D * 8 + 6)
#define                                 SCANLADR14_bit      _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<SCANLADR15>
extern volatile __bit                   SCANLADR15          __at(0x206F);	// @ (0x40D * 8 + 7)
#define                                 SCANLADR15_bit      _BIT_ACCESS(SCANLADRH,7)
// SCANLADRL<SCANLADR2>
extern volatile __bit                   SCANLADR2           __at(0x2062);	// @ (0x40C * 8 + 2)
#define                                 SCANLADR2_bit       _BIT_ACCESS(SCANLADRL,2)
// SCANLADRL<SCANLADR3>
extern volatile __bit                   SCANLADR3           __at(0x2063);	// @ (0x40C * 8 + 3)
#define                                 SCANLADR3_bit       _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<SCANLADR4>
extern volatile __bit                   SCANLADR4           __at(0x2064);	// @ (0x40C * 8 + 4)
#define                                 SCANLADR4_bit       _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<SCANLADR5>
extern volatile __bit                   SCANLADR5           __at(0x2065);	// @ (0x40C * 8 + 5)
#define                                 SCANLADR5_bit       _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<SCANLADR6>
extern volatile __bit                   SCANLADR6           __at(0x2066);	// @ (0x40C * 8 + 6)
#define                                 SCANLADR6_bit       _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<SCANLADR7>
extern volatile __bit                   SCANLADR7           __at(0x2067);	// @ (0x40C * 8 + 7)
#define                                 SCANLADR7_bit       _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<SCANLADR8>
extern volatile __bit                   SCANLADR8           __at(0x2068);	// @ (0x40D * 8 + 0)
#define                                 SCANLADR8_bit       _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<SCANLADR9>
extern volatile __bit                   SCANLADR9           __at(0x2069);	// @ (0x40D * 8 + 1)
#define                                 SCANLADR9_bit       _BIT_ACCESS(SCANLADRH,1)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x3CB3);	// @ (0x796 * 8 + 3)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,3)
// SCANCON0<SCANMODE0>
extern volatile __bit                   SCANMODE0           __at(0x2080);	// @ (0x410 * 8 + 0)
#define                                 SCANMODE0_bit       _BIT_ACCESS(SCANCON0,0)
// SCANCON0<SCANMODE1>
extern volatile __bit                   SCANMODE1           __at(0x2081);	// @ (0x410 * 8 + 1)
#define                                 SCANMODE1_bit       _BIT_ACCESS(SCANCON0,1)
// SCANTRIG<SCANTSEL0>
extern volatile __bit                   SCANTSEL0           __at(0x2088);	// @ (0x411 * 8 + 0)
#define                                 SCANTSEL0_bit       _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<SCANTSEL1>
extern volatile __bit                   SCANTSEL1           __at(0x2089);	// @ (0x411 * 8 + 1)
#define                                 SCANTSEL1_bit       _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<SCANTSEL2>
extern volatile __bit                   SCANTSEL2           __at(0x208A);	// @ (0x411 * 8 + 2)
#define                                 SCANTSEL2_bit       _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<SCANTSEL3>
extern volatile __bit                   SCANTSEL3           __at(0x208B);	// @ (0x411 * 8 + 3)
#define                                 SCANTSEL3_bit       _BIT_ACCESS(SCANTRIG,3)
// BAUD1CON<SCKP>
extern volatile __bit                   SCKP                __at(0x8FC);	// @ (0x11F * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUD1CON,4)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0xC88);	// @ (0x191 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// SSP2CON2<SEN2>
extern volatile __bit                   SEN2                __at(0xCD8);	// @ (0x19B * 8 + 0)
#define                                 SEN2_bit            _BIT_ACCESS(SSP2CON2,0)
// TX1STA<SENDB>
extern volatile __bit                   SENDB               __at(0x8F3);	// @ (0x11E * 8 + 3)
#define                                 SENDB_bit           _BIT_ACCESS(TX1STA,3)
// CRCSHIFTL<SHFT0>
extern volatile __bit                   SHFT0               __at(0x20D0);	// @ (0x41A * 8 + 0)
#define                                 SHFT0_bit           _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<SHFT1>
extern volatile __bit                   SHFT1               __at(0x20D1);	// @ (0x41A * 8 + 1)
#define                                 SHFT1_bit           _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<SHFT10>
extern volatile __bit                   SHFT10              __at(0x20DA);	// @ (0x41B * 8 + 2)
#define                                 SHFT10_bit          _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<SHFT11>
extern volatile __bit                   SHFT11              __at(0x20DB);	// @ (0x41B * 8 + 3)
#define                                 SHFT11_bit          _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<SHFT12>
extern volatile __bit                   SHFT12              __at(0x20DC);	// @ (0x41B * 8 + 4)
#define                                 SHFT12_bit          _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<SHFT13>
extern volatile __bit                   SHFT13              __at(0x20DD);	// @ (0x41B * 8 + 5)
#define                                 SHFT13_bit          _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<SHFT14>
extern volatile __bit                   SHFT14              __at(0x20DE);	// @ (0x41B * 8 + 6)
#define                                 SHFT14_bit          _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<SHFT15>
extern volatile __bit                   SHFT15              __at(0x20DF);	// @ (0x41B * 8 + 7)
#define                                 SHFT15_bit          _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<SHFT2>
extern volatile __bit                   SHFT2               __at(0x20D2);	// @ (0x41A * 8 + 2)
#define                                 SHFT2_bit           _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<SHFT3>
extern volatile __bit                   SHFT3               __at(0x20D3);	// @ (0x41A * 8 + 3)
#define                                 SHFT3_bit           _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<SHFT4>
extern volatile __bit                   SHFT4               __at(0x20D4);	// @ (0x41A * 8 + 4)
#define                                 SHFT4_bit           _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<SHFT5>
extern volatile __bit                   SHFT5               __at(0x20D5);	// @ (0x41A * 8 + 5)
#define                                 SHFT5_bit           _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<SHFT6>
extern volatile __bit                   SHFT6               __at(0x20D6);	// @ (0x41A * 8 + 6)
#define                                 SHFT6_bit           _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<SHFT7>
extern volatile __bit                   SHFT7               __at(0x20D7);	// @ (0x41A * 8 + 7)
#define                                 SHFT7_bit           _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<SHFT8>
extern volatile __bit                   SHFT8               __at(0x20D8);	// @ (0x41B * 8 + 0)
#define                                 SHFT8_bit           _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<SHFT9>
extern volatile __bit                   SHFT9               __at(0x20D9);	// @ (0x41B * 8 + 1)
#define                                 SHFT9_bit           _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x20F1);	// @ (0x41E * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0xF9D8);	// @ (0x1F3B * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0xF9D9);	// @ (0x1F3B * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0xF9DA);	// @ (0x1F3B * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0xF9DB);	// @ (0x1F3B * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0xF9DC);	// @ (0x1F3B * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0xF9DD);	// @ (0x1F3B * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONA<SLRA6>
extern volatile __bit                   SLRA6               __at(0xF9DE);	// @ (0x1F3B * 8 + 6)
#define                                 SLRA6_bit           _BIT_ACCESS(SLRCONA,6)
// SLRCONA<SLRA7>
extern volatile __bit                   SLRA7               __at(0xF9DF);	// @ (0x1F3B * 8 + 7)
#define                                 SLRA7_bit           _BIT_ACCESS(SLRCONA,7)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0xFA30);	// @ (0x1F46 * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0xFA31);	// @ (0x1F46 * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0xFA32);	// @ (0x1F46 * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0xFA33);	// @ (0x1F46 * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0xFA34);	// @ (0x1F46 * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0xFA35);	// @ (0x1F46 * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0xFA36);	// @ (0x1F46 * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0xFA37);	// @ (0x1F46 * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0xFA88);	// @ (0x1F51 * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0xFA89);	// @ (0x1F51 * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0xFA8A);	// @ (0x1F51 * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0xFA8B);	// @ (0x1F51 * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0xFA8C);	// @ (0x1F51 * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0xFA8D);	// @ (0x1F51 * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0xFA8E);	// @ (0x1F51 * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0xFA8F);	// @ (0x1F51 * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// SSP2STAT<SMP2>
extern volatile __bit                   SMP2                __at(0xCCF);	// @ (0x199 * 8 + 7)
#define                                 SMP2_bit            _BIT_ACCESS(SSP2STAT,7)
// SMT1STAT<SMT1AS>
extern volatile __bit                   SMT1AS              __at(0x24D0);	// @ (0x49A * 8 + 0)
#define                                 SMT1AS_bit          _BIT_ACCESS(SMT1STAT,0)
// SMT1CON0<SMT1CPOL>
extern volatile __bit                   SMT1CPOL            __at(0x24C2);	// @ (0x498 * 8 + 2)
#define                                 SMT1CPOL_bit        _BIT_ACCESS(SMT1CON0,2)
// SMT1CPRL<SMT1CPR0>
extern volatile __bit                   SMT1CPR0            __at(0x2478);	// @ (0x48F * 8 + 0)
#define                                 SMT1CPR0_bit        _BIT_ACCESS(SMT1CPRL,0)
// SMT1CPRL<SMT1CPR1>
extern volatile __bit                   SMT1CPR1            __at(0x2479);	// @ (0x48F * 8 + 1)
#define                                 SMT1CPR1_bit        _BIT_ACCESS(SMT1CPRL,1)
// SMT1CPRH<SMT1CPR10>
extern volatile __bit                   SMT1CPR10           __at(0x2482);	// @ (0x490 * 8 + 2)
#define                                 SMT1CPR10_bit       _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<SMT1CPR11>
extern volatile __bit                   SMT1CPR11           __at(0x2483);	// @ (0x490 * 8 + 3)
#define                                 SMT1CPR11_bit       _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<SMT1CPR12>
extern volatile __bit                   SMT1CPR12           __at(0x2484);	// @ (0x490 * 8 + 4)
#define                                 SMT1CPR12_bit       _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<SMT1CPR13>
extern volatile __bit                   SMT1CPR13           __at(0x2485);	// @ (0x490 * 8 + 5)
#define                                 SMT1CPR13_bit       _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<SMT1CPR14>
extern volatile __bit                   SMT1CPR14           __at(0x2486);	// @ (0x490 * 8 + 6)
#define                                 SMT1CPR14_bit       _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<SMT1CPR15>
extern volatile __bit                   SMT1CPR15           __at(0x2487);	// @ (0x490 * 8 + 7)
#define                                 SMT1CPR15_bit       _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<SMT1CPR16>
extern volatile __bit                   SMT1CPR16           __at(0x2488);	// @ (0x491 * 8 + 0)
#define                                 SMT1CPR16_bit       _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<SMT1CPR17>
extern volatile __bit                   SMT1CPR17           __at(0x2489);	// @ (0x491 * 8 + 1)
#define                                 SMT1CPR17_bit       _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<SMT1CPR18>
extern volatile __bit                   SMT1CPR18           __at(0x248A);	// @ (0x491 * 8 + 2)
#define                                 SMT1CPR18_bit       _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<SMT1CPR19>
extern volatile __bit                   SMT1CPR19           __at(0x248B);	// @ (0x491 * 8 + 3)
#define                                 SMT1CPR19_bit       _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRL<SMT1CPR2>
extern volatile __bit                   SMT1CPR2            __at(0x247A);	// @ (0x48F * 8 + 2)
#define                                 SMT1CPR2_bit        _BIT_ACCESS(SMT1CPRL,2)
// SMT1CPRU<SMT1CPR20>
extern volatile __bit                   SMT1CPR20           __at(0x248C);	// @ (0x491 * 8 + 4)
#define                                 SMT1CPR20_bit       _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<SMT1CPR21>
extern volatile __bit                   SMT1CPR21           __at(0x248D);	// @ (0x491 * 8 + 5)
#define                                 SMT1CPR21_bit       _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<SMT1CPR22>
extern volatile __bit                   SMT1CPR22           __at(0x248E);	// @ (0x491 * 8 + 6)
#define                                 SMT1CPR22_bit       _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<SMT1CPR23>
extern volatile __bit                   SMT1CPR23           __at(0x248F);	// @ (0x491 * 8 + 7)
#define                                 SMT1CPR23_bit       _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRL<SMT1CPR3>
extern volatile __bit                   SMT1CPR3            __at(0x247B);	// @ (0x48F * 8 + 3)
#define                                 SMT1CPR3_bit        _BIT_ACCESS(SMT1CPRL,3)
// SMT1CPRL<SMT1CPR4>
extern volatile __bit                   SMT1CPR4            __at(0x247C);	// @ (0x48F * 8 + 4)
#define                                 SMT1CPR4_bit        _BIT_ACCESS(SMT1CPRL,4)
// SMT1CPRL<SMT1CPR5>
extern volatile __bit                   SMT1CPR5            __at(0x247D);	// @ (0x48F * 8 + 5)
#define                                 SMT1CPR5_bit        _BIT_ACCESS(SMT1CPRL,5)
// SMT1CPRL<SMT1CPR6>
extern volatile __bit                   SMT1CPR6            __at(0x247E);	// @ (0x48F * 8 + 6)
#define                                 SMT1CPR6_bit        _BIT_ACCESS(SMT1CPRL,6)
// SMT1CPRL<SMT1CPR7>
extern volatile __bit                   SMT1CPR7            __at(0x247F);	// @ (0x48F * 8 + 7)
#define                                 SMT1CPR7_bit        _BIT_ACCESS(SMT1CPRL,7)
// SMT1CPRH<SMT1CPR8>
extern volatile __bit                   SMT1CPR8            __at(0x2480);	// @ (0x490 * 8 + 0)
#define                                 SMT1CPR8_bit        _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<SMT1CPR9>
extern volatile __bit                   SMT1CPR9            __at(0x2481);	// @ (0x490 * 8 + 1)
#define                                 SMT1CPR9_bit        _BIT_ACCESS(SMT1CPRH,1)
// SMT1STAT<SMT1CPRUP>
extern volatile __bit                   SMT1CPRUP           __at(0x24D7);	// @ (0x49A * 8 + 7)
#define                                 SMT1CPRUP_bit       _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<SMT1CPW0>
extern volatile __bit                   SMT1CPW0            __at(0x2490);	// @ (0x492 * 8 + 0)
#define                                 SMT1CPW0_bit        _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<SMT1CPW1>
extern volatile __bit                   SMT1CPW1            __at(0x2491);	// @ (0x492 * 8 + 1)
#define                                 SMT1CPW1_bit        _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<SMT1CPW10>
extern volatile __bit                   SMT1CPW10           __at(0x249A);	// @ (0x493 * 8 + 2)
#define                                 SMT1CPW10_bit       _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<SMT1CPW11>
extern volatile __bit                   SMT1CPW11           __at(0x249B);	// @ (0x493 * 8 + 3)
#define                                 SMT1CPW11_bit       _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<SMT1CPW12>
extern volatile __bit                   SMT1CPW12           __at(0x249C);	// @ (0x493 * 8 + 4)
#define                                 SMT1CPW12_bit       _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<SMT1CPW13>
extern volatile __bit                   SMT1CPW13           __at(0x249D);	// @ (0x493 * 8 + 5)
#define                                 SMT1CPW13_bit       _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<SMT1CPW14>
extern volatile __bit                   SMT1CPW14           __at(0x249E);	// @ (0x493 * 8 + 6)
#define                                 SMT1CPW14_bit       _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<SMT1CPW15>
extern volatile __bit                   SMT1CPW15           __at(0x249F);	// @ (0x493 * 8 + 7)
#define                                 SMT1CPW15_bit       _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<SMT1CPW16>
extern volatile __bit                   SMT1CPW16           __at(0x24A0);	// @ (0x494 * 8 + 0)
#define                                 SMT1CPW16_bit       _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<SMT1CPW17>
extern volatile __bit                   SMT1CPW17           __at(0x24A1);	// @ (0x494 * 8 + 1)
#define                                 SMT1CPW17_bit       _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<SMT1CPW18>
extern volatile __bit                   SMT1CPW18           __at(0x24A2);	// @ (0x494 * 8 + 2)
#define                                 SMT1CPW18_bit       _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<SMT1CPW19>
extern volatile __bit                   SMT1CPW19           __at(0x24A3);	// @ (0x494 * 8 + 3)
#define                                 SMT1CPW19_bit       _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<SMT1CPW2>
extern volatile __bit                   SMT1CPW2            __at(0x2492);	// @ (0x492 * 8 + 2)
#define                                 SMT1CPW2_bit        _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<SMT1CPW20>
extern volatile __bit                   SMT1CPW20           __at(0x24A4);	// @ (0x494 * 8 + 4)
#define                                 SMT1CPW20_bit       _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<SMT1CPW21>
extern volatile __bit                   SMT1CPW21           __at(0x24A5);	// @ (0x494 * 8 + 5)
#define                                 SMT1CPW21_bit       _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<SMT1CPW22>
extern volatile __bit                   SMT1CPW22           __at(0x24A6);	// @ (0x494 * 8 + 6)
#define                                 SMT1CPW22_bit       _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<SMT1CPW23>
extern volatile __bit                   SMT1CPW23           __at(0x24A7);	// @ (0x494 * 8 + 7)
#define                                 SMT1CPW23_bit       _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<SMT1CPW3>
extern volatile __bit                   SMT1CPW3            __at(0x2493);	// @ (0x492 * 8 + 3)
#define                                 SMT1CPW3_bit        _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<SMT1CPW4>
extern volatile __bit                   SMT1CPW4            __at(0x2494);	// @ (0x492 * 8 + 4)
#define                                 SMT1CPW4_bit        _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<SMT1CPW5>
extern volatile __bit                   SMT1CPW5            __at(0x2495);	// @ (0x492 * 8 + 5)
#define                                 SMT1CPW5_bit        _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<SMT1CPW6>
extern volatile __bit                   SMT1CPW6            __at(0x2496);	// @ (0x492 * 8 + 6)
#define                                 SMT1CPW6_bit        _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<SMT1CPW7>
extern volatile __bit                   SMT1CPW7            __at(0x2497);	// @ (0x492 * 8 + 7)
#define                                 SMT1CPW7_bit        _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<SMT1CPW8>
extern volatile __bit                   SMT1CPW8            __at(0x2498);	// @ (0x493 * 8 + 0)
#define                                 SMT1CPW8_bit        _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<SMT1CPW9>
extern volatile __bit                   SMT1CPW9            __at(0x2499);	// @ (0x493 * 8 + 1)
#define                                 SMT1CPW9_bit        _BIT_ACCESS(SMT1CPWH,1)
// SMT1STAT<SMT1CPWUP>
extern volatile __bit                   SMT1CPWUP           __at(0x24D6);	// @ (0x49A * 8 + 6)
#define                                 SMT1CPWUP_bit       _BIT_ACCESS(SMT1STAT,6)
// SMT1CLK<SMT1CSEL0>
extern volatile __bit                   SMT1CSEL0           __at(0x24D8);	// @ (0x49B * 8 + 0)
#define                                 SMT1CSEL0_bit       _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<SMT1CSEL1>
extern volatile __bit                   SMT1CSEL1           __at(0x24D9);	// @ (0x49B * 8 + 1)
#define                                 SMT1CSEL1_bit       _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<SMT1CSEL2>
extern volatile __bit                   SMT1CSEL2           __at(0x24DA);	// @ (0x49B * 8 + 2)
#define                                 SMT1CSEL2_bit       _BIT_ACCESS(SMT1CLK,2)
// SMT1CON0<SMT1EN>
extern volatile __bit                   SMT1EN              __at(0x24C7);	// @ (0x498 * 8 + 7)
#define                                 SMT1EN_bit          _BIT_ACCESS(SMT1CON0,7)
// SMT1CON1<SMT1GO>
extern volatile __bit                   SMT1GO              __at(0x24CF);	// @ (0x499 * 8 + 7)
#define                                 SMT1GO_bit          _BIT_ACCESS(SMT1CON1,7)
// PIE8<SMT1IE>
extern volatile __bit                   SMT1IE              __at(0x38F0);	// @ (0x71E * 8 + 0)
#define                                 SMT1IE_bit          _BIT_ACCESS(PIE8,0)
// PIR8<SMT1IF>
extern volatile __bit                   SMT1IF              __at(0x38A0);	// @ (0x714 * 8 + 0)
#define                                 SMT1IF_bit          _BIT_ACCESS(PIR8,0)
// PMD5<SMT1MD>
extern volatile __bit                   SMT1MD              __at(0x3CDE);	// @ (0x79B * 8 + 6)
#define                                 SMT1MD_bit          _BIT_ACCESS(PMD5,6)
// SMT1PRL<SMT1PR0>
extern volatile __bit                   SMT1PR0             __at(0x24A8);	// @ (0x495 * 8 + 0)
#define                                 SMT1PR0_bit         _BIT_ACCESS(SMT1PRL,0)
// SMT1PRL<SMT1PR1>
extern volatile __bit                   SMT1PR1             __at(0x24A9);	// @ (0x495 * 8 + 1)
#define                                 SMT1PR1_bit         _BIT_ACCESS(SMT1PRL,1)
// SMT1PRH<SMT1PR10>
extern volatile __bit                   SMT1PR10            __at(0x24B2);	// @ (0x496 * 8 + 2)
#define                                 SMT1PR10_bit        _BIT_ACCESS(SMT1PRH,2)
// SMT1PRH<SMT1PR11>
extern volatile __bit                   SMT1PR11            __at(0x24B3);	// @ (0x496 * 8 + 3)
#define                                 SMT1PR11_bit        _BIT_ACCESS(SMT1PRH,3)
// SMT1PRH<SMT1PR12>
extern volatile __bit                   SMT1PR12            __at(0x24B4);	// @ (0x496 * 8 + 4)
#define                                 SMT1PR12_bit        _BIT_ACCESS(SMT1PRH,4)
// SMT1PRH<SMT1PR13>
extern volatile __bit                   SMT1PR13            __at(0x24B5);	// @ (0x496 * 8 + 5)
#define                                 SMT1PR13_bit        _BIT_ACCESS(SMT1PRH,5)
// SMT1PRH<SMT1PR14>
extern volatile __bit                   SMT1PR14            __at(0x24B6);	// @ (0x496 * 8 + 6)
#define                                 SMT1PR14_bit        _BIT_ACCESS(SMT1PRH,6)
// SMT1PRH<SMT1PR15>
extern volatile __bit                   SMT1PR15            __at(0x24B7);	// @ (0x496 * 8 + 7)
#define                                 SMT1PR15_bit        _BIT_ACCESS(SMT1PRH,7)
// SMT1PRU<SMT1PR16>
extern volatile __bit                   SMT1PR16            __at(0x24B8);	// @ (0x497 * 8 + 0)
#define                                 SMT1PR16_bit        _BIT_ACCESS(SMT1PRU,0)
// SMT1PRU<SMT1PR17>
extern volatile __bit                   SMT1PR17            __at(0x24B9);	// @ (0x497 * 8 + 1)
#define                                 SMT1PR17_bit        _BIT_ACCESS(SMT1PRU,1)
// SMT1PRU<SMT1PR18>
extern volatile __bit                   SMT1PR18            __at(0x24BA);	// @ (0x497 * 8 + 2)
#define                                 SMT1PR18_bit        _BIT_ACCESS(SMT1PRU,2)
// SMT1PRU<SMT1PR19>
extern volatile __bit                   SMT1PR19            __at(0x24BB);	// @ (0x497 * 8 + 3)
#define                                 SMT1PR19_bit        _BIT_ACCESS(SMT1PRU,3)
// SMT1PRL<SMT1PR2>
extern volatile __bit                   SMT1PR2             __at(0x24AA);	// @ (0x495 * 8 + 2)
#define                                 SMT1PR2_bit         _BIT_ACCESS(SMT1PRL,2)
// SMT1PRU<SMT1PR20>
extern volatile __bit                   SMT1PR20            __at(0x24BC);	// @ (0x497 * 8 + 4)
#define                                 SMT1PR20_bit        _BIT_ACCESS(SMT1PRU,4)
// SMT1PRU<SMT1PR21>
extern volatile __bit                   SMT1PR21            __at(0x24BD);	// @ (0x497 * 8 + 5)
#define                                 SMT1PR21_bit        _BIT_ACCESS(SMT1PRU,5)
// SMT1PRU<SMT1PR22>
extern volatile __bit                   SMT1PR22            __at(0x24BE);	// @ (0x497 * 8 + 6)
#define                                 SMT1PR22_bit        _BIT_ACCESS(SMT1PRU,6)
// SMT1PRU<SMT1PR23>
extern volatile __bit                   SMT1PR23            __at(0x24BF);	// @ (0x497 * 8 + 7)
#define                                 SMT1PR23_bit        _BIT_ACCESS(SMT1PRU,7)
// SMT1PRL<SMT1PR3>
extern volatile __bit                   SMT1PR3             __at(0x24AB);	// @ (0x495 * 8 + 3)
#define                                 SMT1PR3_bit         _BIT_ACCESS(SMT1PRL,3)
// SMT1PRL<SMT1PR4>
extern volatile __bit                   SMT1PR4             __at(0x24AC);	// @ (0x495 * 8 + 4)
#define                                 SMT1PR4_bit         _BIT_ACCESS(SMT1PRL,4)
// SMT1PRL<SMT1PR5>
extern volatile __bit                   SMT1PR5             __at(0x24AD);	// @ (0x495 * 8 + 5)
#define                                 SMT1PR5_bit         _BIT_ACCESS(SMT1PRL,5)
// SMT1PRL<SMT1PR6>
extern volatile __bit                   SMT1PR6             __at(0x24AE);	// @ (0x495 * 8 + 6)
#define                                 SMT1PR6_bit         _BIT_ACCESS(SMT1PRL,6)
// SMT1PRL<SMT1PR7>
extern volatile __bit                   SMT1PR7             __at(0x24AF);	// @ (0x495 * 8 + 7)
#define                                 SMT1PR7_bit         _BIT_ACCESS(SMT1PRL,7)
// SMT1PRH<SMT1PR8>
extern volatile __bit                   SMT1PR8             __at(0x24B0);	// @ (0x496 * 8 + 0)
#define                                 SMT1PR8_bit         _BIT_ACCESS(SMT1PRH,0)
// SMT1PRH<SMT1PR9>
extern volatile __bit                   SMT1PR9             __at(0x24B1);	// @ (0x496 * 8 + 1)
#define                                 SMT1PR9_bit         _BIT_ACCESS(SMT1PRH,1)
// PIE8<SMT1PRAIE>
extern volatile __bit                   SMT1PRAIE           __at(0x38F1);	// @ (0x71E * 8 + 1)
#define                                 SMT1PRAIE_bit       _BIT_ACCESS(PIE8,1)
// PIR8<SMT1PRAIF>
extern volatile __bit                   SMT1PRAIF           __at(0x38A1);	// @ (0x714 * 8 + 1)
#define                                 SMT1PRAIF_bit       _BIT_ACCESS(PIR8,1)
// SMT1CON0<SMT1PS0>
extern volatile __bit                   SMT1PS0             __at(0x24C0);	// @ (0x498 * 8 + 0)
#define                                 SMT1PS0_bit         _BIT_ACCESS(SMT1CON0,0)
// SMT1CON0<SMT1PS1>
extern volatile __bit                   SMT1PS1             __at(0x24C1);	// @ (0x498 * 8 + 1)
#define                                 SMT1PS1_bit         _BIT_ACCESS(SMT1CON0,1)
// PIE8<SMT1PWAIE>
extern volatile __bit                   SMT1PWAIE           __at(0x38F2);	// @ (0x71E * 8 + 2)
#define                                 SMT1PWAIE_bit       _BIT_ACCESS(PIE8,2)
// PIR8<SMT1PWAIF>
extern volatile __bit                   SMT1PWAIF           __at(0x38A2);	// @ (0x714 * 8 + 2)
#define                                 SMT1PWAIF_bit       _BIT_ACCESS(PIR8,2)
// SMT1CON1<SMT1REPEAT>
extern volatile __bit                   SMT1REPEAT          __at(0x24CE);	// @ (0x499 * 8 + 6)
#define                                 SMT1REPEAT_bit      _BIT_ACCESS(SMT1CON1,6)
// SMT1STAT<SMT1RESET>
extern volatile __bit                   SMT1RESET           __at(0x24D5);	// @ (0x49A * 8 + 5)
#define                                 SMT1RESET_bit       _BIT_ACCESS(SMT1STAT,5)
// SMT1STAT<SMT1RST>
extern volatile __bit                   SMT1RST             __at(0x24D5);	// @ (0x49A * 8 + 5)
#define                                 SMT1RST_bit         _BIT_ACCESS(SMT1STAT,5)
// SMT1CON0<SMT1SPOL>
extern volatile __bit                   SMT1SPOL            __at(0x24C3);	// @ (0x498 * 8 + 3)
#define                                 SMT1SPOL_bit        _BIT_ACCESS(SMT1CON0,3)
// SMT1SIG<SMT1SSEL0>
extern volatile __bit                   SMT1SSEL0           __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 SMT1SSEL0_bit       _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SMT1SSEL1>
extern volatile __bit                   SMT1SSEL1           __at(0x24E1);	// @ (0x49C * 8 + 1)
#define                                 SMT1SSEL1_bit       _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SMT1SSEL2>
extern volatile __bit                   SMT1SSEL2           __at(0x24E2);	// @ (0x49C * 8 + 2)
#define                                 SMT1SSEL2_bit       _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SMT1SSEL3>
extern volatile __bit                   SMT1SSEL3           __at(0x24E3);	// @ (0x49C * 8 + 3)
#define                                 SMT1SSEL3_bit       _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SMT1SSEL4>
extern volatile __bit                   SMT1SSEL4           __at(0x24E4);	// @ (0x49C * 8 + 4)
#define                                 SMT1SSEL4_bit       _BIT_ACCESS(SMT1SIG,4)
// SMT1CON0<SMT1STP>
extern volatile __bit                   SMT1STP             __at(0x24C5);	// @ (0x498 * 8 + 5)
#define                                 SMT1STP_bit         _BIT_ACCESS(SMT1CON0,5)
// SMT1TMRL<SMT1TMR0>
extern volatile __bit                   SMT1TMR0            __at(0x2460);	// @ (0x48C * 8 + 0)
#define                                 SMT1TMR0_bit        _BIT_ACCESS(SMT1TMRL,0)
// SMT1TMRL<SMT1TMR1>
extern volatile __bit                   SMT1TMR1            __at(0x2461);	// @ (0x48C * 8 + 1)
#define                                 SMT1TMR1_bit        _BIT_ACCESS(SMT1TMRL,1)
// SMT1TMRH<SMT1TMR10>
extern volatile __bit                   SMT1TMR10           __at(0x246A);	// @ (0x48D * 8 + 2)
#define                                 SMT1TMR10_bit       _BIT_ACCESS(SMT1TMRH,2)
// SMT1TMRH<SMT1TMR11>
extern volatile __bit                   SMT1TMR11           __at(0x246B);	// @ (0x48D * 8 + 3)
#define                                 SMT1TMR11_bit       _BIT_ACCESS(SMT1TMRH,3)
// SMT1TMRH<SMT1TMR12>
extern volatile __bit                   SMT1TMR12           __at(0x246C);	// @ (0x48D * 8 + 4)
#define                                 SMT1TMR12_bit       _BIT_ACCESS(SMT1TMRH,4)
// SMT1TMRH<SMT1TMR13>
extern volatile __bit                   SMT1TMR13           __at(0x246D);	// @ (0x48D * 8 + 5)
#define                                 SMT1TMR13_bit       _BIT_ACCESS(SMT1TMRH,5)
// SMT1TMRH<SMT1TMR14>
extern volatile __bit                   SMT1TMR14           __at(0x246E);	// @ (0x48D * 8 + 6)
#define                                 SMT1TMR14_bit       _BIT_ACCESS(SMT1TMRH,6)
// SMT1TMRH<SMT1TMR15>
extern volatile __bit                   SMT1TMR15           __at(0x246F);	// @ (0x48D * 8 + 7)
#define                                 SMT1TMR15_bit       _BIT_ACCESS(SMT1TMRH,7)
// SMT1TMRU<SMT1TMR16>
extern volatile __bit                   SMT1TMR16           __at(0x2470);	// @ (0x48E * 8 + 0)
#define                                 SMT1TMR16_bit       _BIT_ACCESS(SMT1TMRU,0)
// SMT1TMRU<SMT1TMR17>
extern volatile __bit                   SMT1TMR17           __at(0x2471);	// @ (0x48E * 8 + 1)
#define                                 SMT1TMR17_bit       _BIT_ACCESS(SMT1TMRU,1)
// SMT1TMRU<SMT1TMR18>
extern volatile __bit                   SMT1TMR18           __at(0x2472);	// @ (0x48E * 8 + 2)
#define                                 SMT1TMR18_bit       _BIT_ACCESS(SMT1TMRU,2)
// SMT1TMRU<SMT1TMR19>
extern volatile __bit                   SMT1TMR19           __at(0x2473);	// @ (0x48E * 8 + 3)
#define                                 SMT1TMR19_bit       _BIT_ACCESS(SMT1TMRU,3)
// SMT1TMRL<SMT1TMR2>
extern volatile __bit                   SMT1TMR2            __at(0x2462);	// @ (0x48C * 8 + 2)
#define                                 SMT1TMR2_bit        _BIT_ACCESS(SMT1TMRL,2)
// SMT1TMRU<SMT1TMR20>
extern volatile __bit                   SMT1TMR20           __at(0x2474);	// @ (0x48E * 8 + 4)
#define                                 SMT1TMR20_bit       _BIT_ACCESS(SMT1TMRU,4)
// SMT1TMRU<SMT1TMR21>
extern volatile __bit                   SMT1TMR21           __at(0x2475);	// @ (0x48E * 8 + 5)
#define                                 SMT1TMR21_bit       _BIT_ACCESS(SMT1TMRU,5)
// SMT1TMRU<SMT1TMR22>
extern volatile __bit                   SMT1TMR22           __at(0x2476);	// @ (0x48E * 8 + 6)
#define                                 SMT1TMR22_bit       _BIT_ACCESS(SMT1TMRU,6)
// SMT1TMRU<SMT1TMR23>
extern volatile __bit                   SMT1TMR23           __at(0x2477);	// @ (0x48E * 8 + 7)
#define                                 SMT1TMR23_bit       _BIT_ACCESS(SMT1TMRU,7)
// SMT1TMRL<SMT1TMR3>
extern volatile __bit                   SMT1TMR3            __at(0x2463);	// @ (0x48C * 8 + 3)
#define                                 SMT1TMR3_bit        _BIT_ACCESS(SMT1TMRL,3)
// SMT1TMRL<SMT1TMR4>
extern volatile __bit                   SMT1TMR4            __at(0x2464);	// @ (0x48C * 8 + 4)
#define                                 SMT1TMR4_bit        _BIT_ACCESS(SMT1TMRL,4)
// SMT1TMRL<SMT1TMR5>
extern volatile __bit                   SMT1TMR5            __at(0x2465);	// @ (0x48C * 8 + 5)
#define                                 SMT1TMR5_bit        _BIT_ACCESS(SMT1TMRL,5)
// SMT1TMRL<SMT1TMR6>
extern volatile __bit                   SMT1TMR6            __at(0x2466);	// @ (0x48C * 8 + 6)
#define                                 SMT1TMR6_bit        _BIT_ACCESS(SMT1TMRL,6)
// SMT1TMRL<SMT1TMR7>
extern volatile __bit                   SMT1TMR7            __at(0x2467);	// @ (0x48C * 8 + 7)
#define                                 SMT1TMR7_bit        _BIT_ACCESS(SMT1TMRL,7)
// SMT1TMRH<SMT1TMR8>
extern volatile __bit                   SMT1TMR8            __at(0x2468);	// @ (0x48D * 8 + 0)
#define                                 SMT1TMR8_bit        _BIT_ACCESS(SMT1TMRH,0)
// SMT1TMRH<SMT1TMR9>
extern volatile __bit                   SMT1TMR9            __at(0x2469);	// @ (0x48D * 8 + 1)
#define                                 SMT1TMR9_bit        _BIT_ACCESS(SMT1TMRH,1)
// SMT1STAT<SMT1TS>
extern volatile __bit                   SMT1TS              __at(0x24D2);	// @ (0x49A * 8 + 2)
#define                                 SMT1TS_bit          _BIT_ACCESS(SMT1STAT,2)
// SMT1CON0<SMT1WOL>
extern volatile __bit                   SMT1WOL             __at(0x24C4);	// @ (0x498 * 8 + 4)
#define                                 SMT1WOL_bit         _BIT_ACCESS(SMT1CON0,4)
// SMT1STAT<SMT1WS>
extern volatile __bit                   SMT1WS              __at(0x24D1);	// @ (0x49A * 8 + 1)
#define                                 SMT1WS_bit          _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<SMT1WSEL0>
extern volatile __bit                   SMT1WSEL0           __at(0x24E8);	// @ (0x49D * 8 + 0)
#define                                 SMT1WSEL0_bit       _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<SMT1WSEL1>
extern volatile __bit                   SMT1WSEL1           __at(0x24E9);	// @ (0x49D * 8 + 1)
#define                                 SMT1WSEL1_bit       _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<SMT1WSEL2>
extern volatile __bit                   SMT1WSEL2           __at(0x24EA);	// @ (0x49D * 8 + 2)
#define                                 SMT1WSEL2_bit       _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<SMT1WSEL3>
extern volatile __bit                   SMT1WSEL3           __at(0x24EB);	// @ (0x49D * 8 + 3)
#define                                 SMT1WSEL3_bit       _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<SMT1WSEL4>
extern volatile __bit                   SMT1WSEL4           __at(0x24EC);	// @ (0x49D * 8 + 4)
#define                                 SMT1WSEL4_bit       _BIT_ACCESS(SMT1WIN,4)
// SMT2STAT<SMT2AS>
extern volatile __bit                   SMT2AS              __at(0x28D0);	// @ (0x51A * 8 + 0)
#define                                 SMT2AS_bit          _BIT_ACCESS(SMT2STAT,0)
// SMT2CON0<SMT2CPOL>
extern volatile __bit                   SMT2CPOL            __at(0x28C2);	// @ (0x518 * 8 + 2)
#define                                 SMT2CPOL_bit        _BIT_ACCESS(SMT2CON0,2)
// SMT2CPRL<SMT2CPR0>
extern volatile __bit                   SMT2CPR0            __at(0x2878);	// @ (0x50F * 8 + 0)
#define                                 SMT2CPR0_bit        _BIT_ACCESS(SMT2CPRL,0)
// SMT2CPRL<SMT2CPR1>
extern volatile __bit                   SMT2CPR1            __at(0x2879);	// @ (0x50F * 8 + 1)
#define                                 SMT2CPR1_bit        _BIT_ACCESS(SMT2CPRL,1)
// SMT2CPRH<SMT2CPR10>
extern volatile __bit                   SMT2CPR10           __at(0x2882);	// @ (0x510 * 8 + 2)
#define                                 SMT2CPR10_bit       _BIT_ACCESS(SMT2CPRH,2)
// SMT2CPRH<SMT2CPR11>
extern volatile __bit                   SMT2CPR11           __at(0x2883);	// @ (0x510 * 8 + 3)
#define                                 SMT2CPR11_bit       _BIT_ACCESS(SMT2CPRH,3)
// SMT2CPRH<SMT2CPR12>
extern volatile __bit                   SMT2CPR12           __at(0x2884);	// @ (0x510 * 8 + 4)
#define                                 SMT2CPR12_bit       _BIT_ACCESS(SMT2CPRH,4)
// SMT2CPRH<SMT2CPR13>
extern volatile __bit                   SMT2CPR13           __at(0x2885);	// @ (0x510 * 8 + 5)
#define                                 SMT2CPR13_bit       _BIT_ACCESS(SMT2CPRH,5)
// SMT2CPRH<SMT2CPR14>
extern volatile __bit                   SMT2CPR14           __at(0x2886);	// @ (0x510 * 8 + 6)
#define                                 SMT2CPR14_bit       _BIT_ACCESS(SMT2CPRH,6)
// SMT2CPRH<SMT2CPR15>
extern volatile __bit                   SMT2CPR15           __at(0x2887);	// @ (0x510 * 8 + 7)
#define                                 SMT2CPR15_bit       _BIT_ACCESS(SMT2CPRH,7)
// SMT2CPRU<SMT2CPR16>
extern volatile __bit                   SMT2CPR16           __at(0x2888);	// @ (0x511 * 8 + 0)
#define                                 SMT2CPR16_bit       _BIT_ACCESS(SMT2CPRU,0)
// SMT2CPRU<SMT2CPR17>
extern volatile __bit                   SMT2CPR17           __at(0x2889);	// @ (0x511 * 8 + 1)
#define                                 SMT2CPR17_bit       _BIT_ACCESS(SMT2CPRU,1)
// SMT2CPRU<SMT2CPR18>
extern volatile __bit                   SMT2CPR18           __at(0x288A);	// @ (0x511 * 8 + 2)
#define                                 SMT2CPR18_bit       _BIT_ACCESS(SMT2CPRU,2)
// SMT2CPRU<SMT2CPR19>
extern volatile __bit                   SMT2CPR19           __at(0x288B);	// @ (0x511 * 8 + 3)
#define                                 SMT2CPR19_bit       _BIT_ACCESS(SMT2CPRU,3)
// SMT2CPRL<SMT2CPR2>
extern volatile __bit                   SMT2CPR2            __at(0x287A);	// @ (0x50F * 8 + 2)
#define                                 SMT2CPR2_bit        _BIT_ACCESS(SMT2CPRL,2)
// SMT2CPRU<SMT2CPR20>
extern volatile __bit                   SMT2CPR20           __at(0x288C);	// @ (0x511 * 8 + 4)
#define                                 SMT2CPR20_bit       _BIT_ACCESS(SMT2CPRU,4)
// SMT2CPRU<SMT2CPR21>
extern volatile __bit                   SMT2CPR21           __at(0x288D);	// @ (0x511 * 8 + 5)
#define                                 SMT2CPR21_bit       _BIT_ACCESS(SMT2CPRU,5)
// SMT2CPRU<SMT2CPR22>
extern volatile __bit                   SMT2CPR22           __at(0x288E);	// @ (0x511 * 8 + 6)
#define                                 SMT2CPR22_bit       _BIT_ACCESS(SMT2CPRU,6)
// SMT2CPRU<SMT2CPR23>
extern volatile __bit                   SMT2CPR23           __at(0x288F);	// @ (0x511 * 8 + 7)
#define                                 SMT2CPR23_bit       _BIT_ACCESS(SMT2CPRU,7)
// SMT2CPRL<SMT2CPR3>
extern volatile __bit                   SMT2CPR3            __at(0x287B);	// @ (0x50F * 8 + 3)
#define                                 SMT2CPR3_bit        _BIT_ACCESS(SMT2CPRL,3)
// SMT2CPRL<SMT2CPR4>
extern volatile __bit                   SMT2CPR4            __at(0x287C);	// @ (0x50F * 8 + 4)
#define                                 SMT2CPR4_bit        _BIT_ACCESS(SMT2CPRL,4)
// SMT2CPRL<SMT2CPR5>
extern volatile __bit                   SMT2CPR5            __at(0x287D);	// @ (0x50F * 8 + 5)
#define                                 SMT2CPR5_bit        _BIT_ACCESS(SMT2CPRL,5)
// SMT2CPRL<SMT2CPR6>
extern volatile __bit                   SMT2CPR6            __at(0x287E);	// @ (0x50F * 8 + 6)
#define                                 SMT2CPR6_bit        _BIT_ACCESS(SMT2CPRL,6)
// SMT2CPRL<SMT2CPR7>
extern volatile __bit                   SMT2CPR7            __at(0x287F);	// @ (0x50F * 8 + 7)
#define                                 SMT2CPR7_bit        _BIT_ACCESS(SMT2CPRL,7)
// SMT2CPRH<SMT2CPR8>
extern volatile __bit                   SMT2CPR8            __at(0x2880);	// @ (0x510 * 8 + 0)
#define                                 SMT2CPR8_bit        _BIT_ACCESS(SMT2CPRH,0)
// SMT2CPRH<SMT2CPR9>
extern volatile __bit                   SMT2CPR9            __at(0x2881);	// @ (0x510 * 8 + 1)
#define                                 SMT2CPR9_bit        _BIT_ACCESS(SMT2CPRH,1)
// SMT2STAT<SMT2CPRUP>
extern volatile __bit                   SMT2CPRUP           __at(0x28D7);	// @ (0x51A * 8 + 7)
#define                                 SMT2CPRUP_bit       _BIT_ACCESS(SMT2STAT,7)
// SMT2CPWL<SMT2CPW0>
extern volatile __bit                   SMT2CPW0            __at(0x2890);	// @ (0x512 * 8 + 0)
#define                                 SMT2CPW0_bit        _BIT_ACCESS(SMT2CPWL,0)
// SMT2CPWL<SMT2CPW1>
extern volatile __bit                   SMT2CPW1            __at(0x2891);	// @ (0x512 * 8 + 1)
#define                                 SMT2CPW1_bit        _BIT_ACCESS(SMT2CPWL,1)
// SMT2CPWH<SMT2CPW10>
extern volatile __bit                   SMT2CPW10           __at(0x289A);	// @ (0x513 * 8 + 2)
#define                                 SMT2CPW10_bit       _BIT_ACCESS(SMT2CPWH,2)
// SMT2CPWH<SMT2CPW11>
extern volatile __bit                   SMT2CPW11           __at(0x289B);	// @ (0x513 * 8 + 3)
#define                                 SMT2CPW11_bit       _BIT_ACCESS(SMT2CPWH,3)
// SMT2CPWH<SMT2CPW12>
extern volatile __bit                   SMT2CPW12           __at(0x289C);	// @ (0x513 * 8 + 4)
#define                                 SMT2CPW12_bit       _BIT_ACCESS(SMT2CPWH,4)
// SMT2CPWH<SMT2CPW13>
extern volatile __bit                   SMT2CPW13           __at(0x289D);	// @ (0x513 * 8 + 5)
#define                                 SMT2CPW13_bit       _BIT_ACCESS(SMT2CPWH,5)
// SMT2CPWH<SMT2CPW14>
extern volatile __bit                   SMT2CPW14           __at(0x289E);	// @ (0x513 * 8 + 6)
#define                                 SMT2CPW14_bit       _BIT_ACCESS(SMT2CPWH,6)
// SMT2CPWH<SMT2CPW15>
extern volatile __bit                   SMT2CPW15           __at(0x289F);	// @ (0x513 * 8 + 7)
#define                                 SMT2CPW15_bit       _BIT_ACCESS(SMT2CPWH,7)
// SMT2CPWU<SMT2CPW16>
extern volatile __bit                   SMT2CPW16           __at(0x28A0);	// @ (0x514 * 8 + 0)
#define                                 SMT2CPW16_bit       _BIT_ACCESS(SMT2CPWU,0)
// SMT2CPWU<SMT2CPW17>
extern volatile __bit                   SMT2CPW17           __at(0x28A1);	// @ (0x514 * 8 + 1)
#define                                 SMT2CPW17_bit       _BIT_ACCESS(SMT2CPWU,1)
// SMT2CPWU<SMT2CPW18>
extern volatile __bit                   SMT2CPW18           __at(0x28A2);	// @ (0x514 * 8 + 2)
#define                                 SMT2CPW18_bit       _BIT_ACCESS(SMT2CPWU,2)
// SMT2CPWU<SMT2CPW19>
extern volatile __bit                   SMT2CPW19           __at(0x28A3);	// @ (0x514 * 8 + 3)
#define                                 SMT2CPW19_bit       _BIT_ACCESS(SMT2CPWU,3)
// SMT2CPWL<SMT2CPW2>
extern volatile __bit                   SMT2CPW2            __at(0x2892);	// @ (0x512 * 8 + 2)
#define                                 SMT2CPW2_bit        _BIT_ACCESS(SMT2CPWL,2)
// SMT2CPWU<SMT2CPW20>
extern volatile __bit                   SMT2CPW20           __at(0x28A4);	// @ (0x514 * 8 + 4)
#define                                 SMT2CPW20_bit       _BIT_ACCESS(SMT2CPWU,4)
// SMT2CPWU<SMT2CPW21>
extern volatile __bit                   SMT2CPW21           __at(0x28A5);	// @ (0x514 * 8 + 5)
#define                                 SMT2CPW21_bit       _BIT_ACCESS(SMT2CPWU,5)
// SMT2CPWU<SMT2CPW22>
extern volatile __bit                   SMT2CPW22           __at(0x28A6);	// @ (0x514 * 8 + 6)
#define                                 SMT2CPW22_bit       _BIT_ACCESS(SMT2CPWU,6)
// SMT2CPWU<SMT2CPW23>
extern volatile __bit                   SMT2CPW23           __at(0x28A7);	// @ (0x514 * 8 + 7)
#define                                 SMT2CPW23_bit       _BIT_ACCESS(SMT2CPWU,7)
// SMT2CPWL<SMT2CPW3>
extern volatile __bit                   SMT2CPW3            __at(0x2893);	// @ (0x512 * 8 + 3)
#define                                 SMT2CPW3_bit        _BIT_ACCESS(SMT2CPWL,3)
// SMT2CPWL<SMT2CPW4>
extern volatile __bit                   SMT2CPW4            __at(0x2894);	// @ (0x512 * 8 + 4)
#define                                 SMT2CPW4_bit        _BIT_ACCESS(SMT2CPWL,4)
// SMT2CPWL<SMT2CPW5>
extern volatile __bit                   SMT2CPW5            __at(0x2895);	// @ (0x512 * 8 + 5)
#define                                 SMT2CPW5_bit        _BIT_ACCESS(SMT2CPWL,5)
// SMT2CPWL<SMT2CPW6>
extern volatile __bit                   SMT2CPW6            __at(0x2896);	// @ (0x512 * 8 + 6)
#define                                 SMT2CPW6_bit        _BIT_ACCESS(SMT2CPWL,6)
// SMT2CPWL<SMT2CPW7>
extern volatile __bit                   SMT2CPW7            __at(0x2897);	// @ (0x512 * 8 + 7)
#define                                 SMT2CPW7_bit        _BIT_ACCESS(SMT2CPWL,7)
// SMT2CPWH<SMT2CPW8>
extern volatile __bit                   SMT2CPW8            __at(0x2898);	// @ (0x513 * 8 + 0)
#define                                 SMT2CPW8_bit        _BIT_ACCESS(SMT2CPWH,0)
// SMT2CPWH<SMT2CPW9>
extern volatile __bit                   SMT2CPW9            __at(0x2899);	// @ (0x513 * 8 + 1)
#define                                 SMT2CPW9_bit        _BIT_ACCESS(SMT2CPWH,1)
// SMT2STAT<SMT2CPWUP>
extern volatile __bit                   SMT2CPWUP           __at(0x28D6);	// @ (0x51A * 8 + 6)
#define                                 SMT2CPWUP_bit       _BIT_ACCESS(SMT2STAT,6)
// SMT2CLK<SMT2CSEL0>
extern volatile __bit                   SMT2CSEL0           __at(0x28D8);	// @ (0x51B * 8 + 0)
#define                                 SMT2CSEL0_bit       _BIT_ACCESS(SMT2CLK,0)
// SMT2CLK<SMT2CSEL1>
extern volatile __bit                   SMT2CSEL1           __at(0x28D9);	// @ (0x51B * 8 + 1)
#define                                 SMT2CSEL1_bit       _BIT_ACCESS(SMT2CLK,1)
// SMT2CLK<SMT2CSEL2>
extern volatile __bit                   SMT2CSEL2           __at(0x28DA);	// @ (0x51B * 8 + 2)
#define                                 SMT2CSEL2_bit       _BIT_ACCESS(SMT2CLK,2)
// SMT2CON0<SMT2EN>
extern volatile __bit                   SMT2EN              __at(0x28C7);	// @ (0x518 * 8 + 7)
#define                                 SMT2EN_bit          _BIT_ACCESS(SMT2CON0,7)
// SMT2CON1<SMT2GO>
extern volatile __bit                   SMT2GO              __at(0x28CF);	// @ (0x519 * 8 + 7)
#define                                 SMT2GO_bit          _BIT_ACCESS(SMT2CON1,7)
// PIE8<SMT2IE>
extern volatile __bit                   SMT2IE              __at(0x38F3);	// @ (0x71E * 8 + 3)
#define                                 SMT2IE_bit          _BIT_ACCESS(PIE8,3)
// PIR8<SMT2IF>
extern volatile __bit                   SMT2IF              __at(0x38A3);	// @ (0x714 * 8 + 3)
#define                                 SMT2IF_bit          _BIT_ACCESS(PIR8,3)
// PMD5<SMT2MD>
extern volatile __bit                   SMT2MD              __at(0x3CDF);	// @ (0x79B * 8 + 7)
#define                                 SMT2MD_bit          _BIT_ACCESS(PMD5,7)
// SMT2PRL<SMT2PR0>
extern volatile __bit                   SMT2PR0             __at(0x28A8);	// @ (0x515 * 8 + 0)
#define                                 SMT2PR0_bit         _BIT_ACCESS(SMT2PRL,0)
// SMT2PRL<SMT2PR1>
extern volatile __bit                   SMT2PR1             __at(0x28A9);	// @ (0x515 * 8 + 1)
#define                                 SMT2PR1_bit         _BIT_ACCESS(SMT2PRL,1)
// SMT2PRH<SMT2PR10>
extern volatile __bit                   SMT2PR10            __at(0x28B2);	// @ (0x516 * 8 + 2)
#define                                 SMT2PR10_bit        _BIT_ACCESS(SMT2PRH,2)
// SMT2PRH<SMT2PR11>
extern volatile __bit                   SMT2PR11            __at(0x28B3);	// @ (0x516 * 8 + 3)
#define                                 SMT2PR11_bit        _BIT_ACCESS(SMT2PRH,3)
// SMT2PRH<SMT2PR12>
extern volatile __bit                   SMT2PR12            __at(0x28B4);	// @ (0x516 * 8 + 4)
#define                                 SMT2PR12_bit        _BIT_ACCESS(SMT2PRH,4)
// SMT2PRH<SMT2PR13>
extern volatile __bit                   SMT2PR13            __at(0x28B5);	// @ (0x516 * 8 + 5)
#define                                 SMT2PR13_bit        _BIT_ACCESS(SMT2PRH,5)
// SMT2PRH<SMT2PR14>
extern volatile __bit                   SMT2PR14            __at(0x28B6);	// @ (0x516 * 8 + 6)
#define                                 SMT2PR14_bit        _BIT_ACCESS(SMT2PRH,6)
// SMT2PRH<SMT2PR15>
extern volatile __bit                   SMT2PR15            __at(0x28B7);	// @ (0x516 * 8 + 7)
#define                                 SMT2PR15_bit        _BIT_ACCESS(SMT2PRH,7)
// SMT2PRU<SMT2PR16>
extern volatile __bit                   SMT2PR16            __at(0x28B8);	// @ (0x517 * 8 + 0)
#define                                 SMT2PR16_bit        _BIT_ACCESS(SMT2PRU,0)
// SMT2PRU<SMT2PR17>
extern volatile __bit                   SMT2PR17            __at(0x28B9);	// @ (0x517 * 8 + 1)
#define                                 SMT2PR17_bit        _BIT_ACCESS(SMT2PRU,1)
// SMT2PRU<SMT2PR18>
extern volatile __bit                   SMT2PR18            __at(0x28BA);	// @ (0x517 * 8 + 2)
#define                                 SMT2PR18_bit        _BIT_ACCESS(SMT2PRU,2)
// SMT2PRU<SMT2PR19>
extern volatile __bit                   SMT2PR19            __at(0x28BB);	// @ (0x517 * 8 + 3)
#define                                 SMT2PR19_bit        _BIT_ACCESS(SMT2PRU,3)
// SMT2PRL<SMT2PR2>
extern volatile __bit                   SMT2PR2             __at(0x28AA);	// @ (0x515 * 8 + 2)
#define                                 SMT2PR2_bit         _BIT_ACCESS(SMT2PRL,2)
// SMT2PRU<SMT2PR20>
extern volatile __bit                   SMT2PR20            __at(0x28BC);	// @ (0x517 * 8 + 4)
#define                                 SMT2PR20_bit        _BIT_ACCESS(SMT2PRU,4)
// SMT2PRU<SMT2PR21>
extern volatile __bit                   SMT2PR21            __at(0x28BD);	// @ (0x517 * 8 + 5)
#define                                 SMT2PR21_bit        _BIT_ACCESS(SMT2PRU,5)
// SMT2PRU<SMT2PR22>
extern volatile __bit                   SMT2PR22            __at(0x28BE);	// @ (0x517 * 8 + 6)
#define                                 SMT2PR22_bit        _BIT_ACCESS(SMT2PRU,6)
// SMT2PRU<SMT2PR23>
extern volatile __bit                   SMT2PR23            __at(0x28BF);	// @ (0x517 * 8 + 7)
#define                                 SMT2PR23_bit        _BIT_ACCESS(SMT2PRU,7)
// SMT2PRL<SMT2PR3>
extern volatile __bit                   SMT2PR3             __at(0x28AB);	// @ (0x515 * 8 + 3)
#define                                 SMT2PR3_bit         _BIT_ACCESS(SMT2PRL,3)
// SMT2PRL<SMT2PR4>
extern volatile __bit                   SMT2PR4             __at(0x28AC);	// @ (0x515 * 8 + 4)
#define                                 SMT2PR4_bit         _BIT_ACCESS(SMT2PRL,4)
// SMT2PRL<SMT2PR5>
extern volatile __bit                   SMT2PR5             __at(0x28AD);	// @ (0x515 * 8 + 5)
#define                                 SMT2PR5_bit         _BIT_ACCESS(SMT2PRL,5)
// SMT2PRL<SMT2PR6>
extern volatile __bit                   SMT2PR6             __at(0x28AE);	// @ (0x515 * 8 + 6)
#define                                 SMT2PR6_bit         _BIT_ACCESS(SMT2PRL,6)
// SMT2PRL<SMT2PR7>
extern volatile __bit                   SMT2PR7             __at(0x28AF);	// @ (0x515 * 8 + 7)
#define                                 SMT2PR7_bit         _BIT_ACCESS(SMT2PRL,7)
// SMT2PRH<SMT2PR8>
extern volatile __bit                   SMT2PR8             __at(0x28B0);	// @ (0x516 * 8 + 0)
#define                                 SMT2PR8_bit         _BIT_ACCESS(SMT2PRH,0)
// SMT2PRH<SMT2PR9>
extern volatile __bit                   SMT2PR9             __at(0x28B1);	// @ (0x516 * 8 + 1)
#define                                 SMT2PR9_bit         _BIT_ACCESS(SMT2PRH,1)
// PIE8<SMT2PRAIE>
extern volatile __bit                   SMT2PRAIE           __at(0x38F4);	// @ (0x71E * 8 + 4)
#define                                 SMT2PRAIE_bit       _BIT_ACCESS(PIE8,4)
// PIR8<SMT2PRAIF>
extern volatile __bit                   SMT2PRAIF           __at(0x38A4);	// @ (0x714 * 8 + 4)
#define                                 SMT2PRAIF_bit       _BIT_ACCESS(PIR8,4)
// SMT2CON0<SMT2PS0>
extern volatile __bit                   SMT2PS0             __at(0x28C0);	// @ (0x518 * 8 + 0)
#define                                 SMT2PS0_bit         _BIT_ACCESS(SMT2CON0,0)
// SMT2CON0<SMT2PS1>
extern volatile __bit                   SMT2PS1             __at(0x28C1);	// @ (0x518 * 8 + 1)
#define                                 SMT2PS1_bit         _BIT_ACCESS(SMT2CON0,1)
// PIE8<SMT2PWAIE>
extern volatile __bit                   SMT2PWAIE           __at(0x38F5);	// @ (0x71E * 8 + 5)
#define                                 SMT2PWAIE_bit       _BIT_ACCESS(PIE8,5)
// PIR8<SMT2PWAIF>
extern volatile __bit                   SMT2PWAIF           __at(0x38A5);	// @ (0x714 * 8 + 5)
#define                                 SMT2PWAIF_bit       _BIT_ACCESS(PIR8,5)
// SMT2CON1<SMT2REPEAT>
extern volatile __bit                   SMT2REPEAT          __at(0x28CE);	// @ (0x519 * 8 + 6)
#define                                 SMT2REPEAT_bit      _BIT_ACCESS(SMT2CON1,6)
// SMT2STAT<SMT2RESET>
extern volatile __bit                   SMT2RESET           __at(0x28D5);	// @ (0x51A * 8 + 5)
#define                                 SMT2RESET_bit       _BIT_ACCESS(SMT2STAT,5)
// SMT2STAT<SMT2RST>
extern volatile __bit                   SMT2RST             __at(0x28D5);	// @ (0x51A * 8 + 5)
#define                                 SMT2RST_bit         _BIT_ACCESS(SMT2STAT,5)
// SMT2CON0<SMT2SPOL>
extern volatile __bit                   SMT2SPOL            __at(0x28C3);	// @ (0x518 * 8 + 3)
#define                                 SMT2SPOL_bit        _BIT_ACCESS(SMT2CON0,3)
// SMT2SIG<SMT2SSEL0>
extern volatile __bit                   SMT2SSEL0           __at(0x28E0);	// @ (0x51C * 8 + 0)
#define                                 SMT2SSEL0_bit       _BIT_ACCESS(SMT2SIG,0)
// SMT2SIG<SMT2SSEL1>
extern volatile __bit                   SMT2SSEL1           __at(0x28E1);	// @ (0x51C * 8 + 1)
#define                                 SMT2SSEL1_bit       _BIT_ACCESS(SMT2SIG,1)
// SMT2SIG<SMT2SSEL2>
extern volatile __bit                   SMT2SSEL2           __at(0x28E2);	// @ (0x51C * 8 + 2)
#define                                 SMT2SSEL2_bit       _BIT_ACCESS(SMT2SIG,2)
// SMT2SIG<SMT2SSEL3>
extern volatile __bit                   SMT2SSEL3           __at(0x28E3);	// @ (0x51C * 8 + 3)
#define                                 SMT2SSEL3_bit       _BIT_ACCESS(SMT2SIG,3)
// SMT2SIG<SMT2SSEL4>
extern volatile __bit                   SMT2SSEL4           __at(0x28E4);	// @ (0x51C * 8 + 4)
#define                                 SMT2SSEL4_bit       _BIT_ACCESS(SMT2SIG,4)
// SMT2CON0<SMT2STP>
extern volatile __bit                   SMT2STP             __at(0x28C5);	// @ (0x518 * 8 + 5)
#define                                 SMT2STP_bit         _BIT_ACCESS(SMT2CON0,5)
// SMT2TMRL<SMT2TMR0>
extern volatile __bit                   SMT2TMR0            __at(0x2860);	// @ (0x50C * 8 + 0)
#define                                 SMT2TMR0_bit        _BIT_ACCESS(SMT2TMRL,0)
// SMT2TMRL<SMT2TMR1>
extern volatile __bit                   SMT2TMR1            __at(0x2861);	// @ (0x50C * 8 + 1)
#define                                 SMT2TMR1_bit        _BIT_ACCESS(SMT2TMRL,1)
// SMT2TMRH<SMT2TMR10>
extern volatile __bit                   SMT2TMR10           __at(0x286A);	// @ (0x50D * 8 + 2)
#define                                 SMT2TMR10_bit       _BIT_ACCESS(SMT2TMRH,2)
// SMT2TMRH<SMT2TMR11>
extern volatile __bit                   SMT2TMR11           __at(0x286B);	// @ (0x50D * 8 + 3)
#define                                 SMT2TMR11_bit       _BIT_ACCESS(SMT2TMRH,3)
// SMT2TMRH<SMT2TMR12>
extern volatile __bit                   SMT2TMR12           __at(0x286C);	// @ (0x50D * 8 + 4)
#define                                 SMT2TMR12_bit       _BIT_ACCESS(SMT2TMRH,4)
// SMT2TMRH<SMT2TMR13>
extern volatile __bit                   SMT2TMR13           __at(0x286D);	// @ (0x50D * 8 + 5)
#define                                 SMT2TMR13_bit       _BIT_ACCESS(SMT2TMRH,5)
// SMT2TMRH<SMT2TMR14>
extern volatile __bit                   SMT2TMR14           __at(0x286E);	// @ (0x50D * 8 + 6)
#define                                 SMT2TMR14_bit       _BIT_ACCESS(SMT2TMRH,6)
// SMT2TMRH<SMT2TMR15>
extern volatile __bit                   SMT2TMR15           __at(0x286F);	// @ (0x50D * 8 + 7)
#define                                 SMT2TMR15_bit       _BIT_ACCESS(SMT2TMRH,7)
// SMT2TMRU<SMT2TMR16>
extern volatile __bit                   SMT2TMR16           __at(0x2870);	// @ (0x50E * 8 + 0)
#define                                 SMT2TMR16_bit       _BIT_ACCESS(SMT2TMRU,0)
// SMT2TMRU<SMT2TMR17>
extern volatile __bit                   SMT2TMR17           __at(0x2871);	// @ (0x50E * 8 + 1)
#define                                 SMT2TMR17_bit       _BIT_ACCESS(SMT2TMRU,1)
// SMT2TMRU<SMT2TMR18>
extern volatile __bit                   SMT2TMR18           __at(0x2872);	// @ (0x50E * 8 + 2)
#define                                 SMT2TMR18_bit       _BIT_ACCESS(SMT2TMRU,2)
// SMT2TMRU<SMT2TMR19>
extern volatile __bit                   SMT2TMR19           __at(0x2873);	// @ (0x50E * 8 + 3)
#define                                 SMT2TMR19_bit       _BIT_ACCESS(SMT2TMRU,3)
// SMT2TMRL<SMT2TMR2>
extern volatile __bit                   SMT2TMR2            __at(0x2862);	// @ (0x50C * 8 + 2)
#define                                 SMT2TMR2_bit        _BIT_ACCESS(SMT2TMRL,2)
// SMT2TMRU<SMT2TMR20>
extern volatile __bit                   SMT2TMR20           __at(0x2874);	// @ (0x50E * 8 + 4)
#define                                 SMT2TMR20_bit       _BIT_ACCESS(SMT2TMRU,4)
// SMT2TMRU<SMT2TMR21>
extern volatile __bit                   SMT2TMR21           __at(0x2875);	// @ (0x50E * 8 + 5)
#define                                 SMT2TMR21_bit       _BIT_ACCESS(SMT2TMRU,5)
// SMT2TMRU<SMT2TMR22>
extern volatile __bit                   SMT2TMR22           __at(0x2876);	// @ (0x50E * 8 + 6)
#define                                 SMT2TMR22_bit       _BIT_ACCESS(SMT2TMRU,6)
// SMT2TMRU<SMT2TMR23>
extern volatile __bit                   SMT2TMR23           __at(0x2877);	// @ (0x50E * 8 + 7)
#define                                 SMT2TMR23_bit       _BIT_ACCESS(SMT2TMRU,7)
// SMT2TMRL<SMT2TMR3>
extern volatile __bit                   SMT2TMR3            __at(0x2863);	// @ (0x50C * 8 + 3)
#define                                 SMT2TMR3_bit        _BIT_ACCESS(SMT2TMRL,3)
// SMT2TMRL<SMT2TMR4>
extern volatile __bit                   SMT2TMR4            __at(0x2864);	// @ (0x50C * 8 + 4)
#define                                 SMT2TMR4_bit        _BIT_ACCESS(SMT2TMRL,4)
// SMT2TMRL<SMT2TMR5>
extern volatile __bit                   SMT2TMR5            __at(0x2865);	// @ (0x50C * 8 + 5)
#define                                 SMT2TMR5_bit        _BIT_ACCESS(SMT2TMRL,5)
// SMT2TMRL<SMT2TMR6>
extern volatile __bit                   SMT2TMR6            __at(0x2866);	// @ (0x50C * 8 + 6)
#define                                 SMT2TMR6_bit        _BIT_ACCESS(SMT2TMRL,6)
// SMT2TMRL<SMT2TMR7>
extern volatile __bit                   SMT2TMR7            __at(0x2867);	// @ (0x50C * 8 + 7)
#define                                 SMT2TMR7_bit        _BIT_ACCESS(SMT2TMRL,7)
// SMT2TMRH<SMT2TMR8>
extern volatile __bit                   SMT2TMR8            __at(0x2868);	// @ (0x50D * 8 + 0)
#define                                 SMT2TMR8_bit        _BIT_ACCESS(SMT2TMRH,0)
// SMT2TMRH<SMT2TMR9>
extern volatile __bit                   SMT2TMR9            __at(0x2869);	// @ (0x50D * 8 + 1)
#define                                 SMT2TMR9_bit        _BIT_ACCESS(SMT2TMRH,1)
// SMT2STAT<SMT2TS>
extern volatile __bit                   SMT2TS              __at(0x28D2);	// @ (0x51A * 8 + 2)
#define                                 SMT2TS_bit          _BIT_ACCESS(SMT2STAT,2)
// SMT2CON0<SMT2WOL>
extern volatile __bit                   SMT2WOL             __at(0x28C4);	// @ (0x518 * 8 + 4)
#define                                 SMT2WOL_bit         _BIT_ACCESS(SMT2CON0,4)
// SMT2STAT<SMT2WS>
extern volatile __bit                   SMT2WS              __at(0x28D1);	// @ (0x51A * 8 + 1)
#define                                 SMT2WS_bit          _BIT_ACCESS(SMT2STAT,1)
// SMT2WIN<SMT2WSEL0>
extern volatile __bit                   SMT2WSEL0           __at(0x28E8);	// @ (0x51D * 8 + 0)
#define                                 SMT2WSEL0_bit       _BIT_ACCESS(SMT2WIN,0)
// SMT2WIN<SMT2WSEL1>
extern volatile __bit                   SMT2WSEL1           __at(0x28E9);	// @ (0x51D * 8 + 1)
#define                                 SMT2WSEL1_bit       _BIT_ACCESS(SMT2WIN,1)
// SMT2WIN<SMT2WSEL2>
extern volatile __bit                   SMT2WSEL2           __at(0x28EA);	// @ (0x51D * 8 + 2)
#define                                 SMT2WSEL2_bit       _BIT_ACCESS(SMT2WIN,2)
// SMT2WIN<SMT2WSEL3>
extern volatile __bit                   SMT2WSEL3           __at(0x28EB);	// @ (0x51D * 8 + 3)
#define                                 SMT2WSEL3_bit       _BIT_ACCESS(SMT2WIN,3)
// SMT2WIN<SMT2WSEL4>
extern volatile __bit                   SMT2WSEL4           __at(0x28EC);	// @ (0x51D * 8 + 4)
#define                                 SMT2WSEL4_bit       _BIT_ACCESS(SMT2WIN,4)
// SMT1SIGPPS<SMU1SIGPPS0>
extern volatile __bit                   SMU1SIGPPS0         __at(0xF550);	// @ (0x1EAA * 8 + 0)
#define                                 SMU1SIGPPS0_bit     _BIT_ACCESS(SMT1SIGPPS,0)
// SMT1SIGPPS<SMU1SIGPPS1>
extern volatile __bit                   SMU1SIGPPS1         __at(0xF551);	// @ (0x1EAA * 8 + 1)
#define                                 SMU1SIGPPS1_bit     _BIT_ACCESS(SMT1SIGPPS,1)
// SMT1SIGPPS<SMU1SIGPPS2>
extern volatile __bit                   SMU1SIGPPS2         __at(0xF552);	// @ (0x1EAA * 8 + 2)
#define                                 SMU1SIGPPS2_bit     _BIT_ACCESS(SMT1SIGPPS,2)
// SMT1SIGPPS<SMU1SIGPPS3>
extern volatile __bit                   SMU1SIGPPS3         __at(0xF553);	// @ (0x1EAA * 8 + 3)
#define                                 SMU1SIGPPS3_bit     _BIT_ACCESS(SMT1SIGPPS,3)
// SMT1SIGPPS<SMU1SIGPPS4>
extern volatile __bit                   SMU1SIGPPS4         __at(0xF554);	// @ (0x1EAA * 8 + 4)
#define                                 SMU1SIGPPS4_bit     _BIT_ACCESS(SMT1SIGPPS,4)
// SMT1WINPPS<SMU1WINPPS0>
extern volatile __bit                   SMU1WINPPS0         __at(0xF548);	// @ (0x1EA9 * 8 + 0)
#define                                 SMU1WINPPS0_bit     _BIT_ACCESS(SMT1WINPPS,0)
// SMT1WINPPS<SMU1WINPPS1>
extern volatile __bit                   SMU1WINPPS1         __at(0xF549);	// @ (0x1EA9 * 8 + 1)
#define                                 SMU1WINPPS1_bit     _BIT_ACCESS(SMT1WINPPS,1)
// SMT1WINPPS<SMU1WINPPS2>
extern volatile __bit                   SMU1WINPPS2         __at(0xF54A);	// @ (0x1EA9 * 8 + 2)
#define                                 SMU1WINPPS2_bit     _BIT_ACCESS(SMT1WINPPS,2)
// SMT1WINPPS<SMU1WINPPS3>
extern volatile __bit                   SMU1WINPPS3         __at(0xF54B);	// @ (0x1EA9 * 8 + 3)
#define                                 SMU1WINPPS3_bit     _BIT_ACCESS(SMT1WINPPS,3)
// SMT1WINPPS<SMU1WINPPS4>
extern volatile __bit                   SMU1WINPPS4         __at(0xF54C);	// @ (0x1EA9 * 8 + 4)
#define                                 SMU1WINPPS4_bit     _BIT_ACCESS(SMT1WINPPS,4)
// SMT2SIGPPS<SMU2SIGPPS0>
extern volatile __bit                   SMU2SIGPPS0         __at(0xF560);	// @ (0x1EAC * 8 + 0)
#define                                 SMU2SIGPPS0_bit     _BIT_ACCESS(SMT2SIGPPS,0)
// SMT2SIGPPS<SMU2SIGPPS1>
extern volatile __bit                   SMU2SIGPPS1         __at(0xF561);	// @ (0x1EAC * 8 + 1)
#define                                 SMU2SIGPPS1_bit     _BIT_ACCESS(SMT2SIGPPS,1)
// SMT2SIGPPS<SMU2SIGPPS2>
extern volatile __bit                   SMU2SIGPPS2         __at(0xF562);	// @ (0x1EAC * 8 + 2)
#define                                 SMU2SIGPPS2_bit     _BIT_ACCESS(SMT2SIGPPS,2)
// SMT2SIGPPS<SMU2SIGPPS3>
extern volatile __bit                   SMU2SIGPPS3         __at(0xF563);	// @ (0x1EAC * 8 + 3)
#define                                 SMU2SIGPPS3_bit     _BIT_ACCESS(SMT2SIGPPS,3)
// SMT2SIGPPS<SMU2SIGPPS4>
extern volatile __bit                   SMU2SIGPPS4         __at(0xF564);	// @ (0x1EAC * 8 + 4)
#define                                 SMU2SIGPPS4_bit     _BIT_ACCESS(SMT2SIGPPS,4)
// SMT2WINPPS<SMU2WINPPS0>
extern volatile __bit                   SMU2WINPPS0         __at(0xF558);	// @ (0x1EAB * 8 + 0)
#define                                 SMU2WINPPS0_bit     _BIT_ACCESS(SMT2WINPPS,0)
// SMT2WINPPS<SMU2WINPPS1>
extern volatile __bit                   SMU2WINPPS1         __at(0xF559);	// @ (0x1EAB * 8 + 1)
#define                                 SMU2WINPPS1_bit     _BIT_ACCESS(SMT2WINPPS,1)
// SMT2WINPPS<SMU2WINPPS2>
extern volatile __bit                   SMU2WINPPS2         __at(0xF55A);	// @ (0x1EAB * 8 + 2)
#define                                 SMU2WINPPS2_bit     _BIT_ACCESS(SMT2WINPPS,2)
// SMT2WINPPS<SMU2WINPPS3>
extern volatile __bit                   SMU2WINPPS3         __at(0xF55B);	// @ (0x1EAB * 8 + 3)
#define                                 SMU2WINPPS3_bit     _BIT_ACCESS(SMT2WINPPS,3)
// SMT2WINPPS<SMU2WINPPS4>
extern volatile __bit                   SMU2WINPPS4         __at(0xF55C);	// @ (0x1EAB * 8 + 4)
#define                                 SMU2WINPPS4_bit     _BIT_ACCESS(SMT2WINPPS,4)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x4483);	// @ (0x890 * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x448B);	// @ (0x891 * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x447E);	// @ (0x88F * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// RC1STA<SPEN>
extern volatile __bit                   SPEN                __at(0x8EF);	// @ (0x11D * 8 + 7)
#define                                 SPEN_bit            _BIT_ACCESS(RC1STA,7)
// RC1STA<SREN>
extern volatile __bit                   SREN                __at(0x8ED);	// @ (0x11D * 8 + 5)
#define                                 SREN_bit            _BIT_ACCESS(RC1STA,5)
// SSP1CLKPPS<SSP1CLKPPS0>
extern volatile __bit                   SSP1CLKPPS0         __at(0xF628);	// @ (0x1EC5 * 8 + 0)
#define                                 SSP1CLKPPS0_bit     _BIT_ACCESS(SSP1CLKPPS,0)
// SSP1CLKPPS<SSP1CLKPPS1>
extern volatile __bit                   SSP1CLKPPS1         __at(0xF629);	// @ (0x1EC5 * 8 + 1)
#define                                 SSP1CLKPPS1_bit     _BIT_ACCESS(SSP1CLKPPS,1)
// SSP1CLKPPS<SSP1CLKPPS2>
extern volatile __bit                   SSP1CLKPPS2         __at(0xF62A);	// @ (0x1EC5 * 8 + 2)
#define                                 SSP1CLKPPS2_bit     _BIT_ACCESS(SSP1CLKPPS,2)
// SSP1CLKPPS<SSP1CLKPPS3>
extern volatile __bit                   SSP1CLKPPS3         __at(0xF62B);	// @ (0x1EC5 * 8 + 3)
#define                                 SSP1CLKPPS3_bit     _BIT_ACCESS(SSP1CLKPPS,3)
// SSP1CLKPPS<SSP1CLKPPS4>
extern volatile __bit                   SSP1CLKPPS4         __at(0xF62C);	// @ (0x1EC5 * 8 + 4)
#define                                 SSP1CLKPPS4_bit     _BIT_ACCESS(SSP1CLKPPS,4)
// SSP1DATPPS<SSP1DATPPS0>
extern volatile __bit                   SSP1DATPPS0         __at(0xF630);	// @ (0x1EC6 * 8 + 0)
#define                                 SSP1DATPPS0_bit     _BIT_ACCESS(SSP1DATPPS,0)
// SSP1DATPPS<SSP1DATPPS1>
extern volatile __bit                   SSP1DATPPS1         __at(0xF631);	// @ (0x1EC6 * 8 + 1)
#define                                 SSP1DATPPS1_bit     _BIT_ACCESS(SSP1DATPPS,1)
// SSP1DATPPS<SSP1DATPPS2>
extern volatile __bit                   SSP1DATPPS2         __at(0xF632);	// @ (0x1EC6 * 8 + 2)
#define                                 SSP1DATPPS2_bit     _BIT_ACCESS(SSP1DATPPS,2)
// SSP1DATPPS<SSP1DATPPS3>
extern volatile __bit                   SSP1DATPPS3         __at(0xF633);	// @ (0x1EC6 * 8 + 3)
#define                                 SSP1DATPPS3_bit     _BIT_ACCESS(SSP1DATPPS,3)
// SSP1DATPPS<SSP1DATPPS4>
extern volatile __bit                   SSP1DATPPS4         __at(0xF634);	// @ (0x1EC6 * 8 + 4)
#define                                 SSP1DATPPS4_bit     _BIT_ACCESS(SSP1DATPPS,4)
// PIE3<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x38C8);	// @ (0x719 * 8 + 0)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x3878);	// @ (0x70F * 8 + 0)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR3,0)
// SSP1SSPPS<SSP1SSPPS0>
extern volatile __bit                   SSP1SSPPS0          __at(0xF638);	// @ (0x1EC7 * 8 + 0)
#define                                 SSP1SSPPS0_bit      _BIT_ACCESS(SSP1SSPPS,0)
// SSP1SSPPS<SSP1SSPPS1>
extern volatile __bit                   SSP1SSPPS1          __at(0xF639);	// @ (0x1EC7 * 8 + 1)
#define                                 SSP1SSPPS1_bit      _BIT_ACCESS(SSP1SSPPS,1)
// SSP1SSPPS<SSP1SSPPS2>
extern volatile __bit                   SSP1SSPPS2          __at(0xF63A);	// @ (0x1EC7 * 8 + 2)
#define                                 SSP1SSPPS2_bit      _BIT_ACCESS(SSP1SSPPS,2)
// SSP1SSPPS<SSP1SSPPS3>
extern volatile __bit                   SSP1SSPPS3          __at(0xF63B);	// @ (0x1EC7 * 8 + 3)
#define                                 SSP1SSPPS3_bit      _BIT_ACCESS(SSP1SSPPS,3)
// SSP1SSPPS<SSP1SSPPS4>
extern volatile __bit                   SSP1SSPPS4          __at(0xF63C);	// @ (0x1EC7 * 8 + 4)
#define                                 SSP1SSPPS4_bit      _BIT_ACCESS(SSP1SSPPS,4)
// SSP2CLKPPS<SSP2CLKPPS0>
extern volatile __bit                   SSP2CLKPPS0         __at(0xF640);	// @ (0x1EC8 * 8 + 0)
#define                                 SSP2CLKPPS0_bit     _BIT_ACCESS(SSP2CLKPPS,0)
// SSP2CLKPPS<SSP2CLKPPS1>
extern volatile __bit                   SSP2CLKPPS1         __at(0xF641);	// @ (0x1EC8 * 8 + 1)
#define                                 SSP2CLKPPS1_bit     _BIT_ACCESS(SSP2CLKPPS,1)
// SSP2CLKPPS<SSP2CLKPPS2>
extern volatile __bit                   SSP2CLKPPS2         __at(0xF642);	// @ (0x1EC8 * 8 + 2)
#define                                 SSP2CLKPPS2_bit     _BIT_ACCESS(SSP2CLKPPS,2)
// SSP2CLKPPS<SSP2CLKPPS3>
extern volatile __bit                   SSP2CLKPPS3         __at(0xF643);	// @ (0x1EC8 * 8 + 3)
#define                                 SSP2CLKPPS3_bit     _BIT_ACCESS(SSP2CLKPPS,3)
// SSP2CLKPPS<SSP2CLKPPS4>
extern volatile __bit                   SSP2CLKPPS4         __at(0xF644);	// @ (0x1EC8 * 8 + 4)
#define                                 SSP2CLKPPS4_bit     _BIT_ACCESS(SSP2CLKPPS,4)
// SSP2DATPPS<SSP2DATPPS0>
extern volatile __bit                   SSP2DATPPS0         __at(0xF648);	// @ (0x1EC9 * 8 + 0)
#define                                 SSP2DATPPS0_bit     _BIT_ACCESS(SSP2DATPPS,0)
// SSP2DATPPS<SSP2DATPPS1>
extern volatile __bit                   SSP2DATPPS1         __at(0xF649);	// @ (0x1EC9 * 8 + 1)
#define                                 SSP2DATPPS1_bit     _BIT_ACCESS(SSP2DATPPS,1)
// SSP2DATPPS<SSP2DATPPS2>
extern volatile __bit                   SSP2DATPPS2         __at(0xF64A);	// @ (0x1EC9 * 8 + 2)
#define                                 SSP2DATPPS2_bit     _BIT_ACCESS(SSP2DATPPS,2)
// SSP2DATPPS<SSP2DATPPS3>
extern volatile __bit                   SSP2DATPPS3         __at(0xF64B);	// @ (0x1EC9 * 8 + 3)
#define                                 SSP2DATPPS3_bit     _BIT_ACCESS(SSP2DATPPS,3)
// SSP2DATPPS<SSP2DATPPS4>
extern volatile __bit                   SSP2DATPPS4         __at(0xF64C);	// @ (0x1EC9 * 8 + 4)
#define                                 SSP2DATPPS4_bit     _BIT_ACCESS(SSP2DATPPS,4)
// PIE3<SSP2IE>
extern volatile __bit                   SSP2IE              __at(0x38CA);	// @ (0x719 * 8 + 2)
#define                                 SSP2IE_bit          _BIT_ACCESS(PIE3,2)
// PIR3<SSP2IF>
extern volatile __bit                   SSP2IF              __at(0x387A);	// @ (0x70F * 8 + 2)
#define                                 SSP2IF_bit          _BIT_ACCESS(PIR3,2)
// SSP2SSPPS<SSP2SSPPS0>
extern volatile __bit                   SSP2SSPPS0          __at(0xF650);	// @ (0x1ECA * 8 + 0)
#define                                 SSP2SSPPS0_bit      _BIT_ACCESS(SSP2SSPPS,0)
// SSP2SSPPS<SSP2SSPPS1>
extern volatile __bit                   SSP2SSPPS1          __at(0xF651);	// @ (0x1ECA * 8 + 1)
#define                                 SSP2SSPPS1_bit      _BIT_ACCESS(SSP2SSPPS,1)
// SSP2SSPPS<SSP2SSPPS2>
extern volatile __bit                   SSP2SSPPS2          __at(0xF652);	// @ (0x1ECA * 8 + 2)
#define                                 SSP2SSPPS2_bit      _BIT_ACCESS(SSP2SSPPS,2)
// SSP2SSPPS<SSP2SSPPS3>
extern volatile __bit                   SSP2SSPPS3          __at(0xF653);	// @ (0x1ECA * 8 + 3)
#define                                 SSP2SSPPS3_bit      _BIT_ACCESS(SSP2SSPPS,3)
// SSP2SSPPS<SSP2SSPPS4>
extern volatile __bit                   SSP2SSPPS4          __at(0xF654);	// @ (0x1ECA * 8 + 4)
#define                                 SSP2SSPPS4_bit      _BIT_ACCESS(SSP2SSPPS,4)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// SSP2CON1<SSPEN2>
extern volatile __bit                   SSPEN2              __at(0xCD5);	// @ (0x19A * 8 + 5)
#define                                 SSPEN2_bit          _BIT_ACCESS(SSP2CON1,5)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// SSP2CON1<SSPM02>
extern volatile __bit                   SSPM02              __at(0xCD0);	// @ (0x19A * 8 + 0)
#define                                 SSPM02_bit          _BIT_ACCESS(SSP2CON1,0)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// SSP2CON1<SSPM12>
extern volatile __bit                   SSPM12              __at(0xCD1);	// @ (0x19A * 8 + 1)
#define                                 SSPM12_bit          _BIT_ACCESS(SSP2CON1,1)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// SSP2CON1<SSPM22>
extern volatile __bit                   SSPM22              __at(0xCD2);	// @ (0x19A * 8 + 2)
#define                                 SSPM22_bit          _BIT_ACCESS(SSP2CON1,2)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// SSP2CON1<SSPM32>
extern volatile __bit                   SSPM32              __at(0xCD3);	// @ (0x19A * 8 + 3)
#define                                 SSPM32_bit          _BIT_ACCESS(SSP2CON1,3)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// SSP2CON1<SSPOV2>
extern volatile __bit                   SSPOV2              __at(0xCD6);	// @ (0x19A * 8 + 6)
#define                                 SSPOV2_bit          _BIT_ACCESS(SSP2CON1,6)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// SSP2STAT<START2>
extern volatile __bit                   START2              __at(0xCCB);	// @ (0x199 * 8 + 3)
#define                                 START2_bit          _BIT_ACCESS(SSP2STAT,3)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x409F);	// @ (0x813 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x409E);	// @ (0x813 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// SSP2STAT<STOP2>
extern volatile __bit                   STOP2               __at(0xCCC);	// @ (0x199 * 8 + 4)
#define                                 STOP2_bit           _BIT_ACCESS(SSP2STAT,4)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x3CB7);	// @ (0x796 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0xF4);	// @ (0x1E * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0xFC);	// @ (0x1F * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0xF488);	// @ (0x1E91 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0xF489);	// @ (0x1E91 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0xF48A);	// @ (0x1E91 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0xF48B);	// @ (0x1E91 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0xF8);	// @ (0x1F * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0xF9);	// @ (0x1F * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0xFA);	// @ (0x1F * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0xFB);	// @ (0x1F * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0xFD);	// @ (0x1F * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0xFE);	// @ (0x1F * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0xFF);	// @ (0x1F * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0xF7);	// @ (0x1E * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0xF5);	// @ (0x1E * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0xF0);	// @ (0x1E * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0xF1);	// @ (0x1E * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0xF2);	// @ (0x1E * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0xF3);	// @ (0x1E * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0xE8);	// @ (0x1D * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0xE9);	// @ (0x1D * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0xEA);	// @ (0x1D * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0xEB);	// @ (0x1D * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0xEC);	// @ (0x1D * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0xED);	// @ (0x1D * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0xEE);	// @ (0x1D * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0xEF);	// @ (0x1D * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T0CON1<T0PS0>
extern volatile __bit                   T0PS0               __at(0xF8);	// @ (0x1F * 8 + 0)
#define                                 T0PS0_bit           _BIT_ACCESS(T0CON1,0)
// T0CON1<T0PS1>
extern volatile __bit                   T0PS1               __at(0xF9);	// @ (0x1F * 8 + 1)
#define                                 T0PS1_bit           _BIT_ACCESS(T0CON1,1)
// T0CON1<T0PS2>
extern volatile __bit                   T0PS2               __at(0xFA);	// @ (0x1F * 8 + 2)
#define                                 T0PS2_bit           _BIT_ACCESS(T0CON1,2)
// T0CON1<T0PS3>
extern volatile __bit                   T0PS3               __at(0xFB);	// @ (0x1F * 8 + 3)
#define                                 T0PS3_bit           _BIT_ACCESS(T0CON1,3)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0xF490);	// @ (0x1E92 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0xF491);	// @ (0x1E92 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0xF492);	// @ (0x1E92 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0xF493);	// @ (0x1E92 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0xF494);	// @ (0x1E92 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x107F);	// @ (0x20F * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x107E);	// @ (0x20F * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0xF498);	// @ (0x1E93 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0xF499);	// @ (0x1E93 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0xF49A);	// @ (0x1E93 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0xF49B);	// @ (0x1E93 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0xF49C);	// @ (0x1E93 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x107C);	// @ (0x20F * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x1080);	// @ (0x210 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x1081);	// @ (0x210 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x1082);	// @ (0x210 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x1083);	// @ (0x210 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GATE<T1GSS4>
extern volatile __bit                   T1GSS4              __at(0x1084);	// @ (0x210 * 8 + 4)
#define                                 T1GSS4_bit          _BIT_ACCESS(T1GATE,4)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x107D);	// @ (0x20F * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x107A);	// @ (0x20F * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2AINPPS<T2AINPPS0>
extern volatile __bit                   T2AINPPS0           __at(0xF4E0);	// @ (0x1E9C * 8 + 0)
#define                                 T2AINPPS0_bit       _BIT_ACCESS(T2AINPPS,0)
// T2AINPPS<T2AINPPS1>
extern volatile __bit                   T2AINPPS1           __at(0xF4E1);	// @ (0x1E9C * 8 + 1)
#define                                 T2AINPPS1_bit       _BIT_ACCESS(T2AINPPS,1)
// T2AINPPS<T2AINPPS2>
extern volatile __bit                   T2AINPPS2           __at(0xF4E2);	// @ (0x1E9C * 8 + 2)
#define                                 T2AINPPS2_bit       _BIT_ACCESS(T2AINPPS,2)
// T2AINPPS<T2AINPPS3>
extern volatile __bit                   T2AINPPS3           __at(0xF4E3);	// @ (0x1E9C * 8 + 3)
#define                                 T2AINPPS3_bit       _BIT_ACCESS(T2AINPPS,3)
// T2AINPPS<T2AINPPS4>
extern volatile __bit                   T2AINPPS4           __at(0xF4E4);	// @ (0x1E9C * 8 + 4)
#define                                 T2AINPPS4_bit       _BIT_ACCESS(T2AINPPS,4)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x147E);	// @ (0x28F * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x1474);	// @ (0x28E * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x1475);	// @ (0x28E * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x1476);	// @ (0x28E * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x147D);	// @ (0x28F * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x1480);	// @ (0x290 * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x1481);	// @ (0x290 * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x1482);	// @ (0x290 * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x1483);	// @ (0x290 * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x1478);	// @ (0x28F * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x1479);	// @ (0x28F * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x147A);	// @ (0x28F * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x147B);	// @ (0x28F * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x147C);	// @ (0x28F * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x1477);	// @ (0x28E * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x147F);	// @ (0x28F * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x1488);	// @ (0x291 * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x1489);	// @ (0x291 * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x148A);	// @ (0x291 * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x148B);	// @ (0x291 * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T2RST<T2RSEL4>
extern volatile __bit                   T2RSEL4             __at(0x148C);	// @ (0x291 * 8 + 4)
#define                                 T2RSEL4_bit         _BIT_ACCESS(T2RST,4)
// T3CKIPPS<T3CKIPPS0>
extern volatile __bit                   T3CKIPPS0           __at(0xF4A0);	// @ (0x1E94 * 8 + 0)
#define                                 T3CKIPPS0_bit       _BIT_ACCESS(T3CKIPPS,0)
// T3CKIPPS<T3CKIPPS1>
extern volatile __bit                   T3CKIPPS1           __at(0xF4A1);	// @ (0x1E94 * 8 + 1)
#define                                 T3CKIPPS1_bit       _BIT_ACCESS(T3CKIPPS,1)
// T3CKIPPS<T3CKIPPS2>
extern volatile __bit                   T3CKIPPS2           __at(0xF4A2);	// @ (0x1E94 * 8 + 2)
#define                                 T3CKIPPS2_bit       _BIT_ACCESS(T3CKIPPS,2)
// T3CKIPPS<T3CKIPPS3>
extern volatile __bit                   T3CKIPPS3           __at(0xF4A3);	// @ (0x1E94 * 8 + 3)
#define                                 T3CKIPPS3_bit       _BIT_ACCESS(T3CKIPPS,3)
// T3CKIPPS<T3CKIPPS4>
extern volatile __bit                   T3CKIPPS4           __at(0xF4A4);	// @ (0x1E94 * 8 + 4)
#define                                 T3CKIPPS4_bit       _BIT_ACCESS(T3CKIPPS,4)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x10A4);	// @ (0x214 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x10A5);	// @ (0x214 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// T3CLK<T3CS0>
extern volatile __bit                   T3CS0               __at(0x10B8);	// @ (0x217 * 8 + 0)
#define                                 T3CS0_bit           _BIT_ACCESS(T3CLK,0)
// T3CLK<T3CS1>
extern volatile __bit                   T3CS1               __at(0x10B9);	// @ (0x217 * 8 + 1)
#define                                 T3CS1_bit           _BIT_ACCESS(T3CLK,1)
// T3CLK<T3CS2>
extern volatile __bit                   T3CS2               __at(0x10BA);	// @ (0x217 * 8 + 2)
#define                                 T3CS2_bit           _BIT_ACCESS(T3CLK,2)
// T3CLK<T3CS3>
extern volatile __bit                   T3CS3               __at(0x10BB);	// @ (0x217 * 8 + 3)
#define                                 T3CS3_bit           _BIT_ACCESS(T3CLK,3)
// T3GCON<T3GE>
extern volatile __bit                   T3GE                __at(0x10AF);	// @ (0x215 * 8 + 7)
#define                                 T3GE_bit            _BIT_ACCESS(T3GCON,7)
// T3GCON<T3GGO>
extern volatile __bit                   T3GGO               __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 T3GGO_bit           _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GGO_nDONE>
extern volatile __bit                   T3GGO_nDONE         __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 T3GGO_nDONE_bit     _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x10AE);	// @ (0x215 * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// T3GPPS<T3GPPS0>
extern volatile __bit                   T3GPPS0             __at(0xF4A8);	// @ (0x1E95 * 8 + 0)
#define                                 T3GPPS0_bit         _BIT_ACCESS(T3GPPS,0)
// T3GPPS<T3GPPS1>
extern volatile __bit                   T3GPPS1             __at(0xF4A9);	// @ (0x1E95 * 8 + 1)
#define                                 T3GPPS1_bit         _BIT_ACCESS(T3GPPS,1)
// T3GPPS<T3GPPS2>
extern volatile __bit                   T3GPPS2             __at(0xF4AA);	// @ (0x1E95 * 8 + 2)
#define                                 T3GPPS2_bit         _BIT_ACCESS(T3GPPS,2)
// T3GPPS<T3GPPS3>
extern volatile __bit                   T3GPPS3             __at(0xF4AB);	// @ (0x1E95 * 8 + 3)
#define                                 T3GPPS3_bit         _BIT_ACCESS(T3GPPS,3)
// T3GPPS<T3GPPS4>
extern volatile __bit                   T3GPPS4             __at(0xF4AC);	// @ (0x1E95 * 8 + 4)
#define                                 T3GPPS4_bit         _BIT_ACCESS(T3GPPS,4)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x10AC);	// @ (0x215 * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GATE<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x10B0);	// @ (0x216 * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GATE,0)
// T3GATE<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x10B1);	// @ (0x216 * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GATE,1)
// T3GATE<T3GSS2>
extern volatile __bit                   T3GSS2              __at(0x10B2);	// @ (0x216 * 8 + 2)
#define                                 T3GSS2_bit          _BIT_ACCESS(T3GATE,2)
// T3GATE<T3GSS3>
extern volatile __bit                   T3GSS3              __at(0x10B3);	// @ (0x216 * 8 + 3)
#define                                 T3GSS3_bit          _BIT_ACCESS(T3GATE,3)
// T3GATE<T3GSS4>
extern volatile __bit                   T3GSS4              __at(0x10B4);	// @ (0x216 * 8 + 4)
#define                                 T3GSS4_bit          _BIT_ACCESS(T3GATE,4)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x10AD);	// @ (0x215 * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x10AA);	// @ (0x215 * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3RD16>
extern volatile __bit                   T3RD16              __at(0x10A1);	// @ (0x214 * 8 + 1)
#define                                 T3RD16_bit          _BIT_ACCESS(T3CON,1)
// T4AINPPS<T4AINPPS0>
extern volatile __bit                   T4AINPPS0           __at(0xF4E8);	// @ (0x1E9D * 8 + 0)
#define                                 T4AINPPS0_bit       _BIT_ACCESS(T4AINPPS,0)
// T4AINPPS<T4AINPPS1>
extern volatile __bit                   T4AINPPS1           __at(0xF4E9);	// @ (0x1E9D * 8 + 1)
#define                                 T4AINPPS1_bit       _BIT_ACCESS(T4AINPPS,1)
// T4AINPPS<T4AINPPS2>
extern volatile __bit                   T4AINPPS2           __at(0xF4EA);	// @ (0x1E9D * 8 + 2)
#define                                 T4AINPPS2_bit       _BIT_ACCESS(T4AINPPS,2)
// T4AINPPS<T4AINPPS3>
extern volatile __bit                   T4AINPPS3           __at(0xF4EB);	// @ (0x1E9D * 8 + 3)
#define                                 T4AINPPS3_bit       _BIT_ACCESS(T4AINPPS,3)
// T4AINPPS<T4AINPPS4>
extern volatile __bit                   T4AINPPS4           __at(0xF4EC);	// @ (0x1E9D * 8 + 4)
#define                                 T4AINPPS4_bit       _BIT_ACCESS(T4AINPPS,4)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x14AE);	// @ (0x295 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x14A4);	// @ (0x294 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x14A5);	// @ (0x294 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x14A6);	// @ (0x294 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x14AD);	// @ (0x295 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x14B0);	// @ (0x296 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x14B1);	// @ (0x296 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x14B2);	// @ (0x296 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x14B3);	// @ (0x296 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x14A8);	// @ (0x295 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x14A9);	// @ (0x295 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x14AA);	// @ (0x295 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x14AB);	// @ (0x295 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x14AC);	// @ (0x295 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x14A7);	// @ (0x294 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x14A0);	// @ (0x294 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x14A1);	// @ (0x294 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x14A2);	// @ (0x294 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x14A3);	// @ (0x294 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x14AF);	// @ (0x295 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x14B8);	// @ (0x297 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x14B9);	// @ (0x297 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x14BA);	// @ (0x297 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x14BB);	// @ (0x297 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T4RST<T4RSEL4>
extern volatile __bit                   T4RSEL4             __at(0x14BC);	// @ (0x297 * 8 + 4)
#define                                 T4RSEL4_bit         _BIT_ACCESS(T4RST,4)
// T5CKIPPS<T5CKIPPS0>
extern volatile __bit                   T5CKIPPS0           __at(0xF4B0);	// @ (0x1E96 * 8 + 0)
#define                                 T5CKIPPS0_bit       _BIT_ACCESS(T5CKIPPS,0)
// T5CKIPPS<T5CKIPPS1>
extern volatile __bit                   T5CKIPPS1           __at(0xF4B1);	// @ (0x1E96 * 8 + 1)
#define                                 T5CKIPPS1_bit       _BIT_ACCESS(T5CKIPPS,1)
// T5CKIPPS<T5CKIPPS2>
extern volatile __bit                   T5CKIPPS2           __at(0xF4B2);	// @ (0x1E96 * 8 + 2)
#define                                 T5CKIPPS2_bit       _BIT_ACCESS(T5CKIPPS,2)
// T5CKIPPS<T5CKIPPS3>
extern volatile __bit                   T5CKIPPS3           __at(0xF4B3);	// @ (0x1E96 * 8 + 3)
#define                                 T5CKIPPS3_bit       _BIT_ACCESS(T5CKIPPS,3)
// T5CKIPPS<T5CKIPPS4>
extern volatile __bit                   T5CKIPPS4           __at(0xF4B4);	// @ (0x1E96 * 8 + 4)
#define                                 T5CKIPPS4_bit       _BIT_ACCESS(T5CKIPPS,4)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x10D4);	// @ (0x21A * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x10D5);	// @ (0x21A * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5CLK<T5CS0>
extern volatile __bit                   T5CS0               __at(0x10E8);	// @ (0x21D * 8 + 0)
#define                                 T5CS0_bit           _BIT_ACCESS(T5CLK,0)
// T5CLK<T5CS1>
extern volatile __bit                   T5CS1               __at(0x10E9);	// @ (0x21D * 8 + 1)
#define                                 T5CS1_bit           _BIT_ACCESS(T5CLK,1)
// T5CLK<T5CS2>
extern volatile __bit                   T5CS2               __at(0x10EA);	// @ (0x21D * 8 + 2)
#define                                 T5CS2_bit           _BIT_ACCESS(T5CLK,2)
// T5CLK<T5CS3>
extern volatile __bit                   T5CS3               __at(0x10EB);	// @ (0x21D * 8 + 3)
#define                                 T5CS3_bit           _BIT_ACCESS(T5CLK,3)
// T5GCON<T5GE>
extern volatile __bit                   T5GE                __at(0x10DF);	// @ (0x21B * 8 + 7)
#define                                 T5GE_bit            _BIT_ACCESS(T5GCON,7)
// T5GCON<T5GGO>
extern volatile __bit                   T5GGO               __at(0x10DB);	// @ (0x21B * 8 + 3)
#define                                 T5GGO_bit           _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GGO_nDONE>
extern volatile __bit                   T5GGO_nDONE         __at(0x10DB);	// @ (0x21B * 8 + 3)
#define                                 T5GGO_nDONE_bit     _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x10DE);	// @ (0x21B * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// T5GPPS<T5GPPS0>
extern volatile __bit                   T5GPPS0             __at(0xF4B8);	// @ (0x1E97 * 8 + 0)
#define                                 T5GPPS0_bit         _BIT_ACCESS(T5GPPS,0)
// T5GPPS<T5GPPS1>
extern volatile __bit                   T5GPPS1             __at(0xF4B9);	// @ (0x1E97 * 8 + 1)
#define                                 T5GPPS1_bit         _BIT_ACCESS(T5GPPS,1)
// T5GPPS<T5GPPS2>
extern volatile __bit                   T5GPPS2             __at(0xF4BA);	// @ (0x1E97 * 8 + 2)
#define                                 T5GPPS2_bit         _BIT_ACCESS(T5GPPS,2)
// T5GPPS<T5GPPS3>
extern volatile __bit                   T5GPPS3             __at(0xF4BB);	// @ (0x1E97 * 8 + 3)
#define                                 T5GPPS3_bit         _BIT_ACCESS(T5GPPS,3)
// T5GPPS<T5GPPS4>
extern volatile __bit                   T5GPPS4             __at(0xF4BC);	// @ (0x1E97 * 8 + 4)
#define                                 T5GPPS4_bit         _BIT_ACCESS(T5GPPS,4)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x10DC);	// @ (0x21B * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GATE<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x10E0);	// @ (0x21C * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GATE,0)
// T5GATE<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x10E1);	// @ (0x21C * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GATE,1)
// T5GATE<T5GSS2>
extern volatile __bit                   T5GSS2              __at(0x10E2);	// @ (0x21C * 8 + 2)
#define                                 T5GSS2_bit          _BIT_ACCESS(T5GATE,2)
// T5GATE<T5GSS3>
extern volatile __bit                   T5GSS3              __at(0x10E3);	// @ (0x21C * 8 + 3)
#define                                 T5GSS3_bit          _BIT_ACCESS(T5GATE,3)
// T5GATE<T5GSS4>
extern volatile __bit                   T5GSS4              __at(0x10E4);	// @ (0x21C * 8 + 4)
#define                                 T5GSS4_bit          _BIT_ACCESS(T5GATE,4)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x10DD);	// @ (0x21B * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x10DA);	// @ (0x21B * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5RD16>
extern volatile __bit                   T5RD16              __at(0x10D1);	// @ (0x21A * 8 + 1)
#define                                 T5RD16_bit          _BIT_ACCESS(T5CON,1)
// T6AINPPS<T6AINPPS0>
extern volatile __bit                   T6AINPPS0           __at(0xF4F0);	// @ (0x1E9E * 8 + 0)
#define                                 T6AINPPS0_bit       _BIT_ACCESS(T6AINPPS,0)
// T6AINPPS<T6AINPPS1>
extern volatile __bit                   T6AINPPS1           __at(0xF4F1);	// @ (0x1E9E * 8 + 1)
#define                                 T6AINPPS1_bit       _BIT_ACCESS(T6AINPPS,1)
// T6AINPPS<T6AINPPS2>
extern volatile __bit                   T6AINPPS2           __at(0xF4F2);	// @ (0x1E9E * 8 + 2)
#define                                 T6AINPPS2_bit       _BIT_ACCESS(T6AINPPS,2)
// T6AINPPS<T6AINPPS3>
extern volatile __bit                   T6AINPPS3           __at(0xF4F3);	// @ (0x1E9E * 8 + 3)
#define                                 T6AINPPS3_bit       _BIT_ACCESS(T6AINPPS,3)
// T6AINPPS<T6AINPPS4>
extern volatile __bit                   T6AINPPS4           __at(0xF4F4);	// @ (0x1E9E * 8 + 4)
#define                                 T6AINPPS4_bit       _BIT_ACCESS(T6AINPPS,4)
// T6HLT<T6CKPOL>
extern volatile __bit                   T6CKPOL             __at(0x14DE);	// @ (0x29B * 8 + 6)
#define                                 T6CKPOL_bit         _BIT_ACCESS(T6HLT,6)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x14D4);	// @ (0x29A * 8 + 4)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,4)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x14D5);	// @ (0x29A * 8 + 5)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,5)
// T6CON<T6CKPS2>
extern volatile __bit                   T6CKPS2             __at(0x14D6);	// @ (0x29A * 8 + 6)
#define                                 T6CKPS2_bit         _BIT_ACCESS(T6CON,6)
// T6HLT<T6CKSYNC>
extern volatile __bit                   T6CKSYNC            __at(0x14DD);	// @ (0x29B * 8 + 5)
#define                                 T6CKSYNC_bit        _BIT_ACCESS(T6HLT,5)
// T6CLKCON<T6CS0>
extern volatile __bit                   T6CS0               __at(0x14E0);	// @ (0x29C * 8 + 0)
#define                                 T6CS0_bit           _BIT_ACCESS(T6CLKCON,0)
// T6CLKCON<T6CS1>
extern volatile __bit                   T6CS1               __at(0x14E1);	// @ (0x29C * 8 + 1)
#define                                 T6CS1_bit           _BIT_ACCESS(T6CLKCON,1)
// T6CLKCON<T6CS2>
extern volatile __bit                   T6CS2               __at(0x14E2);	// @ (0x29C * 8 + 2)
#define                                 T6CS2_bit           _BIT_ACCESS(T6CLKCON,2)
// T6CLKCON<T6CS3>
extern volatile __bit                   T6CS3               __at(0x14E3);	// @ (0x29C * 8 + 3)
#define                                 T6CS3_bit           _BIT_ACCESS(T6CLKCON,3)
// T6HLT<T6MODE0>
extern volatile __bit                   T6MODE0             __at(0x14D8);	// @ (0x29B * 8 + 0)
#define                                 T6MODE0_bit         _BIT_ACCESS(T6HLT,0)
// T6HLT<T6MODE1>
extern volatile __bit                   T6MODE1             __at(0x14D9);	// @ (0x29B * 8 + 1)
#define                                 T6MODE1_bit         _BIT_ACCESS(T6HLT,1)
// T6HLT<T6MODE2>
extern volatile __bit                   T6MODE2             __at(0x14DA);	// @ (0x29B * 8 + 2)
#define                                 T6MODE2_bit         _BIT_ACCESS(T6HLT,2)
// T6HLT<T6MODE3>
extern volatile __bit                   T6MODE3             __at(0x14DB);	// @ (0x29B * 8 + 3)
#define                                 T6MODE3_bit         _BIT_ACCESS(T6HLT,3)
// T6HLT<T6MODE4>
extern volatile __bit                   T6MODE4             __at(0x14DC);	// @ (0x29B * 8 + 4)
#define                                 T6MODE4_bit         _BIT_ACCESS(T6HLT,4)
// T6CON<T6ON>
extern volatile __bit                   T6ON                __at(0x14D7);	// @ (0x29A * 8 + 7)
#define                                 T6ON_bit            _BIT_ACCESS(T6CON,7)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x14D0);	// @ (0x29A * 8 + 0)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,0)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x14D1);	// @ (0x29A * 8 + 1)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x14D2);	// @ (0x29A * 8 + 2)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,2)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x14D3);	// @ (0x29A * 8 + 3)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,3)
// T6HLT<T6PSYNC>
extern volatile __bit                   T6PSYNC             __at(0x14DF);	// @ (0x29B * 8 + 7)
#define                                 T6PSYNC_bit         _BIT_ACCESS(T6HLT,7)
// T6RST<T6RSEL0>
extern volatile __bit                   T6RSEL0             __at(0x14E8);	// @ (0x29D * 8 + 0)
#define                                 T6RSEL0_bit         _BIT_ACCESS(T6RST,0)
// T6RST<T6RSEL1>
extern volatile __bit                   T6RSEL1             __at(0x14E9);	// @ (0x29D * 8 + 1)
#define                                 T6RSEL1_bit         _BIT_ACCESS(T6RST,1)
// T6RST<T6RSEL2>
extern volatile __bit                   T6RSEL2             __at(0x14EA);	// @ (0x29D * 8 + 2)
#define                                 T6RSEL2_bit         _BIT_ACCESS(T6RST,2)
// T6RST<T6RSEL3>
extern volatile __bit                   T6RSEL3             __at(0x14EB);	// @ (0x29D * 8 + 3)
#define                                 T6RSEL3_bit         _BIT_ACCESS(T6RST,3)
// T6RST<T6RSEL4>
extern volatile __bit                   T6RSEL4             __at(0x14EC);	// @ (0x29D * 8 + 4)
#define                                 T6RSEL4_bit         _BIT_ACCESS(T6RST,4)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0xE8);	// @ (0x1D * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0xE9);	// @ (0x1D * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0xEA);	// @ (0x1D * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0xEB);	// @ (0x1D * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0xEC);	// @ (0x1D * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0xED);	// @ (0x1D * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0xEE);	// @ (0x1D * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0xEF);	// @ (0x1D * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE0<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x38B5);	// @ (0x716 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x3865);	// @ (0x70C * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR0,5)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0xE0);	// @ (0x1C * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0xE1);	// @ (0x1C * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0xE2);	// @ (0x1C * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0xE3);	// @ (0x1C * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0xE4);	// @ (0x1C * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0xE5);	// @ (0x1C * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0xE6);	// @ (0x1C * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0xE7);	// @ (0x1C * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x3CB8);	// @ (0x797 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// TMR1H<TMR110>
extern volatile __bit                   TMR110              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR110_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR111>
extern volatile __bit                   TMR111              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR111_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR112>
extern volatile __bit                   TMR112              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR112_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR113>
extern volatile __bit                   TMR113              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR113_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR114>
extern volatile __bit                   TMR114              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR114_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR115>
extern volatile __bit                   TMR115              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR115_bit          _BIT_ACCESS(TMR1H,7)
// PIE5<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x38D8);	// @ (0x71B * 8 + 0)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR5,0)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE4<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x38D0);	// @ (0x71A * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x3880);	// @ (0x710 * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR4,0)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x1070);	// @ (0x20E * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE4<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x38D1);	// @ (0x71A * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x3881);	// @ (0x710 * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR4,1)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x1477);	// @ (0x28E * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// TMR3L<TMR30>
extern volatile __bit                   TMR30               __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 TMR30_bit           _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR31>
extern volatile __bit                   TMR31               __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 TMR31_bit           _BIT_ACCESS(TMR3L,1)
// TMR3H<TMR310>
extern volatile __bit                   TMR310              __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 TMR310_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR311>
extern volatile __bit                   TMR311              __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 TMR311_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR312>
extern volatile __bit                   TMR312              __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 TMR312_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR313>
extern volatile __bit                   TMR313              __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 TMR313_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR314>
extern volatile __bit                   TMR314              __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 TMR314_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR315>
extern volatile __bit                   TMR315              __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 TMR315_bit          _BIT_ACCESS(TMR3H,7)
// TMR3L<TMR32>
extern volatile __bit                   TMR32               __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 TMR32_bit           _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR33>
extern volatile __bit                   TMR33               __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 TMR33_bit           _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR34>
extern volatile __bit                   TMR34               __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 TMR34_bit           _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR35>
extern volatile __bit                   TMR35               __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 TMR35_bit           _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR36>
extern volatile __bit                   TMR36               __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 TMR36_bit           _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR37>
extern volatile __bit                   TMR37               __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 TMR37_bit           _BIT_ACCESS(TMR3L,7)
// TMR3H<TMR38>
extern volatile __bit                   TMR38               __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 TMR38_bit           _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR39>
extern volatile __bit                   TMR39               __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 TMR39_bit           _BIT_ACCESS(TMR3H,1)
// PIE5<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x38D9);	// @ (0x71B * 8 + 1)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE5,1)
// PIR5<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0x3889);	// @ (0x711 * 8 + 1)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR5,1)
// TMR3H<TMR3H0>
extern volatile __bit                   TMR3H0              __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 TMR3H0_bit          _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR3H1>
extern volatile __bit                   TMR3H1              __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 TMR3H1_bit          _BIT_ACCESS(TMR3H,1)
// TMR3H<TMR3H2>
extern volatile __bit                   TMR3H2              __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 TMR3H2_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR3H3>
extern volatile __bit                   TMR3H3              __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 TMR3H3_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR3H4>
extern volatile __bit                   TMR3H4              __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 TMR3H4_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR3H5>
extern volatile __bit                   TMR3H5              __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 TMR3H5_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR3H6>
extern volatile __bit                   TMR3H6              __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 TMR3H6_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR3H7>
extern volatile __bit                   TMR3H7              __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 TMR3H7_bit          _BIT_ACCESS(TMR3H,7)
// PIE4<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x38D2);	// @ (0x71A * 8 + 2)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE4,2)
// PIR4<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0x3882);	// @ (0x710 * 8 + 2)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR4,2)
// TMR3L<TMR3L0>
extern volatile __bit                   TMR3L0              __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 TMR3L0_bit          _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR3L1>
extern volatile __bit                   TMR3L1              __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 TMR3L1_bit          _BIT_ACCESS(TMR3L,1)
// TMR3L<TMR3L2>
extern volatile __bit                   TMR3L2              __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 TMR3L2_bit          _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR3L3>
extern volatile __bit                   TMR3L3              __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 TMR3L3_bit          _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR3L4>
extern volatile __bit                   TMR3L4              __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 TMR3L4_bit          _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR3L5>
extern volatile __bit                   TMR3L5              __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 TMR3L5_bit          _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR3L6>
extern volatile __bit                   TMR3L6              __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 TMR3L6_bit          _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR3L7>
extern volatile __bit                   TMR3L7              __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 TMR3L7_bit          _BIT_ACCESS(TMR3L,7)
// PMD1<TMR3MD>
extern volatile __bit                   TMR3MD              __at(0x3CBB);	// @ (0x797 * 8 + 3)
#define                                 TMR3MD_bit          _BIT_ACCESS(PMD1,3)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x10A0);	// @ (0x214 * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// PIE4<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x38D3);	// @ (0x71A * 8 + 3)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x3883);	// @ (0x710 * 8 + 3)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR4,3)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,4)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x14A7);	// @ (0x294 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// TMR5L<TMR50>
extern volatile __bit                   TMR50               __at(0x10C0);	// @ (0x218 * 8 + 0)
#define                                 TMR50_bit           _BIT_ACCESS(TMR5L,0)
// TMR5L<TMR51>
extern volatile __bit                   TMR51               __at(0x10C1);	// @ (0x218 * 8 + 1)
#define                                 TMR51_bit           _BIT_ACCESS(TMR5L,1)
// TMR5H<TMR510>
extern volatile __bit                   TMR510              __at(0x10CA);	// @ (0x219 * 8 + 2)
#define                                 TMR510_bit          _BIT_ACCESS(TMR5H,2)
// TMR5H<TMR511>
extern volatile __bit                   TMR511              __at(0x10CB);	// @ (0x219 * 8 + 3)
#define                                 TMR511_bit          _BIT_ACCESS(TMR5H,3)
// TMR5H<TMR512>
extern volatile __bit                   TMR512              __at(0x10CC);	// @ (0x219 * 8 + 4)
#define                                 TMR512_bit          _BIT_ACCESS(TMR5H,4)
// TMR5H<TMR513>
extern volatile __bit                   TMR513              __at(0x10CD);	// @ (0x219 * 8 + 5)
#define                                 TMR513_bit          _BIT_ACCESS(TMR5H,5)
// TMR5H<TMR514>
extern volatile __bit                   TMR514              __at(0x10CE);	// @ (0x219 * 8 + 6)
#define                                 TMR514_bit          _BIT_ACCESS(TMR5H,6)
// TMR5H<TMR515>
extern volatile __bit                   TMR515              __at(0x10CF);	// @ (0x219 * 8 + 7)
#define                                 TMR515_bit          _BIT_ACCESS(TMR5H,7)
// TMR5L<TMR52>
extern volatile __bit                   TMR52               __at(0x10C2);	// @ (0x218 * 8 + 2)
#define                                 TMR52_bit           _BIT_ACCESS(TMR5L,2)
// TMR5L<TMR53>
extern volatile __bit                   TMR53               __at(0x10C3);	// @ (0x218 * 8 + 3)
#define                                 TMR53_bit           _BIT_ACCESS(TMR5L,3)
// TMR5L<TMR54>
extern volatile __bit                   TMR54               __at(0x10C4);	// @ (0x218 * 8 + 4)
#define                                 TMR54_bit           _BIT_ACCESS(TMR5L,4)
// TMR5L<TMR55>
extern volatile __bit                   TMR55               __at(0x10C5);	// @ (0x218 * 8 + 5)
#define                                 TMR55_bit           _BIT_ACCESS(TMR5L,5)
// TMR5L<TMR56>
extern volatile __bit                   TMR56               __at(0x10C6);	// @ (0x218 * 8 + 6)
#define                                 TMR56_bit           _BIT_ACCESS(TMR5L,6)
// TMR5L<TMR57>
extern volatile __bit                   TMR57               __at(0x10C7);	// @ (0x218 * 8 + 7)
#define                                 TMR57_bit           _BIT_ACCESS(TMR5L,7)
// TMR5H<TMR58>
extern volatile __bit                   TMR58               __at(0x10C8);	// @ (0x219 * 8 + 0)
#define                                 TMR58_bit           _BIT_ACCESS(TMR5H,0)
// TMR5H<TMR59>
extern volatile __bit                   TMR59               __at(0x10C9);	// @ (0x219 * 8 + 1)
#define                                 TMR59_bit           _BIT_ACCESS(TMR5H,1)
// PIE5<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x38DA);	// @ (0x71B * 8 + 2)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE5,2)
// PIR5<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0x388A);	// @ (0x711 * 8 + 2)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR5,2)
// TMR5H<TMR5H0>
extern volatile __bit                   TMR5H0              __at(0x10C8);	// @ (0x219 * 8 + 0)
#define                                 TMR5H0_bit          _BIT_ACCESS(TMR5H,0)
// TMR5H<TMR5H1>
extern volatile __bit                   TMR5H1              __at(0x10C9);	// @ (0x219 * 8 + 1)
#define                                 TMR5H1_bit          _BIT_ACCESS(TMR5H,1)
// TMR5H<TMR5H2>
extern volatile __bit                   TMR5H2              __at(0x10CA);	// @ (0x219 * 8 + 2)
#define                                 TMR5H2_bit          _BIT_ACCESS(TMR5H,2)
// TMR5H<TMR5H3>
extern volatile __bit                   TMR5H3              __at(0x10CB);	// @ (0x219 * 8 + 3)
#define                                 TMR5H3_bit          _BIT_ACCESS(TMR5H,3)
// TMR5H<TMR5H4>
extern volatile __bit                   TMR5H4              __at(0x10CC);	// @ (0x219 * 8 + 4)
#define                                 TMR5H4_bit          _BIT_ACCESS(TMR5H,4)
// TMR5H<TMR5H5>
extern volatile __bit                   TMR5H5              __at(0x10CD);	// @ (0x219 * 8 + 5)
#define                                 TMR5H5_bit          _BIT_ACCESS(TMR5H,5)
// TMR5H<TMR5H6>
extern volatile __bit                   TMR5H6              __at(0x10CE);	// @ (0x219 * 8 + 6)
#define                                 TMR5H6_bit          _BIT_ACCESS(TMR5H,6)
// TMR5H<TMR5H7>
extern volatile __bit                   TMR5H7              __at(0x10CF);	// @ (0x219 * 8 + 7)
#define                                 TMR5H7_bit          _BIT_ACCESS(TMR5H,7)
// PIE4<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x38D4);	// @ (0x71A * 8 + 4)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE4,4)
// PIR4<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0x3884);	// @ (0x710 * 8 + 4)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR4,4)
// TMR5L<TMR5L0>
extern volatile __bit                   TMR5L0              __at(0x10C0);	// @ (0x218 * 8 + 0)
#define                                 TMR5L0_bit          _BIT_ACCESS(TMR5L,0)
// TMR5L<TMR5L1>
extern volatile __bit                   TMR5L1              __at(0x10C1);	// @ (0x218 * 8 + 1)
#define                                 TMR5L1_bit          _BIT_ACCESS(TMR5L,1)
// TMR5L<TMR5L2>
extern volatile __bit                   TMR5L2              __at(0x10C2);	// @ (0x218 * 8 + 2)
#define                                 TMR5L2_bit          _BIT_ACCESS(TMR5L,2)
// TMR5L<TMR5L3>
extern volatile __bit                   TMR5L3              __at(0x10C3);	// @ (0x218 * 8 + 3)
#define                                 TMR5L3_bit          _BIT_ACCESS(TMR5L,3)
// TMR5L<TMR5L4>
extern volatile __bit                   TMR5L4              __at(0x10C4);	// @ (0x218 * 8 + 4)
#define                                 TMR5L4_bit          _BIT_ACCESS(TMR5L,4)
// TMR5L<TMR5L5>
extern volatile __bit                   TMR5L5              __at(0x10C5);	// @ (0x218 * 8 + 5)
#define                                 TMR5L5_bit          _BIT_ACCESS(TMR5L,5)
// TMR5L<TMR5L6>
extern volatile __bit                   TMR5L6              __at(0x10C6);	// @ (0x218 * 8 + 6)
#define                                 TMR5L6_bit          _BIT_ACCESS(TMR5L,6)
// TMR5L<TMR5L7>
extern volatile __bit                   TMR5L7              __at(0x10C7);	// @ (0x218 * 8 + 7)
#define                                 TMR5L7_bit          _BIT_ACCESS(TMR5L,7)
// PMD1<TMR5MD>
extern volatile __bit                   TMR5MD              __at(0x3CBD);	// @ (0x797 * 8 + 5)
#define                                 TMR5MD_bit          _BIT_ACCESS(PMD1,5)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x10D0);	// @ (0x21A * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// PIE4<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x38D5);	// @ (0x71A * 8 + 5)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE4,5)
// PIR4<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0x3885);	// @ (0x710 * 8 + 5)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR4,5)
// PMD1<TMR6MD>
extern volatile __bit                   TMR6MD              __at(0x3CBE);	// @ (0x797 * 8 + 6)
#define                                 TMR6MD_bit          _BIT_ACCESS(PMD1,6)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x14D7);	// @ (0x29A * 8 + 7)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,7)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x88);	// @ (0x11 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x89);	// @ (0x11 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x8A);	// @ (0x11 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x8B);	// @ (0x11 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x8C);	// @ (0x11 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x8D);	// @ (0x11 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x8E);	// @ (0x11 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x8F);	// @ (0x11 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x90);	// @ (0x12 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x91);	// @ (0x12 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x92);	// @ (0x12 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x93);	// @ (0x12 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x94);	// @ (0x12 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x96);	// @ (0x12 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x97);	// @ (0x12 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x98);	// @ (0x13 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x99);	// @ (0x13 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x9A);	// @ (0x13 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x9B);	// @ (0x13 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x9C);	// @ (0x13 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x9D);	// @ (0x13 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x9E);	// @ (0x13 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x9F);	// @ (0x13 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// TX1STA<TRMT>
extern volatile __bit                   TRMT                __at(0x8F1);	// @ (0x11E * 8 + 1)
#define                                 TRMT_bit            _BIT_ACCESS(TX1STA,1)
// SCANTRIG<TSEL0>
extern volatile __bit                   TSEL0               __at(0x2088);	// @ (0x411 * 8 + 0)
#define                                 TSEL0_bit           _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<TSEL1>
extern volatile __bit                   TSEL1               __at(0x2089);	// @ (0x411 * 8 + 1)
#define                                 TSEL1_bit           _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<TSEL2>
extern volatile __bit                   TSEL2               __at(0x208A);	// @ (0x411 * 8 + 2)
#define                                 TSEL2_bit           _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<TSEL3>
extern volatile __bit                   TSEL3               __at(0x208B);	// @ (0x411 * 8 + 3)
#define                                 TSEL3_bit           _BIT_ACCESS(SCANTRIG,3)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x4865);	// @ (0x90C * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x4864);	// @ (0x90C * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// TX1STA<TX9>
extern volatile __bit                   TX9                 __at(0x8F6);	// @ (0x11E * 8 + 6)
#define                                 TX9_bit             _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9D>
extern volatile __bit                   TX9D                __at(0x8F0);	// @ (0x11E * 8 + 0)
#define                                 TX9D_bit            _BIT_ACCESS(TX1STA,0)
// TX1STA<TXEN>
extern volatile __bit                   TXEN                __at(0x8F5);	// @ (0x11E * 8 + 5)
#define                                 TXEN_bit            _BIT_ACCESS(TX1STA,5)
// PIE3<TXIE>
extern volatile __bit                   TXIE                __at(0x38CC);	// @ (0x719 * 8 + 4)
#define                                 TXIE_bit            _BIT_ACCESS(PIE3,4)
// PIR3<TXIF>
extern volatile __bit                   TXIF                __at(0x387C);	// @ (0x70F * 8 + 4)
#define                                 TXIF_bit            _BIT_ACCESS(PIR3,4)
// TXPPS<TXPPS0>
extern volatile __bit                   TXPPS0              __at(0xF660);	// @ (0x1ECC * 8 + 0)
#define                                 TXPPS0_bit          _BIT_ACCESS(TXPPS,0)
// TXPPS<TXPPS1>
extern volatile __bit                   TXPPS1              __at(0xF661);	// @ (0x1ECC * 8 + 1)
#define                                 TXPPS1_bit          _BIT_ACCESS(TXPPS,1)
// TXPPS<TXPPS2>
extern volatile __bit                   TXPPS2              __at(0xF662);	// @ (0x1ECC * 8 + 2)
#define                                 TXPPS2_bit          _BIT_ACCESS(TXPPS,2)
// TXPPS<TXPPS3>
extern volatile __bit                   TXPPS3              __at(0xF663);	// @ (0x1ECC * 8 + 3)
#define                                 TXPPS3_bit          _BIT_ACCESS(TXPPS,3)
// TXPPS<TXPPS4>
extern volatile __bit                   TXPPS4              __at(0xF664);	// @ (0x1ECC * 8 + 4)
#define                                 TXPPS4_bit          _BIT_ACCESS(TXPPS,4)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// SSP2STAT<UA2>
extern volatile __bit                   UA2                 __at(0xCC9);	// @ (0x199 * 8 + 1)
#define                                 UA2_bit             _BIT_ACCESS(SSP2STAT,1)
// PMD4<UART1MD>
extern volatile __bit                   UART1MD             __at(0x3CD6);	// @ (0x79A * 8 + 6)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD4,6)
// VREGCON<VREGPM>
extern volatile __bit                   VREGPM              __at(0x4091);	// @ (0x812 * 8 + 1)
#define                                 VREGPM_bit          _BIT_ACCESS(VREGCON,1)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// SSP2CON1<WCOL2>
extern volatile __bit                   WCOL2               __at(0xCD7);	// @ (0x19A * 8 + 7)
#define                                 WCOL2_bit           _BIT_ACCESS(SSP2CON1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x406C);	// @ (0x80D * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x406D);	// @ (0x80D * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x406E);	// @ (0x80D * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x4063);	// @ (0x80C * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x4065);	// @ (0x80C * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTPSL<WDTPSCNT0>
extern volatile __bit                   WDTPSCNT0           __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 WDTPSCNT0_bit       _BIT_ACCESS(WDTPSL,0)
// WDTPSL<WDTPSCNT1>
extern volatile __bit                   WDTPSCNT1           __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 WDTPSCNT1_bit       _BIT_ACCESS(WDTPSL,1)
// WDTPSH<WDTPSCNT10>
extern volatile __bit                   WDTPSCNT10          __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 WDTPSCNT10_bit      _BIT_ACCESS(WDTPSH,2)
// WDTPSH<WDTPSCNT11>
extern volatile __bit                   WDTPSCNT11          __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 WDTPSCNT11_bit      _BIT_ACCESS(WDTPSH,3)
// WDTPSH<WDTPSCNT12>
extern volatile __bit                   WDTPSCNT12          __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 WDTPSCNT12_bit      _BIT_ACCESS(WDTPSH,4)
// WDTPSH<WDTPSCNT13>
extern volatile __bit                   WDTPSCNT13          __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 WDTPSCNT13_bit      _BIT_ACCESS(WDTPSH,5)
// WDTPSH<WDTPSCNT14>
extern volatile __bit                   WDTPSCNT14          __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 WDTPSCNT14_bit      _BIT_ACCESS(WDTPSH,6)
// WDTPSH<WDTPSCNT15>
extern volatile __bit                   WDTPSCNT15          __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 WDTPSCNT15_bit      _BIT_ACCESS(WDTPSH,7)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTPSL<WDTPSCNT2>
extern volatile __bit                   WDTPSCNT2           __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 WDTPSCNT2_bit       _BIT_ACCESS(WDTPSL,2)
// WDTPSL<WDTPSCNT3>
extern volatile __bit                   WDTPSCNT3           __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 WDTPSCNT3_bit       _BIT_ACCESS(WDTPSL,3)
// WDTPSL<WDTPSCNT4>
extern volatile __bit                   WDTPSCNT4           __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 WDTPSCNT4_bit       _BIT_ACCESS(WDTPSL,4)
// WDTPSL<WDTPSCNT5>
extern volatile __bit                   WDTPSCNT5           __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 WDTPSCNT5_bit       _BIT_ACCESS(WDTPSL,5)
// WDTPSL<WDTPSCNT6>
extern volatile __bit                   WDTPSCNT6           __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 WDTPSCNT6_bit       _BIT_ACCESS(WDTPSL,6)
// WDTPSL<WDTPSCNT7>
extern volatile __bit                   WDTPSCNT7           __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 WDTPSCNT7_bit       _BIT_ACCESS(WDTPSL,7)
// WDTPSH<WDTPSCNT8>
extern volatile __bit                   WDTPSCNT8           __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 WDTPSCNT8_bit       _BIT_ACCESS(WDTPSH,0)
// WDTPSH<WDTPSCNT9>
extern volatile __bit                   WDTPSCNT9           __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 WDTPSCNT9_bit       _BIT_ACCESS(WDTPSH,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0xF9C8);	// @ (0x1F39 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0xF9C9);	// @ (0x1F39 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0xF9CA);	// @ (0x1F39 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0xF9CB);	// @ (0x1F39 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0xF9CC);	// @ (0x1F39 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0xF9CD);	// @ (0x1F39 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUA<WPUA6>
extern volatile __bit                   WPUA6               __at(0xF9CE);	// @ (0x1F39 * 8 + 6)
#define                                 WPUA6_bit           _BIT_ACCESS(WPUA,6)
// WPUA<WPUA7>
extern volatile __bit                   WPUA7               __at(0xF9CF);	// @ (0x1F39 * 8 + 7)
#define                                 WPUA7_bit           _BIT_ACCESS(WPUA,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0xFA20);	// @ (0x1F44 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0xFA21);	// @ (0x1F44 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0xFA22);	// @ (0x1F44 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0xFA23);	// @ (0x1F44 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0xFA24);	// @ (0x1F44 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0xFA25);	// @ (0x1F44 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0xFA26);	// @ (0x1F44 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0xFA27);	// @ (0x1F44 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0xFA78);	// @ (0x1F4F * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0xFA79);	// @ (0x1F4F * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0xFA7A);	// @ (0x1F4F * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0xFA7B);	// @ (0x1F4F * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0xFA7C);	// @ (0x1F4F * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0xFA7D);	// @ (0x1F4F * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0xFA7E);	// @ (0x1F4F * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0xFA7F);	// @ (0x1F4F * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// WPUE<WPUE0>
extern volatile __bit                   WPUE0               __at(0xFB28);	// @ (0x1F65 * 8 + 0)
#define                                 WPUE0_bit           _BIT_ACCESS(WPUE,0)
// WPUE<WPUE1>
extern volatile __bit                   WPUE1               __at(0xFB29);	// @ (0x1F65 * 8 + 1)
#define                                 WPUE1_bit           _BIT_ACCESS(WPUE,1)
// WPUE<WPUE2>
extern volatile __bit                   WPUE2               __at(0xFB2A);	// @ (0x1F65 * 8 + 2)
#define                                 WPUE2_bit           _BIT_ACCESS(WPUE,2)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0x40F1);	// @ (0x81E * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0x40F2);	// @ (0x81E * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x40F3);	// @ (0x81E * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// BAUD1CON<WUE>
extern volatile __bit                   WUE                 __at(0x8F9);	// @ (0x11F * 8 + 1)
#define                                 WUE_bit             _BIT_ACCESS(BAUD1CON,1)
// CRCXORL<X1>
extern volatile __bit                   X1                  __at(0x20E1);	// @ (0x41C * 8 + 1)
#define                                 X1_bit              _BIT_ACCESS(CRCXORL,1)
// CRCXORH<X10>
extern volatile __bit                   X10                 __at(0x20EA);	// @ (0x41D * 8 + 2)
#define                                 X10_bit             _BIT_ACCESS(CRCXORH,2)
// CRCXORH<X11>
extern volatile __bit                   X11                 __at(0x20EB);	// @ (0x41D * 8 + 3)
#define                                 X11_bit             _BIT_ACCESS(CRCXORH,3)
// CRCXORH<X12>
extern volatile __bit                   X12                 __at(0x20EC);	// @ (0x41D * 8 + 4)
#define                                 X12_bit             _BIT_ACCESS(CRCXORH,4)
// CRCXORH<X13>
extern volatile __bit                   X13                 __at(0x20ED);	// @ (0x41D * 8 + 5)
#define                                 X13_bit             _BIT_ACCESS(CRCXORH,5)
// CRCXORH<X14>
extern volatile __bit                   X14                 __at(0x20EE);	// @ (0x41D * 8 + 6)
#define                                 X14_bit             _BIT_ACCESS(CRCXORH,6)
// CRCXORH<X15>
extern volatile __bit                   X15                 __at(0x20EF);	// @ (0x41D * 8 + 7)
#define                                 X15_bit             _BIT_ACCESS(CRCXORH,7)
// CRCXORL<X2>
extern volatile __bit                   X2                  __at(0x20E2);	// @ (0x41C * 8 + 2)
#define                                 X2_bit              _BIT_ACCESS(CRCXORL,2)
// CRCXORL<X3>
extern volatile __bit                   X3                  __at(0x20E3);	// @ (0x41C * 8 + 3)
#define                                 X3_bit              _BIT_ACCESS(CRCXORL,3)
// CRCXORL<X4>
extern volatile __bit                   X4                  __at(0x20E4);	// @ (0x41C * 8 + 4)
#define                                 X4_bit              _BIT_ACCESS(CRCXORL,4)
// CRCXORL<X5>
extern volatile __bit                   X5                  __at(0x20E5);	// @ (0x41C * 8 + 5)
#define                                 X5_bit              _BIT_ACCESS(CRCXORL,5)
// CRCXORL<X6>
extern volatile __bit                   X6                  __at(0x20E6);	// @ (0x41C * 8 + 6)
#define                                 X6_bit              _BIT_ACCESS(CRCXORL,6)
// CRCXORL<X7>
extern volatile __bit                   X7                  __at(0x20E7);	// @ (0x41C * 8 + 7)
#define                                 X7_bit              _BIT_ACCESS(CRCXORL,7)
// CRCXORH<X8>
extern volatile __bit                   X8                  __at(0x20E8);	// @ (0x41D * 8 + 0)
#define                                 X8_bit              _BIT_ACCESS(CRCXORH,0)
// CRCXORH<X9>
extern volatile __bit                   X9                  __at(0x20E9);	// @ (0x41D * 8 + 1)
#define                                 X9_bit              _BIT_ACCESS(CRCXORH,1)
// PIE2<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x38C6);	// @ (0x718 * 8 + 6)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE2,6)
// PIR2<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x3876);	// @ (0x70E * 8 + 6)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR2,6)
// ZCDCON<ZCDINTN>
extern volatile __bit                   ZCDINTN             __at(0x48F8);	// @ (0x91F * 8 + 0)
#define                                 ZCDINTN_bit         _BIT_ACCESS(ZCDCON,0)
// ZCDCON<ZCDINTP>
extern volatile __bit                   ZCDINTP             __at(0x48F9);	// @ (0x91F * 8 + 1)
#define                                 ZCDINTP_bit         _BIT_ACCESS(ZCDCON,1)
// PMD2<ZCDMD>
extern volatile __bit                   ZCDMD               __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 ZCDMD_bit           _BIT_ACCESS(PMD2,0)
// ZCDCON<ZCDOUT>
extern volatile __bit                   ZCDOUT              __at(0x48FD);	// @ (0x91F * 8 + 5)
#define                                 ZCDOUT_bit          _BIT_ACCESS(ZCDCON,5)
// ZCDCON<ZCDPOL>
extern volatile __bit                   ZCDPOL              __at(0x48FC);	// @ (0x91F * 8 + 4)
#define                                 ZCDPOL_bit          _BIT_ACCESS(ZCDCON,4)
// ZCDCON<ZCDSEN>
extern volatile __bit                   ZCDSEN              __at(0x48FF);	// @ (0x91F * 8 + 7)
#define                                 ZCDSEN_bit          _BIT_ACCESS(ZCDCON,7)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// STATUS_SHAD<Z_SHAD>
extern volatile __bit                   Z_SHAD              __at(0xFF22);	// @ (0x1FE4 * 8 + 2)
#define                                 Z_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,2)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// SSP2STAT<nADDRESS2>
extern volatile __bit                   nADDRESS2           __at(0xCCD);	// @ (0x199 * 8 + 5)
#define                                 nADDRESS2_bit       _BIT_ACCESS(SSP2STAT,5)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// ADCON0<nDONE>
extern volatile __bit                   nDONE               __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 nDONE_bit           _BIT_ACCESS(ADCON0,0)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x409A);	// @ (0x813 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x409B);	// @ (0x813 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x409C);	// @ (0x813 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// T3CON<nT3SYNC>
extern volatile __bit                   nT3SYNC             __at(0x10A2);	// @ (0x214 * 8 + 2)
#define                                 nT3SYNC_bit         _BIT_ACCESS(T3CON,2)
// T5CON<nT5SYNC>
extern volatile __bit                   nT5SYNC             __at(0x10D2);	// @ (0x21A * 8 + 2)
#define                                 nT5SYNC_bit         _BIT_ACCESS(T5CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x409D);	// @ (0x813 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)
// SSP2STAT<nWRITE2>
extern volatile __bit                   nWRITE2             __at(0xCCA);	// @ (0x199 * 8 + 2)
#define                                 nWRITE2_bit         _BIT_ACCESS(SSP2STAT,2)

#endif // _PIC16F18857_H_
